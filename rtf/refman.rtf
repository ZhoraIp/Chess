{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\info 
{\title {\comment Chess }Chess}
{\comment Generated by doxygen 1.9.5.}
{\creatim \yr2022\mo12\dy27\hr17\min49\sec29}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt Chess}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Version \par{\field\fldedit {\*\fldinst CREATEDATE \\*MERGEFORMAT}{\fldrslt Tue Dec 27 2022 }}\par
\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Table of Contents\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
How to become a contributor and submit your own code{\tc \v How to become a contributor and submit your own code}\par \pard\plain 
{\bkmkstart AAAAAAADXL}
{\bkmkend AAAAAAADXL}
\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Contributor License Agreements
\par}
{\tc\tcl2 \v Contributor License Agreements}
We'd love to accept your patches! Before we can take them, we have to jump a couple of legal hurdles.\par
Please fill out either the individual or corporate Contributor License Agreement (CLA).\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If you are an individual writing original source code and you're sure you own the intellectual property, then you'll need to sign an {\f2 individual CLA}.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If you work for a company that wants to allow you to contribute your work, then you'll need to sign a {\f2 corporate CLA}.\par}
\par
Follow either of the two links above to access the appropriate CLA and instructions for how to sign and return it. Once we receive it, we'll be able to accept your pull requests.\par}
{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Are you a Googler?
\par}
{\tc\tcl2 \v Are you a Googler?}
If you are a Googler, please make an attempt to submit an internal contribution rather than a GitHub Pull Request. If you are not able to submit internally, a PR is acceptable as an alternative.\par}
{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Contributing A Patch
\par}
{\tc\tcl2 \v Contributing A Patch}
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Submit an issue describing your proposed change to the {\f2 issue tracker}.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
2.\tab Please don't mix more than one logical change per submittal, because it makes the history hard to follow. If you want to make a change that doesn't have a corresponding issue in the issue tracker, please create one.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
3.\tab Also, coordinate with team members that are listed on the issue in question. This ensures that work isn't being duplicated and communicating your plan early also generally leads to better patches.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
4.\tab If your proposed change is accepted, and you haven't already done so, sign a Contributor License Agreement (see details above).\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
5.\tab Fork the desired repo, develop and test your code changes.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
6.\tab Ensure that your code adheres to the existing style in the sample to which you are contributing.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
7.\tab Ensure that your code has an appropriate set of unit tests which all pass.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
8.\tab Submit a pull request.\par}
\par
\par}
{\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
The Google Test and Google Mock Communities
\par}
{\tc\tcl2 \v The Google Test and Google Mock Communities}
The Google Test community exists primarily through the {\f2 discussion group} and the GitHub repository. Likewise, the Google {\b Mock} community exists primarily through their own {\f2 discussion group}. You are definitely encouraged to contribute to the discussion and you can also help us to keep the effectiveness of the group high by following and promoting the guidelines listed here.\par
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Please Be Friendly
\par}
{\tc\tcl3 \v Please Be Friendly}
Showing courtesy and respect to others is a vital part of the Google culture, and we strongly encourage everyone participating in Google Test development to join us in accepting nothing less. Of course, being courteous is not the same as failing to constructively disagree with each other, but it does mean that we should be respectful of each other when enumerating the 42 technical reasons that a particular proposal may not be the best choice. There's never a reason to be antagonistic or dismissive toward anyone who is sincerely trying to contribute to a discussion.\par
Sure, C++ testing is serious business and all that, but it's also a lot of fun. Let's keep it that way. Let's strive to be one of the friendliest communities in all of open source.\par
As always, discuss Google Test in the official GoogleTest discussion group. You don't have to actually submit code in order to sign up. Your participation itself is a valuable contribution.\par}
\par}
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Style
\par}
{\tc\tcl2 \v Style}
To keep the source consistent, readable, diffable and easy to merge, we use a fairly rigid coding style, as defined by the {\f2 google-styleguide} project. All patches will be expected to conform to the style outlined {\f2 here}. Use {\f2 .clang-format} to check your formatting.\par}
{\bkmkstart AAAAAAAACI}
{\bkmkend AAAAAAAACI}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Requirements for Contributors
\par}
{\tc\tcl2 \v Requirements for Contributors}
If you plan to contribute a patch, you need to build Google Test, Google {\b Mock}, and their own tests from a git checkout, which has further requirements:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Python} v2.3 or newer (for running some of the tests and re-generating certain source files from templates)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 CMake} v2.8.12 or newer\par}
\par
\par}
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Developing Google Test and Google Mock
\par}
{\tc\tcl2 \v Developing Google Test and Google Mock}
This section discusses how to make your own changes to the Google Test project.\par
{\bkmkstart AAAAAAAACK}
{\bkmkend AAAAAAAACK}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Testing Google Test and Google Mock Themselves
\par}
{\tc\tcl3 \v Testing Google Test and Google Mock Themselves}
To make sure your changes work as intended and don't break existing functionality, you'll want to compile and run Google Test and GoogleMock's own tests. For that you can use CMake: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid mkdir mybuild\par
cd mybuild\par
cmake -Dgtest_build_tests=ON -Dgmock_build_tests=ON $\{GTEST_REPO_DIR\}\par
}
 To choose between building only Google Test or Google {\b Mock}, you may modify your cmake command to be one of each {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid cmake -Dgtest_build_tests=ON $\{GTEST_DIR\} # sets up Google Test tests\par
cmake -Dgmock_build_tests=ON $\{GMOCK_DIR\} # sets up Google Mock tests\par
}
 Make sure you have Python installed, as some of Google Test's tests are written in Python. If the cmake command complains about not being able to find Python ({\f2 Could NOT find PythonInterp (missing: PYTHON_EXECUTABLE)} ), try telling it explicitly where your Python executable can be found: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid cmake -DPYTHON_EXECUTABLE=path/to/python ...\par
}
 Next, you can build Google Test and / or Google {\b Mock} and all desired tests. On *nix, this is usually done by {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid make\par
}
 To run the tests, do {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid make test\par
}
 All tests should pass. \par}
\par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Advanced googletest Topics{\tc \v Advanced googletest Topics}\par \pard\plain 
{\bkmkstart AAAAAAADXM}
{\bkmkend AAAAAAADXM}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Introduction
\par}
{\tc\tcl2 \v Introduction}
Now that you have read the {\b googletest Primer} and learned how to write tests using googletest, it's time to learn some new tricks. This document will show you more assertions as well as how to construct complex failure messages, propagate fatal failures, reuse and speed up your test fixtures, and use various flags with your tests.\par}
{\bkmkstart AAAAAAAACM}
{\bkmkend AAAAAAAACM}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
More Assertions
\par}
{\tc\tcl2 \v More Assertions}
This section covers some less frequently used, but still significant, assertions.\par
{\bkmkstart AAAAAAAACN}
{\bkmkend AAAAAAAACN}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Explicit Success and Failure
\par}
{\tc\tcl3 \v Explicit Success and Failure}
See {\f2 Explicit Success and Failure} in the Assertions Reference.\par}
{\bkmkstart AAAAAAAACO}
{\bkmkend AAAAAAAACO}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Exception Assertions
\par}
{\tc\tcl3 \v Exception Assertions}
See {\f2 Exception Assertions} in the Assertions Reference.\par}
{\bkmkstart AAAAAAAACP}
{\bkmkend AAAAAAAACP}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Predicate Assertions for Better Error Messages
\par}
{\tc\tcl3 \v Predicate Assertions for Better Error Messages}
Even though googletest has a rich set of assertions, they can never be complete, as it's impossible (nor a good idea) to anticipate all scenarios a user might run into. Therefore, sometimes a user has to use {\f2 EXPECT_TRUE()}  to check a complex expression, for lack of a better macro. This has the problem of not showing you the values of the parts of the expression, making it hard to understand what went wrong. As a workaround, some users choose to construct the failure message by themselves, streaming it into {\f2 EXPECT_TRUE()} . However, this is awkward especially when the expression has side-effects or is expensive to evaluate.\par
googletest gives you three different options to solve this problem:\par
{\bkmkstart AAAAAAAACQ}
{\bkmkend AAAAAAAACQ}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Using an Existing Boolean Function
\par}
{\tc\tcl4 \v Using an Existing Boolean Function}
If you already have a function or functor that returns {\f2 bool}  (or a type that can be implicitly converted to {\f2 bool} ), you can use it in a {\i predicate assertion}  to get the function arguments printed for free. See {\f2 {\f2 EXPECT_PRED*} } in the Assertions Reference for details.\par}
{\bkmkstart AAAAAAAACR}
{\bkmkend AAAAAAAACR}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Using a Function That Returns an AssertionResult
\par}
{\tc\tcl4 \v Using a Function That Returns an AssertionResult}
While {\f2 EXPECT_PRED*()}  and friends are handy for a quick job, the syntax is not satisfactory: you have to use different macros for different arities, and it feels more like Lisp than C++. The {\f2 ::testing::AssertionResult}  class solves this problem.\par
An {\f2 AssertionResult}  object represents the result of an assertion (whether it's a success or a failure, and an associated message). You can create an {\f2 AssertionResult}  using one of these factory functions:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
namespace testing \{\par
\par
// Returns an AssertionResult object to indicate that an assertion has\par
// succeeded.\par
AssertionResult AssertionSuccess();\par
\par
// Returns an AssertionResult object to indicate that an assertion has\par
// failed.\par
AssertionResult AssertionFailure();\par
\par
\}\par
}
\par
You can then use the {\f2 <<}  operator to stream messages to the {\f2 AssertionResult}  object.\par
To provide more readable messages in Boolean assertions (e.g. {\f2 EXPECT_TRUE()} ), write a predicate function that returns {\f2 AssertionResult}  instead of {\f2 bool} . For example, if you define {\f2 IsEven()}  as:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
testing::AssertionResult IsEven(int n) \{\par
  if ((n % 2) == 0)\par
    return testing::AssertionSuccess();\par
  else\par
    return testing::AssertionFailure() << n << " is odd";\par
\}\par
}
\par
instead of:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
bool IsEven(int n) \{\par
  return (n % 2) == 0;\par
\}\par
}
\par
the failed assertion {\f2 EXPECT_TRUE(IsEven(Fib(4)))}  will print:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Value of: IsEven(Fib(4))\par
  Actual: false (3 is odd)\par
Expected: true\par
}
\par
instead of a more opaque\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Value of: IsEven(Fib(4))\par
  Actual: false\par
Expected: true\par
}
\par
If you want informative messages in {\f2 EXPECT_FALSE}  and {\f2 ASSERT_FALSE}  as well (one third of Boolean assertions in the Google code base are negative ones), and are fine with making the predicate slower in the success case, you can supply a success message:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
testing::AssertionResult IsEven(int n) \{\par
  if ((n % 2) == 0)\par
    return testing::AssertionSuccess() << n << " is even";\par
  else\par
    return testing::AssertionFailure() << n << " is odd";\par
\}\par
}
\par
Then the statement {\f2 EXPECT_FALSE(IsEven(Fib(6)))}  will print\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Value of: IsEven(Fib(6))\par
   Actual: true (8 is even)\par
Expected: false\par
}
\par}
{\bkmkstart AAAAAAAACS}
{\bkmkend AAAAAAAACS}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Using a Predicate-Formatter
\par}
{\tc\tcl4 \v Using a Predicate-Formatter}
If you find the default message generated by {\f2 {\f2 EXPECT_PRED*} } and {\f2 {\f2 EXPECT_TRUE} } unsatisfactory, or some arguments to your predicate do not support streaming to {\f2 ostream} , you can instead use {\i predicate-formatter assertions}  to {\i fully}  customize how the message is formatted. See {\f2 {\f2 EXPECT_PRED_FORMAT*} } in the Assertions Reference for details.\par}
\par}
{\bkmkstart AAAAAAAACT}
{\bkmkend AAAAAAAACT}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Floating-Point Comparison
\par}
{\tc\tcl3 \v Floating-Point Comparison}
See {\f2 Floating-Point Comparison} in the Assertions Reference.\par
{\bkmkstart AAAAAAAACU}
{\bkmkend AAAAAAAACU}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Floating-Point Predicate-Format Functions
\par}
{\tc\tcl4 \v Floating-Point Predicate-Format Functions}
Some floating-point operations are useful, but not that often used. In order to avoid an explosion of new macros, we provide them as predicate-format functions that can be used in the predicate assertion macro {\f2 {\f2 EXPECT_PRED_FORMAT2} }, for example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
using ::testing::FloatLE;\par
using ::testing::DoubleLE;\par
...\par
EXPECT_PRED_FORMAT2(FloatLE, val1, val2);\par
EXPECT_PRED_FORMAT2(DoubleLE, val1, val2);\par
}
\par
The above code verifies that {\f2 val1}  is less than, or approximately equal to, {\f2 val2} .\par}
\par}
{\bkmkstart AAAAAAAACV}
{\bkmkend AAAAAAAACV}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Asserting Using gMock Matchers
\par}
{\tc\tcl3 \v Asserting Using gMock Matchers}
See {\f2 {\f2 EXPECT_THAT} } in the Assertions Reference.\par}
{\bkmkstart AAAAAAAACW}
{\bkmkend AAAAAAAACW}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
More String Assertions
\par}
{\tc\tcl3 \v More String Assertions}
(Please read the previous section first if you haven't.)\par
You can use the gMock {\f2 string matchers} with {\f2 {\f2 EXPECT_THAT} } to do more string comparison tricks (sub-string, prefix, suffix, regular expression, and etc). For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
using ::testing::HasSubstr;\par
using ::testing::MatchesRegex;\par
...\par
  ASSERT_THAT(foo_string, HasSubstr("needle"));\par
  EXPECT_THAT(bar_string, MatchesRegex("\\\\w*\\\\d+"));\par
}
\par}
{\bkmkstart AAAAAAAACX}
{\bkmkend AAAAAAAACX}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Windows HRESULT assertions
\par}
{\tc\tcl3 \v Windows HRESULT assertions}
See {\f2 Windows HRESULT Assertions} in the Assertions Reference.\par}
{\bkmkstart AAAAAAAACY}
{\bkmkend AAAAAAAACY}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Type Assertions
\par}
{\tc\tcl3 \v Type Assertions}
You can call the function\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
::testing::StaticAssertTypeEq<T1, T2>();\par
}
\par
to assert that types {\f2 T1}  and {\f2 T2}  are the same. The function does nothing if the assertion is satisfied. If the types are different, the function call will fail to compile, the compiler error message will say that {\f2 T1 and T2 are not the same type}  and most likely (depending on the compiler) show you the actual values of {\f2 T1}  and {\f2 T2} . This is mainly useful inside template code.\par
{\b Caveat} : When used inside a member function of a class template or a function template, {\f2 StaticAssertTypeEq<T1, T2>()}  is effective only if the function is instantiated. For example, given:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
template <typename T> class Foo \{\par
 public:\par
  void Bar() \{ testing::StaticAssertTypeEq<int, T>(); \}\par
\};\par
}
\par
the code:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
void Test1() \{ Foo<bool> foo; \}\par
}
\par
will not generate a compiler error, as {\f2 Foo<bool>::Bar()}  is never actually instantiated. Instead, you need:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
void Test2() \{ Foo<bool> foo; foo.Bar(); \}\par
}
\par
to cause a compiler error.\par}
{\bkmkstart AAAAAAAACZ}
{\bkmkend AAAAAAAACZ}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Assertion Placement
\par}
{\tc\tcl3 \v Assertion Placement}
You can use assertions in any C++ function. In particular, it doesn't have to be a method of the test fixture class. The one constraint is that assertions that generate a fatal failure ({\f2 FAIL*}  and {\f2 ASSERT_*} ) can only be used in void-returning functions. This is a consequence of Google's not using exceptions. By placing it in a non-void function you'll get a confusing compile error like {\f2 "error: void value not ignored as it ought to be"}  or \'91"cannot
initialize return object of type 'bool&rsquo; with an rvalue of type 'void'"` or `"error: no viable conversion from 'void' to 'string'"`.\par
If you need to use fatal assertions in a function that returns non-void, one option is to make the function return the value in an out parameter instead. For example, you can rewrite {\f2 T2 Foo(T1 x)}  to {\f2 void Foo(T1 x, T2* result)} . You need to make sure that {\f2 *result}  contains some sensible value even when the function returns prematurely. As the function now returns {\f2 void} , you can use any assertion inside of it.\par
If changing the function's type is not an option, you should just use assertions that generate non-fatal failures, such as {\f2 ADD_FAILURE*}  and {\f2 EXPECT_*} .\par
\{: .callout .note\} NOTE: Constructors and destructors are not considered void-returning functions, according to the C++ language specification, and so you may not use fatal assertions in them; you'll get a compilation error if you try. Instead, either call {\f2 abort}  and crash the entire test executable, or put the fatal assertion in a {\f2 SetUp} /{\f2 TearDown}  function; see {\f2 constructor/destructor vs. {\f2 SetUp} /{\f2 TearDown} }\par
\{: .callout .warning\} WARNING: A fatal assertion in a helper function (private void-returning method) called from a constructor or destructor does not terminate the current test, as your intuition might suggest: it merely returns from the constructor or destructor early, possibly leaving your object in a partially-constructed or partially-destructed state! You almost certainly want to {\f2 abort}  or use {\f2 SetUp} /{\f2 TearDown}  instead.\par}
\par}
{\bkmkstart AAAAAAAADA}
{\bkmkend AAAAAAAADA}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Skipping test execution
\par}
{\tc\tcl2 \v Skipping test execution}
Related to the assertions {\f2 SUCCEED()}  and {\f2 FAIL()} , you can prevent further test execution at runtime with the {\f2 GTEST_SKIP()}  macro. This is useful when you need to check for preconditions of the system under test during runtime and skip tests in a meaningful way.\par
{\f2 GTEST_SKIP()}  can be used in individual test cases or in the {\f2 SetUp()}  methods of classes derived from either {\f2 {\b testing::Environment}}  or {\f2 {\b testing::Test}} . For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
TEST(SkipTest, DoesSkip) \{\par
  GTEST_SKIP() << "Skipping single test";\par
  EXPECT_EQ(0, 1);  // Won't fail; it won't be executed\par
\}\par
\par
class SkipFixture : public ::testing::Test \{\par
 protected:\par
  void SetUp() override \{\par
    GTEST_SKIP() << "Skipping all tests for this fixture";\par
  \}\par
\};\par
\par
// Tests for SkipFixture won't be executed.\par
TEST_F(SkipFixture, SkipsOneTest) \{\par
  EXPECT_EQ(5, 7);  // Won't fail\par
\}\par
}
\par
As with assertion macros, you can stream a custom message into {\f2 GTEST_SKIP()} .\par}
{\bkmkstart AAAAAAAADB}
{\bkmkend AAAAAAAADB}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Teaching googletest How to Print Your Values
\par}
{\tc\tcl2 \v Teaching googletest How to Print Your Values}
When a test assertion such as {\f2 EXPECT_EQ}  fails, googletest prints the argument values to help you debug. It does this using a user-extensible value printer.\par
This printer knows how to print built-in C++ types, native arrays, STL containers, and any type that supports the {\f2 <<}  operator. For other types, it prints the raw bytes in the value and hopes that you the user can figure it out.\par
As mentioned earlier, the printer is {\i extensible} . That means you can teach it to do a better job at printing your particular type than to dump the bytes. To do that, define {\f2 <<}  for your type:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
#include <ostream>\par
\par
namespace foo \{\par
\par
class Bar \{  // We want googletest to be able to print instances of this.\par
...\par
  // Create a free inline friend function.\par
  friend std::ostream& operator<<(std::ostream& os, const Bar& bar) \{\par
    return os << bar.DebugString();  // whatever needed to print bar to os\par
  \}\par
\};\par
\par
// If you can't declare the function in the class it's important that the\par
// << operator is defined in the SAME namespace that defines Bar.  C++'s look-up\par
// rules rely on that.\par
std::ostream& operator<<(std::ostream& os, const Bar& bar) \{\par
  return os << bar.DebugString();  // whatever needed to print bar to os\par
\}\par
\par
\}  // namespace foo\par
}
\par
Sometimes, this might not be an option: your team may consider it bad style to have a {\f2 <<}  operator for {\f2 Bar} , or {\f2 Bar}  may already have a {\f2 <<}  operator that doesn't do what you want (and you cannot change it). If so, you can instead define a {\f2 PrintTo()}  function like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
#include <ostream>\par
\par
namespace foo \{\par
\par
class Bar \{\par
  ...\par
  friend void PrintTo(const Bar& bar, std::ostream* os) \{\par
    *os << bar.DebugString();  // whatever needed to print bar to os\par
  \}\par
\};\par
\par
// If you can't declare the function in the class it's important that PrintTo()\par
// is defined in the SAME namespace that defines Bar.  C++'s look-up rules rely\par
// on that.\par
void PrintTo(const Bar& bar, std::ostream* os) \{\par
  *os << bar.DebugString();  // whatever needed to print bar to os\par
\}\par
\par
\}  // namespace foo\par
}
\par
If you have defined both {\f2 <<}  and {\f2 PrintTo()} , the latter will be used when googletest is concerned. This allows you to customize how the value appears in googletest's output without affecting code that relies on the behavior of its {\f2 <<}  operator.\par
If you want to print a value {\f2 x}  using googletest's value printer yourself, just call {\f2 ::testing::PrintToString(x)} , which returns an {\f2 std::string} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
vector<pair<Bar, int> > bar_ints = GetBarIntVector();\par
\par
EXPECT_TRUE(IsCorrectBarIntVector(bar_ints))\par
    << "bar_ints = " << testing::PrintToString(bar_ints);\par
}
\par}
{\bkmkstart AAAAAAAADC}
{\bkmkend AAAAAAAADC}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Death Tests
\par}
{\tc\tcl2 \v Death Tests}
In many applications, there are assertions that can cause application failure if a condition is not met. These consistency checks, which ensure that the program is in a known good state, are there to fail at the earliest possible time after some program state is corrupted. If the assertion checks the wrong condition, then the program may proceed in an erroneous state, which could lead to memory corruption, security holes, or worse. Hence it is vitally important to test that such assertion statements work as expected.\par
Since these precondition checks cause the processes to die, we call such tests {\i death tests} . More generally, any test that checks that a program terminates (except by throwing an exception) in an expected fashion is also a death test.\par
Note that if a piece of code throws an exception, we don't consider it "death" for the purpose of death tests, as the caller of the code could catch the exception and avoid the crash. If you want to verify exceptions thrown by your code, see Exception Assertions.\par
If you want to test {\f2 EXPECT_*()/ASSERT_*()}  failures in your test code, see "Catching" Failures.\par
{\bkmkstart AAAAAAAADD}
{\bkmkend AAAAAAAADD}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
How to Write a Death Test
\par}
{\tc\tcl3 \v How to Write a Death Test}
GoogleTest provides assertion macros to support death tests. See {\f2 Death Assertions} in the Assertions Reference for details.\par
To write a death test, simply use one of the macros inside your test function. For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
TEST(MyDeathTest, Foo) \{\par
  // This death test uses a compound statement.\par
  ASSERT_DEATH(\{\par
    int n = 5;\par
    Foo(&n);\par
  \}, "Error on line .* of Foo()");\par
\}\par
\par
TEST(MyDeathTest, NormalExit) \{\par
  EXPECT_EXIT(NormalExit(), testing::ExitedWithCode(0), "Success");\par
\}\par
\par
TEST(MyDeathTest, KillProcess) \{\par
  EXPECT_EXIT(KillProcess(), testing::KilledBySignal(SIGKILL),\par
              "Sending myself unblockable signal");\par
\}\par
}
\par
verifies that:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
calling {\f2 Foo(5)}  causes the process to die with the given error message,\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
calling {\f2 NormalExit()}  causes the process to print {\f2 "Success"}  to stderr and exit with exit code 0, and\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
calling {\f2 KillProcess()}  kills the process with signal {\f2 SIGKILL} .\par}
\par
The test function body may contain other assertions and statements as well, if necessary.\par
Note that a death test only cares about three things:\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab does {\f2 statement}  abort or exit the process?\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
2.\tab (in the case of {\f2 ASSERT_EXIT}  and {\f2 EXPECT_EXIT} ) does the exit status satisfy {\f2 predicate} ? Or (in the case of {\f2 ASSERT_DEATH}  and {\f2 EXPECT_DEATH} ) is the exit status non-zero? And\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
3.\tab does the stderr output match {\f2 matcher} ?\par}
\par
In particular, if {\f2 statement}  generates an {\f2 ASSERT_*}  or {\f2 EXPECT_*}  failure, it will {\b not}  cause the death test to fail, as googletest assertions don't abort the process.\par}
{\bkmkstart AAAAAAAADE}
{\bkmkend AAAAAAAADE}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Death Test Naming
\par}
{\tc\tcl3 \v Death Test Naming}
\{: .callout .important\} IMPORTANT: We strongly recommend you to follow the convention of naming your {\b test suite}  (not test) {\f2 *DeathTest}  when it contains a death test, as demonstrated in the above example. The Death Tests And Threads section below explains why.\par
If a test fixture class is shared by normal tests and death tests, you can use {\f2 using}  or {\f2 typedef}  to introduce an alias for the fixture class and avoid duplicating its code:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
class FooTest : public testing::Test \{ ... \};\par
\par
using FooDeathTest = FooTest;\par
\par
TEST_F(FooTest, DoesThis) \{\par
  // normal test\par
\}\par
\par
TEST_F(FooDeathTest, DoesThat) \{\par
  // death test\par
\}\par
}
\par}
{\bkmkstart AAAAAAAADF}
{\bkmkend AAAAAAAADF}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Regular Expression Syntax
\par}
{\tc\tcl3 \v Regular Expression Syntax}
When built with Bazel and using Abseil, googletest uses the {\f2 RE2} syntax. Otherwise, for POSIX systems (Linux, Cygwin, Mac), googletest uses the {\f2 POSIX extended regular expression} syntax. To learn about POSIX syntax, you may want to read this {\f2 Wikipedia entry}.\par
On Windows, googletest uses its own simple regular expression implementation. It lacks many features. For example, we don't support union ({\f2 "x|y"} ), grouping ({\f2 "(xy)"} ), brackets ({\f2 "[xy]"} ), and repetition count ({\f2 "x\{5,7\}"} ), among others. Below is what we do support ({\f2 A}  denotes a literal character, period ({\f2 .} ), or a single {\f2 \\\\}  escape sequence; {\f2 x}  and {\f2 y}  denote regular expressions.):\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Expression   \cell }{Meaning    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 c}    \cell }{matches any literal character {\f2 c}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\d}    \cell }{matches any decimal digit    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\D}    \cell }{matches any character that's not a decimal digit    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\f}    \cell }{matches {\f2 \\f}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\n}    \cell }{matches {\f2 \\n}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\r}    \cell }{matches {\f2 \\r}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\s}    \cell }{matches any ASCII whitespace, including {\f2 \\n}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\S}    \cell }{matches any character that's not a whitespace    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\t}    \cell }{matches {\f2 \\t}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\v}    \cell }{matches {\f2 \\v}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\w}    \cell }{matches any letter, {\f2 _} , or decimal digit    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\W}    \cell }{matches any character that {\f2 \\\\w}  doesn't match    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\c}    \cell }{matches any literal character {\f2 c} , which must be a punctuation    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 .}    \cell }{matches any single character except {\f2 \\n}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 A?}    \cell }{matches 0 or 1 occurrences of {\f2 A}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 A*}    \cell }{matches 0 or many occurrences of {\f2 A}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 A+}    \cell }{matches 1 or many occurrences of {\f2 A}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ^}    \cell }{matches the beginning of a string (not that of each line)    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $}    \cell }{matches the end of a string (not that of each line)    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 xy}    \cell }{matches {\f2 x}  followed by {\f2 y}    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
To help you determine which capability is available on your system, googletest defines macros to govern which regular expression it is using. The macros are: {\f2 GTEST_USES_SIMPLE_RE=1}  or {\f2 GTEST_USES_POSIX_RE=1} . If you want your death tests to work in all cases, you can either {\f2 #if}  on these macros or use the more limited syntax only.\par}
{\bkmkstart AAAAAAAADG}
{\bkmkend AAAAAAAADG}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
How It Works
\par}
{\tc\tcl3 \v How It Works}
See {\f2 Death Assertions} in the Assertions Reference.\par}
{\bkmkstart AAAAAAAADH}
{\bkmkend AAAAAAAADH}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Death Tests And Threads
\par}
{\tc\tcl3 \v Death Tests And Threads}
The reason for the two death test styles has to do with thread safety. Due to well-known problems with forking in the presence of threads, death tests should be run in a single-threaded context. Sometimes, however, it isn't feasible to arrange that kind of environment. For example, statically-initialized modules may start threads before main is ever reached. Once threads have been created, it may be difficult or impossible to clean them up.\par
googletest has three features intended to raise awareness of threading issues.\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab A warning is emitted if multiple threads are running when a death test is encountered.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
2.\tab Test suites with a name ending in "DeathTest" are run before all other tests.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
3.\tab It uses {\f2 clone()}  instead of {\f2 fork()}  to spawn the child process on Linux ({\f2 clone()}  is not available on Cygwin and Mac), as {\f2 fork()}  is more likely to cause the child to hang when the parent process has multiple threads.\par}
\par
It's perfectly fine to create threads inside a death test statement; they are executed in a separate process and cannot affect the parent.\par}
{\bkmkstart AAAAAAAADI}
{\bkmkend AAAAAAAADI}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Death Test Styles
\par}
{\tc\tcl3 \v Death Test Styles}
The "threadsafe" death test style was introduced in order to help mitigate the risks of testing in a possibly multithreaded environment. It trades increased test execution time (potentially dramatically so) for improved thread safety.\par
The automated testing framework does not set the style flag. You can choose a particular style of death tests by setting the flag programmatically:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
GTEST_FLAG_SET(death_test_style, "threadsafe")\par
}
\par
You can do this in {\f2 main()}  to set the style for all death tests in the binary, or in individual tests. Recall that flags are saved before running each test and restored afterwards, so you need not do that yourself. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
int main(int argc, char** argv) \{\par
  testing::InitGoogleTest(&argc, argv);\par
  GTEST_FLAG_SET(death_test_style, "fast");\par
  return RUN_ALL_TESTS();\par
\}\par
\par
TEST(MyDeathTest, TestOne) \{\par
  GTEST_FLAG_SET(death_test_style, "threadsafe");\par
  // This test is run in the "threadsafe" style:\par
  ASSERT_DEATH(ThisShouldDie(), "");\par
\}\par
\par
TEST(MyDeathTest, TestTwo) \{\par
  // This test is run in the "fast" style:\par
  ASSERT_DEATH(ThisShouldDie(), "");\par
\}\par
}
\par}
{\bkmkstart AAAAAAAADJ}
{\bkmkend AAAAAAAADJ}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Caveats
\par}
{\tc\tcl3 \v Caveats}
The {\f2 statement}  argument of {\f2 ASSERT_EXIT()}  can be any valid C++ statement. If it leaves the current function via a {\f2 return}  statement or by throwing an exception, the death test is considered to have failed. Some googletest macros may return from the current function (e.g. {\f2 ASSERT_TRUE()} ), so be sure to avoid them in {\f2 statement} .\par
Since {\f2 statement}  runs in the child process, any in-memory side effect (e.g. modifying a variable, releasing memory, etc) it causes will {\i not}  be observable in the parent process. In particular, if you release memory in a death test, your program will fail the heap check as the parent process will never see the memory reclaimed. To solve this problem, you can\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab try not to free memory in a death test;\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
2.\tab free the memory again in the parent process; or\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
3.\tab do not use the heap checker in your program.\par}
\par
Due to an implementation detail, you cannot place multiple death test assertions on the same line; otherwise, compilation will fail with an unobvious error message.\par
Despite the improved thread safety afforded by the "threadsafe" style of death test, thread problems such as deadlock are still possible in the presence of handlers registered with {\f2 pthread_atfork(3)} .\par}
\par}
{\bkmkstart AAAAAAAADK}
{\bkmkend AAAAAAAADK}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Using Assertions in Sub-routines
\par}
{\tc\tcl2 \v Using Assertions in Sub-routines}
\{: .callout .note\} Note: If you want to put a series of test assertions in a subroutine to check for a complex condition, consider using {\f2 a custom GMock matcher} instead. This lets you provide a more readable error message in case of failure and avoid all of the issues described below.\par
{\bkmkstart AAAAAAAADL}
{\bkmkend AAAAAAAADL}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Adding Traces to Assertions
\par}
{\tc\tcl3 \v Adding Traces to Assertions}
If a test sub-routine is called from several places, when an assertion inside it fails, it can be hard to tell which invocation of the sub-routine the failure is from. You can alleviate this problem using extra logging or custom failure messages, but that usually clutters up your tests. A better solution is to use the {\f2 SCOPED_TRACE}  macro or the {\f2 ScopedTrace}  utility:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
SCOPED_TRACE(message);\par
}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
ScopedTrace trace("file_path", line_number, message);\par
}
\par
where {\f2 message}  can be anything streamable to {\f2 std::ostream} . {\f2 SCOPED_TRACE}  macro will cause the current file name, line number, and the given message to be added in every failure message. {\f2 ScopedTrace}  accepts explicit file name and line number in arguments, which is useful for writing test helpers. The effect will be undone when the control leaves the current lexical scope.\par
For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
10: void Sub1(int n) \{\par
11:   EXPECT_EQ(Bar(n), 1);\par
12:   EXPECT_EQ(Bar(n + 1), 2);\par
13: \}\par
14:\par
15: TEST(FooTest, Bar) \{\par
16:   \{\par
17:     SCOPED_TRACE("A");  // This trace point will be included in\par
18:                         // every failure in this scope.\par
19:     Sub1(1);\par
20:   \}\par
21:   // Now it won't.\par
22:   Sub1(9);\par
23: \}\par
}
\par
could result in messages like these:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid path/to/foo_test.cc:11: Failure\par
Value of: Bar(n)\par
Expected: 1\par
  Actual: 2\par
Google Test trace:\par
path/to/foo_test.cc:17: A\par
\par
path/to/foo_test.cc:12: Failure\par
Value of: Bar(n + 1)\par
Expected: 2\par
  Actual: 3\par
}
\par
Without the trace, it would've been difficult to know which invocation of {\f2 Sub1()}  the two failures come from respectively. (You could add an extra message to each assertion in {\f2 Sub1()}  to indicate the value of {\f2 n} , but that's tedious.)\par
Some tips on using {\f2 SCOPED_TRACE} :\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab With a suitable message, it's often enough to use {\f2 SCOPED_TRACE}  at the beginning of a sub-routine, instead of at each call site.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
2.\tab When calling sub-routines inside a loop, make the loop iterator part of the message in {\f2 SCOPED_TRACE}  such that you can know which iteration the failure is from.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
3.\tab Sometimes the line number of the trace point is enough for identifying the particular invocation of a sub-routine. In this case, you don't have to choose a unique message for {\f2 SCOPED_TRACE} . You can simply use {\f2 ""} .\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
4.\tab You can use {\f2 SCOPED_TRACE}  in an inner scope when there is one in the outer scope. In this case, all active trace points will be included in the failure messages, in reverse order they are encountered.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
5.\tab The trace dump is clickable in Emacs - hit {\f2 return}  on a line number and you'll be taken to that line in the source file!\par}
\par
\par}
{\bkmkstart AAAAAAAADM}
{\bkmkend AAAAAAAADM}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Propagating Fatal Failures
\par}
{\tc\tcl3 \v Propagating Fatal Failures}
A common pitfall when using {\f2 ASSERT_*}  and {\f2 FAIL*}  is not understanding that when they fail they only abort the {\i current function} , not the entire test. For example, the following test will segfault:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
void Subroutine() \{\par
  // Generates a fatal failure and aborts the current function.\par
  ASSERT_EQ(1, 2);\par
\par
  // The following won't be executed.\par
  ...\par
\}\par
\par
TEST(FooTest, Bar) \{\par
  Subroutine();  // The intended behavior is for the fatal failure\par
                 // in Subroutine() to abort the entire test.\par
\par
  // The actual behavior: the function goes on after Subroutine() returns.\par
  int* p = nullptr;\par
  *p = 3;  // Segfault!\par
\}\par
}
\par
To alleviate this, googletest provides three different solutions. You could use either exceptions, the {\f2 (ASSERT|EXPECT)_NO_FATAL_FAILURE}  assertions or the {\f2 HasFatalFailure()}  function. They are described in the following two subsections.\par
{\bkmkstart AAAAAAAADN}
{\bkmkend AAAAAAAADN}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Asserting on Subroutines with an exception
\par}
{\tc\tcl4 \v Asserting on Subroutines with an exception}
The following code can turn ASSERT-failure into an exception:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
class ThrowListener : public testing::EmptyTestEventListener \{\par
  void OnTestPartResult(const testing::TestPartResult& result) override \{\par
    if (result.type() == testing::TestPartResult::kFatalFailure) \{\par
      throw testing::AssertionException(result);\par
    \}\par
  \}\par
\};\par
int main(int argc, char** argv) \{\par
  ...\par
  testing::UnitTest::GetInstance()->listeners().Append(new ThrowListener);\par
  return RUN_ALL_TESTS();\par
\}\par
}
\par
This listener should be added after other listeners if you have any, otherwise they won't see failed {\f2 OnTestPartResult} .\par}
{\bkmkstart AAAAAAAADO}
{\bkmkend AAAAAAAADO}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Asserting on Subroutines
\par}
{\tc\tcl4 \v Asserting on Subroutines}
As shown above, if your test calls a subroutine that has an {\f2 ASSERT_*}  failure in it, the test will continue after the subroutine returns. This may not be what you want.\par
Often people want fatal failures to propagate like exceptions. For that googletest offers the following macros:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Fatal assertion   \cell }{Nonfatal assertion   \cell }{Verifies    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_NO_FATAL_FAILURE(statement);}    \cell }{{\f2 EXPECT_NO_FATAL_FAILURE(statement);}    \cell }{{\f2 statement}  doesn't generate any new fatal failures in the current thread.   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Only failures in the thread that executes the assertion are checked to determine the result of this type of assertions. If {\f2 statement}  creates new threads, failures in these threads are ignored.\par
Examples:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
ASSERT_NO_FATAL_FAILURE(Foo());\par
\par
int i;\par
EXPECT_NO_FATAL_FAILURE(\{\par
  i = Bar();\par
\});\par
}
\par
Assertions from multiple threads are currently not supported on Windows.\par}
{\bkmkstart AAAAAAAADP}
{\bkmkend AAAAAAAADP}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Checking for Failures in the Current Test
\par}
{\tc\tcl4 \v Checking for Failures in the Current Test}
{\f2 HasFatalFailure()}  in the {\f2 {\b testing::Test}}  class returns {\f2 true}  if an assertion in the current test has suffered a fatal failure. This allows functions to catch fatal failures in a sub-routine and return early.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
class Test \{\par
 public:\par
  ...\par
  static bool HasFatalFailure();\par
\};\par
}
\par
The typical usage, which basically simulates the behavior of a thrown exception, is:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
TEST(FooTest, Bar) \{\par
  Subroutine();\par
  // Aborts if Subroutine() had a fatal failure.\par
  if (HasFatalFailure()) return;\par
\par
  // The following won't be executed.\par
  ...\par
\}\par
}
\par
If {\f2 HasFatalFailure()}  is used outside of {\f2 TEST()}  , {\f2 TEST_F()}  , or a test fixture, you must add the {\f2 {\b testing::Test}::}  prefix, as in:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
if (testing::Test::HasFatalFailure()) return;\par
}
\par
Similarly, {\f2 HasNonfatalFailure()}  returns {\f2 true}  if the current test has at least one non-fatal failure, and {\f2 HasFailure()}  returns {\f2 true}  if the current test has at least one failure of either kind.\par}
\par}
\par}
{\bkmkstart AAAAAAAADQ}
{\bkmkend AAAAAAAADQ}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Logging Additional Information
\par}
{\tc\tcl2 \v Logging Additional Information}
In your test code, you can call {\f2 RecordProperty("key", value)}  to log additional information, where {\f2 value}  can be either a string or an {\f2 int} . The {\i last}  value recorded for a key will be emitted to the XML output if you specify one. For example, the test\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
TEST_F(WidgetUsageTest, MinAndMaxWidgets) \{\par
  RecordProperty("MaximumWidgets", ComputeMaxUsage());\par
  RecordProperty("MinimumWidgets", ComputeMinUsage());\par
\}\par
}
\par
will output XML like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ...\par
  <{\cf18 testcase} {\cf17 name}={\cf22 "MinAndMaxWidgets"} {\cf17 file}={\cf22 "test.cpp"} {\cf17 line}={\cf22 "1"} {\cf17 status}={\cf22 "run"} {\cf17 time}={\cf22 "0.006"} {\cf17 classname}={\cf22 "WidgetUsageTest"} {\cf17 MaximumWidgets}={\cf22 "12"} {\cf17 MinimumWidgets}={\cf22 "9"} />\par
...\par
}
\par
\{: .callout .note\} \par
{\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \zwjNOTE:\par
{
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 RecordProperty()}  is a static member of the {\f2 Test}  class. Therefore it needs to be prefixed with {\f2 {\b testing::Test}::}  if used outside of the {\f2 TEST}  body and the test fixture class.\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
*{\f2 key} * must be a valid XML attribute name, and cannot conflict with the ones already used by googletest ({\f2 name} , {\f2 status} , {\f2 time} , {\f2 classname} , {\f2 type_param} , and {\f2 value_param} ).\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Calling {\f2 RecordProperty()}  outside of the lifespan of a test is allowed. If it's called outside of a test but between a test suite's {\f2 SetUpTestSuite()}  and {\f2 TearDownTestSuite()}  methods, it will be attributed to the XML element for the test suite. If it's called outside of all test suites (e.g. in a test environment), it will be attributed to the top-level XML element. \par}
}\par}
{\bkmkstart AAAAAAAADR}
{\bkmkend AAAAAAAADR}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Sharing Resources Between Tests in the Same Test Suite
\par}
{\tc\tcl2 \v Sharing Resources Between Tests in the Same Test Suite}
googletest creates a new test fixture object for each test in order to make tests independent and easier to debug. However, sometimes tests use resources that are expensive to set up, making the one-copy-per-test model prohibitively expensive.\par
If the tests don't change the resource, there's no harm in their sharing a single resource copy. So, in addition to per-test set-up/tear-down, googletest also supports per-test-suite set-up/tear-down. To use it:\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab In your test fixture class (say {\f2 {\b FooTest}}  ), declare as {\f2 static}  some member variables to hold the shared resources.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
2.\tab Outside your test fixture class (typically just below it), define those member variables, optionally giving them initial values.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
3.\tab In the same test fixture class, define a {\f2 static void SetUpTestSuite()}  function (remember not to spell it as **{\f2 SetupTestSuite} ** with a small {\f2 u} !) to set up the shared resources and a {\f2 static void TearDownTestSuite()}  function to tear them down.\par}
\par
That's it! googletest automatically calls {\f2 SetUpTestSuite()}  before running the {\i first test}  in the {\f2 {\b FooTest}}  test suite (i.e. before creating the first {\f2 {\b FooTest}}  object), and calls {\f2 TearDownTestSuite()}  after running the {\i last test}  in it (i.e. after deleting the last {\f2 {\b FooTest}}  object). In between, the tests can use the shared resources.\par
Remember that the test order is undefined, so your code can't depend on a test preceding or following another. Also, the tests must either not modify the state of any shared resource, or, if they do modify the state, they must restore the state to its original value before passing control to the next test.\par
Note that {\f2 SetUpTestSuite()}  may be called multiple times for a test fixture class that has derived classes, so you should not expect code in the function body to be run only once. Also, derived classes still have access to shared resources defined as static members, so careful consideration is needed when managing shared resources to avoid memory leaks.\par
Here's an example of per-test-suite set-up and tear-down:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
class FooTest : public testing::Test \{\par
 protected:\par
  // Per-test-suite set-up.\par
  // Called before the first test in this test suite.\par
  // Can be omitted if not needed.\par
  static void SetUpTestSuite() \{\par
    // Avoid reallocating static objects if called in subclasses of FooTest.\par
    if (shared_resource_ == nullptr) \{\par
      shared_resource_ = new ...;\par
    \}\par
  \}\par
\par
  // Per-test-suite tear-down.\par
  // Called after the last test in this test suite.\par
  // Can be omitted if not needed.\par
  static void TearDownTestSuite() \{\par
    delete shared_resource_;\par
    shared_resource_ = nullptr;\par
  \}\par
\par
  // You can define per-test set-up logic as usual.\par
  void SetUp() override \{ ... \}\par
\par
  // You can define per-test tear-down logic as usual.\par
  void TearDown() override \{ ... \}\par
\par
  // Some expensive resource shared by all tests.\par
  static T* shared_resource_;\par
\};\par
\par
T* FooTest::shared_resource_ = nullptr;\par
\par
TEST_F(FooTest, Test1) \{\par
  ... you can refer to shared_resource_ here ...\par
\}\par
\par
TEST_F(FooTest, Test2) \{\par
  ... you can refer to shared_resource_ here ...\par
\}\par
}
\par
\{: .callout .note\} NOTE: Though the above code declares {\f2 SetUpTestSuite()}  protected, it may sometimes be necessary to declare it public, such as when using it with {\f2 TEST_P} .\par}
{\bkmkstart AAAAAAAADS}
{\bkmkend AAAAAAAADS}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Global Set-Up and Tear-Down
\par}
{\tc\tcl2 \v Global Set-Up and Tear-Down}
Just as you can do set-up and tear-down at the test level and the test suite level, you can also do it at the test program level. Here's how.\par
First, you subclass the {\f2 {\b testing::Environment}}  class to define a test environment, which knows how to set-up and tear-down:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
class Environment : public ::testing::Environment \{\par
 public:\par
  ~Environment() override \{\}\par
\par
  // Override this to define how to set up the environment.\par
  void SetUp() override \{\}\par
\par
  // Override this to define how to tear down the environment.\par
  void TearDown() override \{\}\par
\};\par
}
\par
Then, you register an instance of your environment class with googletest by calling the {\f2 testing::AddGlobalTestEnvironment()}  function:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
Environment* AddGlobalTestEnvironment(Environment* env);\par
}
\par
Now, when {\f2 RUN_ALL_TESTS()}  is called, it first calls the {\f2 SetUp()}  method of each environment object, then runs the tests if none of the environments reported fatal failures and {\f2 GTEST_SKIP()}  was not called. {\f2 RUN_ALL_TESTS()}  always calls {\f2 TearDown()}  with each environment object, regardless of whether or not the tests were run.\par
It's OK to register multiple environment objects. In this suite, their {\f2 SetUp()}  will be called in the order they are registered, and their {\f2 TearDown()}  will be called in the reverse order.\par
Note that googletest takes ownership of the registered environment objects. Therefore {\b do not delete them}  by yourself.\par
You should call {\f2 AddGlobalTestEnvironment()}  before {\f2 RUN_ALL_TESTS()}  is called, probably in {\f2 main()} . If you use {\f2 gtest_main} , you need to call this before {\f2 main()}  starts for it to take effect. One way to do this is to define a global variable like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
testing::Environment* const foo_env =\par
    testing::AddGlobalTestEnvironment(new FooEnvironment);\par
}
\par
However, we strongly recommend you to write your own {\f2 main()}  and call {\f2 AddGlobalTestEnvironment()}  there, as relying on initialization of global variables makes the code harder to read and may cause problems when you register multiple environments from different translation units and the environments have dependencies among them (remember that the compiler doesn't guarantee the order in which global variables from different translation units are initialized).\par}
{\bkmkstart AAAAAAAADT}
{\bkmkend AAAAAAAADT}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Value-Parameterized Tests
\par}
{\tc\tcl2 \v Value-Parameterized Tests}
{\i Value-parameterized tests}  allow you to test your code with different parameters without writing multiple copies of the same test. This is useful in a number of situations, for example:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You have a piece of code whose behavior is affected by one or more command-line flags. You want to make sure your code performs correctly for various values of those flags.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You want to test different implementations of an OO interface.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You want to test your code over various inputs (a.k.a. data-driven testing). This feature is easy to abuse, so please exercise your good sense when doing it!\par}
\par
{\bkmkstart AAAAAAAADU}
{\bkmkend AAAAAAAADU}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
How to Write Value-Parameterized Tests
\par}
{\tc\tcl3 \v How to Write Value-Parameterized Tests}
To write value-parameterized tests, first you should define a fixture class. It must be derived from both {\f2 {\b testing::Test}}  and {\f2 {\b testing::WithParamInterface}<T>}  (the latter is a pure interface), where {\f2 T}  is the type of your parameter values. For convenience, you can just derive the fixture class from {\f2 {\b testing::TestWithParam}<T>} , which itself is derived from both {\f2 {\b testing::Test}}  and {\f2 {\b testing::WithParamInterface}<T>} . {\f2 T}  can be any copyable type. If it's a raw pointer, you are responsible for managing the lifespan of the pointed values.\par
\{: .callout .note\} NOTE: If your test fixture defines {\f2 SetUpTestSuite()}  or {\f2 TearDownTestSuite()}  they must be declared {\b public}  rather than {\b protected}  in order to use {\f2 TEST_P} .\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
class FooTest :\par
    public testing::TestWithParam<const char*> \{\par
  // You can implement all the usual fixture class members here.\par
  // To access the test parameter, call GetParam() from class\par
  // TestWithParam<T>.\par
\};\par
\par
// Or, when you want to add parameters to a pre-existing fixture class:\par
class BaseTest : public testing::Test \{\par
  ...\par
\};\par
class BarTest : public BaseTest,\par
                public testing::WithParamInterface<const char*> \{\par
  ...\par
\};\par
}
\par
Then, use the {\f2 TEST_P}  macro to define as many test patterns using this fixture as you want. The {\f2 _P}  suffix is for "parameterized" or "pattern", whichever you prefer to think.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
TEST_P(FooTest, DoesBlah) \{\par
  // Inside a test, access the test parameter with the GetParam() method\par
  // of the TestWithParam<T> class:\par
  EXPECT_TRUE(foo.Blah(GetParam()));\par
  ...\par
\}\par
\par
TEST_P(FooTest, HasBlahBlah) \{\par
  ...\par
\}\par
}
\par
Finally, you can use the {\f2 INSTANTIATE_TEST_SUITE_P}  macro to instantiate the test suite with any set of parameters you want. GoogleTest defines a number of functions for generating test parameters\'97see details at {\f2 {\f2 INSTANTIATE_TEST_SUITE_P} } in the Testing Reference.\par
For example, the following statement will instantiate tests from the {\f2 {\b FooTest}}  test suite each with parameter values {\f2 "meeny"} , {\f2 "miny"} , and {\f2 "moe"}  using the {\f2 {\f2 Values} } parameter generator:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
INSTANTIATE_TEST_SUITE_P(MeenyMinyMoe,\par
                         FooTest,\par
                         testing::Values("meeny", "miny", "moe"));\par
}
\par
\{: .callout .note\} NOTE: The code above must be placed at global or namespace scope, not at function scope.\par
The first argument to {\f2 INSTANTIATE_TEST_SUITE_P}  is a unique name for the instantiation of the test suite. The next argument is the name of the test pattern, and the last is the {\f2 parameter generator}.\par
You can instantiate a test pattern more than once, so to distinguish different instances of the pattern, the instantiation name is added as a prefix to the actual test suite name. Remember to pick unique prefixes for different instantiations. The tests from the instantiation above will have these names:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 MeenyMinyMoe/FooTest.DoesBlah/0}  for {\f2 "meeny"} \par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 MeenyMinyMoe/FooTest.DoesBlah/1}  for {\f2 "miny"} \par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 MeenyMinyMoe/FooTest.DoesBlah/2}  for {\f2 "moe"} \par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 MeenyMinyMoe/FooTest.HasBlahBlah/0}  for {\f2 "meeny"} \par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 MeenyMinyMoe/FooTest.HasBlahBlah/1}  for {\f2 "miny"} \par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 MeenyMinyMoe/FooTest.HasBlahBlah/2}  for {\f2 "moe"} \par}
\par
You can use these names in `--gtest_filter`.\par
The following statement will instantiate all tests from {\f2 {\b FooTest}}  again, each with parameter values {\f2 "cat"}  and {\f2 "dog"}  using the {\f2 {\f2 ValuesIn} } parameter generator:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
const char* pets[] = \{"cat", "dog"\};\par
INSTANTIATE_TEST_SUITE_P(Pets, FooTest, testing::ValuesIn(pets));\par
}
\par
The tests from the instantiation above will have these names:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Pets/FooTest.DoesBlah/0}  for {\f2 "cat"} \par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Pets/FooTest.DoesBlah/1}  for {\f2 "dog"} \par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Pets/FooTest.HasBlahBlah/0}  for {\f2 "cat"} \par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Pets/FooTest.HasBlahBlah/1}  for {\f2 "dog"} \par}
\par
Please note that {\f2 INSTANTIATE_TEST_SUITE_P}  will instantiate {\i all}  tests in the given test suite, whether their definitions come before or {\i after}  the {\f2 INSTANTIATE_TEST_SUITE_P}  statement.\par
Additionally, by default, every {\f2 TEST_P}  without a corresponding {\f2 INSTANTIATE_TEST_SUITE_P}  causes a failing test in test suite {\f2 GoogleTestVerification} . If you have a test suite where that omission is not an error, for example it is in a library that may be linked in for other reasons or where the list of test cases is dynamic and may be empty, then this check can be suppressed by tagging the test suite:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(FooTest);\par
}
\par
You can see {\f2 sample7_unittest.cc} and {\f2 sample8_unittest.cc} for more examples.\par}
{\bkmkstart AAAAAAAADV}
{\bkmkend AAAAAAAADV}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Creating Value-Parameterized Abstract Tests
\par}
{\tc\tcl3 \v Creating Value-Parameterized Abstract Tests}
In the above, we define and instantiate {\f2 {\b FooTest}}  in the {\i same}  source file. Sometimes you may want to define value-parameterized tests in a library and let other people instantiate them later. This pattern is known as {\i abstract tests} . As an example of its application, when you are designing an interface you can write a standard suite of abstract tests (perhaps using a factory function as the test parameter) that all implementations of the interface are expected to pass. When someone implements the interface, they can instantiate your suite to get all the interface-conformance tests for free.\par
To define abstract tests, you should organize your code like this:\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Put the definition of the parameterized test fixture class (e.g. {\f2 {\b FooTest}} ) in a header file, say {\f2 foo_param_test.h} . Think of this as {\i declaring}  your abstract tests.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
2.\tab Put the {\f2 TEST_P}  definitions in {\f2 foo_param_test.cc} , which includes {\f2 foo_param_test.h} . Think of this as {\i implementing}  your abstract tests.\par}
\par
Once they are defined, you can instantiate them by including {\f2 foo_param_test.h} , invoking {\f2 INSTANTIATE_TEST_SUITE_P()} , and depending on the library target that contains {\f2 foo_param_test.cc} . You can instantiate the same abstract test suite multiple times, possibly in different source files.\par}
{\bkmkstart AAAAAAAADW}
{\bkmkend AAAAAAAADW}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Specifying Names for Value-Parameterized Test Parameters
\par}
{\tc\tcl3 \v Specifying Names for Value-Parameterized Test Parameters}
The optional last argument to {\f2 INSTANTIATE_TEST_SUITE_P()}  allows the user to specify a function or functor that generates custom test name suffixes based on the test parameters. The function should accept one argument of type {\f2 {\b testing::TestParamInfo}<class ParamType>} , and return {\f2 std::string} .\par
{\f2 {\b testing::PrintToStringParamName}}  is a builtin test suffix generator that returns the value of {\f2 testing::PrintToString(GetParam())} . It does not work for {\f2 std::string}  or C strings.\par
\{: .callout .note\} NOTE: test names must be non-empty, unique, and may only contain ASCII alphanumeric characters. In particular, they {\f2 should not contain underscores}\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
class MyTestSuite : public testing::TestWithParam<int> \{\};\par
\par
TEST_P(MyTestSuite, MyTest)\par
\{\par
  std::cout << "Example Test Param: " << GetParam() << std::endl;\par
\}\par
\par
INSTANTIATE_TEST_SUITE_P(MyGroup, MyTestSuite, testing::Range(0, 10),\par
                         testing::PrintToStringParamName());\par
}
\par
Providing a custom functor allows for more control over test parameter name generation, especially for types where the automatic conversion does not generate helpful parameter names (e.g. strings as demonstrated above). The following example illustrates this for multiple parameters, an enumeration type and a string, and also demonstrates how to combine generators. It uses a lambda for conciseness:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
enum class MyType \{ MY_FOO = 0, MY_BAR = 1 \};\par
\par
class MyTestSuite : public testing::TestWithParam<std::tuple<MyType, std::string>> \{\par
\};\par
\par
INSTANTIATE_TEST_SUITE_P(\par
    MyGroup, MyTestSuite,\par
    testing::Combine(\par
        testing::Values(MyType::MY_FOO, MyType::MY_BAR),\par
        testing::Values("A", "B")),\par
    [](const testing::TestParamInfo<MyTestSuite::ParamType>& info) \{\par
      std::string name = absl::StrCat(\par
          std::get<0>(info.param) == MyType::MY_FOO ? "Foo" : "Bar",\par
          std::get<1>(info.param));\par
      absl::c_replace_if(name, [](char c) \{ return !std::isalnum(c); \}, '_');\par
      return name;\par
    \});\par
}
\par}
\par}
{\bkmkstart AAAAAAAADX}
{\bkmkend AAAAAAAADX}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Typed Tests
\par}
{\tc\tcl2 \v Typed Tests}
Suppose you have multiple implementations of the same interface and want to make sure that all of them satisfy some common requirements. Or, you may have defined several types that are supposed to conform to the same "concept" and you want to verify it. In both cases, you want the same test logic repeated for different types.\par
While you can write one {\f2 TEST}  or {\f2 TEST_F}  for each type you want to test (and you may even factor the test logic into a function template that you invoke from the {\f2 TEST} ), it's tedious and doesn't scale: if you want {\f2 m}  tests over {\f2 n}  types, you'll end up writing {\f2 m*n}  {\f2 TEST} s.\par
{\i Typed tests}  allow you to repeat the same test logic over a list of types. You only need to write the test logic once, although you must know the type list when writing typed tests. Here's how you do it:\par
First, define a fixture class template. It should be parameterized by a type. Remember to derive it from {\f2 {\b testing::Test}} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
template <typename T>\par
class FooTest : public testing::Test \{\par
 public:\par
  ...\par
  using List = std::list<T>;\par
  static T shared_;\par
  T value_;\par
\};\par
}
\par
Next, associate a list of types with the test suite, which will be repeated for each type in the list:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
using MyTypes = ::testing::Types<char, int, unsigned int>;\par
TYPED_TEST_SUITE(FooTest, MyTypes);\par
}
\par
The type alias ({\f2 using}  or {\f2 typedef} ) is necessary for the {\f2 TYPED_TEST_SUITE}  macro to parse correctly. Otherwise the compiler will think that each comma in the type list introduces a new macro argument.\par
Then, use {\f2 TYPED_TEST()}  instead of {\f2 TEST_F()}  to define a typed test for this test suite. You can repeat this as many times as you want:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
TYPED_TEST(FooTest, DoesBlah) \{\par
  // Inside a test, refer to the special name TypeParam to get the type\par
  // parameter.  Since we are inside a derived class template, C++ requires\par
  // us to visit the members of FooTest via 'this'.\par
  TypeParam n = this->value_;\par
\par
  // To visit static members of the fixture, add the 'TestFixture::'\par
  // prefix.\par
  n += TestFixture::shared_;\par
\par
  // To refer to typedefs in the fixture, add the 'typename TestFixture::'\par
  // prefix.  The 'typename' is required to satisfy the compiler.\par
  typename TestFixture::List values;\par
\par
  values.push_back(n);\par
  ...\par
\}\par
\par
TYPED_TEST(FooTest, HasPropertyA) \{ ... \}\par
}
\par
You can see {\f2 sample6_unittest.cc} for a complete example.\par}
{\bkmkstart AAAAAAAADY}
{\bkmkend AAAAAAAADY}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Type-Parameterized Tests
\par}
{\tc\tcl2 \v Type-Parameterized Tests}
{\i Type-parameterized tests}  are like typed tests, except that they don't require you to know the list of types ahead of time. Instead, you can define the test logic first and instantiate it with different type lists later. You can even instantiate it more than once in the same program.\par
If you are designing an interface or concept, you can define a suite of type-parameterized tests to verify properties that any valid implementation of the interface/concept should have. Then, the author of each implementation can just instantiate the test suite with their type to verify that it conforms to the requirements, without having to write similar tests repeatedly. Here's an example:\par
First, define a fixture class template, as we did with typed tests:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
template <typename T>\par
class FooTest : public testing::Test \{\par
  void DoSomethingInteresting();\par
  ...\par
\};\par
}
\par
Next, declare that you will define a type-parameterized test suite:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
TYPED_TEST_SUITE_P(FooTest);\par
}
\par
Then, use {\f2 TYPED_TEST_P()}  to define a type-parameterized test. You can repeat this as many times as you want:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
TYPED_TEST_P(FooTest, DoesBlah) \{\par
  // Inside a test, refer to TypeParam to get the type parameter.\par
  TypeParam n = 0;\par
\par
  // You will need to use `this` explicitly to refer to fixture members.\par
  this->DoSomethingInteresting()\par
  ...\par
\}\par
\par
TYPED_TEST_P(FooTest, HasPropertyA) \{ ... \}\par
}
\par
Now the tricky part: you need to register all test patterns using the {\f2 REGISTER_TYPED_TEST_SUITE_P}  macro before you can instantiate them. The first argument of the macro is the test suite name; the rest are the names of the tests in this test suite:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
REGISTER_TYPED_TEST_SUITE_P(FooTest,\par
                            DoesBlah, HasPropertyA);\par
}
\par
Finally, you are free to instantiate the pattern with the types you want. If you put the above code in a header file, you can {\f2 #include}  it in multiple C++ source files and instantiate it multiple times.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
using MyTypes = ::testing::Types<char, int, unsigned int>;\par
INSTANTIATE_TYPED_TEST_SUITE_P(My, FooTest, MyTypes);\par
}
\par
To distinguish different instances of the pattern, the first argument to the {\f2 INSTANTIATE_TYPED_TEST_SUITE_P}  macro is a prefix that will be added to the actual test suite name. Remember to pick unique prefixes for different instances.\par
In the special case where the type list contains only one type, you can write that type directly without {\f2 testing::Types<...>} , like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
INSTANTIATE_TYPED_TEST_SUITE_P(My, FooTest, int);\par
}
\par
You can see {\f2 sample6_unittest.cc} for a complete example.\par}
{\bkmkstart AAAAAAAADZ}
{\bkmkend AAAAAAAADZ}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Testing Private Code
\par}
{\tc\tcl2 \v Testing Private Code}
If you change your software's internal implementation, your tests should not break as long as the change is not observable by users. Therefore, {\b per the black-box testing principle, most of the time you should test your code through its public interfaces.} \par
{\b If you still find yourself needing to test internal implementation code, consider if there's a better design.}  The desire to test internal implementation is often a sign that the class is doing too much. Consider extracting an implementation class, and testing it. Then use that implementation class in the original class.\par
If you absolutely have to test non-public interface code though, you can. There are two cases to consider:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Static functions ( {\i not}  the same as static member functions!) or unnamed namespaces, and\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Private or protected class members\par}
\par
To test them, we use the following special techniques:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Both static functions and definitions/declarations in an unnamed namespace are only visible within the same translation unit. To test them, you can {\f2 #include}  the entire {\f2 .cc}  file being tested in your {\f2 *_test.cc}  file. (#including {\f2 .cc}  files is not a good way to reuse code - you should not do this in production code!)\par
However, a better approach is to move the private code into the {\f2 foo::internal}  namespace, where {\f2 foo}  is the namespace your project normally uses, and put the private declarations in a {\f2 *-internal.h}  file. Your production {\f2 .cc}  files and your tests are allowed to include this internal header, but your clients are not. This way, you can fully test your internal implementation without leaking it to your clients.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Private class members are only accessible from within the class or by friends. To access a class' private members, you can declare your test fixture as a friend to the class and define accessors in your fixture. Tests using the fixture can then access the private members of your production class via the accessors in the fixture. Note that even though your fixture is a friend to your production class, your tests are not automatically friends to it, as they are technically defined in sub-classes of the fixture.\par
Another way to test private members is to refactor them into an implementation class, which is then declared in a {\f2 *-internal.h}  file. Your clients aren't allowed to include this header but your tests can. Such is called the {\f2 Pimpl} (Private Implementation) idiom.\par
Or, you can declare an individual test as a friend of your class by adding this line in the class body:\par
```c++ FRIEND_TEST(TestSuiteName, TestName); ```\par
For example,\par
```c++ // foo.h class Foo \{ ... private: FRIEND_TEST(FooTest, BarReturnsZeroOnNull);\par
int Bar(void* x); \};\par
// foo_test.cc ... TEST(FooTest, BarReturnsZeroOnNull) \{ Foo foo; EXPECT_EQ(foo.Bar(NULL), 0); // Uses Foo's private member Bar(). \} ```\par
Pay special attention when your class is defined in a namespace. If you want your test fixtures and tests to be friends of your class, then they must be defined in the exact same namespace (no anonymous or inline namespaces).\par
For example, if the code to be tested looks like:\par
```c++ namespace my_namespace \{\par
class Foo \{ friend class {\b FooTest}; FRIEND_TEST(FooTest, Bar); FRIEND_TEST(FooTest, Baz); ... definition of the class Foo ... \};\par
\} // namespace my_namespace ```\par
Your test code should be something like:\par
```c++ namespace my_namespace \{\par
class {\b FooTest} : public {\b testing::Test} \{ protected: ... \};\par
TEST_F(FooTest, Bar) \{ ... \} TEST_F(FooTest, Baz) \{ ... \}\par
\} // namespace my_namespace ```\par}
\par
\par}
{\bkmkstart AAAAAAAAEA}
{\bkmkend AAAAAAAAEA}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
"Catching" Failures
\par}
{\tc\tcl2 \v "Catching" Failures}
If you are building a testing utility on top of googletest, you'll want to test your utility. What framework would you use to test it? googletest, of course.\par
The challenge is to verify that your testing utility reports failures correctly. In frameworks that report a failure by throwing an exception, you could catch the exception and assert on it. But googletest doesn't use exceptions, so how do we test that a piece of code generates an expected failure?\par
{\f2 "gtest/gtest-spi.h"}  contains some constructs to do this. After #including this header, you can use\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \{c++\}\par
 EXPECT_FATAL_FAILURE(statement, substring);\par
}
\par
to assert that {\f2 statement}  generates a fatal (e.g. {\f2 ASSERT_*} ) failure in the current thread whose message contains the given {\f2 substring} , or use\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \{c++\}\par
 EXPECT_NONFATAL_FAILURE(statement, substring);\par
}
\par
if you are expecting a non-fatal (e.g. {\f2 EXPECT_*} ) failure.\par
Only failures in the current thread are checked to determine the result of this type of expectations. If {\f2 statement}  creates new threads, failures in these threads are also ignored. If you want to catch failures in other threads as well, use one of the following macros instead:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \{c++\}\par
 EXPECT_FATAL_FAILURE_ON_ALL_THREADS(statement, substring);\par
 EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS(statement, substring);\par
}
\par
\{: .callout .note\} NOTE: Assertions from multiple threads are currently not supported on Windows.\par
For technical reasons, there are some caveats:\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab You cannot stream a failure message to either macro.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
2.\tab {\f2 statement}  in {\f2 EXPECT_FATAL_FAILURE\{_ON_ALL_THREADS\}()}  cannot reference local non-static variables or non-static members of {\f2 this}  object.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
3.\tab {\f2 statement}  in {\f2 EXPECT_FATAL_FAILURE\{_ON_ALL_THREADS\}()}  cannot return a value.\par}
\par
\par}
{\bkmkstart AAAAAAAAEB}
{\bkmkend AAAAAAAAEB}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Registering tests programmatically
\par}
{\tc\tcl2 \v Registering tests programmatically}
The {\f2 TEST}  macros handle the vast majority of all use cases, but there are few where runtime registration logic is required. For those cases, the framework provides the {\f2 testing::RegisterTest}  that allows callers to register arbitrary tests dynamically.\par
This is an advanced API only to be used when the {\f2 TEST}  macros are insufficient. The macros should be preferred when possible, as they avoid most of the complexity of calling this function.\par
It provides the following signature:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
template <typename Factory>\par
TestInfo* RegisterTest(const char* test_suite_name, const char* test_name,\par
                       const char* type_param, const char* value_param,\par
                       const char* file, int line, Factory factory);\par
}
\par
The {\f2 factory}  argument is a factory callable (move-constructible) object or function pointer that creates a new instance of the Test object. It handles ownership to the caller. The signature of the callable is {\f2 Fixture*()} , where {\f2 {\b Fixture}}  is the test fixture class for the test. All tests registered with the same {\f2 test_suite_name}  must return the same fixture type. This is checked at runtime.\par
The framework will infer the fixture class from the factory and will call the {\f2 SetUpTestSuite}  and {\f2 TearDownTestSuite}  for it.\par
Must be called before {\f2 RUN_ALL_TESTS()}  is invoked, otherwise behavior is undefined.\par
Use case example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
class MyFixture : public testing::Test \{\par
 public:\par
  // All of these optional, just like in regular macro usage.\par
  static void SetUpTestSuite() \{ ... \}\par
  static void TearDownTestSuite() \{ ... \}\par
  void SetUp() override \{ ... \}\par
  void TearDown() override \{ ... \}\par
\};\par
\par
class MyTest : public MyFixture \{\par
 public:\par
  explicit MyTest(int data) : data_(data) \{\}\par
  void TestBody() override \{ ... \}\par
\par
 private:\par
  int data_;\par
\};\par
\par
void RegisterMyTests(const std::vector<int>& values) \{\par
  for (int v : values) \{\par
    testing::RegisterTest(\par
        "MyFixture", ("Test" + std::to_string(v)).c_str(), nullptr,\par
        std::to_string(v).c_str(),\par
        __FILE__, __LINE__,\par
        // Important to use the fixture type as the return type here.\par
        [=]() -> MyFixture* \{ return new MyTest(v); \});\par
  \}\par
\}\par
...\par
int main(int argc, char** argv) \{\par
  testing::InitGoogleTest(&argc, argv);\par
  std::vector<int> values_to_test = LoadValuesFromConfig();\par
  RegisterMyTests(values_to_test);\par
  ...\par
  return RUN_ALL_TESTS();\par
\}\par
}
\par}
{\bkmkstart AAAAAAAAEC}
{\bkmkend AAAAAAAAEC}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Getting the Current Test's Name
\par}
{\tc\tcl2 \v Getting the Current Test's Name}
Sometimes a function may need to know the name of the currently running test. For example, you may be using the {\f2 SetUp()}  method of your test fixture to set the golden file name based on which test is running. The {\f2 {\f2 TestInfo} } class has this information.\par
To obtain a {\f2 TestInfo}  object for the currently running test, call {\f2 current_test_info()}  on the {\f2 {\f2 UnitTest} } singleton object:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \{c++\}\par
 // Gets information about the currently running test.\par
 // Do NOT delete the returned object - it's managed by the UnitTest class.\par
 const testing::TestInfo* const test_info =\par
     testing::UnitTest::GetInstance()->current_test_info();\par
\par
 printf("We are in test %s of test suite %s.\\n",\par
        test_info->name(),\par
        test_info->test_suite_name());\par
}
\par
{\f2 current_test_info()}  returns a null pointer if no test is running. In particular, you cannot find the test suite name in {\f2 SetUpTestSuite()} , {\f2 TearDownTestSuite()}  (where you know the test suite name implicitly), or functions called from them.\par}
{\bkmkstart AAAAAAAAED}
{\bkmkend AAAAAAAAED}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Extending googletest by Handling Test Events
\par}
{\tc\tcl2 \v Extending googletest by Handling Test Events}
googletest provides an {\b event listener API}  to let you receive notifications about the progress of a test program and test failures. The events you can listen to include the start and end of the test program, a test suite, or a test method, among others. You may use this API to augment or replace the standard console output, replace the XML output, or provide a completely different form of output, such as a GUI or a database. You can also use test events as checkpoints to implement a resource leak checker, for example.\par
{\bkmkstart AAAAAAAAEE}
{\bkmkend AAAAAAAAEE}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Defining Event Listeners
\par}
{\tc\tcl3 \v Defining Event Listeners}
To define a event listener, you subclass either {\f2 {\f2 testing::TestEventListener} } or {\f2 {\f2 testing::EmptyTestEventListener} } The former is an (abstract) interface, where {\i each pure virtual method can be overridden to handle a test event}  (For example, when a test starts, the {\f2 OnTestStart()}  method will be called.). The latter provides an empty implementation of all methods in the interface, such that a subclass only needs to override the methods it cares about.\par
When an event is fired, its context is passed to the handler function as an argument. The following argument types are used:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
UnitTest reflects the state of the entire test program,\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
TestSuite has information about a test suite, which can contain one or more tests,\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
TestInfo contains the state of a test, and\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
TestPartResult represents the result of a test assertion.\par}
\par
An event handler function can examine the argument it receives to find out interesting information about the event and the test program's state.\par
Here's an example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \{c++\}\par
 class MinimalistPrinter : public testing::EmptyTestEventListener \{\par
   // Called before a test starts.\par
   void OnTestStart(const testing::TestInfo& test_info) override \{\par
     printf("*** Test %s.%s starting.\\n",\par
            test_info.test_suite_name(), test_info.name());\par
   \}\par
\par
   // Called after a failed assertion or a SUCCESS().\par
   void OnTestPartResult(const testing::TestPartResult& test_part_result) override \{\par
     printf("%s in %s:%d\\n%s\\n",\par
            test_part_result.failed() ? "*** Failure" : "Success",\par
            test_part_result.file_name(),\par
            test_part_result.line_number(),\par
            test_part_result.summary());\par
   \}\par
\par
   // Called after a test ends.\par
   void OnTestEnd(const testing::TestInfo& test_info) override \{\par
     printf("*** Test %s.%s ending.\\n",\par
            test_info.test_suite_name(), test_info.name());\par
   \}\par
 \};\par
}
\par}
{\bkmkstart AAAAAAAAEF}
{\bkmkend AAAAAAAAEF}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Using Event Listeners
\par}
{\tc\tcl3 \v Using Event Listeners}
To use the event listener you have defined, add an instance of it to the googletest event listener list (represented by class {\f2 {\f2 TestEventListeners} } - note the "s" at the end of the name) in your {\f2 main()}  function, before calling {\f2 RUN_ALL_TESTS()} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
int main(int argc, char** argv) \{\par
  testing::InitGoogleTest(&argc, argv);\par
  // Gets hold of the event listener list.\par
  testing::TestEventListeners& listeners =\par
      testing::UnitTest::GetInstance()->listeners();\par
  // Adds a listener to the end.  googletest takes the ownership.\par
  listeners.Append(new MinimalistPrinter);\par
  return RUN_ALL_TESTS();\par
\}\par
}
\par
There's only one problem: the default test result printer is still in effect, so its output will mingle with the output from your minimalist printer. To suppress the default printer, just release it from the event listener list and delete it. You can do so by adding one line:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \{c++\}\par
 ...\par
 delete listeners.Release(listeners.default_result_printer());\par
 listeners.Append(new MinimalistPrinter);\par
 return RUN_ALL_TESTS();\par
}
\par
Now, sit back and enjoy a completely different output from your tests. For more details, see {\f2 sample9_unittest.cc}.\par
You may append more than one listener to the list. When an {\f2 On*Start()}  or {\f2 OnTestPartResult()}  event is fired, the listeners will receive it in the order they appear in the list (since new listeners are added to the end of the list, the default text printer and the default XML generator will receive the event first). An {\f2 On*End()}  event will be received by the listeners in the {\i reverse}  order. This allows output by listeners added later to be framed by output from listeners added earlier.\par}
{\bkmkstart AAAAAAAAEG}
{\bkmkend AAAAAAAAEG}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Generating Failures in Listeners
\par}
{\tc\tcl3 \v Generating Failures in Listeners}
You may use failure-raising macros ({\f2 EXPECT_*()} , {\f2 ASSERT_*()} , {\f2 FAIL()} , etc) when processing an event. There are some restrictions:\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab You cannot generate any failure in {\f2 OnTestPartResult()}  (otherwise it will cause {\f2 OnTestPartResult()}  to be called recursively).\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
2.\tab A listener that handles {\f2 OnTestPartResult()}  is not allowed to generate any failure.\par}
\par
When you add listeners to the listener list, you should put listeners that handle {\f2 OnTestPartResult()}  {\i before}  listeners that can generate failures. This ensures that failures generated by the latter are attributed to the right test by the former.\par
See {\f2 sample10_unittest.cc} for an example of a failure-raising listener.\par}
\par}
{\bkmkstart AAAAAAAAEH}
{\bkmkend AAAAAAAAEH}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Running Test Programs: Advanced Options
\par}
{\tc\tcl2 \v Running Test Programs: Advanced Options}
googletest test programs are ordinary executables. Once built, you can run them directly and affect their behavior via the following environment variables and/or command line flags. For the flags to work, your programs must call {\f2 testing::InitGoogleTest()}  before calling {\f2 RUN_ALL_TESTS()} .\par
To see a list of supported flags and their usage, please run your test program with the {\f2 --help}  flag. You can also use {\f2 -h} , {\f2 -?} , or {\f2 /?}  for short.\par
If an option is specified both by an environment variable and by a flag, the latter takes precedence.\par
{\bkmkstart AAAAAAAAEI}
{\bkmkend AAAAAAAAEI}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Selecting Tests
\par}
{\tc\tcl3 \v Selecting Tests}
{\bkmkstart AAAAAAAAEJ}
{\bkmkend AAAAAAAAEJ}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Listing Test Names
\par}
{\tc\tcl4 \v Listing Test Names}
Sometimes it is necessary to list the available tests in a program before running them so that a filter may be applied if needed. Including the flag {\f2 --gtest_list_tests}  overrides all other flags and lists tests in the following format:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TestSuite1.\par
  TestName1\par
  TestName2\par
TestSuite2.\par
  TestName\par
}
\par
None of the tests listed are actually run if the flag is provided. There is no corresponding environment variable for this flag.\par}
{\bkmkstart AAAAAAAAEK}
{\bkmkend AAAAAAAAEK}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Running a Subset of the Tests
\par}
{\tc\tcl4 \v Running a Subset of the Tests}
By default, a googletest program runs all tests the user has defined. Sometimes, you want to run only a subset of the tests (e.g. for debugging or quickly verifying a change). If you set the {\f2 GTEST_FILTER}  environment variable or the {\f2 --gtest_filter}  flag to a filter string, googletest will only run the tests whose full names (in the form of {\f2 TestSuiteName.TestName} ) match the filter.\par
The format of a filter is a '{\f2 :} '-separated list of wildcard patterns (called the {\i positive patterns} ) optionally followed by a '{\f2 -} ' and another '{\f2 :} '-separated pattern list (called the {\i negative patterns} ). A test matches the filter if and only if it matches any of the positive patterns but does not match any of the negative patterns.\par
A pattern may contain \'91\'92*'{\f2 (matches any string) or} '?'{\f2 (matches any single character). For convenience, the filter} '{\i -NegativePatterns'{\f2 can be also written as} '-NegativePatterns'`.} \par
{\i For example:} \par
{\i {
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 ./foo_test}  Has no flag, and thus runs all its tests.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
`./foo_test \'96gtest_filter={\f2 Also runs everything, due to the single match-everything} *{\f2 value. *} ./foo_test \'96gtest_filter={\b FooTest}.*{\f2 Runs everything in test suite } {\b FooTest}{\f2 . *} ./foo_test \'96gtest_filter=*Null*:{\i Constructor} {\f2 Runs any test whose full name contains either} "Null"{\f2 or} "Constructor"{\f2 . *} ./foo_test \'96gtest_filter=-*DeathTest.*{\f2 Runs all non-death tests. *} ./foo_test \'96gtest_filter={\b FooTest}.*-FooTest.Bar{\f2 Runs everything in test suite} {\b FooTest}{\f2 except} FooTest.Bar{\f2 . *} ./foo_test \'96gtest_filter={\b FooTest}.*:BarTest.*-FooTest.Bar:BarTest.Foo{\f2 Runs everything in test suite} {\b FooTest}{\f2 except} FooTest.Bar{\f2 and everything in test suite} BarTest{\f2 except} BarTest.Foo`.\par}
\par
} \par
{\i } \par}
{\bkmkstart AAAAAAAAEL}
{\bkmkend AAAAAAAAEL}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Stop test execution upon first failure
\par}
{\tc\tcl4 \v Stop test execution upon first failure}
{\i  By default, a googletest program runs all tests the user has defined. In some cases (e.g. iterative test development & execution) it may be desirable stop test execution upon first failure (trading improved latency for completeness). If {\f2 GTEST_FAIL_FAST}  environment variable or {\f2 --gtest_fail_fast}  flag is set, the test runner will stop execution as soon as the first test failure is found.} \par
{\i } \par}
{\bkmkstart AAAAAAAAEM}
{\bkmkend AAAAAAAAEM}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Temporarily Disabling Tests
\par}
{\tc\tcl4 \v Temporarily Disabling Tests}
{\i  If you have a broken test that you cannot fix right away, you can add the {\f2 DISABLED_}  prefix to its name. This will exclude it from execution. This is better than commenting out the code or using {\f2 #if 0} , as disabled tests are still compiled (and thus won't rot).} \par
{\i If you need to disable all tests in a test suite, you can either add {\f2 DISABLED_}  to the front of the name of each test, or alternatively add it to the front of the test suite name.} \par
{\i For example, the following tests won't be run by googletest, even though they will still be compiled:} \par
{\i {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
// Tests that Foo does Abc.\par
TEST(FooTest, DISABLED_DoesAbc) \{ ... \}\par
\par
class DISABLED_BarTest : public testing::Test \{ ... \};\par
\par
// Tests that Bar does Xyz.\par
TEST_F(DISABLED_BarTest, DoesXyz) \{ ... \}\par
}
} \par
{\i \{: .callout .note\} NOTE: This feature should only be used for temporary pain-relief. You still have to fix the disabled tests at a later date. As a reminder, googletest will print a banner warning you if a test program contains any disabled tests.} \par
{\i \{: .callout .tip\} TIP: You can easily count the number of disabled tests you have using {\f2 grep} . This number can be used as a metric for improving your test quality.} \par
{\i } \par}
{\bkmkstart AAAAAAAAEN}
{\bkmkend AAAAAAAAEN}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Temporarily Enabling Disabled Tests
\par}
{\tc\tcl4 \v Temporarily Enabling Disabled Tests}
{\i  To include disabled tests in test execution, just invoke the test program with the {\f2 --gtest_also_run_disabled_tests}  flag or set the {\f2 GTEST_ALSO_RUN_DISABLED_TESTS}  environment variable to a value other than {\f2 0} . You can combine this with the {\f2 --gtest_filter}  flag to further select which disabled tests to run.} \par
{\i } \par}
\par}
{\bkmkstart AAAAAAAAEO}
{\bkmkend AAAAAAAAEO}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Repeating the Tests
\par}
{\tc\tcl3 \v Repeating the Tests}
{\i  Once in a while you'll run into a test whose result is hit-or-miss. Perhaps it will fail only 1% of the time, making it rather hard to reproduce the bug under a debugger. This can be a major source of frustration.} \par
{\i The {\f2 --gtest_repeat}  flag allows you to repeat all (or selected) test methods in a program many times. Hopefully, a flaky test will eventually fail and give you a chance to debug. Here's how to use it:} \par
{\i {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid $ foo_test --gtest_repeat=1000\par
Repeat foo_test 1000 times and don't stop at failures.\par
\par
$ foo_test --gtest_repeat=-1\par
A negative count means repeating forever.\par
\par
$ foo_test --gtest_repeat=1000 --gtest_break_on_failure\par
Repeat foo_test 1000 times, stopping at the first failure.  This\par
is especially useful when running under a debugger: when the test\par
fails, it will drop into the debugger and you can then inspect\par
variables and stacks.\par
\par
$ foo_test --gtest_repeat=1000 --gtest_filter=FooBar.*\par
Repeat the tests whose name matches the filter 1000 times.\par
}
} \par
{\i If your test program contains global set-up/tear-down code, it will be repeated in each iteration as well, as the flakiness may be in it. You can also specify the repeat count by setting the {\f2 GTEST_REPEAT}  environment variable.} \par
{\i } \par}
{\bkmkstart AAAAAAAAEP}
{\bkmkend AAAAAAAAEP}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Shuffling the Tests
\par}
{\tc\tcl3 \v Shuffling the Tests}
{\i  You can specify the {\f2 --gtest_shuffle}  flag (or set the {\f2 GTEST_SHUFFLE}  environment variable to {\f2 1} ) to run the tests in a program in a random order. This helps to reveal bad dependencies between tests.} \par
{\i By default, googletest uses a random seed calculated from the current time. Therefore you'll get a different order every time. The console output includes the random seed value, such that you can reproduce an order-related test failure later. To specify the random seed explicitly, use the {\f2 --gtest_random_seed=SEED}  flag (or set the {\f2 GTEST_RANDOM_SEED}  environment variable), where {\f2 SEED}  is an integer in the range [0, 99999]. The seed value 0 is special: it tells googletest to do the default behavior of calculating the seed from the current time.} \par
{\i If you combine this with {\f2 --gtest_repeat=N} , googletest will pick a different random seed and re-shuffle the tests in each iteration.} \par
{\i } \par}
{\bkmkstart AAAAAAAAEQ}
{\bkmkend AAAAAAAAEQ}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Distributing Test Functions to Multiple Machines
\par}
{\tc\tcl3 \v Distributing Test Functions to Multiple Machines}
{\i  If you have more than one machine you can use to run a test program, you might want to run the test functions in parallel and get the result faster. We call this technique {\i sharding} , where each machine is called a {\i shard} .} \par
{\i GoogleTest is compatible with test sharding. To take advantage of this feature, your test runner (not part of GoogleTest) needs to do the following:} \par
{\i {
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Allocate a number of machines (shards) to run the tests.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab On each shard, set the {\f2 GTEST_TOTAL_SHARDS}  environment variable to the total number of shards. It must be the same for all shards.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab On each shard, set the {\f2 GTEST_SHARD_INDEX}  environment variable to the index of the shard. Different shards must be assigned different indices, which must be in the range {\f2 [0, GTEST_TOTAL_SHARDS - 1]} .\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Run the same test program on all shards. When GoogleTest sees the above two environment variables, it will select a subset of the test functions to run. Across all shards, each test function in the program will be run exactly once.\par}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Wait for all shards to finish, then collect and report the results.\par}
\par
} \par
{\i Your project may have tests that were written without GoogleTest and thus don't understand this protocol. In order for your test runner to figure out which test supports sharding, it can set the environment variable {\f2 GTEST_SHARD_STATUS_FILE}  to a non-existent file path. If a test program supports sharding, it will create this file to acknowledge that fact; otherwise it will not create it. The actual contents of the file are not important at this time, although we may put some useful information in it in the future.} \par
{\i Here's an example to make it clear. Suppose you have a test program {\f2 foo_test}  that contains the following 5 test functions:} \par
{\i {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(A, V)\par
TEST(A, W)\par
TEST(B, X)\par
TEST(B, Y)\par
TEST(B, Z)\par
}
} \par
{\i Suppose you have 3 machines at your disposal. To run the test functions in parallel, you would set {\f2 GTEST_TOTAL_SHARDS}  to 3 on all machines, and set {\f2 GTEST_SHARD_INDEX}  to 0, 1, and 2 on the machines respectively. Then you would run the same {\f2 foo_test}  on each machine.} \par
{\i GoogleTest reserves the right to change how the work is distributed across the shards, but here's one possible scenario:} \par
{\i {
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Machine #0 runs {\f2 A.V}  and {\f2 B.X} .\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Machine #1 runs {\f2 A.W}  and {\f2 B.Y} .\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Machine #2 runs {\f2 B.Z} .\par}
\par
} \par
{\i } \par}
{\bkmkstart AAAAAAAAER}
{\bkmkend AAAAAAAAER}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Controlling Test Output
\par}
{\tc\tcl3 \v Controlling Test Output}
{\i  } \par
{\bkmkstart AAAAAAAAES}
{\bkmkend AAAAAAAAES}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Colored Terminal Output
\par}
{\tc\tcl4 \v Colored Terminal Output}
{\i  googletest can use colors in its terminal output to make it easier to spot the important information:} \par
{\i {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ...
<font color="green">[----------]</font> 1 test from {\b FooTest}
<font color="green">[ RUN      ]</font> FooTest.DoesAbc
<font color="green">[       OK ]</font> FooTest.DoesAbc
<font color="green">[----------]</font> 2 tests from BarTest
<font color="green">[ RUN      ]</font> BarTest.HasXyzProperty
<font color="green">[       OK ]</font> BarTest.HasXyzProperty
<font color="green">[ RUN      ]</font> BarTest.ReturnsTrueOnSuccess
... some error messages ...
<font color="red">[   FAILED ]</font> BarTest.ReturnsTrueOnSuccess
...
<font color="green">[==========]</font> 30 tests from 14 test suites ran.
<font color="green">[   PASSED ]</font> 28 tests.
<font color="red">[   FAILED ]</font> 2 tests, listed below:
<font color="red">[   FAILED ]</font> BarTest.ReturnsTrueOnSuccess
<font color="red">[   FAILED ]</font> AnotherTest.DoesXyz

 2 FAILED TESTS
\par}
} \par
{\i You can set the {\f2 GTEST_COLOR}  environment variable or the {\f2 --gtest_color}  command line flag to {\f2 yes} , {\f2 no} , or {\f2 auto}  (the default) to enable colors, disable colors, or let googletest decide. When the value is {\f2 auto} , googletest will use colors if and only if the output goes to a terminal and (on non-Windows platforms) the {\f2 TERM}  environment variable is set to {\f2 xterm}  or {\f2 xterm-color} .} \par
{\i } \par}
{\bkmkstart AAAAAAAAET}
{\bkmkend AAAAAAAAET}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Suppressing test passes
\par}
{\tc\tcl4 \v Suppressing test passes}
{\i  By default, googletest prints 1 line of output for each test, indicating if it passed or failed. To show only test failures, run the test program with {\f2 --gtest_brief=1} , or set the GTEST_BRIEF environment variable to {\f2 1} .} \par
{\i } \par}
{\bkmkstart AAAAAAAAEU}
{\bkmkend AAAAAAAAEU}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Suppressing the Elapsed Time
\par}
{\tc\tcl4 \v Suppressing the Elapsed Time}
{\i  By default, googletest prints the time it takes to run each test. To disable that, run the test program with the {\f2 --gtest_print_time=0}  command line flag, or set the GTEST_PRINT_TIME environment variable to {\f2 0} .} \par
{\i } \par}
{\bkmkstart AAAAAAAAEV}
{\bkmkend AAAAAAAAEV}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Suppressing UTF-8 Text Output
\par}
{\tc\tcl4 \v Suppressing UTF-8 Text Output}
{\i  In case of assertion failures, googletest prints expected and actual values of type {\f2 string}  both as hex-encoded strings as well as in readable UTF-8 text if they contain valid non-ASCII UTF-8 characters. If you want to suppress the UTF-8 text because, for example, you don't have an UTF-8 compatible output medium, run the test program with {\f2 --gtest_print_utf8=0}  or set the {\f2 GTEST_PRINT_UTF8}  environment variable to {\f2 0} .} \par
{\i } \par}
{\bkmkstart AAAAAAAAEW}
{\bkmkend AAAAAAAAEW}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Generating an XML Report
\par}
{\tc\tcl4 \v Generating an XML Report}
{\i  googletest can emit a detailed XML report to a file in addition to its normal textual output. The report contains the duration of each test, and thus can help you identify slow tests.} \par
{\i To generate the XML report, set the {\f2 GTEST_OUTPUT}  environment variable or the {\f2 --gtest_output}  flag to the string {\f2 "xml:path_to_output_file"} , which will create the file at the given location. You can also just use the string {\f2 "xml"} , in which case the output can be found in the {\f2 test_detail.xml}  file in the current directory.} \par
{\i If you specify a directory (for example, {\f2 "xml:output/directory/"}  on Linux or {\f2 "xml:output\\directory\\"</tt> on Windows), googletest will create the XML file in
that directory, named after the test executable (e.g. <tt>foo_test.xml</tt> for test
program <tt>foo_test</tt> or <tt>foo_test.exe</tt>). If the file already exists (perhaps left
over from a previous run), googletest will pick a different name (e.g.
<tt>foo_test_1.xml</tt>) to avoid overwriting it.

The report is based on the <tt>junitreport</tt> Ant task. Since that format was
originally intended for Java, a little interpretation is required to make it
apply to googletest tests, as shown here:

@icode\{xml\} 
<testsuites name="AllTests" ...>
  <testsuite name="test_case_name" ...>
    <testcase    name="test_name" ...>
      <failure message="..."/>
      <failure message="..."/>
      <failure message="..."/>
    </testcase>
  </testsuite>
</testsuites>
@endicode

*   The root <tt>\\<testsuites\\></tt> element corresponds to the entire test program.
*   <tt>\\<testsuite\\></tt> elements correspond to googletest test suites.
*   <tt>\\<testcase\\></tt> elements correspond to googletest test functions.

For instance, the following program

@icode \{c++\}
TEST(MathTest, Addition) \{ ... \}
TEST(MathTest, Subtraction) \{ ... \}
TEST(LogicTest, NonContradiction) \{ ... \}
@endicode

could generate this report:

@icode\{xml\} 
<?xml version="1.0" encoding="UTF-8"?>
<testsuites tests="3" failures="1" errors="0" time="0.035" timestamp="2011-10-31T18:52:42" name="AllTests">
  <testsuite name="MathTest" tests="2" failures="1" errors="0" time="0.015">
    <testcase name="Addition" file="test.cpp" line="1" status="run" time="0.007" classname="">
      <failure message="Value of: add(1, 1)&#x0A; Actual: 3&#x0A;Expected: 2" type="">...</failure>
      <failure message="Value of: add(1, -1)&#x0A; Actual: 1&#x0A;Expected: 0" type="">...</failure>
    </testcase>
    <testcase name="Subtraction" file="test.cpp" line="2" status="run" time="0.005" classname="">
    </testcase>
  </testsuite>
  <testsuite name="LogicTest" tests="1" failures="0" errors="0" time="0.005">
    <testcase name="NonContradiction" file="test.cpp" line="3" status="run" time="0.005" classname="">
    </testcase>
  </testsuite>
</testsuites>
@endicode

Things to note:

*   The <tt>tests</tt> attribute of a <tt>\\<testsuites\\></tt> or <tt>\\<testsuite\\></tt> element tells how
    many test functions the googletest program or test suite contains, while the
    <tt>failures</tt> attribute tells how many of them failed.

*   The <tt>time</tt> attribute expresses the duration of the test, test suite, or
    entire test program in seconds.

*   The <tt>timestamp</tt> attribute records the local date and time of the test
    execution.

*   The <tt>file</tt> and <tt>line</tt> attributes record the source file location, where the
    test was defined.

*   Each <tt>\\<failure\\></tt> element corresponds to a single failed googletest
    assertion.

@subsubsection autotoc_md75 Generating a JSON Report

googletest can also emit a JSON report as an alternative format to XML. To
generate the JSON report, set the <tt>GTEST_OUTPUT</tt> environment variable or the
<tt>--gtest_output</tt> flag to the string <tt>"json:path_to_output_file"</tt>, which will
create the file at the given location. You can also just use the string
<tt>"json"</tt>, in which case the output can be found in the <tt>test_detail.json</tt> file
in the current directory.

The report format conforms to the following JSON Schema:

@icode\{json\} 
\{
  "$schema": "{\f2 http://json-schema.org/schema#}",
  "type": "object",
  "definitions": \{
    "TestCase": \{
      "type": "object",
      "properties": \{
        "name": \{ "type": "string" \},
        "tests": \{ "type": "integer" \},
        "failures": \{ "type": "integer" \},
        "disabled": \{ "type": "integer" \},
        "time": \{ "type": "string" \},
        "testsuite": \{
          "type": "array",
          "items": \{
            "$ref": "#/definitions/TestInfo"
          \}
        \}
      \}
    \},
    "TestInfo": \{
      "type": "object",
      "properties": \{
        "name": \{ "type": "string" \},
        "file": \{ "type": "string" \},
        "line": \{ "type": "integer" \},
        "status": \{
          "type": "string",
          "enum": ["RUN", "NOTRUN"]
        \},
        "time": \{ "type": "string" \},
        "classname": \{ "type": "string" \},
        "failures": \{
          "type": "array",
          "items": \{
            "$ref": "#/definitions/Failure"
          \}
        \}
      \}
    \},
    "Failure": \{
      "type": "object",
      "properties": \{
        "failures": \{ "type": "string" \},
        "type": \{ "type": "string" \}
      \}
    \}
  \},
  "properties": \{
    "tests": \{ "type": "integer" \},
    "failures": \{ "type": "integer" \},
    "disabled": \{ "type": "integer" \},
    "errors": \{ "type": "integer" \},
    "timestamp": \{
      "type": "string",
      "format": "date-time"
    \},
    "time": \{ "type": "string" \},
    "name": \{ "type": "string" \},
    "testsuites": \{
      "type": "array",
      "items": \{
        "$ref": "#/definitions/TestCase"
      \}
    \}
  \}
\}
@endicode

The report uses the format that conforms to the following Proto3 using the
<a href="{\f2 https://developers.google.com/protocol-buffers/docs/proto3#json}" >JSON encoding</a>:

@icode\{proto\} 
syntax = "proto3";

package googletest;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

message UnitTest \{
  int32 tests = 1;
  int32 failures = 2;
  int32 disabled = 3;
  int32 errors = 4;
  google.protobuf.Timestamp timestamp = 5;
  google.protobuf.Duration time = 6;
  string name = 7;
  repeated TestCase testsuites = 8;
\}

message TestCase \{
  string name = 1;
  int32 tests = 2;
  int32 failures = 3;
  int32 disabled = 4;
  int32 errors = 5;
  google.protobuf.Duration time = 6;
  repeated TestInfo testsuite = 7;
\}

message TestInfo \{
  string name = 1;
  string file = 6;
  int32 line = 7;
  enum Status \{
    RUN = 0;
    NOTRUN = 1;
  \}
  Status status = 2;
  google.protobuf.Duration time = 3;
  string classname = 4;
  message Failure \{
    string failures = 1;
    string type = 2;
  \}
  repeated Failure failures = 5;
\}
@endicode

For instance, the following program

@icode \{c++\}
TEST(MathTest, Addition) \{ ... \}
TEST(MathTest, Subtraction) \{ ... \}
TEST(LogicTest, NonContradiction) \{ ... \}
@endicode

could generate this report:

@icode\{json\} 
\{
  "tests": 3,
  "failures": 1,
  "errors": 0,
  "time": "0.035s",
  "timestamp": "2011-10-31T18:52:42Z",
  "name": "AllTests",
  "testsuites": [
    \{
      "name": "MathTest",
      "tests": 2,
      "failures": 1,
      "errors": 0,
      "time": "0.015s",
      "testsuite": [
        \{
          "name": "Addition",
          "file": "test.cpp",
          "line": 1,
          "status": "RUN",
          "time": "0.007s",
          "classname": "",
          "failures": [
            \{
              "message": "Value of: add(1, 1)\par
 Actual: 3\\nExpected: 2",
              "type": ""
            \},
            \{
              "message": "Value of: add(1, -1)\par
 Actual: 1\\nExpected: 0",
              "type": ""
            \}
          ]
        \},
        \{
          "name": "Subtraction",
          "file": "test.cpp",
          "line": 2,
          "status": "RUN",
          "time": "0.005s",
          "classname": ""
        \}
      ]
    \},
    \{
      "name": "LogicTest",
      "tests": 1,
      "failures": 0,
      "errors": 0,
      "time": "0.005s",
      "testsuite": [
        \{
          "name": "NonContradiction",
          "file": "test.cpp",
          "line": 3,
          "status": "RUN",
          "time": "0.005s",
          "classname": ""
        \}
      ]
    \}
  ]
\}
@endicode

\{: .callout .important\}
IMPORTANT: The exact format of the JSON document is subject to change.

@subsection autotoc_md76 Controlling How Failures Are Reported

@subsubsection autotoc_md77 Detecting Test Premature Exit

Google Test implements the <em>premature-exit-file</em> protocol for test runners to
catch any kind of unexpected exits of test programs. Upon start, Google Test
creates the file which will be automatically deleted after all work has been
finished. Then, the test runner can check if this file exists. In case the file
remains undeleted, the inspected test has exited prematurely.

This feature is enabled only if the <tt>TEST_PREMATURE_EXIT_FILE</tt> environment
variable has been set.

@subsubsection autotoc_md78 Turning Assertion Failures into Break-Points

When running test programs under a debugger, it's very convenient if the
debugger can catch an assertion failure and automatically drop into interactive
mode. googletest's <em>break-on-failure</em> mode supports this behavior.

To enable it, set the <tt>GTEST_BREAK_ON_FAILURE</tt> environment variable to a value
other than <tt>0</tt>. Alternatively, you can use the <tt>--gtest_break_on_failure</tt>
command line flag.

@subsubsection autotoc_md79 Disabling Catching Test-Thrown Exceptions

googletest can be used either with or without exceptions enabled. If a test
throws a C++ exception or (on Windows) a structured exception (SEH), by default
googletest catches it, reports it as a test failure, and continues with the next
test method. This maximizes the coverage of a test run. Also, on Windows an
uncaught exception will cause a pop-up window, so catching the exceptions allows
you to run the tests automatically.

When debugging the test failures, however, you may instead want the exceptions
to be handled by the debugger, such that you can examine the call stack when an
exception is thrown. To achieve that, set the <tt>GTEST_CATCH_EXCEPTIONS</tt>
environment variable to <tt>0</tt>, or use the <tt>--gtest_catch_exceptions=0</tt> flag when
running the tests.

@subsection autotoc_md80 Sanitizer Integration

The
<a href="{\f2 https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html}" >Undefined Behavior Sanitizer</a>,
<a href="{\f2 https://github.com/google/sanitizers/wiki/AddressSanitizer}" >Address Sanitizer</a>,
and
<a href="{\f2 https://github.com/google/sanitizers/wiki/ThreadSanitizerCppManual}" >Thread Sanitizer</a>
all provide weak functions that you can override to trigger explicit failures
when they detect sanitizer errors, such as creating a reference from <tt>nullptr</tt>.
To override these functions, place definitions for them in a source file that
you compile as part of your main binary:

@icode 
extern "C" \{
void __ubsan_on_report() \{
  FAIL() << "Encountered an undefined behavior sanitizer error";
\}
void __asan_on_error() \{
  FAIL() << "Encountered an address sanitizer error";
\}
void __tsan_on_report() \{
  FAIL() << "Encountered a thread sanitizer error";
\}
\}  // extern "C" } } \par
{\i {\f2 After compiling your project with one of the sanitizers enabled, if a particular test triggers a sanitizer error, googletest will report that it failed. } } \par}
\par}
\par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Community-Created Documentation{\tc \v Community-Created Documentation}\par \pard\plain 
{\bkmkstart AAAAAAADXN}
{\bkmkend AAAAAAADXN}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The following is a list, in no particular order, of links to documentation created by the Googletest community.\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Googlemock Insights}, by {\f2 ElectricRCAircraftGuy} \par}
\par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
GoogleTest FAQ{\tc \v GoogleTest FAQ}\par \pard\plain 
{\bkmkstart AAAAAAADXO}
{\bkmkend AAAAAAADXO}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{\bkmkstart AAAAAAAAEX}
{\bkmkend AAAAAAAAEX}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Why should test suite names and test names not contain underscore?
\par}
{\tc\tcl2 \v Why should test suite names and test names not contain underscore?}
\{: .callout .note\} Note: GoogleTest reserves underscore ({\f2 _} ) for special purpose keywords, such as {\f2 the {\f2 DISABLED_}  prefix}, in addition to the following rationale.\par
Underscore ({\f2 _} ) is special, as C++ reserves the following to be used by the compiler and the standard library:\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab any identifier that starts with an {\f2 _}  followed by an upper-case letter, and\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
2.\tab any identifier that contains two consecutive underscores (i.e. {\f2 __} ) {\i anywhere}  in its name.\par}
\par
User code is {\i prohibited}  from using such identifiers.\par
Now let's look at what this means for {\f2 TEST}  and {\f2 TEST_F} .\par
Currently {\f2 TEST(TestSuiteName, TestName)}  generates a class named {\f2 TestSuiteName_TestName_Test} . What happens if {\f2 TestSuiteName}  or {\f2 TestName}  contains {\f2 _} ?\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If {\f2 TestSuiteName}  starts with an {\f2 _}  followed by an upper-case letter (say, {\f2 _Foo} ), we end up with {\f2 _Foo_TestName_Test} , which is reserved and thus invalid.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
2.\tab If {\f2 TestSuiteName}  ends with an {\f2 _}  (say, {\f2 Foo_} ), we get {\f2 Foo__TestName_Test} , which is invalid.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
3.\tab If {\f2 TestName}  starts with an {\f2 _}  (say, {\f2 _Bar} ), we get {\f2 TestSuiteName__Bar_Test} , which is invalid.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
4.\tab If {\f2 TestName}  ends with an {\f2 _}  (say, {\f2 Bar_} ), we get {\f2 TestSuiteName_Bar__Test} , which is invalid.\par}
\par
So clearly {\f2 TestSuiteName}  and {\f2 TestName}  cannot start or end with {\f2 _}  (Actually, {\f2 TestSuiteName}  can start with {\f2 _}  \'96 as long as the {\f2 _}  isn't followed by an upper-case letter. But that's getting complicated. So for simplicity we just say that it cannot start with {\f2 _} .).\par
It may seem fine for {\f2 TestSuiteName}  and {\f2 TestName}  to contain {\f2 _}  in the middle. However, consider this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
TEST(Time, Flies_Like_An_Arrow) \{ ... \}\par
TEST(Time_Flies, Like_An_Arrow) \{ ... \}\par
}
\par
Now, the two {\f2 TEST} s will both generate the same class ({\f2 Time_Flies_Like_An_Arrow_Test} ). That's not good.\par
So for simplicity, we just ask the users to avoid {\f2 _}  in {\f2 TestSuiteName}  and {\f2 TestName} . The rule is more constraining than necessary, but it's simple and easy to remember. It also gives GoogleTest some wiggle room in case its implementation needs to change in the future.\par
If you violate the rule, there may not be immediate consequences, but your test may (just may) break with a new compiler (or a new version of the compiler you are using) or with a new version of GoogleTest. Therefore it's best to follow the rule.\par}
{\bkmkstart AAAAAAAAEY}
{\bkmkend AAAAAAAAEY}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Why does GoogleTest support <tt>EXPECT_EQ(NULL, ptr)</tt> and <tt>ASSERT_EQ(NULL, ptr)</tt> but not <tt>EXPECT_NE(NULL, ptr)</tt> and <tt>ASSERT_NE(NULL, ptr)</tt>?
\par}
{\tc\tcl2 \v Why does GoogleTest support <tt>EXPECT_EQ(NULL, ptr)</tt> and <tt>ASSERT_EQ(NULL, ptr)</tt> but not <tt>EXPECT_NE(NULL, ptr)</tt> and <tt>ASSERT_NE(NULL, ptr)</tt>?}
First of all, you can use {\f2 nullptr}  with each of these macros, e.g. {\f2 EXPECT_EQ(ptr, nullptr)} , {\f2 EXPECT_NE(ptr, nullptr)} , {\f2 ASSERT_EQ(ptr, nullptr)} , {\f2 ASSERT_NE(ptr, nullptr)} . This is the preferred syntax in the style guide because {\f2 nullptr}  does not have the type problems that {\f2 NULL}  does.\par
Due to some peculiarity of C++, it requires some non-trivial template meta programming tricks to support using {\f2 NULL}  as an argument of the {\f2 EXPECT_XX()}  and {\f2 ASSERT_XX()}  macros. Therefore we only do it where it's most needed (otherwise we make the implementation of GoogleTest harder to maintain and more error-prone than necessary).\par
Historically, the {\f2 EXPECT_EQ()}  macro took the {\i expected}  value as its first argument and the {\i actual}  value as the second, though this argument order is now discouraged. It was reasonable that someone wanted to write {\f2 EXPECT_EQ(NULL, some_expression)} , and this indeed was requested several times. Therefore we implemented it.\par
The need for {\f2 EXPECT_NE(NULL, ptr)}  wasn't nearly as strong. When the assertion fails, you already know that {\f2 ptr}  must be {\f2 NULL} , so it doesn't add any information to print {\f2 ptr}  in this case. That means {\f2 EXPECT_TRUE(ptr != NULL)}  works just as well.\par
If we were to support {\f2 EXPECT_NE(NULL, ptr)} , for consistency we'd have to support {\f2 EXPECT_NE(ptr, NULL)}  as well. This means using the template meta programming tricks twice in the implementation, making it even harder to understand and maintain. We believe the benefit doesn't justify the cost.\par
Finally, with the growth of the gMock matcher library, we are encouraging people to use the unified {\f2 EXPECT_THAT(value, matcher)}  syntax more often in tests. One significant advantage of the matcher approach is that matchers can be easily combined to form new matchers, while the {\f2 EXPECT_NE} , etc, macros cannot be easily combined. Therefore we want to invest more in the matchers than in the {\f2 EXPECT_XX()}  macros.\par}
{\bkmkstart AAAAAAAAEZ}
{\bkmkend AAAAAAAAEZ}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
I need to test that different implementations of an interface satisfy some common requirements. Should I use typed tests or value-parameterized tests?
\par}
{\tc\tcl2 \v I need to test that different implementations of an interface satisfy some common requirements. Should I use typed tests or value-parameterized tests?}
For testing various implementations of the same interface, either typed tests or value-parameterized tests can get it done. It's really up to you the user to decide which is more convenient for you, depending on your particular case. Some rough guidelines:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Typed tests can be easier to write if instances of the different implementations can be created the same way, modulo the type. For example, if all these implementations have a public default constructor (such that you can write {\f2 new TypeParam} ), or if their factory functions have the same form (e.g. {\f2 CreateInstance<TypeParam>()} ).\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Value-parameterized tests can be easier to write if you need different code patterns to create different implementations' instances, e.g. {\f2 new Foo}  vs {\f2 new Bar(5)} . To accommodate for the differences, you can write factory function wrappers and pass these function pointers to the tests as their parameters.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
When a typed test fails, the default output includes the name of the type, which can help you quickly identify which implementation is wrong. Value-parameterized tests only show the number of the failed iteration by default. You will need to define a function that returns the iteration name and pass it as the third parameter to INSTANTIATE_TEST_SUITE_P to have more useful output.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
When using typed tests, you need to make sure you are testing against the interface type, not the concrete types (in other words, you want to make sure {\f2 implicit_cast<MyInterface*>(my_concrete_impl)}  works, not just that {\f2 my_concrete_impl}  works). It's less likely to make mistakes in this area when using value-parameterized tests.\par}
\par
I hope I didn't confuse you more. :-) If you don't mind, I'd suggest you to give both approaches a try. Practice is a much better way to grasp the subtle differences between the two tools. Once you have some concrete experience, you can much more easily decide which one to use the next time.\par}
{\bkmkstart AAAAAAAAFA}
{\bkmkend AAAAAAAAFA}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
I got some run-time errors about invalid proto descriptors when using <tt>ProtocolMessageEquals</tt>. Help!
\par}
{\tc\tcl2 \v I got some run-time errors about invalid proto descriptors when using <tt>ProtocolMessageEquals</tt>. Help!}
\{: .callout .note\} {\b Note:}  {\f2 ProtocolMessageEquals}  and {\f2 ProtocolMessageEquiv}  are {\i deprecated}  now. Please use {\f2 EqualsProto} , etc instead.\par
{\f2 ProtocolMessageEquals}  and {\f2 ProtocolMessageEquiv}  were redefined recently and are now less tolerant of invalid protocol buffer definitions. In particular, if you have a {\f2 foo.proto}  that doesn't fully qualify the type of a protocol message it references (e.g. {\f2 message<Bar>}  where it should be {\f2 message<blah.Bar>} ), you will now get run-time errors like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ... descriptor.cc:...] Invalid proto descriptor for file "path/to/foo.proto":\par
... descriptor.cc:...]  blah.MyMessage.my_field: ".Bar" is not defined.\par
}
\par
If you see this, your {\f2 .proto}  file is broken and needs to be fixed by making the types fully qualified. The new definition of {\f2 ProtocolMessageEquals}  and {\f2 ProtocolMessageEquiv}  just happen to reveal your bug.\par}
{\bkmkstart AAAAAAAAFB}
{\bkmkend AAAAAAAAFB}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
My death test modifies some state, but the change seems lost after the death test finishes. Why?
\par}
{\tc\tcl2 \v My death test modifies some state, but the change seems lost after the death test finishes. Why?}
Death tests ({\f2 EXPECT_DEATH} , etc) are executed in a sub-process s.t. the expected crash won't kill the test program (i.e. the parent process). As a result, any in-memory side effects they incur are observable in their respective sub-processes, but not in the parent process. You can think of them as running in a parallel universe, more or less.\par
In particular, if you use mocking and the death test statement invokes some mock methods, the parent process will think the calls have never occurred. Therefore, you may want to move your {\f2 EXPECT_CALL}  statements inside the {\f2 EXPECT_DEATH}  macro.\par}
{\bkmkstart AAAAAAAAFC}
{\bkmkend AAAAAAAAFC}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
EXPECT_EQ(htonl(blah), blah_blah) generates weird compiler errors in opt mode. Is this a GoogleTest bug?
\par}
{\tc\tcl2 \v EXPECT_EQ(htonl(blah), blah_blah) generates weird compiler errors in opt mode. Is this a GoogleTest bug?}
Actually, the bug is in {\f2 htonl()} .\par
According to \'91'man htonl\'92{\f2 ,} htonl(){\f2 is a *function*, which means it's valid to use} htonl{\f2 as a function pointer. However, in opt mode} htonl()` is defined as a {\i macro} , which breaks this usage.\par
Worse, the macro definition of {\f2 htonl()}  uses a {\f2 gcc}  extension and is {\i not}  standard C++. That hacky implementation has some ad hoc limitations. In particular, it prevents you from writing {\f2 Foo<sizeof(htonl(x))>()} , where {\f2 Foo}  is a template that has an integral argument.\par
The implementation of {\f2 EXPECT_EQ(a, b)}  uses {\f2 sizeof(... a ...)}  inside a template argument, and thus doesn't compile in opt mode when {\f2 a}  contains a call to {\f2 htonl()} . It is difficult to make {\f2 EXPECT_EQ}  bypass the {\f2 htonl()}  bug, as the solution must work with different compilers on various platforms.\par}
{\bkmkstart AAAAAAAAFD}
{\bkmkend AAAAAAAAFD}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
The compiler complains about "undefined references" to some static const member variables, but I did define them in the class body. What's wrong?
\par}
{\tc\tcl2 \v The compiler complains about "undefined references" to some static const member variables, but I did define them in the class body. What's wrong?}
If your class has a static data member:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
// foo.h\par
class Foo \{\par
  ...\par
  static const int kBar = 100;\par
\};\par
}
\par
You also need to define it {\i outside}  of the class body in {\f2 foo.cc} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
const int Foo::kBar;  // No initializer here.\par
}
\par
Otherwise your code is {\b invalid C++} , and may break in unexpected ways. In particular, using it in GoogleTest comparison assertions ({\f2 EXPECT_EQ} , etc) will generate an "undefined reference" linker error. The fact that "it used to work" doesn't mean it's valid. It just means that you were lucky. :-)\par
If the declaration of the static data member is {\f2 constexpr}  then it is implicitly an {\f2 inline}  definition, and a separate definition in {\f2 foo.cc}  is not needed:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
// foo.h\par
class Foo \{\par
  ...\par
  static constexpr int kBar = 100;  // Defines kBar, no need to do it in foo.cc.\par
\};\par
}
\par}
{\bkmkstart AAAAAAAAFE}
{\bkmkend AAAAAAAAFE}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Can I derive a test fixture from another?
\par}
{\tc\tcl2 \v Can I derive a test fixture from another?}
Yes.\par
Each test fixture has a corresponding and same named test suite. This means only one test suite can use a particular fixture. Sometimes, however, multiple test cases may want to use the same or slightly different fixtures. For example, you may want to make sure that all of a GUI library's test suites don't leak important system resources like fonts and brushes.\par
In GoogleTest, you share a fixture among test suites by putting the shared logic in a base test fixture, then deriving from that base a separate fixture for each test suite that wants to use this common logic. You then use {\f2 TEST_F()}  to write tests using each derived fixture.\par
Typically, your code looks like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
// Defines a base test fixture.\par
class BaseTest : public ::testing::Test \{\par
 protected:\par
  ...\par
\};\par
\par
// Derives a fixture FooTest from BaseTest.\par
class FooTest : public BaseTest \{\par
 protected:\par
  void SetUp() override \{\par
    BaseTest::SetUp();  // Sets up the base fixture first.\par
    ... additional set-up work ...\par
  \}\par
\par
  void TearDown() override \{\par
    ... clean-up work for FooTest ...\par
    BaseTest::TearDown();  // Remember to tear down the base fixture\par
                           // after cleaning up FooTest!\par
  \}\par
\par
  ... functions and variables for FooTest ...\par
\};\par
\par
// Tests that use the fixture FooTest.\par
TEST_F(FooTest, Bar) \{ ... \}\par
TEST_F(FooTest, Baz) \{ ... \}\par
\par
... additional fixtures derived from BaseTest ...\par
}
\par
If necessary, you can continue to derive test fixtures from a derived fixture. GoogleTest has no limit on how deep the hierarchy can be.\par
For a complete example using derived test fixtures, see {\f2 sample5_unittest.cc}.\par}
{\bkmkstart AAAAAAAAFF}
{\bkmkend AAAAAAAAFF}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
My compiler complains "void value not ignored as it ought to be." What does this mean?
\par}
{\tc\tcl2 \v My compiler complains "void value not ignored as it ought to be." What does this mean?}
You're probably using an {\f2 ASSERT_*()}  in a function that doesn't return {\f2 void} . {\f2 ASSERT_*()}  can only be used in {\f2 void}  functions, due to exceptions being disabled by our build system. Please see more details {\f2 here}.\par}
{\bkmkstart AAAAAAAAFG}
{\bkmkend AAAAAAAAFG}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
My death test hangs (or seg-faults). How do I fix it?
\par}
{\tc\tcl2 \v My death test hangs (or seg-faults). How do I fix it?}
In GoogleTest, death tests are run in a child process and the way they work is delicate. To write death tests you really need to understand how they work\'97see the details at {\f2 Death Assertions} in the Assertions Reference.\par
In particular, death tests don't like having multiple threads in the parent process. So the first thing you can try is to eliminate creating threads outside of {\f2 EXPECT_DEATH()} . For example, you may want to use mocks or fake objects instead of real ones in your tests.\par
Sometimes this is impossible as some library you must use may be creating threads before {\f2 main()}  is even reached. In this case, you can try to minimize the chance of conflicts by either moving as many activities as possible inside {\f2 EXPECT_DEATH()}  (in the extreme case, you want to move everything inside), or leaving as few things as possible in it. Also, you can try to set the death test style to {\f2 "threadsafe"} , which is safer but slower, and see if it helps.\par
If you go with thread-safe death tests, remember that they rerun the test program from the beginning in the child process. Therefore make sure your program can run side-by-side with itself and is deterministic.\par
In the end, this boils down to good concurrent programming. You have to make sure that there are no race conditions or deadlocks in your program. No silver bullet - sorry!\par}
{\bkmkstart AAAAAAAAFH}
{\bkmkend AAAAAAAAFH}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Should I use the constructor/destructor of the test fixture or SetUp()/TearDown()?
\par}
{\tc\tcl2 \v Should I use the constructor/destructor of the test fixture or SetUp()/TearDown()?}
The first thing to remember is that GoogleTest does {\b not}  reuse the same test fixture object across multiple tests. For each {\f2 TEST_F} , GoogleTest will create a {\b fresh}  test fixture object, immediately call {\f2 SetUp()} , run the test body, call {\f2 TearDown()} , and then delete the test fixture object.\par
When you need to write per-test set-up and tear-down logic, you have the choice between using the test fixture constructor/destructor or {\f2 SetUp()/TearDown()} . The former is usually preferred, as it has the following benefits:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
By initializing a member variable in the constructor, we have the option to make it {\f2 const} , which helps prevent accidental changes to its value and makes the tests more obviously correct.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
In case we need to subclass the test fixture class, the subclass' constructor is guaranteed to call the base class' constructor {\i first} , and the subclass' destructor is guaranteed to call the base class' destructor {\i afterward} . With {\f2 SetUp()/TearDown()} , a subclass may make the mistake of forgetting to call the base class' {\f2 SetUp()/TearDown()}  or call them at the wrong time.\par}
\par
You may still want to use {\f2 SetUp()/TearDown()}  in the following cases:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
C++ does not allow virtual function calls in constructors and destructors. You can call a method declared as virtual, but it will not use dynamic dispatch. It will use the definition from the class the constructor of which is currently executing. This is because calling a virtual method before the derived class constructor has a chance to run is very dangerous - the virtual method might operate on uninitialized data. Therefore, if you need to call a method that will be overridden in a derived class, you have to use {\f2 SetUp()/TearDown()} .\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
In the body of a constructor (or destructor), it's not possible to use the {\f2 ASSERT_xx}  macros. Therefore, if the set-up operation could cause a fatal test failure that should prevent the test from running, it's necessary to use {\f2 abort}  and abort the whole test executable, or to use {\f2 SetUp()}  instead of a constructor.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If the tear-down operation could throw an exception, you must use {\f2 TearDown()}  as opposed to the destructor, as throwing in a destructor leads to undefined behavior and usually will kill your program right away. Note that many standard libraries (like STL) may throw when exceptions are enabled in the compiler. Therefore you should prefer {\f2 TearDown()}  if you want to write portable tests that work with or without exceptions.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The GoogleTest team is considering making the assertion macros throw on platforms where exceptions are enabled (e.g. Windows, Mac OS, and Linux client-side), which will eliminate the need for the user to propagate failures from a subroutine to its caller. Therefore, you shouldn't use GoogleTest assertions in a destructor if your code could run on such a platform.\par}
\par
\par}
{\bkmkstart AAAAAAAAFI}
{\bkmkend AAAAAAAAFI}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
The compiler complains "no matching function to call" when I use ASSERT_PRED*. How do I fix it?
\par}
{\tc\tcl2 \v The compiler complains "no matching function to call" when I use ASSERT_PRED*. How do I fix it?}
See details for {\f2 {\f2 EXPECT_PRED*} } in the Assertions Reference.\par}
{\bkmkstart AAAAAAAAFJ}
{\bkmkend AAAAAAAAFJ}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
My compiler complains about "ignoring return value" when I call RUN_ALL_TESTS(). Why?
\par}
{\tc\tcl2 \v My compiler complains about "ignoring return value" when I call RUN_ALL_TESTS(). Why?}
Some people had been ignoring the return value of {\f2 RUN_ALL_TESTS()} . That is, instead of\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \{c++\}\par
 return RUN_ALL_TESTS();\par
}
\par
they write\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \{c++\}\par
 RUN_ALL_TESTS();\par
}
\par
This is {\b wrong and dangerous} . The testing services needs to see the return value of {\f2 RUN_ALL_TESTS()}  in order to determine if a test has passed. If your {\f2 main()}  function ignores it, your test will be considered successful even if it has a GoogleTest assertion failure. Very bad.\par
We have decided to fix this (thanks to Michael Chastain for the idea). Now, your code will no longer be able to ignore {\f2 RUN_ALL_TESTS()}  when compiled with {\f2 gcc} . If you do so, you'll get a compiler error.\par
If you see the compiler complaining about you ignoring the return value of {\f2 RUN_ALL_TESTS()} , the fix is simple: just make sure its value is used as the return value of {\f2 main()} .\par
But how could we introduce a change that breaks existing tests? Well, in this case, the code was already broken in the first place, so we didn't break it. :-)\par}
{\bkmkstart AAAAAAAAFK}
{\bkmkend AAAAAAAAFK}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
My compiler complains that a constructor (or destructor) cannot return a value. What's going on?
\par}
{\tc\tcl2 \v My compiler complains that a constructor (or destructor) cannot return a value. What's going on?}
Due to a peculiarity of C++, in order to support the syntax for streaming messages to an {\f2 ASSERT_*} , e.g.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \{c++\}\par
 ASSERT_EQ(1, Foo()) << "blah blah" << foo;\par
}
\par
we had to give up using {\f2 ASSERT*}  and {\f2 FAIL*}  (but not {\f2 EXPECT*}  and {\f2 ADD_FAILURE*} ) in constructors and destructors. The workaround is to move the content of your constructor/destructor to a private void member function, or switch to {\f2 EXPECT_*()}  if that works. This {\f2 section} in the user's guide explains it.\par}
{\bkmkstart AAAAAAAAFL}
{\bkmkend AAAAAAAAFL}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
My SetUp() function is not called. Why?
\par}
{\tc\tcl2 \v My SetUp() function is not called. Why?}
C++ is case-sensitive. Did you spell it as {\f2 Setup()} ?\par
Similarly, sometimes people spell {\f2 SetUpTestSuite()}  as {\f2 SetupTestSuite()}  and wonder why it's never called.\par}
{\bkmkstart AAAAAAAAFM}
{\bkmkend AAAAAAAAFM}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
I have several test suites which share the same test fixture logic, do I have to define a new test fixture class for each of them? This seems pretty tedious.
\par}
{\tc\tcl2 \v I have several test suites which share the same test fixture logic, do I have to define a new test fixture class for each of them? This seems pretty tedious.}
You don't have to. Instead of\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
class FooTest : public BaseTest \{\};\par
\par
TEST_F(FooTest, Abc) \{ ... \}\par
TEST_F(FooTest, Def) \{ ... \}\par
\par
class BarTest : public BaseTest \{\};\par
\par
TEST_F(BarTest, Abc) \{ ... \}\par
TEST_F(BarTest, Def) \{ ... \}\par
}
\par
you can simply {\f2 typedef}  the test fixtures:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
typedef BaseTest FooTest;\par
\par
TEST_F(FooTest, Abc) \{ ... \}\par
TEST_F(FooTest, Def) \{ ... \}\par
\par
typedef BaseTest BarTest;\par
\par
TEST_F(BarTest, Abc) \{ ... \}\par
TEST_F(BarTest, Def) \{ ... \}\par
}
\par}
{\bkmkstart AAAAAAAAFN}
{\bkmkend AAAAAAAAFN}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
GoogleTest output is buried in a whole bunch of LOG messages. What do I do?
\par}
{\tc\tcl2 \v GoogleTest output is buried in a whole bunch of LOG messages. What do I do?}
The GoogleTest output is meant to be a concise and human-friendly report. If your test generates textual output itself, it will mix with the GoogleTest output, making it hard to read. However, there is an easy solution to this problem.\par
Since {\f2 LOG}  messages go to stderr, we decided to let GoogleTest output go to stdout. This way, you can easily separate the two using redirection. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid $ ./my_test > gtest_output.txt\par
}
\par}
{\bkmkstart AAAAAAAAFO}
{\bkmkend AAAAAAAAFO}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Why should I prefer test fixtures over global variables?
\par}
{\tc\tcl2 \v Why should I prefer test fixtures over global variables?}
There are several good reasons:\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab It's likely your test needs to change the states of its global variables. This makes it difficult to keep side effects from escaping one test and contaminating others, making debugging difficult. By using fixtures, each test has a fresh set of variables that's different (but with the same names). Thus, tests are kept independent of each other.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
2.\tab Global variables pollute the global namespace.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
3.\tab Test fixtures can be reused via subclassing, which cannot be done easily with global variables. This is useful if many test suites have something in common.\par}
\par
\par}
{\bkmkstart AAAAAAAAFP}
{\bkmkend AAAAAAAAFP}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
What can the statement argument in ASSERT_DEATH() be?
\par}
{\tc\tcl2 \v What can the statement argument in ASSERT_DEATH() be?}
{\f2 ASSERT_DEATH(statement, matcher)}  (or any death assertion macro) can be used wherever *{\f2 statement} * is valid. So basically *{\f2 statement} * can be any C++ statement that makes sense in the current context. In particular, it can reference global and/or local variables, and can be:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
a simple function call (often the case),\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
a complex expression, or\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
a compound statement.\par}
\par
Some examples are shown here:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
// A death test can be a simple function call.\par
TEST(MyDeathTest, FunctionCall) \{\par
  ASSERT_DEATH(Xyz(5), "Xyz failed");\par
\}\par
\par
// Or a complex expression that references variables and functions.\par
TEST(MyDeathTest, ComplexExpression) \{\par
  const bool c = Condition();\par
  ASSERT_DEATH((c ? Func1(0) : object2.Method("test")),\par
               "(Func1|Method) failed");\par
\}\par
\par
// Death assertions can be used anywhere in a function.  In\par
// particular, they can be inside a loop.\par
TEST(MyDeathTest, InsideLoop) \{\par
  // Verifies that Foo(0), Foo(1), ..., and Foo(4) all die.\par
  for (int i = 0; i < 5; i++) \{\par
    EXPECT_DEATH_M(Foo(i), "Foo has \\\\d+ errors",\par
                   ::testing::Message() << "where i is " << i);\par
  \}\par
\}\par
\par
// A death assertion can contain a compound statement.\par
TEST(MyDeathTest, CompoundStatement) \{\par
  // Verifies that at lease one of Bar(0), Bar(1), ..., and\par
  // Bar(4) dies.\par
  ASSERT_DEATH(\{\par
    for (int i = 0; i < 5; i++) \{\par
      Bar(i);\par
    \}\par
  \},\par
  "Bar has \\\\d+ errors");\par
\}\par
}
\par}
{\bkmkstart AAAAAAAAFQ}
{\bkmkend AAAAAAAAFQ}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
I have a fixture class <tt>FooTest</tt>, but <tt>TEST_F(FooTest, Bar)</tt> gives me error <tt>"no matching function for call to `FooTest::FooTest()'"</tt>. Why?
\par}
{\tc\tcl2 \v I have a fixture class <tt>FooTest</tt>, but <tt>TEST_F(FooTest, Bar)</tt> gives me error <tt>"no matching function for call to `FooTest::FooTest()'"</tt>. Why?}
GoogleTest needs to be able to create objects of your test fixture class, so it must have a default constructor. Normally the compiler will define one for you. However, there are cases where you have to define your own:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If you explicitly declare a non-default constructor for class {\f2 {\b FooTest}}  ({\f2 DISALLOW_EVIL_CONSTRUCTORS()}  does this), then you need to define a default constructor, even if it would be empty.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If {\f2 {\b FooTest}}  has a const non-static data member, then you have to define the default constructor {\i and}  initialize the const member in the initializer list of the constructor. (Early versions of {\f2 gcc}  doesn't force you to initialize the const member. It's a bug that has been fixed in {\f2 gcc 4} .)\par}
\par
\par}
{\bkmkstart AAAAAAAAFR}
{\bkmkend AAAAAAAAFR}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Why does ASSERT_DEATH complain about previous threads that were already joined?
\par}
{\tc\tcl2 \v Why does ASSERT_DEATH complain about previous threads that were already joined?}
With the Linux pthread library, there is no turning back once you cross the line from a single thread to multiple threads. The first time you create a thread, a manager thread is created in addition, so you get 3, not 2, threads. Later when the thread you create joins the main thread, the thread count decrements by 1, but the manager thread will never be killed, so you still have 2 threads, which means you cannot safely run a death test.\par
The new NPTL thread library doesn't suffer from this problem, as it doesn't create a manager thread. However, if you don't control which machine your test runs on, you shouldn't depend on this.\par}
{\bkmkstart AAAAAAAAFS}
{\bkmkend AAAAAAAAFS}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Why does GoogleTest require the entire test suite, instead of individual tests, to be named *DeathTest when it uses ASSERT_DEATH?
\par}
{\tc\tcl2 \v Why does GoogleTest require the entire test suite, instead of individual tests, to be named *DeathTest when it uses ASSERT_DEATH?}
GoogleTest does not interleave tests from different test suites. That is, it runs all tests in one test suite first, and then runs all tests in the next test suite, and so on. GoogleTest does this because it needs to set up a test suite before the first test in it is run, and tear it down afterwards. Splitting up the test case would require multiple set-up and tear-down processes, which is inefficient and makes the semantics unclean.\par
If we were to determine the order of tests based on test name instead of test case name, then we would have a problem with the following situation:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
TEST_F(FooTest, AbcDeathTest) \{ ... \}\par
TEST_F(FooTest, Uvw) \{ ... \}\par
\par
TEST_F(BarTest, DefDeathTest) \{ ... \}\par
TEST_F(BarTest, Xyz) \{ ... \}\par
}
\par
Since {\f2 FooTest.AbcDeathTest}  needs to run before {\f2 BarTest.Xyz} , and we don't interleave tests from different test suites, we need to run all tests in the {\f2 {\b FooTest}}  case before running any test in the {\f2 BarTest}  case. This contradicts with the requirement to run {\f2 BarTest.DefDeathTest}  before {\f2 FooTest.Uvw} .\par}
{\bkmkstart AAAAAAAAFT}
{\bkmkend AAAAAAAAFT}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
But I don't like calling my entire test suite *DeathTest when it contains both death tests and non-death tests. What do I do?
\par}
{\tc\tcl2 \v But I don't like calling my entire test suite *DeathTest when it contains both death tests and non-death tests. What do I do?}
You don't have to, but if you like, you may split up the test suite into {\f2 {\b FooTest}}  and {\f2 FooDeathTest} , where the names make it clear that they are related:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
class FooTest : public ::testing::Test \{ ... \};\par
\par
TEST_F(FooTest, Abc) \{ ... \}\par
TEST_F(FooTest, Def) \{ ... \}\par
\par
using FooDeathTest = FooTest;\par
\par
TEST_F(FooDeathTest, Uvw) \{ ... EXPECT_DEATH(...) ... \}\par
TEST_F(FooDeathTest, Xyz) \{ ... ASSERT_DEATH(...) ... \}\par
}
\par}
{\bkmkstart AAAAAAAAFU}
{\bkmkend AAAAAAAAFU}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
GoogleTest prints the LOG messages in a death test's child process only when the test fails. How can I see the LOG messages when the death test succeeds?
\par}
{\tc\tcl2 \v GoogleTest prints the LOG messages in a death test's child process only when the test fails. How can I see the LOG messages when the death test succeeds?}
Printing the LOG messages generated by the statement inside {\f2 EXPECT_DEATH()}  makes it harder to search for real problems in the parent's log. Therefore, GoogleTest only prints them when the death test has failed.\par
If you really need to see such LOG messages, a workaround is to temporarily break the death test (e.g. by changing the regex pattern it is expected to match). Admittedly, this is a hack. We'll consider a more permanent solution after the fork-and-exec-style death tests are implemented.\par}
{\bkmkstart AAAAAAAAFV}
{\bkmkend AAAAAAAAFV}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
The compiler complains about &lsquo;no match for 'operator<<&rsquo;` when I use an assertion. What gives?
\par}
{\tc\tcl2 \v The compiler complains about &lsquo;no match for 'operator<<&rsquo;` when I use an assertion. What gives?}
If you use a user-defined type {\f2 FooType}  in an assertion, you must make sure there is an {\f2 std::ostream& operator<<(std::ostream&, const FooType&)}  function defined such that we can print a value of {\f2 FooType} .\par
In addition, if {\f2 FooType}  is declared in a name space, the {\f2 <<}  operator also needs to be defined in the {\i same}  name space. See {\f2 Tip of the Week #49} for details.\par}
{\bkmkstart AAAAAAAAFW}
{\bkmkend AAAAAAAAFW}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
How do I suppress the memory leak messages on Windows?
\par}
{\tc\tcl2 \v How do I suppress the memory leak messages on Windows?}
Since the statically initialized GoogleTest singleton requires allocations on the heap, the Visual C++ memory leak detector will report memory leaks at the end of the program run. The easiest way to avoid this is to use the {\f2 _CrtMemCheckpoint}  and {\f2 _CrtMemDumpAllObjectsSince}  calls to not report any statically initialized heap objects. See MSDN for more details and additional heap check/debug routines.\par}
{\bkmkstart AAAAAAAAFX}
{\bkmkend AAAAAAAAFX}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
How can my code detect if it is running in a test?
\par}
{\tc\tcl2 \v How can my code detect if it is running in a test?}
If you write code that sniffs whether it's running in a test and does different things accordingly, you are leaking test-only logic into production code and there is no easy way to ensure that the test-only code paths aren't run by mistake in production. Such cleverness also leads to {\f2 Heisenbugs}. Therefore we strongly advise against the practice, and GoogleTest doesn't provide a way to do it.\par
In general, the recommended way to cause the code to behave differently under test is {\f2 Dependency Injection}. You can inject different functionality from the test and from the production code. Since your production code doesn't link in the for-test logic at all (the {\f2 {\f2 testonly} } attribute for BUILD targets helps to ensure that), there is no danger in accidentally running it.\par
However, if you {\i really} , {\i really} , {\i really}  have no choice, and if you follow the rule of ending your test program names with {\f2 _test} , you can use the {\i horrible}  hack of sniffing your executable name ({\f2 argv[0]}  in {\f2 main()} ) to know whether the code is under test.\par}
{\bkmkstart AAAAAAAAFY}
{\bkmkend AAAAAAAAFY}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
How do I temporarily disable a test?
\par}
{\tc\tcl2 \v How do I temporarily disable a test?}
If you have a broken test that you cannot fix right away, you can add the {\f2 DISABLED_}  prefix to its name. This will exclude it from execution. This is better than commenting out the code or using {\f2 #if 0} , as disabled tests are still compiled (and thus won't rot).\par
To include disabled tests in test execution, just invoke the test program with the {\f2 --gtest_also_run_disabled_tests}  flag.\par}
{\bkmkstart AAAAAAAAFZ}
{\bkmkend AAAAAAAAFZ}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Is it OK if I have two separate <tt>TEST(Foo, Bar)</tt> test methods defined in different namespaces?
\par}
{\tc\tcl2 \v Is it OK if I have two separate <tt>TEST(Foo, Bar)</tt> test methods defined in different namespaces?}
Yes.\par
The rule is {\b all test methods in the same test suite must use the same fixture class.}  This means that the following is {\b allowed}  because both tests use the same fixture class ({\f2 {\b testing::Test}} ).\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
namespace foo \{\par
TEST(CoolTest, DoSomething) \{\par
  SUCCEED();\par
\}\par
\}  // namespace foo\par
\par
namespace bar \{\par
TEST(CoolTest, DoSomething) \{\par
  SUCCEED();\par
\}\par
\}  // namespace bar\par
}
\par
However, the following code is {\b not allowed}  and will produce a runtime error from GoogleTest because the test methods are using different test fixture classes with the same test suite name.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
namespace foo \{\par
class CoolTest : public ::testing::Test \{\};  // Fixture foo::CoolTest\par
TEST_F(CoolTest, DoSomething) \{\par
  SUCCEED();\par
\}\par
\}  // namespace foo\par
\par
namespace bar \{\par
class CoolTest : public ::testing::Test \{\};  // Fixture: bar::CoolTest\par
TEST_F(CoolTest, DoSomething) \{\par
  SUCCEED();\par
\}\par
\}  // namespace bar\par
}
 \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
gMock Cheat Sheet{\tc \v gMock Cheat Sheet}\par \pard\plain 
{\bkmkstart AAAAAAADXP}
{\bkmkend AAAAAAADXP}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{\bkmkstart AAAAAAAAGA}
{\bkmkend AAAAAAAAGA}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Defining a Mock Class
\par}
{\tc\tcl2 \v Defining a Mock Class}
{\bkmkstart AAAAAAAAGB}
{\bkmkend AAAAAAAAGB}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Mocking a Normal Class
\par}
{\tc\tcl3 \v Mocking a Normal Class}
Given\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 class }Foo \{\par
 {\cf17 public}:\par
  {\cf17 virtual} ~Foo();\par
  {\cf17 virtual} {\cf18 int} GetSize() {\cf17 const} = 0;\par
  {\cf17 virtual} {\cf18 string} Describe({\cf17 const} {\cf18 char}* name) = 0;\par
  {\cf17 virtual} {\cf18 string} Describe({\cf18 int} type) = 0;\par
  {\cf17 virtual} {\cf18 bool} Process(Bar elem, {\cf18 int} count) = 0;\par
\};\par
}
\par
(note that {\f2 ~Foo()}  {\b must}  be virtual) we can define its mock as\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf21 #include "gmock/gmock.h"}\par
\par
{\cf17 class }MockFoo : {\cf17 public} Foo \{\par
 {\cf17 public}:\par
  MOCK_METHOD({\cf18 int}, GetSize, (), ({\cf17 const}, {\cf17 override}));\par
  MOCK_METHOD({\cf18 string}, Describe, ({\cf17 const} {\cf18 char}* name), ({\cf17 override}));\par
  MOCK_METHOD({\cf18 string}, Describe, ({\cf18 int} type), ({\cf17 override}));\par
  MOCK_METHOD({\cf18 bool}, Process, (Bar elem, {\cf18 int} count), ({\cf17 override}));\par
\};\par
}
\par
To create a "nice" mock, which ignores all uninteresting calls, a "naggy" mock, which warns on all uninteresting calls, or a "strict" mock, which treats them as failures:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::NiceMock;\par
using ::testing::NaggyMock;\par
using ::testing::StrictMock;\par
\par
NiceMock<MockFoo> nice_foo;      {\cf20 // The type is a subclass of MockFoo.}\par
NaggyMock<MockFoo> naggy_foo;    {\cf20 // The type is a subclass of MockFoo.}\par
StrictMock<MockFoo> strict_foo;  {\cf20 // The type is a subclass of MockFoo.}\par
}
\par
\{: .callout .note\} {\b Note:}  A mock object is currently naggy by default. We may make it nice by default in the future.\par}
{\bkmkstart AAAAAAAAGC}
{\bkmkend AAAAAAAAGC}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Mocking a Class Template
\par}
{\tc\tcl3 \v Mocking a Class Template}
Class templates can be mocked just like any class.\par
To mock\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 template} <{\cf17 typename} Elem>\par
{\cf17 class }StackInterface \{\par
 {\cf17 public}:\par
  {\cf17 virtual} ~StackInterface();\par
  {\cf17 virtual} {\cf18 int} GetSize() {\cf17 const} = 0;\par
  {\cf17 virtual} {\cf18 void} Push({\cf17 const} Elem& x) = 0;\par
\};\par
}
\par
(note that all member functions that are mocked, including {\f2 ~StackInterface()}  {\b must}  be virtual).\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 template} <{\cf17 typename} Elem>\par
{\cf17 class }MockStack : {\cf17 public} StackInterface<Elem> \{\par
 {\cf17 public}:\par
  MOCK_METHOD({\cf18 int}, GetSize, (), ({\cf17 const}, {\cf17 override}));\par
  MOCK_METHOD({\cf18 void}, Push, ({\cf17 const} Elem& x), ({\cf17 override}));\par
\};\par
}
\par}
{\bkmkstart AAAAAAAAGD}
{\bkmkend AAAAAAAAGD}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Specifying Calling Conventions for Mock Functions
\par}
{\tc\tcl3 \v Specifying Calling Conventions for Mock Functions}
If your mock function doesn't use the default calling convention, you can specify it by adding {\f2 Calltype(convention)}  to {\f2 MOCK_METHOD} 's 4th parameter. For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MOCK_METHOD({\cf18 bool}, Foo, ({\cf18 int} n), (Calltype(STDMETHODCALLTYPE)));\par
MOCK_METHOD({\cf18 int}, Bar, ({\cf18 double} x, {\cf18 double} y),\par
            ({\cf17 const}, Calltype(STDMETHODCALLTYPE)));\par
}
\par
where {\f2 STDMETHODCALLTYPE}  is defined by {\f2 <objbase.h>}  on Windows.\par}
\par}
{\bkmkstart AAAAAAAAGE}
{\bkmkend AAAAAAAAGE}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Using Mocks in Tests
\par}
{\tc\tcl2 \v Using Mocks in Tests}
The typical work flow is:\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Import the gMock names you need to use. All gMock symbols are in the {\f2 testing}  namespace unless they are macros or otherwise noted.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
2.\tab Create the mock objects.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
3.\tab Optionally, set the default actions of the mock objects.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
4.\tab Set your expectations on the mock objects (How will they be called? What will they do?).\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
5.\tab Exercise code that uses the mock objects; if necessary, check the result using googletest assertions.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
6.\tab When a mock object is destructed, gMock automatically verifies that all expectations on it have been satisfied.\par}
\par
Here's an example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;                          {\cf20 // #1}\par
\par
TEST(BarTest, DoesThis) \{\par
  MockFoo foo;                                    {\cf20 // #2}\par
\par
  ON_CALL(foo, GetSize())                         {\cf20 // #3}\par
      .WillByDefault(Return(1));\par
  {\cf20 // ... other default actions ...}\par
\par
  EXPECT_CALL(foo, Describe(5))                   {\cf20 // #4}\par
      .Times(3)\par
      .WillRepeatedly(Return({\cf22 "Category 5"}));\par
  {\cf20 // ... other expectations ...}\par
\par
  EXPECT_EQ(MyProductionFunction(&foo), {\cf22 "good"});  {\cf20 // #5}\par
\}                                                 {\cf20 // #6}\par
}
\par}
{\bkmkstart AAAAAAAAGF}
{\bkmkend AAAAAAAAGF}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Setting Default Actions
\par}
{\tc\tcl2 \v Setting Default Actions}
gMock has a {\b built-in default action}  for any function that returns {\f2 void} , {\f2 bool} , a numeric value, or a pointer. In C++11, it will additionally returns the default-constructed value, if one exists for the given type.\par
To customize the default action for functions with return type {\f2 T} , use {\f2 {\f2 DefaultValue<T>} }. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf20 // Sets the default action for return type std::unique_ptr<Buzz> to}\par
{\cf20 // creating a new Buzz every time.}\par
DefaultValue<std::unique_ptr<Buzz>>::SetFactory(\par
    [] \{ {\cf19 return} MakeUnique<Buzz>(AccessLevel::kInternal); \});\par
\par
{\cf20 // When this fires, the default action of MakeBuzz() will run, which}\par
{\cf20 // will return a new Buzz object.}\par
EXPECT_CALL(mock_buzzer_, MakeBuzz({\cf22 "hello"})).Times(AnyNumber());\par
\par
{\cf17 auto} buzz1 = mock_buzzer_.MakeBuzz({\cf22 "hello"});\par
{\cf17 auto} buzz2 = mock_buzzer_.MakeBuzz({\cf22 "hello"});\par
EXPECT_NE(buzz1, {\cf17 nullptr});\par
EXPECT_NE(buzz2, {\cf17 nullptr});\par
EXPECT_NE(buzz1, buzz2);\par
\par
{\cf20 // Resets the default action for return type std::unique_ptr<Buzz>,}\par
{\cf20 // to avoid interfere with other tests.}\par
DefaultValue<std::unique_ptr<Buzz>>::Clear();\par
}
\par
To customize the default action for a particular method of a specific mock object, use {\f2 {\f2 ON_CALL} }. {\f2 ON_CALL}  has a similar syntax to {\f2 EXPECT_CALL} , but it is used for setting default behaviors when you do not require that the mock method is called. See {\f2 Knowing When to Expect} for a more detailed discussion.\par}
{\bkmkstart AAAAAAAAGG}
{\bkmkend AAAAAAAAGG}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Setting Expectations
\par}
{\tc\tcl2 \v Setting Expectations}
See {\f2 {\f2 EXPECT_CALL} } in the Mocking Reference.\par}
{\bkmkstart AAAAAAAAGH}
{\bkmkend AAAAAAAAGH}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Matchers
\par}
{\tc\tcl2 \v Matchers}
See the {\b Matchers Reference}.\par}
{\bkmkstart AAAAAAAAGI}
{\bkmkend AAAAAAAAGI}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Actions
\par}
{\tc\tcl2 \v Actions}
See the {\b Actions Reference}.\par}
{\bkmkstart AAAAAAAAGJ}
{\bkmkend AAAAAAAAGJ}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Cardinalities
\par}
{\tc\tcl2 \v Cardinalities}
See the {\f2 {\f2 Times}  clause} of {\f2 EXPECT_CALL}  in the Mocking Reference.\par}
{\bkmkstart AAAAAAAAGK}
{\bkmkend AAAAAAAAGK}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Expectation Order
\par}
{\tc\tcl2 \v Expectation Order}
By default, expectations can be matched in {\i any}  order. If some or all expectations must be matched in a given order, you can use the {\f2 {\f2 After}  clause} or {\f2 {\f2 InSequence}  clause} of {\f2 EXPECT_CALL} , or use an {\f2 {\f2 InSequence}  object}.\par}
{\bkmkstart AAAAAAAAGL}
{\bkmkend AAAAAAAAGL}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Verifying and Resetting a Mock
\par}
{\tc\tcl2 \v Verifying and Resetting a Mock}
gMock will verify the expectations on a mock object when it is destructed, or you can do it earlier:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Mock;\par
...\par
{\cf20 // Verifies and removes the expectations on mock_obj;}\par
{\cf20 // returns true if and only if successful.}\par
Mock::VerifyAndClearExpectations(&mock_obj);\par
...\par
{\cf20 // Verifies and removes the expectations on mock_obj;}\par
{\cf20 // also removes the default actions set by ON_CALL();}\par
{\cf20 // returns true if and only if successful.}\par
Mock::VerifyAndClear(&mock_obj);\par
}
\par
Do not set new expectations after verifying and clearing a mock after its use. Setting expectations after code that exercises the mock has undefined behavior. See {\f2 Using Mocks in Tests} for more information.\par
You can also tell gMock that a mock object can be leaked and doesn't need to be verified:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Mock::AllowLeak(&mock_obj);\par
}
\par}
{\bkmkstart AAAAAAAAGM}
{\bkmkend AAAAAAAAGM}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Mock Classes
\par}
{\tc\tcl2 \v Mock Classes}
gMock defines a convenient mock class template\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 class }MockFunction<R(A1, ..., An)> \{\par
 {\cf17 public}:\par
  MOCK_METHOD(R, Call, (A1, ..., An));\par
\};\par
}
\par
See this {\f2 recipe} for one application of it.\par}
{\bkmkstart AAAAAAAAGN}
{\bkmkend AAAAAAAAGN}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Flags
\par}
{\tc\tcl2 \v Flags}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Flag   \cell }{Description    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 --gmock_catch_leaked_mocks=0}    \cell }{Don't report leaked mock objects as failures.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 --gmock_verbose=LEVEL}    \cell }{Sets the default verbosity level ({\f2 info} , {\f2 warning} , or {\f2 error} ) of Google {\b Mock} messages.   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
\par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
gMock Cookbook{\tc \v gMock Cookbook}\par \pard\plain 
{\bkmkstart AAAAAAADXQ}
{\bkmkend AAAAAAADXQ}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
You can find recipes for using gMock here. If you haven't yet, please read {\b the dummy guide} first to make sure you understand the basics.\par
\{: .callout .note\} {\b Note:}  gMock lives in the {\f2 testing}  name space. For readability, it is recommended to write {\f2 using ::testing::Foo;}  once in your file before using the name {\f2 Foo}  defined by gMock. We omit such {\f2 using}  statements in this section for brevity, but you should do it in your own code.\par
{\bkmkstart AAAAAAAAGO}
{\bkmkend AAAAAAAAGO}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Creating Mock Classes
\par}
{\tc\tcl2 \v Creating Mock Classes}
{\b Mock} classes are defined as normal classes, using the {\f2 MOCK_METHOD}  macro to generate mocked methods. The macro gets 3 or 4 parameters:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 class }MyMock \{\par
 {\cf17 public}:\par
  MOCK_METHOD(ReturnType, MethodName, (Args...));\par
  MOCK_METHOD(ReturnType, MethodName, (Args...), (Specs...));\par
\};\par
}
\par
The first 3 parameters are simply the method declaration, split into 3 parts. The 4th parameter accepts a closed list of qualifiers, which affect the generated method:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
**{\f2 const} ** - Makes the mocked method a {\f2 const}  method. Required if overriding a {\f2 const}  method.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
**{\f2 override} ** - Marks the method with {\f2 override} . Recommended if overriding a {\f2 virtual}  method.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
**{\f2 noexcept} ** - Marks the method with {\f2 noexcept} . Required if overriding a {\f2 noexcept}  method.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
**{\f2 Calltype(...)} ** - Sets the call type for the method (e.g. to {\f2 STDMETHODCALLTYPE} ), useful in Windows.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
**{\f2 ref(...)} ** - Marks the method with the reference qualification specified. Required if overriding a method that has reference qualifications. Eg {\f2 ref(&)}  or {\f2 ref(&&)} .\par}
\par
{\bkmkstart AAAAAAAAGP}
{\bkmkend AAAAAAAAGP}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Dealing with unprotected commas
\par}
{\tc\tcl3 \v Dealing with unprotected commas}
Unprotected commas, i.e. commas which are not surrounded by parentheses, prevent {\f2 MOCK_METHOD}  from parsing its arguments correctly:\par
\{: .bad\} {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 class }MockFoo \{\par
 {\cf17 public}:\par
  MOCK_METHOD(std::pair<bool, int>, GetPair, ());  {\cf20 // Won't compile!}\par
  MOCK_METHOD({\cf18 bool}, CheckMap, (std::map<int, double>, {\cf18 bool}));  {\cf20 // Won't compile!}\par
\};\par
}
\par
Solution 1 - wrap with parentheses:\par
\{: .good\} {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 class }MockFoo \{\par
 {\cf17 public}:\par
  MOCK_METHOD((std::pair<bool, int>), GetPair, ());\par
  MOCK_METHOD({\cf18 bool}, CheckMap, ((std::map<int, double>), {\cf18 bool}));\par
\};\par
}
\par
Note that wrapping a return or argument type with parentheses is, in general, invalid C++. {\f2 MOCK_METHOD}  removes the parentheses.\par
Solution 2 - define an alias:\par
\{: .good\} {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 class }MockFoo \{\par
 {\cf17 public}:\par
  {\cf17 using }BoolAndInt = std::pair<bool, int>;\par
  MOCK_METHOD(BoolAndInt, GetPair, ());\par
  {\cf17 using }MapIntDouble = std::map<int, double>;\par
  MOCK_METHOD({\cf18 bool}, CheckMap, (MapIntDouble, {\cf18 bool}));\par
\};\par
}
\par}
{\bkmkstart AAAAAAAAGQ}
{\bkmkend AAAAAAAAGQ}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Mocking Private or Protected Methods
\par}
{\tc\tcl3 \v Mocking Private or Protected Methods}
You must always put a mock method definition ({\f2 MOCK_METHOD} ) in a {\f2 public:}  section of the mock class, regardless of the method being mocked being {\f2 public} , {\f2 protected} , or {\f2 private}  in the base class. This allows {\f2 ON_CALL}  and {\f2 EXPECT_CALL}  to reference the mock function from outside of the mock class. (Yes, C++ allows a subclass to change the access level of a virtual function in the base class.) Example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 class }Foo \{\par
 {\cf17 public}:\par
  ...\par
  {\cf17 virtual} {\cf18 bool} Transform(Gadget* g) = 0;\par
\par
 {\cf17 protected}:\par
  {\cf17 virtual} {\cf18 void} Resume();\par
\par
 {\cf17 private}:\par
  {\cf17 virtual} {\cf18 int} GetTimeOut();\par
\};\par
\par
{\cf17 class }MockFoo : {\cf17 public} Foo \{\par
 {\cf17 public}:\par
  ...\par
  MOCK_METHOD({\cf18 bool}, Transform, (Gadget* g), ({\cf17 override}));\par
\par
  {\cf20 // The following must be in the public section, even though the}\par
  {\cf20 // methods are protected or private in the base class.}\par
  MOCK_METHOD({\cf18 void}, Resume, (), ({\cf17 override}));\par
  MOCK_METHOD({\cf18 int}, GetTimeOut, (), ({\cf17 override}));\par
\};\par
}
\par}
{\bkmkstart AAAAAAAAGR}
{\bkmkend AAAAAAAAGR}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Mocking Overloaded Methods
\par}
{\tc\tcl3 \v Mocking Overloaded Methods}
You can mock overloaded functions as usual. No special attention is required:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 class }Foo \{\par
  ...\par
\par
  {\cf20 // Must be virtual as we'll inherit from Foo.}\par
  {\cf17 virtual} ~Foo();\par
\par
  {\cf20 // Overloaded on the types and/or numbers of arguments.}\par
  {\cf17 virtual} {\cf18 int} Add(Element x);\par
  {\cf17 virtual} {\cf18 int} Add({\cf18 int} times, Element x);\par
\par
  {\cf20 // Overloaded on the const-ness of this object.}\par
  {\cf17 virtual} Bar& GetBar();\par
  {\cf17 virtual} {\cf17 const} Bar& GetBar() {\cf17 const};\par
\};\par
\par
{\cf17 class }MockFoo : {\cf17 public} Foo \{\par
  ...\par
  MOCK_METHOD({\cf18 int}, Add, (Element x), ({\cf17 override}));\par
  MOCK_METHOD({\cf18 int}, Add, ({\cf18 int} times, Element x), ({\cf17 override}));\par
\par
  MOCK_METHOD(Bar&, GetBar, (), ({\cf17 override}));\par
  MOCK_METHOD({\cf17 const} Bar&, GetBar, (), ({\cf17 const}, {\cf17 override}));\par
\};\par
}
\par
\{: .callout .note\} {\b Note:}  if you don't mock all versions of the overloaded method, the compiler will give you a warning about some methods in the base class being hidden. To fix that, use {\f2 using}  to bring them in scope:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 class }MockFoo : {\cf17 public} Foo \{\par
  ...\par
  {\cf17 using }Foo::Add;\par
  MOCK_METHOD({\cf18 int}, Add, (Element x), ({\cf17 override}));\par
  {\cf20 // We don't want to mock int Add(int times, Element x);}\par
  ...\par
\};\par
}
\par}
{\bkmkstart AAAAAAAAGS}
{\bkmkend AAAAAAAAGS}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Mocking Class Templates
\par}
{\tc\tcl3 \v Mocking Class Templates}
You can mock class templates just like any class.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 template} <{\cf17 typename} Elem>\par
{\cf17 class }StackInterface \{\par
  ...\par
  {\cf20 // Must be virtual as we'll inherit from StackInterface.}\par
  {\cf17 virtual} ~StackInterface();\par
\par
  {\cf17 virtual} {\cf18 int} GetSize() {\cf17 const} = 0;\par
  {\cf17 virtual} {\cf18 void} Push({\cf17 const} Elem& x) = 0;\par
\};\par
\par
{\cf17 template} <{\cf17 typename} Elem>\par
{\cf17 class }MockStack : {\cf17 public} StackInterface<Elem> \{\par
  ...\par
  MOCK_METHOD({\cf18 int}, GetSize, (), ({\cf17 override}));\par
  MOCK_METHOD({\cf18 void}, Push, ({\cf17 const} Elem& x), ({\cf17 override}));\par
\};\par
}
\par}
{\bkmkstart AAAAAAAAGT}
{\bkmkend AAAAAAAAGT}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Mocking Non-virtual Methods
\par}
{\tc\tcl3 \v Mocking Non-virtual Methods}
gMock can mock non-virtual functions to be used in Hi-perf dependency injection.\par
In this case, instead of sharing a common base class with the real class, your mock class will be {\i unrelated}  to the real class, but contain methods with the same signatures. The syntax for mocking non-virtual methods is the {\i same}  as mocking virtual methods (just don't add {\f2 override} ):\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf20 // A simple packet stream class.  None of its members is virtual.}\par
{\cf17 class }ConcretePacketStream \{\par
 {\cf17 public}:\par
  {\cf18 void} AppendPacket(Packet* new_packet);\par
  {\cf17 const} Packet* GetPacket({\cf18 size_t} packet_number) {\cf17 const};\par
  {\cf18 size_t} NumberOfPackets() {\cf17 const};\par
  ...\par
\};\par
\par
{\cf20 // A mock packet stream class.  It inherits from no other, but defines}\par
{\cf20 // GetPacket() and NumberOfPackets().}\par
{\cf17 class }MockPacketStream \{\par
 {\cf17 public}:\par
  MOCK_METHOD({\cf17 const} Packet*, GetPacket, ({\cf18 size_t} packet_number), ({\cf17 const}));\par
  MOCK_METHOD({\cf18 size_t}, NumberOfPackets, (), ({\cf17 const}));\par
  ...\par
\};\par
}
\par
Note that the mock class doesn't define {\f2 AppendPacket()} , unlike the real class. That's fine as long as the test doesn't need to call it.\par
Next, you need a way to say that you want to use {\f2 ConcretePacketStream}  in production code, and use {\f2 MockPacketStream}  in tests. Since the functions are not virtual and the two classes are unrelated, you must specify your choice at {\i compile time}  (as opposed to run time).\par
One way to do it is to templatize your code that needs to use a packet stream. More specifically, you will give your code a template type argument for the type of the packet stream. In production, you will instantiate your template with {\f2 ConcretePacketStream}  as the type argument. In tests, you will instantiate the same template with {\f2 MockPacketStream} . For example, you may write:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 template} <{\cf17 class} PacketStream>\par
{\cf18 void} CreateConnection(PacketStream* stream) \{ ... \}\par
\par
{\cf17 template} <{\cf17 class} PacketStream>\par
{\cf17 class }PacketReader \{\par
 {\cf17 public}:\par
  {\cf18 void} ReadPackets(PacketStream* stream, {\cf18 size_t} packet_num);\par
\};\par
}
\par
Then you can use {\f2 CreateConnection<ConcretePacketStream>()}  and {\f2 PacketReader<ConcretePacketStream>}  in production code, and use {\f2 CreateConnection<MockPacketStream>()}  and {\f2 PacketReader<MockPacketStream>}  in tests.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MockPacketStream mock_stream;\par
EXPECT_CALL(mock_stream, ...)...;\par
.. set more expectations on mock_stream ...\par
PacketReader<MockPacketStream> reader(&mock_stream);\par
... exercise reader ...\par
}
\par}
{\bkmkstart AAAAAAAAGU}
{\bkmkend AAAAAAAAGU}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Mocking Free Functions
\par}
{\tc\tcl3 \v Mocking Free Functions}
It is not possible to directly mock a free function (i.e. a C-style function or a static method). If you need to, you can rewrite your code to use an interface (abstract class).\par
Instead of calling a free function (say, {\f2 OpenFile} ) directly, introduce an interface for it and have a concrete subclass that calls the free function:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 class }FileInterface \{\par
 {\cf17 public}:\par
  ...\par
  {\cf17 virtual} {\cf18 bool} Open({\cf17 const} {\cf18 char}* path, {\cf17 const} {\cf18 char}* mode) = 0;\par
\};\par
\par
{\cf17 class }File : {\cf17 public} FileInterface \{\par
 {\cf17 public}:\par
  ...\par
  {\cf18 bool} Open({\cf17 const} {\cf18 char}* path, {\cf17 const} {\cf18 char}* mode){\cf17  override }\{\par
     {\cf19 return} OpenFile(path, mode);\par
  \}\par
\};\par
}
\par
Your code should talk to {\f2 FileInterface}  to open a file. Now it's easy to mock out the function.\par
This may seem like a lot of hassle, but in practice you often have multiple related functions that you can put in the same interface, so the per-function syntactic overhead will be much lower.\par
If you are concerned about the performance overhead incurred by virtual functions, and profiling confirms your concern, you can combine this with the recipe for {\b mocking non-virtual methods}.\par}
{\bkmkstart AAAAAAAAGV}
{\bkmkend AAAAAAAAGV}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Old-Style <tt>MOCK_METHODn</tt> Macros
\par}
{\tc\tcl3 \v Old-Style <tt>MOCK_METHODn</tt> Macros}
Before the generic {\f2 MOCK_METHOD}  macro {\f2 was introduced in 2018}, mocks where created using a family of macros collectively called {\f2 MOCK_METHODn} . These macros are still supported, though migration to the new {\f2 MOCK_METHOD}  is recommended.\par
The macros in the {\f2 MOCK_METHODn}  family differ from {\f2 MOCK_METHOD} :\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The general structure is {\f2 MOCK_METHODn(MethodName, ReturnType(Args))} , instead of {\f2 MOCK_METHOD(ReturnType, MethodName, (Args))} .\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The number {\f2 n}  must equal the number of arguments.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
When mocking a const method, one must use {\f2 MOCK_CONST_METHODn} .\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
When mocking a class template, the macro name must be suffixed with {\f2 _T} .\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
In order to specify the call type, the macro name must be suffixed with {\f2 _WITH_CALLTYPE} , and the call type is the first macro argument.\par}
\par
Old macros and their new equivalents:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Simple \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Old \cell }{{\f2 MOCK_METHOD1(Foo, bool(int))}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{New \cell }{{\f2 MOCK_METHOD(bool, Foo, (int))}  \par
\cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Const Method \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Old \cell }{{\f2 MOCK_CONST_METHOD1(Foo, bool(int))}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{New \cell }{{\f2 MOCK_METHOD(bool, Foo, (int), (const))}  \par
\cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Method in a Class Template \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Old \cell }{{\f2 MOCK_METHOD1_T(Foo, bool(int))}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{New \cell }{{\f2 MOCK_METHOD(bool, Foo, (int))}  \par
\cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Const Method in a Class Template \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Old \cell }{{\f2 MOCK_CONST_METHOD1_T(Foo, bool(int))}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{New \cell }{{\f2 MOCK_METHOD(bool, Foo, (int), (const))}  \par
\cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Method with Call Type \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Old \cell }{{\f2 MOCK_METHOD1_WITH_CALLTYPE(STDMETHODCALLTYPE, Foo, bool(int))}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{New \cell }{{\f2 MOCK_METHOD(bool, Foo, (int), (Calltype(STDMETHODCALLTYPE)))}  \par
\cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Const Method with Call Type \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Old \cell }{{\f2 MOCK_CONST_METHOD1_WITH_CALLTYPE(STDMETHODCALLTYPE, Foo, bool(int))}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{New \cell }{{\f2 MOCK_METHOD(bool, Foo, (int), (const, Calltype(STDMETHODCALLTYPE)))}  \par
\cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Method with Call Type in a Class Template \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Old \cell }{{\f2 MOCK_METHOD1_T_WITH_CALLTYPE(STDMETHODCALLTYPE, Foo, bool(int))}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{New \cell }{{\f2 MOCK_METHOD(bool, Foo, (int), (Calltype(STDMETHODCALLTYPE)))}  \par
\cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Const Method with Call Type in a Class Template \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Old \cell }{{\f2 MOCK_CONST_METHOD1_T_WITH_CALLTYPE(STDMETHODCALLTYPE, Foo, bool(int))}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{New \cell }{{\f2 MOCK_METHOD(bool, Foo, (int), (const, Calltype(STDMETHODCALLTYPE)))}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
\par}
{\bkmkstart AAAAAAAAGW}
{\bkmkend AAAAAAAAGW}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
The Nice, the Strict, and the Naggy
\par}
{\tc\tcl3 \v The Nice, the Strict, and the Naggy}
If a mock method has no {\f2 EXPECT_CALL}  spec but is called, we say that it's an "uninteresting call", and the default action (which can be specified using {\f2 ON_CALL()} ) of the method will be taken. Currently, an uninteresting call will also by default cause gMock to print a warning.\par
However, sometimes you may want to ignore these uninteresting calls, and sometimes you may want to treat them as errors. gMock lets you make the decision on a per-mock-object basis.\par
Suppose your test uses a mock class {\f2 {\b MockFoo}} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(...) \{\par
  MockFoo mock_foo;\par
  EXPECT_CALL(mock_foo, DoThis());\par
  ... code that uses mock_foo ...\par
\}\par
}
\par
If a method of {\f2 mock_foo}  other than {\f2 DoThis()}  is called, you will get a warning. However, if you rewrite your test to use {\f2 NiceMock<{\b MockFoo}>}  instead, you can suppress the warning:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::NiceMock;\par
\par
TEST(...) \{\par
  NiceMock<MockFoo> mock_foo;\par
  EXPECT_CALL(mock_foo, DoThis());\par
  ... code that uses mock_foo ...\par
\}\par
}
\par
{\f2 NiceMock<{\b MockFoo}>}  is a subclass of {\f2 {\b MockFoo}} , so it can be used wherever {\f2 {\b MockFoo}}  is accepted.\par
It also works if {\f2 {\b MockFoo}} 's constructor takes some arguments, as {\f2 NiceMock<{\b MockFoo}>}  "inherits" {\f2 {\b MockFoo}} 's constructors:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::NiceMock;\par
\par
TEST(...) \{\par
  NiceMock<MockFoo> mock_foo(5, {\cf22 "hi"});  {\cf20 // Calls MockFoo(5, "hi").}\par
  EXPECT_CALL(mock_foo, DoThis());\par
  ... code that uses mock_foo ...\par
\}\par
}
\par
The usage of {\f2 StrictMock}  is similar, except that it makes all uninteresting calls failures:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::StrictMock;\par
\par
TEST(...) \{\par
  StrictMock<MockFoo> mock_foo;\par
  EXPECT_CALL(mock_foo, DoThis());\par
  ... code that uses mock_foo ...\par
\par
  {\cf20 // The test will fail if a method of mock_foo other than DoThis()}\par
  {\cf20 // is called.}\par
\}\par
}
\par
\{: .callout .note\} NOTE: {\f2 NiceMock}  and {\f2 StrictMock}  only affects {\i uninteresting}  calls (calls of {\i methods}  with no expectations); they do not affect {\i unexpected}  calls (calls of methods with expectations, but they don't match). See {\b Understanding Uninteresting vs Unexpected Calls}.\par
There are some caveats though (sadly they are side effects of C++'s limitations):\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 NiceMock<{\b MockFoo}>}  and {\f2 StrictMock<{\b MockFoo}>}  only work for mock methods defined using the {\f2 MOCK_METHOD}  macro {\b directly}  in the {\f2 {\b MockFoo}}  class. If a mock method is defined in a {\b base class}  of {\f2 {\b MockFoo}} , the "nice" or "strict" modifier may not affect it, depending on the compiler. In particular, nesting {\f2 NiceMock}  and {\f2 StrictMock}  (e.g. {\f2 NiceMock<StrictMock<{\b MockFoo}> >} ) is {\b not}  supported.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
2.\tab {\f2 NiceMock<{\b MockFoo}>}  and {\f2 StrictMock<{\b MockFoo}>}  may not work correctly if the destructor of {\f2 {\b MockFoo}}  is not virtual. We would like to fix this, but it requires cleaning up existing tests.\par}
\par
Finally, you should be {\b very cautious}  about when to use naggy or strict mocks, as they tend to make tests more brittle and harder to maintain. When you refactor your code without changing its externally visible behavior, ideally you shouldn't need to update any tests. If your code interacts with a naggy mock, however, you may start to get spammed with warnings as the result of your change. Worse, if your code interacts with a strict mock, your tests may start to fail and you'll be forced to fix them. Our general recommendation is to use nice mocks (not yet the default) most of the time, use naggy mocks (the current default) when developing or debugging tests, and use strict mocks only as the last resort.\par}
{\bkmkstart AAAAAAAAGX}
{\bkmkend AAAAAAAAGX}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Simplifying the Interface without Breaking Existing Code
\par}
{\tc\tcl3 \v Simplifying the Interface without Breaking Existing Code}
Sometimes a method has a long list of arguments that is mostly uninteresting. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 class }LogSink \{\par
 {\cf17 public}:\par
  ...\par
  {\cf17 virtual} {\cf18 void} send(LogSeverity severity, {\cf17 const} {\cf18 char}* full_filename,\par
                    {\cf17 const} {\cf18 char}* base_filename, {\cf18 int} line,\par
                    {\cf17 const} {\cf17 struct} tm* tm_time,\par
                    {\cf17 const} {\cf18 char}* message, {\cf18 size_t} message_len) = 0;\par
\};\par
}
\par
This method's argument list is lengthy and hard to work with (the {\f2 message}  argument is not even 0-terminated). If we mock it as is, using the mock will be awkward. If, however, we try to simplify this interface, we'll need to fix all clients depending on it, which is often infeasible.\par
The trick is to redispatch the method in the mock class:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 class }ScopedMockLog : {\cf17 public} LogSink \{\par
 {\cf17 public}:\par
  ...\par
  {\cf18 void} send(LogSeverity severity, {\cf17 const} {\cf18 char}* full_filename,\par
                    {\cf17 const} {\cf18 char}* base_filename, {\cf18 int} line, {\cf17 const} tm* tm_time,\par
                    {\cf17 const} {\cf18 char}* message, {\cf18 size_t} message_len){\cf17  override }\{\par
    {\cf20 // We are only interested in the log severity, full file name, and}\par
    {\cf20 // log message.}\par
    Log(severity, full_filename, std::string(message, message_len));\par
  \}\par
\par
  {\cf20 // Implements the mock method:}\par
  {\cf20 //}\par
  {\cf20 //   void Log(LogSeverity severity,}\par
  {\cf20 //            const string& file_path,}\par
  {\cf20 //            const string& message);}\par
  MOCK_METHOD({\cf18 void}, Log,\par
              (LogSeverity severity, {\cf17 const} {\cf18 string}& file_path,\par
               {\cf17 const} {\cf18 string}& message));\par
\};\par
}
\par
By defining a new mock method with a trimmed argument list, we make the mock class more user-friendly.\par
This technique may also be applied to make overloaded methods more amenable to mocking. For example, when overloads have been used to implement default arguments:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 class }MockTurtleFactory : {\cf17 public} TurtleFactory \{\par
 {\cf17 public}:\par
  Turtle* MakeTurtle({\cf18 int} length, {\cf18 int} weight){\cf17  override }\{ ... \}\par
  Turtle* MakeTurtle({\cf18 int} length, {\cf18 int} weight, {\cf18 int} speed){\cf17  override }\{ ... \}\par
\par
  {\cf20 // the above methods delegate to this one:}\par
  MOCK_METHOD(Turtle*, DoMakeTurtle, ());\par
\};\par
}
\par
This allows tests that don't care which overload was invoked to avoid specifying argument matchers:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ON_CALL(factory, DoMakeTurtle)\par
    .WillByDefault(Return(MakeMockTurtle()));\par
}
\par}
{\bkmkstart AAAAAAAAGY}
{\bkmkend AAAAAAAAGY}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Alternative to Mocking Concrete Classes
\par}
{\tc\tcl3 \v Alternative to Mocking Concrete Classes}
Often you may find yourself using classes that don't implement interfaces. In order to test your code that uses such a class (let's call it {\f2 Concrete} ), you may be tempted to make the methods of {\f2 Concrete}  virtual and then mock it.\par
Try not to do that.\par
Making a non-virtual function virtual is a big decision. It creates an extension point where subclasses can tweak your class' behavior. This weakens your control on the class because now it's harder to maintain the class invariants. You should make a function virtual only when there is a valid reason for a subclass to override it.\par
Mocking concrete classes directly is problematic as it creates a tight coupling between the class and the tests - any small change in the class may invalidate your tests and make test maintenance a pain.\par
To avoid such problems, many programmers have been practicing "coding to
interfaces": instead of talking to the {\f2 Concrete}  class, your code would define an interface and talk to it. Then you implement that interface as an adaptor on top of {\f2 Concrete} . In tests, you can easily mock that interface to observe how your code is doing.\par
This technique incurs some overhead:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You pay the cost of virtual function calls (usually not a problem).\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
There is more abstraction for the programmers to learn.\par}
\par
However, it can also bring significant benefits in addition to better testability:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Concrete} 's API may not fit your problem domain very well, as you may not be the only client it tries to serve. By designing your own interface, you have a chance to tailor it to your need - you may add higher-level functionalities, rename stuff, etc instead of just trimming the class. This allows you to write your code (user of the interface) in a more natural way, which means it will be more readable, more maintainable, and you'll be more productive.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If {\f2 Concrete} 's implementation ever has to change, you don't have to rewrite everywhere it is used. Instead, you can absorb the change in your implementation of the interface, and your other code and tests will be insulated from this change.\par}
\par
Some people worry that if everyone is practicing this technique, they will end up writing lots of redundant code. This concern is totally understandable. However, there are two reasons why it may not be the case:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Different projects may need to use {\f2 Concrete}  in different ways, so the best interfaces for them will be different. Therefore, each of them will have its own domain-specific interface on top of {\f2 Concrete} , and they will not be the same code.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If enough projects want to use the same interface, they can always share it, just like they have been sharing {\f2 Concrete} . You can check in the interface and the adaptor somewhere near {\f2 Concrete}  (perhaps in a {\f2 contrib}  sub-directory) and let many projects use it.\par}
\par
You need to weigh the pros and cons carefully for your particular problem, but I'd like to assure you that the Java community has been practicing this for a long time and it's a proven effective technique applicable in a wide variety of situations. :-)\par}
{\bkmkstart AAAAAAAAGZ}
{\bkmkend AAAAAAAAGZ}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Delegating Calls to a Fake
\par}
{\tc\tcl3 \v Delegating Calls to a Fake}
Some times you have a non-trivial fake implementation of an interface. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 class }Foo \{\par
 {\cf17 public}:\par
  {\cf17 virtual} ~Foo() \{\}\par
  {\cf17 virtual} {\cf18 char} DoThis({\cf18 int} n) = 0;\par
  {\cf17 virtual} {\cf18 void} DoThat({\cf17 const} {\cf18 char}* s, {\cf18 int}* p) = 0;\par
\};\par
\par
{\cf17 class }FakeFoo : {\cf17 public} Foo \{\par
 {\cf17 public}:\par
  {\cf18 char} DoThis({\cf18 int} n){\cf17  override }\{\par
    {\cf19 return} (n > 0) ? {\cf23 '+'} :\par
           (n < 0) ? {\cf23 '-'} : {\cf23 '0'};\par
  \}\par
\par
  {\cf18 void} DoThat({\cf17 const} {\cf18 char}* s, {\cf18 int}* p){\cf17  override }\{\par
    *p = strlen(s);\par
  \}\par
\};\par
}
\par
Now you want to mock this interface such that you can set expectations on it. However, you also want to use {\f2 FakeFoo}  for the default behavior, as duplicating it in the mock object is, well, a lot of work.\par
When you define the mock class using gMock, you can have it delegate its default action to a fake class you already have, using this pattern:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 class }MockFoo : {\cf17 public} Foo \{\par
 {\cf17 public}:\par
  {\cf20 // Normal mock method definitions using gMock.}\par
  MOCK_METHOD({\cf18 char}, DoThis, ({\cf18 int} n), ({\cf17 override}));\par
  MOCK_METHOD({\cf18 void}, DoThat, ({\cf17 const} {\cf18 char}* s, {\cf18 int}* p), ({\cf17 override}));\par
\par
  {\cf20 // Delegates the default actions of the methods to a FakeFoo object.}\par
  {\cf20 // This must be called *before* the custom ON_CALL() statements.}\par
  {\cf18 void} DelegateToFake() \{\par
    ON_CALL(*{\cf17 this}, DoThis).WillByDefault([{\cf17 this}]({\cf18 int} n) \{\par
      {\cf19 return} fake_.DoThis(n);\par
    \});\par
    ON_CALL(*{\cf17 this}, DoThat).WillByDefault([{\cf17 this}]({\cf17 const} {\cf18 char}* s, {\cf18 int}* p) \{\par
      fake_.DoThat(s, p);\par
    \});\par
  \}\par
\par
 {\cf17 private}:\par
  FakeFoo fake_;  {\cf20 // Keeps an instance of the fake in the mock.}\par
\};\par
}
\par
With that, you can use {\f2 {\b MockFoo}}  in your tests as usual. Just remember that if you don't explicitly set an action in an {\f2 ON_CALL()}  or {\f2 EXPECT_CALL()} , the fake will be called upon to do it.:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
\par
TEST(AbcTest, Xyz) \{\par
  MockFoo foo;\par
\par
  foo.DelegateToFake();  {\cf20 // Enables the fake for delegation.}\par
\par
  {\cf20 // Put your ON_CALL(foo, ...)s here, if any.}\par
\par
  {\cf20 // No action specified, meaning to use the default action.}\par
  EXPECT_CALL(foo, DoThis(5));\par
  EXPECT_CALL(foo, DoThat(_, _));\par
\par
  {\cf18 int} n = 0;\par
  EXPECT_EQ({\cf23 '+'}, foo.DoThis(5));  {\cf20 // FakeFoo::DoThis() is invoked.}\par
  foo.DoThat({\cf22 "Hi"}, &n);  {\cf20 // FakeFoo::DoThat() is invoked.}\par
  EXPECT_EQ(2, n);\par
\}\par
}
\par
{\b Some tips:} \par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If you want, you can still override the default action by providing your own {\f2 ON_CALL()}  or using {\f2 .WillOnce()}  / {\f2 .WillRepeatedly()}  in {\f2 EXPECT_CALL()} .\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
In {\f2 DelegateToFake()} , you only need to delegate the methods whose fake implementation you intend to use.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The general technique discussed here works for overloaded methods, but you'll need to tell the compiler which version you mean. To disambiguate a mock function (the one you specify inside the parentheses of {\f2 ON_CALL()} ), use {\b this technique}; to disambiguate a fake function (the one you place inside {\f2 Invoke()} ), use a {\f2 static_cast}  to specify the function's type. For instance, if class {\f2 Foo}  has methods {\f2 char DoThis(int
    n)}  and {\f2 bool DoThis(double x) const} , and you want to invoke the latter, you need to write {\f2 Invoke(&fake_, static_cast<bool (FakeFoo::*)(double) const>(&FakeFoo::DoThis))}  instead of {\f2 Invoke(&fake_, &FakeFoo::DoThis)}  (The strange-looking thing inside the angled brackets of {\f2 static_cast}  is the type of a function pointer to the second {\f2 DoThis()}  method.).\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Having to mix a mock and a fake is often a sign of something gone wrong. Perhaps you haven't got used to the interaction-based way of testing yet. Or perhaps your interface is taking on too many roles and should be split up. Therefore, {\b don't abuse this} . We would only recommend to do it as an intermediate step when you are refactoring your code.\par}
\par
Regarding the tip on mixing a mock and a fake, here's an example on why it may be a bad sign: Suppose you have a class {\f2 System}  for low-level system operations. In particular, it does file and I/O operations. And suppose you want to test how your code uses {\f2 System}  to do I/O, and you just want the file operations to work normally. If you mock out the entire {\f2 System}  class, you'll have to provide a fake implementation for the file operation part, which suggests that {\f2 System}  is taking on too many roles.\par
Instead, you can define a {\f2 FileOps}  interface and an {\f2 IOOps}  interface and split {\f2 System} 's functionalities into the two. Then you can mock {\f2 IOOps}  without mocking {\f2 FileOps} .\par}
{\bkmkstart AAAAAAAAHA}
{\bkmkend AAAAAAAAHA}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Delegating Calls to a Real Object
\par}
{\tc\tcl3 \v Delegating Calls to a Real Object}
When using testing doubles (mocks, fakes, stubs, and etc), sometimes their behaviors will differ from those of the real objects. This difference could be either intentional (as in simulating an error such that you can test the error handling code) or unintentional. If your mocks have different behaviors than the real objects by mistake, you could end up with code that passes the tests but fails in production.\par
You can use the {\i delegating-to-real}  technique to ensure that your mock has the same behavior as the real object while retaining the ability to validate calls. This technique is very similar to the {\b delegating-to-fake} technique, the difference being that we use a real object instead of a fake. Here's an example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::AtLeast;\par
\par
{\cf17 class }MockFoo : {\cf17 public} Foo \{\par
 {\cf17 public}:\par
  MockFoo() \{\par
    {\cf20 // By default, all calls are delegated to the real object.}\par
    ON_CALL(*{\cf17 this}, DoThis).WillByDefault([{\cf17 this}]({\cf18 int} n) \{\par
      {\cf19 return} real_.DoThis(n);\par
    \});\par
    ON_CALL(*{\cf17 this}, DoThat).WillByDefault([{\cf17 this}]({\cf17 const} {\cf18 char}* s, {\cf18 int}* p) \{\par
      real_.DoThat(s, p);\par
    \});\par
    ...\par
  \}\par
  MOCK_METHOD({\cf18 char}, DoThis, ...);\par
  MOCK_METHOD({\cf18 void}, DoThat, ...);\par
  ...\par
 {\cf17 private}:\par
  Foo real_;\par
\};\par
\par
...\par
  MockFoo mock;\par
  EXPECT_CALL(mock, DoThis())\par
      .Times(3);\par
  EXPECT_CALL(mock, DoThat({\cf22 "Hi"}))\par
      .Times(AtLeast(1));\par
  ... use mock in test ...\par
}
\par
With this, gMock will verify that your code made the right calls (with the right arguments, in the right order, called the right number of times, etc), and a real object will answer the calls (so the behavior will be the same as in production). This gives you the best of both worlds.\par}
{\bkmkstart AAAAAAAAHB}
{\bkmkend AAAAAAAAHB}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Delegating Calls to a Parent Class
\par}
{\tc\tcl3 \v Delegating Calls to a Parent Class}
Ideally, you should code to interfaces, whose methods are all pure virtual. In reality, sometimes you do need to mock a virtual method that is not pure (i.e, it already has an implementation). For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 class }Foo \{\par
 {\cf17 public}:\par
  {\cf17 virtual} ~Foo();\par
\par
  {\cf17 virtual} {\cf18 void} Pure({\cf18 int} n) = 0;\par
  {\cf17 virtual} {\cf18 int} Concrete({\cf17 const} {\cf18 char}* str) \{ ... \}\par
\};\par
\par
{\cf17 class }MockFoo : {\cf17 public} Foo \{\par
 {\cf17 public}:\par
  {\cf20 // Mocking a pure method.}\par
  MOCK_METHOD({\cf18 void}, Pure, ({\cf18 int} n), ({\cf17 override}));\par
  {\cf20 // Mocking a concrete method.  Foo::Concrete() is shadowed.}\par
  MOCK_METHOD({\cf18 int}, Concrete, ({\cf17 const} {\cf18 char}* str), ({\cf17 override}));\par
\};\par
}
\par
Sometimes you may want to call {\f2 Foo::Concrete()}  instead of {\f2 MockFoo::Concrete()} . Perhaps you want to do it as part of a stub action, or perhaps your test doesn't need to mock {\f2 Concrete()}  at all (but it would be oh-so painful to have to define a new mock class whenever you don't need to mock one of its methods).\par
You can call {\f2 Foo::Concrete()}  inside an action by:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ...\par
  EXPECT_CALL(foo, Concrete).WillOnce([&foo]({\cf17 const} {\cf18 char}* str) \{\par
    {\cf19 return} foo.Foo::Concrete(str);\par
  \});\par
}
\par
or tell the mock object that you don't want to mock {\f2 Concrete()} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ...\par
  ON_CALL(foo, Concrete).WillByDefault([&foo]({\cf17 const} {\cf18 char}* str) \{\par
    {\cf19 return} foo.Foo::Concrete(str);\par
  \});\par
}
\par
(Why don't we just write {\f2 \{ return foo.Concrete(str); \}} ? If you do that, {\f2 MockFoo::Concrete()}  will be called (and cause an infinite recursion) since {\f2 Foo::Concrete()}  is virtual. That's just how C++ works.)\par}
\par}
{\bkmkstart AAAAAAAAHC}
{\bkmkend AAAAAAAAHC}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Using Matchers
\par}
{\tc\tcl2 \v Using Matchers}
{\bkmkstart AAAAAAAAHD}
{\bkmkend AAAAAAAAHD}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Matching Argument Values Exactly
\par}
{\tc\tcl3 \v Matching Argument Values Exactly}
You can specify exactly which arguments a mock method is expecting:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;\par
...\par
  EXPECT_CALL(foo, DoThis(5))\par
      .WillOnce(Return({\cf23 'a'}));\par
  EXPECT_CALL(foo, DoThat({\cf22 "Hello"}, bar));\par
}
\par}
{\bkmkstart AAAAAAAAHE}
{\bkmkend AAAAAAAAHE}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Using Simple Matchers
\par}
{\tc\tcl3 \v Using Simple Matchers}
You can use matchers to match arguments that have a certain property:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::NotNull;\par
using ::testing::Return;\par
...\par
  EXPECT_CALL(foo, DoThis(Ge(5)))  {\cf20 // The argument must be >= 5.}\par
      .WillOnce(Return({\cf23 'a'}));\par
  EXPECT_CALL(foo, DoThat({\cf22 "Hello"}, NotNull()));\par
      {\cf20 // The second argument must not be NULL.}\par
}
\par
A frequently used matcher is {\f2 _} , which matches anything:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(foo, DoThat(_, NotNull()));\par
}
\par}
{\bkmkstart AAAAAAAAHF}
{\bkmkend AAAAAAAAHF}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Combining Matchers
\par}
{\tc\tcl3 \v Combining Matchers}
You can build complex matchers from existing ones using {\f2 AllOf()} , {\f2 AllOfArray()} , {\f2 AnyOf()} , {\f2 AnyOfArray()}  and {\f2 Not()} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::AllOf;\par
using ::testing::Gt;\par
using ::testing::HasSubstr;\par
using ::testing::Ne;\par
using ::testing::Not;\par
...\par
  {\cf20 // The argument must be > 5 and != 10.}\par
  EXPECT_CALL(foo, DoThis(AllOf(Gt(5),\par
                                Ne(10))));\par
\par
  {\cf20 // The first argument must not contain sub-string "blah".}\par
  EXPECT_CALL(foo, DoThat(Not(HasSubstr({\cf22 "blah"})),\par
                          NULL));\par
}
\par
Matchers are function objects, and parametrized matchers can be composed just like any other function. However because their types can be long and rarely provide meaningful information, it can be easier to express them with C++14 generic lambdas to avoid specifying types. For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Contains;\par
using ::testing::Property;\par
\par
{\cf17 inline} {\cf17 constexpr} {\cf17 auto} HasFoo = []({\cf17 const} {\cf17 auto}& f) \{\par
  {\cf19 return} Property(&MyClass::foo, Contains(f));\par
\};\par
...\par
  EXPECT_THAT(x, HasFoo({\cf22 "blah"}));\par
}
\par}
{\bkmkstart AAAAAAAAHG}
{\bkmkend AAAAAAAAHG}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Casting Matchers
\par}
{\tc\tcl3 \v Casting Matchers}
gMock matchers are statically typed, meaning that the compiler can catch your mistake if you use a matcher of the wrong type (for example, if you use {\f2 Eq(5)}  to match a {\f2 string}  argument). Good for you!\par
Sometimes, however, you know what you're doing and want the compiler to give you some slack. One example is that you have a matcher for {\f2 long}  and the argument you want to match is {\f2 int} . While the two types aren't exactly the same, there is nothing really wrong with using a {\f2 Matcher<long>}  to match an {\f2 int}  - after all, we can first convert the {\f2 int}  argument to a {\f2 long}  losslessly before giving it to the matcher.\par
To support this need, gMock gives you the {\f2 SafeMatcherCast<T>(m)}  function. It casts a matcher {\f2 m}  to type {\f2 Matcher<T>} . To ensure safety, gMock checks that (let {\f2 U}  be the type {\f2 m}  accepts :\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Type {\f2 T}  can be {\i implicitly}  cast to type {\f2 U} ;\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
2.\tab When both {\f2 T}  and {\f2 U}  are built-in arithmetic types ({\f2 bool} , integers, and floating-point numbers), the conversion from {\f2 T}  to {\f2 U}  is not lossy (in other words, any value representable by {\f2 T}  can also be represented by {\f2 U} ); and\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
3.\tab When {\f2 U}  is a reference, {\f2 T}  must also be a reference (as the underlying matcher may be interested in the address of the {\f2 U}  value).\par}
\par
The code won't compile if any of these conditions isn't met.\par
Here's one example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::SafeMatcherCast;\par
\par
{\cf20 // A base class and a child class.}\par
{\cf17 class }Base \{ ... \};\par
{\cf17 class }Derived : {\cf17 public} Base \{ ... \};\par
\par
{\cf17 class }MockFoo : {\cf17 public} Foo \{\par
 {\cf17 public}:\par
  MOCK_METHOD({\cf18 void}, DoThis, (Derived* derived), ({\cf17 override}));\par
\};\par
\par
...\par
  MockFoo foo;\par
  {\cf20 // m is a Matcher<Base*> we got from somewhere.}\par
  EXPECT_CALL(foo, DoThis(SafeMatcherCast<Derived*>(m)));\par
}
\par
If you find {\f2 SafeMatcherCast<T>(m)}  too limiting, you can use a similar function {\f2 MatcherCast<T>(m)} . The difference is that {\f2 MatcherCast}  works as long as you can {\f2 static_cast}  type {\f2 T}  to type {\f2 U} .\par
{\f2 MatcherCast}  essentially lets you bypass C++'s type system ({\f2 static_cast}  isn't always safe as it could throw away information, for example), so be careful not to misuse/abuse it.\par}
{\bkmkstart AAAAAAAAHH}
{\bkmkend AAAAAAAAHH}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Selecting Between Overloaded Functions
\par}
{\tc\tcl3 \v Selecting Between Overloaded Functions}
If you expect an overloaded function to be called, the compiler may need some help on which overloaded version it is.\par
To disambiguate functions overloaded on the const-ness of this object, use the {\f2 Const()}  argument wrapper.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::ReturnRef;\par
\par
{\cf17 class }MockFoo : {\cf17 public} Foo \{\par
  ...\par
  MOCK_METHOD(Bar&, GetBar, (), ({\cf17 override}));\par
  MOCK_METHOD({\cf17 const} Bar&, GetBar, (), ({\cf17 const}, {\cf17 override}));\par
\};\par
\par
...\par
  MockFoo foo;\par
  Bar bar1, bar2;\par
  EXPECT_CALL(foo, GetBar())         {\cf20 // The non-const GetBar().}\par
      .WillOnce(ReturnRef(bar1));\par
  EXPECT_CALL(Const(foo), GetBar())  {\cf20 // The const GetBar().}\par
      .WillOnce(ReturnRef(bar2));\par
}
\par
({\f2 Const()}  is defined by gMock and returns a {\f2 const}  reference to its argument.)\par
To disambiguate overloaded functions with the same number of arguments but different argument types, you may need to specify the exact type of a matcher, either by wrapping your matcher in {\f2 Matcher<type>()} , or using a matcher whose type is fixed ({\f2 TypedEq<type>} , {\f2 An<type>()} , etc):\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::An;\par
using ::testing::Matcher;\par
using ::testing::TypedEq;\par
\par
{\cf17 class }MockPrinter : {\cf17 public} Printer \{\par
 {\cf17 public}:\par
  MOCK_METHOD({\cf18 void}, Print, ({\cf18 int} n), ({\cf17 override}));\par
  MOCK_METHOD({\cf18 void}, Print, ({\cf18 char} c), ({\cf17 override}));\par
\};\par
\par
TEST(PrinterTest, Print) \{\par
  MockPrinter printer;\par
\par
  EXPECT_CALL(printer, Print(An<int>()));            {\cf20 // void Print(int);}\par
  EXPECT_CALL(printer, Print(Matcher<int>(Lt(5))));  {\cf20 // void Print(int);}\par
  EXPECT_CALL(printer, Print(TypedEq<char>({\cf23 'a'})));   {\cf20 // void Print(char);}\par
\par
  printer.Print(3);\par
  printer.Print(6);\par
  printer.Print({\cf23 'a'});\par
\}\par
}
\par}
{\bkmkstart AAAAAAAAHI}
{\bkmkend AAAAAAAAHI}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Performing Different Actions Based on the Arguments
\par}
{\tc\tcl3 \v Performing Different Actions Based on the Arguments}
When a mock method is called, the {\i last}  matching expectation that's still active will be selected (think "newer overrides older"). So, you can make a method do different things depending on its argument values like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Lt;\par
using ::testing::Return;\par
...\par
  {\cf20 // The default case.}\par
  EXPECT_CALL(foo, DoThis(_))\par
      .WillRepeatedly(Return({\cf23 'b'}));\par
  {\cf20 // The more specific case.}\par
  EXPECT_CALL(foo, DoThis(Lt(5)))\par
      .WillRepeatedly(Return({\cf23 'a'}));\par
}
\par
Now, if {\f2 foo.DoThis()}  is called with a value less than 5, \'91'a\'92{\f2 will be returned; otherwise} 'b'` will be returned.\par}
{\bkmkstart AAAAAAAAHJ}
{\bkmkend AAAAAAAAHJ}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Matching Multiple Arguments as a Whole
\par}
{\tc\tcl3 \v Matching Multiple Arguments as a Whole}
Sometimes it's not enough to match the arguments individually. For example, we may want to say that the first argument must be less than the second argument. The {\f2 With()}  clause allows us to match all arguments of a mock function as a whole. For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Ne;\par
using ::testing::Lt;\par
...\par
  EXPECT_CALL(foo, InRange(Ne(0), _))\par
      .With(Lt());\par
}
\par
says that the first argument of {\f2 InRange()}  must not be 0, and must be less than the second argument.\par
The expression inside {\f2 With()}  must be a matcher of type {\f2 Matcher<std::tuple<A1, ..., An>>} , where {\f2 A1} , ..., {\f2 An}  are the types of the function arguments.\par
You can also write {\f2 AllArgs(m)}  instead of {\f2 m}  inside {\f2 .With()} . The two forms are equivalent, but {\f2 .With(AllArgs(Lt()))}  is more readable than {\f2 .With(Lt())} .\par
You can use {\f2 Args<k1, ..., kn>(m)}  to match the {\f2 n}  selected arguments (as a tuple) against {\f2 m} . For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::AllOf;\par
using ::testing::Args;\par
using ::testing::Lt;\par
...\par
  EXPECT_CALL(foo, Blah)\par
      .With(AllOf(Args<0, 1>(Lt()), Args<1, 2>(Lt())));\par
}
\par
says that {\f2 Blah}  will be called with arguments {\f2 x} , {\f2 y} , and {\f2 z}  where {\f2 x < y < z} . Note that in this example, it wasn't necessary to specify the positional matchers.\par
As a convenience and example, gMock provides some matchers for 2-tuples, including the {\f2 Lt()}  matcher above. See {\f2 Multi-argument Matchers} for the complete list.\par
Note that if you want to pass the arguments to a predicate of your own (e.g. {\f2 .With(Args<0, 1>(Truly(&MyPredicate)))} ), that predicate MUST be written to take a {\f2 std::tuple}  as its argument; gMock will pass the {\f2 n}  selected arguments as {\i one}  single tuple to the predicate.\par}
{\bkmkstart AAAAAAAAHK}
{\bkmkend AAAAAAAAHK}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Using Matchers as Predicates
\par}
{\tc\tcl3 \v Using Matchers as Predicates}
Have you noticed that a matcher is just a fancy predicate that also knows how to describe itself? Many existing algorithms take predicates as arguments (e.g. those defined in STL's {\f2 <algorithm>}  header), and it would be a shame if gMock matchers were not allowed to participate.\par
Luckily, you can use a matcher where a unary predicate functor is expected by wrapping it inside the {\f2 Matches()}  function. For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf21 #include <algorithm>}\par
{\cf21 #include <vector>}\par
\par
using ::testing::Matches;\par
using ::testing::Ge;\par
\par
vector<int> v;\par
...\par
{\cf20 // How many elements in v are >= 10?}\par
const {\cf18 int} count = count_if(v.begin(), v.end(), Matches(Ge(10)));\par
}
\par
Since you can build complex matchers from simpler ones easily using gMock, this gives you a way to conveniently construct composite predicates (doing the same using STL's {\f2 <functional>}  header is just painful). For example, here's a predicate that's satisfied by any number that is >= 0, <= 100, and != 50:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 using }testing::AllOf;\par
{\cf17 using }testing::Ge;\par
{\cf17 using }testing::Le;\par
{\cf17 using }testing::Matches;\par
{\cf17 using }testing::Ne;\par
...\par
Matches(AllOf(Ge(0), Le(100), Ne(50)))\par
}
\par}
{\bkmkstart AAAAAAAAHL}
{\bkmkend AAAAAAAAHL}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Using Matchers in googletest Assertions
\par}
{\tc\tcl3 \v Using Matchers in googletest Assertions}
See {\f2 {\f2 EXPECT_THAT} } in the Assertions Reference.\par}
{\bkmkstart AAAAAAAAHM}
{\bkmkend AAAAAAAAHM}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Using Predicates as Matchers
\par}
{\tc\tcl3 \v Using Predicates as Matchers}
gMock provides a set of built-in matchers for matching arguments with expected values\'97see the {\b Matchers Reference} for more information. In case you find the built-in set lacking, you can use an arbitrary unary predicate function or functor as a matcher - as long as the predicate accepts a value of the type you want. You do this by wrapping the predicate inside the {\f2 Truly()}  function, for example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Truly;\par
\par
{\cf18 int} IsEven({\cf18 int} n) \{ {\cf19 return} (n % 2) == 0 ? 1 : 0; \}\par
...\par
  {\cf20 // Bar() must be called with an even number.}\par
  EXPECT_CALL(foo, Bar(Truly(IsEven)));\par
}
\par
Note that the predicate function / functor doesn't have to return {\f2 bool} . It works as long as the return value can be used as the condition in in statement {\f2 if (condition) ...} .\par}
{\bkmkstart AAAAAAAAHN}
{\bkmkend AAAAAAAAHN}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Matching Arguments that Are Not Copyable
\par}
{\tc\tcl3 \v Matching Arguments that Are Not Copyable}
When you do an {\f2 EXPECT_CALL(mock_obj, Foo(bar))} , gMock saves away a copy of {\f2 bar} . When {\f2 Foo()}  is called later, gMock compares the argument to {\f2 Foo()}  with the saved copy of {\f2 bar} . This way, you don't need to worry about {\f2 bar}  being modified or destroyed after the {\f2 EXPECT_CALL()}  is executed. The same is true when you use matchers like {\f2 Eq(bar)} , {\f2 Le(bar)} , and so on.\par
But what if {\f2 bar}  cannot be copied (i.e. has no copy constructor)? You could define your own matcher function or callback and use it with {\f2 Truly()} , as the previous couple of recipes have shown. Or, you may be able to get away from it if you can guarantee that {\f2 bar}  won't be changed after the {\f2 EXPECT_CALL()}  is executed. Just tell gMock that it should save a reference to {\f2 bar} , instead of a copy of it. Here's how:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Eq;\par
using ::testing::Lt;\par
...\par
  {\cf20 // Expects that Foo()'s argument == bar.}\par
  EXPECT_CALL(mock_obj, Foo(Eq(std::ref(bar))));\par
\par
  {\cf20 // Expects that Foo()'s argument < bar.}\par
  EXPECT_CALL(mock_obj, Foo(Lt(std::ref(bar))));\par
}
\par
Remember: if you do this, don't change {\f2 bar}  after the {\f2 EXPECT_CALL()} , or the result is undefined.\par}
{\bkmkstart AAAAAAAAHO}
{\bkmkend AAAAAAAAHO}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Validating a Member of an Object
\par}
{\tc\tcl3 \v Validating a Member of an Object}
Often a mock function takes a reference to object as an argument. When matching the argument, you may not want to compare the entire object against a fixed object, as that may be over-specification. Instead, you may need to validate a certain member variable or the result of a certain getter method of the object. You can do this with {\f2 Field()}  and {\f2 Property()} . More specifically,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Field(&Foo::bar, m)\par
}
\par
is a matcher that matches a {\f2 Foo}  object whose {\f2 bar}  member variable satisfies matcher {\f2 m} .\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Property(&Foo::baz, m)\par
}
\par
is a matcher that matches a {\f2 Foo}  object whose {\f2 baz()}  method returns a value that satisfies matcher {\f2 m} .\par
For example:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Expression   \cell }{Description    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Field(&Foo::number, Ge(3))}    \cell }{Matches {\f2 x}  where {\f2 x.number >= 3} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Property(&Foo::name, StartsWith("John "))}    \cell }{Matches {\f2 x}  where {\f2 x.name()}  starts with {\f2 "John "} .   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Note that in {\f2 Property(&Foo::baz, ...)} , method {\f2 baz()}  must take no argument and be declared as {\f2 const} . Don't use {\f2 Property()}  against member functions that you do not own, because taking addresses of functions is fragile and generally not part of the contract of the function.\par
{\f2 Field()}  and {\f2 Property()}  can also match plain pointers to objects. For instance,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Field;\par
using ::testing::Ge;\par
...\par
Field(&Foo::number, Ge(3))\par
}
\par
matches a plain pointer {\f2 p}  where {\f2 p->number >= 3} . If {\f2 p}  is {\f2 NULL} , the match will always fail regardless of the inner matcher.\par
What if you want to validate more than one members at the same time? Remember that there are {\b `AllOf()` and `AllOfArray()`}.\par
Finally {\f2 Field()}  and {\f2 Property()}  provide overloads that take the field or property names as the first argument to include it in the error message. This can be useful when creating combined matchers.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::AllOf;\par
using ::testing::Field;\par
using ::testing::Matcher;\par
using ::testing::SafeMatcherCast;\par
\par
Matcher<Foo> IsFoo({\cf17 const} Foo& foo) \{\par
  {\cf19 return} AllOf(Field({\cf22 "some_field"}, &Foo::some_field, foo.some_field),\par
               Field({\cf22 "other_field"}, &Foo::other_field, foo.other_field),\par
               Field({\cf22 "last_field"}, &Foo::last_field, foo.last_field));\par
\}\par
}
\par}
{\bkmkstart AAAAAAAAHP}
{\bkmkend AAAAAAAAHP}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Validating the Value Pointed to by a Pointer Argument
\par}
{\tc\tcl3 \v Validating the Value Pointed to by a Pointer Argument}
C++ functions often take pointers as arguments. You can use matchers like {\f2 IsNull()} , {\f2 NotNull()} , and other comparison matchers to match a pointer, but what if you want to make sure the value {\i pointed to}  by the pointer, instead of the pointer itself, has a certain property? Well, you can use the {\f2 Pointee(m)}  matcher.\par
{\f2 Pointee(m)}  matches a pointer if and only if {\f2 m}  matches the value the pointer points to. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Ge;\par
using ::testing::Pointee;\par
...\par
  EXPECT_CALL(foo, Bar(Pointee(Ge(3))));\par
}
\par
expects {\f2 foo.Bar()}  to be called with a pointer that points to a value greater than or equal to 3.\par
One nice thing about {\f2 Pointee()}  is that it treats a {\f2 NULL}  pointer as a match failure, so you can write {\f2 Pointee(m)}  instead of\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::AllOf;\par
using ::testing::NotNull;\par
using ::testing::Pointee;\par
...\par
  AllOf(NotNull(), Pointee(m))\par
}
\par
without worrying that a {\f2 NULL}  pointer will crash your test.\par
Also, did we tell you that {\f2 Pointee()}  works with both raw pointers {\b and}  smart pointers ({\f2 std::unique_ptr} , {\f2 std::shared_ptr} , etc)?\par
What if you have a pointer to pointer? You guessed it - you can use nested {\f2 Pointee()}  to probe deeper inside the value. For example, {\f2 Pointee(Pointee(Lt(3)))}  matches a pointer that points to a pointer that points to a number less than 3 (what a mouthful...).\par}
{\bkmkstart AAAAAAAAHQ}
{\bkmkend AAAAAAAAHQ}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Defining a Custom Matcher Class
\par}
{\tc\tcl3 \v Defining a Custom Matcher Class}
Most matchers can be simply defined using {\b the MATCHER* macros}, which are terse and flexible, and produce good error messages. However, these macros are not very explicit about the interfaces they create and are not always suitable, especially for matchers that will be widely reused.\par
For more advanced cases, you may need to define your own matcher class. A custom matcher allows you to test a specific invariant property of that object. Let's take a look at how to do so.\par
Imagine you have a mock function that takes an object of type {\f2 Foo} , which has an {\f2 int bar()}  method and an {\f2 int baz()}  method. You want to constrain that the argument's {\f2 bar()}  value plus its {\f2 baz()}  value is a given number. (This is an invariant.) Here's how we can write and use a matcher class to do so:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 class }BarPlusBazEqMatcher \{\par
 {\cf17 public}:\par
  {\cf17 using }is_gtest_matcher = void;\par
\par
  {\cf17 explicit} BarPlusBazEqMatcher({\cf18 int} expected_sum)\par
      : expected_sum_(expected_sum) \{\}\par
\par
  {\cf18 bool} MatchAndExplain({\cf17 const} Foo& foo,\par
                       std::ostream* {\cf20 /* listener */}){\cf17  const }\{\par
    {\cf19 return} (foo.bar() + foo.baz()) == expected_sum_;\par
  \}\par
\par
  {\cf18 void} DescribeTo(std::ostream* os){\cf17  const }\{\par
    *os << {\cf22 "bar() + baz() equals "} << expected_sum_;\par
  \}\par
\par
  {\cf18 void} DescribeNegationTo(std::ostream* os){\cf17  const }\{\par
    *os << {\cf22 "bar() + baz() does not equal "} << expected_sum_;\par
  \}\par
 {\cf17 private}:\par
  {\cf17 const} {\cf18 int} expected_sum_;\par
\};\par
\par
::testing::Matcher<const Foo&> BarPlusBazEq({\cf18 int} expected_sum) \{\par
  {\cf19 return} BarPlusBazEqMatcher(expected_sum);\par
\}\par
\par
...\par
  Foo foo;\par
  EXPECT_CALL(foo, BarPlusBazEq(5))...;\par
}
\par}
{\bkmkstart AAAAAAAAHR}
{\bkmkend AAAAAAAAHR}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Matching Containers
\par}
{\tc\tcl3 \v Matching Containers}
Sometimes an STL container (e.g. list, vector, map, ...) is passed to a mock function and you may want to validate it. Since most STL containers support the {\f2 ==}  operator, you can write {\f2 Eq(expected_container)}  or simply {\f2 expected_container}  to match a container exactly.\par
Sometimes, though, you may want to be more flexible (for example, the first element must be an exact match, but the second element can be any positive number, and so on). Also, containers used in tests often have a small number of elements, and having to define the expected container out-of-line is a bit of a hassle.\par
You can use the {\f2 ElementsAre()}  or {\f2 UnorderedElementsAre()}  matcher in such cases:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::ElementsAre;\par
using ::testing::Gt;\par
...\par
  MOCK_METHOD({\cf18 void}, Foo, ({\cf17 const} vector<int>& numbers), ({\cf17 override}));\par
...\par
  EXPECT_CALL(mock, Foo(ElementsAre(1, Gt(0), _, 5)));\par
}
\par
The above matcher says that the container must have 4 elements, which must be 1, greater than 0, anything, and 5 respectively.\par
If you instead write:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Gt;\par
using ::testing::UnorderedElementsAre;\par
...\par
  MOCK_METHOD({\cf18 void}, Foo, ({\cf17 const} vector<int>& numbers), ({\cf17 override}));\par
...\par
  EXPECT_CALL(mock, Foo(UnorderedElementsAre(1, Gt(0), _, 5)));\par
}
\par
It means that the container must have 4 elements, which (under some permutation) must be 1, greater than 0, anything, and 5 respectively.\par
As an alternative you can place the arguments in a C-style array and use {\f2 ElementsAreArray()}  or {\f2 UnorderedElementsAreArray()}  instead:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::ElementsAreArray;\par
...\par
  {\cf20 // ElementsAreArray accepts an array of element values.}\par
  {\cf17 const} {\cf18 int} expected_vector1[] = \{1, 5, 2, 4, ...\};\par
  EXPECT_CALL(mock, Foo(ElementsAreArray(expected_vector1)));\par
\par
  {\cf20 // Or, an array of element matchers.}\par
  Matcher<int> expected_vector2[] = \{1, Gt(2), _, 3, ...\};\par
  EXPECT_CALL(mock, Foo(ElementsAreArray(expected_vector2)));\par
}
\par
In case the array needs to be dynamically created (and therefore the array size cannot be inferred by the compiler), you can give {\f2 ElementsAreArray()}  an additional argument to specify the array size:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::ElementsAreArray;\par
...\par
  {\cf18 int}* {\cf17 const} expected_vector3 = {\cf17 new} {\cf18 int}[count];\par
  ... fill expected_vector3 with values ...\par
  EXPECT_CALL(mock, Foo(ElementsAreArray(expected_vector3, count)));\par
}
\par
Use {\f2 Pair}  when comparing maps or other associative containers.\par
\{% raw %\}\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::UnorderedElementsAre;\par
using ::testing::Pair;\par
...\par
  absl::flat_hash_map<string, int> m = \{\{{\cf22 "a"}, 1\}, \{{\cf22 "b"}, 2\}, \{{\cf22 "c"}, 3\}\};\par
  EXPECT_THAT(m, UnorderedElementsAre(\par
      Pair({\cf22 "a"}, 1), Pair({\cf22 "b"}, 2), Pair({\cf22 "c"}, 3)));\par
}
\par
\{% endraw %\}\par
{\b Tips:} \par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 ElementsAre*()}  can be used to match {\i any}  container that implements the STL iterator pattern (i.e. it has a {\f2 const_iterator}  type and supports {\f2 begin()/end()} ), not just the ones defined in STL. It will even work with container types yet to be written - as long as they follows the above pattern.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You can use nested {\f2 ElementsAre*()}  to match nested (multi-dimensional) containers.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If the container is passed by pointer instead of by reference, just write {\f2 Pointee(ElementsAre*(...))} .\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The order of elements {\i matters}  for {\f2 ElementsAre*()} . If you are using it with containers whose element order are undefined (such as a {\f2 std::unordered_map} ) you should use {\f2 UnorderedElementsAre} .\par}
\par
\par}
{\bkmkstart AAAAAAAAHS}
{\bkmkend AAAAAAAAHS}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Sharing Matchers
\par}
{\tc\tcl3 \v Sharing Matchers}
Under the hood, a gMock matcher object consists of a pointer to a ref-counted implementation object. Copying matchers is allowed and very efficient, as only the pointer is copied. When the last matcher that references the implementation object dies, the implementation object will be deleted.\par
Therefore, if you have some complex matcher that you want to use again and again, there is no need to build it every time. Just assign it to a matcher variable and use that variable repeatedly! For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::AllOf;\par
using ::testing::Gt;\par
using ::testing::Le;\par
using ::testing::Matcher;\par
...\par
  Matcher<int> in_range = AllOf(Gt(5), Le(10));\par
  ... use in_range as a matcher in multiple EXPECT_CALLs ...\par
}
\par}
{\bkmkstart AAAAAAAAHT}
{\bkmkend AAAAAAAAHT}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Matchers must have no side-effects
\par}
{\tc\tcl3 \v Matchers must have no side-effects}
\{: .callout .warning\} WARNING: gMock does not guarantee when or how many times a matcher will be invoked. Therefore, all matchers must be {\i purely functional} : they cannot have any side effects, and the match result must not depend on anything other than the matcher's parameters and the value being matched.\par
This requirement must be satisfied no matter how a matcher is defined (e.g., if it is one of the standard matchers, or a custom matcher). In particular, a matcher can never call a mock function, as that will affect the state of the mock object and gMock.\par}
\par}
{\bkmkstart AAAAAAAAHU}
{\bkmkend AAAAAAAAHU}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Setting Expectations
\par}
{\tc\tcl2 \v Setting Expectations}
{\bkmkstart AAAAAAAAHV}
{\bkmkend AAAAAAAAHV}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Knowing When to Expect
\par}
{\tc\tcl3 \v Knowing When to Expect}
**{\f2 ON_CALL} ** is likely the {\i single most under-utilized construct}  in gMock.\par
There are basically two constructs for defining the behavior of a mock object: {\f2 ON_CALL}  and {\f2 EXPECT_CALL} . The difference? {\f2 ON_CALL}  defines what happens when a mock method is called, but {\i doesn't imply any expectation on the method being called} . {\f2 EXPECT_CALL}  not only defines the behavior, but also sets an expectation that {\i the method will be called with the given arguments, for the given number of times}  (and {\i in the given order}  when you specify the order too).\par
Since {\f2 EXPECT_CALL}  does more, isn't it better than {\f2 ON_CALL} ? Not really. Every {\f2 EXPECT_CALL}  adds a constraint on the behavior of the code under test. Having more constraints than necessary is {\i baaad}  - even worse than not having enough constraints.\par
This may be counter-intuitive. How could tests that verify more be worse than tests that verify less? Isn't verification the whole point of tests?\par
The answer lies in {\i what}  a test should verify. {\b A good test verifies the contract of the code.}  If a test over-specifies, it doesn't leave enough freedom to the implementation. As a result, changing the implementation without breaking the contract (e.g. refactoring and optimization), which should be perfectly fine to do, can break such tests. Then you have to spend time fixing them, only to see them broken again the next time the implementation is changed.\par
Keep in mind that one doesn't have to verify more than one property in one test. In fact, {\b it's a good style to verify only one thing in one test.}  If you do that, a bug will likely break only one or two tests instead of dozens (which case would you rather debug?). If you are also in the habit of giving tests descriptive names that tell what they verify, you can often easily guess what's wrong just from the test log itself.\par
So use {\f2 ON_CALL}  by default, and only use {\f2 EXPECT_CALL}  when you actually intend to verify that the call is made. For example, you may have a bunch of {\f2 ON_CALL} s in your test fixture to set the common mock behavior shared by all tests in the same group, and write (scarcely) different {\f2 EXPECT_CALL} s in different {\f2 TEST_F} s to verify different aspects of the code's behavior. Compared with the style where each {\f2 TEST}  has many {\f2 EXPECT_CALL} s, this leads to tests that are more resilient to implementational changes (and thus less likely to require maintenance) and makes the intent of the tests more obvious (so they are easier to maintain when you do need to maintain them).\par
If you are bothered by the "Uninteresting mock function call" message printed when a mock method without an {\f2 EXPECT_CALL}  is called, you may use a {\f2 NiceMock}  instead to suppress all such messages for the mock object, or suppress the message for specific methods by adding {\f2 EXPECT_CALL(...).Times(AnyNumber())} . DO NOT suppress it by blindly adding an {\f2 EXPECT_CALL(...)} , or you'll have a test that's a pain to maintain.\par}
{\bkmkstart AAAAAAAAHW}
{\bkmkend AAAAAAAAHW}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Ignoring Uninteresting Calls
\par}
{\tc\tcl3 \v Ignoring Uninteresting Calls}
If you are not interested in how a mock method is called, just don't say anything about it. In this case, if the method is ever called, gMock will perform its default action to allow the test program to continue. If you are not happy with the default action taken by gMock, you can override it using {\f2 DefaultValue<T>::Set()}  (described {\b here}) or {\f2 ON_CALL()} .\par
Please note that once you expressed interest in a particular mock method (via {\f2 EXPECT_CALL()} ), all invocations to it must match some expectation. If this function is called but the arguments don't match any {\f2 EXPECT_CALL()}  statement, it will be an error.\par}
{\bkmkstart AAAAAAAAHX}
{\bkmkend AAAAAAAAHX}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Disallowing Unexpected Calls
\par}
{\tc\tcl3 \v Disallowing Unexpected Calls}
If a mock method shouldn't be called at all, explicitly say so:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
...\par
  EXPECT_CALL(foo, Bar(_))\par
      .Times(0);\par
}
\par
If some calls to the method are allowed, but the rest are not, just list all the expected calls:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::AnyNumber;\par
using ::testing::Gt;\par
...\par
  EXPECT_CALL(foo, Bar(5));\par
  EXPECT_CALL(foo, Bar(Gt(10)))\par
      .Times(AnyNumber());\par
}
\par
A call to {\f2 foo.Bar()}  that doesn't match any of the {\f2 EXPECT_CALL()}  statements will be an error.\par}
{\bkmkstart AAAAAAAAHY}
{\bkmkend AAAAAAAAHY}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Understanding Uninteresting vs Unexpected Calls
\par}
{\tc\tcl3 \v Understanding Uninteresting vs Unexpected Calls}
{\i Uninteresting}  calls and {\i unexpected}  calls are different concepts in gMock. {\i Very}  different.\par
A call {\f2 x.Y(...)}  is {\b uninteresting}  if there's {\i not even a single}  {\f2 EXPECT_CALL(x, Y(...))}  set. In other words, the test isn't interested in the {\f2 x.Y()}  method at all, as evident in that the test doesn't care to say anything about it.\par
A call {\f2 x.Y(...)}  is {\b unexpected}  if there are {\i some}  {\f2 EXPECT_CALL(x,
Y(...))} s set, but none of them matches the call. Put another way, the test is interested in the {\f2 x.Y()}  method (therefore it explicitly sets some {\f2 EXPECT_CALL}  to verify how it's called); however, the verification fails as the test doesn't expect this particular call to happen.\par
{\b An unexpected call is always an error,}  as the code under test doesn't behave the way the test expects it to behave.\par
{\b By default, an uninteresting call is not an error,}  as it violates no constraint specified by the test. (gMock's philosophy is that saying nothing means there is no constraint.) However, it leads to a warning, as it {\i might}  indicate a problem (e.g. the test author might have forgotten to specify a constraint).\par
In gMock, {\f2 NiceMock}  and {\f2 StrictMock}  can be used to make a mock class "nice" or "strict". How does this affect uninteresting calls and unexpected calls?\par
A {\b nice mock}  suppresses uninteresting call {\i warnings} . It is less chatty than the default mock, but otherwise is the same. If a test fails with a default mock, it will also fail using a nice mock instead. And vice versa. Don't expect making a mock nice to change the test's result.\par
A {\b strict mock}  turns uninteresting call warnings into errors. So making a mock strict may change the test's result.\par
Let's look at an example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(...) \{\par
  NiceMock<MockDomainRegistry> mock_registry;\par
  EXPECT_CALL(mock_registry, GetDomainOwner({\cf22 "google.com"}))\par
          .WillRepeatedly(Return({\cf22 "Larry Page"}));\par
\par
  {\cf20 // Use mock_registry in code under test.}\par
  ... &mock_registry ...\par
\}\par
}
\par
The sole {\f2 EXPECT_CALL}  here says that all calls to {\f2 GetDomainOwner()}  must have {\f2 "google.com"}  as the argument. If {\f2 GetDomainOwner("yahoo.com")}  is called, it will be an unexpected call, and thus an error. {\i Having a nice mock doesn't change the severity of an unexpected call.} \par
So how do we tell gMock that {\f2 GetDomainOwner()}  can be called with some other arguments as well? The standard technique is to add a "catch all" {\f2 EXPECT_CALL} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(mock_registry, GetDomainOwner(_))\par
      .Times(AnyNumber());  {\cf20 // catches all other calls to this method.}\par
EXPECT_CALL(mock_registry, GetDomainOwner({\cf22 "google.com"}))\par
      .WillRepeatedly(Return({\cf22 "Larry Page"}));\par
}
\par
Remember that {\f2 _}  is the wildcard matcher that matches anything. With this, if {\f2 GetDomainOwner("google.com")}  is called, it will do what the second {\f2 EXPECT_CALL}  says; if it is called with a different argument, it will do what the first {\f2 EXPECT_CALL}  says.\par
Note that the order of the two {\f2 EXPECT_CALL} s is important, as a newer {\f2 EXPECT_CALL}  takes precedence over an older one.\par
For more on uninteresting calls, nice mocks, and strict mocks, read {\b "The Nice, the Strict, and the Naggy"}.\par}
{\bkmkstart AAAAAAAAHZ}
{\bkmkend AAAAAAAAHZ}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Ignoring Uninteresting Arguments
\par}
{\tc\tcl3 \v Ignoring Uninteresting Arguments}
If your test doesn't care about the parameters (it only cares about the number or order of calls), you can often simply omit the parameter list:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf20 // Expect foo.Bar( ... ) twice with any arguments.}\par
EXPECT_CALL(foo, Bar).Times(2);\par
\par
{\cf20 // Delegate to the given method whenever the factory is invoked.}\par
ON_CALL(foo_factory, MakeFoo)\par
    .WillByDefault(&BuildFooForTest);\par
}
\par
This functionality is only available when a method is not overloaded; to prevent unexpected behavior it is a compilation error to try to set an expectation on a method where the specific overload is ambiguous. You can work around this by supplying a {\b simpler mock interface} than the mocked class provides.\par
This pattern is also useful when the arguments are interesting, but match logic is substantially complex. You can leave the argument list unspecified and use SaveArg actions to {\b save the values for later verification}. If you do that, you can easily differentiate calling the method the wrong number of times from calling it with the wrong arguments.\par}
{\bkmkstart AAAAAAAAIA}
{\bkmkend AAAAAAAAIA}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Expecting Ordered Calls
\par}
{\tc\tcl3 \v Expecting Ordered Calls}
Although an {\f2 EXPECT_CALL()}  statement defined later takes precedence when gMock tries to match a function call with an expectation, by default calls don't have to happen in the order {\f2 EXPECT_CALL()}  statements are written. For example, if the arguments match the matchers in the second {\f2 EXPECT_CALL()} , but not those in the first and third, then the second expectation will be used.\par
If you would rather have all calls occur in the order of the expectations, put the {\f2 EXPECT_CALL()}  statements in a block where you define a variable of type {\f2 InSequence} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::InSequence;\par
\par
  \{\par
    InSequence s;\par
\par
    EXPECT_CALL(foo, DoThis(5));\par
    EXPECT_CALL(bar, DoThat(_))\par
        .Times(2);\par
    EXPECT_CALL(foo, DoThis(6));\par
  \}\par
}
\par
In this example, we expect a call to {\f2 foo.DoThis(5)} , followed by two calls to {\f2 bar.DoThat()}  where the argument can be anything, which are in turn followed by a call to {\f2 foo.DoThis(6)} . If a call occurred out-of-order, gMock will report an error.\par}
{\bkmkstart AAAAAAAAIB}
{\bkmkend AAAAAAAAIB}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Expecting Partially Ordered Calls
\par}
{\tc\tcl3 \v Expecting Partially Ordered Calls}
Sometimes requiring everything to occur in a predetermined order can lead to brittle tests. For example, we may care about {\f2 A}  occurring before both {\f2 B}  and {\f2 C} , but aren't interested in the relative order of {\f2 B}  and {\f2 C} . In this case, the test should reflect our real intent, instead of being overly constraining.\par
gMock allows you to impose an arbitrary DAG (directed acyclic graph) on the calls. One way to express the DAG is to use the {\f2 {\f2 After}  clause} of {\f2 EXPECT_CALL} .\par
Another way is via the {\f2 InSequence()}  clause (not the same as the {\f2 InSequence}  class), which we borrowed from jMock 2. It's less flexible than {\f2 After()} , but more convenient when you have long chains of sequential calls, as it doesn't require you to come up with different names for the expectations in the chains. Here's how it works:\par
If we view {\f2 EXPECT_CALL()}  statements as nodes in a graph, and add an edge from node A to node B wherever A must occur before B, we can get a DAG. We use the term "sequence" to mean a directed path in this DAG. Now, if we decompose the DAG into sequences, we just need to know which sequences each {\f2 EXPECT_CALL()}  belongs to in order to be able to reconstruct the original DAG.\par
So, to specify the partial order on the expectations we need to do two things: first to define some {\f2 Sequence}  objects, and then for each {\f2 EXPECT_CALL()}  say which {\f2 Sequence}  objects it is part of.\par
Expectations in the same sequence must occur in the order they are written. For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Sequence;\par
...\par
  Sequence s1, s2;\par
\par
  EXPECT_CALL(foo, A())\par
      .InSequence(s1, s2);\par
  EXPECT_CALL(bar, B())\par
      .InSequence(s1);\par
  EXPECT_CALL(bar, C())\par
      .InSequence(s2);\par
  EXPECT_CALL(foo, D())\par
      .InSequence(s2);\par
}
\par
specifies the following DAG (where {\f2 s1}  is {\f2 A -> B} , and {\f2 s2}  is {\f2 A -> C -> D} ):\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid      +---> B\par
     |\par
A ---|\par
     |\par
     +---> C ---> D\par
}
\par
This means that A must occur before B and C, and C must occur before D. There's no restriction about the order other than these.\par}
{\bkmkstart AAAAAAAAIC}
{\bkmkend AAAAAAAAIC}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Controlling When an Expectation Retires
\par}
{\tc\tcl3 \v Controlling When an Expectation Retires}
When a mock method is called, gMock only considers expectations that are still active. An expectation is active when created, and becomes inactive (aka {\i retires} ) when a call that has to occur later has occurred. For example, in\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Sequence;\par
...\par
  Sequence s1, s2;\par
\par
  EXPECT_CALL(log, Log(WARNING, _, {\cf22 "File too large."}))      {\cf20 // #1}\par
      .Times(AnyNumber())\par
      .InSequence(s1, s2);\par
  EXPECT_CALL(log, Log(WARNING, _, {\cf22 "Data set is empty."}))   {\cf20 // #2}\par
      .InSequence(s1);\par
  EXPECT_CALL(log, Log(WARNING, _, {\cf22 "User not found."}))      {\cf20 // #3}\par
      .InSequence(s2);\par
}
\par
as soon as either #2 or #3 is matched, #1 will retire. If a warning {\f2 "File too
large."}  is logged after this, it will be an error.\par
Note that an expectation doesn't retire automatically when it's saturated. For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
...\par
  EXPECT_CALL(log, Log(WARNING, _, _));                     {\cf20 // #1}\par
  EXPECT_CALL(log, Log(WARNING, _, {\cf22 "File too large."}));     {\cf20 // #2}\par
}
\par
says that there will be exactly one warning with the message {\f2 "File too
large."} . If the second warning contains this message too, #2 will match again and result in an upper-bound-violated error.\par
If this is not what you want, you can ask an expectation to retire as soon as it becomes saturated:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
...\par
  EXPECT_CALL(log, Log(WARNING, _, _));                     {\cf20 // #1}\par
  EXPECT_CALL(log, Log(WARNING, _, {\cf22 "File too large."}))      {\cf20 // #2}\par
      .RetiresOnSaturation();\par
}
\par
Here #2 can be used only once, so if you have two warnings with the message {\f2 "File too large."} , the first will match #2 and the second will match #1 - there will be no error.\par}
\par}
{\bkmkstart AAAAAAAAID}
{\bkmkend AAAAAAAAID}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Using Actions
\par}
{\tc\tcl2 \v Using Actions}
{\bkmkstart AAAAAAAAIE}
{\bkmkend AAAAAAAAIE}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Returning References from Mock Methods
\par}
{\tc\tcl3 \v Returning References from Mock Methods}
If a mock function's return type is a reference, you need to use {\f2 ReturnRef()}  instead of {\f2 Return()}  to return a result:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::ReturnRef;\par
\par
{\cf17 class }MockFoo : {\cf17 public} Foo \{\par
 {\cf17 public}:\par
  MOCK_METHOD(Bar&, GetBar, (), ({\cf17 override}));\par
\};\par
...\par
  MockFoo foo;\par
  Bar bar;\par
  EXPECT_CALL(foo, GetBar())\par
      .WillOnce(ReturnRef(bar));\par
...\par
}
\par}
{\bkmkstart AAAAAAAAIF}
{\bkmkend AAAAAAAAIF}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Returning Live Values from Mock Methods
\par}
{\tc\tcl3 \v Returning Live Values from Mock Methods}
The {\f2 Return(x)}  action saves a copy of {\f2 x}  when the action is created, and always returns the same value whenever it's executed. Sometimes you may want to instead return the {\i live}  value of {\f2 x}  (i.e. its value at the time when the action is {\i executed} .). Use either {\f2 ReturnRef()}  or {\f2 ReturnPointee()}  for this purpose.\par
If the mock function's return type is a reference, you can do it using {\f2 ReturnRef(x)} , as shown in the previous recipe ("Returning References from Mock
Methods"). However, gMock doesn't let you use {\f2 ReturnRef()}  in a mock function whose return type is not a reference, as doing that usually indicates a user error. So, what shall you do?\par
Though you may be tempted, DO NOT use {\f2 std::ref()} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 using }testing::Return;\par
\par
{\cf17 class }MockFoo : {\cf17 public} Foo \{\par
 {\cf17 public}:\par
  MOCK_METHOD({\cf18 int}, GetValue, (), ({\cf17 override}));\par
\};\par
...\par
  {\cf18 int} x = 0;\par
  MockFoo foo;\par
  EXPECT_CALL(foo, GetValue())\par
      .WillRepeatedly(Return(std::ref(x)));  {\cf20 // Wrong!}\par
  x = 42;\par
  EXPECT_EQ(42, foo.GetValue());\par
}
\par
Unfortunately, it doesn't work here. The above code will fail with error:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Value of: foo.GetValue()\par
  Actual: 0\par
Expected: 42\par
}
\par
The reason is that {\f2 Return(*value*)}  converts {\f2 value}  to the actual return type of the mock function at the time when the action is {\i created} , not when it is {\i executed} . (This behavior was chosen for the action to be safe when {\f2 value}  is a proxy object that references some temporary objects.) As a result, {\f2 std::ref(x)}  is converted to an {\f2 int}  value (instead of a {\f2 const int&} ) when the expectation is set, and {\f2 Return(std::ref(x))}  will always return 0.\par
{\f2 ReturnPointee(pointer)}  was provided to solve this problem specifically. It returns the value pointed to by {\f2 pointer}  at the time the action is {\i executed} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 using }testing::ReturnPointee;\par
...\par
  {\cf18 int} x = 0;\par
  MockFoo foo;\par
  EXPECT_CALL(foo, GetValue())\par
      .WillRepeatedly(ReturnPointee(&x));  {\cf20 // Note the & here.}\par
  x = 42;\par
  EXPECT_EQ(42, foo.GetValue());  {\cf20 // This will succeed now.}\par
}
\par}
{\bkmkstart AAAAAAAAIG}
{\bkmkend AAAAAAAAIG}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Combining Actions
\par}
{\tc\tcl3 \v Combining Actions}
Want to do more than one thing when a function is called? That's fine. {\f2 DoAll()}  allow you to do sequence of actions every time. Only the return value of the last action in the sequence will be used.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::DoAll;\par
\par
{\cf17 class }MockFoo : {\cf17 public} Foo \{\par
 {\cf17 public}:\par
  MOCK_METHOD({\cf18 bool}, Bar, ({\cf18 int} n), ({\cf17 override}));\par
\};\par
...\par
  EXPECT_CALL(foo, Bar(_))\par
      .WillOnce(DoAll(action_1,\par
                      action_2,\par
                      ...\par
                      action_n));\par
}
\par}
{\bkmkstart AAAAAAAAIH}
{\bkmkend AAAAAAAAIH}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Verifying Complex Arguments
\par}
{\tc\tcl3 \v Verifying Complex Arguments}
If you want to verify that a method is called with a particular argument but the match criteria is complex, it can be difficult to distinguish between cardinality failures (calling the method the wrong number of times) and argument match failures. Similarly, if you are matching multiple parameters, it may not be easy to distinguishing which argument failed to match. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf20 // Not ideal: this could fail because of a problem with arg1 or arg2, or maybe}\par
{\cf20 // just the method wasn't called.}\par
EXPECT_CALL(foo, SendValues(_, ElementsAre(1, 4, 4, 7), EqualsProto( ... )));\par
}
\par
You can instead save the arguments and test them individually:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(foo, SendValues)\par
    .WillOnce(DoAll(SaveArg<1>(&actual_array), SaveArg<2>(&actual_proto)));\par
... run the test\par
EXPECT_THAT(actual_array, ElementsAre(1, 4, 4, 7));\par
EXPECT_THAT(actual_proto, EqualsProto( ... ));\par
}
\par}
{\bkmkstart AAAAAAAAII}
{\bkmkend AAAAAAAAII}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Mocking Side Effects
\par}
{\tc\tcl3 \v Mocking Side Effects}
Sometimes a method exhibits its effect not via returning a value but via side effects. For example, it may change some global state or modify an output argument. To mock side effects, in general you can define your own action by implementing {\f2 {\b testing::ActionInterface}} .\par
If all you need to do is to change an output argument, the built-in {\f2 SetArgPointee()}  action is convenient:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::SetArgPointee;\par
\par
{\cf17 class }MockMutator : {\cf17 public} Mutator \{\par
 {\cf17 public}:\par
  MOCK_METHOD({\cf18 void}, Mutate, ({\cf18 bool} mutate, {\cf18 int}* value), ({\cf17 override}));\par
  ...\par
\}\par
...\par
  MockMutator mutator;\par
  EXPECT_CALL(mutator, Mutate({\cf17 true}, _))\par
      .WillOnce(SetArgPointee<1>(5));\par
}
\par
In this example, when {\f2 mutator.Mutate()}  is called, we will assign 5 to the {\f2 int}  variable pointed to by argument #1 (0-based).\par
{\f2 SetArgPointee()}  conveniently makes an internal copy of the value you pass to it, removing the need to keep the value in scope and alive. The implication however is that the value must have a copy constructor and assignment operator.\par
If the mock method also needs to return a value as well, you can chain {\f2 SetArgPointee()}  with {\f2 Return()}  using {\f2 DoAll()} , remembering to put the {\f2 Return()}  statement last:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::DoAll;\par
using ::testing::Return;\par
using ::testing::SetArgPointee;\par
\par
{\cf17 class }MockMutator : {\cf17 public} Mutator \{\par
 {\cf17 public}:\par
  ...\par
  MOCK_METHOD({\cf18 bool}, MutateInt, ({\cf18 int}* value), ({\cf17 override}));\par
\}\par
...\par
  MockMutator mutator;\par
  EXPECT_CALL(mutator, MutateInt(_))\par
      .WillOnce(DoAll(SetArgPointee<0>(5),\par
                      Return({\cf17 true})));\par
}
\par
Note, however, that if you use the {\f2 ReturnOKWith()}  method, it will override the values provided by {\f2 SetArgPointee()}  in the response parameters of your function call.\par
If the output argument is an array, use the {\f2 SetArrayArgument<N>(first, last)}  action instead. It copies the elements in source range {\f2 [first, last)}  to the array pointed to by the {\f2 N} -th (0-based) argument:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::NotNull;\par
using ::testing::SetArrayArgument;\par
\par
{\cf17 class }MockArrayMutator : {\cf17 public} ArrayMutator \{\par
 {\cf17 public}:\par
  MOCK_METHOD({\cf18 void}, Mutate, ({\cf18 int}* values, {\cf18 int} num_values), ({\cf17 override}));\par
  ...\par
\}\par
...\par
  MockArrayMutator mutator;\par
  {\cf18 int} values[5] = \{1, 2, 3, 4, 5\};\par
  EXPECT_CALL(mutator, Mutate(NotNull(), 5))\par
      .WillOnce(SetArrayArgument<0>(values, values + 5));\par
}
\par
This also works when the argument is an output iterator:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::SetArrayArgument;\par
\par
{\cf17 class }MockRolodex : {\cf17 public} Rolodex \{\par
 {\cf17 public}:\par
  MOCK_METHOD({\cf18 void}, GetNames, (std::back_insert_iterator<vector<string>>),\par
              ({\cf17 override}));\par
  ...\par
\}\par
...\par
  MockRolodex rolodex;\par
  vector<string> names = \{{\cf22 "George"}, {\cf22 "John"}, {\cf22 "Thomas"}\};\par
  EXPECT_CALL(rolodex, GetNames(_))\par
      .WillOnce(SetArrayArgument<0>(names.begin(), names.end()));\par
}
\par}
{\bkmkstart AAAAAAAAIJ}
{\bkmkend AAAAAAAAIJ}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Changing a Mock Object's Behavior Based on the State
\par}
{\tc\tcl3 \v Changing a Mock Object's Behavior Based on the State}
If you expect a call to change the behavior of a mock object, you can use {\f2 ::testing::InSequence}  to specify different behaviors before and after the call:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::InSequence;\par
using ::testing::Return;\par
\par
...\par
  \{\par
     InSequence seq;\par
     EXPECT_CALL(my_mock, IsDirty())\par
         .WillRepeatedly(Return({\cf17 true}));\par
     EXPECT_CALL(my_mock, Flush());\par
     EXPECT_CALL(my_mock, IsDirty())\par
         .WillRepeatedly(Return({\cf17 false}));\par
  \}\par
  my_mock.FlushIfDirty();\par
}
\par
This makes {\f2 my_mock.IsDirty()}  return {\f2 true}  before {\f2 my_mock.Flush()}  is called and return {\f2 false}  afterwards.\par
If the behavior change is more complex, you can store the effects in a variable and make a mock method get its return value from that variable:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::SaveArg;\par
using ::testing::Return;\par
\par
ACTION_P(ReturnPointee, p) \{ {\cf19 return} *p; \}\par
...\par
  {\cf18 int} previous_value = 0;\par
  EXPECT_CALL(my_mock, GetPrevValue)\par
      .WillRepeatedly(ReturnPointee(&previous_value));\par
  EXPECT_CALL(my_mock, UpdateValue)\par
      .WillRepeatedly(SaveArg<0>(&previous_value));\par
  my_mock.DoSomethingToUpdateValue();\par
}
\par
Here {\f2 my_mock.GetPrevValue()}  will always return the argument of the last {\f2 UpdateValue()}  call.\par}
{\bkmkstart AAAAAAAAIK}
{\bkmkend AAAAAAAAIK}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Setting the Default Value for a Return Type
\par}
{\tc\tcl3 \v Setting the Default Value for a Return Type}
If a mock method's return type is a built-in C++ type or pointer, by default it will return 0 when invoked. Also, in C++ 11 and above, a mock method whose return type has a default constructor will return a default-constructed value by default. You only need to specify an action if this default value doesn't work for you.\par
Sometimes, you may want to change this default value, or you may want to specify a default value for types gMock doesn't know about. You can do this using the {\f2 {\b testing::DefaultValue}}  class template:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::DefaultValue;\par
\par
{\cf17 class }MockFoo : {\cf17 public} Foo \{\par
 {\cf17 public}:\par
  MOCK_METHOD(Bar, CalculateBar, (), ({\cf17 override}));\par
\};\par
\par
\par
...\par
  Bar default_bar;\par
  {\cf20 // Sets the default return value for type Bar.}\par
  DefaultValue<Bar>::Set(default_bar);\par
\par
  MockFoo foo;\par
\par
  {\cf20 // We don't need to specify an action here, as the default}\par
  {\cf20 // return value works for us.}\par
  EXPECT_CALL(foo, CalculateBar());\par
\par
  foo.CalculateBar();  {\cf20 // This should return default_bar.}\par
\par
  {\cf20 // Unsets the default return value.}\par
  DefaultValue<Bar>::Clear();\par
}
\par
Please note that changing the default value for a type can make your tests hard to understand. We recommend you to use this feature judiciously. For example, you may want to make sure the {\f2 Set()}  and {\f2 Clear()}  calls are right next to the code that uses your mock.\par}
{\bkmkstart AAAAAAAAIL}
{\bkmkend AAAAAAAAIL}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Setting the Default Actions for a Mock Method
\par}
{\tc\tcl3 \v Setting the Default Actions for a Mock Method}
You've learned how to change the default value of a given type. However, this may be too coarse for your purpose: perhaps you have two mock methods with the same return type and you want them to have different behaviors. The {\f2 ON_CALL()}  macro allows you to customize your mock's behavior at the method level:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::AnyNumber;\par
using ::testing::Gt;\par
using ::testing::Return;\par
...\par
  ON_CALL(foo, Sign(_))\par
      .WillByDefault(Return(-1));\par
  ON_CALL(foo, Sign(0))\par
      .WillByDefault(Return(0));\par
  ON_CALL(foo, Sign(Gt(0)))\par
      .WillByDefault(Return(1));\par
\par
  EXPECT_CALL(foo, Sign(_))\par
      .Times(AnyNumber());\par
\par
  foo.Sign(5);   {\cf20 // This should return 1.}\par
  foo.Sign(-9);  {\cf20 // This should return -1.}\par
  foo.Sign(0);   {\cf20 // This should return 0.}\par
}
\par
As you may have guessed, when there are more than one {\f2 ON_CALL()}  statements, the newer ones in the order take precedence over the older ones. In other words, the {\b last}  one that matches the function arguments will be used. This matching order allows you to set up the common behavior in a mock object's constructor or the test fixture's set-up phase and specialize the mock's behavior later.\par
Note that both {\f2 ON_CALL}  and {\f2 EXPECT_CALL}  have the same "later statements take
precedence" rule, but they don't interact. That is, {\f2 EXPECT_CALL} s have their own precedence order distinct from the {\f2 ON_CALL}  precedence order.\par}
{\bkmkstart AAAAAAAAIM}
{\bkmkend AAAAAAAAIM}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Using Functions/Methods/Functors/Lambdas as Actions
\par}
{\tc\tcl3 \v Using Functions/Methods/Functors/Lambdas as Actions}
If the built-in actions don't suit you, you can use an existing callable (function, {\f2 std::function} , method, functor, lambda) as an action.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_; using ::testing::Invoke;\par
\par
{\cf17 class }MockFoo : {\cf17 public} Foo \{\par
 {\cf17 public}:\par
  MOCK_METHOD({\cf18 int}, Sum, ({\cf18 int} x, {\cf18 int} y), ({\cf17 override}));\par
  MOCK_METHOD({\cf18 bool}, ComplexJob, ({\cf18 int} x), ({\cf17 override}));\par
\};\par
\par
{\cf18 int} CalculateSum({\cf18 int} x, {\cf18 int} y) \{ {\cf19 return} x + y; \}\par
{\cf18 int} Sum3({\cf18 int} x, {\cf18 int} y, {\cf18 int} z) \{ {\cf19 return} x + y + z; \}\par
\par
{\cf17 class }Helper \{\par
 {\cf17 public}:\par
  {\cf18 bool} ComplexJob({\cf18 int} x);\par
\};\par
\par
...\par
  MockFoo foo;\par
  Helper helper;\par
  EXPECT_CALL(foo, Sum(_, _))\par
      .WillOnce(&CalculateSum)\par
      .WillRepeatedly(Invoke(NewPermanentCallback(Sum3, 1)));\par
  EXPECT_CALL(foo, ComplexJob(_))\par
      .WillOnce(Invoke(&helper, &Helper::ComplexJob))\par
      .WillOnce([] \{ {\cf19 return} {\cf17 true}; \})\par
      .WillRepeatedly([]({\cf18 int} x) \{ {\cf19 return} x > 0; \});\par
\par
  foo.Sum(5, 6);         {\cf20 // Invokes CalculateSum(5, 6).}\par
  foo.Sum(2, 3);         {\cf20 // Invokes Sum3(1, 2, 3).}\par
  foo.ComplexJob(10);    {\cf20 // Invokes helper.ComplexJob(10).}\par
  foo.ComplexJob(-1);    {\cf20 // Invokes the inline lambda.}\par
}
\par
The only requirement is that the type of the function, etc must be {\i compatible}  with the signature of the mock function, meaning that the latter's arguments (if it takes any) can be implicitly converted to the corresponding arguments of the former, and the former's return type can be implicitly converted to that of the latter. So, you can invoke something whose type is {\i not}  exactly the same as the mock function, as long as it's safe to do so - nice, huh?\par
Note that:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The action takes ownership of the callback and will delete it when the action itself is destructed.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If the type of a callback is derived from a base callback type {\f2 C} , you need to implicitly cast it to {\f2 C}  to resolve the overloading, e.g.\par
```cpp using testing::Invoke; ... ResultCallback<bool>* is_ok = ...; ... Invoke(is_ok) ...; // This works.\par
BlockingClosure* done = new BlockingClosure; ... Invoke(implicit_cast<Closure*>(done)) ...; // The cast is necessary. ```\par}
\par
\par}
{\bkmkstart AAAAAAAAIN}
{\bkmkend AAAAAAAAIN}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Using Functions with Extra Info as Actions
\par}
{\tc\tcl3 \v Using Functions with Extra Info as Actions}
The function or functor you call using {\f2 Invoke()}  must have the same number of arguments as the mock function you use it for. Sometimes you may have a function that takes more arguments, and you are willing to pass in the extra arguments yourself to fill the gap. You can do this in gMock using callbacks with pre-bound arguments. Here's an example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Invoke;\par
\par
{\cf17 class }MockFoo : {\cf17 public} Foo \{\par
 {\cf17 public}:\par
  MOCK_METHOD({\cf18 char}, DoThis, ({\cf18 int} n), ({\cf17 override}));\par
\};\par
\par
{\cf18 char} SignOfSum({\cf18 int} x, {\cf18 int} y) \{\par
  {\cf17 const} {\cf18 int} sum = x + y;\par
  {\cf19 return} (sum > 0) ? {\cf23 '+'} : (sum < 0) ? {\cf23 '-'} : {\cf23 '0'};\par
\}\par
\par
TEST_F(FooTest, Test) \{\par
  MockFoo foo;\par
\par
  EXPECT_CALL(foo, DoThis(2))\par
      .WillOnce(Invoke(NewPermanentCallback(SignOfSum, 5)));\par
  EXPECT_EQ({\cf23 '+'}, foo.DoThis(2));  {\cf20 // Invokes SignOfSum(5, 2).}\par
\}\par
}
\par}
{\bkmkstart AAAAAAAAIO}
{\bkmkend AAAAAAAAIO}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Invoking a Function/Method/Functor/Lambda/Callback Without Arguments
\par}
{\tc\tcl3 \v Invoking a Function/Method/Functor/Lambda/Callback Without Arguments}
{\f2 Invoke()}  passes the mock function's arguments to the function, etc being invoked such that the callee has the full context of the call to work with. If the invoked function is not interested in some or all of the arguments, it can simply ignore them.\par
Yet, a common pattern is that a test author wants to invoke a function without the arguments of the mock function. She could do that using a wrapper function that throws away the arguments before invoking an underlining nullary function. Needless to say, this can be tedious and obscures the intent of the test.\par
There are two solutions to this problem. First, you can pass any callable of zero args as an action. Alternatively, use {\f2 InvokeWithoutArgs()} , which is like {\f2 Invoke()}  except that it doesn't pass the mock function's arguments to the callee. Here's an example of each:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::InvokeWithoutArgs;\par
\par
{\cf17 class }MockFoo : {\cf17 public} Foo \{\par
 {\cf17 public}:\par
  MOCK_METHOD({\cf18 bool}, ComplexJob, ({\cf18 int} n), ({\cf17 override}));\par
\};\par
\par
{\cf18 bool} Job1() \{ ... \}\par
{\cf18 bool} Job2({\cf18 int} n, {\cf18 char} c) \{ ... \}\par
\par
...\par
  MockFoo foo;\par
  EXPECT_CALL(foo, ComplexJob(_))\par
      .WillOnce([] \{ Job1(); \});\par
      .WillOnce(InvokeWithoutArgs(NewPermanentCallback(Job2, 5, {\cf23 'a'})));\par
\par
  foo.ComplexJob(10);  {\cf20 // Invokes Job1().}\par
  foo.ComplexJob(20);  {\cf20 // Invokes Job2(5, 'a').}\par
}
\par
Note that:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The action takes ownership of the callback and will delete it when the action itself is destructed.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If the type of a callback is derived from a base callback type {\f2 C} , you need to implicitly cast it to {\f2 C}  to resolve the overloading, e.g.\par
```cpp using testing::InvokeWithoutArgs; ... ResultCallback<bool>* is_ok = ...; ... InvokeWithoutArgs(is_ok) ...; // This works.\par
BlockingClosure* done = ...; ... InvokeWithoutArgs(implicit_cast<Closure*>(done)) ...; // The cast is necessary. ```\par}
\par
\par}
{\bkmkstart AAAAAAAAIP}
{\bkmkend AAAAAAAAIP}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Invoking an Argument of the Mock Function
\par}
{\tc\tcl3 \v Invoking an Argument of the Mock Function}
Sometimes a mock function will receive a function pointer, a functor (in other words, a "callable") as an argument, e.g.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 class }MockFoo : {\cf17 public} Foo \{\par
 {\cf17 public}:\par
  MOCK_METHOD({\cf18 bool}, DoThis, ({\cf18 int} n, (ResultCallback1<bool, int>* callback)),\par
              ({\cf17 override}));\par
\};\par
}
\par
and you may want to invoke this callable argument:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
...\par
  MockFoo foo;\par
  EXPECT_CALL(foo, DoThis(_, _))\par
      .WillOnce(...);\par
      {\cf20 // Will execute callback->Run(5), where callback is the}\par
      {\cf20 // second argument DoThis() receives.}\par
}
\par
\{: .callout .note\} NOTE: The section below is legacy documentation from before C++ had lambdas:\par
Arghh, you need to refer to a mock function argument but C++ has no lambda (yet), so you have to define your own action. :-( Or do you really?\par
Well, gMock has an action to solve {\i exactly}  this problem:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid InvokeArgument<N>(arg_1, arg_2, ..., arg_m)\par
}
\par
will invoke the {\f2 N} -th (0-based) argument the mock function receives, with {\f2 arg_1} , {\f2 arg_2} , ..., and {\f2 arg_m} . No matter if the argument is a function pointer, a functor, or a callback. gMock handles them all.\par
With that, you could write:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::InvokeArgument;\par
...\par
  EXPECT_CALL(foo, DoThis(_, _))\par
      .WillOnce(InvokeArgument<1>(5));\par
      {\cf20 // Will execute callback->Run(5), where callback is the}\par
      {\cf20 // second argument DoThis() receives.}\par
}
\par
What if the callable takes an argument by reference? No problem - just wrap it inside {\f2 std::ref()} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ...\par
MOCK_METHOD({\cf18 bool}, Bar,\par
            ((ResultCallback2<bool, int, const Helper&>* callback)),\par
            ({\cf17 override}));\par
...\par
using ::testing::_;\par
using ::testing::InvokeArgument;\par
...\par
MockFoo foo;\par
Helper helper;\par
...\par
EXPECT_CALL(foo, Bar(_))\par
    .WillOnce(InvokeArgument<0>(5, std::ref(helper)));\par
    {\cf20 // std::ref(helper) guarantees that a reference to helper, not a copy of}\par
    {\cf20 // it, will be passed to the callback.}\par
}
\par
What if the callable takes an argument by reference and we do {\b not}  wrap the argument in {\f2 std::ref()} ? Then {\f2 InvokeArgument()}  will {\i make a copy}  of the argument, and pass a {\i reference to the copy} , instead of a reference to the original value, to the callable. This is especially handy when the argument is a temporary value:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ...\par
MOCK_METHOD({\cf18 bool}, DoThat, ({\cf18 bool} (*f)({\cf17 const} {\cf18 double}& x, {\cf17 const} {\cf18 string}& s)),\par
            ({\cf17 override}));\par
...\par
using ::testing::_;\par
using ::testing::InvokeArgument;\par
...\par
MockFoo foo;\par
...\par
EXPECT_CALL(foo, DoThat(_))\par
    .WillOnce(InvokeArgument<0>(5.0, {\cf18 string}({\cf22 "Hi"})));\par
    {\cf20 // Will execute (*f)(5.0, string("Hi")), where f is the function pointer}\par
    {\cf20 // DoThat() receives.  Note that the values 5.0 and string("Hi") are}\par
    {\cf20 // temporary and dead once the EXPECT_CALL() statement finishes.  Yet}\par
    {\cf20 // it's fine to perform this action later, since a copy of the values}\par
    {\cf20 // are kept inside the InvokeArgument action.}\par
}
\par}
{\bkmkstart AAAAAAAAIQ}
{\bkmkend AAAAAAAAIQ}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Ignoring an Action's Result
\par}
{\tc\tcl3 \v Ignoring an Action's Result}
Sometimes you have an action that returns {\i something} , but you need an action that returns {\f2 void}  (perhaps you want to use it in a mock function that returns {\f2 void} , or perhaps it needs to be used in {\f2 DoAll()}  and it's not the last in the list). {\f2 IgnoreResult()}  lets you do that. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::DoAll;\par
using ::testing::IgnoreResult;\par
using ::testing::Return;\par
\par
{\cf18 int} Process({\cf17 const} MyData& data);\par
{\cf18 string} DoSomething();\par
\par
{\cf17 class }MockFoo : {\cf17 public} Foo \{\par
 {\cf17 public}:\par
  MOCK_METHOD({\cf18 void}, Abc, ({\cf17 const} MyData& data), ({\cf17 override}));\par
  MOCK_METHOD({\cf18 bool}, Xyz, (), ({\cf17 override}));\par
\};\par
\par
  ...\par
  MockFoo foo;\par
  EXPECT_CALL(foo, Abc(_))\par
      {\cf20 // .WillOnce(Invoke(Process));}\par
      {\cf20 // The above line won't compile as Process() returns int but Abc() needs}\par
      {\cf20 // to return void.}\par
      .WillOnce(IgnoreResult(Process));\par
  EXPECT_CALL(foo, Xyz())\par
      .WillOnce(DoAll(IgnoreResult(DoSomething),\par
                      {\cf20 // Ignores the string DoSomething() returns.}\par
                      Return({\cf17 true})));\par
}
\par
Note that you {\b cannot}  use {\f2 IgnoreResult()}  on an action that already returns {\f2 void} . Doing so will lead to ugly compiler errors.\par}
{\bkmkstart AAAAAAAAIR}
{\bkmkend AAAAAAAAIR}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Selecting an Action's Arguments
\par}
{\tc\tcl3 \v Selecting an Action's Arguments}
Say you have a mock function {\f2 Foo()}  that takes seven arguments, and you have a custom action that you want to invoke when {\f2 Foo()}  is called. Trouble is, the custom action only wants three arguments:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
...\par
  MOCK_METHOD({\cf18 bool}, Foo,\par
              ({\cf18 bool} visible, {\cf17 const} {\cf18 string}& name, {\cf18 int} x, {\cf18 int} y,\par
               ({\cf17 const} map<pair<int, int>>), {\cf18 double}& weight, {\cf18 double} min_weight,\par
               {\cf18 double} max_wight));\par
...\par
bool IsVisibleInQuadrant1({\cf18 bool} visible, {\cf18 int} x, {\cf18 int} y) \{\par
  {\cf19 return} visible && x >= 0 && y >= 0;\par
\}\par
...\par
  EXPECT_CALL(mock, Foo)\par
      .WillOnce(Invoke(IsVisibleInQuadrant1));  {\cf20 // Uh, won't compile. :-(}\par
}
\par
To please the compiler God, you need to define an "adaptor" that has the same signature as {\f2 Foo()}  and calls the custom action with the right arguments:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
...\par
bool MyIsVisibleInQuadrant1({\cf18 bool} visible, {\cf17 const} {\cf18 string}& name, {\cf18 int} x, {\cf18 int} y,\par
                            {\cf17 const} map<pair<int, int>, {\cf18 double}>& weight,\par
                            {\cf18 double} min_weight, {\cf18 double} max_wight) \{\par
  {\cf19 return} IsVisibleInQuadrant1(visible, x, y);\par
\}\par
...\par
  EXPECT_CALL(mock, Foo)\par
      .WillOnce(Invoke(MyIsVisibleInQuadrant1));  {\cf20 // Now it works.}\par
}
\par
But isn't this awkward?\par
gMock provides a generic {\i action adaptor} , so you can spend your time minding more important business than writing your own adaptors. Here's the syntax:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid WithArgs<N1, N2, ..., Nk>(action)\par
}
\par
creates an action that passes the arguments of the mock function at the given indices (0-based) to the inner {\f2 action}  and performs it. Using {\f2 WithArgs} , our original example can be written as:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
using ::testing::WithArgs;\par
...\par
  EXPECT_CALL(mock, Foo)\par
      .WillOnce(WithArgs<0, 2, 3>(Invoke(IsVisibleInQuadrant1)));  {\cf20 // No need to define your own adaptor.}\par
}
\par
For better readability, gMock also gives you:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 WithoutArgs(action)}  when the inner {\f2 action}  takes {\i no}  argument, and\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 WithArg<N>(action)}  (no {\f2 s}  after {\f2 Arg} ) when the inner {\f2 action}  takes {\i one}  argument.\par}
\par
As you may have realized, {\f2 InvokeWithoutArgs(...)}  is just syntactic sugar for {\f2 WithoutArgs(Invoke(...))} .\par
Here are more tips:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The inner action used in {\f2 WithArgs}  and friends does not have to be {\f2 Invoke()}  \'96 it can be anything.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You can repeat an argument in the argument list if necessary, e.g. {\f2 WithArgs<2, 3, 3, 5>(...)} .\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You can change the order of the arguments, e.g. {\f2 WithArgs<3, 2, 1>(...)} .\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The types of the selected arguments do {\i not}  have to match the signature of the inner action exactly. It works as long as they can be implicitly converted to the corresponding arguments of the inner action. For example, if the 4-th argument of the mock function is an {\f2 int}  and {\f2 my_action}  takes a {\f2 double} , {\f2 WithArg<4>(my_action)}  will work.\par}
\par
\par}
{\bkmkstart AAAAAAAAIS}
{\bkmkend AAAAAAAAIS}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Ignoring Arguments in Action Functions
\par}
{\tc\tcl3 \v Ignoring Arguments in Action Functions}
The {\b selecting-an-action's-arguments} recipe showed us one way to make a mock function and an action with incompatible argument lists fit together. The downside is that wrapping the action in {\f2 WithArgs<...>()}  can get tedious for people writing the tests.\par
If you are defining a function (or method, functor, lambda, callback) to be used with {\f2 Invoke*()} , and you are not interested in some of its arguments, an alternative to {\f2 WithArgs}  is to declare the uninteresting arguments as {\f2 Unused} . This makes the definition less cluttered and less fragile in case the types of the uninteresting arguments change. It could also increase the chance the action function can be reused. For example, given\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 public}:\par
 MOCK_METHOD({\cf18 double}, Foo, {\cf18 double}({\cf17 const} {\cf18 string}& label, {\cf18 double} x, {\cf18 double} y),\par
             ({\cf17 override}));\par
 MOCK_METHOD({\cf18 double}, Bar, ({\cf18 int} index, {\cf18 double} x, {\cf18 double} y), ({\cf17 override}));\par
}
\par
instead of\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
\par
{\cf18 double} DistanceToOriginWithLabel({\cf17 const} {\cf18 string}& label, {\cf18 double} x, {\cf18 double} y) \{\par
  {\cf19 return} sqrt(x*x + y*y);\par
\}\par
{\cf18 double} DistanceToOriginWithIndex({\cf18 int} index, {\cf18 double} x, {\cf18 double} y) \{\par
  {\cf19 return} sqrt(x*x + y*y);\par
\}\par
...\par
  EXPECT_CALL(mock, Foo({\cf22 "abc"}, _, _))\par
      .WillOnce(Invoke(DistanceToOriginWithLabel));\par
  EXPECT_CALL(mock, Bar(5, _, _))\par
      .WillOnce(Invoke(DistanceToOriginWithIndex));\par
}
\par
you could write\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
using ::testing::Unused;\par
\par
{\cf18 double} DistanceToOrigin(Unused, {\cf18 double} x, {\cf18 double} y) \{\par
  {\cf19 return} sqrt(x*x + y*y);\par
\}\par
...\par
  EXPECT_CALL(mock, Foo({\cf22 "abc"}, _, _))\par
      .WillOnce(Invoke(DistanceToOrigin));\par
  EXPECT_CALL(mock, Bar(5, _, _))\par
      .WillOnce(Invoke(DistanceToOrigin));\par
}
\par}
{\bkmkstart AAAAAAAAIT}
{\bkmkend AAAAAAAAIT}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Sharing Actions
\par}
{\tc\tcl3 \v Sharing Actions}
Just like matchers, a gMock action object consists of a pointer to a ref-counted implementation object. Therefore copying actions is also allowed and very efficient. When the last action that references the implementation object dies, the implementation object will be deleted.\par
If you have some complex action that you want to use again and again, you may not have to build it from scratch every time. If the action doesn't have an internal state (i.e. if it always does the same thing no matter how many times it has been called), you can assign it to an action variable and use that variable repeatedly. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Action;\par
using ::testing::DoAll;\par
using ::testing::Return;\par
using ::testing::SetArgPointee;\par
...\par
  Action<bool({\cf18 int}*)> set_flag = DoAll(SetArgPointee<0>(5),\par
                                      Return({\cf17 true}));\par
  ... use set_flag in .WillOnce() and .WillRepeatedly() ...\par
}
\par
However, if the action has its own state, you may be surprised if you share the action object. Suppose you have an action factory {\f2 IncrementCounter(init)}  which creates an action that increments and returns a counter whose initial value is {\f2 init} , using two actions created from the same expression and using a shared action will exhibit different behaviors. Example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(foo, DoThis())\par
    .WillRepeatedly(IncrementCounter(0));\par
EXPECT_CALL(foo, DoThat())\par
    .WillRepeatedly(IncrementCounter(0));\par
foo.DoThis();  {\cf20 // Returns 1.}\par
foo.DoThis();  {\cf20 // Returns 2.}\par
foo.DoThat();  {\cf20 // Returns 1 - Blah() uses a different}\par
               {\cf20 // counter than Bar()'s.}\par
}
\par
versus\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Action;\par
...\par
  Action<int()> increment = IncrementCounter(0);\par
  EXPECT_CALL(foo, DoThis())\par
      .WillRepeatedly(increment);\par
  EXPECT_CALL(foo, DoThat())\par
      .WillRepeatedly(increment);\par
  foo.DoThis();  {\cf20 // Returns 1.}\par
  foo.DoThis();  {\cf20 // Returns 2.}\par
  foo.DoThat();  {\cf20 // Returns 3 - the counter is shared.}\par
}
\par}
{\bkmkstart AAAAAAAAIU}
{\bkmkend AAAAAAAAIU}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Testing Asynchronous Behavior
\par}
{\tc\tcl3 \v Testing Asynchronous Behavior}
One oft-encountered problem with gMock is that it can be hard to test asynchronous behavior. Suppose you had a {\f2 EventQueue}  class that you wanted to test, and you created a separate {\f2 EventDispatcher}  interface so that you could easily mock it out. However, the implementation of the class fired all the events on a background thread, which made test timings difficult. You could just insert {\f2 sleep()}  statements and hope for the best, but that makes your test behavior nondeterministic. A better way is to use gMock actions and {\f2 Notification}  objects to force your asynchronous test to behave synchronously.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 class }MockEventDispatcher : {\cf17 public} EventDispatcher \{\par
  MOCK_METHOD({\cf18 bool}, DispatchEvent, (int32), ({\cf17 override}));\par
\};\par
\par
TEST(EventQueueTest, EnqueueEventTest) \{\par
  MockEventDispatcher mock_event_dispatcher;\par
  EventQueue event_queue(&mock_event_dispatcher);\par
\par
  {\cf17 const} int32 kEventId = 321;\par
  absl::Notification done;\par
  EXPECT_CALL(mock_event_dispatcher, DispatchEvent(kEventId))\par
      .WillOnce([&done] \{ done.Notify(); \});\par
\par
  event_queue.EnqueueEvent(kEventId);\par
  done.WaitForNotification();\par
\}\par
}
\par
In the example above, we set our normal gMock expectations, but then add an additional action to notify the {\f2 Notification}  object. Now we can just call {\f2 Notification::WaitForNotification()}  in the main thread to wait for the asynchronous call to finish. After that, our test suite is complete and we can safely exit.\par
\{: .callout .note\} Note: this example has a downside: namely, if the expectation is not satisfied, our test will run forever. It will eventually time-out and fail, but it will take longer and be slightly harder to debug. To alleviate this problem, you can use {\f2 WaitForNotificationWithTimeout(ms)}  instead of {\f2 WaitForNotification()} .\par}
\par}
{\bkmkstart AAAAAAAAIV}
{\bkmkend AAAAAAAAIV}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Misc Recipes on Using gMock
\par}
{\tc\tcl2 \v Misc Recipes on Using gMock}
{\bkmkstart AAAAAAAAIW}
{\bkmkend AAAAAAAAIW}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Mocking Methods That Use Move-Only Types
\par}
{\tc\tcl3 \v Mocking Methods That Use Move-Only Types}
C++11 introduced {\i move-only types} . A move-only-typed value can be moved from one object to another, but cannot be copied. {\f2 std::unique_ptr<T>}  is probably the most commonly used move-only type.\par
Mocking a method that takes and/or returns move-only types presents some challenges, but nothing insurmountable. This recipe shows you how you can do it. Note that the support for move-only method arguments was only introduced to gMock in April 2017; in older code, you may find more complex {\b workarounds} for lack of this feature.\par
Let\'92s say we are working on a fictional project that lets one post and share snippets called \'93buzzes\'94. Your code uses these types:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 enum class} AccessLevel \{ kInternal, kPublic \};\par
\par
{\cf17 class }Buzz \{\par
 {\cf17 public}:\par
  {\cf17 explicit} Buzz(AccessLevel access) \{ ... \}\par
  ...\par
\};\par
\par
{\cf17 class }Buzzer \{\par
 {\cf17 public}:\par
  {\cf17 virtual} ~Buzzer() \{\}\par
  {\cf17 virtual} std::unique_ptr<Buzz> MakeBuzz(StringPiece text) = 0;\par
  {\cf17 virtual} {\cf18 bool} ShareBuzz(std::unique_ptr<Buzz> buzz, int64_t timestamp) = 0;\par
  ...\par
\};\par
}
\par
A {\f2 Buzz}  object represents a snippet being posted. A class that implements the {\f2 Buzzer}  interface is capable of creating and sharing {\f2 Buzz} es. Methods in {\f2 Buzzer}  may return a {\f2 unique_ptr<Buzz>}  or take a {\f2 unique_ptr<Buzz>} . Now we need to mock {\f2 Buzzer}  in our tests.\par
To mock a method that accepts or returns move-only types, you just use the familiar {\f2 MOCK_METHOD}  syntax as usual:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 class }MockBuzzer : {\cf17 public} Buzzer \{\par
 {\cf17 public}:\par
  MOCK_METHOD(std::unique_ptr<Buzz>, MakeBuzz, (StringPiece text), ({\cf17 override}));\par
  MOCK_METHOD({\cf18 bool}, ShareBuzz, (std::unique_ptr<Buzz> buzz, int64_t timestamp),\par
              ({\cf17 override}));\par
\};\par
}
\par
Now that we have the mock class defined, we can use it in tests. In the following code examples, we assume that we have defined a {\f2 MockBuzzer}  object named {\f2 mock_buzzer_} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MockBuzzer mock_buzzer_;\par
}
\par
First let\'92s see how we can set expectations on the {\f2 MakeBuzz()}  method, which returns a {\f2 unique_ptr<Buzz>} .\par
As usual, if you set an expectation without an action (i.e. the {\f2 .WillOnce()}  or {\f2 .WillRepeatedly()}  clause), when that expectation fires, the default action for that method will be taken. Since {\f2 unique_ptr<>}  has a default constructor that returns a null {\f2 unique_ptr} , that\'92s what you\'92ll get if you don\'92t specify an action:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf20 // Use the default action.}\par
EXPECT_CALL(mock_buzzer_, MakeBuzz({\cf22 "hello"}));\par
\par
{\cf20 // Triggers the previous EXPECT_CALL.}\par
EXPECT_EQ({\cf17 nullptr}, mock_buzzer_.MakeBuzz({\cf22 "hello"}));\par
}
\par
If you are not happy with the default action, you can tweak it as usual; see {\b Setting Default Actions}.\par
If you just need to return a pre-defined move-only value, you can use the {\f2 Return(ByMove(...))}  action:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf20 // When this fires, the unique_ptr<> specified by ByMove(...) will}\par
{\cf20 // be returned.}\par
EXPECT_CALL(mock_buzzer_, MakeBuzz({\cf22 "world"}))\par
    .WillOnce(Return(ByMove(MakeUnique<Buzz>(AccessLevel::kInternal))));\par
\par
EXPECT_NE({\cf17 nullptr}, mock_buzzer_.MakeBuzz({\cf22 "world"}));\par
}
\par
Note that {\f2 ByMove()}  is essential here - if you drop it, the code won\'92t compile.\par
Quiz time! What do you think will happen if a {\f2 Return(ByMove(...))}  action is performed more than once (e.g. you write {\f2 ... .WillRepeatedly(Return(ByMove(...)));} )? Come think of it, after the first time the action runs, the source value will be consumed (since it\'92s a move-only value), so the next time around, there\'92s no value to move from \'96 you\'92ll get a run-time error that {\f2 Return(ByMove(...))}  can only be run once.\par
If you need your mock method to do more than just moving a pre-defined value, remember that you can always use a lambda or a callable object, which can do pretty much anything you want:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(mock_buzzer_, MakeBuzz({\cf22 "x"}))\par
    .WillRepeatedly([](StringPiece text) \{\par
      {\cf19 return} MakeUnique<Buzz>(AccessLevel::kInternal);\par
    \});\par
\par
EXPECT_NE({\cf17 nullptr}, mock_buzzer_.MakeBuzz({\cf22 "x"}));\par
EXPECT_NE({\cf17 nullptr}, mock_buzzer_.MakeBuzz({\cf22 "x"}));\par
}
\par
Every time this {\f2 EXPECT_CALL}  fires, a new {\f2 unique_ptr<Buzz>}  will be created and returned. You cannot do this with {\f2 Return(ByMove(...))} .\par
That covers returning move-only values; but how do we work with methods accepting move-only arguments? The answer is that they work normally, although some actions will not compile when any of method's arguments are move-only. You can always use {\f2 Return} , or a {\b lambda or functor}:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Unused;\par
\par
EXPECT_CALL(mock_buzzer_, ShareBuzz(NotNull(), _)).WillOnce(Return({\cf17 true}));\par
EXPECT_TRUE(mock_buzzer_.ShareBuzz(MakeUnique<Buzz>(AccessLevel::kInternal)),\par
            0);\par
\par
EXPECT_CALL(mock_buzzer_, ShareBuzz(_, _)).WillOnce(\par
    [](std::unique_ptr<Buzz> buzz, Unused) \{ {\cf19 return} buzz != {\cf17 nullptr}; \});\par
EXPECT_FALSE(mock_buzzer_.ShareBuzz({\cf17 nullptr}, 0));\par
}
\par
Many built-in actions ({\f2 WithArgs} , {\f2 WithoutArgs} ,{\f2 DeleteArg} , {\f2 SaveArg} , ...) could in principle support move-only arguments, but the support for this is not implemented yet. If this is blocking you, please file a bug.\par
A few actions (e.g. {\f2 DoAll} ) copy their arguments internally, so they can never work with non-copyable objects; you'll have to use functors instead.\par
{\bkmkstart AAAAAAAAIX}
{\bkmkend AAAAAAAAIX}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Legacy workarounds for move-only types
\par}
{\tc\tcl4 \v Legacy workarounds for move-only types}
Support for move-only function arguments was only introduced to gMock in April of 2017. In older code, you may encounter the following workaround for the lack of this feature (it is no longer necessary - we're including it just for reference):\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 class }MockBuzzer : {\cf17 public} Buzzer \{\par
 {\cf17 public}:\par
  MOCK_METHOD({\cf18 bool}, DoShareBuzz, (Buzz* buzz, Time timestamp));\par
  {\cf18 bool} ShareBuzz(std::unique_ptr<Buzz> buzz, Time timestamp){\cf17  override }\{\par
    {\cf19 return} DoShareBuzz(buzz.get(), timestamp);\par
  \}\par
\};\par
}
\par
The trick is to delegate the {\f2 ShareBuzz()}  method to a mock method (let\'92s call it {\f2 DoShareBuzz()} ) that does not take move-only parameters. Then, instead of setting expectations on {\f2 ShareBuzz()} , you set them on the {\f2 DoShareBuzz()}  mock method:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MockBuzzer mock_buzzer_;\par
EXPECT_CALL(mock_buzzer_, DoShareBuzz(NotNull(), _));\par
\par
{\cf20 // When one calls ShareBuzz() on the MockBuzzer like this, the call is}\par
{\cf20 // forwarded to DoShareBuzz(), which is mocked.  Therefore this statement}\par
{\cf20 // will trigger the above EXPECT_CALL.}\par
mock_buzzer_.ShareBuzz(MakeUnique<Buzz>(AccessLevel::kInternal), 0);\par
}
\par}
\par}
{\bkmkstart AAAAAAAAIY}
{\bkmkend AAAAAAAAIY}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Making the Compilation Faster
\par}
{\tc\tcl3 \v Making the Compilation Faster}
Believe it or not, the {\i vast majority}  of the time spent on compiling a mock class is in generating its constructor and destructor, as they perform non-trivial tasks (e.g. verification of the expectations). What's more, mock methods with different signatures have different types and thus their constructors/destructors need to be generated by the compiler separately. As a result, if you mock many different types of methods, compiling your mock class can get really slow.\par
If you are experiencing slow compilation, you can move the definition of your mock class' constructor and destructor out of the class body and into a {\f2 .cc}  file. This way, even if you {\f2 #include}  your mock class in N files, the compiler only needs to generate its constructor and destructor once, resulting in a much faster compilation.\par
Let's illustrate the idea using an example. Here's the definition of a mock class before applying this recipe:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf20 // File mock_foo.h.}\par
...\par
class MockFoo : {\cf17 public} Foo \{\par
 {\cf17 public}:\par
  {\cf20 // Since we don't declare the constructor or the destructor,}\par
  {\cf20 // the compiler will generate them in every translation unit}\par
  {\cf20 // where this mock class is used.}\par
\par
  MOCK_METHOD({\cf18 int}, DoThis, (), ({\cf17 override}));\par
  MOCK_METHOD({\cf18 bool}, DoThat, ({\cf17 const} {\cf18 char}* str), ({\cf17 override}));\par
  ... more mock methods ...\par
\};\par
}
\par
After the change, it would look like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf20 // File mock_foo.h.}\par
...\par
class MockFoo : {\cf17 public} Foo \{\par
 {\cf17 public}:\par
  {\cf20 // The constructor and destructor are declared, but not defined, here.}\par
  MockFoo();\par
  {\cf17 virtual} ~MockFoo();\par
\par
  MOCK_METHOD({\cf18 int}, DoThis, (), ({\cf17 override}));\par
  MOCK_METHOD({\cf18 bool}, DoThat, ({\cf17 const} {\cf18 char}* str), ({\cf17 override}));\par
  ... more mock methods ...\par
\};\par
}
\par
and\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf20 // File mock_foo.cc.}\par
{\cf21 #include "path/to/mock_foo.h"}\par
\par
{\cf20 // The definitions may appear trivial, but the functions actually do a}\par
{\cf20 // lot of things through the constructors/destructors of the member}\par
{\cf20 // variables used to implement the mock methods.}\par
MockFoo::MockFoo() \{\}\par
MockFoo::~MockFoo() \{\}\par
}
\par}
{\bkmkstart AAAAAAAAIZ}
{\bkmkend AAAAAAAAIZ}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Forcing a Verification
\par}
{\tc\tcl3 \v Forcing a Verification}
When it's being destroyed, your friendly mock object will automatically verify that all expectations on it have been satisfied, and will generate googletest failures if not. This is convenient as it leaves you with one less thing to worry about. That is, unless you are not sure if your mock object will be destroyed.\par
How could it be that your mock object won't eventually be destroyed? Well, it might be created on the heap and owned by the code you are testing. Suppose there's a bug in that code and it doesn't delete the mock object properly - you could end up with a passing test when there's actually a bug.\par
Using a heap checker is a good idea and can alleviate the concern, but its implementation is not 100% reliable. So, sometimes you do want to {\i force}  gMock to verify a mock object before it is (hopefully) destructed. You can do this with {\f2 Mock::VerifyAndClearExpectations(&mock_object)} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(MyServerTest, ProcessesRequest) \{\par
  using ::testing::Mock;\par
\par
  MockFoo* {\cf17 const} foo = {\cf17 new} MockFoo;\par
  EXPECT_CALL(*foo, ...)...;\par
  {\cf20 // ... other expectations ...}\par
\par
  {\cf20 // server now owns foo.}\par
  MyServer server(foo);\par
  server.ProcessRequest(...);\par
\par
  {\cf20 // In case that server's destructor will forget to delete foo,}\par
  {\cf20 // this will verify the expectations anyway.}\par
  Mock::VerifyAndClearExpectations(foo);\par
\}  {\cf20 // server is destroyed when it goes out of scope here.}\par
}
\par
\{: .callout .tip\} {\b Tip:}  The {\f2 Mock::VerifyAndClearExpectations()}  function returns a {\f2 bool}  to indicate whether the verification was successful ({\f2 true}  for yes), so you can wrap that function call inside a {\f2 ASSERT_TRUE()}  if there is no point going further when the verification has failed.\par
Do not set new expectations after verifying and clearing a mock after its use. Setting expectations after code that exercises the mock has undefined behavior. See {\f2 Using Mocks in Tests} for more information.\par}
{\bkmkstart AAAAAAAAJA}
{\bkmkend AAAAAAAAJA}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Using Checkpoints
\par}
{\tc\tcl3 \v Using Checkpoints}
Sometimes you might want to test a mock object's behavior in phases whose sizes are each manageable, or you might want to set more detailed expectations about which API calls invoke which mock functions.\par
A technique you can use is to put the expectations in a sequence and insert calls to a dummy "checkpoint" function at specific places. Then you can verify that the mock function calls do happen at the right time. For example, if you are exercising the code:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Foo(1);\par
Foo(2);\par
Foo(3);\par
}
\par
and want to verify that {\f2 Foo(1)}  and {\f2 Foo(3)}  both invoke {\f2 mock.Bar("a")} , but {\f2 Foo(2)}  doesn't invoke anything, you can write:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::MockFunction;\par
\par
TEST(FooTest, InvokesBarCorrectly) \{\par
  MyMock mock;\par
  {\cf20 // Class MockFunction<F> has exactly one mock method.  It is named}\par
  {\cf20 // Call() and has type F.}\par
  MockFunction<void({\cf18 string} check_point_name)> check;\par
  \{\par
    InSequence s;\par
\par
    EXPECT_CALL(mock, Bar({\cf22 "a"}));\par
    EXPECT_CALL(check, Call({\cf22 "1"}));\par
    EXPECT_CALL(check, Call({\cf22 "2"}));\par
    EXPECT_CALL(mock, Bar({\cf22 "a"}));\par
  \}\par
  Foo(1);\par
  check.Call({\cf22 "1"});\par
  Foo(2);\par
  check.Call({\cf22 "2"});\par
  Foo(3);\par
\}\par
}
\par
The expectation spec says that the first {\f2 Bar("a")}  call must happen before checkpoint "1", the second {\f2 Bar("a")}  call must happen after checkpoint "2", and nothing should happen between the two checkpoints. The explicit checkpoints make it clear which {\f2 Bar("a")}  is called by which call to {\f2 Foo()} .\par}
{\bkmkstart AAAAAAAAJB}
{\bkmkend AAAAAAAAJB}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Mocking Destructors
\par}
{\tc\tcl3 \v Mocking Destructors}
Sometimes you want to make sure a mock object is destructed at the right time, e.g. after {\f2 bar->A()}  is called but before {\f2 bar->B()}  is called. We already know that you can specify constraints on the {\b order} of mock function calls, so all we need to do is to mock the destructor of the mock function.\par
This sounds simple, except for one problem: a destructor is a special function with special syntax and special semantics, and the {\f2 MOCK_METHOD}  macro doesn't work for it:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MOCK_METHOD({\cf18 void}, ~MockFoo, ());  {\cf20 // Won't compile!}\par
}
\par
The good news is that you can use a simple pattern to achieve the same effect. First, add a mock function {\f2 Die()}  to your mock class and call it in the destructor, like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 class }MockFoo : {\cf17 public} Foo \{\par
  ...\par
  {\cf20 // Add the following two lines to the mock class.}\par
  MOCK_METHOD({\cf18 void}, Die, ());\par
  ~MockFoo(){\cf17  override }\{ Die(); \}\par
\};\par
}
\par
(If the name {\f2 Die()}  clashes with an existing symbol, choose another name.) Now, we have translated the problem of testing when a {\f2 {\b MockFoo}}  object dies to testing when its {\f2 Die()}  method is called:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MockFoo* foo = {\cf17 new} MockFoo;\par
MockBar* bar = {\cf17 new} MockBar;\par
...\par
\{\par
  InSequence s;\par
\par
  {\cf20 // Expects *foo to die after bar->A() and before bar->B().}\par
  EXPECT_CALL(*bar, A());\par
  EXPECT_CALL(*foo, Die());\par
  EXPECT_CALL(*bar, B());\par
\}\par
}
\par
And that's that.\par}
{\bkmkstart AAAAAAAAJC}
{\bkmkend AAAAAAAAJC}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Using gMock and Threads
\par}
{\tc\tcl3 \v Using gMock and Threads}
In a {\b unit}  test, it's best if you could isolate and test a piece of code in a single-threaded context. That avoids race conditions and dead locks, and makes debugging your test much easier.\par
Yet most programs are multi-threaded, and sometimes to test something we need to pound on it from more than one thread. gMock works for this purpose too.\par
Remember the steps for using a mock:\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create a mock object {\f2 foo} .\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
2.\tab Set its default actions and expectations using {\f2 ON_CALL()}  and {\f2 EXPECT_CALL()} .\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
3.\tab The code under test calls methods of {\f2 foo} .\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
4.\tab Optionally, verify and reset the mock.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
5.\tab Destroy the mock yourself, or let the code under test destroy it. The destructor will automatically verify it.\par}
\par
If you follow the following simple rules, your mocks and threads can live happily together:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Execute your {\i test code}  (as opposed to the code being tested) in {\i one}  thread. This makes your test easy to follow.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Obviously, you can do step #1 without locking.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
When doing step #2 and #5, make sure no other thread is accessing {\f2 foo} . Obvious too, huh?\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#3 and #4 can be done either in one thread or in multiple threads - anyway you want. gMock takes care of the locking, so you don't have to do any - unless required by your test logic.\par}
\par
If you violate the rules (for example, if you set expectations on a mock while another thread is calling its methods), you get undefined behavior. That's not fun, so don't do it.\par
gMock guarantees that the action for a mock function is done in the same thread that called the mock function. For example, in\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(mock, Foo(1))\par
    .WillOnce(action1);\par
EXPECT_CALL(mock, Foo(2))\par
    .WillOnce(action2);\par
}
\par
if {\f2 Foo(1)}  is called in thread 1 and {\f2 Foo(2)}  is called in thread 2, gMock will execute {\f2 action1}  in thread 1 and {\f2 action2}  in thread 2.\par
gMock does {\i not}  impose a sequence on actions performed in different threads (doing so may create deadlocks as the actions may need to cooperate). This means that the execution of {\f2 action1}  and {\f2 action2}  in the above example {\i may}  interleave. If this is a problem, you should add proper synchronization logic to {\f2 action1}  and {\f2 action2}  to make the test thread-safe.\par
Also, remember that {\f2 DefaultValue<T>}  is a global resource that potentially affects {\i all}  living mock objects in your program. Naturally, you won't want to mess with it from multiple threads or when there still are mocks in action.\par}
{\bkmkstart AAAAAAAAJD}
{\bkmkend AAAAAAAAJD}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Controlling How Much Information gMock Prints
\par}
{\tc\tcl3 \v Controlling How Much Information gMock Prints}
When gMock sees something that has the potential of being an error (e.g. a mock function with no expectation is called, a.k.a. an uninteresting call, which is allowed but perhaps you forgot to explicitly ban the call), it prints some warning messages, including the arguments of the function, the return value, and the stack trace. Hopefully this will remind you to take a look and see if there is indeed a problem.\par
Sometimes you are confident that your tests are correct and may not appreciate such friendly messages. Some other times, you are debugging your tests or learning about the behavior of the code you are testing, and wish you could observe every mock call that happens (including argument values, the return value, and the stack trace). Clearly, one size doesn't fit all.\par
You can control how much gMock tells you using the {\f2 --gmock_verbose=LEVEL}  command-line flag, where {\f2 LEVEL}  is a string with three possible values:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 info} : gMock will print all informational messages, warnings, and errors (most verbose). At this setting, gMock will also log any calls to the {\f2 ON_CALL/EXPECT_CALL}  macros. It will include a stack trace in "uninteresting call" warnings.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 warning} : gMock will print both warnings and errors (less verbose); it will omit the stack traces in "uninteresting call" warnings. This is the default.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 error} : gMock will print errors only (least verbose).\par}
\par
Alternatively, you can adjust the value of that flag from within your tests like so:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::FLAGS_gmock_verbose = {\cf22 "error"};\par
}
\par
If you find gMock printing too many stack frames with its informational or warning messages, remember that you can control their amount with the {\f2 --gtest_stack_trace_depth=max_depth}  flag.\par
Now, judiciously use the right flag to enable gMock serve you better!\par}
{\bkmkstart AAAAAAAAJE}
{\bkmkend AAAAAAAAJE}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Gaining Super Vision into Mock Calls
\par}
{\tc\tcl3 \v Gaining Super Vision into Mock Calls}
You have a test using gMock. It fails: gMock tells you some expectations aren't satisfied. However, you aren't sure why: Is there a typo somewhere in the matchers? Did you mess up the order of the {\f2 EXPECT_CALL} s? Or is the code under test doing something wrong? How can you find out the cause?\par
Won't it be nice if you have X-ray vision and can actually see the trace of all {\f2 EXPECT_CALL} s and mock method calls as they are made? For each call, would you like to see its actual argument values and which {\f2 EXPECT_CALL}  gMock thinks it matches? If you still need some help to figure out who made these calls, how about being able to see the complete stack trace at each mock call?\par
You can unlock this power by running your test with the {\f2 --gmock_verbose=info}  flag. For example, given the test program:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf21 #include "gmock/gmock.h"}\par
\par
{\cf17 using }testing::_;\par
{\cf17 using }testing::HasSubstr;\par
{\cf17 using }testing::Return;\par
\par
{\cf17 class }MockFoo \{\par
 {\cf17 public}:\par
  MOCK_METHOD({\cf18 void}, F, ({\cf17 const} {\cf18 string}& x, {\cf17 const} {\cf18 string}& y));\par
\};\par
\par
TEST(Foo, Bar) \{\par
  MockFoo mock;\par
  EXPECT_CALL(mock, F(_, _)).WillRepeatedly(Return());\par
  EXPECT_CALL(mock, F({\cf22 "a"}, {\cf22 "b"}));\par
  EXPECT_CALL(mock, F({\cf22 "c"}, HasSubstr({\cf22 "d"})));\par
\par
  mock.F({\cf22 "a"}, {\cf22 "good"});\par
  mock.F({\cf22 "a"}, {\cf22 "b"});\par
\}\par
}
\par
if you run it with {\f2 --gmock_verbose=info} , you will see this output:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid [ RUN       ] Foo.Bar\par
\par
foo_test.cc:14: EXPECT_CALL(mock, F(_, _)) invoked\par
Stack trace: ...\par
\par
foo_test.cc:15: EXPECT_CALL(mock, F("a", "b")) invoked\par
Stack trace: ...\par
\par
foo_test.cc:16: EXPECT_CALL(mock, F("c", HasSubstr("d"))) invoked\par
Stack trace: ...\par
\par
foo_test.cc:14: Mock function call matches EXPECT_CALL(mock, F(_, _))...\par
    Function call: F(@0x7fff7c8dad40"a",@0x7fff7c8dad10"good")\par
Stack trace: ...\par
\par
foo_test.cc:15: Mock function call matches EXPECT_CALL(mock, F("a", "b"))...\par
    Function call: F(@0x7fff7c8dada0"a",@0x7fff7c8dad70"b")\par
Stack trace: ...\par
\par
foo_test.cc:16: Failure\par
Actual function call count doesn't match EXPECT_CALL(mock, F("c", HasSubstr("d")))...\par
         Expected: to be called once\par
           Actual: never called - unsatisfied and active\par
[  FAILED  ] Foo.Bar\par
}
\par
Suppose the bug is that the {\f2 "c"}  in the third {\f2 EXPECT_CALL}  is a typo and should actually be {\f2 "a"} . With the above message, you should see that the actual {\f2 F("a", "good")}  call is matched by the first {\f2 EXPECT_CALL} , not the third as you thought. From that it should be obvious that the third {\f2 EXPECT_CALL}  is written wrong. Case solved.\par
If you are interested in the mock call trace but not the stack traces, you can combine {\f2 --gmock_verbose=info}  with {\f2 --gtest_stack_trace_depth=0}  on the test command line.\par}
{\bkmkstart AAAAAAAAJF}
{\bkmkend AAAAAAAAJF}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Running Tests in Emacs
\par}
{\tc\tcl3 \v Running Tests in Emacs}
If you build and run your tests in Emacs using the {\f2 M-x google-compile}  command (as many googletest users do), the source file locations of gMock and googletest errors will be highlighted. Just press {\f2 <Enter>}  on one of them and you'll be taken to the offending line. Or, you can just type {\f2 C-x} ` to jump to the next error.\par
To make it even easier, you can add the following lines to your {\f2 ~/.emacs}  file:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid (global-set-key "\\M-m"  'google-compile)  ; m is for make\par
(global-set-key [M-down] 'next-error)\par
(global-set-key [M-up]  '(lambda () (interactive) (next-error -1)))\par
}
\par
Then you can type {\f2 M-m}  to start a build (if you want to run the test as well, just make sure {\f2 foo_test.run}  or {\f2 runtests}  is in the build command you supply after typing {\f2 M-m} ), or {\f2 M-up} /{\f2 M-down}  to move back and forth between errors.\par}
\par}
{\bkmkstart AAAAAAAAJG}
{\bkmkend AAAAAAAAJG}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Extending gMock
\par}
{\tc\tcl2 \v Extending gMock}
{\bkmkstart AAAAAAAAJH}
{\bkmkend AAAAAAAAJH}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Writing New Matchers Quickly
\par}
{\tc\tcl3 \v Writing New Matchers Quickly}
\{: .callout .warning\} WARNING: gMock does not guarantee when or how many times a matcher will be invoked. Therefore, all matchers must be functionally pure. See {\b this section} for more details.\par
The {\f2 MATCHER*}  family of macros can be used to define custom matchers easily. The syntax:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER(name, description_string_expression) \{ statements; \}\par
}
\par
will define a matcher with the given name that executes the statements, which must return a {\f2 bool}  to indicate if the match succeeds. Inside the statements, you can refer to the value being matched by {\f2 arg} , and refer to its type by {\f2 arg_type} .\par
The {\i description string}  is a {\f2 string} -typed expression that documents what the matcher does, and is used to generate the failure message when the match fails. It can (and should) reference the special {\f2 bool}  variable {\f2 negation} , and should evaluate to the description of the matcher when {\f2 negation}  is {\f2 false} , or that of the matcher's negation when {\f2 negation}  is {\f2 true} .\par
For convenience, we allow the description string to be empty ({\f2 ""} ), in which case gMock will use the sequence of words in the matcher name as the description.\par
For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER(IsDivisibleBy7, {\cf22 ""}) \{ {\cf19 return} (arg % 7) == 0; \}\par
}
\par
allows you to write\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf20 // Expects mock_foo.Bar(n) to be called where n is divisible by 7.}\par
EXPECT_CALL(mock_foo, Bar(IsDivisibleBy7()));\par
}
\par
or,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Not;\par
...\par
{\cf20 // Verifies that a value is divisible by 7 and the other is not.}\par
EXPECT_THAT(some_expression, IsDivisibleBy7());\par
EXPECT_THAT(some_other_expression, Not(IsDivisibleBy7()));\par
}
\par
If the above assertions fail, they will print something like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Value of: some_expression\par
Expected: is divisible by 7\par
  Actual: 27\par
...\par
Value of: some_other_expression\par
Expected: not (is divisible by 7)\par
  Actual: 21\par
}
\par
where the descriptions {\f2 "is divisible by 7"}  and {\f2 "not (is divisible by 7)"}  are automatically calculated from the matcher name {\f2 IsDivisibleBy7} .\par
As you may have noticed, the auto-generated descriptions (especially those for the negation) may not be so great. You can always override them with a {\f2 string}  expression of your own:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER(IsDivisibleBy7,\par
        absl::StrCat(negation ? {\cf22 "isn't"} : {\cf22 "is"}, {\cf22 " divisible by 7"})) \{\par
  {\cf19 return} (arg % 7) == 0;\par
\}\par
}
\par
Optionally, you can stream additional information to a hidden argument named {\f2 result_listener}  to explain the match result. For example, a better definition of {\f2 IsDivisibleBy7}  is:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER(IsDivisibleBy7, {\cf22 ""}) \{\par
  {\cf19 if} ((arg % 7) == 0)\par
    {\cf19 return} {\cf17 true};\par
\par
  *result_listener << {\cf22 "the remainder is "} << (arg % 7);\par
  {\cf19 return} {\cf17 false};\par
\}\par
}
\par
With this definition, the above assertion will give a better message:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Value of: some_expression\par
Expected: is divisible by 7\par
  Actual: 27 (the remainder is 6)\par
}
\par
You should let {\f2 MatchAndExplain()}  print {\i any additional information}  that can help a user understand the match result. Note that it should explain why the match succeeds in case of a success (unless it's obvious) - this is useful when the matcher is used inside {\f2 Not()} . There is no need to print the argument value itself, as gMock already prints it for you.\par
\{: .callout .note\} NOTE: The type of the value being matched ({\f2 arg_type} ) is determined by the context in which you use the matcher and is supplied to you by the compiler, so you don't need to worry about declaring it (nor can you). This allows the matcher to be polymorphic. For example, {\f2 IsDivisibleBy7()}  can be used to match any type where the value of {\f2 (arg % 7) == 0}  can be implicitly converted to a {\f2 bool} . In the {\f2 Bar(IsDivisibleBy7())}  example above, if method {\f2 Bar()}  takes an {\f2 int} , {\f2 arg_type}  will be {\f2 int} ; if it takes an {\f2 unsigned long} , {\f2 arg_type}  will be {\f2 unsigned long} ; and so on.\par}
{\bkmkstart AAAAAAAAJI}
{\bkmkend AAAAAAAAJI}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Writing New Parameterized Matchers Quickly
\par}
{\tc\tcl3 \v Writing New Parameterized Matchers Quickly}
Sometimes you'll want to define a matcher that has parameters. For that you can use the macro:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER_P(name, param_name, description_string) \{ statements; \}\par
}
\par
where the description string can be either {\f2 ""}  or a {\f2 string}  expression that references {\f2 negation}  and {\f2 param_name} .\par
For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER_P(HasAbsoluteValue, value, {\cf22 ""}) \{ {\cf19 return} abs(arg) == value; \}\par
}
\par
will allow you to write:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_THAT(Blah({\cf22 "a"}), HasAbsoluteValue(n));\par
}
\par
which may lead to this message (assuming {\f2 n}  is 10):\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Value of: Blah("a")\par
Expected: has absolute value 10\par
  Actual: -9\par
}
\par
Note that both the matcher description and its parameter are printed, making the message human-friendly.\par
In the matcher definition body, you can write {\f2 foo_type}  to reference the type of a parameter named {\f2 foo} . For example, in the body of {\f2 MATCHER_P(HasAbsoluteValue, value)}  above, you can write {\f2 value_type}  to refer to the type of {\f2 value} .\par
gMock also provides {\f2 MATCHER_P2} , {\f2 MATCHER_P3} , ..., up to {\f2 MATCHER_P10}  to support multi-parameter matchers:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER_Pk(name, param_1, ..., param_k, description_string) \{ statements; \}\par
}
\par
Please note that the custom description string is for a particular {\i instance}  of the matcher, where the parameters have been bound to actual values. Therefore usually you'll want the parameter values to be part of the description. gMock lets you do that by referencing the matcher parameters in the description string expression.\par
For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::PrintToString;\par
MATCHER_P2(InClosedRange, low, hi,\par
           absl::StrFormat({\cf22 "%s in range [%s, %s]"}, negation ? {\cf22 "isn't"} : {\cf22 "is"},\par
                           PrintToString(low), PrintToString(hi))) \{\par
  {\cf19 return} low <= arg && arg <= hi;\par
\}\par
...\par
EXPECT_THAT(3, InClosedRange(4, 6));\par
}
\par
would generate a failure that contains the message:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Expected: is in range [4, 6]\par
}
\par
If you specify {\f2 ""}  as the description, the failure message will contain the sequence of words in the matcher name followed by the parameter values printed as a tuple. For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER_P2(InClosedRange, low, hi, {\cf22 ""}) \{ ... \}\par
...\par
EXPECT_THAT(3, InClosedRange(4, 6));\par
}
\par
would generate a failure that contains the text:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Expected: in closed range (4, 6)\par
}
\par
For the purpose of typing, you can view\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER_Pk(Foo, p1, ..., pk, description_string) \{ ... \}\par
}
\par
as shorthand for\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 template} <{\cf17 typename} p1_type, ..., {\cf17 typename} pk_type>\par
FooMatcherPk<p1_type, ..., pk_type>\par
Foo(p1_type p1, ..., pk_type pk) \{ ... \}\par
}
\par
When you write {\f2 Foo(v1, ..., vk)} , the compiler infers the types of the parameters {\f2 v1} , ..., and {\f2 vk}  for you. If you are not happy with the result of the type inference, you can specify the types by explicitly instantiating the template, as in {\f2 Foo<long, bool>(5, false)} . As said earlier, you don't get to (or need to) specify {\f2 arg_type}  as that's determined by the context in which the matcher is used.\par
You can assign the result of expression {\f2 Foo(p1, ..., pk)}  to a variable of type {\f2 FooMatcherPk<p1_type, ..., pk_type>} . This can be useful when composing matchers. Matchers that don't have a parameter or have only one parameter have special types: you can assign {\f2 Foo()}  to a {\f2 FooMatcher} -typed variable, and assign {\f2 Foo(p)}  to a {\f2 FooMatcherP<p_type>} -typed variable.\par
While you can instantiate a matcher template with reference types, passing the parameters by pointer usually makes your code more readable. If, however, you still want to pass a parameter by reference, be aware that in the failure message generated by the matcher you will see the value of the referenced object but not its address.\par
You can overload matchers with different numbers of parameters:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER_P(Blah, a, description_string_1) \{ ... \}\par
MATCHER_P2(Blah, a, b, description_string_2) \{ ... \}\par
}
\par
While it's tempting to always use the {\f2 MATCHER*}  macros when defining a new matcher, you should also consider implementing the matcher interface directly instead (see the recipes that follow), especially if you need to use the matcher a lot. While these approaches require more work, they give you more control on the types of the value being matched and the matcher parameters, which in general leads to better compiler error messages that pay off in the long run. They also allow overloading matchers based on parameter types (as opposed to just based on the number of parameters).\par}
{\bkmkstart AAAAAAAAJJ}
{\bkmkend AAAAAAAAJJ}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Writing New Monomorphic Matchers
\par}
{\tc\tcl3 \v Writing New Monomorphic Matchers}
A matcher of argument type {\f2 T}  implements the matcher interface for {\f2 T}  and does two things: it tests whether a value of type {\f2 T}  matches the matcher, and can describe what kind of values it matches. The latter ability is used for generating readable error messages when expectations are violated.\par
A matcher of {\f2 T}  must declare a typedef like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 using }is_gtest_matcher = void;\par
}
\par
and supports the following operations:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf20 // Match a value and optionally explain into an ostream.}\par
{\cf18 bool} matched = matcher.MatchAndExplain(value, maybe_os);\par
{\cf20 // where `value` is of type `T` and}\par
{\cf20 // `maybe_os` is of type `std::ostream*`, where it can be null if the caller}\par
{\cf20 // is not interested in there textual explanation.}\par
\par
matcher.DescribeTo(os);\par
matcher.DescribeNegationTo(os);\par
{\cf20 // where `os` is of type `std::ostream*`.}\par
}
\par
If you need a custom matcher but {\f2 Truly()}  is not a good option (for example, you may not be happy with the way {\f2 Truly(predicate)}  describes itself, or you may want your matcher to be polymorphic as {\f2 Eq(value)}  is), you can define a matcher to do whatever you want in two steps: first implement the matcher interface, and then define a factory function to create a matcher instance. The second step is not strictly needed but it makes the syntax of using the matcher nicer.\par
For example, you can define a matcher to test whether an {\f2 int}  is divisible by 7 and then use it like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Matcher;\par
\par
{\cf17 class }DivisibleBy7Matcher \{\par
 {\cf17 public}:\par
  {\cf17 using }is_gtest_matcher = void;\par
\par
  {\cf18 bool} MatchAndExplain({\cf18 int} n, std::ostream*){\cf17  const }\{\par
    {\cf19 return} (n % 7) == 0;\par
  \}\par
\par
  {\cf18 void} DescribeTo(std::ostream* os){\cf17  const }\{\par
    *os << {\cf22 "is divisible by 7"};\par
  \}\par
\par
  {\cf18 void} DescribeNegationTo(std::ostream* os){\cf17  const }\{\par
    *os << {\cf22 "is not divisible by 7"};\par
  \}\par
\};\par
\par
Matcher<int> DivisibleBy7() \{\par
  {\cf19 return} DivisibleBy7Matcher();\par
\}\par
\par
...\par
  EXPECT_CALL(foo, Bar(DivisibleBy7()));\par
}
\par
You may improve the matcher message by streaming additional information to the {\f2 os}  argument in {\f2 MatchAndExplain()} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 class }DivisibleBy7Matcher \{\par
 {\cf17 public}:\par
  {\cf18 bool} MatchAndExplain({\cf18 int} n, std::ostream* os){\cf17  const }\{\par
    {\cf17 const} {\cf18 int} remainder = n % 7;\par
    {\cf19 if} (remainder != 0 && os != {\cf17 nullptr}) \{\par
      *os << {\cf22 "the remainder is "} << remainder;\par
    \}\par
    {\cf19 return} remainder == 0;\par
  \}\par
  ...\par
\};\par
}
\par
Then, {\f2 EXPECT_THAT(x, DivisibleBy7());}  may generate a message like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Value of: x\par
Expected: is divisible by 7\par
  Actual: 23 (the remainder is 2)\par
}
\par
\{: .callout .tip\} Tip: for convenience, {\f2 MatchAndExplain()}  can take a {\f2 MatchResultListener*}  instead of {\f2 std::ostream*} .\par}
{\bkmkstart AAAAAAAAJK}
{\bkmkend AAAAAAAAJK}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Writing New Polymorphic Matchers
\par}
{\tc\tcl3 \v Writing New Polymorphic Matchers}
Expanding what we learned above to {\i polymorphic}  matchers is now just as simple as adding templates in the right place.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 class }NotNullMatcher \{\par
 {\cf17 public}:\par
  {\cf17 using }is_gtest_matcher = void;\par
\par
  {\cf20 // To implement a polymorphic matcher, we just need to make MatchAndExplain a}\par
  {\cf20 // template on its first argument.}\par
\par
  {\cf20 // In this example, we want to use NotNull() with any pointer, so}\par
  {\cf20 // MatchAndExplain() accepts a pointer of any type as its first argument.}\par
  {\cf20 // In general, you can define MatchAndExplain() as an ordinary method or}\par
  {\cf20 // a method template, or even overload it.}\par
  {\cf17 template} <{\cf17 typename} T>\par
  {\cf18 bool} MatchAndExplain(T* p, std::ostream*){\cf17  const }\{\par
    {\cf19 return} p != {\cf17 nullptr};\par
  \}\par
\par
  {\cf20 // Describes the property of a value matching this matcher.}\par
  {\cf18 void} DescribeTo(std::ostream* os){\cf17  const }\{ *os << {\cf22 "is not NULL"}; \}\par
\par
  {\cf20 // Describes the property of a value NOT matching this matcher.}\par
  {\cf18 void} DescribeNegationTo(std::ostream* os){\cf17  const }\{ *os << {\cf22 "is NULL"}; \}\par
\};\par
\par
NotNullMatcher NotNull() \{\par
  {\cf19 return} NotNullMatcher();\par
\}\par
\par
...\par
\par
  EXPECT_CALL(foo, Bar(NotNull()));  {\cf20 // The argument must be a non-NULL pointer.}\par
}
\par}
{\bkmkstart AAAAAAAAJL}
{\bkmkend AAAAAAAAJL}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Legacy Matcher Implementation
\par}
{\tc\tcl3 \v Legacy Matcher Implementation}
Defining matchers used to be somewhat more complicated, in which it required several supporting classes and virtual functions. To implement a matcher for type {\f2 T}  using the legacy API you have to derive from {\f2 MatcherInterface<T>}  and call {\f2 MakeMatcher}  to construct the object.\par
The interface looks like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 class }MatchResultListener \{\par
 {\cf17 public}:\par
  ...\par
  {\cf20 // Streams x to the underlying ostream; does nothing if the ostream}\par
  {\cf20 // is NULL.}\par
  {\cf17 template} <{\cf17 typename} T>\par
  MatchResultListener& operator<<({\cf17 const} T& x);\par
\par
  {\cf20 // Returns the underlying ostream.}\par
  std::ostream* stream();\par
\};\par
\par
{\cf17 template} <{\cf17 typename} T>\par
{\cf17 class }MatcherInterface \{\par
 {\cf17 public}:\par
  {\cf17 virtual} ~MatcherInterface();\par
\par
  {\cf20 // Returns true if and only if the matcher matches x; also explains the match}\par
  {\cf20 // result to 'listener'.}\par
  {\cf17 virtual} {\cf18 bool} MatchAndExplain(T x, MatchResultListener* listener) {\cf17 const} = 0;\par
\par
  {\cf20 // Describes this matcher to an ostream.}\par
  {\cf17 virtual} {\cf18 void} DescribeTo(std::ostream* os) {\cf17 const} = 0;\par
\par
  {\cf20 // Describes the negation of this matcher to an ostream.}\par
  {\cf17 virtual} {\cf18 void} DescribeNegationTo(std::ostream* os) {\cf17 const};\par
\};\par
}
\par
Fortunately, most of the time you can define a polymorphic matcher easily with the help of {\f2 MakePolymorphicMatcher()} . Here's how you can define {\f2 NotNull()}  as an example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::MakePolymorphicMatcher;\par
using ::testing::MatchResultListener;\par
using ::testing::PolymorphicMatcher;\par
\par
{\cf17 class }NotNullMatcher \{\par
 {\cf17 public}:\par
  {\cf20 // To implement a polymorphic matcher, first define a COPYABLE class}\par
  {\cf20 // that has three members MatchAndExplain(), DescribeTo(), and}\par
  {\cf20 // DescribeNegationTo(), like the following.}\par
\par
  {\cf20 // In this example, we want to use NotNull() with any pointer, so}\par
  {\cf20 // MatchAndExplain() accepts a pointer of any type as its first argument.}\par
  {\cf20 // In general, you can define MatchAndExplain() as an ordinary method or}\par
  {\cf20 // a method template, or even overload it.}\par
  {\cf17 template} <{\cf17 typename} T>\par
  {\cf18 bool} MatchAndExplain(T* p,\par
                       MatchResultListener* {\cf20 /* listener */}){\cf17  const }\{\par
    {\cf19 return} p != NULL;\par
  \}\par
\par
  {\cf20 // Describes the property of a value matching this matcher.}\par
  {\cf18 void} DescribeTo(std::ostream* os){\cf17  const }\{ *os << {\cf22 "is not NULL"}; \}\par
\par
  {\cf20 // Describes the property of a value NOT matching this matcher.}\par
  {\cf18 void} DescribeNegationTo(std::ostream* os){\cf17  const }\{ *os << {\cf22 "is NULL"}; \}\par
\};\par
\par
{\cf20 // To construct a polymorphic matcher, pass an instance of the class}\par
{\cf20 // to MakePolymorphicMatcher().  Note the return type.}\par
PolymorphicMatcher<NotNullMatcher> NotNull() \{\par
  {\cf19 return} MakePolymorphicMatcher(NotNullMatcher());\par
\}\par
\par
...\par
\par
  EXPECT_CALL(foo, Bar(NotNull()));  {\cf20 // The argument must be a non-NULL pointer.}\par
}
\par
\{: .callout .note\} {\b Note:}  Your polymorphic matcher class does {\b not}  need to inherit from {\f2 MatcherInterface}  or any other class, and its methods do {\b not}  need to be virtual.\par
Like in a monomorphic matcher, you may explain the match result by streaming additional information to the {\f2 listener}  argument in {\f2 MatchAndExplain()} .\par}
{\bkmkstart AAAAAAAAJM}
{\bkmkend AAAAAAAAJM}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Writing New Cardinalities
\par}
{\tc\tcl3 \v Writing New Cardinalities}
A cardinality is used in {\f2 Times()}  to tell gMock how many times you expect a call to occur. It doesn't have to be exact. For example, you can say {\f2 AtLeast(5)}  or {\f2 Between(2, 4)} .\par
If the {\f2 built-in set} of cardinalities doesn't suit you, you are free to define your own by implementing the following interface (in namespace {\f2 testing} ):\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 class }CardinalityInterface \{\par
 {\cf17 public}:\par
  {\cf17 virtual} ~CardinalityInterface();\par
\par
  {\cf20 // Returns true if and only if call_count calls will satisfy this cardinality.}\par
  {\cf17 virtual} {\cf18 bool} IsSatisfiedByCallCount({\cf18 int} call_count) {\cf17 const} = 0;\par
\par
  {\cf20 // Returns true if and only if call_count calls will saturate this}\par
  {\cf20 // cardinality.}\par
  {\cf17 virtual} {\cf18 bool} IsSaturatedByCallCount({\cf18 int} call_count) {\cf17 const} = 0;\par
\par
  {\cf20 // Describes self to an ostream.}\par
  {\cf17 virtual} {\cf18 void} DescribeTo(std::ostream* os) {\cf17 const} = 0;\par
\};\par
}
\par
For example, to specify that a call must occur even number of times, you can write\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Cardinality;\par
using ::testing::CardinalityInterface;\par
using ::testing::MakeCardinality;\par
\par
{\cf17 class }EvenNumberCardinality : {\cf17 public} CardinalityInterface \{\par
 {\cf17 public}:\par
  {\cf18 bool} IsSatisfiedByCallCount({\cf18 int} call_count){\cf17  const override }\{\par
    {\cf19 return} (call_count % 2) == 0;\par
  \}\par
\par
  {\cf18 bool} IsSaturatedByCallCount({\cf18 int} call_count){\cf17  const override }\{\par
    {\cf19 return} {\cf17 false};\par
  \}\par
\par
  {\cf18 void} DescribeTo(std::ostream* os){\cf17  const }\{\par
    *os << {\cf22 "called even number of times"};\par
  \}\par
\};\par
\par
Cardinality EvenNumber() \{\par
  {\cf19 return} MakeCardinality({\cf17 new} EvenNumberCardinality);\par
\}\par
\par
...\par
  EXPECT_CALL(foo, Bar(3))\par
      .Times(EvenNumber());\par
}
\par}
{\bkmkstart AAAAAAAAJN}
{\bkmkend AAAAAAAAJN}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Writing New Actions
\par}
{\tc\tcl3 \v Writing New Actions}
If the built-in actions don't work for you, you can easily define your own one. All you need is a call operator with a signature compatible with the mocked function. So you can use a lambda:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MockFunction<int(int)> mock;\par
EXPECT_CALL(mock, Call).WillOnce([](const int input) \{ return input * 7; \});\par
EXPECT_EQ(14, mock.AsStdFunction()(2));\par
}
\par
Or a struct with a call operator (even a templated one):\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid struct MultiplyBy \{\par
  template <typename T>\par
  T operator()(T arg) \{ return arg * multiplier; \}\par
\par
  int multiplier;\par
\};\par
\par
// Then use:\par
// EXPECT_CALL(...).WillOnce(MultiplyBy\{7\});\par
}
\par
It's also fine for the callable to take no arguments, ignoring the arguments supplied to the mock function:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MockFunction<int(int)> mock;\par
EXPECT_CALL(mock, Call).WillOnce([] \{ return 17; \});\par
EXPECT_EQ(17, mock.AsStdFunction()(0));\par
}
\par
When used with {\f2 WillOnce} , the callable can assume it will be called at most once and is allowed to be a move-only type:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // An action that contains move-only types and has an &&-qualified operator,\par
// demanding in the type system that it be called at most once. This can be\par
// used with WillOnce, but the compiler will reject it if handed to\par
// WillRepeatedly.\par
struct MoveOnlyAction \{\par
  std::unique_ptr<int> move_only_state;\par
  std::unique_ptr<int> operator()() && \{ return std::move(move_only_state); \}\par
\};\par
\par
MockFunction<std::unique_ptr<int>()> mock;\par
EXPECT_CALL(mock, Call).WillOnce(MoveOnlyAction\{std::make_unique<int>(17)\});\par
EXPECT_THAT(mock.AsStdFunction()(), Pointee(Eq(17)));\par
}
\par
More generally, to use with a mock function whose signature is {\f2 R(Args...)}  the object can be anything convertible to {\f2 OnceAction<R(Args...)>}  or {\f2 Action<R(Args...)} >. The difference between the two is that {\f2 OnceAction}  has weaker requirements ({\f2 Action}  requires a copy-constructible input that can be called repeatedly whereas {\f2 OnceAction}  requires only move-constructible and supports {\f2 &&} -qualified call operators), but can be used only with {\f2 WillOnce} . {\f2 OnceAction}  is typically relevant only when supporting move-only types or actions that want a type-system guarantee that they will be called at most once.\par
Typically the {\f2 OnceAction}  and {\f2 Action}  templates need not be referenced directly in your actions: a struct or class with a call operator is sufficient, as in the examples above. But fancier polymorphic actions that need to know the specific return type of the mock function can define templated conversion operators to make that possible. See {\f2 {\b gmock-actions.h}}  for examples.\par
{\bkmkstart AAAAAAAAJO}
{\bkmkend AAAAAAAAJO}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Legacy macro-based Actions
\par}
{\tc\tcl4 \v Legacy macro-based Actions}
Before C++11, the functor-based actions were not supported; the old way of writing actions was through a set of {\f2 ACTION*}  macros. We suggest to avoid them in new code; they hide a lot of logic behind the macro, potentially leading to harder-to-understand compiler errors. Nevertheless, we cover them here for completeness.\par
By writing\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION(name) \{ statements; \}\par
}
\par
in a namespace scope (i.e. not inside a class or function), you will define an action with the given name that executes the statements. The value returned by {\f2 statements}  will be used as the return value of the action. Inside the statements, you can refer to the K-th (0-based) argument of the mock function as {\f2 argK} . For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION(IncrementArg1) \{ {\cf19 return} ++(*arg1); \}\par
}
\par
allows you to write\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ... WillOnce(IncrementArg1());\par
}
\par
Note that you don't need to specify the types of the mock function arguments. Rest assured that your code is type-safe though: you'll get a compiler error if {\f2 *arg1}  doesn't support the {\f2 ++}  operator, or if the type of {\f2 ++(*arg1)}  isn't compatible with the mock function's return type.\par
Another example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION(Foo) \{\par
  (*arg2)(5);\par
  Blah();\par
  *arg1 = 0;\par
  {\cf19 return} arg0;\par
\}\par
}
\par
defines an action {\f2 Foo()}  that invokes argument #2 (a function pointer) with 5, calls function {\f2 Blah()} , sets the value pointed to by argument #1 to 0, and returns argument #0.\par
For more convenience and flexibility, you can also use the following pre-defined symbols in the body of {\f2 ACTION} :\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 argK_type}    \cell }{The type of the K-th (0-based) argument of the mock function    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 args}    \cell }{All arguments of the mock function as a tuple    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 args_type}    \cell }{The type of all arguments of the mock function as a tuple    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 return_type}    \cell }{The return type of the mock function    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 function_type}    \cell }{The type of the mock function   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
For example, when using an {\f2 ACTION}  as a stub action for mock function:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf18 int} DoSomething({\cf18 bool} flag, {\cf18 int}* ptr);\par
}
\par
we have:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Pre-defined Symbol   \cell }{Is Bound To    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 arg0}    \cell }{the value of {\f2 flag}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 arg0_type}    \cell }{the type {\f2 bool}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 arg1}    \cell }{the value of {\f2 ptr}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 arg1_type}    \cell }{the type {\f2 int*}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 args}    \cell }{the tuple {\f2 (flag, ptr)}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 args_type}    \cell }{the type {\f2 std::tuple<bool, int*>}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 return_type}    \cell }{the type {\f2 int}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 function_type}    \cell }{the type {\f2 int(bool, int*)}    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
\par}
{\bkmkstart AAAAAAAAJP}
{\bkmkend AAAAAAAAJP}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Legacy macro-based parameterized Actions
\par}
{\tc\tcl4 \v Legacy macro-based parameterized Actions}
Sometimes you'll want to parameterize an action you define. For that we have another macro\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION_P(name, param) \{ statements; \}\par
}
\par
For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION_P(Add, n) \{ {\cf19 return} arg0 + n; \}\par
}
\par
will allow you to write\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf20 // Returns argument #0 + 5.}\par
... WillOnce(Add(5));\par
}
\par
For convenience, we use the term {\i arguments}  for the values used to invoke the mock function, and the term {\i parameters}  for the values used to instantiate an action.\par
Note that you don't need to provide the type of the parameter either. Suppose the parameter is named {\f2 param} , you can also use the gMock-defined symbol {\f2 param_type}  to refer to the type of the parameter as inferred by the compiler. For example, in the body of {\f2 ACTION_P(Add, n)}  above, you can write {\f2 n_type}  for the type of {\f2 n} .\par
gMock also provides {\f2 ACTION_P2} , {\f2 ACTION_P3} , and etc to support multi-parameter actions. For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION_P2(ReturnDistanceTo, x, y) \{\par
  {\cf18 double} dx = arg0 - x;\par
  {\cf18 double} dy = arg1 - y;\par
  {\cf19 return} sqrt(dx*dx + dy*dy);\par
\}\par
}
\par
lets you write\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ... WillOnce(ReturnDistanceTo(5.0, 26.5));\par
}
\par
You can view {\f2 ACTION}  as a degenerated parameterized action where the number of parameters is 0.\par
You can also easily define actions overloaded on the number of parameters:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION_P(Plus, a) \{ ... \}\par
ACTION_P2(Plus, a, b) \{ ... \}\par
}
\par}
\par}
{\bkmkstart AAAAAAAAJQ}
{\bkmkend AAAAAAAAJQ}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Restricting the Type of an Argument or Parameter in an ACTION
\par}
{\tc\tcl3 \v Restricting the Type of an Argument or Parameter in an ACTION}
For maximum brevity and reusability, the {\f2 ACTION*}  macros don't ask you to provide the types of the mock function arguments and the action parameters. Instead, we let the compiler infer the types for us.\par
Sometimes, however, we may want to be more explicit about the types. There are several tricks to do that. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION(Foo) \{\par
  {\cf20 // Makes sure arg0 can be converted to int.}\par
  {\cf18 int} n = arg0;\par
  ... use n instead of arg0 here ...\par
\}\par
\par
ACTION_P(Bar, param) \{\par
  {\cf20 // Makes sure the type of arg1 is const char*.}\par
  ::testing::StaticAssertTypeEq<const char*, arg1_type>();\par
\par
  {\cf20 // Makes sure param can be converted to bool.}\par
  {\cf18 bool} flag = param;\par
\}\par
}
\par
where {\f2 StaticAssertTypeEq}  is a compile-time assertion in googletest that verifies two types are the same.\par}
{\bkmkstart AAAAAAAAJR}
{\bkmkend AAAAAAAAJR}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Writing New Action Templates Quickly
\par}
{\tc\tcl3 \v Writing New Action Templates Quickly}
Sometimes you want to give an action explicit template parameters that cannot be inferred from its value parameters. {\f2 ACTION_TEMPLATE()}  supports that and can be viewed as an extension to {\f2 ACTION()}  and {\f2 ACTION_P*()} .\par
The syntax:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION_TEMPLATE(ActionName,\par
                HAS_m_TEMPLATE_PARAMS(kind1, name1, ..., kind_m, name_m),\par
                AND_n_VALUE_PARAMS(p1, ..., p_n)) \{ statements; \}\par
}
\par
defines an action template that takes {\i m}  explicit template parameters and {\i n}  value parameters, where {\i m}  is in [1, 10] and {\i n}  is in [0, 10]. {\f2 name_i}  is the name of the {\i i} -th template parameter, and {\f2 kind_i}  specifies whether it's a {\f2 typename} , an integral constant, or a template. {\f2 p_i}  is the name of the {\i i} -th value parameter.\par
Example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf20 // DuplicateArg<k, T>(output) converts the k-th argument of the mock}\par
{\cf20 // function to type T and copies it to *output.}\par
ACTION_TEMPLATE(DuplicateArg,\par
                {\cf20 // Note the comma between int and k:}\par
                HAS_2_TEMPLATE_PARAMS({\cf18 int}, k, {\cf17 typename}, T),\par
                AND_1_VALUE_PARAMS(output)) \{\par
  *output = T(std::get<k>(args));\par
\}\par
}
\par
To create an instance of an action template, write:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ActionName<t1, ..., t_m>(v1, ..., v_n)\par
}
\par
where the {\f2 t} s are the template arguments and the {\f2 v} s are the value arguments. The value argument types are inferred by the compiler. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
...\par
  {\cf18 int} n;\par
  EXPECT_CALL(mock, Foo).WillOnce(DuplicateArg<1, unsigned char>(&n));\par
}
\par
If you want to explicitly specify the value argument types, you can provide additional template arguments:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ActionName<t1, ..., t_m, u1, ..., u_k>(v1, ..., v_n)\par
}
\par
where {\f2 u_i}  is the desired type of {\f2 v_i} .\par
{\f2 ACTION_TEMPLATE}  and {\f2 ACTION} /{\f2 ACTION_P*}  can be overloaded on the number of value parameters, but not on the number of template parameters. Without the restriction, the meaning of the following is unclear:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid OverloadedAction<int, bool>(x);\par
}
\par
Are we using a single-template-parameter action where {\f2 bool}  refers to the type of {\f2 x} , or a two-template-parameter action where the compiler is asked to infer the type of {\f2 x} ?\par}
{\bkmkstart AAAAAAAAJS}
{\bkmkend AAAAAAAAJS}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Using the ACTION Object's Type
\par}
{\tc\tcl3 \v Using the ACTION Object's Type}
If you are writing a function that returns an {\f2 ACTION}  object, you'll need to know its type. The type depends on the macro used to define the action and the parameter types. The rule is relatively simple:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Given Definition   \cell }{Expression   \cell }{Has Type    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION(Foo)}    \cell }{{\f2 Foo()}    \cell }{{\f2 FooAction}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_TEMPLATE(Foo, HAS_m_TEMPLATE_PARAMS(...), AND_0_VALUE_PARAMS())}    \cell }{{\f2 Foo<t1, ..., t_m>()}    \cell }{{\f2 FooAction<t1, ..., t_m>}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_P(Bar, param)}    \cell }{{\f2 Bar(int_value)}    \cell }{{\f2 BarActionP<int>}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_TEMPLATE(Bar, HAS_m_TEMPLATE_PARAMS(...), AND_1_VALUE_PARAMS(p1))}    \cell }{{\f2 Bar<t1, ..., t_m>(int_value)}    \cell }{{\f2 BarActionP<t1, ..., t_m, int>}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_P2(Baz, p1, p2)}    \cell }{{\f2 Baz(bool_value, int_value)}    \cell }{{\f2 BazActionP2<bool, int>}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_TEMPLATE(Baz, HAS_m_TEMPLATE_PARAMS(...), AND_2_VALUE_PARAMS(p1, p2))}    \cell }{{\f2 Baz<t1, ..., t_m>(bool_value, int_value)}    \cell }{{\f2 BazActionP2<t1, ..., t_m, bool, int>}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{...   \cell }{...   \cell }{...   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Note that we have to pick different suffixes ({\f2 Action} , {\f2 ActionP} , {\f2 ActionP2} , and etc) for actions with different numbers of value parameters, or the action definitions cannot be overloaded on the number of them.\par}
{\bkmkstart AAAAAAAAJT}
{\bkmkend AAAAAAAAJT}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Writing New Monomorphic Actions
\par}
{\tc\tcl3 \v Writing New Monomorphic Actions}
While the {\f2 ACTION*}  macros are very convenient, sometimes they are inappropriate. For example, despite the tricks shown in the previous recipes, they don't let you directly specify the types of the mock function arguments and the action parameters, which in general leads to unoptimized compiler error messages that can baffle unfamiliar users. They also don't allow overloading actions based on parameter types without jumping through some hoops.\par
An alternative to the {\f2 ACTION*}  macros is to implement {\f2 {\b testing::ActionInterface}<F>} , where {\f2 F}  is the type of the mock function in which the action will be used. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 template} <{\cf17 typename} F>\par
{\cf17 class }ActionInterface \{\par
 {\cf17 public}:\par
  {\cf17 virtual} ~ActionInterface();\par
\par
  {\cf20 // Performs the action.  Result is the return type of function type}\par
  {\cf20 // F, and ArgumentTuple is the tuple of arguments of F.}\par
  {\cf20 //}\par
\par
  {\cf20 // For example, if F is int(bool, const string&), then Result would}\par
  {\cf20 // be int, and ArgumentTuple would be std::tuple<bool, const string&>.}\par
  {\cf17 virtual} Result Perform({\cf17 const} ArgumentTuple& args) = 0;\par
\};\par
}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Action;\par
using ::testing::ActionInterface;\par
using ::testing::MakeAction;\par
\par
{\cf17 typedef} {\cf18 int} IncrementMethod({\cf18 int}*);\par
\par
{\cf17 class }IncrementArgumentAction : {\cf17 public} ActionInterface<IncrementMethod> \{\par
 {\cf17 public}:\par
  {\cf18 int} Perform({\cf17 const} std::tuple<int*>& args){\cf17  override }\{\par
    {\cf18 int}* p = std::get<0>(args);  {\cf20 // Grabs the first argument.}\par
    {\cf19 return} *p++;\par
  \}\par
\};\par
\par
Action<IncrementMethod> IncrementArgument() \{\par
  {\cf19 return} MakeAction({\cf17 new} IncrementArgumentAction);\par
\}\par
\par
...\par
  EXPECT_CALL(foo, Baz(_))\par
      .WillOnce(IncrementArgument());\par
\par
  {\cf18 int} n = 5;\par
  foo.Baz(&n);  {\cf20 // Should return 5 and change n to 6.}\par
}
\par}
{\bkmkstart AAAAAAAAJU}
{\bkmkend AAAAAAAAJU}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Writing New Polymorphic Actions
\par}
{\tc\tcl3 \v Writing New Polymorphic Actions}
The previous recipe showed you how to define your own action. This is all good, except that you need to know the type of the function in which the action will be used. Sometimes that can be a problem. For example, if you want to use the action in functions with {\i different}  types (e.g. like {\f2 Return()}  and {\f2 SetArgPointee()} ).\par
If an action can be used in several types of mock functions, we say it's {\i polymorphic} . The {\f2 MakePolymorphicAction()}  function template makes it easy to define such an action:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 namespace }testing \{\par
{\cf17 template} <{\cf17 typename} Impl>\par
PolymorphicAction<Impl> MakePolymorphicAction({\cf17 const} Impl& impl);\par
\}  {\cf20 // namespace testing}\par
}
\par
As an example, let's define an action that returns the second argument in the mock function's argument list. The first step is to define an implementation class:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 class }ReturnSecondArgumentAction \{\par
 {\cf17 public}:\par
  {\cf17 template} <{\cf17 typename} Result, {\cf17 typename} ArgumentTuple>\par
  Result Perform({\cf17 const} ArgumentTuple& args){\cf17  const }\{\par
    {\cf20 // To get the i-th (0-based) argument, use std::get(args).}\par
    {\cf19 return} std::get<1>(args);\par
  \}\par
\};\par
}
\par
This implementation class does {\i not}  need to inherit from any particular class. What matters is that it must have a {\f2 Perform()}  method template. This method template takes the mock function's arguments as a tuple in a {\b single}  argument, and returns the result of the action. It can be either {\f2 const}  or not, but must be invocable with exactly one template argument, which is the result type. In other words, you must be able to call {\f2 Perform<R>(args)}  where {\f2 R}  is the mock function's return type and {\f2 args}  is its arguments in a tuple.\par
Next, we use {\f2 MakePolymorphicAction()}  to turn an instance of the implementation class into the polymorphic action we need. It will be convenient to have a wrapper for this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::MakePolymorphicAction;\par
using ::testing::PolymorphicAction;\par
\par
PolymorphicAction<ReturnSecondArgumentAction> ReturnSecondArgument() \{\par
  {\cf19 return} MakePolymorphicAction(ReturnSecondArgumentAction());\par
\}\par
}
\par
Now, you can use this polymorphic action the same way you use the built-in ones:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
\par
{\cf17 class }MockFoo : {\cf17 public} Foo \{\par
 {\cf17 public}:\par
  MOCK_METHOD({\cf18 int}, DoThis, ({\cf18 bool} flag, {\cf18 int} n), ({\cf17 override}));\par
  MOCK_METHOD({\cf18 string}, DoThat, ({\cf18 int} x, {\cf17 const} {\cf18 char}* str1, {\cf17 const} {\cf18 char}* str2),\par
              ({\cf17 override}));\par
\};\par
\par
  ...\par
  MockFoo foo;\par
  EXPECT_CALL(foo, DoThis).WillOnce(ReturnSecondArgument());\par
  EXPECT_CALL(foo, DoThat).WillOnce(ReturnSecondArgument());\par
  ...\par
  foo.DoThis({\cf17 true}, 5);  {\cf20 // Will return 5.}\par
  foo.DoThat(1, {\cf22 "Hi"}, {\cf22 "Bye"});  {\cf20 // Will return "Hi".}\par
}
\par}
{\bkmkstart AAAAAAAAJV}
{\bkmkend AAAAAAAAJV}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Teaching gMock How to Print Your Values
\par}
{\tc\tcl3 \v Teaching gMock How to Print Your Values}
When an uninteresting or unexpected call occurs, gMock prints the argument values and the stack trace to help you debug. Assertion macros like {\f2 EXPECT_THAT}  and {\f2 EXPECT_EQ}  also print the values in question when the assertion fails. gMock and googletest do this using googletest's user-extensible value printer.\par
This printer knows how to print built-in C++ types, native arrays, STL containers, and any type that supports the {\f2 <<}  operator. For other types, it prints the raw bytes in the value and hopes that you the user can figure it out. {\f2 The GoogleTest advanced guide} explains how to extend the printer to do a better job at printing your particular type than to dump the bytes.\par}
\par}
{\bkmkstart AAAAAAAAJW}
{\bkmkend AAAAAAAAJW}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Useful Mocks Created Using gMock
\par}
{\tc\tcl2 \v Useful Mocks Created Using gMock}
{\bkmkstart AAAAAAAAJX}
{\bkmkend AAAAAAAAJX}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Mock std::function
\par}
{\tc\tcl3 \v Mock std::function}
{\f2 std::function}  is a general function type introduced in C++11. It is a preferred way of passing callbacks to new interfaces. Functions are copiable, and are not usually passed around by pointer, which makes them tricky to mock. But fear not - {\f2 MockFunction}  can help you with that.\par
{\f2 MockFunction<R(T1, ..., Tn)>}  has a mock method {\f2 Call()}  with the signature:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid R Call(T1, ..., Tn);\par
}
\par
It also has a {\f2 AsStdFunction()}  method, which creates a {\f2 std::function}  proxy forwarding to Call:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid std::function<R(T1, ..., Tn)> AsStdFunction();\par
}
\par
To use {\f2 MockFunction} , first create {\f2 MockFunction}  object and set up expectations on its {\f2 Call}  method. Then pass proxy obtained from {\f2 AsStdFunction()}  to the code you are testing. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(FooTest, RunsCallbackWithBarArgument) \{\par
  {\cf20 // 1. Create a mock object.}\par
  MockFunction<int({\cf18 string})> mock_function;\par
\par
  {\cf20 // 2. Set expectations on Call() method.}\par
  EXPECT_CALL(mock_function, Call({\cf22 "bar"})).WillOnce(Return(1));\par
\par
  {\cf20 // 3. Exercise code that uses std::function.}\par
  Foo(mock_function.AsStdFunction());\par
  {\cf20 // Foo's signature can be either of:}\par
  {\cf20 // void Foo(const std::function<int(string)>& fun);}\par
  {\cf20 // void Foo(std::function<int(string)> fun);}\par
\par
  {\cf20 // 4. All expectations will be verified when mock_function}\par
  {\cf20 //     goes out of scope and is destroyed.}\par
\}\par
}
\par
Remember that function objects created with {\f2 AsStdFunction()}  are just forwarders. If you create multiple of them, they will share the same set of expectations.\par
Although {\f2 std::function}  supports unlimited number of arguments, {\f2 MockFunction}  implementation is limited to ten. If you ever hit that limit... well, your callback has bigger problems than being mockable. :-) \par}
\par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Legacy gMock FAQ{\tc \v Legacy gMock FAQ}\par \pard\plain 
{\bkmkstart AAAAAAADXR}
{\bkmkend AAAAAAADXR}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{\bkmkstart AAAAAAAAJY}
{\bkmkend AAAAAAAAJY}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
When I call a method on my mock object, the method for the real object is invoked instead. What's the problem?
\par}
{\tc\tcl3 \v When I call a method on my mock object, the method for the real object is invoked instead. What's the problem?}
In order for a method to be mocked, it must be {\i virtual} , unless you use the {\f2 high-perf dependency injection technique}.\par}
{\bkmkstart AAAAAAAAJZ}
{\bkmkend AAAAAAAAJZ}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Can I mock a variadic function?
\par}
{\tc\tcl3 \v Can I mock a variadic function?}
You cannot mock a variadic function (i.e. a function taking ellipsis ({\f2 ...} ) arguments) directly in gMock.\par
The problem is that in general, there is {\i no way}  for a mock object to know how many arguments are passed to the variadic method, and what the arguments' types are. Only the {\i author of the base class}  knows the protocol, and we cannot look into his or her head.\par
Therefore, to mock such a function, the {\i user}  must teach the mock object how to figure out the number of arguments and their types. One way to do it is to provide overloaded versions of the function.\par
Ellipsis arguments are inherited from C and not really a C++ feature. They are unsafe to use and don't work with arguments that have constructors or destructors. Therefore we recommend to avoid them in C++ as much as possible.\par}
{\bkmkstart AAAAAAAAKA}
{\bkmkend AAAAAAAAKA}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
MSVC gives me warning C4301 or C4373 when I define a mock method with a const parameter. Why?
\par}
{\tc\tcl3 \v MSVC gives me warning C4301 or C4373 when I define a mock method with a const parameter. Why?}
If you compile this using Microsoft Visual C++ 2005 SP1:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 class }Foo \{\par
  ...\par
  {\cf17 virtual} {\cf18 void} Bar({\cf17 const} {\cf18 int} i) = 0;\par
\};\par
\par
{\cf17 class }MockFoo : {\cf17 public} Foo \{\par
  ...\par
  MOCK_METHOD({\cf18 void}, Bar, ({\cf17 const} {\cf18 int} i), ({\cf17 override}));\par
\};\par
}
\par
You may get the following warning:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid warning C4301: 'MockFoo::Bar': overriding virtual function only differs from 'Foo::Bar' by const/volatile qualifier\par
}
\par
This is a MSVC bug. The same code compiles fine with gcc, for example. If you use Visual C++ 2008 SP1, you would get the warning:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid warning C4373: 'MockFoo::Bar': virtual function overrides 'Foo::Bar', previous versions of the compiler did not override when parameters only differed by const/volatile qualifiers\par
}
\par
In C++, if you {\i declare}  a function with a {\f2 const}  parameter, the {\f2 const}  modifier is ignored. Therefore, the {\f2 Foo}  base class above is equivalent to:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 class }Foo \{\par
  ...\par
  {\cf17 virtual} {\cf18 void} Bar({\cf18 int} i) = 0;  {\cf20 // int or const int?  Makes no difference.}\par
\};\par
}
\par
In fact, you can {\i declare}  {\f2 Bar()}  with an {\f2 int}  parameter, and define it with a {\f2 const int}  parameter. The compiler will still match them up.\par
Since making a parameter {\f2 const}  is meaningless in the method declaration, we recommend to remove it in both {\f2 Foo}  and {\f2 {\b MockFoo}} . That should workaround the VC bug.\par
Note that we are talking about the {\i top-level}  {\f2 const}  modifier here. If the function parameter is passed by pointer or reference, declaring the pointee or referee as {\f2 const}  is still meaningful. For example, the following two declarations are {\i not}  equivalent:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf18 void} Bar({\cf18 int}* p);         {\cf20 // Neither p nor *p is const.}\par
{\cf18 void} Bar({\cf17 const} {\cf18 int}* p);  {\cf20 // p is not const, but *p is.}\par
}
\par}
{\bkmkstart AAAAAAAAKB}
{\bkmkend AAAAAAAAKB}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
I can't figure out why gMock thinks my expectations are not satisfied. What should I do?
\par}
{\tc\tcl3 \v I can't figure out why gMock thinks my expectations are not satisfied. What should I do?}
You might want to run your test with {\f2 --gmock_verbose=info} . This flag lets gMock print a trace of every mock function call it receives. By studying the trace, you'll gain insights on why the expectations you set are not met.\par
If you see the message "The mock function has no default action set, and its
return type has no default value set.", then try {\f2 adding a default action}. Due to a known issue, unexpected calls on mocks without default actions don't print out a detailed comparison between the actual arguments and the expected arguments.\par}
{\bkmkstart AAAAAAAAKC}
{\bkmkend AAAAAAAAKC}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
My program crashed and <tt>ScopedMockLog</tt> spit out tons of messages. Is it a gMock bug?
\par}
{\tc\tcl3 \v My program crashed and <tt>ScopedMockLog</tt> spit out tons of messages. Is it a gMock bug?}
gMock and {\f2 ScopedMockLog}  are likely doing the right thing here.\par
When a test crashes, the failure signal handler will try to log a lot of information (the stack trace, and the address map, for example). The messages are compounded if you have many threads with depth stacks. When {\f2 ScopedMockLog}  intercepts these messages and finds that they don't match any expectations, it prints an error for each of them.\par
You can learn to ignore the errors, or you can rewrite your expectations to make your test more robust, for example, by adding something like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::AnyNumber;\par
using ::testing::Not;\par
...\par
  {\cf20 // Ignores any log not done by us.}\par
  EXPECT_CALL(log, Log(_, Not(EndsWith({\cf22 "/my_file.cc"})), _))\par
      .Times(AnyNumber());\par
}
\par}
{\bkmkstart AAAAAAAAKD}
{\bkmkend AAAAAAAAKD}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
How can I assert that a function is NEVER called?
\par}
{\tc\tcl3 \v How can I assert that a function is NEVER called?}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
...\par
  EXPECT_CALL(foo, Bar(_))\par
      .Times(0);\par
}
\par}
{\bkmkstart AAAAAAAAKE}
{\bkmkend AAAAAAAAKE}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
I have a failed test where gMock tells me TWICE that a particular expectation is not satisfied. Isn't this redundant?
\par}
{\tc\tcl3 \v I have a failed test where gMock tells me TWICE that a particular expectation is not satisfied. Isn't this redundant?}
When gMock detects a failure, it prints relevant information (the mock function arguments, the state of relevant expectations, and etc) to help the user debug. If another failure is detected, gMock will do the same, including printing the state of relevant expectations.\par
Sometimes an expectation's state didn't change between two failures, and you'll see the same description of the state twice. They are however {\i not}  redundant, as they refer to {\i different points in time} . The fact they are the same {\i is}  interesting information.\par}
{\bkmkstart AAAAAAAAKF}
{\bkmkend AAAAAAAAKF}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
I get a heapcheck failure when using a mock object, but using a real object is fine. What can be wrong?
\par}
{\tc\tcl3 \v I get a heapcheck failure when using a mock object, but using a real object is fine. What can be wrong?}
Does the class (hopefully a pure interface) you are mocking have a virtual destructor?\par
Whenever you derive from a base class, make sure its destructor is virtual. Otherwise Bad Things will happen. Consider the following code:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 class }Base \{\par
 {\cf17 public}:\par
  {\cf20 // Not virtual, but should be.}\par
  ~Base() \{ ... \}\par
  ...\par
\};\par
\par
{\cf17 class }Derived : {\cf17 public} Base \{\par
 {\cf17 public}:\par
  ...\par
 {\cf17 private}:\par
  std::string value_;\par
\};\par
\par
...\par
  Base* p = {\cf17 new} Derived;\par
  ...\par
  {\cf17 delete} p;  {\cf20 // Surprise! ~Base() will be called, but ~Derived() will not}\par
                 {\cf20 // - value_ is leaked.}\par
}
\par
By changing {\f2 ~Base()}  to virtual, {\f2 ~Derived()}  will be correctly called when {\f2 delete p}  is executed, and the heap checker will be happy.\par}
{\bkmkstart AAAAAAAAKG}
{\bkmkend AAAAAAAAKG}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
The "newer expectations override older ones" rule makes writing expectations awkward. Why does gMock do that?
\par}
{\tc\tcl3 \v The "newer expectations override older ones" rule makes writing expectations awkward. Why does gMock do that?}
When people complain about this, often they are referring to code like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;\par
...\par
  {\cf20 // foo.Bar() should be called twice, return 1 the first time, and return}\par
  {\cf20 // 2 the second time.  However, I have to write the expectations in the}\par
  {\cf20 // reverse order.  This sucks big time!!!}\par
  EXPECT_CALL(foo, Bar())\par
      .WillOnce(Return(2))\par
      .RetiresOnSaturation();\par
  EXPECT_CALL(foo, Bar())\par
      .WillOnce(Return(1))\par
      .RetiresOnSaturation();\par
}
\par
The problem, is that they didn't pick the {\b best}  way to express the test's intent.\par
By default, expectations don't have to be matched in {\i any}  particular order. If you want them to match in a certain order, you need to be explicit. This is gMock's (and jMock's) fundamental philosophy: it's easy to accidentally over-specify your tests, and we want to make it harder to do so.\par
There are two better ways to write the test spec. You could either put the expectations in sequence:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;\par
...\par
  {\cf20 // foo.Bar() should be called twice, return 1 the first time, and return}\par
  {\cf20 // 2 the second time.  Using a sequence, we can write the expectations}\par
  {\cf20 // in their natural order.}\par
  \{\par
    InSequence s;\par
    EXPECT_CALL(foo, Bar())\par
        .WillOnce(Return(1))\par
        .RetiresOnSaturation();\par
    EXPECT_CALL(foo, Bar())\par
        .WillOnce(Return(2))\par
        .RetiresOnSaturation();\par
  \}\par
}
\par
or you can put the sequence of actions in the same expectation:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;\par
...\par
  {\cf20 // foo.Bar() should be called twice, return 1 the first time, and return}\par
  {\cf20 // 2 the second time.}\par
  EXPECT_CALL(foo, Bar())\par
      .WillOnce(Return(1))\par
      .WillOnce(Return(2))\par
      .RetiresOnSaturation();\par
}
\par
Back to the original questions: why does gMock search the expectations (and {\f2 ON_CALL} s) from back to front? Because this allows a user to set up a mock's behavior for the common case early (e.g. in the mock's constructor or the test fixture's set-up phase) and customize it with more specific rules later. If gMock searches from front to back, this very useful pattern won't be possible.\par}
{\bkmkstart AAAAAAAAKH}
{\bkmkend AAAAAAAAKH}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
gMock prints a warning when a function without EXPECT_CALL is called, even if I have set its behavior using ON_CALL. Would it be reasonable not to show the warning in this case?
\par}
{\tc\tcl3 \v gMock prints a warning when a function without EXPECT_CALL is called, even if I have set its behavior using ON_CALL. Would it be reasonable not to show the warning in this case?}
When choosing between being neat and being safe, we lean toward the latter. So the answer is that we think it's better to show the warning.\par
Often people write {\f2 ON_CALL} s in the mock object's constructor or {\f2 SetUp()} , as the default behavior rarely changes from test to test. Then in the test body they set the expectations, which are often different for each test. Having an {\f2 ON_CALL}  in the set-up part of a test doesn't mean that the calls are expected. If there's no {\f2 EXPECT_CALL}  and the method is called, it's possibly an error. If we quietly let the call go through without notifying the user, bugs may creep in unnoticed.\par
If, however, you are sure that the calls are OK, you can write\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
...\par
  EXPECT_CALL(foo, Bar(_))\par
      .WillRepeatedly(...);\par
}
\par
instead of\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
...\par
  ON_CALL(foo, Bar(_))\par
      .WillByDefault(...);\par
}
\par
This tells gMock that you do expect the calls and no warning should be printed.\par
Also, you can control the verbosity by specifying {\f2 --gmock_verbose=error} . Other values are {\f2 info}  and {\f2 warning} . If you find the output too noisy when debugging, just choose a less verbose level.\par}
{\bkmkstart AAAAAAAAKI}
{\bkmkend AAAAAAAAKI}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
How can I delete the mock function's argument in an action?
\par}
{\tc\tcl3 \v How can I delete the mock function's argument in an action?}
If your mock function takes a pointer argument and you want to delete that argument, you can use testing::DeleteArg<N>() to delete the N'th (zero-indexed) argument:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
  ...\par
  MOCK_METHOD({\cf18 void}, Bar, (X* x, {\cf17 const} Y& y));\par
  ...\par
  EXPECT_CALL(mock_foo_, Bar(_, _))\par
      .WillOnce(testing::DeleteArg<0>()));\par
}
\par}
{\bkmkstart AAAAAAAAKJ}
{\bkmkend AAAAAAAAKJ}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
How can I perform an arbitrary action on a mock function's argument?
\par}
{\tc\tcl3 \v How can I perform an arbitrary action on a mock function's argument?}
If you find yourself needing to perform some action that's not supported by gMock directly, remember that you can define your own actions using {\b `MakeAction()`} or {\b `MakePolymorphicAction()`}, or you can write a stub function and invoke it using {\b `Invoke()`}.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
  ...\par
  MOCK_METHOD({\cf18 void}, Bar, (X* p));\par
  ...\par
  EXPECT_CALL(mock_foo_, Bar(_))\par
      .WillOnce(Invoke(MyAction(...)));\par
}
\par}
{\bkmkstart AAAAAAAAKK}
{\bkmkend AAAAAAAAKK}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
My code calls a static/global function. Can I mock it?
\par}
{\tc\tcl3 \v My code calls a static/global function. Can I mock it?}
You can, but you need to make some changes.\par
In general, if you find yourself needing to mock a static function, it's a sign that your modules are too tightly coupled (and less flexible, less reusable, less testable, etc). You are probably better off defining a small interface and call the function through that interface, which then can be easily mocked. It's a bit of work initially, but usually pays for itself quickly.\par
This Google Testing Blog {\f2 post} says it excellently. Check it out.\par}
{\bkmkstart AAAAAAAAKL}
{\bkmkend AAAAAAAAKL}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
My mock object needs to do complex stuff. It's a lot of pain to specify the actions. gMock sucks!
\par}
{\tc\tcl3 \v My mock object needs to do complex stuff. It's a lot of pain to specify the actions. gMock sucks!}
I know it's not a question, but you get an answer for free any way. :-)\par
With gMock, you can create mocks in C++ easily. And people might be tempted to use them everywhere. Sometimes they work great, and sometimes you may find them, well, a pain to use. So, what's wrong in the latter case?\par
When you write a test without using mocks, you exercise the code and assert that it returns the correct value or that the system is in an expected state. This is sometimes called "state-based testing".\par
Mocks are great for what some call "interaction-based" testing: instead of checking the system state at the very end, mock objects verify that they are invoked the right way and report an error as soon as it arises, giving you a handle on the precise context in which the error was triggered. This is often more effective and economical to do than state-based testing.\par
If you are doing state-based testing and using a test double just to simulate the real object, you are probably better off using a fake. Using a mock in this case causes pain, as it's not a strong point for mocks to perform complex actions. If you experience this and think that mocks suck, you are just not using the right tool for your problem. Or, you might be trying to solve the wrong problem. :-)\par}
{\bkmkstart AAAAAAAAKM}
{\bkmkend AAAAAAAAKM}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
I got a warning "Uninteresting function call encountered - default action taken.." Should I panic?
\par}
{\tc\tcl3 \v I got a warning "Uninteresting function call encountered - default action taken.." Should I panic?}
By all means, NO! It's just an FYI. :-)\par
What it means is that you have a mock function, you haven't set any expectations on it (by gMock's rule this means that you are not interested in calls to this function and therefore it can be called any number of times), and it is called. That's OK - you didn't say it's not OK to call the function!\par
What if you actually meant to disallow this function to be called, but forgot to write {\f2 EXPECT_CALL(foo, Bar()).Times(0)} ? While one can argue that it's the user's fault, gMock tries to be nice and prints you a note.\par
So, when you see the message and believe that there shouldn't be any uninteresting calls, you should investigate what's going on. To make your life easier, gMock dumps the stack trace when an uninteresting call is encountered. From that you can figure out which mock function it is, and how it is called.\par}
{\bkmkstart AAAAAAAAKN}
{\bkmkend AAAAAAAAKN}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
I want to define a custom action. Should I use Invoke() or implement the ActionInterface interface?
\par}
{\tc\tcl3 \v I want to define a custom action. Should I use Invoke() or implement the ActionInterface interface?}
Either way is fine - you want to choose the one that's more convenient for your circumstance.\par
Usually, if your action is for a particular function type, defining it using {\f2 Invoke()}  should be easier; if your action can be used in functions of different types (e.g. if you are defining {\f2 Return(*value*)} ), {\f2 MakePolymorphicAction()}  is easiest. Sometimes you want precise control on what types of functions the action can be used in, and implementing {\f2 ActionInterface}  is the way to go here. See the implementation of {\f2 Return()}  in {\f2 {\b gmock-actions.h}}  for an example.\par}
{\bkmkstart AAAAAAAAKO}
{\bkmkend AAAAAAAAKO}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
I use SetArgPointee() in WillOnce(), but gcc complains about "conflicting return type specified". What does it mean?
\par}
{\tc\tcl3 \v I use SetArgPointee() in WillOnce(), but gcc complains about "conflicting return type specified". What does it mean?}
You got this error as gMock has no idea what value it should return when the mock method is called. {\f2 SetArgPointee()}  says what the side effect is, but doesn't say what the return value should be. You need {\f2 DoAll()}  to chain a {\f2 SetArgPointee()}  with a {\f2 Return()}  that provides a value appropriate to the API being mocked.\par
See this {\f2 recipe} for more details and an example.\par}
{\bkmkstart AAAAAAAAKP}
{\bkmkend AAAAAAAAKP}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
I have a huge mock class, and Microsoft Visual C++ runs out of memory when compiling it. What can I do?
\par}
{\tc\tcl3 \v I have a huge mock class, and Microsoft Visual C++ runs out of memory when compiling it. What can I do?}
We've noticed that when the {\f2 /clr}  compiler flag is used, Visual C++ uses 5~6 times as much memory when compiling a mock class. We suggest to avoid {\f2 /clr}  when compiling native C++ mocks. \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
gMock for Dummies{\tc \v gMock for Dummies}\par \pard\plain 
{\bkmkstart AAAAAAADXS}
{\bkmkend AAAAAAADXS}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{\bkmkstart AAAAAAAAKQ}
{\bkmkend AAAAAAAAKQ}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
What Is gMock?
\par}
{\tc\tcl2 \v What Is gMock?}
When you write a prototype or test, often it's not feasible or wise to rely on real objects entirely. A {\b mock object}  implements the same interface as a real object (so it can be used as one), but lets you specify at run time how it will be used and what it should do (which methods will be called? in which order? how many times? with what arguments? what will they return? etc).\par
It is easy to confuse the term {\i fake objects}  with mock objects. Fakes and mocks actually mean very different things in the Test-Driven Development (TDD) community:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Fake}  objects have working implementations, but usually take some shortcut (perhaps to make the operations less expensive), which makes them not suitable for production. An in-memory file system would be an example of a fake.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mocks}  are objects pre-programmed with {\i expectations} , which form a specification of the calls they are expected to receive.\par}
\par
If all this seems too abstract for you, don't worry - the most important thing to remember is that a mock allows you to check the {\i interaction}  between itself and code that uses it. The difference between fakes and mocks shall become much clearer once you start to use mocks.\par
{\b gMock}  is a library (sometimes we also call it a "framework" to make it sound cool) for creating mock classes and using them. It does to C++ what jMock/EasyMock does to Java (well, more or less).\par
When using gMock,\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab first, you use some simple macros to describe the interface you want to mock, and they will expand to the implementation of your mock class;\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
2.\tab next, you create some mock objects and specify its expectations and behavior using an intuitive syntax;\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
3.\tab then you exercise code that uses the mock objects. gMock will catch any violation to the expectations as soon as it arises.\par}
\par
\par}
{\bkmkstart AAAAAAAAKR}
{\bkmkend AAAAAAAAKR}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Why gMock?
\par}
{\tc\tcl2 \v Why gMock?}
While mock objects help you remove unnecessary dependencies in tests and make them fast and reliable, using mocks manually in C++ is {\i hard} :\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Someone has to implement the mocks. The job is usually tedious and error-prone. No wonder people go great distance to avoid it.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The quality of those manually written mocks is a bit, uh, unpredictable. You may see some really polished ones, but you may also see some that were hacked up in a hurry and have all sorts of ad hoc restrictions.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The knowledge you gained from using one mock doesn't transfer to the next one.\par}
\par
In contrast, Java and Python programmers have some fine mock frameworks (jMock, EasyMock, etc), which automate the creation of mocks. As a result, mocking is a proven effective technique and widely adopted practice in those communities. Having the right tool absolutely makes the difference.\par
gMock was built to help C++ programmers. It was inspired by jMock and EasyMock, but designed with C++'s specifics in mind. It is your friend if any of the following problems is bothering you:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You are stuck with a sub-optimal design and wish you had done more prototyping before it was too late, but prototyping in C++ is by no means "rapid".\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Your tests are slow as they depend on too many libraries or use expensive resources (e.g. a database).\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Your tests are brittle as some resources they use are unreliable (e.g. the network).\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You want to test how your code handles a failure (e.g. a file checksum error), but it's not easy to cause one.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You need to make sure that your module interacts with other modules in the right way, but it's hard to observe the interaction; therefore you resort to observing the side effects at the end of the action, but it's awkward at best.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You want to "mock out" your dependencies, except that they don't have mock implementations yet; and, frankly, you aren't thrilled by some of those hand-written mocks.\par}
\par
We encourage you to use gMock as\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
a {\i design}  tool, for it lets you experiment with your interface design early and often. More iterations lead to better designs!\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
a {\i testing}  tool to cut your tests' outbound dependencies and probe the interaction between your module and its collaborators.\par}
\par
\par}
{\bkmkstart AAAAAAAAKS}
{\bkmkend AAAAAAAAKS}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Getting Started
\par}
{\tc\tcl2 \v Getting Started}
gMock is bundled with googletest.\par}
{\bkmkstart AAAAAAAAKT}
{\bkmkend AAAAAAAAKT}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
A Case for Mock Turtles
\par}
{\tc\tcl2 \v A Case for Mock Turtles}
Let's look at an example. Suppose you are developing a graphics program that relies on a {\f2 LOGO}-like API for drawing. How would you test that it does the right thing? Well, you can run it and compare the screen with a golden screen snapshot, but let's admit it: tests like this are expensive to run and fragile (What if you just upgraded to a shiny new graphics card that has better anti-aliasing? Suddenly you have to update all your golden images.). It would be too painful if all your tests are like this. Fortunately, you learned about {\f2 Dependency Injection} and know the right thing to do: instead of having your application talk to the system API directly, wrap the API in an interface (say, {\f2 Turtle} ) and code to that interface:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 class }Turtle \{\par
  ...\par
  {\cf17 virtual} ~Turtle() \{\}\par
  {\cf17 virtual} {\cf18 void} PenUp() = 0;\par
  {\cf17 virtual} {\cf18 void} PenDown() = 0;\par
  {\cf17 virtual} {\cf18 void} Forward({\cf18 int} distance) = 0;\par
  {\cf17 virtual} {\cf18 void} Turn({\cf18 int} degrees) = 0;\par
  {\cf17 virtual} {\cf18 void} GoTo({\cf18 int} x, {\cf18 int} y) = 0;\par
  {\cf17 virtual} {\cf18 int} GetX() {\cf17 const} = 0;\par
  {\cf17 virtual} {\cf18 int} GetY() {\cf17 const} = 0;\par
\};\par
}
\par
(Note that the destructor of {\f2 Turtle}  {\b must}  be virtual, as is the case for {\b all}  classes you intend to inherit from - otherwise the destructor of the derived class will not be called when you delete an object through a base pointer, and you'll get corrupted program states like memory leaks.)\par
You can control whether the turtle's movement will leave a trace using {\f2 PenUp()}  and {\f2 PenDown()} , and control its movement using {\f2 Forward()} , {\f2 Turn()} , and {\f2 GoTo()} . Finally, {\f2 GetX()}  and {\f2 GetY()}  tell you the current position of the turtle.\par
Your program will normally use a real implementation of this interface. In tests, you can use a mock implementation instead. This allows you to easily check what drawing primitives your program is calling, with what arguments, and in which order. Tests written this way are much more robust (they won't break because your new machine does anti-aliasing differently), easier to read and maintain (the intent of a test is expressed in the code, not in some binary images), and run {\i much, much faster} .\par}
{\bkmkstart AAAAAAAAKU}
{\bkmkend AAAAAAAAKU}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Writing the Mock Class
\par}
{\tc\tcl2 \v Writing the Mock Class}
If you are lucky, the mocks you need to use have already been implemented by some nice people. If, however, you find yourself in the position to write a mock class, relax - gMock turns this task into a fun game! (Well, almost.)\par
{\bkmkstart AAAAAAAAKV}
{\bkmkend AAAAAAAAKV}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
How to Define It
\par}
{\tc\tcl3 \v How to Define It}
Using the {\f2 Turtle}  interface as example, here are the simple steps you need to follow:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Derive a class {\f2 MockTurtle}  from {\f2 Turtle} .\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Take a {\i virtual}  function of {\f2 Turtle}  (while it's possible to {\f2 mock non-virtual methods using templates}, it's much more involved).\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
In the {\f2 public:}  section of the child class, write {\f2 MOCK_METHOD();} \par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Now comes the fun part: you take the function signature, cut-and-paste it into the macro, and add two commas - one between the return type and the name, another between the name and the argument list.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If you're mocking a const method, add a 4th parameter containing {\f2 (const)}  (the parentheses are required).\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Since you're overriding a virtual method, we suggest adding the {\f2 override}  keyword. For const methods the 4th parameter becomes {\f2 (const, override)} , for non-const methods just {\f2 (override)} . This isn't mandatory.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Repeat until all virtual functions you want to mock are done. (It goes without saying that {\i all}  pure virtual methods in your abstract class must be either mocked or overridden.)\par}
\par
After the process, you should have something like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf21 #include "gmock/gmock.h"}  {\cf20 // Brings in gMock.}\par
\par
{\cf17 class }MockTurtle : {\cf17 public} Turtle \{\par
 {\cf17 public}:\par
  ...\par
  MOCK_METHOD({\cf18 void}, PenUp, (), ({\cf17 override}));\par
  MOCK_METHOD({\cf18 void}, PenDown, (), ({\cf17 override}));\par
  MOCK_METHOD({\cf18 void}, Forward, ({\cf18 int} distance), ({\cf17 override}));\par
  MOCK_METHOD({\cf18 void}, Turn, ({\cf18 int} degrees), ({\cf17 override}));\par
  MOCK_METHOD({\cf18 void}, GoTo, ({\cf18 int} x, {\cf18 int} y), ({\cf17 override}));\par
  MOCK_METHOD({\cf18 int}, GetX, (), ({\cf17 const}, {\cf17 override}));\par
  MOCK_METHOD({\cf18 int}, GetY, (), ({\cf17 const}, {\cf17 override}));\par
\};\par
}
\par
You don't need to define these mock methods somewhere else - the {\f2 MOCK_METHOD}  macro will generate the definitions for you. It's that simple!\par}
{\bkmkstart AAAAAAAAKW}
{\bkmkend AAAAAAAAKW}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Where to Put It
\par}
{\tc\tcl3 \v Where to Put It}
When you define a mock class, you need to decide where to put its definition. Some people put it in a {\f2 _test.cc} . This is fine when the interface being mocked (say, {\f2 Foo} ) is owned by the same person or team. Otherwise, when the owner of {\f2 Foo}  changes it, your test could break. (You can't really expect {\f2 Foo} 's maintainer to fix every test that uses {\f2 Foo} , can you?)\par
Generally, you should not mock classes you don't own. If you must mock such a class owned by others, define the mock class in {\f2 Foo} 's Bazel package (usually the same directory or a {\f2 testing}  sub-directory), and put it in a {\f2 .h}  and a {\f2 cc_library}  with {\f2 testonly=True} . Then everyone can reference them from their tests. If {\f2 Foo}  ever changes, there is only one copy of {\f2 {\b MockFoo}}  to change, and only tests that depend on the changed methods need to be fixed.\par
Another way to do it: you can introduce a thin layer {\f2 FooAdaptor}  on top of {\f2 Foo}  and code to this new interface. Since you own {\f2 FooAdaptor} , you can absorb changes in {\f2 Foo}  much more easily. While this is more work initially, carefully choosing the adaptor interface can make your code easier to write and more readable (a net win in the long run), as you can choose {\f2 FooAdaptor}  to fit your specific domain much better than {\f2 Foo}  does.\par}
\par}
{\bkmkstart AAAAAAAAKX}
{\bkmkend AAAAAAAAKX}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Using Mocks in Tests
\par}
{\tc\tcl2 \v Using Mocks in Tests}
Once you have a mock class, using it is easy. The typical work flow is:\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Import the gMock names from the {\f2 testing}  namespace such that you can use them unqualified (You only have to do it once per file). Remember that namespaces are a good idea.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
2.\tab Create some mock objects.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
3.\tab Specify your expectations on them (How many times will a method be called? With what arguments? What should it do? etc.).\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
4.\tab Exercise some code that uses the mocks; optionally, check the result using googletest assertions. If a mock method is called more than expected or with wrong arguments, you'll get an error immediately.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
5.\tab When a mock is destructed, gMock will automatically check whether all expectations on it have been satisfied.\par}
\par
Here's an example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf21 #include "path/to/mock-turtle.h"}\par
{\cf21 #include "gmock/gmock.h"}\par
{\cf21 #include "gtest/gtest.h"}\par
\par
using ::testing::AtLeast;                         {\cf20 // #1}\par
\par
TEST(PainterTest, CanDrawSomething) \{\par
  MockTurtle turtle;                              {\cf20 // #2}\par
  EXPECT_CALL(turtle, PenDown())                  {\cf20 // #3}\par
      .Times(AtLeast(1));\par
\par
  Painter painter(&turtle);                       {\cf20 // #4}\par
\par
  EXPECT_TRUE(painter.DrawCircle(0, 0, 10));      {\cf20 // #5}\par
\}\par
}
\par
As you might have guessed, this test checks that {\f2 PenDown()}  is called at least once. If the {\f2 painter}  object didn't call this method, your test will fail with a message like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid path/to/my_test.cc:119: Failure\par
Actual function call count doesn't match this expectation:\par
Actually: never called;\par
Expected: called at least once.\par
Stack trace:\par
...\par
}
\par
{\b Tip 1:}  If you run the test from an Emacs buffer, you can hit {\f2 <Enter>}  on the line number to jump right to the failed expectation.\par
{\b Tip 2:}  If your mock objects are never deleted, the final verification won't happen. Therefore it's a good idea to turn on the heap checker in your tests when you allocate mocks on the heap. You get that automatically if you use the {\f2 gtest_main}  library already.\par
{\b Important note:}  gMock requires expectations to be set {\b before}  the mock functions are called, otherwise the behavior is {\b undefined} . Do not alternate between calls to {\f2 EXPECT_CALL()}  and calls to the mock functions, and do not set any expectations on a mock after passing the mock to an API.\par
This means {\f2 EXPECT_CALL()}  should be read as expecting that a call will occur {\i in the future} , not that a call has occurred. Why does gMock work like that? Well, specifying the expectation beforehand allows gMock to report a violation as soon as it rises, when the context (stack trace, etc) is still available. This makes debugging much easier.\par
Admittedly, this test is contrived and doesn't do much. You can easily achieve the same effect without using gMock. However, as we shall reveal soon, gMock allows you to do {\i so much more}  with the mocks.\par}
{\bkmkstart AAAAAAAAKY}
{\bkmkend AAAAAAAAKY}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Setting Expectations
\par}
{\tc\tcl2 \v Setting Expectations}
The key to using a mock object successfully is to set the {\i right expectations}  on it. If you set the expectations too strict, your test will fail as the result of unrelated changes. If you set them too loose, bugs can slip through. You want to do it just right such that your test can catch exactly the kind of bugs you intend it to catch. gMock provides the necessary means for you to do it "just
right."\par
{\bkmkstart AAAAAAAAKZ}
{\bkmkend AAAAAAAAKZ}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
General Syntax
\par}
{\tc\tcl3 \v General Syntax}
In gMock we use the {\f2 EXPECT_CALL()}  macro to set an expectation on a mock method. The general syntax is:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(mock_object, method(matchers))\par
    .Times(cardinality)\par
    .WillOnce(action)\par
    .WillRepeatedly(action);\par
}
\par
The macro has two arguments: first the mock object, and then the method and its arguments. Note that the two are separated by a comma ({\f2 ,} ), not a period ({\f2 .} ). (Why using a comma? The answer is that it was necessary for technical reasons.) If the method is not overloaded, the macro can also be called without matchers:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(mock_object, non-overloaded-method)\par
    .Times(cardinality)\par
    .WillOnce(action)\par
    .WillRepeatedly(action);\par
}
\par
This syntax allows the test writer to specify "called with any arguments" without explicitly specifying the number or types of arguments. To avoid unintended ambiguity, this syntax may only be used for methods that are not overloaded.\par
Either form of the macro can be followed by some optional {\i clauses}  that provide more information about the expectation. We'll discuss how each clause works in the coming sections.\par
This syntax is designed to make an expectation read like English. For example, you can probably guess that\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;\par
...\par
EXPECT_CALL(turtle, GetX())\par
    .Times(5)\par
    .WillOnce(Return(100))\par
    .WillOnce(Return(150))\par
    .WillRepeatedly(Return(200));\par
}
\par
says that the {\f2 turtle}  object's {\f2 GetX()}  method will be called five times, it will return 100 the first time, 150 the second time, and then 200 every time. Some people like to call this style of syntax a Domain-Specific Language (DSL).\par
\{: .callout .note\} {\b Note:}  Why do we use a macro to do this? Well it serves two purposes: first it makes expectations easily identifiable (either by {\f2 grep}  or by a human reader), and second it allows gMock to include the source file location of a failed expectation in messages, making debugging easier.\par}
{\bkmkstart AAAAAAAALA}
{\bkmkend AAAAAAAALA}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Matchers: What Arguments Do We Expect?
\par}
{\tc\tcl3 \v Matchers: What Arguments Do We Expect?}
When a mock function takes arguments, we may specify what arguments we are expecting, for example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf20 // Expects the turtle to move forward by 100 units.}\par
EXPECT_CALL(turtle, Forward(100));\par
}
\par
Oftentimes you do not want to be too specific. Remember that talk about tests being too rigid? Over specification leads to brittle tests and obscures the intent of tests. Therefore we encourage you to specify only what's necessary\'97no more, no less. If you aren't interested in the value of an argument, write {\f2 _}  as the argument, which means "anything goes":\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
...\par
{\cf20 // Expects that the turtle jumps to somewhere on the x=50 line.}\par
EXPECT_CALL(turtle, GoTo(50, _));\par
}
\par
{\f2 _}  is an instance of what we call {\b matchers} . A matcher is like a predicate and can test whether an argument is what we'd expect. You can use a matcher inside {\f2 EXPECT_CALL()}  wherever a function argument is expected. {\f2 _}  is a convenient way of saying "any value".\par
In the above examples, {\f2 100}  and {\f2 50}  are also matchers; implicitly, they are the same as {\f2 Eq(100)}  and {\f2 Eq(50)} , which specify that the argument must be equal (using {\f2 operator==} ) to the matcher argument. There are many {\b built-in matchers} for common types (as well as {\f2 custom matchers}); for example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Ge;\par
...\par
{\cf20 // Expects the turtle moves forward by at least 100.}\par
EXPECT_CALL(turtle, Forward(Ge(100)));\par
}
\par
If you don't care about {\i any}  arguments, rather than specify {\f2 _}  for each of them you may instead omit the parameter list:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf20 // Expects the turtle to move forward.}\par
EXPECT_CALL(turtle, Forward);\par
{\cf20 // Expects the turtle to jump somewhere.}\par
EXPECT_CALL(turtle, GoTo);\par
}
\par
This works for all non-overloaded methods; if a method is overloaded, you need to help gMock resolve which overload is expected by specifying the number of arguments and possibly also the {\f2 types of the arguments}.\par}
{\bkmkstart AAAAAAAALB}
{\bkmkend AAAAAAAALB}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Cardinalities: How Many Times Will It Be Called?
\par}
{\tc\tcl3 \v Cardinalities: How Many Times Will It Be Called?}
The first clause we can specify following an {\f2 EXPECT_CALL()}  is {\f2 Times()} . We call its argument a {\b cardinality}  as it tells {\i how many times}  the call should occur. It allows us to repeat an expectation many times without actually writing it as many times. More importantly, a cardinality can be "fuzzy", just like a matcher can be. This allows a user to express the intent of a test exactly.\par
An interesting special case is when we say {\f2 Times(0)} . You may have guessed - it means that the function shouldn't be called with the given arguments at all, and gMock will report a googletest failure whenever the function is (wrongfully) called.\par
We've seen {\f2 AtLeast(n)}  as an example of fuzzy cardinalities earlier. For the list of built-in cardinalities you can use, see {\f2 here}.\par
The {\f2 Times()}  clause can be omitted. {\b If you omit {\f2 Times()} , gMock will infer the cardinality for you.}  The rules are easy to remember:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If {\b neither}  {\f2 WillOnce()}  {\b nor}  {\f2 WillRepeatedly()}  is in the {\f2 EXPECT_CALL()} , the inferred cardinality is {\f2 Times(1)} .\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If there are {\i n}  {\f2 WillOnce()} 's but {\b no}  {\f2 WillRepeatedly()} , where {\i n}  >= 1, the cardinality is {\f2 Times(n)} .\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If there are {\i n}  {\f2 WillOnce()} 's and {\b one}  {\f2 WillRepeatedly()} , where {\i n}  >= 0, the cardinality is {\f2 Times(AtLeast(n))} .\par}
\par
{\b Quick quiz:}  what do you think will happen if a function is expected to be called twice but actually called four times?\par}
{\bkmkstart AAAAAAAALC}
{\bkmkend AAAAAAAALC}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Actions: What Should It Do?
\par}
{\tc\tcl3 \v Actions: What Should It Do?}
Remember that a mock object doesn't really have a working implementation? We as users have to tell it what to do when a method is invoked. This is easy in gMock.\par
First, if the return type of a mock function is a built-in type or a pointer, the function has a {\b default action}  (a {\f2 void}  function will just return, a {\f2 bool}  function will return {\f2 false} , and other functions will return 0). In addition, in C++ 11 and above, a mock function whose return type is default-constructible (i.e. has a default constructor) has a default action of returning a default-constructed value. If you don't say anything, this behavior will be used.\par
Second, if a mock function doesn't have a default action, or the default action doesn't suit you, you can specify the action to be taken each time the expectation matches using a series of {\f2 WillOnce()}  clauses followed by an optional {\f2 WillRepeatedly()} . For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;\par
...\par
EXPECT_CALL(turtle, GetX())\par
     .WillOnce(Return(100))\par
     .WillOnce(Return(200))\par
     .WillOnce(Return(300));\par
}
\par
says that {\f2 turtle.GetX()}  will be called {\i exactly three times}  (gMock inferred this from how many {\f2 WillOnce()}  clauses we've written, since we didn't explicitly write {\f2 Times()} ), and will return 100, 200, and 300 respectively.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;\par
...\par
EXPECT_CALL(turtle, GetY())\par
     .WillOnce(Return(100))\par
     .WillOnce(Return(200))\par
     .WillRepeatedly(Return(300));\par
}
\par
says that {\f2 turtle.GetY()}  will be called {\i at least twice}  (gMock knows this as we've written two {\f2 WillOnce()}  clauses and a {\f2 WillRepeatedly()}  while having no explicit {\f2 Times()} ), will return 100 and 200 respectively the first two times, and 300 from the third time on.\par
Of course, if you explicitly write a {\f2 Times()} , gMock will not try to infer the cardinality itself. What if the number you specified is larger than there are {\f2 WillOnce()}  clauses? Well, after all {\f2 WillOnce()} s are used up, gMock will do the {\i default}  action for the function every time (unless, of course, you have a {\f2 WillRepeatedly()} .).\par
What can we do inside {\f2 WillOnce()}  besides {\f2 Return()} ? You can return a reference using {\f2 ReturnRef(} *{\f2 variable} *{\f2 )} , or invoke a pre-defined function, among {\f2 others}.\par
{\b Important note:}  The {\f2 EXPECT_CALL()}  statement evaluates the action clause only once, even though the action may be performed many times. Therefore you must be careful about side effects. The following may not do what you want:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;\par
...\par
int n = 100;\par
EXPECT_CALL(turtle, GetX())\par
    .Times(4)\par
    .WillRepeatedly(Return(n++));\par
}
\par
Instead of returning 100, 101, 102, ..., consecutively, this mock function will always return 100 as {\f2 n++}  is only evaluated once. Similarly, {\f2 Return(new Foo)}  will create a new {\f2 Foo}  object when the {\f2 EXPECT_CALL()}  is executed, and will return the same pointer every time. If you want the side effect to happen every time, you need to define a custom action, which we'll teach in the {\b cook book}.\par
Time for another quiz! What do you think the following means?\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;\par
...\par
EXPECT_CALL(turtle, GetY())\par
    .Times(4)\par
    .WillOnce(Return(100));\par
}
\par
Obviously {\f2 turtle.GetY()}  is expected to be called four times. But if you think it will return 100 every time, think twice! Remember that one {\f2 WillOnce()}  clause will be consumed each time the function is invoked and the default action will be taken afterwards. So the right answer is that {\f2 turtle.GetY()}  will return 100 the first time, but {\b return 0 from the second time on} , as returning 0 is the default action for {\f2 int}  functions.\par}
{\bkmkstart AAAAAAAALD}
{\bkmkend AAAAAAAALD}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Using Multiple Expectations
\par}
{\tc\tcl3 \v Using Multiple Expectations}
So far we've only shown examples where you have a single expectation. More realistically, you'll specify expectations on multiple mock methods which may be from multiple mock objects.\par
By default, when a mock method is invoked, gMock will search the expectations in the {\b reverse order}  they are defined, and stop when an active expectation that matches the arguments is found (you can think of it as "newer rules override
older ones."). If the matching expectation cannot take any more calls, you will get an upper-bound-violated failure. Here's an example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
...\par
EXPECT_CALL(turtle, Forward(_));  {\cf20 // #1}\par
EXPECT_CALL(turtle, Forward(10))  {\cf20 // #2}\par
    .Times(2);\par
}
\par
If {\f2 Forward(10)}  is called three times in a row, the third time it will be an error, as the last matching expectation (#2) has been saturated. If, however, the third {\f2 Forward(10)}  call is replaced by {\f2 Forward(20)} , then it would be OK, as now #1 will be the matching expectation.\par
\{: .callout .note\} {\b Note:}  Why does gMock search for a match in the {\i reverse}  order of the expectations? The reason is that this allows a user to set up the default expectations in a mock object's constructor or the test fixture's set-up phase and then customize the mock by writing more specific expectations in the test body. So, if you have two expectations on the same method, you want to put the one with more specific matchers {\b after}  the other, or the more specific rule would be shadowed by the more general one that comes after it.\par
\{: .callout .tip\} {\b Tip:}  It is very common to start with a catch-all expectation for a method and {\f2 Times(AnyNumber())}  (omitting arguments, or with {\f2 _}  for all arguments, if overloaded). This makes any calls to the method expected. This is not necessary for methods that are not mentioned at all (these are "uninteresting"), but is useful for methods that have some expectations, but for which other calls are ok. See {\f2 Understanding Uninteresting vs Unexpected Calls}.\par}
{\bkmkstart AAAAAAAAIA}
{\bkmkend AAAAAAAAIA}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Expecting Ordered Calls
\par}
{\tc\tcl3 \v Expecting Ordered Calls}
By default, an expectation can match a call even though an earlier expectation hasn't been satisfied. In other words, the calls don't have to occur in the order the expectations are specified.\par
Sometimes, you may want all the expected calls to occur in a strict order. To say this in gMock is easy:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::InSequence;\par
...\par
TEST(FooTest, DrawsLineSegment) \{\par
  ...\par
  \{\par
    InSequence seq;\par
\par
    EXPECT_CALL(turtle, PenDown());\par
    EXPECT_CALL(turtle, Forward(100));\par
    EXPECT_CALL(turtle, PenUp());\par
  \}\par
  Foo();\par
\}\par
}
\par
By creating an object of type {\f2 InSequence} , all expectations in its scope are put into a {\i sequence}  and have to occur {\i sequentially} . Since we are just relying on the constructor and destructor of this object to do the actual work, its name is really irrelevant.\par
In this example, we test that {\f2 Foo()}  calls the three expected functions in the order as written. If a call is made out-of-order, it will be an error.\par
(What if you care about the relative order of some of the calls, but not all of them? Can you specify an arbitrary partial order? The answer is ... yes! The details can be found {\f2 here}.)\par}
{\bkmkstart AAAAAAAALE}
{\bkmkend AAAAAAAALE}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
All Expectations Are Sticky (Unless Said Otherwise)
\par}
{\tc\tcl3 \v All Expectations Are Sticky (Unless Said Otherwise)}
Now let's do a quick quiz to see how well you can use this mock stuff already. How would you test that the turtle is asked to go to the origin {\i exactly twice}  (you want to ignore any other instructions it receives)?\par
After you've come up with your answer, take a look at ours and compare notes (solve it yourself first - don't cheat!):\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::AnyNumber;\par
...\par
EXPECT_CALL(turtle, GoTo(_, _))  {\cf20 // #1}\par
     .Times(AnyNumber());\par
EXPECT_CALL(turtle, GoTo(0, 0))  {\cf20 // #2}\par
     .Times(2);\par
}
\par
Suppose {\f2 turtle.GoTo(0, 0)}  is called three times. In the third time, gMock will see that the arguments match expectation #2 (remember that we always pick the last matching expectation). Now, since we said that there should be only two such calls, gMock will report an error immediately. This is basically what we've told you in the {\b Using Multiple Expectations} section above.\par
This example shows that {\b expectations in gMock are "sticky" by default} , in the sense that they remain active even after we have reached their invocation upper bounds. This is an important rule to remember, as it affects the meaning of the spec, and is {\b different}  to how it's done in many other mocking frameworks (Why'd we do that? Because we think our rule makes the common cases easier to express and understand.).\par
Simple? Let's see if you've really understood it: what does the following code say?\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;\par
...\par
for ({\cf18 int} i = n; i > 0; i--) \{\par
  EXPECT_CALL(turtle, GetX())\par
      .WillOnce(Return(10*i));\par
\}\par
}
\par
If you think it says that {\f2 turtle.GetX()}  will be called {\f2 n}  times and will return 10, 20, 30, ..., consecutively, think twice! The problem is that, as we said, expectations are sticky. So, the second time {\f2 turtle.GetX()}  is called, the last (latest) {\f2 EXPECT_CALL()}  statement will match, and will immediately lead to an "upper bound violated" error - this piece of code is not very useful!\par
One correct way of saying that {\f2 turtle.GetX()}  will return 10, 20, 30, ..., is to explicitly say that the expectations are {\i not}  sticky. In other words, they should {\i retire}  as soon as they are saturated:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;\par
...\par
for ({\cf18 int} i = n; i > 0; i--) \{\par
  EXPECT_CALL(turtle, GetX())\par
      .WillOnce(Return(10*i))\par
      .RetiresOnSaturation();\par
\}\par
}
\par
And, there's a better way to do it: in this case, we expect the calls to occur in a specific order, and we line up the actions to match the order. Since the order is important here, we should make it explicit using a sequence:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::InSequence;\par
using ::testing::Return;\par
...\par
\{\par
  InSequence s;\par
\par
  {\cf19 for} ({\cf18 int} i = 1; i <= n; i++) \{\par
    EXPECT_CALL(turtle, GetX())\par
        .WillOnce(Return(10*i))\par
        .RetiresOnSaturation();\par
  \}\par
\}\par
}
\par
By the way, the other situation where an expectation may {\i not}  be sticky is when it's in a sequence - as soon as another expectation that comes after it in the sequence has been used, it automatically retires (and will never be used to match any call).\par}
{\bkmkstart AAAAAAAALF}
{\bkmkend AAAAAAAALF}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Uninteresting Calls
\par}
{\tc\tcl3 \v Uninteresting Calls}
A mock object may have many methods, and not all of them are that interesting. For example, in some tests we may not care about how many times {\f2 GetX()}  and {\f2 GetY()}  get called.\par
In gMock, if you are not interested in a method, just don't say anything about it. If a call to this method occurs, you'll see a warning in the test output, but it won't be a failure. This is called "naggy" behavior; to change, see {\f2 The Nice, the Strict, and the Naggy}. \par}
\par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
GoogleTest User's Guide{\tc \v GoogleTest User's Guide}\par \pard\plain 
{\bkmkstart AAAAAAADXT}
{\bkmkend AAAAAAADXT}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{\bkmkstart AAAAAAAALG}
{\bkmkend AAAAAAAALG}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Welcome to GoogleTest!
\par}
{\tc\tcl2 \v Welcome to GoogleTest!}
GoogleTest is Google's C++ testing and mocking framework. This user's guide has the following contents:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b GoogleTest Primer} - Teaches you how to write simple tests using GoogleTest. Read this first if you are new to GoogleTest.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b GoogleTest Advanced} - Read this when you've finished the Primer and want to utilize GoogleTest to its full potential.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b GoogleTest Samples} - Describes some GoogleTest samples.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b GoogleTest FAQ} - Have a question? Want some tips? Check here first.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mocking for Dummies} - Teaches you how to create mock objects and use them in tests.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mocking Cookbook} - Includes tips and approaches to common mocking use cases.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mocking Cheat Sheet} - A handy reference for matchers, actions, invariants, and more.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mocking FAQ} - Contains answers to some mocking-specific questions. \par}
\par
\par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Using GoogleTest from various build systems{\tc \v Using GoogleTest from various build systems}\par \pard\plain 
{\bkmkstart AAAAAAADXU}
{\bkmkend AAAAAAADXU}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
GoogleTest comes with pkg-config files that can be used to determine all necessary flags for compiling and linking to GoogleTest (and GoogleMock). Pkg-config is a standardised plain-text format containing\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the includedir (-I) path\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
necessary macro (-D) definitions\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
further required flags (-pthread)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the library (-L) path\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the library (-l) to link to\par}
\par
All current build systems support pkg-config in one way or another. For all examples here we assume you want to compile the sample {\f2 samples/sample3_unittest.cc} .\par
{\bkmkstart AAAAAAAALH}
{\bkmkend AAAAAAAALH}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
CMake
\par}
{\tc\tcl3 \v CMake}
Using {\f2 pkg-config}  in CMake is fairly easy:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid cmake_minimum_required(VERSION 3.0)\par
\par
cmake_policy(SET CMP0048 NEW)\par
project(my_gtest_pkgconfig VERSION 0.0.1 LANGUAGES CXX)\par
\par
find_package(PkgConfig)\par
pkg_search_module(GTEST REQUIRED gtest_main)\par
\par
add_executable(testapp samples/sample3_unittest.cc)\par
target_link_libraries(testapp $\{GTEST_LDFLAGS\})\par
target_compile_options(testapp PUBLIC $\{GTEST_CFLAGS\})\par
\par
include(CTest)\par
add_test(first_and_only_test testapp)\par
}
\par
It is generally recommended that you use {\f2 target_compile_options}  + {\f2 _CFLAGS}  over {\f2 target_include_directories}  + {\f2 _INCLUDE_DIRS}  as the former includes not just -I flags (GoogleTest might require a macro indicating to internal headers that all libraries have been compiled with threading enabled. In addition, GoogleTest might also require {\f2 -pthread}  in the compiling step, and as such splitting the pkg-config {\f2 Cflags}  variable into include dirs and macros for {\f2 target_compile_definitions()}  might still miss this). The same recommendation goes for using {\f2 _LDFLAGS}  over the more commonplace {\f2 _LIBRARIES} , which happens to discard {\f2 -L}  flags and {\f2 -pthread} .\par}
{\bkmkstart AAAAAAAALI}
{\bkmkend AAAAAAAALI}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Help! pkg-config can't find GoogleTest!
\par}
{\tc\tcl3 \v Help! pkg-config can't find GoogleTest!}
Let's say you have a {\f2 CMakeLists.txt}  along the lines of the one in this tutorial and you try to run {\f2 cmake} . It is very possible that you get a failure along the lines of:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid -- Checking for one of the modules 'gtest_main'\par
CMake Error at /usr/share/cmake/Modules/FindPkgConfig.cmake:640 (message):\par
  None of the required 'gtest_main' found\par
}
\par
These failures are common if you installed GoogleTest yourself and have not sourced it from a distro or other package manager. If so, you need to tell pkg-config where it can find the {\f2 .pc}  files containing the information. Say you installed GoogleTest to {\f2 /usr/local} , then it might be that the {\f2 .pc}  files are installed under {\f2 /usr/local/lib64/pkgconfig} . If you set\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid export PKG_CONFIG_PATH=/usr/local/lib64/pkgconfig\par
}
\par
pkg-config will also try to look in {\f2 PKG_CONFIG_PATH}  to find {\f2 gtest_main.pc} .\par}
{\bkmkstart AAAAAAAALJ}
{\bkmkend AAAAAAAALJ}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Using pkg-config in a cross-compilation setting
\par}
{\tc\tcl3 \v Using pkg-config in a cross-compilation setting}
Pkg-config can be used in a cross-compilation setting too. To do this, let's assume the final prefix of the cross-compiled installation will be {\f2 /usr} , and your sysroot is {\f2 /home/MYUSER/sysroot} . Configure and install GTest using\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid mkdir build && cmake -DCMAKE_INSTALL_PREFIX=/usr ..\par
}
\par
Install into the sysroot using {\f2 DESTDIR} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid make -j install DESTDIR=/home/MYUSER/sysroot\par
}
\par
Before we continue, it is recommended to {\b always}  define the following two variables for pkg-config in a cross-compilation setting:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid export PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=yes\par
export PKG_CONFIG_ALLOW_SYSTEM_LIBS=yes\par
}
\par
otherwise {\f2 pkg-config}  will filter {\f2 -I}  and {\f2 -L}  flags against standard prefixes such as {\f2 /usr}  (see {\f2 https://bugs.freedesktop.org/show_bug.cgi?id=28264#c3} for reasons why this stripping needs to occur usually).\par
If you look at the generated pkg-config file, it will look something like\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid libdir=/usr/lib64\par
includedir=/usr/include\par
\par
Name: gtest\par
Description: GoogleTest (without main() function)\par
Version: 1.11.0\par
URL: https://github.com/google/googletest\par
Libs: -L$\{libdir\} -lgtest -lpthread\par
Cflags: -I$\{includedir\} -DGTEST_HAS_PTHREAD=1 -lpthread\par
}
\par
Notice that the sysroot is not included in {\f2 libdir}  and {\f2 includedir} ! If you try to run {\f2 pkg-config}  with the correct {\f2 PKG_CONFIG_LIBDIR=/home/MYUSER/sysroot/usr/lib64/pkgconfig}  against this {\f2 .pc}  file, you will get\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid $ pkg-config --cflags gtest\par
-DGTEST_HAS_PTHREAD=1 -lpthread -I/usr/include\par
$ pkg-config --libs gtest\par
-L/usr/lib64 -lgtest -lpthread\par
}
\par
which is obviously wrong and points to the {\f2 CBUILD}  and not {\f2 CHOST}  root. In order to use this in a cross-compilation setting, we need to tell pkg-config to inject the actual sysroot into {\f2 -I}  and {\f2 -L}  variables. Let us now tell pkg-config about the actual sysroot\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid export PKG_CONFIG_DIR=\par
export PKG_CONFIG_SYSROOT_DIR=/home/MYUSER/sysroot\par
export PKG_CONFIG_LIBDIR=$\{PKG_CONFIG_SYSROOT_DIR\}/usr/lib64/pkgconfig\par
}
\par
and running {\f2 pkg-config}  again we get\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid $ pkg-config --cflags gtest\par
-DGTEST_HAS_PTHREAD=1 -lpthread -I/home/MYUSER/sysroot/usr/include\par
$ pkg-config --libs gtest\par
-L/home/MYUSER/sysroot/usr/lib64 -lgtest -lpthread\par
}
\par
which contains the correct sysroot now. For a more comprehensive guide to also including {\f2 $\{CHOST\}}  in build system calls, see the excellent tutorial by Diego Elio Petten\'F2: {\f2 https://autotools.io/pkgconfig/cross-compiling.html} \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Supported Platforms{\tc \v Supported Platforms}\par \pard\plain 
{\bkmkstart AAAAAAADXV}
{\bkmkend AAAAAAADXV}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
GoogleTest requires a codebase and compiler compliant with the C++11 standard or newer.\par
The GoogleTest code is officially supported on the following platforms. Operating systems or tools not listed below are community-supported. For community-supported platforms, patches that do not complicate the code may be considered.\par
If you notice any problems on your platform, please file an issue on the {\f2 GoogleTest GitHub Issue Tracker}. Pull requests containing fixes are welcome!\par
{\bkmkstart AAAAAAAALK}
{\bkmkend AAAAAAAALK}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Operating systems
\par}
{\tc\tcl3 \v Operating systems}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Linux\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
macOS\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Windows\par}
\par
\par}
{\bkmkstart AAAAAAAALL}
{\bkmkend AAAAAAAALL}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Compilers
\par}
{\tc\tcl3 \v Compilers}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
gcc 5.0+\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
clang 5.0+\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
MSVC 2015+\par}
\par
{\b macOS users:}  Xcode 9.3+ provides clang 5.0+.\par}
{\bkmkstart AAAAAAAALM}
{\bkmkend AAAAAAAALM}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Build systems
\par}
{\tc\tcl3 \v Build systems}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Bazel}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 CMake}\par}
\par
Bazel is the build system used by the team internally and in tests. CMake is supported on a best-effort basis and by the community. \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Googletest Primer{\tc \v Googletest Primer}\par \pard\plain 
{\bkmkstart AAAAAAADXW}
{\bkmkend AAAAAAADXW}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{\bkmkstart AAAAAAAALN}
{\bkmkend AAAAAAAALN}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Introduction: Why googletest?
\par}
{\tc\tcl2 \v Introduction: Why googletest?}
{\i googletest}  helps you write better C++ tests.\par
googletest is a testing framework developed by the Testing Technology team with Google's specific requirements and constraints in mind. Whether you work on Linux, Windows, or a Mac, if you write C++ code, googletest can help you. And it supports {\i any}  kind of tests, not just unit tests.\par
So what makes a good test, and how does googletest fit in? We believe:\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Tests should be {\i independent}  and {\i repeatable} . It's a pain to debug a test that succeeds or fails as a result of other tests. googletest isolates the tests by running each of them on a different object. When a test fails, googletest allows you to run it in isolation for quick debugging.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
2.\tab Tests should be well {\i organized}  and reflect the structure of the tested code. googletest groups related tests into test suites that can share data and subroutines. This common pattern is easy to recognize and makes tests easy to maintain. Such consistency is especially helpful when people switch projects and start to work on a new code base.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
3.\tab Tests should be {\i portable}  and {\i reusable} . Google has a lot of code that is platform-neutral; its tests should also be platform-neutral. googletest works on different OSes, with different compilers, with or without exceptions, so googletest tests can work with a variety of configurations.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
4.\tab When tests fail, they should provide as much {\i information}  about the problem as possible. googletest doesn't stop at the first test failure. Instead, it only stops the current test and continues with the next. You can also set up tests that report non-fatal failures after which the current test continues. Thus, you can detect and fix multiple bugs in a single run-edit-compile cycle.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
5.\tab The testing framework should liberate test writers from housekeeping chores and let them focus on the test {\i content} . googletest automatically keeps track of all tests defined, and doesn't require the user to enumerate them in order to run them.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
6.\tab Tests should be {\i fast} . With googletest, you can reuse shared resources across tests and pay for the set-up/tear-down only once, without making tests depend on each other.\par}
\par
Since googletest is based on the popular xUnit architecture, you'll feel right at home if you've used JUnit or PyUnit before. If not, it will take you about 10 minutes to learn the basics and get started. So let's go!\par}
{\bkmkstart AAAAAAAALO}
{\bkmkend AAAAAAAALO}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Beware of the nomenclature
\par}
{\tc\tcl2 \v Beware of the nomenclature}
\{: .callout .note\} {\i Note:}  There might be some confusion arising from different definitions of the terms {\i Test} , {\i Test Case}  and {\i Test Suite} , so beware of misunderstanding these.\par
Historically, googletest started to use the term {\i Test Case}  for grouping related tests, whereas current publications, including International Software Testing Qualifications Board ({\f2 ISTQB}) materials and various textbooks on software quality, use the term {\i {\f2 Test Suite}}  for this.\par
The related term {\i Test} , as it is used in googletest, corresponds to the term {\i {\f2 Test Case}}  of ISTQB and others.\par
The term {\i Test}  is commonly of broad enough sense, including ISTQB's definition of {\i Test Case} , so it's not much of a problem here. But the term {\i Test Case}  as was used in Google Test is of contradictory sense and thus confusing.\par
googletest recently started replacing the term {\i Test Case}  with {\i Test Suite} . The preferred API is {\i TestSuite} . The older TestCase API is being slowly deprecated and refactored away.\par
So please be aware of the different definitions of the terms:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Meaning   \cell }{googletest Term   \cell }{{\f2 ISTQB} Term    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Exercise a particular program path with specific input values and verify the results   \cell }{TEST()   \cell }{{\f2 Test Case}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
\par}
{\bkmkstart AAAAAAAALP}
{\bkmkend AAAAAAAALP}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Basic Concepts
\par}
{\tc\tcl2 \v Basic Concepts}
When using googletest, you start by writing {\i assertions} , which are statements that check whether a condition is true. An assertion's result can be {\i success} , {\i nonfatal failure} , or {\i fatal failure} . If a fatal failure occurs, it aborts the current function; otherwise the program continues normally.\par
{\i Tests}  use assertions to verify the tested code's behavior. If a test crashes or has a failed assertion, then it {\i fails} ; otherwise it {\i succeeds} .\par
A {\i test suite}  contains one or many tests. You should group your tests into test suites that reflect the structure of the tested code. When multiple tests in a test suite need to share common objects and subroutines, you can put them into a {\i test fixture}  class.\par
A {\i test program}  can contain multiple test suites.\par
We'll now explain how to write a test program, starting at the individual assertion level and building up to tests and test suites.\par}
{\bkmkstart AAAAAAAALQ}
{\bkmkend AAAAAAAALQ}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Assertions
\par}
{\tc\tcl2 \v Assertions}
googletest assertions are macros that resemble function calls. You test a class or function by making assertions about its behavior. When an assertion fails, googletest prints the assertion's source file and line number location, along with a failure message. You may also supply a custom failure message which will be appended to googletest's message.\par
The assertions come in pairs that test the same thing but have different effects on the current function. {\f2 ASSERT_*}  versions generate fatal failures when they fail, and {\b abort the current function} . {\f2 EXPECT_*}  versions generate nonfatal failures, which don't abort the current function. Usually {\f2 EXPECT_*}  are preferred, as they allow more than one failure to be reported in a test. However, you should use {\f2 ASSERT_*}  if it doesn't make sense to continue when the assertion in question fails.\par
Since a failed {\f2 ASSERT_*}  returns from the current function immediately, possibly skipping clean-up code that comes after it, it may cause a space leak. Depending on the nature of the leak, it may or may not be worth fixing - so keep this in mind if you get a heap checker error in addition to assertion errors.\par
To provide a custom failure message, simply stream it into the macro using the {\f2 <<}  operator or a sequence of such operators. See the following example, using the {\f2 {\f2 ASSERT_EQ}  and {\f2 EXPECT_EQ} } macros to verify value equality:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
ASSERT_EQ(x.size(), y.size()) << "Vectors x and y are of unequal length";\par
\par
for (int i = 0; i < x.size(); ++i) \{\par
  EXPECT_EQ(x[i], y[i]) << "Vectors x and y differ at index " << i;\par
\}\par
}
\par
Anything that can be streamed to an {\f2 ostream}  can be streamed to an assertion macro\'96in particular, C strings and {\f2 string}  objects. If a wide string ({\f2 wchar_t*} , {\f2 TCHAR*}  in {\f2 UNICODE}  mode on Windows, or {\f2 std::wstring} ) is streamed to an assertion, it will be translated to UTF-8 when printed.\par
GoogleTest provides a collection of assertions for verifying the behavior of your code in various ways. You can check Boolean conditions, compare values based on relational operators, verify string values, floating-point values, and much more. There are even assertions that enable you to verify more complex states by providing custom predicates. For the complete list of assertions provided by GoogleTest, see the {\b Assertions Reference}.\par}
{\bkmkstart AAAAAAAALR}
{\bkmkend AAAAAAAALR}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Simple Tests
\par}
{\tc\tcl2 \v Simple Tests}
To create a test:\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Use the {\f2 TEST()}  macro to define and name a test function. These are ordinary C++ functions that don't return a value.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
2.\tab In this function, along with any valid C++ statements you want to include, use the various googletest assertions to check values.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
3.\tab The test's result is determined by the assertions; if any assertion in the test fails (either fatally or non-fatally), or if the test crashes, the entire test fails. Otherwise, it succeeds.\par}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
TEST(TestSuiteName, TestName) \{\par
  ... test body ...\par
\}\par
}
\par
{\f2 TEST()}  arguments go from general to specific. The {\i first}  argument is the name of the test suite, and the {\i second}  argument is the test's name within the test suite. Both names must be valid C++ identifiers, and they should not contain any underscores ({\f2 _} ). A test's {\i full name}  consists of its containing test suite and its individual name. Tests from different test suites can have the same individual name.\par
For example, let's take a simple integer function:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
int Factorial(int n);  // Returns the factorial of n\par
}
\par
A test suite for this function might look like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
// Tests factorial of 0.\par
TEST(FactorialTest, HandlesZeroInput) \{\par
  EXPECT_EQ(Factorial(0), 1);\par
\}\par
\par
// Tests factorial of positive numbers.\par
TEST(FactorialTest, HandlesPositiveInput) \{\par
  EXPECT_EQ(Factorial(1), 1);\par
  EXPECT_EQ(Factorial(2), 2);\par
  EXPECT_EQ(Factorial(3), 6);\par
  EXPECT_EQ(Factorial(8), 40320);\par
\}\par
}
\par
googletest groups the test results by test suites, so logically related tests should be in the same test suite; in other words, the first argument to their {\f2 TEST()}  should be the same. In the above example, we have two tests, {\f2 HandlesZeroInput}  and {\f2 HandlesPositiveInput} , that belong to the same test suite {\f2 FactorialTest} .\par
When naming your test suites and tests, you should follow the same convention as for {\f2 naming functions and classes}.\par
{\b Availability} : Linux, Windows, Mac.\par}
{\bkmkstart AAAAAAAALS}
{\bkmkend AAAAAAAALS}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Test Fixtures: Using the Same Data Configuration for Multiple Tests
\par}
{\tc\tcl2 \v Test Fixtures: Using the Same Data Configuration for Multiple Tests}
If you find yourself writing two or more tests that operate on similar data, you can use a {\i test fixture} . This allows you to reuse the same configuration of objects for several different tests.\par
To create a fixture:\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Derive a class from {\f2 {\b testing::Test}}  . Start its body with {\f2 protected:} , as we'll want to access fixture members from sub-classes.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
2.\tab Inside the class, declare any objects you plan to use.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
3.\tab If necessary, write a default constructor or {\f2 SetUp()}  function to prepare the objects for each test. A common mistake is to spell {\f2 SetUp()}  as **{\f2 Setup()} ** with a small {\f2 u}  - Use {\f2 override}  in C++11 to make sure you spelled it correctly.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
4.\tab If necessary, write a destructor or {\f2 TearDown()}  function to release any resources you allocated in {\f2 SetUp()}  . To learn when you should use the constructor/destructor and when you should use {\f2 SetUp()/TearDown()} , read the {\f2 FAQ}.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
5.\tab If needed, define subroutines for your tests to share.\par}
\par
When using a fixture, use {\f2 TEST_F()}  instead of {\f2 TEST()}  as it allows you to access objects and subroutines in the test fixture:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
TEST_F(TestFixtureName, TestName) \{\par
  ... test body ...\par
\}\par
}
\par
Like {\f2 TEST()} , the first argument is the test suite name, but for {\f2 TEST_F()}  this must be the name of the test fixture class. You've probably guessed: {\f2 _F}  is for fixture.\par
Unfortunately, the C++ macro system does not allow us to create a single macro that can handle both types of tests. Using the wrong macro causes a compiler error.\par
Also, you must first define a test fixture class before using it in a {\f2 TEST_F()} , or you'll get the compiler error "`virtual outside class
declaration`".\par
For each test defined with {\f2 TEST_F()} , googletest will create a {\i fresh}  test fixture at runtime, immediately initialize it via {\f2 SetUp()} , run the test, clean up by calling {\f2 TearDown()} , and then delete the test fixture. Note that different tests in the same test suite have different test fixture objects, and googletest always deletes a test fixture before it creates the next one. googletest does {\b not}  reuse the same test fixture for multiple tests. Any changes one test makes to the fixture do not affect other tests.\par
As an example, let's write tests for a FIFO queue class named {\f2 {\b Queue}} , which has the following interface:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
template <typename E>  // E is the element type.\par
class Queue \{\par
 public:\par
  Queue();\par
  void Enqueue(const E& element);\par
  E* Dequeue();  // Returns NULL if the queue is empty.\par
  size_t size() const;\par
  ...\par
\};\par
}
\par
First, define a fixture class. By convention, you should give it the name {\f2 {\b FooTest}}  where {\f2 Foo}  is the class being tested.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
class QueueTest : public ::testing::Test \{\par
 protected:\par
  void SetUp() override \{\par
     q1_.Enqueue(1);\par
     q2_.Enqueue(2);\par
     q2_.Enqueue(3);\par
  \}\par
\par
  // void TearDown() override \{\}\par
\par
  Queue<int> q0_;\par
  Queue<int> q1_;\par
  Queue<int> q2_;\par
\};\par
}
\par
In this case, {\f2 TearDown()}  is not needed since we don't have to clean up after each test, other than what's already done by the destructor.\par
Now we'll write tests using {\f2 TEST_F()}  and this fixture.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
TEST_F(QueueTest, IsEmptyInitially) \{\par
  EXPECT_EQ(q0_.size(), 0);\par
\}\par
\par
TEST_F(QueueTest, DequeueWorks) \{\par
  int* n = q0_.Dequeue();\par
  EXPECT_EQ(n, nullptr);\par
\par
  n = q1_.Dequeue();\par
  ASSERT_NE(n, nullptr);\par
  EXPECT_EQ(*n, 1);\par
  EXPECT_EQ(q1_.size(), 0);\par
  delete n;\par
\par
  n = q2_.Dequeue();\par
  ASSERT_NE(n, nullptr);\par
  EXPECT_EQ(*n, 2);\par
  EXPECT_EQ(q2_.size(), 1);\par
  delete n;\par
\}\par
}
\par
The above uses both {\f2 ASSERT_*}  and {\f2 EXPECT_*}  assertions. The rule of thumb is to use {\f2 EXPECT_*}  when you want the test to continue to reveal more errors after the assertion failure, and use {\f2 ASSERT_*}  when continuing after failure doesn't make sense. For example, the second assertion in the {\f2 Dequeue}  test is {\f2 ASSERT_NE(n, nullptr)} , as we need to dereference the pointer {\f2 n}  later, which would lead to a segfault when {\f2 n}  is {\f2 NULL} .\par
When these tests run, the following happens:\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab googletest constructs a {\f2 QueueTest}  object (let's call it {\f2 t1} ).\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
2.\tab {\f2 t1.SetUp()}  initializes {\f2 t1} .\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
3.\tab The first test ({\f2 IsEmptyInitially} ) runs on {\f2 t1} .\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
4.\tab {\f2 t1.TearDown()}  cleans up after the test finishes.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
5.\tab {\f2 t1}  is destructed.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
6.\tab The above steps are repeated on another {\f2 QueueTest}  object, this time running the {\f2 DequeueWorks}  test.\par}
\par
{\b Availability} : Linux, Windows, Mac.\par}
{\bkmkstart AAAAAAAALT}
{\bkmkend AAAAAAAALT}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Invoking the Tests
\par}
{\tc\tcl2 \v Invoking the Tests}
{\f2 TEST()}  and {\f2 TEST_F()}  implicitly register their tests with googletest. So, unlike with many other C++ testing frameworks, you don't have to re-list all your defined tests in order to run them.\par
After defining your tests, you can run them with {\f2 RUN_ALL_TESTS()} , which returns {\f2 0}  if all the tests are successful, or {\f2 1}  otherwise. Note that {\f2 RUN_ALL_TESTS()}  runs {\i all tests}  in your link unit\'96they can be from different test suites, or even different source files.\par
When invoked, the {\f2 RUN_ALL_TESTS()}  macro:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Saves the state of all googletest flags.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Creates a test fixture object for the first test.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Initializes it via {\f2 SetUp()} .\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Runs the test on the fixture object.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Cleans up the fixture via {\f2 TearDown()} .\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Deletes the fixture.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Restores the state of all googletest flags.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Repeats the above steps for the next test, until all tests have run.\par}
\par
If a fatal failure happens the subsequent steps will be skipped.\par
\{: .callout .important\} \par
{\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \zwjIMPORTANT: You must {\b not}  ignore the return value of {\f2 RUN_ALL_TESTS()} , or you will get a compiler error. The rationale for this design is that the automated testing service determines whether a test has passed based on its exit code, not on its stdout/stderr output; thus your {\f2 main()}  function must return the value of {\f2 RUN_ALL_TESTS()} .\par
Also, you should call {\f2 RUN_ALL_TESTS()}  only {\b once} . Calling it more than once conflicts with some advanced googletest features (e.g., thread-safe {\f2 death tests}) and thus is not supported. \par
}{\b Availability} : Linux, Windows, Mac.\par}
{\bkmkstart AAAAAAAALU}
{\bkmkend AAAAAAAALU}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Writing the main() Function
\par}
{\tc\tcl2 \v Writing the main() Function}
Most users should {\i not}  need to write their own {\f2 main}  function and instead link with {\f2 gtest_main}  (as opposed to with {\f2 gtest} ), which defines a suitable entry point. See the end of this section for details. The remainder of this section should only apply when you need to do something custom before the tests run that cannot be expressed within the framework of fixtures and test suites.\par
If you write your own {\f2 main}  function, it should return the value of {\f2 RUN_ALL_TESTS()} .\par
You can start from this boilerplate:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
#include "this/package/foo.h"\par
\par
#include "gtest/gtest.h"\par
\par
namespace my \{\par
namespace project \{\par
namespace \{\par
\par
// The fixture for testing class Foo.\par
class FooTest : public ::testing::Test \{\par
 protected:\par
  // You can remove any or all of the following functions if their bodies would\par
  // be empty.\par
\par
  FooTest() \{\par
     // You can do set-up work for each test here.\par
  \}\par
\par
  ~FooTest() override \{\par
     // You can do clean-up work that doesn't throw exceptions here.\par
  \}\par
\par
  // If the constructor and destructor are not enough for setting up\par
  // and cleaning up each test, you can define the following methods:\par
\par
  void SetUp() override \{\par
     // Code here will be called immediately after the constructor (right\par
     // before each test).\par
  \}\par
\par
  void TearDown() override \{\par
     // Code here will be called immediately after each test (right\par
     // before the destructor).\par
  \}\par
\par
  // Class members declared here can be used by all tests in the test suite\par
  // for Foo.\par
\};\par
\par
// Tests that the Foo::Bar() method does Abc.\par
TEST_F(FooTest, MethodBarDoesAbc) \{\par
  const std::string input_filepath = "this/package/testdata/myinputfile.dat";\par
  const std::string output_filepath = "this/package/testdata/myoutputfile.dat";\par
  Foo f;\par
  EXPECT_EQ(f.Bar(input_filepath, output_filepath), 0);\par
\}\par
\par
// Tests that Foo does Xyz.\par
TEST_F(FooTest, DoesXyz) \{\par
  // Exercises the Xyz feature of Foo.\par
\}\par
\par
\}  // namespace\par
\}  // namespace project\par
\}  // namespace my\par
\par
int main(int argc, char **argv) \{\par
  ::testing::InitGoogleTest(&argc, argv);\par
  return RUN_ALL_TESTS();\par
\}\par
}
\par
The {\f2 testing::InitGoogleTest()}  function parses the command line for googletest flags, and removes all recognized flags. This allows the user to control a test program's behavior via various flags, which we'll cover in the {\b AdvancedGuide}. You {\b must}  call this function before calling {\f2 RUN_ALL_TESTS()} , or the flags won't be properly initialized.\par
On Windows, {\f2 InitGoogleTest()}  also works with wide strings, so it can be used in programs compiled in {\f2 UNICODE}  mode as well.\par
But maybe you think that writing all those {\f2 main}  functions is too much work? We agree with you completely, and that's why Google Test provides a basic implementation of main(). If it fits your needs, then just link your test with the {\f2 gtest_main}  library and you are good to go.\par
\{: .callout .note\} NOTE: {\f2 ParseGUnitFlags()}  is deprecated in favor of {\f2 InitGoogleTest()} .\par}
{\bkmkstart AAAAAAAALV}
{\bkmkend AAAAAAAALV}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Known Limitations
\par}
{\tc\tcl2 \v Known Limitations}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Google Test is designed to be thread-safe. The implementation is thread-safe on systems where the {\f2 pthreads}  library is available. It is currently {\i unsafe}  to use Google Test assertions from two threads concurrently on other systems (e.g. Windows). In most tests this is not an issue as usually the assertions are done in the main thread. If you want to help, you can volunteer to implement the necessary synchronization primitives in {\f2 gtest-port.h}  for your platform. \par}
\par
\par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Quickstart: Building with Bazel{\tc \v Quickstart: Building with Bazel}\par \pard\plain 
{\bkmkstart AAAAAAADXX}
{\bkmkend AAAAAAADXX}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This tutorial aims to get you up and running with GoogleTest using the Bazel build system. If you're using GoogleTest for the first time or need a refresher, we recommend this tutorial as a starting point.\par
{\bkmkstart AAAAAAAALW}
{\bkmkend AAAAAAAALW}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Prerequisites
\par}
{\tc\tcl2 \v Prerequisites}
To complete this tutorial, you'll need:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
A compatible operating system (e.g. Linux, macOS, Windows).\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
A compatible C++ compiler that supports at least C++14.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Bazel}, the preferred build system used by the GoogleTest team.\par}
\par
See {\b Supported Platforms} for more information about platforms compatible with GoogleTest.\par
If you don't already have Bazel installed, see the {\f2 Bazel installation guide}.\par
\{: .callout .note\} Note: The terminal commands in this tutorial show a Unix shell prompt, but the commands work on the Windows command line as well.\par}
{\bkmkstart AAAAAAAALX}
{\bkmkend AAAAAAAALX}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Set up a Bazel workspace
\par}
{\tc\tcl2 \v Set up a Bazel workspace}
A {\f2 Bazel workspace} is a directory on your filesystem that you use to manage source files for the software you want to build. Each workspace directory has a text file named {\f2 WORKSPACE}  which may be empty, or may contain references to external dependencies required to build the outputs.\par
First, create a directory for your workspace:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid $ mkdir my_workspace && cd my_workspace\par
}
\par
Next, you\'92ll create the {\f2 WORKSPACE}  file to specify dependencies. A common and recommended way to depend on GoogleTest is to use a {\f2 Bazel external dependency} via the {\f2 {\f2 http_archive}  rule}. To do this, in the root directory of your workspace ({\f2 my_workspace/} ), create a file named {\f2 WORKSPACE}  with the following contents:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")\par
\par
http_archive(\par
  name = "com_google_googletest",\par
  urls = ["https://github.com/google/googletest/archive/609281088cfefc76f9d0ce82e1ff6c30cc3591e5.zip"],\par
  strip_prefix = "googletest-609281088cfefc76f9d0ce82e1ff6c30cc3591e5",\par
)\par
}
\par
The above configuration declares a dependency on GoogleTest which is downloaded as a ZIP archive from GitHub. In the above example, {\f2 609281088cfefc76f9d0ce82e1ff6c30cc3591e5}  is the Git commit hash of the GoogleTest version to use; we recommend updating the hash often to point to the latest version.\par
Now you're ready to build C++ code that uses GoogleTest.\par}
{\bkmkstart AAAAAAAALY}
{\bkmkend AAAAAAAALY}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Create and run a binary
\par}
{\tc\tcl2 \v Create and run a binary}
With your Bazel workspace set up, you can now use GoogleTest code within your own project.\par
As an example, create a file named {\f2 hello_test.cc}  in your {\f2 my_workspace}  directory with the following contents:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf21 #include <gtest/gtest.h>}\par
\par
{\cf20 // Demonstrate some basic assertions.}\par
TEST(HelloTest, BasicAssertions) \{\par
  {\cf20 // Expect two strings not to be equal.}\par
  EXPECT_STRNE({\cf22 "hello"}, {\cf22 "world"});\par
  {\cf20 // Expect equality.}\par
  EXPECT_EQ(7 * 6, 42);\par
\}\par
}
\par
GoogleTest provides {\f2 assertions} that you use to test the behavior of your code. The above sample includes the main GoogleTest header file and demonstrates some basic assertions.\par
To build the code, create a file named {\f2 BUILD}  in the same directory with the following contents:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid cc_test(\par
  name = "hello_test",\par
  size = "small",\par
  srcs = ["hello_test.cc"],\par
  deps = ["@com_google_googletest//:gtest_main"],\par
)\par
}
\par
This {\f2 cc_test}  rule declares the C++ test binary you want to build, and links to GoogleTest ({\f2 //:gtest_main} ) using the prefix you specified in the {\f2 WORKSPACE}  file ({\f2 @com_google_googletest} ). For more information about Bazel {\f2 BUILD}  files, see the {\f2 Bazel C++ Tutorial}.\par
Now you can build and run your test:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 
{\b my_workspace$ bazel test --test_output=all //:hello_test} 
INFO: Analyzed target //:hello_test (26 packages loaded, 362 targets configured).
INFO: Found 1 test target...
INFO: From Testing //:hello_test:
==================== Test output for //:hello_test:
Running main() from gmock_main.cc
[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from HelloTest
[ RUN      ] HelloTest.BasicAssertions
[       OK ] HelloTest.BasicAssertions (0 ms)
[----------] 1 test from HelloTest (0 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (0 ms total)
[  PASSED  ] 1 test.
================================================================================
Target //:hello_test up-to-date:
  bazel-bin/hello_test
INFO: Elapsed time: 4.190s, Critical Path: 3.05s
INFO: 27 processes: 8 internal, 19 linux-sandbox.
INFO: Build completed successfully, 27 total actions
//:hello_test                                                     PASSED in 0.1s

INFO: Build completed successfully, 27 total actions
\par}
Congratulations! You've successfully built and run a test binary using GoogleTest.\par}
{\bkmkstart AAAAAAAALZ}
{\bkmkend AAAAAAAALZ}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Next steps
\par}
{\tc\tcl2 \v Next steps}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Check out the Primer} to start learning how to write simple tests.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b See the code samples} for more examples showing how to use a variety of GoogleTest features. \par}
\par
\par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Quickstart: Building with CMake{\tc \v Quickstart: Building with CMake}\par \pard\plain 
{\bkmkstart AAAAAAADXY}
{\bkmkend AAAAAAADXY}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This tutorial aims to get you up and running with GoogleTest using CMake. If you're using GoogleTest for the first time or need a refresher, we recommend this tutorial as a starting point. If your project uses Bazel, see the {\b Quickstart for Bazel} instead.\par
{\bkmkstart AAAAAAAAMA}
{\bkmkend AAAAAAAAMA}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Prerequisites
\par}
{\tc\tcl2 \v Prerequisites}
To complete this tutorial, you'll need:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
A compatible operating system (e.g. Linux, macOS, Windows).\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
A compatible C++ compiler that supports at least C++14.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 CMake} and a compatible build tool for building the project.{
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Compatible build tools include {\f2 Make}, {\f2 Ninja}, and others - see {\f2 CMake Generators} for more information.\par}
}
\par
See {\b Supported Platforms} for more information about platforms compatible with GoogleTest.\par
If you don't already have CMake installed, see the {\f2 CMake installation guide}.\par
\{: .callout .note\} Note: The terminal commands in this tutorial show a Unix shell prompt, but the commands work on the Windows command line as well.\par}
{\bkmkstart AAAAAAAAMB}
{\bkmkend AAAAAAAAMB}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Set up a project
\par}
{\tc\tcl2 \v Set up a project}
CMake uses a file named {\f2 CMakeLists.txt}  to configure the build system for a project. You'll use this file to set up your project and declare a dependency on GoogleTest.\par
First, create a directory for your project:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid $ mkdir my_project && cd my_project\par
}
\par
Next, you'll create the {\f2 CMakeLists.txt}  file and declare a dependency on GoogleTest. There are many ways to express dependencies in the CMake ecosystem; in this quickstart, you'll use the {\f2 {\f2 FetchContent}  CMake module}. To do this, in your project directory ({\f2 my_project} ), create a file named {\f2 CMakeLists.txt}  with the following contents:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid cmake_minimum_required(VERSION 3.14)\par
project(my_project)\par
\par
# GoogleTest requires at least C++14\par
set(CMAKE_CXX_STANDARD 14)\par
\par
include(FetchContent)\par
FetchContent_Declare(\par
  googletest\par
  GIT_REPOSITORY https://github.com/google/googletest.git\par
  GIT_TAG release-1.12.1\par
)\par
# For Windows: Prevent overriding the parent project's compiler/linker settings\par
set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)\par
FetchContent_MakeAvailable(googletest)\par
}
\par
The above configuration declares a dependency on GoogleTest which is downloaded from GitHub. In the above example, {\f2 609281088cfefc76f9d0ce82e1ff6c30cc3591e5}  is the Git commit hash of the GoogleTest version to use; we recommend updating the hash often to point to the latest version.\par
For more information about how to create {\f2 CMakeLists.txt}  files, see the {\f2 CMake Tutorial}.\par}
{\bkmkstart AAAAAAAAMC}
{\bkmkend AAAAAAAAMC}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Create and run a binary
\par}
{\tc\tcl2 \v Create and run a binary}
With GoogleTest declared as a dependency, you can use GoogleTest code within your own project.\par
As an example, create a file named {\f2 hello_test.cc}  in your {\f2 my_project}  directory with the following contents:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf21 #include <gtest/gtest.h>}\par
\par
{\cf20 // Demonstrate some basic assertions.}\par
TEST(HelloTest, BasicAssertions) \{\par
  {\cf20 // Expect two strings not to be equal.}\par
  EXPECT_STRNE({\cf22 "hello"}, {\cf22 "world"});\par
  {\cf20 // Expect equality.}\par
  EXPECT_EQ(7 * 6, 42);\par
\}\par
}
\par
GoogleTest provides {\f2 assertions} that you use to test the behavior of your code. The above sample includes the main GoogleTest header file and demonstrates some basic assertions.\par
To build the code, add the following to the end of your {\f2 CMakeLists.txt}  file:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid enable_testing()\par
\par
add_executable(\par
  hello_test\par
  hello_test.cc\par
)\par
target_link_libraries(\par
  hello_test\par
  GTest::gtest_main\par
)\par
\par
include(GoogleTest)\par
gtest_discover_tests(hello_test)\par
}
\par
The above configuration enables testing in CMake, declares the C++ test binary you want to build ({\f2 hello_test} ), and links it to GoogleTest ({\f2 gtest_main} ). The last two lines enable CMake's test runner to discover the tests included in the binary, using the {\f2 {\f2 GoogleTest}  CMake module}.\par
Now you can build and run your test:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 
{\b my_project$ cmake -S . -B build} 
-- The C compiler identification is GNU 10.2.1
-- The CXX compiler identification is GNU 10.2.1
...
-- Build files have been written to: .../my_project/build

{\b my_project$ cmake --build build} 
Scanning dependencies of target gtest
...
[100%] Built target gmock_main

{\b my_project$ cd build && ctest} 
Test project .../my_project/build
    Start 1: HelloTest.BasicAssertions
1/1 Test #1: HelloTest.BasicAssertions ........   Passed    0.00 sec

100% tests passed, 0 tests failed out of 1

Total Test time (real) =   0.01 sec
\par}
Congratulations! You've successfully built and run a test binary using GoogleTest.\par}
{\bkmkstart AAAAAAAAMD}
{\bkmkend AAAAAAAAMD}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Next steps
\par}
{\tc\tcl2 \v Next steps}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Check out the Primer} to start learning how to write simple tests.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b See the code samples} for more examples showing how to use a variety of GoogleTest features. \par}
\par
\par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Actions Reference{\tc \v Actions Reference}\par \pard\plain 
{\bkmkstart AAAAAAADXZ}
{\bkmkend AAAAAAADXZ}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\f2 {\b Actions} } specify what a mock function should do when invoked. This page lists the built-in actions provided by GoogleTest. All actions are defined in the {\f2 ::testing}  namespace.\par
{\bkmkstart AAAAAAAAME}
{\bkmkend AAAAAAAAME}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Returning a Value
\par}
{\tc\tcl2 \v Returning a Value}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Action   \cell }{Description    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Return()}    \cell }{Return from a {\f2 void}  mock function.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Return(value)}    \cell }{Return {\f2 value} . If the type of {\f2 value}  is different to the mock function's return type, {\f2 value}  is converted to the latter type {\i at the time the expectation is set} , not when the action is executed.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ReturnArg<N>()}    \cell }{Return the {\f2 N} -th (0-based) argument.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ReturnNew<T>(a1, ..., ak)}    \cell }{Return {\f2 new T(a1, ..., ak)} ; a different object is created each time.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ReturnNull()}    \cell }{Return a null pointer.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ReturnPointee(ptr)}    \cell }{Return the value pointed to by {\f2 ptr} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ReturnRef(variable)}    \cell }{Return a reference to {\f2 variable} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ReturnRefOfCopy(value)}    \cell }{Return a reference to a copy of {\f2 value} ; the copy lives as long as the action.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ReturnRoundRobin(\{a1, ..., ak\})}    \cell }{Each call will return the next {\f2 ai}  in the list, starting at the beginning when the end of the list is reached.   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
\par}
{\bkmkstart AAAAAAAAMF}
{\bkmkend AAAAAAAAMF}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Side Effects
\par}
{\tc\tcl2 \v Side Effects}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Action   \cell }{Description    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Assign(&variable, value)}    \cell }{Assign {\f2 value}  to variable.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 DeleteArg<N>()}    \cell }{Delete the {\f2 N} -th (0-based) argument, which must be a pointer.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SaveArg<N>(pointer)}    \cell }{Save the {\f2 N} -th (0-based) argument to {\f2 *pointer} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SaveArgPointee<N>(pointer)}    \cell }{Save the value pointed to by the {\f2 N} -th (0-based) argument to {\f2 *pointer} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SetArgReferee<N>(value)}    \cell }{Assign {\f2 value}  to the variable referenced by the {\f2 N} -th (0-based) argument.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SetArgPointee<N>(value)}    \cell }{Assign {\f2 value}  to the variable pointed by the {\f2 N} -th (0-based) argument.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SetArgumentPointee<N>(value)}    \cell }{Same as {\f2 SetArgPointee<N>(value)} . Deprecated. Will be removed in v1.7.0.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SetArrayArgument<N>(first, last)}    \cell }{Copies the elements in source range [{\f2 first} , {\f2 last} ) to the array pointed to by the {\f2 N} -th (0-based) argument, which can be either a pointer or an iterator. The action does not take ownership of the elements in the source range.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SetErrnoAndReturn(error, value)}    \cell }{Set {\f2 errno}  to {\f2 error}  and return {\f2 value} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Throw(exception)}    \cell }{Throws the given exception, which can be any copyable value. Available since v1.1.0.   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
\par}
{\bkmkstart AAAAAAAAMG}
{\bkmkend AAAAAAAAMG}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Using a Function, Functor, or Lambda as an Action
\par}
{\tc\tcl2 \v Using a Function, Functor, or Lambda as an Action}
In the following, by "callable" we mean a free function, {\f2 std::function} , functor, or lambda.\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Action   \cell }{Description    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 f}    \cell }{Invoke {\f2 f}  with the arguments passed to the mock function, where {\f2 f}  is a callable.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Invoke(f)}    \cell }{Invoke {\f2 f}  with the arguments passed to the mock function, where {\f2 f}  can be a global/static function or a functor.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Invoke(object_pointer, &class::method)}    \cell }{Invoke the method on the object with the arguments passed to the mock function.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 InvokeWithoutArgs(f)}    \cell }{Invoke {\f2 f} , which can be a global/static function or a functor. {\f2 f}  must take no arguments.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 InvokeWithoutArgs(object_pointer, &class::method)}    \cell }{Invoke the method on the object, which takes no arguments.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 InvokeArgument<N>(arg1, arg2, ..., argk)}    \cell }{Invoke the mock function's {\f2 N} -th (0-based) argument, which must be a function or a functor, with the {\f2 k}  arguments.   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
The return value of the invoked function is used as the return value of the action.\par
When defining a callable to be used with {\f2 Invoke*()} , you can declare any unused parameters as {\f2 Unused} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Invoke;\par
{\cf18 double} Distance(Unused, {\cf18 double} x, {\cf18 double} y) \{ {\cf19 return} sqrt(x*x + y*y); \}\par
...\par
EXPECT_CALL(mock, Foo({\cf22 "Hi"}, _, _)).WillOnce(Invoke(Distance));\par
}
\par
{\f2 Invoke(callback)}  and {\f2 InvokeWithoutArgs(callback)}  take ownership of {\f2 callback} , which must be permanent. The type of {\f2 callback}  must be a base callback type instead of a derived one, e.g.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid BlockingClosure* done = {\cf17 new} BlockingClosure;\par
... Invoke(done) ...;  {\cf20 // This won't compile!}\par
\par
Closure* done2 = {\cf17 new} BlockingClosure;\par
... Invoke(done2) ...;  {\cf20 // This works.}\par
}
\par
In {\f2 InvokeArgument<N>(...)} , if an argument needs to be passed by reference, wrap it inside {\f2 std::ref()} . For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::InvokeArgument;\par
...\par
InvokeArgument<2>(5, string({\cf22 "Hi"}), std::ref(foo))\par
}
\par
calls the mock function's #2 argument, passing to it {\f2 5}  and {\f2 string("Hi")}  by value, and {\f2 foo}  by reference.\par}
{\bkmkstart AAAAAAAAMH}
{\bkmkend AAAAAAAAMH}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Default Action
\par}
{\tc\tcl2 \v Default Action}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Action   \cell }{Description    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 DoDefault()}    \cell }{Do the default action (specified by {\f2 ON_CALL()}  or the built-in one).   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
\{: .callout .note\} {\b Note:}  due to technical reasons, {\f2 DoDefault()}  cannot be used inside a composite action - trying to do so will result in a run-time error.\par}
{\bkmkstart AAAAAAAAMI}
{\bkmkend AAAAAAAAMI}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Composite Actions
\par}
{\tc\tcl2 \v Composite Actions}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Action   \cell }{Description    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 DoAll(a1, a2, ..., an)}    \cell }{Do all actions {\f2 a1}  to {\f2 an}  and return the result of {\f2 an}  in each invocation. The first {\f2 n - 1}  sub-actions must return void and will receive a readonly view of the arguments.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 IgnoreResult(a)}    \cell }{Perform action {\f2 a}  and ignore its result. {\f2 a}  must not return void.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 WithArg<N>(a)}    \cell }{Pass the {\f2 N} -th (0-based) argument of the mock function to action {\f2 a}  and perform it.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 WithArgs<N1, N2, ..., Nk>(a)}    \cell }{Pass the selected (0-based) arguments of the mock function to action {\f2 a}  and perform it.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 WithoutArgs(a)}    \cell }{Perform action {\f2 a}  without any arguments.   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
\par}
{\bkmkstart AAAAAAAAMJ}
{\bkmkend AAAAAAAAMJ}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Defining Actions
\par}
{\tc\tcl2 \v Defining Actions}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Macro   \cell }{Description    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION(Sum) \{ return arg0 + arg1; \}}    \cell }{Defines an action {\f2 Sum()}  to return the sum of the mock function's argument #0 and #1.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_P(Plus, n) \{ return arg0 + n; \}}    \cell }{Defines an action {\f2 Plus(n)}  to return the sum of the mock function's argument #0 and {\f2 n} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_Pk(Foo, p1, ..., pk) \{ statements; \}}    \cell }{Defines a parameterized action {\f2 Foo(p1, ..., pk)}  to execute the given {\f2 statements} .   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
The {\f2 ACTION*}  macros cannot be used inside a function or class. \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Assertions Reference{\tc \v Assertions Reference}\par \pard\plain 
{\bkmkstart AAAAAAADYA}
{\bkmkend AAAAAAADYA}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This page lists the assertion macros provided by GoogleTest for verifying code behavior. To use them, include the header {\f2 {\b gtest/gtest.h}} .\par
The majority of the macros listed below come as a pair with an {\f2 EXPECT_}  variant and an {\f2 ASSERT_}  variant. Upon failure, {\f2 EXPECT_}  macros generate nonfatal failures and allow the current function to continue running, while {\f2 ASSERT_}  macros generate fatal failures and abort the current function.\par
All assertion macros support streaming a custom failure message into them with the {\f2 <<}  operator, for example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_TRUE(my_condition) << {\cf22 "My condition is not true"};\par
}
\par
Anything that can be streamed to an {\f2 ostream}  can be streamed to an assertion macro\'97in particular, C strings and string objects. If a wide string ({\f2 wchar_t*} , {\f2 TCHAR*}  in {\f2 UNICODE}  mode on Windows, or {\f2 std::wstring} ) is streamed to an assertion, it will be translated to UTF-8 when printed.\par
{\bkmkstart AAAAAAAAMK}
{\bkmkend AAAAAAAAMK}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Explicit Success and Failure
\par}
{\tc\tcl2 \v Explicit Success and Failure}
The assertions in this section generate a success or failure directly instead of testing a value or expression. These are useful when control flow, rather than a Boolean expression, determines the test's success or failure, as shown by the following example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  \{c++\}\par
switch(expression) \{\par
  case 1:\par
    ... some checks ...\par
  case 2:\par
    ... some other checks ...\par
  default:\par
    FAIL() << "We shouldn't get here.";\par
\}\par
}
\par
{\bkmkstart AAAAAAAAML}
{\bkmkend AAAAAAAAML}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
SUCCEED
\par}
{\tc\tcl3 \v SUCCEED}
{\f2 SUCCEED()} \par
Generates a success. This {\i does not}  make the overall test succeed. A test is considered successful only if none of its assertions fail during its execution.\par
The {\f2 SUCCEED}  assertion is purely documentary and currently doesn't generate any user-visible output. However, we may add {\f2 SUCCEED}  messages to GoogleTest output in the future.\par}
{\bkmkstart AAAAAAAAMM}
{\bkmkend AAAAAAAAMM}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
FAIL
\par}
{\tc\tcl3 \v FAIL}
{\f2 FAIL()} \par
Generates a fatal failure, which returns from the current function.\par
Can only be used in functions that return {\f2 void} . See {\f2 Assertion Placement} for more information.\par}
{\bkmkstart AAAAAAAAMN}
{\bkmkend AAAAAAAAMN}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
ADD_FAILURE
\par}
{\tc\tcl3 \v ADD_FAILURE}
{\f2 ADD_FAILURE()} \par
Generates a nonfatal failure, which allows the current function to continue running.\par}
{\bkmkstart AAAAAAAAMO}
{\bkmkend AAAAAAAAMO}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
ADD_FAILURE_AT
\par}
{\tc\tcl3 \v ADD_FAILURE_AT}
{\f2 ADD_FAILURE_AT(} *{\f2 file_path} *{\f2 ,} *{\f2 line_number} *{\f2 )} \par
Generates a nonfatal failure at the file and line number specified.\par}
\par}
{\bkmkstart AAAAAAAAMP}
{\bkmkend AAAAAAAAMP}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Generalized Assertion
\par}
{\tc\tcl2 \v Generalized Assertion}
The following assertion allows {\b matchers} to be used to verify values.\par
{\bkmkstart AAAAAAAAMQ}
{\bkmkend AAAAAAAAMQ}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
EXPECT_THAT
\par}
{\tc\tcl3 \v EXPECT_THAT}
{\f2 EXPECT_THAT(} *{\f2 value} *{\f2 ,} *{\f2 matcher} *{\f2 )}  \\ {\f2 ASSERT_THAT(} *{\f2 value} *{\f2 ,} *{\f2 matcher} *{\f2 )} \par
Verifies that *{\f2 value} * matches the {\b matcher} *{\f2 matcher} *.\par
For example, the following code verifies that the string {\f2 value1}  starts with {\f2 "Hello"} , {\f2 value2}  matches a regular expression, and {\f2 value3}  is between 5 and 10:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf21 #include "gmock/gmock.h"}\par
\par
using ::testing::AllOf;\par
using ::testing::Gt;\par
using ::testing::Lt;\par
using ::testing::MatchesRegex;\par
using ::testing::StartsWith;\par
\par
...\par
EXPECT_THAT(value1, StartsWith({\cf22 "Hello"}));\par
EXPECT_THAT(value2, MatchesRegex({\cf22 "Line \\\\d+"}));\par
ASSERT_THAT(value3, AllOf(Gt(5), Lt(10)));\par
}
\par
Matchers enable assertions of this form to read like English and generate informative failure messages. For example, if the above assertion on {\f2 value1}  fails, the resulting message will be similar to the following:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Value of: value1\par
  Actual: "Hi, world!"\par
Expected: starts with "Hello"\par
}
\par
GoogleTest provides a built-in library of matchers\'97see the {\b Matchers Reference}. It is also possible to write your own matchers\'97see {\f2 Writing New Matchers Quickly}. The use of matchers makes {\f2 EXPECT_THAT}  a powerful, extensible assertion.\par
{\i The idea for this assertion was borrowed from Joe Walnes' Hamcrest project, which adds {\f2 assertThat()}  to JUnit.} \par}
\par}
{\bkmkstart AAAAAAAAMR}
{\bkmkend AAAAAAAAMR}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Boolean Conditions
\par}
{\tc\tcl2 \v Boolean Conditions}
The following assertions test Boolean conditions.\par
{\bkmkstart AAAAAAAAMS}
{\bkmkend AAAAAAAAMS}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
EXPECT_TRUE
\par}
{\tc\tcl3 \v EXPECT_TRUE}
{\f2 EXPECT_TRUE(} *{\f2 condition} *{\f2 )}  \\ {\f2 ASSERT_TRUE(} *{\f2 condition} *{\f2 )} \par
Verifies that *{\f2 condition} * is true.\par}
{\bkmkstart AAAAAAAAMT}
{\bkmkend AAAAAAAAMT}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
EXPECT_FALSE
\par}
{\tc\tcl3 \v EXPECT_FALSE}
{\f2 EXPECT_FALSE(} *{\f2 condition} *{\f2 )}  \\ {\f2 ASSERT_FALSE(} *{\f2 condition} *{\f2 )} \par
Verifies that *{\f2 condition} * is false.\par}
\par}
{\bkmkstart AAAAAAAAMU}
{\bkmkend AAAAAAAAMU}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Binary Comparison
\par}
{\tc\tcl2 \v Binary Comparison}
The following assertions compare two values. The value arguments must be comparable by the assertion's comparison operator, otherwise a compiler error will result.\par
If an argument supports the {\f2 <<}  operator, it will be called to print the argument when the assertion fails. Otherwise, GoogleTest will attempt to print them in the best way it can\'97see {\f2 Teaching GoogleTest How to Print Your Values}.\par
Arguments are always evaluated exactly once, so it's OK for the arguments to have side effects. However, the argument evaluation order is undefined and programs should not depend on any particular argument evaluation order.\par
These assertions work with both narrow and wide string objects ({\f2 string}  and {\f2 wstring} ).\par
See also the {\b Floating-Point Comparison} assertions to compare floating-point numbers and avoid problems caused by rounding.\par
{\bkmkstart AAAAAAAAMV}
{\bkmkend AAAAAAAAMV}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
EXPECT_EQ
\par}
{\tc\tcl3 \v EXPECT_EQ}
{\f2 EXPECT_EQ(} *{\f2 val1} *{\f2 ,} *{\f2 val2} *{\f2 )}  \\ {\f2 ASSERT_EQ(} *{\f2 val1} *{\f2 ,} *{\f2 val2} *{\f2 )} \par
Verifies that *{\f2 val1} *{\f2 ==} *{\f2 val2} *.\par
Does pointer equality on pointers. If used on two C strings, it tests if they are in the same memory location, not if they have the same value. Use {\b `EXPECT_STREQ`} to compare C strings (e.g. {\f2 const char*} ) by value.\par
When comparing a pointer to {\f2 NULL} , use {\f2 EXPECT_EQ(} *{\f2 ptr} *{\f2 , nullptr)}  instead of {\f2 EXPECT_EQ(} *{\f2 ptr} *{\f2 , NULL)} .\par}
{\bkmkstart AAAAAAAAMW}
{\bkmkend AAAAAAAAMW}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
EXPECT_NE
\par}
{\tc\tcl3 \v EXPECT_NE}
{\f2 EXPECT_NE(} *{\f2 val1} *{\f2 ,} *{\f2 val2} *{\f2 )}  \\ {\f2 ASSERT_NE(} *{\f2 val1} *{\f2 ,} *{\f2 val2} *{\f2 )} \par
Verifies that *{\f2 val1} *{\f2 !=} *{\f2 val2} *.\par
Does pointer equality on pointers. If used on two C strings, it tests if they are in different memory locations, not if they have different values. Use {\b `EXPECT_STRNE`} to compare C strings (e.g. {\f2 const char*} ) by value.\par
When comparing a pointer to {\f2 NULL} , use {\f2 EXPECT_NE(} *{\f2 ptr} *{\f2 , nullptr)}  instead of {\f2 EXPECT_NE(} *{\f2 ptr} *{\f2 , NULL)} .\par}
{\bkmkstart AAAAAAAAMX}
{\bkmkend AAAAAAAAMX}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
EXPECT_LT
\par}
{\tc\tcl3 \v EXPECT_LT}
{\f2 EXPECT_LT(} *{\f2 val1} *{\f2 ,} *{\f2 val2} *{\f2 )}  \\ {\f2 ASSERT_LT(} *{\f2 val1} *{\f2 ,} *{\f2 val2} *{\f2 )} \par
Verifies that *{\f2 val1} *{\f2 <} *{\f2 val2} *.\par}
{\bkmkstart AAAAAAAAMY}
{\bkmkend AAAAAAAAMY}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
EXPECT_LE
\par}
{\tc\tcl3 \v EXPECT_LE}
{\f2 EXPECT_LE(} *{\f2 val1} *{\f2 ,} *{\f2 val2} *{\f2 )}  \\ {\f2 ASSERT_LE(} *{\f2 val1} *{\f2 ,} *{\f2 val2} *{\f2 )} \par
Verifies that *{\f2 val1} *{\f2 <=} *{\f2 val2} *.\par}
{\bkmkstart AAAAAAAAMZ}
{\bkmkend AAAAAAAAMZ}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
EXPECT_GT
\par}
{\tc\tcl3 \v EXPECT_GT}
{\f2 EXPECT_GT(} *{\f2 val1} *{\f2 ,} *{\f2 val2} *{\f2 )}  \\ {\f2 ASSERT_GT(} *{\f2 val1} *{\f2 ,} *{\f2 val2} *{\f2 )} \par
Verifies that *{\f2 val1} *{\f2 >} *{\f2 val2} *.\par}
{\bkmkstart AAAAAAAANA}
{\bkmkend AAAAAAAANA}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
EXPECT_GE
\par}
{\tc\tcl3 \v EXPECT_GE}
{\f2 EXPECT_GE(} *{\f2 val1} *{\f2 ,} *{\f2 val2} *{\f2 )}  \\ {\f2 ASSERT_GE(} *{\f2 val1} *{\f2 ,} *{\f2 val2} *{\f2 )} \par
Verifies that *{\f2 val1} *{\f2 >=} *{\f2 val2} *.\par}
\par}
{\bkmkstart AAAAAAAANB}
{\bkmkend AAAAAAAANB}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
String Comparison
\par}
{\tc\tcl2 \v String Comparison}
The following assertions compare two {\b C strings} . To compare two {\f2 string}  objects, use {\b `EXPECT_EQ`} or {\b `EXPECT_NE`} instead.\par
These assertions also accept wide C strings ({\f2 wchar_t*} ). If a comparison of two wide strings fails, their values will be printed as UTF-8 narrow strings.\par
To compare a C string with {\f2 NULL} , use {\f2 EXPECT_EQ(} *{\f2 c_string} *{\f2 , nullptr)}  or {\f2 EXPECT_NE(} *{\f2 c_string} *{\f2 , nullptr)} .\par
{\bkmkstart AAAAAAAANC}
{\bkmkend AAAAAAAANC}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
EXPECT_STREQ
\par}
{\tc\tcl3 \v EXPECT_STREQ}
{\f2 EXPECT_STREQ(} *{\f2 str1} *{\f2 ,} *{\f2 str2} *{\f2 )}  \\ {\f2 ASSERT_STREQ(} *{\f2 str1} *{\f2 ,} *{\f2 str2} *{\f2 )} \par
Verifies that the two C strings *{\f2 str1} * and *{\f2 str2} * have the same contents.\par}
{\bkmkstart AAAAAAAAND}
{\bkmkend AAAAAAAAND}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
EXPECT_STRNE
\par}
{\tc\tcl3 \v EXPECT_STRNE}
{\f2 EXPECT_STRNE(} *{\f2 str1} *{\f2 ,} *{\f2 str2} *{\f2 )}  \\ {\f2 ASSERT_STRNE(} *{\f2 str1} *{\f2 ,} *{\f2 str2} *{\f2 )} \par
Verifies that the two C strings *{\f2 str1} * and *{\f2 str2} * have different contents.\par}
{\bkmkstart AAAAAAAANE}
{\bkmkend AAAAAAAANE}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
EXPECT_STRCASEEQ
\par}
{\tc\tcl3 \v EXPECT_STRCASEEQ}
{\f2 EXPECT_STRCASEEQ(} *{\f2 str1} *{\f2 ,} *{\f2 str2} *{\f2 )}  \\ {\f2 ASSERT_STRCASEEQ(} *{\f2 str1} *{\f2 ,} *{\f2 str2} *{\f2 )} \par
Verifies that the two C strings *{\f2 str1} * and *{\f2 str2} * have the same contents, ignoring case.\par}
{\bkmkstart AAAAAAAANF}
{\bkmkend AAAAAAAANF}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
EXPECT_STRCASENE
\par}
{\tc\tcl3 \v EXPECT_STRCASENE}
{\f2 EXPECT_STRCASENE(} *{\f2 str1} *{\f2 ,} *{\f2 str2} *{\f2 )}  \\ {\f2 ASSERT_STRCASENE(} *{\f2 str1} *{\f2 ,} *{\f2 str2} *{\f2 )} \par
Verifies that the two C strings *{\f2 str1} * and *{\f2 str2} * have different contents, ignoring case.\par}
\par}
{\bkmkstart AAAAAAAANG}
{\bkmkend AAAAAAAANG}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Floating-Point Comparison
\par}
{\tc\tcl2 \v Floating-Point Comparison}
The following assertions compare two floating-point values.\par
Due to rounding errors, it is very unlikely that two floating-point values will match exactly, so {\f2 EXPECT_EQ}  is not suitable. In general, for floating-point comparison to make sense, the user needs to carefully choose the error bound.\par
GoogleTest also provides assertions that use a default error bound based on Units in the Last Place (ULPs). To learn more about ULPs, see the article {\f2 Comparing Floating Point Numbers}.\par
{\bkmkstart AAAAAAAANH}
{\bkmkend AAAAAAAANH}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
EXPECT_FLOAT_EQ
\par}
{\tc\tcl3 \v EXPECT_FLOAT_EQ}
{\f2 EXPECT_FLOAT_EQ(} *{\f2 val1} *{\f2 ,} *{\f2 val2} *{\f2 )}  \\ {\f2 ASSERT_FLOAT_EQ(} *{\f2 val1} *{\f2 ,} *{\f2 val2} *{\f2 )} \par
Verifies that the two {\f2 float}  values *{\f2 val1} * and *{\f2 val2} * are approximately equal, to within 4 ULPs from each other.\par}
{\bkmkstart AAAAAAAANI}
{\bkmkend AAAAAAAANI}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
EXPECT_DOUBLE_EQ
\par}
{\tc\tcl3 \v EXPECT_DOUBLE_EQ}
{\f2 EXPECT_DOUBLE_EQ(} *{\f2 val1} *{\f2 ,} *{\f2 val2} *{\f2 )}  \\ {\f2 ASSERT_DOUBLE_EQ(} *{\f2 val1} *{\f2 ,} *{\f2 val2} *{\f2 )} \par
Verifies that the two {\f2 double}  values *{\f2 val1} * and *{\f2 val2} * are approximately equal, to within 4 ULPs from each other.\par}
{\bkmkstart AAAAAAAANJ}
{\bkmkend AAAAAAAANJ}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
EXPECT_NEAR
\par}
{\tc\tcl3 \v EXPECT_NEAR}
{\f2 EXPECT_NEAR(} *{\f2 val1} *{\f2 ,} *{\f2 val2} *{\f2 ,} *{\f2 abs_error} *{\f2 )}  \\ {\f2 ASSERT_NEAR(} *{\f2 val1} *{\f2 ,} *{\f2 val2} *{\f2 ,} *{\f2 abs_error} *{\f2 )} \par
Verifies that the difference between *{\f2 val1} * and *{\f2 val2} * does not exceed the absolute error bound *{\f2 abs_error} *.\par}
\par}
{\bkmkstart AAAAAAAANK}
{\bkmkend AAAAAAAANK}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Exception Assertions
\par}
{\tc\tcl2 \v Exception Assertions}
The following assertions verify that a piece of code throws, or does not throw, an exception. Usage requires exceptions to be enabled in the build environment.\par
Note that the piece of code under test can be a compound statement, for example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_NO_THROW(\{\par
  {\cf18 int} n = 5;\par
  DoSomething(&n);\par
\});\par
}
\par
{\bkmkstart AAAAAAAANL}
{\bkmkend AAAAAAAANL}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
EXPECT_THROW
\par}
{\tc\tcl3 \v EXPECT_THROW}
{\f2 EXPECT_THROW(} *{\f2 statement} *{\f2 ,} *{\f2 exception_type} *{\f2 )}  \\ {\f2 ASSERT_THROW(} *{\f2 statement} *{\f2 ,} *{\f2 exception_type} *{\f2 )} \par
Verifies that *{\f2 statement} * throws an exception of type *{\f2 exception_type} *.\par}
{\bkmkstart AAAAAAAANM}
{\bkmkend AAAAAAAANM}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
EXPECT_ANY_THROW
\par}
{\tc\tcl3 \v EXPECT_ANY_THROW}
{\f2 EXPECT_ANY_THROW(} *{\f2 statement} *{\f2 )}  \\ {\f2 ASSERT_ANY_THROW(} *{\f2 statement} *{\f2 )} \par
Verifies that *{\f2 statement} * throws an exception of any type.\par}
{\bkmkstart AAAAAAAANN}
{\bkmkend AAAAAAAANN}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
EXPECT_NO_THROW
\par}
{\tc\tcl3 \v EXPECT_NO_THROW}
{\f2 EXPECT_NO_THROW(} *{\f2 statement} *{\f2 )}  \\ {\f2 ASSERT_NO_THROW(} *{\f2 statement} *{\f2 )} \par
Verifies that *{\f2 statement} * does not throw any exception.\par}
\par}
{\bkmkstart AAAAAAAANO}
{\bkmkend AAAAAAAANO}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Predicate Assertions
\par}
{\tc\tcl2 \v Predicate Assertions}
The following assertions enable more complex predicates to be verified while printing a more clear failure message than if {\f2 EXPECT_TRUE}  were used alone.\par
{\bkmkstart AAAAAAAANP}
{\bkmkend AAAAAAAANP}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
EXPECT_PRED*
\par}
{\tc\tcl3 \v EXPECT_PRED*}
{\f2 EXPECT_PRED1(} *{\f2 pred} *{\f2 ,} *{\f2 val1} *{\f2 )}  \\ {\f2 EXPECT_PRED2(} *{\f2 pred} *{\f2 ,} *{\f2 val1} *{\f2 ,} *{\f2 val2} *{\f2 )}  \\ {\f2 EXPECT_PRED3(} *{\f2 pred} *{\f2 ,} *{\f2 val1} *{\f2 ,} *{\f2 val2} *{\f2 ,} *{\f2 val3} *{\f2 )}  \\ {\f2 EXPECT_PRED4(} *{\f2 pred} *{\f2 ,} *{\f2 val1} *{\f2 ,} *{\f2 val2} *{\f2 ,} *{\f2 val3} *{\f2 ,} *{\f2 val4} *{\f2 )}  \\ {\f2 EXPECT_PRED5(} *{\f2 pred} *{\f2 ,} *{\f2 val1} *{\f2 ,} *{\f2 val2} *{\f2 ,} *{\f2 val3} *{\f2 ,} *{\f2 val4} *{\f2 ,} *{\f2 val5} *{\f2 )} \par
{\f2 ASSERT_PRED1(} *{\f2 pred} *{\f2 ,} *{\f2 val1} *{\f2 )}  \\ {\f2 ASSERT_PRED2(} *{\f2 pred} *{\f2 ,} *{\f2 val1} *{\f2 ,} *{\f2 val2} *{\f2 )}  \\ {\f2 ASSERT_PRED3(} *{\f2 pred} *{\f2 ,} *{\f2 val1} *{\f2 ,} *{\f2 val2} *{\f2 ,} *{\f2 val3} *{\f2 )}  \\ {\f2 ASSERT_PRED4(} *{\f2 pred} *{\f2 ,} *{\f2 val1} *{\f2 ,} *{\f2 val2} *{\f2 ,} *{\f2 val3} *{\f2 ,} *{\f2 val4} *{\f2 )}  \\ {\f2 ASSERT_PRED5(} *{\f2 pred} *{\f2 ,} *{\f2 val1} *{\f2 ,} *{\f2 val2} *{\f2 ,} *{\f2 val3} *{\f2 ,} *{\f2 val4} *{\f2 ,} *{\f2 val5} *{\f2 )} \par
Verifies that the predicate *{\f2 pred} * returns {\f2 true}  when passed the given values as arguments.\par
The parameter *{\f2 pred} * is a function or functor that accepts as many arguments as the corresponding macro accepts values. If *{\f2 pred} * returns {\f2 true}  for the given arguments, the assertion succeeds, otherwise the assertion fails.\par
When the assertion fails, it prints the value of each argument. Arguments are always evaluated exactly once.\par
As an example, see the following code:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf20 // Returns true if m and n have no common divisors except 1.}\par
{\cf18 bool} MutuallyPrime({\cf18 int} m, {\cf18 int} n) \{ ... \}\par
...\par
const {\cf18 int} a = 3;\par
{\cf17 const} {\cf18 int} b = 4;\par
{\cf17 const} {\cf18 int} c = 10;\par
...\par
EXPECT_PRED2(MutuallyPrime, a, b);  {\cf20 // Succeeds}\par
EXPECT_PRED2(MutuallyPrime, b, c);  {\cf20 // Fails}\par
}
\par
In the above example, the first assertion succeeds, and the second fails with the following message:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MutuallyPrime(b, c) is false, where\par
b is 4\par
c is 10\par
}
\par
Note that if the given predicate is an overloaded function or a function template, the assertion macro might not be able to determine which version to use, and it might be necessary to explicitly specify the type of the function. For example, for a Boolean function {\f2 IsPositive()}  overloaded to take either a single {\f2 int}  or {\f2 double}  argument, it would be necessary to write one of the following:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_PRED1({\cf17 static_cast<}{\cf18 bool} (*)({\cf18 int}){\cf17 >}(IsPositive), 5);\par
EXPECT_PRED1({\cf17 static_cast<}{\cf18 bool} (*)({\cf18 double}){\cf17 >}(IsPositive), 3.14);\par
}
\par
Writing simply {\f2 EXPECT_PRED1(IsPositive, 5);}  would result in a compiler error. Similarly, to use a template function, specify the template arguments:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 template} <{\cf17 typename} T>\par
{\cf18 bool} IsNegative(T x) \{\par
  {\cf19 return} x < 0;\par
\}\par
...\par
EXPECT_PRED1(IsNegative<int>, -5);  {\cf20 // Must specify type for IsNegative}\par
}
\par
If a template has multiple parameters, wrap the predicate in parentheses so the macro arguments are parsed correctly:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_PRED2((MyPredicate<int, int>), 5, 0);\par
}
\par}
{\bkmkstart AAAAAAAANQ}
{\bkmkend AAAAAAAANQ}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
EXPECT_PRED_FORMAT*
\par}
{\tc\tcl3 \v EXPECT_PRED_FORMAT*}
{\f2 EXPECT_PRED_FORMAT1(} *{\f2 pred_formatter} *{\f2 ,} *{\f2 val1} *{\f2 )}  \\ {\f2 EXPECT_PRED_FORMAT2(} *{\f2 pred_formatter} *{\f2 ,} *{\f2 val1} *{\f2 ,} *{\f2 val2} *{\f2 )}  \\ {\f2 EXPECT_PRED_FORMAT3(} *{\f2 pred_formatter} *{\f2 ,} *{\f2 val1} *{\f2 ,} *{\f2 val2} *{\f2 ,} *{\f2 val3} *{\f2 )}  \\ {\f2 EXPECT_PRED_FORMAT4(} *{\f2 pred_formatter} *{\f2 ,} *{\f2 val1} *{\f2 ,} *{\f2 val2} *{\f2 ,} *{\f2 val3} *{\f2 ,} *{\f2 val4} *{\f2 )}  \\ {\f2 EXPECT_PRED_FORMAT5(} *{\f2 pred_formatter} *{\f2 ,} *{\f2 val1} *{\f2 ,} *{\f2 val2} *{\f2 ,} *{\f2 val3} *{\f2 ,} *{\f2 val4} *{\f2 ,} *{\f2 val5} *{\f2 )} \par
{\f2 ASSERT_PRED_FORMAT1(} *{\f2 pred_formatter} *{\f2 ,} *{\f2 val1} *{\f2 )}  \\ {\f2 ASSERT_PRED_FORMAT2(} *{\f2 pred_formatter} *{\f2 ,} *{\f2 val1} *{\f2 ,} *{\f2 val2} *{\f2 )}  \\ {\f2 ASSERT_PRED_FORMAT3(} *{\f2 pred_formatter} *{\f2 ,} *{\f2 val1} *{\f2 ,} *{\f2 val2} *{\f2 ,} *{\f2 val3} *{\f2 )}  \\ {\f2 ASSERT_PRED_FORMAT4(} *{\f2 pred_formatter} *{\f2 ,} *{\f2 val1} *{\f2 ,} *{\f2 val2} *{\f2 ,} *{\f2 val3} *{\f2 ,} *{\f2 val4} *{\f2 )}  \\ {\f2 ASSERT_PRED_FORMAT5(} *{\f2 pred_formatter} *{\f2 ,} *{\f2 val1} *{\f2 ,} *{\f2 val2} *{\f2 ,} *{\f2 val3} *{\f2 ,} *{\f2 val4} *{\f2 ,} *{\f2 val5} *{\f2 )} \par
Verifies that the predicate *{\f2 pred_formatter} * succeeds when passed the given values as arguments.\par
The parameter *{\f2 pred_formatter} * is a {\i predicate-formatter} , which is a function or functor with the signature:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid testing::AssertionResult PredicateFormatter({\cf17 const} {\cf18 char}* expr1,\par
                                            {\cf17 const} {\cf18 char}* expr2,\par
                                            ...\par
                                            {\cf17 const} {\cf18 char}* exprn,\par
                                            T1 val1,\par
                                            T2 val2,\par
                                            ...\par
                                            Tn valn);\par
}
\par
where *{\f2 val1} *, *{\f2 val2} *, ..., *{\f2 valn} * are the values of the predicate arguments, and *{\f2 expr1} *, *{\f2 expr2} *, ..., *{\f2 exprn} * are the corresponding expressions as they appear in the source code. The types {\f2 T1} , {\f2 T2} , ..., {\f2 Tn}  can be either value types or reference types; if an argument has type {\f2 T} , it can be declared as either {\f2 T}  or {\f2 const T&} , whichever is appropriate. For more about the return type {\f2 testing::AssertionResult} , see {\f2 Using a Function That Returns an AssertionResult}.\par
As an example, see the following code:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf20 // Returns the smallest prime common divisor of m and n,}\par
{\cf20 // or 1 when m and n are mutually prime.}\par
{\cf18 int} SmallestPrimeCommonDivisor({\cf18 int} m, {\cf18 int} n) \{ ... \}\par
\par
{\cf20 // Returns true if m and n have no common divisors except 1.}\par
{\cf18 bool} MutuallyPrime({\cf18 int} m, {\cf18 int} n) \{ ... \}\par
\par
{\cf20 // A predicate-formatter for asserting that two integers are mutually prime.}\par
testing::AssertionResult AssertMutuallyPrime({\cf17 const} {\cf18 char}* m_expr,\par
                                             {\cf17 const} {\cf18 char}* n_expr,\par
                                             {\cf18 int} m,\par
                                             {\cf18 int} n) \{\par
  {\cf19 if} (MutuallyPrime(m, n)) {\cf19 return} testing::AssertionSuccess();\par
\par
  {\cf19 return} testing::AssertionFailure() << m_expr << {\cf22 " and "} << n_expr\par
      << {\cf22 " ("} << m << {\cf22 " and "} << n << {\cf22 ") are not mutually prime, "}\par
      << {\cf22 "as they have a common divisor "} << SmallestPrimeCommonDivisor(m, n);\par
\}\par
\par
...\par
const {\cf18 int} a = 3;\par
{\cf17 const} {\cf18 int} b = 4;\par
{\cf17 const} {\cf18 int} c = 10;\par
...\par
EXPECT_PRED_FORMAT2(AssertMutuallyPrime, a, b);  {\cf20 // Succeeds}\par
EXPECT_PRED_FORMAT2(AssertMutuallyPrime, b, c);  {\cf20 // Fails}\par
}
\par
In the above example, the final assertion fails and the predicate-formatter produces the following failure message:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid b and c (4 and 10) are not mutually prime, as they have a common divisor 2\par
}
\par}
\par}
{\bkmkstart AAAAAAAANR}
{\bkmkend AAAAAAAANR}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Windows HRESULT Assertions
\par}
{\tc\tcl2 \v Windows HRESULT Assertions}
The following assertions test for {\f2 HRESULT}  success or failure. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid CComPtr<IShellDispatch2> shell;\par
ASSERT_HRESULT_SUCCEEDED(shell.CoCreateInstance(L{\cf22 "Shell.Application"}));\par
CComVariant empty;\par
ASSERT_HRESULT_SUCCEEDED(shell->ShellExecute(CComBSTR(url), empty, empty, empty, empty));\par
}
\par
The generated output contains the human-readable error message associated with the returned {\f2 HRESULT}  code.\par
{\bkmkstart AAAAAAAANS}
{\bkmkend AAAAAAAANS}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
EXPECT_HRESULT_SUCCEEDED
\par}
{\tc\tcl3 \v EXPECT_HRESULT_SUCCEEDED}
{\f2 EXPECT_HRESULT_SUCCEEDED(} *{\f2 expression} *{\f2 )}  \\ {\f2 ASSERT_HRESULT_SUCCEEDED(} *{\f2 expression} *{\f2 )} \par
Verifies that *{\f2 expression} * is a success {\f2 HRESULT} .\par}
{\bkmkstart AAAAAAAANT}
{\bkmkend AAAAAAAANT}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
EXPECT_HRESULT_FAILED
\par}
{\tc\tcl3 \v EXPECT_HRESULT_FAILED}
{\f2 EXPECT_HRESULT_FAILED(} *{\f2 expression} *{\f2 )}  \\ {\f2 EXPECT_HRESULT_FAILED(} *{\f2 expression} *{\f2 )} \par
Verifies that *{\f2 expression} * is a failure {\f2 HRESULT} .\par}
\par}
{\bkmkstart AAAAAAAANU}
{\bkmkend AAAAAAAANU}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Death Assertions
\par}
{\tc\tcl2 \v Death Assertions}
The following assertions verify that a piece of code causes the process to terminate. For context, see {\f2 Death Tests}.\par
These assertions spawn a new process and execute the code under test in that process. How that happens depends on the platform and the variable {\f2 ::testing::GTEST_FLAG(death_test_style)} , which is initialized from the command-line flag {\f2 --gtest_death_test_style} .\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
On POSIX systems, {\f2 fork()}  (or {\f2 clone()}  on Linux) is used to spawn the child, after which:{
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If the variable's value is {\f2 "fast"} , the death test statement is immediately executed.\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If the variable's value is {\f2 "threadsafe"} , the child process re-executes the unit test binary just as it was originally invoked, but with some extra flags to cause just the single death test under consideration to be run.\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
On Windows, the child is spawned using the {\f2 CreateProcess()}  API, and re-executes the binary to cause just the single death test under consideration to be run - much like the {\f2 "threadsafe"}  mode on POSIX.\par}
\par
Other values for the variable are illegal and will cause the death test to fail. Currently, the flag's default value is **{\f2 "fast"} **.\par
If the death test statement runs to completion without dying, the child process will nonetheless terminate, and the assertion fails.\par
Note that the piece of code under test can be a compound statement, for example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_DEATH(\{\par
  {\cf18 int} n = 5;\par
  DoSomething(&n);\par
\}, {\cf22 "Error on line .* of DoSomething()"});\par
}
\par
{\bkmkstart AAAAAAAANV}
{\bkmkend AAAAAAAANV}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
EXPECT_DEATH
\par}
{\tc\tcl3 \v EXPECT_DEATH}
{\f2 EXPECT_DEATH(} *{\f2 statement} *{\f2 ,} *{\f2 matcher} *{\f2 )}  \\ {\f2 ASSERT_DEATH(} *{\f2 statement} *{\f2 ,} *{\f2 matcher} *{\f2 )} \par
Verifies that *{\f2 statement} * causes the process to terminate with a nonzero exit status and produces {\f2 stderr}  output that matches *{\f2 matcher} *.\par
The parameter *{\f2 matcher} * is either a {\b matcher} for a {\f2 const std::string&} , or a regular expression (see {\f2 Regular Expression Syntax})\'97a bare string *{\f2 s} * (with no matcher) is treated as {\f2 {\f2 ContainsRegex(s)} }, {\b not}  {\f2 {\f2 Eq(s)} }.\par
For example, the following code verifies that calling {\f2 DoSomething(42)}  causes the process to die with an error message that contains the text {\f2 My error} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_DEATH(DoSomething(42), {\cf22 "My error"});\par
}
\par}
{\bkmkstart AAAAAAAANW}
{\bkmkend AAAAAAAANW}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
EXPECT_DEATH_IF_SUPPORTED
\par}
{\tc\tcl3 \v EXPECT_DEATH_IF_SUPPORTED}
{\f2 EXPECT_DEATH_IF_SUPPORTED(} *{\f2 statement} *{\f2 ,} *{\f2 matcher} *{\f2 )}  \\ {\f2 ASSERT_DEATH_IF_SUPPORTED(} *{\f2 statement} *{\f2 ,} *{\f2 matcher} *{\f2 )} \par
If death tests are supported, behaves the same as {\b `EXPECT_DEATH`}. Otherwise, verifies nothing.\par}
{\bkmkstart AAAAAAAANX}
{\bkmkend AAAAAAAANX}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
EXPECT_DEBUG_DEATH
\par}
{\tc\tcl3 \v EXPECT_DEBUG_DEATH}
{\f2 EXPECT_DEBUG_DEATH(} *{\f2 statement} *{\f2 ,} *{\f2 matcher} *{\f2 )}  \\ {\f2 ASSERT_DEBUG_DEATH(} *{\f2 statement} *{\f2 ,} *{\f2 matcher} *{\f2 )} \par
In debug mode, behaves the same as {\b `EXPECT_DEATH`}. When not in debug mode (i.e. {\f2 NDEBUG}  is defined), just executes *{\f2 statement} *.\par}
{\bkmkstart AAAAAAAANY}
{\bkmkend AAAAAAAANY}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
EXPECT_EXIT
\par}
{\tc\tcl3 \v EXPECT_EXIT}
{\f2 EXPECT_EXIT(} *{\f2 statement} *{\f2 ,} *{\f2 predicate} *{\f2 ,} *{\f2 matcher} *{\f2 )}  \\ {\f2 ASSERT_EXIT(} *{\f2 statement} *{\f2 ,} *{\f2 predicate} *{\f2 ,} *{\f2 matcher} *{\f2 )} \par
Verifies that *{\f2 statement} * causes the process to terminate with an exit status that satisfies *{\f2 predicate} *, and produces {\f2 stderr}  output that matches *{\f2 matcher} *.\par
The parameter *{\f2 predicate} * is a function or functor that accepts an {\f2 int}  exit status and returns a {\f2 bool} . GoogleTest provides two predicates to handle common cases:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf20 // Returns true if the program exited normally with the given exit status code.}\par
::testing::ExitedWithCode(exit_code);\par
\par
{\cf20 // Returns true if the program was killed by the given signal.}\par
{\cf20 // Not available on Windows.}\par
::testing::KilledBySignal(signal_number);\par
}
\par
The parameter *{\f2 matcher} * is either a {\b matcher} for a {\f2 const std::string&} , or a regular expression (see {\f2 Regular Expression Syntax})\'97a bare string *{\f2 s} * (with no matcher) is treated as {\f2 {\f2 ContainsRegex(s)} }, {\b not}  {\f2 {\f2 Eq(s)} }.\par
For example, the following code verifies that calling {\f2 NormalExit()}  causes the process to print a message containing the text {\f2 Success}  to {\f2 stderr}  and exit with exit status code 0:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_EXIT(NormalExit(), testing::ExitedWithCode(0), {\cf22 "Success"});\par
}
 \par}
\par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Matchers Reference{\tc \v Matchers Reference}\par \pard\plain 
{\bkmkstart AAAAAAADYB}
{\bkmkend AAAAAAADYB}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A {\b matcher}  matches a {\i single}  argument. You can use it inside {\f2 ON_CALL()}  or {\f2 EXPECT_CALL()} , or use it to validate a value directly using two macros:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Macro   \cell }{Description    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 EXPECT_THAT(actual_value, matcher)}    \cell }{Asserts that {\f2 actual_value}  matches {\f2 matcher} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_THAT(actual_value, matcher)}    \cell }{The same as {\f2 EXPECT_THAT(actual_value, matcher)} , except that it generates a {\b fatal}  failure.   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
\{: .callout .warning\} {\b WARNING:}  Equality matching via {\f2 EXPECT_THAT(actual_value, expected_value)}  is supported, however note that implicit conversions can cause surprising results. For example, {\f2 EXPECT_THAT(some_bool, "some string")}  will compile and may pass unintentionally.\par
{\b BEST PRACTICE:}  Prefer to make the comparison explicit via {\f2 EXPECT_THAT(actual_value, Eq(expected_value))}  or {\f2 EXPECT_EQ(actual_value,
expected_value)} .\par
Built-in matchers (where {\f2 argument}  is the function argument, e.g. {\f2 actual_value}  in the example above, or when used in the context of {\f2 EXPECT_CALL(mock_object, method(matchers))} , the arguments of {\f2 method} ) are divided into several categories. All matchers are defined in the {\f2 ::testing}  namespace unless otherwise noted.\par
{\bkmkstart AAAAAAAANZ}
{\bkmkend AAAAAAAANZ}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Wildcard
\par}
{\tc\tcl2 \v Wildcard}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Matcher   \cell }{Description    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 _}    \cell }{{\f2 argument}  can be any value of the correct type.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 A<type>()}  or {\f2 An<type>()}    \cell }{{\f2 argument}  can be any value of type {\f2 type} .   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
\par}
{\bkmkstart AAAAAAAAOA}
{\bkmkend AAAAAAAAOA}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Generic Comparison
\par}
{\tc\tcl2 \v Generic Comparison}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Matcher   \cell }{Description    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Eq(value)}  or {\f2 value}    \cell }{{\f2 argument == value}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Ge(value)}    \cell }{{\f2 argument >= value}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Gt(value)}    \cell }{{\f2 argument > value}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Le(value)}    \cell }{{\f2 argument <= value}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Lt(value)}    \cell }{{\f2 argument < value}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Ne(value)}    \cell }{{\f2 argument != value}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 IsFalse()}    \cell }{{\f2 argument}  evaluates to {\f2 false}  in a Boolean context.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 IsTrue()}    \cell }{{\f2 argument}  evaluates to {\f2 true}  in a Boolean context.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 IsNull()}    \cell }{{\f2 argument}  is a {\f2 NULL}  pointer (raw or smart).    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 NotNull()}    \cell }{{\f2 argument}  is a non-null pointer (raw or smart).    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Optional(m)}    \cell }{{\f2 argument}  is {\f2 optional<>}  that contains a value matching {\f2 m} . (For testing whether an {\f2 optional<>}  is set, check for equality with {\f2 nullopt} . You may need to use {\f2 Eq(nullopt)}  if the inner type doesn't have {\f2 ==} .)    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 VariantWith<T>(m)}    \cell }{{\f2 argument}  is {\f2 variant<>}  that holds the alternative of type T with a value matching {\f2 m} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Ref(variable)}    \cell }{{\f2 argument}  is a reference to {\f2 variable} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 TypedEq<type>(value)}    \cell }{{\f2 argument}  has type {\f2 type}  and is equal to {\f2 value} . You may need to use this instead of {\f2 Eq(value)}  when the mock function is overloaded.   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Except {\f2 Ref()} , these matchers make a {\i copy}  of {\f2 value}  in case it's modified or destructed later. If the compiler complains that {\f2 value}  doesn't have a public copy constructor, try wrap it in {\f2 std::ref()} , e.g. {\f2 Eq(std::ref(non_copyable_value))} . If you do that, make sure {\f2 non_copyable_value}  is not changed afterwards, or the meaning of your matcher will be changed.\par
{\f2 IsTrue}  and {\f2 IsFalse}  are useful when you need to use a matcher, or for types that can be explicitly converted to Boolean, but are not implicitly converted to Boolean. In other cases, you can use the basic {\f2 {\f2 EXPECT_TRUE}  and {\f2 EXPECT_FALSE} } assertions.\par}
{\bkmkstart AAAAAAAAOB}
{\bkmkend AAAAAAAAOB}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Floating-Point Matchers
\par}
{\tc\tcl2 \v Floating-Point Matchers}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Matcher   \cell }{Description    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 DoubleEq(a_double)}    \cell }{{\f2 argument}  is a {\f2 double}  value approximately equal to {\f2 a_double} , treating two NaNs as unequal.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 FloatEq(a_float)}    \cell }{{\f2 argument}  is a {\f2 float}  value approximately equal to {\f2 a_float} , treating two NaNs as unequal.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 NanSensitiveDoubleEq(a_double)}    \cell }{{\f2 argument}  is a {\f2 double}  value approximately equal to {\f2 a_double} , treating two NaNs as equal.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 NanSensitiveFloatEq(a_float)}    \cell }{{\f2 argument}  is a {\f2 float}  value approximately equal to {\f2 a_float} , treating two NaNs as equal.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 IsNan()}    \cell }{{\f2 argument}  is any floating-point type with a NaN value.   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
The above matchers use ULP-based comparison (the same as used in googletest). They automatically pick a reasonable error bound based on the absolute value of the expected value. {\f2 DoubleEq()}  and {\f2 FloatEq()}  conform to the IEEE standard, which requires comparing two NaNs for equality to return false. The {\f2 NanSensitive*}  version instead treats two NaNs as equal, which is often what a user wants.\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Matcher   \cell }{Description    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 DoubleNear(a_double, max_abs_error)}    \cell }{{\f2 argument}  is a {\f2 double}  value close to {\f2 a_double}  (absolute error <= {\f2 max_abs_error} ), treating two NaNs as unequal.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 FloatNear(a_float, max_abs_error)}    \cell }{{\f2 argument}  is a {\f2 float}  value close to {\f2 a_float}  (absolute error <= {\f2 max_abs_error} ), treating two NaNs as unequal.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 NanSensitiveDoubleNear(a_double, max_abs_error)}    \cell }{{\f2 argument}  is a {\f2 double}  value close to {\f2 a_double}  (absolute error <= {\f2 max_abs_error} ), treating two NaNs as equal.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 NanSensitiveFloatNear(a_float, max_abs_error)}    \cell }{{\f2 argument}  is a {\f2 float}  value close to {\f2 a_float}  (absolute error <= {\f2 max_abs_error} ), treating two NaNs as equal.   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
\par}
{\bkmkstart AAAAAAAAOC}
{\bkmkend AAAAAAAAOC}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
String Matchers
\par}
{\tc\tcl2 \v String Matchers}
The {\f2 argument}  can be either a C string or a C++ string object:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Matcher   \cell }{Description    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ContainsRegex(string)}    \cell }{{\f2 argument}  matches the given regular expression.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 EndsWith(suffix)}    \cell }{{\f2 argument}  ends with string {\f2 suffix} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 HasSubstr(string)}    \cell }{{\f2 argument}  contains {\f2 string}  as a sub-string.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 IsEmpty()}    \cell }{{\f2 argument}  is an empty string.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 MatchesRegex(string)}    \cell }{{\f2 argument}  matches the given regular expression with the match starting at the first character and ending at the last character.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 StartsWith(prefix)}    \cell }{{\f2 argument}  starts with string {\f2 prefix} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 StrCaseEq(string)}    \cell }{{\f2 argument}  is equal to {\f2 string} , ignoring case.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 StrCaseNe(string)}    \cell }{{\f2 argument}  is not equal to {\f2 string} , ignoring case.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 StrEq(string)}    \cell }{{\f2 argument}  is equal to {\f2 string} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 StrNe(string)}    \cell }{{\f2 argument}  is not equal to {\f2 string} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 WhenBase64Unescaped(m)}    \cell }{{\f2 argument}  is a base-64 escaped string whose unescaped string matches {\f2 m} .   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\f2 ContainsRegex()}  and {\f2 MatchesRegex()}  take ownership of the {\f2 RE}  object. They use the regular expression syntax defined {\f2 here}. All of these matchers, except {\f2 ContainsRegex()}  and {\f2 MatchesRegex()}  work for wide strings as well.\par}
{\bkmkstart AAAAAAAAOD}
{\bkmkend AAAAAAAAOD}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Container Matchers
\par}
{\tc\tcl2 \v Container Matchers}
Most STL-style containers support {\f2 ==} , so you can use {\f2 Eq(expected_container)}  or simply {\f2 expected_container}  to match a container exactly. If you want to write the elements in-line, match them more flexibly, or get more informative messages, you can use:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Matcher   \cell }{Description    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 BeginEndDistanceIs(m)}    \cell }{{\f2 argument}  is a container whose {\f2 begin()}  and {\f2 end()}  iterators are separated by a number of increments matching {\f2 m} . E.g. {\f2 BeginEndDistanceIs(2)}  or {\f2 BeginEndDistanceIs(Lt(2))} . For containers that define a {\f2 size()}  method, {\f2 SizeIs(m)}  may be more efficient.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ContainerEq(container)}    \cell }{The same as {\f2 Eq(container)}  except that the failure message also includes which elements are in one container but not the other.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Contains(e)}    \cell }{{\f2 argument}  contains an element that matches {\f2 e} , which can be either a value or a matcher.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Contains(e).Times(n)}    \cell }{{\f2 argument}  contains elements that match {\f2 e} , which can be either a value or a matcher, and the number of matches is {\f2 n} , which can be either a value or a matcher. Unlike the plain {\f2 Contains}  and {\f2 Each}  this allows to check for arbitrary occurrences including testing for absence with {\f2 Contains(e).Times(0)} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Each(e)}    \cell }{{\f2 argument}  is a container where {\i every}  element matches {\f2 e} , which can be either a value or a matcher.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ElementsAre(e0, e1, ..., en)}    \cell }{{\f2 argument}  has {\f2 n + 1}  elements, where the {\i i} -th element matches {\f2 ei} , which can be a value or a matcher.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ElementsAreArray(\{e0, e1, ..., en\})} , {\f2 ElementsAreArray(a_container)} , {\f2 ElementsAreArray(begin, end)} , {\f2 ElementsAreArray(array)} , or {\f2 ElementsAreArray(array, count)}    \cell }{The same as {\f2 ElementsAre()}  except that the expected element values/matchers come from an initializer list, STL-style container, iterator range, or C-style array.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 IsEmpty()}    \cell }{{\f2 argument}  is an empty container ({\f2 container.empty()} ).    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 IsSubsetOf(\{e0, e1, ..., en\})} , {\f2 IsSubsetOf(a_container)} , {\f2 IsSubsetOf(begin, end)} , {\f2 IsSubsetOf(array)} , or {\f2 IsSubsetOf(array, count)}    \cell }{{\f2 argument}  matches {\f2 UnorderedElementsAre(x0, x1, ..., xk)}  for some subset {\f2 \{x0, x1, ..., xk\}}  of the expected matchers.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 IsSupersetOf(\{e0, e1, ..., en\})} , {\f2 IsSupersetOf(a_container)} , {\f2 IsSupersetOf(begin, end)} , {\f2 IsSupersetOf(array)} , or {\f2 IsSupersetOf(array, count)}    \cell }{Some subset of {\f2 argument}  matches {\f2 UnorderedElementsAre(} expected matchers{\f2 )} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Pointwise(m, container)} , {\f2 Pointwise(m, \{e0, e1, ..., en\})}    \cell }{{\f2 argument}  contains the same number of elements as in {\f2 container} , and for all i, (the i-th element in {\f2 argument} , the i-th element in {\f2 container} ) match {\f2 m} , which is a matcher on 2-tuples. E.g. {\f2 Pointwise(Le(), upper_bounds)}  verifies that each element in {\f2 argument}  doesn't exceed the corresponding element in {\f2 upper_bounds} . See more detail below.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SizeIs(m)}    \cell }{{\f2 argument}  is a container whose size matches {\f2 m} . E.g. {\f2 SizeIs(2)}  or {\f2 SizeIs(Lt(2))} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 UnorderedElementsAre(e0, e1, ..., en)}    \cell }{{\f2 argument}  has {\f2 n + 1}  elements, and under {\i some}  permutation of the elements, each element matches an {\f2 ei}  (for a different {\f2 i} ), which can be a value or a matcher.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 UnorderedElementsAreArray(\{e0, e1, ..., en\})} , {\f2 UnorderedElementsAreArray(a_container)} , {\f2 UnorderedElementsAreArray(begin, end)} , {\f2 UnorderedElementsAreArray(array)} , or {\f2 UnorderedElementsAreArray(array, count)}    \cell }{The same as {\f2 UnorderedElementsAre()}  except that the expected element values/matchers come from an initializer list, STL-style container, iterator range, or C-style array.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 UnorderedPointwise(m, container)} , {\f2 UnorderedPointwise(m, \{e0, e1, ..., en\})}    \cell }{Like {\f2 Pointwise(m, container)} , but ignores the order of elements.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 WhenSorted(m)}    \cell }{When {\f2 argument}  is sorted using the {\f2 <}  operator, it matches container matcher {\f2 m} . E.g. {\f2 WhenSorted(ElementsAre(1, 2, 3))}  verifies that {\f2 argument}  contains elements 1, 2, and 3, ignoring order.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 WhenSortedBy(comparator, m)}    \cell }{The same as {\f2 WhenSorted(m)} , except that the given comparator instead of {\f2 <}  is used to sort {\f2 argument} . E.g. {\f2 WhenSortedBy(std::greater(), ElementsAre(3, 2, 1))} .   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\b Notes:} \par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
These matchers can also match:{
\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab a native array passed by reference (e.g. in {\f2 Foo(const int (&a)[5])} ), and\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
2.\tab an array passed as a pointer and a count (e.g. in {\f2 Bar(const T* buffer,
        int len)}  \'96 see {\b Multi-argument Matchers}).\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The array being matched may be multi-dimensional (i.e. its elements can be arrays).\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 m}  in {\f2 Pointwise(m, ...)}  and {\f2 UnorderedPointwise(m, ...)}  should be a matcher for {\f2 ::std::tuple<T, U>}  where {\f2 T}  and {\f2 U}  are the element type of the actual container and the expected container, respectively. For example, to compare two {\f2 Foo}  containers where {\f2 Foo}  doesn't support {\f2 operator==} , one might write:\par
```cpp MATCHER(FooEq, "") \{ return std::get<0>(arg).Equals(std::get<1>(arg)); \} ... EXPECT_THAT(actual_foos, Pointwise(FooEq(), expected_foos)); ```\par}
\par
\par}
{\bkmkstart AAAAAAAAOE}
{\bkmkend AAAAAAAAOE}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Member Matchers
\par}
{\tc\tcl2 \v Member Matchers}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Matcher   \cell }{Description    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Field(&class::field, m)}    \cell }{{\f2 argument.field}  (or {\f2 argument->field}  when {\f2 argument}  is a plain pointer) matches matcher {\f2 m} , where {\f2 argument}  is an object of type {\i class} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Field(field_name, &class::field, m)}    \cell }{The same as the two-parameter version, but provides a better error message.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Key(e)}    \cell }{{\f2 argument.first}  matches {\f2 e} , which can be either a value or a matcher. E.g. {\f2 Contains(Key(Le(5)))}  can verify that a {\f2 map}  contains a key {\f2 <= 5} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Pair(m1, m2)}    \cell }{{\f2 argument}  is an {\f2 std::pair}  whose {\f2 first}  field matches {\f2 m1}  and {\f2 second}  field matches {\f2 m2} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 FieldsAre(m...)}    \cell }{{\f2 argument}  is a compatible object where each field matches piecewise with the matchers {\f2 m...} . A compatible object is any that supports the {\f2 std::tuple_size<Obj>} +{\f2 get<I>(obj)}  protocol. In C++17 and up this also supports types compatible with structured bindings, like aggregates.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Property(&class::property, m)}    \cell }{{\f2 argument.property()}  (or {\f2 argument->property()}  when {\f2 argument}  is a plain pointer) matches matcher {\f2 m} , where {\f2 argument}  is an object of type {\i class} . The method {\f2 property()}  must take no argument and be declared as {\f2 const} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Property(property_name, &class::property, m)}    \cell }{The same as the two-parameter version, but provides a better error message.   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\b Notes:} \par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You can use {\f2 FieldsAre()}  to match any type that supports structured bindings, such as {\f2 std::tuple} , {\f2 std::pair} , {\f2 std::array} , and aggregate types. For example:\par
```cpp std::tuple<int, std::string> my_tuple\{7, "hello world"\}; EXPECT_THAT(my_tuple, FieldsAre(Ge(0), HasSubstr("hello")));\par
struct MyStruct \{ int value = 42; std::string greeting = "aloha"; \}; MyStruct s; EXPECT_THAT(s, FieldsAre(42, "aloha")); ```\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Don't use {\f2 Property()}  against member functions that you do not own, because taking addresses of functions is fragile and generally not part of the contract of the function.\par}
\par
\par}
{\bkmkstart AAAAAAAAOF}
{\bkmkend AAAAAAAAOF}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Matching the Result of a Function, Functor, or Callback
\par}
{\tc\tcl2 \v Matching the Result of a Function, Functor, or Callback}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Matcher   \cell }{Description    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ResultOf(f, m)}    \cell }{{\f2 f(argument)}  matches matcher {\f2 m} , where {\f2 f}  is a function or functor.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ResultOf(result_description, f, m)}    \cell }{The same as the two-parameter version, but provides a better error message.   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
\par}
{\bkmkstart AAAAAAAAOG}
{\bkmkend AAAAAAAAOG}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Pointer Matchers
\par}
{\tc\tcl2 \v Pointer Matchers}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Matcher   \cell }{Description    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Address(m)}    \cell }{the result of {\f2 std::addressof(argument)}  matches {\f2 m} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Pointee(m)}    \cell }{{\f2 argument}  (either a smart pointer or a raw pointer) points to a value that matches matcher {\f2 m} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Pointer(m)}    \cell }{{\f2 argument}  (either a smart pointer or a raw pointer) contains a pointer that matches {\f2 m} . {\f2 m}  will match against the raw pointer regardless of the type of {\f2 argument} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 WhenDynamicCastTo<T>(m)}    \cell }{when {\f2 argument}  is passed through {\f2 dynamic_cast<T>()} , it matches matcher {\f2 m} .   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
\par}
{\bkmkstart AAAAAAAAOH}
{\bkmkend AAAAAAAAOH}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Multi-argument Matchers
\par}
{\tc\tcl2 \v Multi-argument Matchers}
Technically, all matchers match a {\i single}  value. A "multi-argument" matcher is just one that matches a {\i tuple} . The following matchers can be used to match a tuple {\f2 (x, y)} :\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Matcher   \cell }{Description    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Eq()}    \cell }{{\f2 x == y}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Ge()}    \cell }{{\f2 x >= y}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Gt()}    \cell }{{\f2 x > y}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Le()}    \cell }{{\f2 x <= y}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Lt()}    \cell }{{\f2 x < y}     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Ne()}    \cell }{{\f2 x != y}    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
You can use the following selectors to pick a subset of the arguments (or reorder them) to participate in the matching:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Matcher   \cell }{Description    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 AllArgs(m)}    \cell }{Equivalent to {\f2 m} . Useful as syntactic sugar in {\f2 .With(AllArgs(m))} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Args<N1, N2, ..., Nk>(m)}    \cell }{The tuple of the {\f2 k}  selected (using 0-based indices) arguments matches {\f2 m} , e.g. {\f2 Args<1, 2>(Eq())} .   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
\par}
{\bkmkstart AAAAAAAAOI}
{\bkmkend AAAAAAAAOI}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Composite Matchers
\par}
{\tc\tcl2 \v Composite Matchers}
You can make a matcher from one or more other matchers:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Matcher   \cell }{Description    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 AllOf(m1, m2, ..., mn)}    \cell }{{\f2 argument}  matches all of the matchers {\f2 m1}  to {\f2 mn} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 AllOfArray(\{m0, m1, ..., mn\})} , {\f2 AllOfArray(a_container)} , {\f2 AllOfArray(begin, end)} , {\f2 AllOfArray(array)} , or {\f2 AllOfArray(array, count)}    \cell }{The same as {\f2 AllOf()}  except that the matchers come from an initializer list, STL-style container, iterator range, or C-style array.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 AnyOf(m1, m2, ..., mn)}    \cell }{{\f2 argument}  matches at least one of the matchers {\f2 m1}  to {\f2 mn} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 AnyOfArray(\{m0, m1, ..., mn\})} , {\f2 AnyOfArray(a_container)} , {\f2 AnyOfArray(begin, end)} , {\f2 AnyOfArray(array)} , or {\f2 AnyOfArray(array, count)}    \cell }{The same as {\f2 AnyOf()}  except that the matchers come from an initializer list, STL-style container, iterator range, or C-style array.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Not(m)}    \cell }{{\f2 argument}  doesn't match matcher {\f2 m} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Conditional(cond, m1, m2)}    \cell }{Matches matcher {\f2 m1}  if {\f2 cond}  evaluates to true, else matches {\f2 m2} .   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
\par}
{\bkmkstart AAAAAAAAOJ}
{\bkmkend AAAAAAAAOJ}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Adapters for Matchers
\par}
{\tc\tcl2 \v Adapters for Matchers}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Matcher   \cell }{Description    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 MatcherCast<T>(m)}    \cell }{casts matcher {\f2 m}  to type {\f2 Matcher<T>} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SafeMatcherCast<T>(m)}    \cell }{{\f2 safely casts} matcher {\f2 m}  to type {\f2 Matcher<T>} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Truly(predicate)}    \cell }{{\f2 predicate(argument)}  returns something considered by C++ to be true, where {\f2 predicate}  is a function or functor.   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\f2 AddressSatisfies(callback)}  and {\f2 Truly(callback)}  take ownership of {\f2 callback} , which must be a permanent callback.\par}
{\bkmkstart AAAAAAAAOK}
{\bkmkend AAAAAAAAOK}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Using Matchers as Predicates
\par}
{\tc\tcl2 \v Using Matchers as Predicates}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Matcher   \cell }{Description    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Matches(m)(value)}    \cell }{evaluates to {\f2 true}  if {\f2 value}  matches {\f2 m} . You can use {\f2 Matches(m)}  alone as a unary functor.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ExplainMatchResult(m, value, result_listener)}    \cell }{evaluates to {\f2 true}  if {\f2 value}  matches {\f2 m} , explaining the result to {\f2 result_listener} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Value(value, m)}    \cell }{evaluates to {\f2 true}  if {\f2 value}  matches {\f2 m} .   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
\par}
{\bkmkstart AAAAAAAAOL}
{\bkmkend AAAAAAAAOL}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Defining Matchers
\par}
{\tc\tcl2 \v Defining Matchers}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Macro   \cell }{Description    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 MATCHER(IsEven, "") \{ return (arg % 2) == 0; \}}    \cell }{Defines a matcher {\f2 IsEven()}  to match an even number.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 MATCHER_P(IsDivisibleBy, n, "") \{ *result_listener << "where the remainder is " << (arg % n); return (arg % n) == 0; \}}    \cell }{Defines a matcher {\f2 IsDivisibleBy(n)}  to match a number divisible by {\f2 n} .    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 MATCHER_P2(IsBetween, a, b, absl::StrCat(negation ? "isn't" : "is", " between ", PrintToString(a), " and ", PrintToString(b))) \{ return a <= arg && arg <= b; \}}    \cell }{Defines a matcher {\f2 IsBetween(a, b)}  to match a value in the range [{\f2 a} , {\f2 b} ].   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\b Notes:} \par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The {\f2 MATCHER*}  macros cannot be used inside a function or class.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
2.\tab The matcher body must be {\i purely functional}  (i.e. it cannot have any side effect, and the result must not depend on anything other than the value being matched and the matcher parameters).\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
3.\tab You can use {\f2 PrintToString(x)}  to convert a value {\f2 x}  of any type to a string.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
4.\tab You can use {\f2 ExplainMatchResult()}  in a custom matcher to wrap another matcher, for example:\par
```cpp MATCHER_P(NestedPropertyMatches, matcher, "") \{ return ExplainMatchResult(matcher, arg.nested().property(), result_listener); \} ``` \par}
\par
\par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Mocking Reference{\tc \v Mocking Reference}\par \pard\plain 
{\bkmkstart AAAAAAADYC}
{\bkmkend AAAAAAADYC}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This page lists the facilities provided by GoogleTest for creating and working with mock objects. To use them, include the header {\f2 {\b gmock/gmock.h}} .\par
{\bkmkstart AAAAAAAAOM}
{\bkmkend AAAAAAAAOM}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Macros
\par}
{\tc\tcl2 \v Macros}
GoogleTest defines the following macros for working with mocks.\par
{\bkmkstart AAAAAAAAON}
{\bkmkend AAAAAAAAON}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
MOCK_METHOD
\par}
{\tc\tcl3 \v MOCK_METHOD}
{\f2 MOCK_METHOD(} *{\f2 return_type} *{\f2 ,} *{\f2 method_name} *{\f2 , (} *{\f2 args...} *{\f2 ));}  \\ {\f2 MOCK_METHOD(} *{\f2 return_type} *{\f2 ,} *{\f2 method_name} *{\f2 , (} *{\f2 args...} *{\f2 ), (} *{\f2 specs...} *{\f2 ));} \par
Defines a mock method *{\f2 method_name} * with arguments {\f2 (} *{\f2 args...} *{\f2 )}  and return type *{\f2 return_type} * within a mock class.\par
The parameters of {\f2 MOCK_METHOD}  mirror the method declaration. The optional fourth parameter *{\f2 specs...} * is a comma-separated list of qualifiers. The following qualifiers are accepted:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Qualifier   \cell }{Meaning    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 const}    \cell }{Makes the mocked method a {\f2 const}  method. Required if overriding a {\f2 const}  method.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 override}    \cell }{Marks the method with {\f2 override} . Recommended if overriding a {\f2 virtual}  method.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 noexcept}    \cell }{Marks the method with {\f2 noexcept} . Required if overriding a {\f2 noexcept}  method.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Calltype(} *{\f2 calltype} *{\f2 )}    \cell }{Sets the call type for the method, for example {\f2 Calltype(STDMETHODCALLTYPE)} . Useful on Windows.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ref(} *{\f2 qualifier} *{\f2 )}    \cell }{Marks the method with the given reference qualifier, for example {\f2 ref(&)}  or {\f2 ref(&&)} . Required if overriding a method that has a reference qualifier.   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Note that commas in arguments prevent {\f2 MOCK_METHOD}  from parsing the arguments correctly if they are not appropriately surrounded by parentheses. See the following example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 class }MyMock \{\par
 {\cf17 public}:\par
  {\cf20 // The following 2 lines will not compile due to commas in the arguments:}\par
  MOCK_METHOD(std::pair<bool, int>, GetPair, ());              {\cf20 // Error!}\par
  MOCK_METHOD({\cf18 bool}, CheckMap, (std::map<int, double>, {\cf18 bool}));  {\cf20 // Error!}\par
\par
  {\cf20 // One solution - wrap arguments that contain commas in parentheses:}\par
  MOCK_METHOD((std::pair<bool, int>), GetPair, ());\par
  MOCK_METHOD({\cf18 bool}, CheckMap, ((std::map<int, double>), {\cf18 bool}));\par
\par
  {\cf20 // Another solution - use type aliases:}\par
  {\cf17 using }BoolAndInt = std::pair<bool, int>;\par
  MOCK_METHOD(BoolAndInt, GetPair, ());\par
  {\cf17 using }MapIntDouble = std::map<int, double>;\par
  MOCK_METHOD({\cf18 bool}, CheckMap, (MapIntDouble, {\cf18 bool}));\par
\};\par
}
\par
{\f2 MOCK_METHOD}  must be used in the {\f2 public:}  section of a mock class definition, regardless of whether the method being mocked is {\f2 public} , {\f2 protected} , or {\f2 private}  in the base class.\par}
{\bkmkstart AAAAAAAAOO}
{\bkmkend AAAAAAAAOO}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
EXPECT_CALL
\par}
{\tc\tcl3 \v EXPECT_CALL}
{\f2 EXPECT_CALL(} *{\f2 mock_object} *{\f2 ,} *{\f2 method_name} *{\f2 (} *{\f2 matchers...} *{\f2 ))} \par
Creates an {\f2 expectation} that the method *{\f2 method_name} * of the object *{\f2 mock_object} * is called with arguments that match the given matchers *{\f2 matchers...} *. {\f2 EXPECT_CALL}  must precede any code that exercises the mock object.\par
The parameter *{\f2 matchers...} * is a comma-separated list of {\f2 matchers} that correspond to each argument of the method *{\f2 method_name} *. The expectation will apply only to calls of *{\f2 method_name} * whose arguments match all of the matchers. If {\f2 (} *{\f2 matchers...} *{\f2 )}  is omitted, the expectation behaves as if each argument's matcher were a {\f2 wildcard matcher ({\f2 _} )}. See the {\b Matchers Reference} for a list of all built-in matchers.\par
The following chainable clauses can be used to modify the expectation, and they must be used in the following order:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(mock_object, method_name(matchers...))\par
    .With(multi_argument_matcher)  {\cf20 // Can be used at most once}\par
    .Times(cardinality)            {\cf20 // Can be used at most once}\par
    .InSequence(sequences...)      {\cf20 // Can be used any number of times}\par
    .After(expectations...)        {\cf20 // Can be used any number of times}\par
    .WillOnce(action)              {\cf20 // Can be used any number of times}\par
    .WillRepeatedly(action)        {\cf20 // Can be used at most once}\par
    .RetiresOnSaturation();        {\cf20 // Can be used at most once}\par
}
\par
See details for each modifier clause below.\par
{\bkmkstart AAAAAAAAOP}
{\bkmkend AAAAAAAAOP}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
With \{#EXPECT_CALL.With\}
\par}
{\tc\tcl4 \v With \{#EXPECT_CALL.With\}}
{\f2 .With(} *{\f2 multi_argument_matcher} *{\f2 )} \par
Restricts the expectation to apply only to mock function calls whose arguments as a whole match the multi-argument matcher *{\f2 multi_argument_matcher} *.\par
GoogleTest passes all of the arguments as one tuple into the matcher. The parameter *{\f2 multi_argument_matcher} * must thus be a matcher of type {\f2 Matcher<std::tuple<A1, ..., An>>} , where {\f2 A1, ..., An}  are the types of the function arguments.\par
For example, the following code sets the expectation that {\f2 my_mock.SetPosition()}  is called with any two arguments, the first argument being less than the second:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Lt;\par
...\par
EXPECT_CALL(my_mock, SetPosition(_, _))\par
    .With(Lt());\par
}
\par
GoogleTest provides some built-in matchers for 2-tuples, including the {\f2 Lt()}  matcher above. See {\f2 Multi-argument Matchers}.\par
The {\f2 With}  clause can be used at most once on an expectation and must be the first clause.\par}
{\bkmkstart AAAAAAAAOQ}
{\bkmkend AAAAAAAAOQ}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Times \{#EXPECT_CALL.Times\}
\par}
{\tc\tcl4 \v Times \{#EXPECT_CALL.Times\}}
{\f2 .Times(} *{\f2 cardinality} *{\f2 )} \par
Specifies how many times the mock function call is expected.\par
The parameter *{\f2 cardinality} * represents the number of expected calls and can be one of the following, all defined in the {\f2 ::testing}  namespace:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Cardinality   \cell }{Meaning    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 AnyNumber()}    \cell }{The function can be called any number of times.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 AtLeast(n)}    \cell }{The function call is expected at least {\i n}  times.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 AtMost(n)}    \cell }{The function call is expected at most {\i n}  times.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Between(m, n)}    \cell }{The function call is expected between {\i m}  and {\i n}  times, inclusive.    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Exactly(n)}  or {\f2 n}    \cell }{The function call is expected exactly {\i n}  times. If {\i n}  is 0, the call should never happen.   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
If the {\f2 Times}  clause is omitted, GoogleTest infers the cardinality as follows:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If neither `WillOnce` nor `WillRepeatedly` are specified, the inferred cardinality is {\f2 Times(1)} .\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If there are {\i n}  {\f2 WillOnce}  clauses and no {\f2 WillRepeatedly}  clause, where {\i n}  >= 1, the inferred cardinality is {\f2 Times(n)} .\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If there are {\i n}  {\f2 WillOnce}  clauses and one {\f2 WillRepeatedly}  clause, where {\i n}  >= 0, the inferred cardinality is {\f2 Times(AtLeast(n))} .\par}
\par
The {\f2 Times}  clause can be used at most once on an expectation.\par}
{\bkmkstart AAAAAAAAOR}
{\bkmkend AAAAAAAAOR}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
InSequence \{#EXPECT_CALL.InSequence\}
\par}
{\tc\tcl4 \v InSequence \{#EXPECT_CALL.InSequence\}}
{\f2 .InSequence(} *{\f2 sequences...} *{\f2 )} \par
Specifies that the mock function call is expected in a certain sequence.\par
The parameter *{\f2 sequences...} * is any number of {\b `Sequence`} objects. Expected calls assigned to the same sequence are expected to occur in the order the expectations are declared.\par
For example, the following code sets the expectation that the {\f2 Reset()}  method of {\f2 my_mock}  is called before both {\f2 GetSize()}  and {\f2 Describe()} , and {\f2 GetSize()}  and {\f2 Describe()}  can occur in any order relative to each other:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Sequence;\par
Sequence s1, s2;\par
...\par
EXPECT_CALL(my_mock, Reset())\par
    .InSequence(s1, s2);\par
EXPECT_CALL(my_mock, GetSize())\par
    .InSequence(s1);\par
EXPECT_CALL(my_mock, Describe())\par
    .InSequence(s2);\par
}
\par
The {\f2 InSequence}  clause can be used any number of times on an expectation.\par
See also the {\b `InSequence` class}.\par}
{\bkmkstart AAAAAAAAOS}
{\bkmkend AAAAAAAAOS}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
After \{#EXPECT_CALL.After\}
\par}
{\tc\tcl4 \v After \{#EXPECT_CALL.After\}}
{\f2 .After(} *{\f2 expectations...} *{\f2 )} \par
Specifies that the mock function call is expected to occur after one or more other calls.\par
The parameter *{\f2 expectations...} * can be up to five {\b `Expectation`} or {\b `ExpectationSet`} objects. The mock function call is expected to occur after all of the given expectations.\par
For example, the following code sets the expectation that the {\f2 Describe()}  method of {\f2 my_mock}  is called only after both {\f2 InitX()}  and {\f2 InitY()}  have been called.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Expectation;\par
...\par
Expectation init_x = EXPECT_CALL(my_mock, InitX());\par
Expectation init_y = EXPECT_CALL(my_mock, InitY());\par
EXPECT_CALL(my_mock, Describe())\par
    .After(init_x, init_y);\par
}
\par
The {\f2 ExpectationSet}  object is helpful when the number of prerequisites for an expectation is large or variable, for example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::ExpectationSet;\par
...\par
ExpectationSet all_inits;\par
{\cf20 // Collect all expectations of InitElement() calls}\par
{\cf19 for} ({\cf18 int} i = 0; i < element_count; i++) \{\par
  all_inits += EXPECT_CALL(my_mock, InitElement(i));\par
\}\par
EXPECT_CALL(my_mock, Describe())\par
    .After(all_inits);  {\cf20 // Expect Describe() call after all InitElement() calls}\par
}
\par
The {\f2 After}  clause can be used any number of times on an expectation.\par}
{\bkmkstart AAAAAAAAOT}
{\bkmkend AAAAAAAAOT}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
WillOnce \{#EXPECT_CALL.WillOnce\}
\par}
{\tc\tcl4 \v WillOnce \{#EXPECT_CALL.WillOnce\}}
{\f2 .WillOnce(} *{\f2 action} *{\f2 )} \par
Specifies the mock function's actual behavior when invoked, for a single matching function call.\par
The parameter *{\f2 action} * represents the {\f2 action} that the function call will perform. See the {\b Actions Reference} for a list of built-in actions.\par
The use of {\f2 WillOnce}  implicitly sets a cardinality on the expectation when {\f2 Times}  is not specified. See `Times`.\par
Each matching function call will perform the next action in the order declared. For example, the following code specifies that {\f2 my_mock.GetNumber()}  is expected to be called exactly 3 times and will return {\f2 1} , {\f2 2} , and {\f2 3}  respectively on the first, second, and third calls:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;\par
...\par
EXPECT_CALL(my_mock, GetNumber())\par
    .WillOnce(Return(1))\par
    .WillOnce(Return(2))\par
    .WillOnce(Return(3));\par
}
\par
The {\f2 WillOnce}  clause can be used any number of times on an expectation. Unlike {\f2 WillRepeatedly} , the action fed to each {\f2 WillOnce}  call will be called at most once, so may be a move-only type and/or have an {\f2 &&} -qualified call operator.\par}
{\bkmkstart AAAAAAAAOU}
{\bkmkend AAAAAAAAOU}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
WillRepeatedly \{#EXPECT_CALL.WillRepeatedly\}
\par}
{\tc\tcl4 \v WillRepeatedly \{#EXPECT_CALL.WillRepeatedly\}}
{\f2 .WillRepeatedly(} *{\f2 action} *{\f2 )} \par
Specifies the mock function's actual behavior when invoked, for all subsequent matching function calls. Takes effect after the actions specified in the `WillOnce` clauses, if any, have been performed.\par
The parameter *{\f2 action} * represents the {\f2 action} that the function call will perform. See the {\b Actions Reference} for a list of built-in actions.\par
The use of {\f2 WillRepeatedly}  implicitly sets a cardinality on the expectation when {\f2 Times}  is not specified. See `Times`.\par
If any {\f2 WillOnce}  clauses have been specified, matching function calls will perform those actions before the action specified by {\f2 WillRepeatedly} . See the following example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;\par
...\par
EXPECT_CALL(my_mock, GetName())\par
    .WillRepeatedly(Return({\cf22 "John Doe"}));  {\cf20 // Return "John Doe" on all calls}\par
\par
EXPECT_CALL(my_mock, GetNumber())\par
    .WillOnce(Return(42))        {\cf20 // Return 42 on the first call}\par
    .WillRepeatedly(Return(7));  {\cf20 // Return 7 on all subsequent calls}\par
}
\par
The {\f2 WillRepeatedly}  clause can be used at most once on an expectation.\par}
{\bkmkstart AAAAAAAAOV}
{\bkmkend AAAAAAAAOV}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
RetiresOnSaturation \{#EXPECT_CALL.RetiresOnSaturation\}
\par}
{\tc\tcl4 \v RetiresOnSaturation \{#EXPECT_CALL.RetiresOnSaturation\}}
{\f2 .RetiresOnSaturation()} \par
Indicates that the expectation will no longer be active after the expected number of matching function calls has been reached.\par
The {\f2 RetiresOnSaturation}  clause is only meaningful for expectations with an upper-bounded cardinality. The expectation will {\i retire}  (no longer match any function calls) after it has been {\i saturated}  (the upper bound has been reached). See the following example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::AnyNumber;\par
...\par
EXPECT_CALL(my_mock, SetNumber(_))  {\cf20 // Expectation 1}\par
    .Times(AnyNumber());\par
EXPECT_CALL(my_mock, SetNumber(7))  {\cf20 // Expectation 2}\par
    .Times(2)\par
    .RetiresOnSaturation();\par
}
\par
In the above example, the first two calls to {\f2 my_mock.SetNumber(7)}  match expectation 2, which then becomes inactive and no longer matches any calls. A third call to {\f2 my_mock.SetNumber(7)}  would then match expectation 1. Without {\f2 RetiresOnSaturation()}  on expectation 2, a third call to {\f2 my_mock.SetNumber(7)}  would match expectation 2 again, producing a failure since the limit of 2 calls was exceeded.\par
The {\f2 RetiresOnSaturation}  clause can be used at most once on an expectation and must be the last clause.\par}
\par}
{\bkmkstart AAAAAAAAOW}
{\bkmkend AAAAAAAAOW}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
ON_CALL
\par}
{\tc\tcl3 \v ON_CALL}
{\f2 ON_CALL(} *{\f2 mock_object} *{\f2 ,} *{\f2 method_name} *{\f2 (} *{\f2 matchers...} *{\f2 ))} \par
Defines what happens when the method *{\f2 method_name} * of the object *{\f2 mock_object} * is called with arguments that match the given matchers *{\f2 matchers...} *. Requires a modifier clause to specify the method's behavior. {\i Does not}  set any expectations that the method will be called.\par
The parameter *{\f2 matchers...} * is a comma-separated list of {\f2 matchers} that correspond to each argument of the method *{\f2 method_name} *. The {\f2 ON_CALL}  specification will apply only to calls of *{\f2 method_name} * whose arguments match all of the matchers. If {\f2 (} *{\f2 matchers...} *{\f2 )}  is omitted, the behavior is as if each argument's matcher were a {\f2 wildcard matcher ({\f2 _} )}. See the {\b Matchers Reference} for a list of all built-in matchers.\par
The following chainable clauses can be used to set the method's behavior, and they must be used in the following order:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ON_CALL(mock_object, method_name(matchers...))\par
    .With(multi_argument_matcher)  {\cf20 // Can be used at most once}\par
    .WillByDefault(action);        {\cf20 // Required}\par
}
\par
See details for each modifier clause below.\par
{\bkmkstart AAAAAAAAOX}
{\bkmkend AAAAAAAAOX}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
With \{#ON_CALL.With\}
\par}
{\tc\tcl4 \v With \{#ON_CALL.With\}}
{\f2 .With(} *{\f2 multi_argument_matcher} *{\f2 )} \par
Restricts the specification to only mock function calls whose arguments as a whole match the multi-argument matcher *{\f2 multi_argument_matcher} *.\par
GoogleTest passes all of the arguments as one tuple into the matcher. The parameter *{\f2 multi_argument_matcher} * must thus be a matcher of type {\f2 Matcher<std::tuple<A1, ..., An>>} , where {\f2 A1, ..., An}  are the types of the function arguments.\par
For example, the following code sets the default behavior when {\f2 my_mock.SetPosition()}  is called with any two arguments, the first argument being less than the second:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Lt;\par
using ::testing::Return;\par
...\par
ON_CALL(my_mock, SetPosition(_, _))\par
    .With(Lt())\par
    .WillByDefault(Return({\cf17 true}));\par
}
\par
GoogleTest provides some built-in matchers for 2-tuples, including the {\f2 Lt()}  matcher above. See {\f2 Multi-argument Matchers}.\par
The {\f2 With}  clause can be used at most once with each {\f2 ON_CALL}  statement.\par}
{\bkmkstart AAAAAAAAOY}
{\bkmkend AAAAAAAAOY}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
WillByDefault \{#ON_CALL.WillByDefault\}
\par}
{\tc\tcl4 \v WillByDefault \{#ON_CALL.WillByDefault\}}
{\f2 .WillByDefault(} *{\f2 action} *{\f2 )} \par
Specifies the default behavior of a matching mock function call.\par
The parameter *{\f2 action} * represents the {\f2 action} that the function call will perform. See the {\b Actions Reference} for a list of built-in actions.\par
For example, the following code specifies that by default, a call to {\f2 my_mock.Greet()}  will return {\f2 "hello"} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;\par
...\par
ON_CALL(my_mock, Greet())\par
    .WillByDefault(Return({\cf22 "hello"}));\par
}
\par
The action specified by {\f2 WillByDefault}  is superseded by the actions specified on a matching {\f2 EXPECT_CALL}  statement, if any. See the `WillOnce` and `WillRepeatedly` clauses of {\f2 EXPECT_CALL} .\par
The {\f2 WillByDefault}  clause must be used exactly once with each {\f2 ON_CALL}  statement.\par}
\par}
\par}
{\bkmkstart AAAAAAAAOZ}
{\bkmkend AAAAAAAAOZ}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Classes
\par}
{\tc\tcl2 \v Classes}
GoogleTest defines the following classes for working with mocks.\par
{\bkmkstart AAAAAAAAIK}
{\bkmkend AAAAAAAAIK}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Setting the Default Value for a Return Type
\par}
{\tc\tcl3 \v Setting the Default Value for a Return Type}
{\f2 {\b testing::DefaultValue}<T>} \par
Allows a user to specify the default value for a type {\f2 T}  that is both copyable and publicly destructible (i.e. anything that can be used as a function return type). For mock functions with a return type of {\f2 T} , this default value is returned from function calls that do not specify an action.\par
Provides the static methods {\f2 Set()} , {\f2 SetFactory()} , and {\f2 Clear()}  to manage the default value:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf20 // Sets the default value to be returned. T must be copy constructible.}\par
DefaultValue<T>::Set(value);\par
\par
{\cf20 // Sets a factory. Will be invoked on demand. T must be move constructible.}\par
T MakeT();\par
DefaultValue<T>::SetFactory(&MakeT);\par
\par
{\cf20 // Unsets the default value.}\par
DefaultValue<T>::Clear();\par
}
\par}
{\bkmkstart AAAAAAAAPA}
{\bkmkend AAAAAAAAPA}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
NiceMock
\par}
{\tc\tcl3 \v NiceMock}
{\f2 {\b testing::NiceMock}<T>} \par
Represents a mock object that suppresses warnings on {\f2 uninteresting calls}. The template parameter {\f2 T}  is any mock class, except for another {\f2 NiceMock} , {\f2 NaggyMock} , or {\f2 StrictMock} .\par
Usage of {\f2 NiceMock<T>}  is analogous to usage of {\f2 T} . {\f2 NiceMock<T>}  is a subclass of {\f2 T} , so it can be used wherever an object of type {\f2 T}  is accepted. In addition, {\f2 NiceMock<T>}  can be constructed with any arguments that a constructor of {\f2 T}  accepts.\par
For example, the following code suppresses warnings on the mock {\f2 my_mock}  of type {\f2 MockClass}  if a method other than {\f2 DoSomething()}  is called:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::NiceMock;\par
...\par
NiceMock<MockClass> my_mock({\cf22 "some"}, {\cf22 "args"});\par
EXPECT_CALL(my_mock, DoSomething());\par
... code that uses my_mock ...\par
}
\par
{\f2 NiceMock<T>}  only works for mock methods defined using the {\f2 MOCK_METHOD}  macro directly in the definition of class {\f2 T} . If a mock method is defined in a base class of {\f2 T} , a warning might still be generated.\par
{\f2 NiceMock<T>}  might not work correctly if the destructor of {\f2 T}  is not virtual.\par}
{\bkmkstart AAAAAAAAPB}
{\bkmkend AAAAAAAAPB}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
NaggyMock
\par}
{\tc\tcl3 \v NaggyMock}
{\f2 {\b testing::NaggyMock}<T>} \par
Represents a mock object that generates warnings on {\f2 uninteresting calls}. The template parameter {\f2 T}  is any mock class, except for another {\f2 NiceMock} , {\f2 NaggyMock} , or {\f2 StrictMock} .\par
Usage of {\f2 NaggyMock<T>}  is analogous to usage of {\f2 T} . {\f2 NaggyMock<T>}  is a subclass of {\f2 T} , so it can be used wherever an object of type {\f2 T}  is accepted. In addition, {\f2 NaggyMock<T>}  can be constructed with any arguments that a constructor of {\f2 T}  accepts.\par
For example, the following code generates warnings on the mock {\f2 my_mock}  of type {\f2 MockClass}  if a method other than {\f2 DoSomething()}  is called:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::NaggyMock;\par
...\par
NaggyMock<MockClass> my_mock({\cf22 "some"}, {\cf22 "args"});\par
EXPECT_CALL(my_mock, DoSomething());\par
... code that uses my_mock ...\par
}
\par
{\b Mock} objects of type {\f2 T}  by default behave the same way as {\f2 NaggyMock<T>} .\par}
{\bkmkstart AAAAAAAAPC}
{\bkmkend AAAAAAAAPC}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
StrictMock
\par}
{\tc\tcl3 \v StrictMock}
{\f2 {\b testing::StrictMock}<T>} \par
Represents a mock object that generates test failures on {\f2 uninteresting calls}. The template parameter {\f2 T}  is any mock class, except for another {\f2 NiceMock} , {\f2 NaggyMock} , or {\f2 StrictMock} .\par
Usage of {\f2 StrictMock<T>}  is analogous to usage of {\f2 T} . {\f2 StrictMock<T>}  is a subclass of {\f2 T} , so it can be used wherever an object of type {\f2 T}  is accepted. In addition, {\f2 StrictMock<T>}  can be constructed with any arguments that a constructor of {\f2 T}  accepts.\par
For example, the following code generates a test failure on the mock {\f2 my_mock}  of type {\f2 MockClass}  if a method other than {\f2 DoSomething()}  is called:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::StrictMock;\par
...\par
StrictMock<MockClass> my_mock({\cf22 "some"}, {\cf22 "args"});\par
EXPECT_CALL(my_mock, DoSomething());\par
... code that uses my_mock ...\par
}
\par
{\f2 StrictMock<T>}  only works for mock methods defined using the {\f2 MOCK_METHOD}  macro directly in the definition of class {\f2 T} . If a mock method is defined in a base class of {\f2 T} , a failure might not be generated.\par
{\f2 StrictMock<T>}  might not work correctly if the destructor of {\f2 T}  is not virtual.\par}
{\bkmkstart AAAAAAAAPD}
{\bkmkend AAAAAAAAPD}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Sequence
\par}
{\tc\tcl3 \v Sequence}
{\f2 ::testing::Sequence} \par
Represents a chronological sequence of expectations. See the `InSequence` clause of {\f2 EXPECT_CALL}  for usage.\par}
{\bkmkstart AAAAAAAAPE}
{\bkmkend AAAAAAAAPE}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
InSequence
\par}
{\tc\tcl3 \v InSequence}
{\f2 ::testing::InSequence} \par
An object of this type causes all expectations encountered in its scope to be put in an anonymous sequence.\par
This allows more convenient expression of multiple expectations in a single sequence:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::InSequence;\par
\{\par
  InSequence seq;\par
\par
  {\cf20 // The following are expected to occur in the order declared.}\par
  EXPECT_CALL(...);\par
  EXPECT_CALL(...);\par
  ...\par
  EXPECT_CALL(...);\par
\}\par
}
\par
The name of the {\f2 InSequence}  object does not matter.\par}
{\bkmkstart AAAAAAAAPF}
{\bkmkend AAAAAAAAPF}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Expectation
\par}
{\tc\tcl3 \v Expectation}
{\f2 ::testing::Expectation} \par
Represents a mock function call expectation as created by {\b `EXPECT_CALL`}:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Expectation;\par
Expectation my_expectation = EXPECT_CALL(...);\par
}
\par
Useful for specifying sequences of expectations; see the `After` clause of {\f2 EXPECT_CALL} .\par}
{\bkmkstart AAAAAAAAPG}
{\bkmkend AAAAAAAAPG}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
ExpectationSet
\par}
{\tc\tcl3 \v ExpectationSet}
{\f2 ::testing::ExpectationSet} \par
Represents a set of mock function call expectations.\par
Use the {\f2 +=}  operator to add {\b `Expectation`} objects to the set:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::ExpectationSet;\par
ExpectationSet my_expectations;\par
my_expectations += EXPECT_CALL(...);\par
}
\par
Useful for specifying sequences of expectations; see the `After` clause of {\f2 EXPECT_CALL} . \par}
\par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Testing Reference{\tc \v Testing Reference}\par \pard\plain 
{\bkmkstart AAAAAAADYD}
{\bkmkend AAAAAAADYD}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This page lists the facilities provided by GoogleTest for writing test programs. To use them, include the header {\f2 {\b gtest/gtest.h}} .\par
{\bkmkstart AAAAAAAAPH}
{\bkmkend AAAAAAAAPH}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Macros
\par}
{\tc\tcl2 \v Macros}
GoogleTest defines the following macros for writing tests.\par
{\bkmkstart AAAAAAAAPI}
{\bkmkend AAAAAAAAPI}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
TEST
\par}
{\tc\tcl3 \v TEST}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 
TEST({\i TestSuiteName} , {\i TestName} ) \{
  ... {\i statements}  ...
\}
\par}
Defines an individual test named *{\f2 TestName} * in the test suite *{\f2 TestSuiteName} *, consisting of the given statements.\par
Both arguments *{\f2 TestSuiteName} * and *{\f2 TestName} * must be valid C++ identifiers and must not contain underscores ({\f2 _} ). Tests in different test suites can have the same individual name.\par
The statements within the test body can be any code under test. {\b Assertions} used within the test body determine the outcome of the test.\par}
{\bkmkstart AAAAAAAAPJ}
{\bkmkend AAAAAAAAPJ}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
TEST_F
\par}
{\tc\tcl3 \v TEST_F}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 
TEST_F({\i TestFixtureName} , {\i TestName} ) \{
  ... {\i statements}  ...
\}
\par}
Defines an individual test named *{\f2 TestName} * that uses the test fixture class *{\f2 TestFixtureName} *. The test suite name is *{\f2 TestFixtureName} *.\par
Both arguments *{\f2 TestFixtureName} * and *{\f2 TestName} * must be valid C++ identifiers and must not contain underscores ({\f2 _} ). *{\f2 TestFixtureName} * must be the name of a test fixture class\'97see {\f2 Test Fixtures}.\par
The statements within the test body can be any code under test. {\b Assertions} used within the test body determine the outcome of the test.\par}
{\bkmkstart AAAAAAAAPK}
{\bkmkend AAAAAAAAPK}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
TEST_P
\par}
{\tc\tcl3 \v TEST_P}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 
TEST_P({\i TestFixtureName} , {\i TestName} ) \{
  ... {\i statements}  ...
\}
\par}
Defines an individual value-parameterized test named *{\f2 TestName} * that uses the test fixture class *{\f2 TestFixtureName} *. The test suite name is *{\f2 TestFixtureName} *.\par
Both arguments *{\f2 TestFixtureName} * and *{\f2 TestName} * must be valid C++ identifiers and must not contain underscores ({\f2 _} ). *{\f2 TestFixtureName} * must be the name of a value-parameterized test fixture class\'97see {\f2 Value-Parameterized Tests}.\par
The statements within the test body can be any code under test. Within the test body, the test parameter can be accessed with the {\f2 GetParam()}  function (see {\b `WithParamInterface`}). For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST_P(MyTestSuite, DoesSomething) \{\par
  ...\par
  EXPECT_TRUE(DoSomething(GetParam()));\par
  ...\par
\}\par
}
\par
{\b Assertions} used within the test body determine the outcome of the test.\par
See also {\b `INSTANTIATE_TEST_SUITE_P`}.\par}
{\bkmkstart AAAAAAAAPL}
{\bkmkend AAAAAAAAPL}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
INSTANTIATE_TEST_SUITE_P
\par}
{\tc\tcl3 \v INSTANTIATE_TEST_SUITE_P}
{\f2 INSTANTIATE_TEST_SUITE_P(} *{\f2 InstantiationName} *{\f2 ,} *{\f2 TestSuiteName} *{\f2 ,} *{\f2 param_generator} *{\f2 )}  \\ {\f2 INSTANTIATE_TEST_SUITE_P(} *{\f2 InstantiationName} *{\f2 ,} *{\f2 TestSuiteName} *{\f2 ,} *{\f2 param_generator} *{\f2 ,} *{\f2 name_generator} *{\f2 )} \par
Instantiates the value-parameterized test suite *{\f2 TestSuiteName} * (defined with {\b `TEST_P`}).\par
The argument *{\f2 InstantiationName} * is a unique name for the instantiation of the test suite, to distinguish between multiple instantiations. In test output, the instantiation name is added as a prefix to the test suite name *{\f2 TestSuiteName} *.\par
The argument *{\f2 param_generator} * is one of the following GoogleTest-provided functions that generate the test parameters, all defined in the {\f2 ::testing}  namespace:\par
\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{Parameter Generator   \cell }{Behavior    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Range(begin, end [, step])}    \cell }{Yields values {\f2 \{begin, begin+step, \\ilinebr </td> </tr></table> : : begin+step+step, ...\}} . The values do not : : : include {\f2 end} . {\f2 step}  defaults to 1. : | {\f2 Values(v1, v2, ..., vN)}  | Yields values {\f2 \{v1, v2, ..., vN\}} . | | {\f2 ValuesIn(container)}  or | Yields values from a C-style array, an | : {\f2 ValuesIn(begin,end)}  : STL-style container, or an iterator range : : : {\f2 [begin, end)} . : | {\f2 {\b Bool()}}  | Yields sequence {\f2 \{false, true\}} . | | {\f2 Combine(g1, g2, ..., gN)}  | Yields as {\f2 std::tuple}  {\i n} -tuples all | : : combinations (Cartesian product) of the : : : values generated by the given {\i n}  generators : : : {\f2 g1} , {\f2 g2} , ..., {\f2 gN} . : | {\f2 ConvertGenerator<T>(g)}  | Yields values generated by generator {\f2 g} , | : : {\f2 static_cast}  to {\f2 T} . :\par
The optional last argument *{\f2 name_generator} * is a function or functor that generates custom test name suffixes based on the test parameters. The function must accept an argument of type {\b `TestParamInfo<class ParamType>`} and return a {\f2 std::string} . The test name suffix can only contain alphanumeric characters and underscores. GoogleTest provides {\b `PrintToStringParamName`}, or a custom function can be used for more control:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INSTANTIATE_TEST_SUITE_P(\par
    MyInstantiation, MyTestSuite,\par
    ::testing::Values(...),\par
    [](const ::testing::TestParamInfo<MyTestSuite::ParamType>& info) \{\par
      {\cf20 // Can use info.param here to generate the test suffix}\par
      std::string name = ...\par
      {\cf19 return} name;\par
    \});\par
}
\par
For more information, see {\f2 Value-Parameterized Tests}.\par
See also {\b `GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST`}.\par
\cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
\par}
{\bkmkstart AAAAAAAAPM}
{\bkmkend AAAAAAAAPM}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
TYPED_TEST_SUITE
\par}
{\tc\tcl3 \v TYPED_TEST_SUITE}
{\f2 TYPED_TEST_SUITE(} *{\f2 TestFixtureName} *{\f2 ,} *{\f2 Types} *{\f2 )} \par
Defines a typed test suite based on the test fixture *{\f2 TestFixtureName} *. The test suite name is *{\f2 TestFixtureName} *.\par
The argument *{\f2 TestFixtureName} * is a fixture class template, parameterized by a type, for example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 template} <{\cf17 typename} T>\par
{\cf17 class }MyFixture : {\cf17 public} ::testing::Test \{\par
 {\cf17 public}:\par
  ...\par
  {\cf17 using }List = std::list<T>;\par
  {\cf17 static} T shared_;\par
  T value_;\par
\};\par
}
\par
The argument *{\f2 Types} * is a {\b `Types`} object representing the list of types to run the tests on, for example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 using }MyTypes = ::testing::Types<char, int, unsigned int>;\par
TYPED_TEST_SUITE(MyFixture, MyTypes);\par
}
\par
The type alias ({\f2 using}  or {\f2 typedef} ) is necessary for the {\f2 TYPED_TEST_SUITE}  macro to parse correctly.\par
See also {\b `TYPED_TEST`} and {\f2 Typed Tests} for more information.\par}
{\bkmkstart AAAAAAAAPN}
{\bkmkend AAAAAAAAPN}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
TYPED_TEST
\par}
{\tc\tcl3 \v TYPED_TEST}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 
TYPED_TEST({\i TestSuiteName} , {\i TestName} ) \{
  ... {\i statements}  ...
\}
\par}
Defines an individual typed test named *{\f2 TestName} * in the typed test suite *{\f2 TestSuiteName} *. The test suite must be defined with {\b `TYPED_TEST_SUITE`}.\par
Within the test body, the special name {\f2 TypeParam}  refers to the type parameter, and {\f2 TestFixture}  refers to the fixture class. See the following example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TYPED_TEST(MyFixture, Example) \{\par
  {\cf20 // Inside a test, refer to the special name TypeParam to get the type}\par
  {\cf20 // parameter.  Since we are inside a derived class template, C++ requires}\par
  {\cf20 // us to visit the members of MyFixture via 'this'.}\par
  TypeParam n = this->value_;\par
\par
  {\cf20 // To visit static members of the fixture, add the 'TestFixture::'}\par
  {\cf20 // prefix.}\par
  n += TestFixture::shared_;\par
\par
  {\cf20 // To refer to typedefs in the fixture, add the 'typename TestFixture::'}\par
  {\cf20 // prefix. The 'typename' is required to satisfy the compiler.}\par
  {\cf17 typename} TestFixture::List values;\par
\par
  values.push_back(n);\par
  ...\par
\}\par
}
\par
For more information, see {\f2 Typed Tests}.\par}
{\bkmkstart AAAAAAAAPO}
{\bkmkend AAAAAAAAPO}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
TYPED_TEST_SUITE_P
\par}
{\tc\tcl3 \v TYPED_TEST_SUITE_P}
{\f2 TYPED_TEST_SUITE_P(} *{\f2 TestFixtureName} *{\f2 )} \par
Defines a type-parameterized test suite based on the test fixture *{\f2 TestFixtureName} *. The test suite name is *{\f2 TestFixtureName} *.\par
The argument *{\f2 TestFixtureName} * is a fixture class template, parameterized by a type. See {\b `TYPED_TEST_SUITE`} for an example.\par
See also {\b `TYPED_TEST_P`} and {\f2 Type-Parameterized Tests} for more information.\par}
{\bkmkstart AAAAAAAAPP}
{\bkmkend AAAAAAAAPP}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
TYPED_TEST_P
\par}
{\tc\tcl3 \v TYPED_TEST_P}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 
TYPED_TEST_P({\i TestSuiteName} , {\i TestName} ) \{
  ... {\i statements}  ...
\}
\par}
Defines an individual type-parameterized test named *{\f2 TestName} * in the type-parameterized test suite *{\f2 TestSuiteName} *. The test suite must be defined with {\b `TYPED_TEST_SUITE_P`}.\par
Within the test body, the special name {\f2 TypeParam}  refers to the type parameter, and {\f2 TestFixture}  refers to the fixture class. See {\b `TYPED_TEST`} for an example.\par
See also {\b `REGISTER_TYPED_TEST_SUITE_P`} and {\f2 Type-Parameterized Tests} for more information.\par}
{\bkmkstart AAAAAAAAPQ}
{\bkmkend AAAAAAAAPQ}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
REGISTER_TYPED_TEST_SUITE_P
\par}
{\tc\tcl3 \v REGISTER_TYPED_TEST_SUITE_P}
{\f2 REGISTER_TYPED_TEST_SUITE_P(} *{\f2 TestSuiteName} *{\f2 ,} *{\f2 TestNames...} *{\f2 )} \par
Registers the type-parameterized tests *{\f2 TestNames...} * of the test suite *{\f2 TestSuiteName} *. The test suite and tests must be defined with {\b `TYPED_TEST_SUITE_P`} and {\b `TYPED_TEST_P`}.\par
For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf20 // Define the test suite and tests.}\par
TYPED_TEST_SUITE_P(MyFixture);\par
TYPED_TEST_P(MyFixture, HasPropertyA) \{ ... \}\par
TYPED_TEST_P(MyFixture, HasPropertyB) \{ ... \}\par
\par
{\cf20 // Register the tests in the test suite.}\par
REGISTER_TYPED_TEST_SUITE_P(MyFixture, HasPropertyA, HasPropertyB);\par
}
\par
See also {\b `INSTANTIATE_TYPED_TEST_SUITE_P`} and {\f2 Type-Parameterized Tests} for more information.\par}
{\bkmkstart AAAAAAAAPR}
{\bkmkend AAAAAAAAPR}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
INSTANTIATE_TYPED_TEST_SUITE_P
\par}
{\tc\tcl3 \v INSTANTIATE_TYPED_TEST_SUITE_P}
{\f2 INSTANTIATE_TYPED_TEST_SUITE_P(} *{\f2 InstantiationName} *{\f2 ,} *{\f2 TestSuiteName} *{\f2 ,} *{\f2 Types} *{\f2 )} \par
Instantiates the type-parameterized test suite *{\f2 TestSuiteName} *. The test suite must be registered with {\b `REGISTER_TYPED_TEST_SUITE_P`}.\par
The argument *{\f2 InstantiationName} * is a unique name for the instantiation of the test suite, to distinguish between multiple instantiations. In test output, the instantiation name is added as a prefix to the test suite name *{\f2 TestSuiteName} *.\par
The argument *{\f2 Types} * is a {\b `Types`} object representing the list of types to run the tests on, for example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 using }MyTypes = ::testing::Types<char, int, unsigned int>;\par
INSTANTIATE_TYPED_TEST_SUITE_P(MyInstantiation, MyFixture, MyTypes);\par
}
\par
The type alias ({\f2 using}  or {\f2 typedef} ) is necessary for the {\f2 INSTANTIATE_TYPED_TEST_SUITE_P}  macro to parse correctly.\par
For more information, see {\f2 Type-Parameterized Tests}.\par}
{\bkmkstart AAAAAAAAPS}
{\bkmkend AAAAAAAAPS}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
FRIEND_TEST
\par}
{\tc\tcl3 \v FRIEND_TEST}
{\f2 FRIEND_TEST(} *{\f2 TestSuiteName} *{\f2 ,} *{\f2 TestName} *{\f2 )} \par
Within a class body, declares an individual test as a friend of the class, enabling the test to access private class members.\par
If the class is defined in a namespace, then in order to be friends of the class, test fixtures and tests must be defined in the exact same namespace, without inline or anonymous namespaces.\par
For example, if the class definition looks like the following:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 namespace }my_namespace \{\par
\par
{\cf17 class }MyClass \{\par
  {\cf17 friend} {\cf17 class }MyClassTest;\par
  FRIEND_TEST(MyClassTest, HasPropertyA);\par
  FRIEND_TEST(MyClassTest, HasPropertyB);\par
  ... definition of {\cf17 class }MyClass ...\par
\};\par
\par
\}  {\cf20 // namespace my_namespace}\par
}
\par
Then the test code should look like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 namespace }my_namespace \{\par
\par
{\cf17 class }MyClassTest : {\cf17 public} ::testing::Test \{\par
  ...\par
\};\par
\par
TEST_F(MyClassTest, HasPropertyA) \{ ... \}\par
TEST_F(MyClassTest, HasPropertyB) \{ ... \}\par
\par
\}  {\cf20 // namespace my_namespace}\par
}
\par
See {\f2 Testing Private Code} for more information.\par}
{\bkmkstart AAAAAAAAPT}
{\bkmkend AAAAAAAAPT}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
SCOPED_TRACE
\par}
{\tc\tcl3 \v SCOPED_TRACE}
{\f2 SCOPED_TRACE(} *{\f2 message} *{\f2 )} \par
Causes the current file name, line number, and the given message *{\f2 message} * to be added to the failure message for each assertion failure that occurs in the scope.\par
For more information, see {\f2 Adding Traces to Assertions}.\par
See also the {\b `ScopedTrace` class}.\par}
{\bkmkstart AAAAAAAAPU}
{\bkmkend AAAAAAAAPU}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
GTEST_SKIP
\par}
{\tc\tcl3 \v GTEST_SKIP}
{\f2 GTEST_SKIP()} \par
Prevents further test execution at runtime.\par
Can be used in individual test cases or in the {\f2 SetUp()}  methods of test environments or test fixtures (classes derived from the {\b `Environment`} or {\b `Test`} classes). If used in a global test environment {\f2 SetUp()}  method, it skips all tests in the test program. If used in a test fixture {\f2 SetUp()}  method, it skips all tests in the corresponding test suite.\par
Similar to assertions, {\f2 GTEST_SKIP}  allows streaming a custom message into it.\par
See {\f2 Skipping Test Execution} for more information.\par}
{\bkmkstart AAAAAAAAPV}
{\bkmkend AAAAAAAAPV}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST
\par}
{\tc\tcl3 \v GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST}
{\f2 GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(} *{\f2 TestSuiteName} *{\f2 )} \par
Allows the value-parameterized test suite *{\f2 TestSuiteName} * to be uninstantiated.\par
By default, every {\b `TEST_P`} call without a corresponding {\b `INSTANTIATE_TEST_SUITE_P`} call causes a failing test in the test suite {\f2 GoogleTestVerification} . {\f2 GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST}  suppresses this failure for the given test suite.\par}
\par}
{\bkmkstart AAAAAAAAPW}
{\bkmkend AAAAAAAAPW}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Classes and types
\par}
{\tc\tcl2 \v Classes and types}
GoogleTest defines the following classes and types to help with writing tests.\par
{\bkmkstart AAAAAAAAPX}
{\bkmkend AAAAAAAAPX}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
AssertionResult
\par}
{\tc\tcl3 \v AssertionResult}
{\f2 ::testing::AssertionResult} \par
A class for indicating whether an assertion was successful.\par
When the assertion wasn't successful, the {\f2 AssertionResult}  object stores a non-empty failure message that can be retrieved with the object's {\f2 message()}  method.\par
To create an instance of this class, use one of the factory functions {\b `AssertionSuccess()`} or {\b `AssertionFailure()`}.\par}
{\bkmkstart AAAAAAAAPY}
{\bkmkend AAAAAAAAPY}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
AssertionException
\par}
{\tc\tcl3 \v AssertionException}
{\f2 ::testing::AssertionException} \par
Exception which can be thrown from `TestEventListener::OnTestPartResult`.\par}
{\bkmkstart AAAAAAAAPZ}
{\bkmkend AAAAAAAAPZ}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
EmptyTestEventListener
\par}
{\tc\tcl3 \v EmptyTestEventListener}
{\f2 {\b testing::EmptyTestEventListener}} \par
Provides an empty implementation of all methods in the {\b `TestEventListener`} interface, such that a subclass only needs to override the methods it cares about.\par}
{\bkmkstart AAAAAAAAQA}
{\bkmkend AAAAAAAAQA}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Environment
\par}
{\tc\tcl3 \v Environment}
{\f2 {\b testing::Environment}} \par
Represents a global test environment. See {\f2 Global Set-Up and Tear-Down}.\par
{\bkmkstart AAAAAAAAQB}
{\bkmkend AAAAAAAAQB}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Protected Methods
\par}
{\tc\tcl4 \v Protected Methods}
{\bkmkstart AAAAAAAAQC}
{\bkmkend AAAAAAAAQC}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
SetUp \{#Environment::SetUp\}
\par}
{\tc\tcl4 \v SetUp \{#Environment::SetUp\}}
{\f2 virtual void Environment::SetUp()} \par
Override this to define how to set up the environment.\par}
{\bkmkstart AAAAAAAAQD}
{\bkmkend AAAAAAAAQD}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TearDown \{#Environment::TearDown\}
\par}
{\tc\tcl4 \v TearDown \{#Environment::TearDown\}}
{\f2 virtual void Environment::TearDown()} \par
Override this to define how to tear down the environment.\par}
\par}
\par}
{\bkmkstart AAAAAAAAQE}
{\bkmkend AAAAAAAAQE}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
ScopedTrace
\par}
{\tc\tcl3 \v ScopedTrace}
{\f2 {\b testing::ScopedTrace}} \par
An instance of this class causes a trace to be included in every test failure message generated by code in the scope of the lifetime of the {\f2 ScopedTrace}  instance. The effect is undone with the destruction of the instance.\par
The {\f2 ScopedTrace}  constructor has the following form:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 template} <{\cf17 typename} T>\par
ScopedTrace({\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\cf17 const} T& message)\par
}
\par
Example usage:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::ScopedTrace trace({\cf22 "file.cc"}, 123, {\cf22 "message"});\par
}
\par
The resulting trace includes the given source file path and line number, and the given message. The {\f2 message}  argument can be anything streamable to {\f2 std::ostream} .\par
See also {\b `SCOPED_TRACE`}.\par}
{\bkmkstart AAAAAAAAQF}
{\bkmkend AAAAAAAAQF}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Test
\par}
{\tc\tcl3 \v Test}
{\f2 {\b testing::Test}} \par
The abstract class that all tests inherit from. {\f2 Test}  is not copyable.\par
{\bkmkstart AAAAAAAAQG}
{\bkmkend AAAAAAAAQG}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Public Methods
\par}
{\tc\tcl4 \v Public Methods}
{\bkmkstart AAAAAAAAQH}
{\bkmkend AAAAAAAAQH}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
SetUpTestSuite \{#Test::SetUpTestSuite\}
\par}
{\tc\tcl4 \v SetUpTestSuite \{#Test::SetUpTestSuite\}}
{\f2 static void Test::SetUpTestSuite()} \par
Performs shared setup for all tests in the test suite. GoogleTest calls {\f2 SetUpTestSuite()}  before running the first test in the test suite.\par}
{\bkmkstart AAAAAAAAQI}
{\bkmkend AAAAAAAAQI}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TearDownTestSuite \{#Test::TearDownTestSuite\}
\par}
{\tc\tcl4 \v TearDownTestSuite \{#Test::TearDownTestSuite\}}
{\f2 static void Test::TearDownTestSuite()} \par
Performs shared teardown for all tests in the test suite. GoogleTest calls {\f2 TearDownTestSuite()}  after running the last test in the test suite.\par}
{\bkmkstart AAAAAAAAQJ}
{\bkmkend AAAAAAAAQJ}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
HasFatalFailure \{#Test::HasFatalFailure\}
\par}
{\tc\tcl4 \v HasFatalFailure \{#Test::HasFatalFailure\}}
{\f2 static bool Test::HasFatalFailure()} \par
Returns true if and only if the current test has a fatal failure.\par}
{\bkmkstart AAAAAAAAQK}
{\bkmkend AAAAAAAAQK}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
HasNonfatalFailure \{#Test::HasNonfatalFailure\}
\par}
{\tc\tcl4 \v HasNonfatalFailure \{#Test::HasNonfatalFailure\}}
{\f2 static bool Test::HasNonfatalFailure()} \par
Returns true if and only if the current test has a nonfatal failure.\par}
{\bkmkstart AAAAAAAAQL}
{\bkmkend AAAAAAAAQL}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
HasFailure \{#Test::HasFailure\}
\par}
{\tc\tcl4 \v HasFailure \{#Test::HasFailure\}}
{\f2 static bool Test::HasFailure()} \par
Returns true if and only if the current test has any failure, either fatal or nonfatal.\par}
{\bkmkstart AAAAAAAAQM}
{\bkmkend AAAAAAAAQM}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
IsSkipped \{#Test::IsSkipped\}
\par}
{\tc\tcl4 \v IsSkipped \{#Test::IsSkipped\}}
{\f2 static bool Test::IsSkipped()} \par
Returns true if and only if the current test was skipped.\par}
{\bkmkstart AAAAAAAAQN}
{\bkmkend AAAAAAAAQN}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
RecordProperty \{#Test::RecordProperty\}
\par}
{\tc\tcl4 \v RecordProperty \{#Test::RecordProperty\}}
{\f2 static void Test::RecordProperty(const std::string& key, const std::string& value)}  \\ {\f2 static void Test::RecordProperty(const std::string& key, int value)} \par
Logs a property for the current test, test suite, or entire invocation of the test program. Only the last value for a given key is logged.\par
The key must be a valid XML attribute name, and cannot conflict with the ones already used by GoogleTest ({\f2 name} , {\f2 file} , {\f2 line} , {\f2 status} , {\f2 time} , {\f2 classname} , {\f2 type_param} , and {\f2 value_param} ).\par
{\f2 RecordProperty}  is {\f2 public static}  so it can be called from utility functions that are not members of the test fixture.\par
Calls to {\f2 RecordProperty}  made during the lifespan of the test (from the moment its constructor starts to the moment its destructor finishes) are output in XML as attributes of the {\f2 <testcase>}  element. Properties recorded from a fixture's {\f2 SetUpTestSuite}  or {\f2 TearDownTestSuite}  methods are logged as attributes of the corresponding {\f2 <testsuite>}  element. Calls to {\f2 RecordProperty}  made in the global context (before or after invocation of {\f2 RUN_ALL_TESTS}  or from the {\f2 SetUp} /{\f2 TearDown}  methods of registered {\f2 Environment}  objects) are output as attributes of the {\f2 <testsuites>}  element.\par}
\par}
{\bkmkstart AAAAAAAAQO}
{\bkmkend AAAAAAAAQO}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Protected Methods
\par}
{\tc\tcl4 \v Protected Methods}
{\bkmkstart AAAAAAAAQP}
{\bkmkend AAAAAAAAQP}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
SetUp \{#Test::SetUp\}
\par}
{\tc\tcl4 \v SetUp \{#Test::SetUp\}}
{\f2 virtual void Test::SetUp()} \par
Override this to perform test fixture setup. GoogleTest calls {\f2 SetUp()}  before running each individual test.\par}
{\bkmkstart AAAAAAAAQQ}
{\bkmkend AAAAAAAAQQ}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
TearDown \{#Test::TearDown\}
\par}
{\tc\tcl4 \v TearDown \{#Test::TearDown\}}
{\f2 virtual void Test::TearDown()} \par
Override this to perform test fixture teardown. GoogleTest calls {\f2 TearDown()}  after running each individual test.\par}
\par}
\par}
{\bkmkstart AAAAAAAAQR}
{\bkmkend AAAAAAAAQR}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
TestWithParam
\par}
{\tc\tcl3 \v TestWithParam}
{\f2 {\b testing::TestWithParam}<T>} \par
A convenience class which inherits from both {\b `Test`} and {\b `WithParamInterface<T>`}.\par}
{\bkmkstart AAAAAAAAQS}
{\bkmkend AAAAAAAAQS}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
TestSuite
\par}
{\tc\tcl3 \v TestSuite}
Represents a test suite. {\f2 TestSuite}  is not copyable.\par
{\bkmkstart AAAAAAAAQT}
{\bkmkend AAAAAAAAQT}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Public Methods
\par}
{\tc\tcl4 \v Public Methods}
{\bkmkstart AAAAAAAAQU}
{\bkmkend AAAAAAAAQU}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
name \{#TestSuite::name\}
\par}
{\tc\tcl4 \v name \{#TestSuite::name\}}
{\f2 const char* TestSuite::name() const} \par
Gets the name of the test suite.\par}
{\bkmkstart AAAAAAAAQV}
{\bkmkend AAAAAAAAQV}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
type_param \{#TestSuite::type_param\}
\par}
{\tc\tcl4 \v type_param \{#TestSuite::type_param\}}
{\f2 const char* TestSuite::type_param() const} \par
Returns the name of the parameter type, or {\f2 NULL}  if this is not a typed or type-parameterized test suite. See {\f2 Typed Tests} and {\f2 Type-Parameterized Tests}.\par}
{\bkmkstart AAAAAAAAQW}
{\bkmkend AAAAAAAAQW}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
should_run \{#TestSuite::should_run\}
\par}
{\tc\tcl4 \v should_run \{#TestSuite::should_run\}}
{\f2 bool TestSuite::should_run() const} \par
Returns true if any test in this test suite should run.\par}
{\bkmkstart AAAAAAAAQX}
{\bkmkend AAAAAAAAQX}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
successful_test_count \{#TestSuite::successful_test_count\}
\par}
{\tc\tcl4 \v successful_test_count \{#TestSuite::successful_test_count\}}
{\f2 int TestSuite::successful_test_count() const} \par
Gets the number of successful tests in this test suite.\par}
{\bkmkstart AAAAAAAAQY}
{\bkmkend AAAAAAAAQY}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
skipped_test_count \{#TestSuite::skipped_test_count\}
\par}
{\tc\tcl4 \v skipped_test_count \{#TestSuite::skipped_test_count\}}
{\f2 int TestSuite::skipped_test_count() const} \par
Gets the number of skipped tests in this test suite.\par}
{\bkmkstart AAAAAAAAQZ}
{\bkmkend AAAAAAAAQZ}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
failed_test_count \{#TestSuite::failed_test_count\}
\par}
{\tc\tcl4 \v failed_test_count \{#TestSuite::failed_test_count\}}
{\f2 int TestSuite::failed_test_count() const} \par
Gets the number of failed tests in this test suite.\par}
{\bkmkstart AAAAAAAARA}
{\bkmkend AAAAAAAARA}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
reportable_disabled_test_count \{#TestSuite::reportable_disabled_test_count\}
\par}
{\tc\tcl4 \v reportable_disabled_test_count \{#TestSuite::reportable_disabled_test_count\}}
{\f2 int TestSuite::reportable_disabled_test_count() const} \par
Gets the number of disabled tests that will be reported in the XML report.\par}
{\bkmkstart AAAAAAAARB}
{\bkmkend AAAAAAAARB}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
disabled_test_count \{#TestSuite::disabled_test_count\}
\par}
{\tc\tcl4 \v disabled_test_count \{#TestSuite::disabled_test_count\}}
{\f2 int TestSuite::disabled_test_count() const} \par
Gets the number of disabled tests in this test suite.\par}
{\bkmkstart AAAAAAAARC}
{\bkmkend AAAAAAAARC}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
reportable_test_count \{#TestSuite::reportable_test_count\}
\par}
{\tc\tcl4 \v reportable_test_count \{#TestSuite::reportable_test_count\}}
{\f2 int TestSuite::reportable_test_count() const} \par
Gets the number of tests to be printed in the XML report.\par}
{\bkmkstart AAAAAAAARD}
{\bkmkend AAAAAAAARD}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
test_to_run_count \{#TestSuite::test_to_run_count\}
\par}
{\tc\tcl4 \v test_to_run_count \{#TestSuite::test_to_run_count\}}
{\f2 int TestSuite::test_to_run_count() const} \par
Get the number of tests in this test suite that should run.\par}
{\bkmkstart AAAAAAAARE}
{\bkmkend AAAAAAAARE}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
total_test_count \{#TestSuite::total_test_count\}
\par}
{\tc\tcl4 \v total_test_count \{#TestSuite::total_test_count\}}
{\f2 int TestSuite::total_test_count() const} \par
Gets the number of all tests in this test suite.\par}
{\bkmkstart AAAAAAAARF}
{\bkmkend AAAAAAAARF}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Passed \{#TestSuite::Passed\}
\par}
{\tc\tcl4 \v Passed \{#TestSuite::Passed\}}
{\f2 bool TestSuite::Passed() const} \par
Returns true if and only if the test suite passed.\par}
{\bkmkstart AAAAAAAARG}
{\bkmkend AAAAAAAARG}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Failed \{#TestSuite::Failed\}
\par}
{\tc\tcl4 \v Failed \{#TestSuite::Failed\}}
{\f2 bool TestSuite::Failed() const} \par
Returns true if and only if the test suite failed.\par}
{\bkmkstart AAAAAAAARH}
{\bkmkend AAAAAAAARH}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
elapsed_time \{#TestSuite::elapsed_time\}
\par}
{\tc\tcl4 \v elapsed_time \{#TestSuite::elapsed_time\}}
{\f2 TimeInMillis TestSuite::elapsed_time() const} \par
Returns the elapsed time, in milliseconds.\par}
{\bkmkstart AAAAAAAARI}
{\bkmkend AAAAAAAARI}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
start_timestamp \{#TestSuite::start_timestamp\}
\par}
{\tc\tcl4 \v start_timestamp \{#TestSuite::start_timestamp\}}
{\f2 TimeInMillis TestSuite::start_timestamp() const} \par
Gets the time of the test suite start, in ms from the start of the UNIX epoch.\par}
{\bkmkstart AAAAAAAARJ}
{\bkmkend AAAAAAAARJ}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
GetTestInfo \{#TestSuite::GetTestInfo\}
\par}
{\tc\tcl4 \v GetTestInfo \{#TestSuite::GetTestInfo\}}
{\f2 const TestInfo* TestSuite::GetTestInfo(int i) const} \par
Returns the {\b `TestInfo`} for the {\f2 i} -th test among all the tests. {\f2 i}  can range from 0 to {\f2 total_test_count() - 1} . If {\f2 i}  is not in that range, returns {\f2 NULL} .\par}
{\bkmkstart AAAAAAAARK}
{\bkmkend AAAAAAAARK}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
ad_hoc_test_result \{#TestSuite::ad_hoc_test_result\}
\par}
{\tc\tcl4 \v ad_hoc_test_result \{#TestSuite::ad_hoc_test_result\}}
{\f2 const TestResult& TestSuite::ad_hoc_test_result() const} \par
Returns the {\b `TestResult`} that holds test properties recorded during execution of {\f2 SetUpTestSuite}  and {\f2 TearDownTestSuite} .\par}
\par}
\par}
{\bkmkstart AAAAAAAARL}
{\bkmkend AAAAAAAARL}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
TestInfo
\par}
{\tc\tcl3 \v TestInfo}
{\f2 {\b testing::TestInfo}} \par
Stores information about a test.\par
{\bkmkstart AAAAAAAARM}
{\bkmkend AAAAAAAARM}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Public Methods
\par}
{\tc\tcl4 \v Public Methods}
{\bkmkstart AAAAAAAARN}
{\bkmkend AAAAAAAARN}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
test_suite_name \{#TestInfo::test_suite_name\}
\par}
{\tc\tcl4 \v test_suite_name \{#TestInfo::test_suite_name\}}
{\f2 const char* TestInfo::test_suite_name() const} \par
Returns the test suite name.\par}
{\bkmkstart AAAAAAAARO}
{\bkmkend AAAAAAAARO}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
name \{#TestInfo::name\}
\par}
{\tc\tcl4 \v name \{#TestInfo::name\}}
{\f2 const char* TestInfo::name() const} \par
Returns the test name.\par}
{\bkmkstart AAAAAAAARP}
{\bkmkend AAAAAAAARP}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
type_param \{#TestInfo::type_param\}
\par}
{\tc\tcl4 \v type_param \{#TestInfo::type_param\}}
{\f2 const char* TestInfo::type_param() const} \par
Returns the name of the parameter type, or {\f2 NULL}  if this is not a typed or type-parameterized test. See {\f2 Typed Tests} and {\f2 Type-Parameterized Tests}.\par}
{\bkmkstart AAAAAAAARQ}
{\bkmkend AAAAAAAARQ}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
value_param \{#TestInfo::value_param\}
\par}
{\tc\tcl4 \v value_param \{#TestInfo::value_param\}}
{\f2 const char* TestInfo::value_param() const} \par
Returns the text representation of the value parameter, or {\f2 NULL}  if this is not a value-parameterized test. See {\f2 Value-Parameterized Tests}.\par}
{\bkmkstart AAAAAAAARR}
{\bkmkend AAAAAAAARR}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
file \{#TestInfo::file\}
\par}
{\tc\tcl4 \v file \{#TestInfo::file\}}
{\f2 const char* TestInfo::file() const} \par
Returns the file name where this test is defined.\par}
{\bkmkstart AAAAAAAARS}
{\bkmkend AAAAAAAARS}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
line \{#TestInfo::line\}
\par}
{\tc\tcl4 \v line \{#TestInfo::line\}}
{\f2 int TestInfo::line() const} \par
Returns the line where this test is defined.\par}
{\bkmkstart AAAAAAAART}
{\bkmkend AAAAAAAART}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
is_in_another_shard \{#TestInfo::is_in_another_shard\}
\par}
{\tc\tcl4 \v is_in_another_shard \{#TestInfo::is_in_another_shard\}}
{\f2 bool TestInfo::is_in_another_shard() const} \par
Returns true if this test should not be run because it's in another shard.\par}
{\bkmkstart AAAAAAAARU}
{\bkmkend AAAAAAAARU}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
should_run \{#TestInfo::should_run\}
\par}
{\tc\tcl4 \v should_run \{#TestInfo::should_run\}}
{\f2 bool TestInfo::should_run() const} \par
Returns true if this test should run, that is if the test is not disabled (or it is disabled but the {\f2 also_run_disabled_tests}  flag has been specified) and its full name matches the user-specified filter.\par
GoogleTest allows the user to filter the tests by their full names. Only the tests that match the filter will run. See {\f2 Running a Subset of the Tests} for more information.\par}
{\bkmkstart AAAAAAAARV}
{\bkmkend AAAAAAAARV}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
is_reportable \{#TestInfo::is_reportable\}
\par}
{\tc\tcl4 \v is_reportable \{#TestInfo::is_reportable\}}
{\f2 bool TestInfo::is_reportable() const} \par
Returns true if and only if this test will appear in the XML report.\par}
{\bkmkstart AAAAAAAARW}
{\bkmkend AAAAAAAARW}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
result \{#TestInfo::result\}
\par}
{\tc\tcl4 \v result \{#TestInfo::result\}}
{\f2 const TestResult* TestInfo::result() const} \par
Returns the result of the test. See {\b `TestResult`}.\par}
\par}
\par}
{\bkmkstart AAAAAAAARX}
{\bkmkend AAAAAAAARX}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
TestParamInfo
\par}
{\tc\tcl3 \v TestParamInfo}
{\f2 {\b testing::TestParamInfo}<T>} \par
Describes a parameter to a value-parameterized test. The type {\f2 T}  is the type of the parameter.\par
Contains the fields {\f2 param}  and {\f2 index}  which hold the value of the parameter and its integer index respectively.\par}
{\bkmkstart AAAAAAAARY}
{\bkmkend AAAAAAAARY}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
UnitTest
\par}
{\tc\tcl3 \v UnitTest}
{\f2 {\b testing::UnitTest}} \par
This class contains information about the test program.\par
{\f2 UnitTest}  is a singleton class. The only instance is created when {\f2 UnitTest::GetInstance()}  is first called. This instance is never deleted.\par
{\f2 UnitTest}  is not copyable.\par
{\bkmkstart AAAAAAAARZ}
{\bkmkend AAAAAAAARZ}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Public Methods
\par}
{\tc\tcl4 \v Public Methods}
{\bkmkstart AAAAAAAASA}
{\bkmkend AAAAAAAASA}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
GetInstance \{#UnitTest::GetInstance\}
\par}
{\tc\tcl4 \v GetInstance \{#UnitTest::GetInstance\}}
{\f2 static UnitTest* UnitTest::GetInstance()} \par
Gets the singleton {\f2 UnitTest}  object. The first time this method is called, a {\f2 UnitTest}  object is constructed and returned. Consecutive calls will return the same object.\par}
{\bkmkstart AAAAAAAASB}
{\bkmkend AAAAAAAASB}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
original_working_dir \{#UnitTest::original_working_dir\}
\par}
{\tc\tcl4 \v original_working_dir \{#UnitTest::original_working_dir\}}
{\f2 const char* UnitTest::original_working_dir() const} \par
Returns the working directory when the first {\b `TEST()`} or {\b `TEST_F()`} was executed. The {\f2 UnitTest}  object owns the string.\par}
{\bkmkstart AAAAAAAASC}
{\bkmkend AAAAAAAASC}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
current_test_suite \{#UnitTest::current_test_suite\}
\par}
{\tc\tcl4 \v current_test_suite \{#UnitTest::current_test_suite\}}
{\f2 const TestSuite* UnitTest::current_test_suite() const} \par
Returns the {\b `TestSuite`} object for the test that's currently running, or {\f2 NULL}  if no test is running.\par}
{\bkmkstart AAAAAAAASD}
{\bkmkend AAAAAAAASD}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
current_test_info \{#UnitTest::current_test_info\}
\par}
{\tc\tcl4 \v current_test_info \{#UnitTest::current_test_info\}}
{\f2 const TestInfo* UnitTest::current_test_info() const} \par
Returns the {\b `TestInfo`} object for the test that's currently running, or {\f2 NULL}  if no test is running.\par}
{\bkmkstart AAAAAAAASE}
{\bkmkend AAAAAAAASE}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
random_seed \{#UnitTest::random_seed\}
\par}
{\tc\tcl4 \v random_seed \{#UnitTest::random_seed\}}
{\f2 int UnitTest::random_seed() const} \par
Returns the random seed used at the start of the current test run.\par}
{\bkmkstart AAAAAAAASF}
{\bkmkend AAAAAAAASF}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
successful_test_suite_count \{#UnitTest::successful_test_suite_count\}
\par}
{\tc\tcl4 \v successful_test_suite_count \{#UnitTest::successful_test_suite_count\}}
{\f2 int UnitTest::successful_test_suite_count() const} \par
Gets the number of successful test suites.\par}
{\bkmkstart AAAAAAAASG}
{\bkmkend AAAAAAAASG}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
failed_test_suite_count \{#UnitTest::failed_test_suite_count\}
\par}
{\tc\tcl4 \v failed_test_suite_count \{#UnitTest::failed_test_suite_count\}}
{\f2 int UnitTest::failed_test_suite_count() const} \par
Gets the number of failed test suites.\par}
{\bkmkstart AAAAAAAASH}
{\bkmkend AAAAAAAASH}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
total_test_suite_count \{#UnitTest::total_test_suite_count\}
\par}
{\tc\tcl4 \v total_test_suite_count \{#UnitTest::total_test_suite_count\}}
{\f2 int UnitTest::total_test_suite_count() const} \par
Gets the number of all test suites.\par}
{\bkmkstart AAAAAAAASI}
{\bkmkend AAAAAAAASI}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
test_suite_to_run_count \{#UnitTest::test_suite_to_run_count\}
\par}
{\tc\tcl4 \v test_suite_to_run_count \{#UnitTest::test_suite_to_run_count\}}
{\f2 int UnitTest::test_suite_to_run_count() const} \par
Gets the number of all test suites that contain at least one test that should run.\par}
{\bkmkstart AAAAAAAASJ}
{\bkmkend AAAAAAAASJ}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
successful_test_count \{#UnitTest::successful_test_count\}
\par}
{\tc\tcl4 \v successful_test_count \{#UnitTest::successful_test_count\}}
{\f2 int UnitTest::successful_test_count() const} \par
Gets the number of successful tests.\par}
{\bkmkstart AAAAAAAASK}
{\bkmkend AAAAAAAASK}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
skipped_test_count \{#UnitTest::skipped_test_count\}
\par}
{\tc\tcl4 \v skipped_test_count \{#UnitTest::skipped_test_count\}}
{\f2 int UnitTest::skipped_test_count() const} \par
Gets the number of skipped tests.\par}
{\bkmkstart AAAAAAAASL}
{\bkmkend AAAAAAAASL}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
failed_test_count \{#UnitTest::failed_test_count\}
\par}
{\tc\tcl4 \v failed_test_count \{#UnitTest::failed_test_count\}}
{\f2 int UnitTest::failed_test_count() const} \par
Gets the number of failed tests.\par}
{\bkmkstart AAAAAAAASM}
{\bkmkend AAAAAAAASM}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
reportable_disabled_test_count \{#UnitTest::reportable_disabled_test_count\}
\par}
{\tc\tcl4 \v reportable_disabled_test_count \{#UnitTest::reportable_disabled_test_count\}}
{\f2 int UnitTest::reportable_disabled_test_count() const} \par
Gets the number of disabled tests that will be reported in the XML report.\par}
{\bkmkstart AAAAAAAASN}
{\bkmkend AAAAAAAASN}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
disabled_test_count \{#UnitTest::disabled_test_count\}
\par}
{\tc\tcl4 \v disabled_test_count \{#UnitTest::disabled_test_count\}}
{\f2 int UnitTest::disabled_test_count() const} \par
Gets the number of disabled tests.\par}
{\bkmkstart AAAAAAAASO}
{\bkmkend AAAAAAAASO}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
reportable_test_count \{#UnitTest::reportable_test_count\}
\par}
{\tc\tcl4 \v reportable_test_count \{#UnitTest::reportable_test_count\}}
{\f2 int UnitTest::reportable_test_count() const} \par
Gets the number of tests to be printed in the XML report.\par}
{\bkmkstart AAAAAAAASP}
{\bkmkend AAAAAAAASP}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
total_test_count \{#UnitTest::total_test_count\}
\par}
{\tc\tcl4 \v total_test_count \{#UnitTest::total_test_count\}}
{\f2 int UnitTest::total_test_count() const} \par
Gets the number of all tests.\par}
{\bkmkstart AAAAAAAASQ}
{\bkmkend AAAAAAAASQ}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
test_to_run_count \{#UnitTest::test_to_run_count\}
\par}
{\tc\tcl4 \v test_to_run_count \{#UnitTest::test_to_run_count\}}
{\f2 int UnitTest::test_to_run_count() const} \par
Gets the number of tests that should run.\par}
{\bkmkstart AAAAAAAASR}
{\bkmkend AAAAAAAASR}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
start_timestamp \{#UnitTest::start_timestamp\}
\par}
{\tc\tcl4 \v start_timestamp \{#UnitTest::start_timestamp\}}
{\f2 TimeInMillis UnitTest::start_timestamp() const} \par
Gets the time of the test program start, in ms from the start of the UNIX epoch.\par}
{\bkmkstart AAAAAAAASS}
{\bkmkend AAAAAAAASS}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
elapsed_time \{#UnitTest::elapsed_time\}
\par}
{\tc\tcl4 \v elapsed_time \{#UnitTest::elapsed_time\}}
{\f2 TimeInMillis UnitTest::elapsed_time() const} \par
Gets the elapsed time, in milliseconds.\par}
{\bkmkstart AAAAAAAAST}
{\bkmkend AAAAAAAAST}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Passed \{#UnitTest::Passed\}
\par}
{\tc\tcl4 \v Passed \{#UnitTest::Passed\}}
{\f2 bool UnitTest::Passed() const} \par
Returns true if and only if the unit test passed (i.e. all test suites passed).\par}
{\bkmkstart AAAAAAAASU}
{\bkmkend AAAAAAAASU}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Failed \{#UnitTest::Failed\}
\par}
{\tc\tcl4 \v Failed \{#UnitTest::Failed\}}
{\f2 bool UnitTest::Failed() const} \par
Returns true if and only if the unit test failed (i.e. some test suite failed or something outside of all tests failed).\par}
{\bkmkstart AAAAAAAASV}
{\bkmkend AAAAAAAASV}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
GetTestSuite \{#UnitTest::GetTestSuite\}
\par}
{\tc\tcl4 \v GetTestSuite \{#UnitTest::GetTestSuite\}}
{\f2 const TestSuite* UnitTest::GetTestSuite(int i) const} \par
Gets the {\b `TestSuite`} object for the {\f2 i} -th test suite among all the test suites. {\f2 i}  can range from 0 to {\f2 total_test_suite_count() - 1} . If {\f2 i}  is not in that range, returns {\f2 NULL} .\par}
{\bkmkstart AAAAAAAASW}
{\bkmkend AAAAAAAASW}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
ad_hoc_test_result \{#UnitTest::ad_hoc_test_result\}
\par}
{\tc\tcl4 \v ad_hoc_test_result \{#UnitTest::ad_hoc_test_result\}}
{\f2 const TestResult& UnitTest::ad_hoc_test_result() const} \par
Returns the {\b `TestResult`} containing information on test failures and properties logged outside of individual test suites.\par}
{\bkmkstart AAAAAAAASX}
{\bkmkend AAAAAAAASX}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
listeners \{#UnitTest::listeners\}
\par}
{\tc\tcl4 \v listeners \{#UnitTest::listeners\}}
{\f2 TestEventListeners& UnitTest::listeners()} \par
Returns the list of event listeners that can be used to track events inside GoogleTest. See {\b `TestEventListeners`}.\par}
\par}
\par}
{\bkmkstart AAAAAAAASY}
{\bkmkend AAAAAAAASY}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
TestEventListener
\par}
{\tc\tcl3 \v TestEventListener}
{\f2 {\b testing::TestEventListener}} \par
The interface for tracing execution of tests. The methods below are listed in the order the corresponding events are fired.\par
{\bkmkstart AAAAAAAASZ}
{\bkmkend AAAAAAAASZ}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Public Methods
\par}
{\tc\tcl4 \v Public Methods}
{\bkmkstart AAAAAAAATA}
{\bkmkend AAAAAAAATA}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
OnTestProgramStart \{#TestEventListener::OnTestProgramStart\}
\par}
{\tc\tcl4 \v OnTestProgramStart \{#TestEventListener::OnTestProgramStart\}}
{\f2 virtual void TestEventListener::OnTestProgramStart(const UnitTest& unit_test)} \par
Fired before any test activity starts.\par}
{\bkmkstart AAAAAAAATB}
{\bkmkend AAAAAAAATB}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
OnTestIterationStart \{#TestEventListener::OnTestIterationStart\}
\par}
{\tc\tcl4 \v OnTestIterationStart \{#TestEventListener::OnTestIterationStart\}}
{\f2 virtual void TestEventListener::OnTestIterationStart(const UnitTest& unit_test, int iteration)} \par
Fired before each iteration of tests starts. There may be more than one iteration if {\f2 GTEST_FLAG(repeat)}  is set. {\f2 iteration}  is the iteration index, starting from 0.\par}
{\bkmkstart AAAAAAAATC}
{\bkmkend AAAAAAAATC}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
OnEnvironmentsSetUpStart \{#TestEventListener::OnEnvironmentsSetUpStart\}
\par}
{\tc\tcl4 \v OnEnvironmentsSetUpStart \{#TestEventListener::OnEnvironmentsSetUpStart\}}
{\f2 virtual void TestEventListener::OnEnvironmentsSetUpStart(const UnitTest& unit_test)} \par
Fired before environment set-up for each iteration of tests starts.\par}
{\bkmkstart AAAAAAAATD}
{\bkmkend AAAAAAAATD}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
OnEnvironmentsSetUpEnd \{#TestEventListener::OnEnvironmentsSetUpEnd\}
\par}
{\tc\tcl4 \v OnEnvironmentsSetUpEnd \{#TestEventListener::OnEnvironmentsSetUpEnd\}}
{\f2 virtual void TestEventListener::OnEnvironmentsSetUpEnd(const UnitTest& unit_test)} \par
Fired after environment set-up for each iteration of tests ends.\par}
{\bkmkstart AAAAAAAATE}
{\bkmkend AAAAAAAATE}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
OnTestSuiteStart \{#TestEventListener::OnTestSuiteStart\}
\par}
{\tc\tcl4 \v OnTestSuiteStart \{#TestEventListener::OnTestSuiteStart\}}
{\f2 virtual void TestEventListener::OnTestSuiteStart(const TestSuite& test_suite)} \par
Fired before the test suite starts.\par}
{\bkmkstart AAAAAAAATF}
{\bkmkend AAAAAAAATF}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
OnTestStart \{#TestEventListener::OnTestStart\}
\par}
{\tc\tcl4 \v OnTestStart \{#TestEventListener::OnTestStart\}}
{\f2 virtual void TestEventListener::OnTestStart(const TestInfo& test_info)} \par
Fired before the test starts.\par}
{\bkmkstart AAAAAAAATG}
{\bkmkend AAAAAAAATG}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
OnTestPartResult \{#TestEventListener::OnTestPartResult\}
\par}
{\tc\tcl4 \v OnTestPartResult \{#TestEventListener::OnTestPartResult\}}
{\f2 virtual void TestEventListener::OnTestPartResult(const TestPartResult& test_part_result)} \par
Fired after a failed assertion or a {\f2 SUCCEED()}  invocation. If you want to throw an exception from this function to skip to the next test, it must be an {\b `AssertionException`} or inherited from it.\par}
{\bkmkstart AAAAAAAATH}
{\bkmkend AAAAAAAATH}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
OnTestEnd \{#TestEventListener::OnTestEnd\}
\par}
{\tc\tcl4 \v OnTestEnd \{#TestEventListener::OnTestEnd\}}
{\f2 virtual void TestEventListener::OnTestEnd(const TestInfo& test_info)} \par
Fired after the test ends.\par}
{\bkmkstart AAAAAAAATI}
{\bkmkend AAAAAAAATI}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
OnTestSuiteEnd \{#TestEventListener::OnTestSuiteEnd\}
\par}
{\tc\tcl4 \v OnTestSuiteEnd \{#TestEventListener::OnTestSuiteEnd\}}
{\f2 virtual void TestEventListener::OnTestSuiteEnd(const TestSuite& test_suite)} \par
Fired after the test suite ends.\par}
{\bkmkstart AAAAAAAATJ}
{\bkmkend AAAAAAAATJ}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
OnEnvironmentsTearDownStart \{#TestEventListener::OnEnvironmentsTearDownStart\}
\par}
{\tc\tcl4 \v OnEnvironmentsTearDownStart \{#TestEventListener::OnEnvironmentsTearDownStart\}}
{\f2 virtual void TestEventListener::OnEnvironmentsTearDownStart(const UnitTest& unit_test)} \par
Fired before environment tear-down for each iteration of tests starts.\par}
{\bkmkstart AAAAAAAATK}
{\bkmkend AAAAAAAATK}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
OnEnvironmentsTearDownEnd \{#TestEventListener::OnEnvironmentsTearDownEnd\}
\par}
{\tc\tcl4 \v OnEnvironmentsTearDownEnd \{#TestEventListener::OnEnvironmentsTearDownEnd\}}
{\f2 virtual void TestEventListener::OnEnvironmentsTearDownEnd(const UnitTest& unit_test)} \par
Fired after environment tear-down for each iteration of tests ends.\par}
{\bkmkstart AAAAAAAATL}
{\bkmkend AAAAAAAATL}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
OnTestIterationEnd \{#TestEventListener::OnTestIterationEnd\}
\par}
{\tc\tcl4 \v OnTestIterationEnd \{#TestEventListener::OnTestIterationEnd\}}
{\f2 virtual void TestEventListener::OnTestIterationEnd(const UnitTest& unit_test, int iteration)} \par
Fired after each iteration of tests finishes.\par}
{\bkmkstart AAAAAAAATM}
{\bkmkend AAAAAAAATM}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
OnTestProgramEnd \{#TestEventListener::OnTestProgramEnd\}
\par}
{\tc\tcl4 \v OnTestProgramEnd \{#TestEventListener::OnTestProgramEnd\}}
{\f2 virtual void TestEventListener::OnTestProgramEnd(const UnitTest& unit_test)} \par
Fired after all test activities have ended.\par}
\par}
\par}
{\bkmkstart AAAAAAAATN}
{\bkmkend AAAAAAAATN}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
TestEventListeners
\par}
{\tc\tcl3 \v TestEventListeners}
{\f2 {\b testing::TestEventListeners}} \par
Lets users add listeners to track events in GoogleTest.\par
{\bkmkstart AAAAAAAATO}
{\bkmkend AAAAAAAATO}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Public Methods
\par}
{\tc\tcl4 \v Public Methods}
{\bkmkstart AAAAAAAATP}
{\bkmkend AAAAAAAATP}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Append \{#TestEventListeners::Append\}
\par}
{\tc\tcl4 \v Append \{#TestEventListeners::Append\}}
{\f2 void TestEventListeners::Append(TestEventListener* listener)} \par
Appends an event listener to the end of the list. GoogleTest assumes ownership of the listener (i.e. it will delete the listener when the test program finishes).\par}
{\bkmkstart AAAAAAAATQ}
{\bkmkend AAAAAAAATQ}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Release \{#TestEventListeners::Release\}
\par}
{\tc\tcl4 \v Release \{#TestEventListeners::Release\}}
{\f2 TestEventListener* TestEventListeners::Release(TestEventListener* listener)} \par
Removes the given event listener from the list and returns it. It then becomes the caller's responsibility to delete the listener. Returns {\f2 NULL}  if the listener is not found in the list.\par}
{\bkmkstart AAAAAAAATR}
{\bkmkend AAAAAAAATR}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
default_result_printer \{#TestEventListeners::default_result_printer\}
\par}
{\tc\tcl4 \v default_result_printer \{#TestEventListeners::default_result_printer\}}
{\f2 TestEventListener* TestEventListeners::default_result_printer() const} \par
Returns the standard listener responsible for the default console output. Can be removed from the listeners list to shut down default console output. Note that removing this object from the listener list with `Release()` transfers its ownership to the caller and makes this function return {\f2 NULL}  the next time.\par}
{\bkmkstart AAAAAAAATS}
{\bkmkend AAAAAAAATS}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
default_xml_generator \{#TestEventListeners::default_xml_generator\}
\par}
{\tc\tcl4 \v default_xml_generator \{#TestEventListeners::default_xml_generator\}}
{\f2 TestEventListener* TestEventListeners::default_xml_generator() const} \par
Returns the standard listener responsible for the default XML output controlled by the {\f2 --gtest_output=xml}  flag. Can be removed from the listeners list by users who want to shut down the default XML output controlled by this flag and substitute it with custom one. Note that removing this object from the listener list with `Release()` transfers its ownership to the caller and makes this function return {\f2 NULL}  the next time.\par}
\par}
\par}
{\bkmkstart AAAAAAAATT}
{\bkmkend AAAAAAAATT}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
TestPartResult
\par}
{\tc\tcl3 \v TestPartResult}
{\f2 ::testing::TestPartResult} \par
A copyable object representing the result of a test part (i.e. an assertion or an explicit {\f2 FAIL()} , {\f2 ADD_FAILURE()} , or {\f2 SUCCESS()} ).\par
{\bkmkstart AAAAAAAATU}
{\bkmkend AAAAAAAATU}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Public Methods
\par}
{\tc\tcl4 \v Public Methods}
{\bkmkstart AAAAAAAATV}
{\bkmkend AAAAAAAATV}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
type \{#TestPartResult::type\}
\par}
{\tc\tcl4 \v type \{#TestPartResult::type\}}
{\f2 Type TestPartResult::type() const} \par
Gets the outcome of the test part.\par
The return type {\f2 Type}  is an enum defined as follows:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 enum} Type \{\par
  kSuccess,          {\cf20 // Succeeded.}\par
  kNonFatalFailure,  {\cf20 // Failed but the test can continue.}\par
  kFatalFailure,     {\cf20 // Failed and the test should be terminated.}\par
  kSkip              {\cf20 // Skipped.}\par
\};\par
}
\par}
{\bkmkstart AAAAAAAATW}
{\bkmkend AAAAAAAATW}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
file_name \{#TestPartResult::file_name\}
\par}
{\tc\tcl4 \v file_name \{#TestPartResult::file_name\}}
{\f2 const char* TestPartResult::file_name() const} \par
Gets the name of the source file where the test part took place, or {\f2 NULL}  if it's unknown.\par}
{\bkmkstart AAAAAAAATX}
{\bkmkend AAAAAAAATX}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
line_number \{#TestPartResult::line_number\}
\par}
{\tc\tcl4 \v line_number \{#TestPartResult::line_number\}}
{\f2 int TestPartResult::line_number() const} \par
Gets the line in the source file where the test part took place, or {\f2 -1}  if it's unknown.\par}
{\bkmkstart AAAAAAAATY}
{\bkmkend AAAAAAAATY}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
summary \{#TestPartResult::summary\}
\par}
{\tc\tcl4 \v summary \{#TestPartResult::summary\}}
{\f2 const char* TestPartResult::summary() const} \par
Gets the summary of the failure message.\par}
{\bkmkstart AAAAAAAATZ}
{\bkmkend AAAAAAAATZ}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
message \{#TestPartResult::message\}
\par}
{\tc\tcl4 \v message \{#TestPartResult::message\}}
{\f2 const char* TestPartResult::message() const} \par
Gets the message associated with the test part.\par}
{\bkmkstart AAAAAAAAUA}
{\bkmkend AAAAAAAAUA}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
skipped \{#TestPartResult::skipped\}
\par}
{\tc\tcl4 \v skipped \{#TestPartResult::skipped\}}
{\f2 bool TestPartResult::skipped() const} \par
Returns true if and only if the test part was skipped.\par}
{\bkmkstart AAAAAAAAUB}
{\bkmkend AAAAAAAAUB}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
passed \{#TestPartResult::passed\}
\par}
{\tc\tcl4 \v passed \{#TestPartResult::passed\}}
{\f2 bool TestPartResult::passed() const} \par
Returns true if and only if the test part passed.\par}
{\bkmkstart AAAAAAAAUC}
{\bkmkend AAAAAAAAUC}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
nonfatally_failed \{#TestPartResult::nonfatally_failed\}
\par}
{\tc\tcl4 \v nonfatally_failed \{#TestPartResult::nonfatally_failed\}}
{\f2 bool TestPartResult::nonfatally_failed() const} \par
Returns true if and only if the test part non-fatally failed.\par}
{\bkmkstart AAAAAAAAUD}
{\bkmkend AAAAAAAAUD}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
fatally_failed \{#TestPartResult::fatally_failed\}
\par}
{\tc\tcl4 \v fatally_failed \{#TestPartResult::fatally_failed\}}
{\f2 bool TestPartResult::fatally_failed() const} \par
Returns true if and only if the test part fatally failed.\par}
{\bkmkstart AAAAAAAAUE}
{\bkmkend AAAAAAAAUE}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
failed \{#TestPartResult::failed\}
\par}
{\tc\tcl4 \v failed \{#TestPartResult::failed\}}
{\f2 bool TestPartResult::failed() const} \par
Returns true if and only if the test part failed.\par}
\par}
\par}
{\bkmkstart AAAAAAAAUF}
{\bkmkend AAAAAAAAUF}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
TestProperty
\par}
{\tc\tcl3 \v TestProperty}
{\f2 {\b testing::TestProperty}} \par
A copyable object representing a user-specified test property which can be output as a key/value string pair.\par
{\bkmkstart AAAAAAAAUG}
{\bkmkend AAAAAAAAUG}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Public Methods
\par}
{\tc\tcl4 \v Public Methods}
{\bkmkstart AAAAAAAAUH}
{\bkmkend AAAAAAAAUH}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
key
\par}
{\tc\tcl4 \v key}
{\f2 const char* key() const} \par
Gets the user-supplied key.\par}
{\bkmkstart AAAAAAAAUI}
{\bkmkend AAAAAAAAUI}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
value
\par}
{\tc\tcl4 \v value}
{\f2 const char* value() const} \par
Gets the user-supplied value.\par}
{\bkmkstart AAAAAAAAUJ}
{\bkmkend AAAAAAAAUJ}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
SetValue
\par}
{\tc\tcl4 \v SetValue}
{\f2 void SetValue(const std::string& new_value)} \par
Sets a new value, overriding the previous one.\par}
\par}
\par}
{\bkmkstart AAAAAAAAUK}
{\bkmkend AAAAAAAAUK}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
TestResult
\par}
{\tc\tcl3 \v TestResult}
{\f2 {\b testing::TestResult}} \par
Contains information about the result of a single test.\par
{\f2 TestResult}  is not copyable.\par
{\bkmkstart AAAAAAAAUL}
{\bkmkend AAAAAAAAUL}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Public Methods
\par}
{\tc\tcl4 \v Public Methods}
{\bkmkstart AAAAAAAAUM}
{\bkmkend AAAAAAAAUM}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
total_part_count \{#TestResult::total_part_count\}
\par}
{\tc\tcl4 \v total_part_count \{#TestResult::total_part_count\}}
{\f2 int TestResult::total_part_count() const} \par
Gets the number of all test parts. This is the sum of the number of successful test parts and the number of failed test parts.\par}
{\bkmkstart AAAAAAAAUN}
{\bkmkend AAAAAAAAUN}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
test_property_count \{#TestResult::test_property_count\}
\par}
{\tc\tcl4 \v test_property_count \{#TestResult::test_property_count\}}
{\f2 int TestResult::test_property_count() const} \par
Returns the number of test properties.\par}
{\bkmkstart AAAAAAAAUO}
{\bkmkend AAAAAAAAUO}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Passed \{#TestResult::Passed\}
\par}
{\tc\tcl4 \v Passed \{#TestResult::Passed\}}
{\f2 bool TestResult::Passed() const} \par
Returns true if and only if the test passed (i.e. no test part failed).\par}
{\bkmkstart AAAAAAAAUP}
{\bkmkend AAAAAAAAUP}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Skipped \{#TestResult::Skipped\}
\par}
{\tc\tcl4 \v Skipped \{#TestResult::Skipped\}}
{\f2 bool TestResult::Skipped() const} \par
Returns true if and only if the test was skipped.\par}
{\bkmkstart AAAAAAAAUQ}
{\bkmkend AAAAAAAAUQ}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Failed \{#TestResult::Failed\}
\par}
{\tc\tcl4 \v Failed \{#TestResult::Failed\}}
{\f2 bool TestResult::Failed() const} \par
Returns true if and only if the test failed.\par}
{\bkmkstart AAAAAAAAUR}
{\bkmkend AAAAAAAAUR}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
HasFatalFailure \{#TestResult::HasFatalFailure\}
\par}
{\tc\tcl4 \v HasFatalFailure \{#TestResult::HasFatalFailure\}}
{\f2 bool TestResult::HasFatalFailure() const} \par
Returns true if and only if the test fatally failed.\par}
{\bkmkstart AAAAAAAAUS}
{\bkmkend AAAAAAAAUS}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
HasNonfatalFailure \{#TestResult::HasNonfatalFailure\}
\par}
{\tc\tcl4 \v HasNonfatalFailure \{#TestResult::HasNonfatalFailure\}}
{\f2 bool TestResult::HasNonfatalFailure() const} \par
Returns true if and only if the test has a non-fatal failure.\par}
{\bkmkstart AAAAAAAAUT}
{\bkmkend AAAAAAAAUT}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
elapsed_time \{#TestResult::elapsed_time\}
\par}
{\tc\tcl4 \v elapsed_time \{#TestResult::elapsed_time\}}
{\f2 TimeInMillis TestResult::elapsed_time() const} \par
Returns the elapsed time, in milliseconds.\par}
{\bkmkstart AAAAAAAAUU}
{\bkmkend AAAAAAAAUU}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
start_timestamp \{#TestResult::start_timestamp\}
\par}
{\tc\tcl4 \v start_timestamp \{#TestResult::start_timestamp\}}
{\f2 TimeInMillis TestResult::start_timestamp() const} \par
Gets the time of the test case start, in ms from the start of the UNIX epoch.\par}
{\bkmkstart AAAAAAAAUV}
{\bkmkend AAAAAAAAUV}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
GetTestPartResult \{#TestResult::GetTestPartResult\}
\par}
{\tc\tcl4 \v GetTestPartResult \{#TestResult::GetTestPartResult\}}
{\f2 const TestPartResult& TestResult::GetTestPartResult(int i) const} \par
Returns the {\b `TestPartResult`} for the {\f2 i} -th test part result among all the results. {\f2 i}  can range from 0 to {\f2 total_part_count() - 1} . If {\f2 i}  is not in that range, aborts the program.\par}
{\bkmkstart AAAAAAAAUW}
{\bkmkend AAAAAAAAUW}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
GetTestProperty \{#TestResult::GetTestProperty\}
\par}
{\tc\tcl4 \v GetTestProperty \{#TestResult::GetTestProperty\}}
{\f2 const TestProperty& TestResult::GetTestProperty(int i) const} \par
Returns the {\b `TestProperty`} object for the {\f2 i} -th test property. {\f2 i}  can range from 0 to {\f2 test_property_count() - 1} . If {\f2 i}  is not in that range, aborts the program.\par}
\par}
\par}
{\bkmkstart AAAAAAAAUX}
{\bkmkend AAAAAAAAUX}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
TimeInMillis
\par}
{\tc\tcl3 \v TimeInMillis}
{\f2 testing::TimeInMillis} \par
An integer type representing time in milliseconds.\par}
{\bkmkstart AAAAAAAAUY}
{\bkmkend AAAAAAAAUY}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Types
\par}
{\tc\tcl3 \v Types}
{\f2 testing::Types<T...>} \par
Represents a list of types for use in typed tests and type-parameterized tests.\par
The template argument {\f2 T...}  can be any number of types, for example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::Types<char, int, unsigned int>\par
}
\par
See {\f2 Typed Tests} and {\f2 Type-Parameterized Tests} for more information.\par}
{\bkmkstart AAAAAAAAUZ}
{\bkmkend AAAAAAAAUZ}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
WithParamInterface
\par}
{\tc\tcl3 \v WithParamInterface}
{\f2 {\b testing::WithParamInterface}<T>} \par
The pure interface class that all value-parameterized tests inherit from.\par
A value-parameterized test fixture class must inherit from both {\b `Test`} and {\f2 WithParamInterface} . In most cases that just means inheriting from {\b `TestWithParam`}, but more complicated test hierarchies may need to inherit from {\f2 Test}  and {\f2 WithParamInterface}  at different levels.\par
This interface defines the type alias {\f2 ParamType}  for the parameter type {\f2 T}  and has support for accessing the test parameter value via the {\f2 GetParam()}  method:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid static const ParamType& GetParam()\par
}
\par
For more information, see {\f2 Value-Parameterized Tests}.\par}
\par}
{\bkmkstart AAAAAAAAVA}
{\bkmkend AAAAAAAAVA}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Functions
\par}
{\tc\tcl2 \v Functions}
GoogleTest defines the following functions to help with writing and running tests.\par
{\bkmkstart AAAAAAAAVB}
{\bkmkend AAAAAAAAVB}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
InitGoogleTest
\par}
{\tc\tcl3 \v InitGoogleTest}
{\f2 void testing::InitGoogleTest(int* argc, char** argv)}  \\ {\f2 void testing::InitGoogleTest(int* argc, wchar_t** argv)}  \\ {\f2 void testing::InitGoogleTest()} \par
Initializes GoogleTest. This must be called before calling {\b `RUN_ALL_TESTS()`}. In particular, it parses the command line for the flags that GoogleTest recognizes. Whenever a GoogleTest flag is seen, it is removed from {\f2 argv} , and {\f2 *argc}  is decremented.\par
No value is returned. Instead, the GoogleTest flag variables are updated.\par
The {\f2 InitGoogleTest(int* argc, wchar_t** argv)}  overload can be used in Windows programs compiled in {\f2 UNICODE}  mode.\par
The argument-less {\f2 InitGoogleTest()}  overload can be used on Arduino/embedded platforms where there is no {\f2 argc} /{\f2 argv} .\par}
{\bkmkstart AAAAAAAAVC}
{\bkmkend AAAAAAAAVC}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
AddGlobalTestEnvironment
\par}
{\tc\tcl3 \v AddGlobalTestEnvironment}
{\f2 Environment* ::testing::AddGlobalTestEnvironment(Environment* env)} \par
Adds a test environment to the test program. Must be called before {\b `RUN_ALL_TESTS()`} is called. See {\f2 Global Set-Up and Tear-Down} for more information.\par
See also {\b `Environment`}.\par}
{\bkmkstart AAAAAAAAVD}
{\bkmkend AAAAAAAAVD}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
RegisterTest
\par}
{\tc\tcl3 \v RegisterTest}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf17 template} <{\cf17 typename} Factory>\par
TestInfo* ::testing::RegisterTest({\cf17 const} {\cf18 char}* test_suite_name, {\cf17 const} {\cf18 char}* test_name,\par
                                  {\cf17 const} {\cf18 char}* type_param, {\cf17 const} {\cf18 char}* value_param,\par
                                  {\cf17 const} {\cf18 char}* file, {\cf18 int} line, Factory factory)\par
}
\par
Dynamically registers a test with the framework.\par
The {\f2 factory}  argument is a factory callable (move-constructible) object or function pointer that creates a new instance of the {\f2 Test}  object. It handles ownership to the caller. The signature of the callable is {\f2 Fixture*()} , where {\f2 {\b Fixture}}  is the test fixture class for the test. All tests registered with the same {\f2 test_suite_name}  must return the same fixture type. This is checked at runtime.\par
The framework will infer the fixture class from the factory and will call the {\f2 SetUpTestSuite}  and {\f2 TearDownTestSuite}  methods for it.\par
Must be called before {\b `RUN_ALL_TESTS()`} is invoked, otherwise behavior is undefined.\par
See {\f2 Registering tests programmatically} for more information.\par}
{\bkmkstart AAAAAAAAVE}
{\bkmkend AAAAAAAAVE}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
RUN_ALL_TESTS
\par}
{\tc\tcl3 \v RUN_ALL_TESTS}
{\f2 int RUN_ALL_TESTS()} \par
Use this function in {\f2 main()}  to run all tests. It returns {\f2 0}  if all tests are successful, or {\f2 1}  otherwise.\par
{\f2 RUN_ALL_TESTS()}  should be invoked after the command line has been parsed by {\b `InitGoogleTest()`}.\par
This function was formerly a macro; thus, it is in the global namespace and has an all-caps name.\par}
{\bkmkstart AAAAAAAAVF}
{\bkmkend AAAAAAAAVF}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
AssertionSuccess
\par}
{\tc\tcl3 \v AssertionSuccess}
{\f2 AssertionResult testing::AssertionSuccess()} \par
Creates a successful assertion result. See {\b `AssertionResult`}.\par}
{\bkmkstart AAAAAAAAVG}
{\bkmkend AAAAAAAAVG}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
AssertionFailure
\par}
{\tc\tcl3 \v AssertionFailure}
{\f2 AssertionResult testing::AssertionFailure()} \par
Creates a failed assertion result. Use the {\f2 <<}  operator to store a failure message:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::AssertionFailure() << {\cf22 "My failure message"};\par
}
\par
See {\b `AssertionResult`}.\par}
{\bkmkstart AAAAAAAAVH}
{\bkmkend AAAAAAAAVH}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
StaticAssertTypeEq
\par}
{\tc\tcl3 \v StaticAssertTypeEq}
{\f2 testing::StaticAssertTypeEq<T1, T2>()} \par
Compile-time assertion for type equality. Compiles if and only if {\f2 T1}  and {\f2 T2}  are the same type. The value it returns is irrelevant.\par
See {\f2 Type Assertions} for more information.\par}
{\bkmkstart AAAAAAAAVI}
{\bkmkend AAAAAAAAVI}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
PrintToString
\par}
{\tc\tcl3 \v PrintToString}
{\f2 std::string ::testing::PrintToString(x)} \par
Prints any value {\f2 x}  using GoogleTest's value printer.\par
See {\f2 Teaching GoogleTest How to Print Your Values} for more information.\par}
{\bkmkstart AAAAAAAAVJ}
{\bkmkend AAAAAAAAVJ}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
PrintToStringParamName
\par}
{\tc\tcl3 \v PrintToStringParamName}
{\f2 std::string {\b testing::PrintToStringParamName}(TestParamInfo<T>& info)} \par
A built-in parameterized test name generator which returns the result of {\b `PrintToString`} called on {\f2 info.param} . Does not work when the test parameter is a {\f2 std::string}  or C string. See {\f2 Specifying Names for Value-Parameterized Test Parameters} for more information.\par
See also {\b `TestParamInfo`} and {\b `INSTANTIATE_TEST_SUITE_P`}. \par}
\par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Googletest Samples{\tc \v Googletest Samples}\par \pard\plain 
{\bkmkstart AAAAAAADYE}
{\bkmkend AAAAAAADYE}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
If you're like us, you'd like to look at {\f2 googletest samples.} The sample directory has a number of well-commented samples showing how to use a variety of googletest features.\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Sample #1 shows the basic steps of using googletest to test C++ functions.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Sample #2 shows a more complex unit test for a class with multiple member functions.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Sample #3 uses a test fixture.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Sample #4 teaches you how to use googletest and {\f2 googletest.h}  together to get the best of both libraries.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Sample #5 puts shared testing logic in a base test fixture, and reuses it in derived fixtures.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Sample #6 demonstrates type-parameterized tests.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Sample #7 teaches the basics of value-parameterized tests.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Sample #8 shows using {\f2 Combine()}  in value-parameterized tests.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Sample #9 shows use of the listener API to modify Google Test's console output and the use of its reflection API to inspect test results.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Sample #10 shows use of the listener API to implement a primitive memory leak checker. \par}
\par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Content Moved{\tc \v Content Moved}\par \pard\plain 
{\bkmkstart AAAAAAADYF}
{\bkmkend AAAAAAADYF}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
We are working on updates to the GoogleTest documentation, which has moved to the top-level {\f2 docs} directory. \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Customization Points{\tc \v Customization Points}\par \pard\plain 
{\bkmkstart AAAAAAADYG}
{\bkmkend AAAAAAADYG}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The custom directory is an injection point for custom user configurations.\par
{\bkmkstart AAAAAAAAVK}
{\bkmkend AAAAAAAAVK}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Header <tt>gmock-port.h</tt>
\par}
{\tc\tcl2 \v Header <tt>gmock-port.h</tt>}
The following macros can be defined:\par
{\bkmkstart AAAAAAAAVL}
{\bkmkend AAAAAAAAVL}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Flag related macros:
\par}
{\tc\tcl3 \v Flag related macros:}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 GMOCK_DECLARE_bool_(name)} \par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 GMOCK_DECLARE_int32_(name)} \par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 GMOCK_DECLARE_string_(name)} \par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 GMOCK_DEFINE_bool_(name, default_val, doc)} \par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 GMOCK_DEFINE_int32_(name, default_val, doc)} \par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 GMOCK_DEFINE_string_(name, default_val, doc)} \par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 GMOCK_FLAG_GET(flag_name)} \par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 GMOCK_FLAG_SET(flag_name, value)}  \par}
\par
\par}
\par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Googletest Mocking (gMock) Framework{\tc \v Googletest Mocking (gMock) Framework}\par \pard\plain 
{\bkmkstart AAAAAAADYH}
{\bkmkend AAAAAAADYH}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{\bkmkstart AAAAAAAAVM}
{\bkmkend AAAAAAAAVM}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Overview
\par}
{\tc\tcl3 \v Overview}
Google's framework for writing and using C++ mock classes. It can help you derive better designs of your system and write better tests.\par
It is inspired by:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 jMock}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 EasyMock}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Hamcrest}\par}
\par
It is designed with C++'s specifics in mind.\par
gMock:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Provides a declarative syntax for defining mocks.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Can define partial (hybrid) mocks, which are a cross of real and mock objects.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Handles functions of arbitrary types and overloaded functions.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Comes with a rich set of matchers for validating function arguments.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Uses an intuitive syntax for controlling the behavior of a mock.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Does automatic verification of expectations (no record-and-replay needed).\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Allows arbitrary (partial) ordering constraints on function calls to be expressed.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Lets a user extend it by defining new matchers and actions.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Does not use exceptions.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Is easy to learn and use.\par}
\par
Details and examples can be found here:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 gMock for Dummies}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Legacy gMock FAQ}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 gMock Cookbook}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 gMock Cheat Sheet}\par}
\par
GoogleMock is a part of {\f2 GoogleTest C++ testing framework} and a subject to the same requirements. \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Content Moved{\tc \v Content Moved}\par \pard\plain 
{\bkmkstart AAAAAAADYI}
{\bkmkend AAAAAAADYI}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
We are working on updates to the GoogleTest documentation, which has moved to the top-level {\f2 docs} directory. \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Customization Points{\tc \v Customization Points}\par \pard\plain 
{\bkmkstart AAAAAAADYJ}
{\bkmkend AAAAAAADYJ}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The custom directory is an injection point for custom user configurations.\par
{\bkmkstart AAAAAAAAVN}
{\bkmkend AAAAAAAAVN}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Header <tt>gtest.h</tt>
\par}
{\tc\tcl2 \v Header <tt>gtest.h</tt>}
{\bkmkstart AAAAAAAAVO}
{\bkmkend AAAAAAAAVO}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
The following macros can be defined:
\par}
{\tc\tcl3 \v The following macros can be defined:}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 GTEST_OS_STACK_TRACE_GETTER_}  - The name of an implementation of {\f2 OsStackTraceGetterInterface} .\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 GTEST_CUSTOM_TEMPDIR_FUNCTION_}  - An override for {\f2 testing::TempDir()} . See {\f2 testing::TempDir}  for semantics and signature.\par}
\par
\par}
\par}
{\bkmkstart AAAAAAAAVP}
{\bkmkend AAAAAAAAVP}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Header <tt>gtest-port.h</tt>
\par}
{\tc\tcl2 \v Header <tt>gtest-port.h</tt>}
The following macros can be defined:\par
{\bkmkstart AAAAAAAAVQ}
{\bkmkend AAAAAAAAVQ}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Logging:
\par}
{\tc\tcl3 \v Logging:}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 GTEST_LOG_(severity)} \par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 GTEST_CHECK_(condition)} \par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Functions {\f2 LogToStderr()}  and {\f2 FlushInfoLog()}  have to be provided too.\par}
\par
\par}
{\bkmkstart AAAAAAAAVR}
{\bkmkend AAAAAAAAVR}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Threading:
\par}
{\tc\tcl3 \v Threading:}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 GTEST_HAS_NOTIFICATION_}  - Enabled if Notification is already provided.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 GTEST_HAS_MUTEX_AND_THREAD_LOCAL_}  - Enabled if {\f2 Mutex}  and {\f2 ThreadLocal}  are already provided. Must also provide {\f2 GTEST_DECLARE_STATIC_MUTEX_(mutex)}  and {\f2 GTEST_DEFINE_STATIC_MUTEX_(mutex)} \par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 GTEST_EXCLUSIVE_LOCK_REQUIRED_(locks)} \par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 GTEST_LOCK_EXCLUDED_(locks)} \par}
\par
\par}
{\bkmkstart AAAAAAAAVS}
{\bkmkend AAAAAAAAVS}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Underlying library support features
\par}
{\tc\tcl3 \v Underlying library support features}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 GTEST_HAS_CXXABI_H_} \par}
\par
\par}
{\bkmkstart AAAAAAAAVT}
{\bkmkend AAAAAAAAVT}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Exporting API symbols:
\par}
{\tc\tcl3 \v Exporting API symbols:}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 GTEST_API_}  - Specifier for exported symbols.\par}
\par
\par}
\par}
{\bkmkstart AAAAAAAAVU}
{\bkmkend AAAAAAAAVU}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Header <tt>gtest-printers.h</tt>
\par}
{\tc\tcl2 \v Header <tt>gtest-printers.h</tt>}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
See documentation at {\f2 {\b gtest/gtest-printers.h}}  for details on how to define a custom printer. \par}
\par
\par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Generic Build Instructions{\tc \v Generic Build Instructions}\par \pard\plain 
{\bkmkstart AAAAAAADYK}
{\bkmkend AAAAAAADYK}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{\bkmkstart AAAAAAAAVV}
{\bkmkend AAAAAAAAVV}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Setup
\par}
{\tc\tcl4 \v Setup}
To build GoogleTest and your tests that use it, you need to tell your build system where to find its headers and source files. The exact way to do it depends on which build system you use, and is usually straightforward.\par}
{\bkmkstart AAAAAAAAVW}
{\bkmkend AAAAAAAAVW}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Build with CMake
\par}
{\tc\tcl3 \v Build with CMake}
GoogleTest comes with a CMake build script ({\f2 CMakeLists.txt}) that can be used on a wide range of platforms ("C" stands for cross-platform.). If you don't have CMake installed already, you can download it for free from {\f2 http://www.cmake.org/}.\par
CMake works by generating native makefiles or build projects that can be used in the compiler environment of your choice. You can either build GoogleTest as a standalone project or it can be incorporated into an existing CMake build for another project.\par
{\bkmkstart AAAAAAAAVX}
{\bkmkend AAAAAAAAVX}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Standalone CMake Project
\par}
{\tc\tcl4 \v Standalone CMake Project}
When building GoogleTest as a standalone project, the typical workflow starts with\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid git clone https://github.com/google/googletest.git -b release-1.12.0\par
cd googletest        # Main directory of the cloned repository.\par
mkdir build          # Create a directory to hold the build output.\par
cd build\par
cmake ..             # Generate native build scripts for GoogleTest.\par
}
\par
The above command also includes GoogleMock by default. And so, if you want to build only GoogleTest, you should replace the last command with\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid cmake .. -DBUILD_GMOCK=OFF\par
}
\par
If you are on a *nix system, you should now see a Makefile in the current directory. Just type {\f2 make}  to build GoogleTest. And then you can simply install GoogleTest if you are a system administrator.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid make\par
sudo make install    # Install in /usr/local/ by default\par
}
\par
If you use Windows and have Visual Studio installed, a {\f2 gtest.sln}  file and several {\f2 .vcproj}  files will be created. You can then build them using Visual Studio.\par
On Mac OS X with Xcode installed, a {\f2 .xcodeproj}  file will be generated.\par}
{\bkmkstart AAAAAAAAVY}
{\bkmkend AAAAAAAAVY}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Incorporating Into An Existing CMake Project
\par}
{\tc\tcl4 \v Incorporating Into An Existing CMake Project}
If you want to use GoogleTest in a project which already uses CMake, the easiest way is to get installed libraries and headers.\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Import GoogleTest by using {\f2 find_package}  (or {\f2 pkg_check_modules} ). For example, if {\f2 find_package(GTest CONFIG REQUIRED)}  succeeds, you can use the libraries as {\f2 GTest::gtest} , {\f2 GTest::gmock} .\par}
\par
And a more robust and flexible approach is to build GoogleTest as part of that project directly. This is done by making the GoogleTest source code available to the main build and adding it using CMake's {\f2 add_subdirectory()}  command. This has the significant advantage that the same compiler and linker settings are used between GoogleTest and the rest of your project, so issues associated with using incompatible libraries (eg debug/release), etc. are avoided. This is particularly useful on Windows. Making GoogleTest's source code available to the main build can be done a few different ways:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Download the GoogleTest source code manually and place it at a known location. This is the least flexible approach and can make it more difficult to use with continuous integration systems, etc.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Embed the GoogleTest source code as a direct copy in the main project's source tree. This is often the simplest approach, but is also the hardest to keep up to date. Some organizations may not permit this method.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Add GoogleTest as a git submodule or equivalent. This may not always be possible or appropriate. Git submodules, for example, have their own set of advantages and drawbacks.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Use CMake to download GoogleTest as part of the build's configure step. This approach doesn't have the limitations of the other methods.\par}
\par
The last of the above methods is implemented with a small piece of CMake code that downloads and pulls the GoogleTest code into the main build.\par
Just add to your {\f2 CMakeLists.txt} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid include(FetchContent)\par
FetchContent_Declare(\par
  googletest\par
  # Specify the commit you depend on and update it regularly.\par
  URL https://github.com/google/googletest/archive/5376968f6948923e2411081fd9372e71a59d8e77.zip\par
)\par
# For Windows: Prevent overriding the parent project's compiler/linker settings\par
set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)\par
FetchContent_MakeAvailable(googletest)\par
\par
# Now simply link against gtest or gtest_main as needed. Eg\par
add_executable(example example.cpp)\par
target_link_libraries(example gtest_main)\par
add_test(NAME example_test COMMAND example)\par
}
\par
Note that this approach requires CMake 3.14 or later due to its use of the {\f2 FetchContent_MakeAvailable()}  command.\par
{\bkmkstart AAAAAAAAVZ}
{\bkmkend AAAAAAAAVZ}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Visual Studio Dynamic vs Static Runtimes
\par}
{\tc\tcl4 \v Visual Studio Dynamic vs Static Runtimes}
By default, new Visual Studio projects link the C runtimes dynamically but GoogleTest links them statically. This will generate an error that looks something like the following: gtest.lib(gtest-all.obj) : error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in main.obj\par
GoogleTest already has a CMake option for this: {\f2 gtest_force_shared_crt} \par
Enabling this option will make gtest link the runtimes dynamically too, and match the project in which it is included.\par}
\par}
{\bkmkstart AAAAAAAAWA}
{\bkmkend AAAAAAAAWA}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
C++ Standard Version
\par}
{\tc\tcl4 \v C++ Standard Version}
An environment that supports C++11 is required in order to successfully build GoogleTest. One way to ensure this is to specify the standard in the top-level project, for example by using the {\f2 set(CMAKE_CXX_STANDARD 11)}  command. If this is not feasible, for example in a C project using GoogleTest for validation, then it can be specified by adding it to the options for cmake via the {\f2 DCMAKE_CXX_FLAGS}  option.\par}
\par}
{\bkmkstart AAAAAAAAWB}
{\bkmkend AAAAAAAAWB}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Tweaking GoogleTest
\par}
{\tc\tcl3 \v Tweaking GoogleTest}
GoogleTest can be used in diverse environments. The default configuration may not work (or may not work well) out of the box in some environments. However, you can easily tweak GoogleTest by defining control macros on the compiler command line. Generally, these macros are named like {\f2 GTEST_XYZ}  and you define them to either 1 or 0 to enable or disable a certain feature.\par
We list the most frequently used macros below. For a complete list, see file {\f2 include/gtest/internal/gtest-port.h}.\par}
{\bkmkstart AAAAAAAAWC}
{\bkmkend AAAAAAAAWC}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Multi-threaded Tests
\par}
{\tc\tcl3 \v Multi-threaded Tests}
GoogleTest is thread-safe where the pthread library is available. After {\f2 #include "gtest/gtest.h"} , you can check the {\f2 GTEST_IS_THREADSAFE}  macro to see whether this is the case (yes if the macro is {\f2 #defined}  to 1, no if it's undefined.).\par
If GoogleTest doesn't correctly detect whether pthread is available in your environment, you can force it with {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid -DGTEST_HAS_PTHREAD=1\par
}
 or {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid -DGTEST_HAS_PTHREAD=0\par
}
 When GoogleTest uses pthread, you may need to add flags to your compiler and/or linker to select the pthread library, or you'll get link errors. If you use the CMake script, this is taken care of for you. If you use your own build script, you'll need to read your compiler and linker's manual to figure out what flags to add.\par}
{\bkmkstart AAAAAAAAWD}
{\bkmkend AAAAAAAAWD}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
As a Shared Library (DLL)
\par}
{\tc\tcl3 \v As a Shared Library (DLL)}
GoogleTest is compact, so most users can build and link it as a static library for the simplicity. You can choose to use GoogleTest as a shared library (known as a DLL on Windows) if you prefer.\par
To compile {\i gtest}  as a shared library, add {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid -DGTEST_CREATE_SHARED_LIBRARY=1\par
}
 to the compiler flags. You'll also need to tell the linker to produce a shared library instead - consult your linker's manual for how to do it.\par
To compile your {\i tests}  that use the gtest shared library, add {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid -DGTEST_LINKED_AS_SHARED_LIBRARY=1\par
}
 to the compiler flags.\par
Note: while the above steps aren't technically necessary today when using some compilers (e.g. GCC), they may become necessary in the future, if we decide to improve the speed of loading the library (see {\f2 http://gcc.gnu.org/wiki/Visibility} for details). Therefore you are recommended to always add the above flags when using GoogleTest as a shared library. Otherwise a future release of GoogleTest may break your build script.\par}
{\bkmkstart AAAAAAAAWE}
{\bkmkend AAAAAAAAWE}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Avoiding Macro Name Clashes
\par}
{\tc\tcl3 \v Avoiding Macro Name Clashes}
In C++, macros don't obey namespaces. Therefore two libraries that both define a macro of the same name will clash if you {\f2 #include}  both definitions. In case a GoogleTest macro clashes with another library, you can force GoogleTest to rename its macro to avoid the conflict.\par
Specifically, if both GoogleTest and some other code define macro FOO, you can add {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid -DGTEST_DONT_DEFINE_FOO=1\par
}
 to the compiler flags to tell GoogleTest to change the macro's name from {\f2 FOO}  to {\f2 GTEST_FOO} . Currently {\f2 FOO}  can be {\f2 ASSERT_EQ} , {\f2 ASSERT_FALSE} , {\f2 ASSERT_GE} , {\f2 ASSERT_GT} , {\f2 ASSERT_LE} , {\f2 ASSERT_LT} , {\f2 ASSERT_NE} , {\f2 ASSERT_TRUE} , {\f2 EXPECT_FALSE} , {\f2 EXPECT_TRUE} , {\f2 FAIL} , {\f2 SUCCEED} , {\f2 TEST} , or {\f2 TEST_F} . For example, with {\f2 -DGTEST_DONT_DEFINE_TEST=1} , you'll need to write {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid GTEST_TEST(SomeTest, DoesThis) \{ ... \}\par
}
 instead of {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(SomeTest, DoesThis) \{ ... \}\par
}
 in order to define a test. \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
GoogleTest{\tc \v GoogleTest}\par \pard\plain 
{\bkmkstart AAAAAAADYL}
{\bkmkend AAAAAAADYL}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{\bkmkstart AAAAAAAAWF}
{\bkmkend AAAAAAAAWF}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Announcements
\par}
{\tc\tcl3 \v Announcements}
{\bkmkstart AAAAAAAAWG}
{\bkmkend AAAAAAAAWG}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Live at Head
\par}
{\tc\tcl4 \v Live at Head}
GoogleTest now follows the {\f2 Abseil Live at Head philosophy}. We recommend {\f2 updating to the latest commit in the {\f2 main}  branch as often as possible}.\par}
{\bkmkstart AAAAAAAAWH}
{\bkmkend AAAAAAAAWH}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Documentation Updates
\par}
{\tc\tcl4 \v Documentation Updates}
Our documentation is now live on GitHub Pages at {\f2 https://google.github.io/googletest/}. We recommend browsing the documentation on GitHub Pages rather than directly in the repository.\par}
{\bkmkstart AAAAAAAAWI}
{\bkmkend AAAAAAAAWI}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Release 1.12.1
\par}
{\tc\tcl4 \v Release 1.12.1}
{\f2 Release 1.12.1} is now available.\par
The 1.12.x branch will be the last to support C++11. Future releases will require at least C++14.\par}
{\bkmkstart AAAAAAAAWJ}
{\bkmkend AAAAAAAAWJ}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Coming Soon
\par}
{\tc\tcl4 \v Coming Soon}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
We are planning to take a dependency on {\f2 Abseil}.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
More documentation improvements are planned.\par}
\par
\par}
\par}
{\bkmkstart AAAAAAAAWK}
{\bkmkend AAAAAAAAWK}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Welcome to <strong>GoogleTest</strong>, Google's C++ test framework!
\par}
{\tc\tcl2 \v Welcome to <strong>GoogleTest</strong>, Google's C++ test framework!}
This repository is a merger of the formerly separate GoogleTest and GoogleMock projects. These were so closely related that it makes sense to maintain and release them together.\par
{\bkmkstart AAAAAAAAWL}
{\bkmkend AAAAAAAAWL}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Getting Started
\par}
{\tc\tcl3 \v Getting Started}
See the {\f2 GoogleTest User's Guide} for documentation. We recommend starting with the {\f2 GoogleTest Primer}.\par
More information about building GoogleTest can be found at {\b googletest/README.md}.\par}
\par}
{\bkmkstart AAAAAAAAWM}
{\bkmkend AAAAAAAAWM}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Features
\par}
{\tc\tcl2 \v Features}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
An {\f2 xUnit} test framework.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Test discovery.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
A rich set of assertions.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
User-defined assertions.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Death tests.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Fatal and non-fatal failures.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Value-parameterized tests.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Type-parameterized tests.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Various options for running the tests.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
XML test report generation.\par}
\par
\par}
{\bkmkstart AAAAAAAAWN}
{\bkmkend AAAAAAAAWN}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Supported Platforms
\par}
{\tc\tcl2 \v Supported Platforms}
GoogleTest follows Google's {\f2 Foundational C++ Support Policy}. See {\f2 this table} for a list of currently supported versions compilers, platforms, and build tools.\par}
{\bkmkstart AAAAAAAAWO}
{\bkmkend AAAAAAAAWO}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Who Is Using GoogleTest?
\par}
{\tc\tcl2 \v Who Is Using GoogleTest?}
In addition to many internal projects at Google, GoogleTest is also used by the following notable projects:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The {\f2 Chromium projects} (behind the Chrome browser and Chrome OS).\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The {\f2 LLVM} compiler.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Protocol Buffers}, Google's data interchange format.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The {\f2 OpenCV} computer vision library.\par}
\par
\par}
{\bkmkstart AAAAAAAAWP}
{\bkmkend AAAAAAAAWP}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Related Open Source Projects
\par}
{\tc\tcl2 \v Related Open Source Projects}
{\f2 GTest Runner} is a Qt5 based automated test-runner and Graphical User {\b Interface} with powerful features for Windows and Linux platforms.\par
{\f2 GoogleTest UI} is a test runner that runs your test binary, allows you to track its progress via a progress bar, and displays a list of test failures. Clicking on one shows failure text. GoogleTest UI is written in C#.\par
{\f2 GTest TAP Listener} is an event listener for GoogleTest that implements the {\f2 TAP protocol} for test result output. If your test runner understands TAP, you may find it useful.\par
{\f2 gtest-parallel} is a test runner that runs tests from your binary in parallel to provide significant speed-up.\par
{\f2 GoogleTest Adapter} is a VS Code extension allowing to view GoogleTest in a tree view and run/debug your tests.\par
{\f2 C++ TestMate} is a VS Code extension allowing to view GoogleTest in a tree view and run/debug your tests.\par
{\f2 Cornichon} is a small Gherkin DSL parser that generates stub code for GoogleTest.\par}
{\bkmkstart AAAAAAAAWQ}
{\bkmkend AAAAAAAAWQ}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Contributing Changes
\par}
{\tc\tcl2 \v Contributing Changes}
Please read {\f2 {\f2 CONTRIBUTING.md} } for details on how to contribute to this project.\par
Happy testing! \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Hierarchical Index\par \pard\plain 
{\tc \v Hierarchical Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Class Hierarchy\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This inheritance list is sorted roughly, but not completely, alphabetically:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::Action< F >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Action< OriginalFunction >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Action< R(Args...)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ActionImpl< F, Impl >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACTX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::ActionInterface< F >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABZI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
AHashTable\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAWR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gtest_printers_test::AllowsGenericStreaming\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACTJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gtest_printers_test::AllowsGenericStreamingAndImplicitConversionTemplate< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACTK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gtest_printers_test::AllowsGenericStreamingTemplate< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACTM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_function_mocker_test::AlternateCallable< F >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACKQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::AssertHelper\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACUF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
my_namespace::testing::AssertionResult\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::AssignAction< T1, T2 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACUI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Base\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAWX \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
namespace1::MyTypeInNameSpace1\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
namespace2::MyTypeInNameSpace2\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::Base\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACUL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gtest_printers_test::Big\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACTN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
BiggestIntConvertible\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TemplateSel< Tmpl >::Bind< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADOU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Bool\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_more_actions_test::BoolResetter\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACRH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::BuiltInDefaultValue< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACVG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::BuiltInDefaultValue< const T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACVJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::BuiltInDefaultValue< T * >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACVM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::BuiltInDefaultValueGetter< T, kDefaultConstructible >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACVP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::BuiltInDefaultValueGetter< T, false >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACVR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ByMoveWrapper< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACVT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::OnceAction< Result(Args...)>::StdFunctionAdaptor< Callable >::CallableTag\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_nice_strict_test::CallsMockMethodInDestructor\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACSK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::CartesianProductHolder< Gen >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACWC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::Castable\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACWF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Clock\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::CodeLocation\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACWI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ConstOnlyContainerWithClassIterator::const_iterator\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gtest_printers_test::const_iterator\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACTP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ConstAndNonConstCastable\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACWP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ConstCastable\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACWT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ConstCharPtr\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACWW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ConstOnlyContainerWithClassIterator\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ConstOnlyContainerWithPointerIterator\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ConstRef< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ConstRef< T & >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ConstructFromT< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ConstructionCounting\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_matchers_test::ContainerHelper\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACQR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ContainerPrinter\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ConversionHelperBase\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZP \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
ConversionHelperDerived\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
ConvertibleToAssertionResult\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ConvertibleToIntegerPrinter\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ConvertibleToStringViewPrinter\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Counter\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
CustomParamNameFunctor\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
CustomStruct\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::DefaultNameGenerator\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::DefaultValue< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABZT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::DefaultValue< T & >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::DefaultValue< void >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::DeleteArgAction< k >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_more_actions_test::DeletionTester\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACRJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::Derived\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::DoAllAction< Actions >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::DoAllAction< FinalAction >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::DoAllAction< OtherActions... >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXY \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::DoAllAction< InitialAction, OtherActions... >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACYE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::DoDefaultAction\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACYJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
DogAdder\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::DoubleSequence< plus_one, T, sizeofT >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACYL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::DoubleSequence< false, IndexSequence< I... >, sizeofT >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACYM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::DoubleSequence< true, IndexSequence< I... >, sizeofT >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACYO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ElemFromList< N, T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACYQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ElemFromList< I, T... >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACYQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ElemFromListImpl< typename >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACYS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ElemFromListImpl< IndexSequence< I... > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACYT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Environment\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAWV \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
BarEnvironment\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAWT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
FooEnvironment\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
SetupEnvironment\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TestGenerationEnvironment< kExpectedCalls >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::EnvironmentInvocationCatcher\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACYV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::FinalSuccessChecker\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::EqHelper\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACYY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ExcessiveArg\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::FailureReporterInterface\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAH \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::GoogleTestFailureReporter\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADCU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::faketype\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::FallbackPrinter\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::false_type
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::IsRecursiveContainerImpl< C, false >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::disjunction<... >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::is_callable_r_impl< Void, R, F, Args >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADEK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::is_proxy_type_list< typename >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADEP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
FieldHelper\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::FindFirstPrinter< T, E, Printer, Printers >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::FindFirstPrinter< T, decltype(Printer::PrintValue(std::declval< const T & >(), nullptr)), Printer, Printers... >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Flags\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACBD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::FlatTupleBase< Derived, Idx >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::FlatTupleBase< FlatTuple< T... >, MakeIndexSequence< sizeof...(T)>::type >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAU \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::FlatTuple< Params... >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::FlatTuple< Ts... >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::FlatTuple< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::FlatTupleConstructTag\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::FlatTupleElemBase< Derived, I >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::FlatTupleElemBase< FlatTuple< T... >, I >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::FlatTupleElemBase< FlatTuple< T... >, Idx >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBD \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::FlatTupleBase< FlatTuple< T... >, IndexSequence< Idx... > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::FloatingPoint< RawType >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_more_actions_test::Foo\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACRL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_nice_strict_test::Foo\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACSM \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::gmock_nice_strict_test::MockFoo\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACTC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::gtest_printers_test::Foo\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACTR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_function_mocker_test::FooInterface\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACKS \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::gmock_function_mocker_test::LegacyMockFoo\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACMA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_function_mocker_test::MockFoo\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::FormatForComparison< ToPrint, OtherOperand >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADCD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::FormatForComparison< ToPrint[N], OtherOperand >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADCF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::Function< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADCH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::Function< R(Args...)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADCI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::FunctionPointerPrinter\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADCQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Game\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::GenerateTypeList< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADCS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_more_actions_test::GiantTemplate< T1, T2, T3, k4, k5, k6, T7, T8, T9 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACRY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::GTestFlagSaver\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADCW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_matchers_test::GtestGreaterThanMatcher< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACQY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::GTestLog\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADCX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::GTestMutexLock\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::GTestNonCopyable\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::HasDebugStringAndShortDebugString< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
HasDebugStringMethods\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABCU \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
InheritsDebugStringMethods\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABDB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
History\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABCX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ImplBase< Impl >::Holder\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::Ignore< size_t >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::IgnoredValue\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::IgnoreResultAction< A >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ImplBase< Impl >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::IndexSequence< Is >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::IndexSequence<>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDT \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::MakeIndexSequenceImpl< 0 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
std::integral_constant
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
std::tuple_size< testing::internal::FlatTuple< Ts... > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::negation< P >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
Interface\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABDD \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
Mock\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
IntWrapper\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABDN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::InvokeArgumentAction< index, Params >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
InvokeHelper\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABDU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::InvokeMethodAction< Class, MethodPtr >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::InvokeMethodWithoutArgsAction< Class, MethodPtr >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADEC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::InvokeWithoutArgsAction< FunctionImpl >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADEH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::is_implicitly_convertible< From, To >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADEM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::IsEmptyMatcher\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADER \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::IsHashTable< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADEW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::IsRecursiveContainerImpl< C, bool >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADEZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::IsRecursiveContainerImpl< C, true >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
foo::PathLike::iterator\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gtest_printers_test::iterator\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACTV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Vector< T >::iterator\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::KindOf< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_function_mocker_test::LegacyMockB\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACLY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_function_mocker_test::LegacyMockMethodSizes0\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_function_mocker_test::LegacyMockMethodSizes1\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_function_mocker_test::LegacyMockMethodSizes2\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_function_mocker_test::LegacyMockMethodSizes3\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_function_mocker_test::LegacyMockMethodSizes4\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_function_mocker_test::LegacyMockOverloadedOnArgNumber\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::LessByName< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::internal_stream_operator_without_lexical_name_lookup::LookupBlocker\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADXE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::MarkAsIgnored\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Matcher< typename >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACCM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
MatcherInterface
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::gmock_matchers_test::GreaterThanMatcher< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACQT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::MaxBipartiteMatchState\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
my_namespace::testing::Message\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Message\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACCN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
MissingDebugStringMethod\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_function_mocker_test::MockB\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_nice_strict_test::MockBar\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACSP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_nice_strict_test::MockBaz\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACSV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
MockFoo\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_function_mocker_test::MockMethodNoexceptSpecifier\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_function_mocker_test::MockMethodSizes0\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_function_mocker_test::MockMethodSizes1\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_function_mocker_test::MockMethodSizes2\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_function_mocker_test::MockMethodSizes3\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_function_mocker_test::MockMethodSizes4\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_function_mocker_test::MockOverloadedOnArgNumber\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_function_mocker_test::MockOverloadedOnConstness\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_nice_strict_test::MockBaz::MoveOnly\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACSX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::Mutex\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
MyArray< T, kSize >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
library2::MyPair< T1, T2 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
MyString\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
MyType\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::NaggyMockImpl< Base >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGC \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::NaggyMock< MockFoo >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACCX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::NaggyMockImpl< MockClass >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGC \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::NaggyMock< MockClass >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACCX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::NaggyMockImpl< MockFoo >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::NameGeneratorSelector< Provided >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::NativeArray< Element >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::NiceMockImpl< Base >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::NiceMockImpl< MockClass >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGR \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::NiceMock< MockClass >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::NoDefaultContructor\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
NonContainer\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
NonDefaultConstructAssignString\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::None\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
NotConstDebugStringMethod\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_nice_strict_test::NotDefaultConstructible\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACTH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
NotReallyAHashTable\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::OnceAction< F >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::OnceAction< Result(Args...)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::OsStackTraceGetterInterface\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGY \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::OsStackTraceGetter\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
P1
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::conjunction< P1 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACWN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::disjunction< P1 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::ParamConverterGenerator< Gen >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADHD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ParameterizedTestSuiteInfoBase\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADHT \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::ParameterizedTestSuiteInfo< TestSuite >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADHL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::ParameterizedTestSuiteRegistry\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADHZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ParamGenerator< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADID \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ParamGenerator< From >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADID \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ParamGenerator< Gen >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADID \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ParamGeneratorInterface< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACWA \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::RangeGenerator< T, IncrementT >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADKM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ValuesInIteratorRangeGenerator< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADWM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::ParamGeneratorInterface< ParamType >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACWA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ParamGeneratorInterface< testing::internal::To >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACWA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ParamGeneratorInterface< To >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACWA \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::ParamGeneratorConverter< From, To >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADIK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::ParamGeneratorInterface<::std::tuple< T... > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACWA \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::CartesianProductGenerator< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACVW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::ParamIterator< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADIR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ParamIterator< From >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADIR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ParamIteratorInterface< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADJE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ParamIteratorInterface< ParamType >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADJE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ParamIteratorInterface< To >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADJE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ParentClass\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHD \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
ChildClassWithStreamOperator\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ChildClassWithoutStreamOperator\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
foo::PathLike\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Piece\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
Bishop\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
King\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Knight\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Pawn\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Queen\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABLI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Rook\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
Player\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
foo::PointerPrintable\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::PointerPrinter\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADJK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::PolymorphicAction< Impl >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
PredFormatFunctor1\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABII \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
PredFormatFunctor2\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
PredFormatFunctor3\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
PredFormatFunctor4\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
PredFormatFunctor5\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
PredFunctor1\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
PredFunctor2\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
PredFunctor3\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
PredFunctor4\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
PredFunctor5\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
PrimeTable\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGW \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
OnTheFlyPrimeTable\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
PreCalculatedPrimeTable\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
foo::PrintableViaPrintTo\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
foo::PrintableViaPrintToTemplate< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABRB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::PrintToStringParamName\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
PrivateCode\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ProtobufPrinter\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADKC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ProxyTypeList< Ts >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADKF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Queue< E >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABLQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
QueueNode< E >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::Random\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADKH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::RawBytesPrinter\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADKQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::RE\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADKS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::RelationToSourceCopy\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADLB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::RelationToSourceReference\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADLC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::RemoveConstFromKey< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADLD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::RemoveConstFromKey< std::pair< const K, V > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADLF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ReturnAction< R >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADLH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ReturnAction< ByMoveWrapper< T > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADLL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ReturnArgAction< k >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADLO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ReturnNewAction< T, Params >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADLQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ReturnNullAction\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADLT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ReturnPointeeAction< Ptr >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADLV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ReturnRefAction< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADLY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ReturnRefOfCopyAction< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADMB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ReturnRoundRobinAction< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADME \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ReturnVoidAction\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADMH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::SaveArgAction< k, Ptr >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADMJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::SaveArgPointeeAction< k, Ptr >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADMM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ScopedPrematureExitFile\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADMP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::ScopedTrace\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::SetArgRefereeAction< k, T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADMR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::SetArgumentPointeeAction< N, A, typename >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADMU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::SetArrayArgumentAction< k, I1, I2 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADMX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::SetErrnoAndReturnAction< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADNB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_function_mocker_test::StackInterface< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACQJ \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::gmock_function_mocker_test::LegacyMockStack< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_function_mocker_test::MockStack< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACQB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
StatefulNamingFunctor\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABND \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
StaticAssertTypeEqTestHelper< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::StlContainerView< RawContainer >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADNE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::StlContainerView< ::std::tuple< ElementPointer, Size > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADNJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::StlContainerView< Element[N]>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADNP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
StreamableInGlobal\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
foo::StreamableTemplateInFoo< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABRE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::internal_stream_operator_without_lexical_name_lookup::StreamPrinter\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADXF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::StrictMockImpl< Base >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADNV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::StrictMockImpl< MockClass >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADNV \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::StrictMock< MockClass >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACEL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::String\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADNW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
gtest_test_utils.Subprocess\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_more_actions_test::SumOf5Functor\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACSB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_more_actions_test::SumOf6Functor\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACSD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
T
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::SuiteApiResolver< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADOJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::gmock_function_mocker_test::TemplatedCopyable< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACQO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
foo::TemplatedStreamableInFoo\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABRG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::Templates< Head_, Tail_ >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADON \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::Templates< Head_ >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADOQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TemplateSel< Tmpl >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADOT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_more_actions_test::TenArgConstructorClass\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACSF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
my_namespace::testing::Test\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Test
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
TypedTest< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TypedTestP< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
DisabledTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
FailedTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Fixture\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
PropertyRecordingTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
SkippedTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
SuccessfulTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TypeParameterizedTestSuite< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TypedTest< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::gmockpp::Test< Args >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADXC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Test\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::TestWithParam< int >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIV \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
ParamTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
CustomIntegerNamingTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
DetectNotInstantiatedTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
EmptyBasenameParamInst\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ExternalGeneratorTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ExternalInstantiationTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
FailingParamTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
GeneratorEvaluationTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABCP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
InstantiationInMultipleTranslationUnitsTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABDC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
MacroNamingTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABET \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
MultipleInstantiationTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
NamingTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ParameterizedDeathTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
SeparateInstanceTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
StatefulNamingTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TestGenerationTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ValueParamTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ValueParamTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::CodeLocationForTESTP\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABZN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
works_here::NotInstantiatedTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADXH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
works_here::NotUsedTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADXJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::TestWithParam< MyEnums >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIV \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
MyEnumTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::TestWithParam< std::string >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIV \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
CustomFunctionNamingTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
CustomFunctorNamingTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
CustomLambdaNamingTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ParamTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::TestWithParam< MyType >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIV \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
ValueParamTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::TestWithParam< bool >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIV \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::gmock_matchers_test::GTestMatcherTestP\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACRE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
FooTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
CommonTest< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYD \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
DerivedTest< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
ContainerTest< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
DetectNotInstantiatedTypesTest< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
DynamicFixture\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAS \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
DynamicTest< Pass >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
DynamicUnitTestFixture\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAZ \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
DynamicTest< Pass >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
ExpectFailureTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
FatalFailureInFixtureConstructorTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
FatalFailureInSetUpTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
FooTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
FooTestFixture\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
GMockOutputTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABCS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
MacroNamingTestNonParametrized\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
NonFatalFailureInFixtureConstructorTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
NonFatalFailureInSetUpTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
NonParameterizedBaseTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGM \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
ParameterizedDerivedTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
Predicate1Test\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Predicate2Test\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Predicate3Test\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Predicate4Test\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Predicate5Test\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
PropertyOne\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
PropertyTwo\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABLC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ProtectedFixtureMethodsTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABLF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
SetupFailTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TEST_F_before_TEST_in_same_test_case\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TEST_before_TEST_F_in_same_test_case\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TearDownFailTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TestSuiteThatFailsToSetUp\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TypeParamTest< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TypeParameterizedTestSuite< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TypeParametrizedTestWithNames< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TypedTest< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TypedTest< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TypedTest< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TypedTest1< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABON \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TypedTest2< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TypedTestP< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TypedTestP1< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TypedTestP2< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TypedTestSuitePStateTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TypedTestWithNames< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TypedTestWithNames< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
bar::MixedUpTestSuiteTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
bar::MixedUpTestSuiteWithSameTestNameTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
foo::MixedUpTestSuiteTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
foo::MixedUpTestSuiteWithSameTestNameTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
library1::NumericTest< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
library2::NumericTest< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
library2::TrimmedTest< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::CodeLocationForTESTF\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABZM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::CodeLocationForTYPEDTEST< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABZO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::CodeLocationForTYPEDTESTP< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABZP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::CurrentTestInfoTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABZQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::ParseFlagsTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::SetUpTestCaseTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::SetUpTestSuiteTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACEF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::TestInfoTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACGT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::TestWithParam< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_function_mocker_test::ExpectCallTest< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACKR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_function_mocker_test::FunctionMockerTest< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACLV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_function_mocker_test::MockMethodMockFunctionSignatureTest< F >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_function_mocker_test::OverloadedMockMethodTest< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACQI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_function_mocker_test::TemplateMockTest< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACQQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ListenerTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TestSuiteWithCommentTest< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::UnitTestRecordPropertyTestHelper\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
works_here::NotInstantiatedTypeTest< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADXI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
works_here::NotUsedTypeTest< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADXK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
gmock_test_utils.TestCase
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
gmock_leak_test.GMockLeakTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABRJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
gmock_output_test.GMockOutputTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABRP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
gtest_test_utils.TestCase
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
googletest-break-on-failure-unittest.GTestBreakOnFailureUnitTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABRR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
googletest-catch-exceptions-test.CatchCxxExceptionsTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABRZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
googletest-catch-exceptions-test.CatchSehExceptionsTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABSJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
googletest-color-test.GTestColorTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABSN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
googletest-env-var-test.GTestEnvVarTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABST \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
googletest-failfast-unittest.GTestFailFastUnitTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABSX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
googletest-filter-unittest.GTestFilterUnitTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABTS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
googletest-global-environment-unittest.GTestGlobalEnvironmentUnitTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABUU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
googletest-json-outfiles-test.GTestJsonOutFilesTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABUY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
googletest-json-output-unittest.GTestJsonOutputUnitTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABVF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
googletest-list-tests-unittest.GTestListTestsUnitTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABVM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
googletest-output-test.GTestOutputTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABVS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
googletest-param-test-invalid-name1-test.GTestParamTestInvalidName1Test\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABVV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
googletest-param-test-invalid-name2-test.GTestParamTestInvalidName2Test\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABVX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
googletest-setuptestsuite-test.GTestSetUpTestSuiteTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABVZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
googletest-shuffle-test.GTestShuffleUnitTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABWB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
googletest-throw-on-failure-test.ThrowOnFailureTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABWO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
googletest-uninitialized-test.GTestUninitializedTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABWU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
gtest_help_test.GTestHelpTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABWW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
gtest_list_output_unittest.GTestListTestsOutputUnitTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
gtest_skip_check_output_test.SkipEntireEnvironmentTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
gtest_skip_environment_check_output_test.SkipEntireEnvironmentTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
gtest_testbridge_test.GTestTestFilterTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
gtest_xml_test_utils.GTestXMLTestCase\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYI \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
gtest_xml_outfiles_test.GTestXMLOutFilesTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
gtest_xml_output_unittest.GTestXMLOutputUnitTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
}\par
testing::TestEventListener\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::EmptyTestEventListener\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMU \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
SequenceTestingListener\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TestListener\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ThrowListener\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::JsonUnitTestResultPrinter\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::XmlUnitTestResultPrinter\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADWX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::BriefUnitTestResultPrinter\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACUQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::EventRecordingListener\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACZC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::EventRecordingListener2\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACZR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::PrettyUnitTestResultPrinter\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADJM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TestEventRepeater\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADPC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::TestEventListeners\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACFR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TestEventListenersAccessor\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADOW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TestFactoryBase\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADHK \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::ParameterizedTestFactory< TestClass >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADHG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TestFactoryImpl< TestClass >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADPY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::TestInfo\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACGC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TestMetaFactoryBase< ParamType >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TestMetaFactoryBase< TestSuite::ParamType >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQD \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::TestMetaFactory< TestSuite >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::TestParamInfo< ParamType >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACGW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TestPartResultReporterInterface
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::DefaultGlobalTestPartResultReporter\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::DefaultPerThreadTestPartResultReporter\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::TestProperty\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACHA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TestPropertyKeyIs\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::TestResult\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACHF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TestResultAccessor\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::TestSuite\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TestSuiteNameIs\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TestWithParam
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
CommentTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
CustomStructNamingTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::ThisRefAdjuster< Pattern >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ThreadLocal< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ThreadLocal< std::vector< testing::internal::TraceInfo > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ThreadLocal< TestPartResultReporterInterface * >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::Timer\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::To\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TraceInfo\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::true_type
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::conjunction<... >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACWM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::is_proxy_type_list< ProxyTypeList< Ts... > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADEQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::TrueWithString\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
DoubleSequence::type
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::MakeIndexSequenceImpl< N >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
ImplBase::type
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::ActionImpl< R(Args...), Impl >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACTY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
IsRecursiveContainerImpl::type
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::IsRecursiveContainer< C >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADEY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
std::conditional::type
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::conjunction< P1, Ps... >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACWO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
std::conditional::type
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::is_callable_r_impl< void_t< call_result_t< F, Args... > >, R, F, Args... >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADEL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
std::conditional::type
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::disjunction< P1, Ps... >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
TypedTestNames\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TypedTestPNames\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TypeIdHelper< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TypeParameterizedTest< Fixture, TestSel, Types >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TypeParameterizedTest< Fixture, TestSel, internal::None >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TypeParameterizedTestSuite< Fixture, Tests, Types >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TypeParameterizedTestSuite< Fixture, internal::None, Types >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TypeParameterizedTestSuiteRegistry\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TypeParametrizedTestNames\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::Types< Head_, Tail_ >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADSA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::Types< Head_ >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADSD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TypeWithSize< size >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADSG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TypeWithSize< 4 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADSI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TypeWithSize< 8 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADSL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TypeWithSize< sizeof(RawType)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADSG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_more_actions_test::UnaryFunctor\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACSI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::UnitTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::UnitTestHelper\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADSO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::UnitTestImpl\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADSS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::UnitTestOptions\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::UniversalPrinter< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVJ \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::UniversalPrinter< const T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::UniversalPrinter< T & >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::UniversalPrinter< T[N]>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::UniversalPrinter< Wrapper< T > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::UniversalTersePrinter< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::UniversalTersePrinter< const char * >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVX \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::UniversalTersePrinter< char * >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::UniversalTersePrinter< const char16_t * >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVZ \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::UniversalTersePrinter< char16_t * >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::UniversalTersePrinter< const char32_t * >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADWB \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::UniversalTersePrinter< char32_t * >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::UniversalTersePrinter< T & >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADWD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::UniversalTersePrinter< T[N]>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADWF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::UniversalTersePrinter< wchar_t * >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADWH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
foo::UnprintableInFoo\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABRH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
UnprintableTemplateInGlobal< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Unstreamable\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::DoAllAction< FinalAction >::UserConstructorTag\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACYD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::DoAllAction< InitialAction, OtherActions... >::UserConstructorTag\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACYI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ValueArray< Ts >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADWJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::vector
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
TestingVector\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
Vector< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
VeryLoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooogName\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::WithArgsAction< InnerAction, I >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADWQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::WithoutMatchers\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADWV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::WithParamInterface< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACKM \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::TestWithParam< int >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::TestWithParam< MyEnums >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::TestWithParam< std::string >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::TestWithParam< MyType >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::TestWithParam< bool >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::TestWithParam< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::WithParamInterface< bool >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACKM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::WithParamInterface< int >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACKM \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
ParameterizedDerivedTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::WithParamInterface< MyEnums >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACKM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::WithParamInterface< MyType >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACKM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::WithParamInterface< std::string >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACKM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
WrongTypeDebugStringMethod\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Index\par \pard\plain 
{\tc \v Class Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Class List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here are the classes, structs, unions and interfaces with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b testing::Action< F >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::Action< R(Args...)>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ActionImpl< F, Impl >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACTX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ActionImpl< R(Args...), Impl >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACTY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::ActionInterface< F >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABZI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b AHashTable} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAWR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gtest_printers_test::AllowsGenericStreaming} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACTJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gtest_printers_test::AllowsGenericStreamingAndImplicitConversionTemplate< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACTK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gtest_printers_test::AllowsGenericStreamingTemplate< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACTM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_function_mocker_test::AlternateCallable< F >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACKQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::AssertHelper} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACUF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b my_namespace::testing::AssertionResult} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::AssignAction< T1, T2 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACUI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b BarEnvironment} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAWT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Base} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAWX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Base} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACUL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gtest_printers_test::Big} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACTN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b BiggestIntConvertible} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TemplateSel< Tmpl >::Bind< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADOU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Bishop} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Bool} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_more_actions_test::BoolResetter} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACRH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::BriefUnitTestResultPrinter} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACUQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::BuiltInDefaultValue< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACVG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::BuiltInDefaultValue< const T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACVJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::BuiltInDefaultValue< T * >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACVM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::BuiltInDefaultValueGetter< T, kDefaultConstructible >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACVP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::BuiltInDefaultValueGetter< T, false >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACVR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ByMoveWrapper< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACVT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::OnceAction< Result(Args...)>::StdFunctionAdaptor< Callable >::CallableTag} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_nice_strict_test::CallsMockMethodInDestructor} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACSK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::CartesianProductGenerator< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACVW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::CartesianProductHolder< Gen >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACWC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Castable} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACWF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b googletest-catch-exceptions-test.CatchCxxExceptionsTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABRZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b googletest-catch-exceptions-test.CatchSehExceptionsTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABSJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ChildClassWithoutStreamOperator} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ChildClassWithStreamOperator} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Clock} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::CodeLocation} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACWI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::CodeLocationForTESTF} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABZM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::CodeLocationForTESTP} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABZN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::CodeLocationForTYPEDTEST< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABZO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::CodeLocationForTYPEDTESTP< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABZP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b CommentTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b CommonTest< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::conjunction<... >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACWM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::conjunction< P1 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACWN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::conjunction< P1, Ps... >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACWO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ConstOnlyContainerWithClassIterator::const_iterator} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gtest_printers_test::const_iterator} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACTP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ConstAndNonConstCastable} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACWP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ConstCastable} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACWT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ConstCharPtr} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACWW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ConstOnlyContainerWithClassIterator} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ConstOnlyContainerWithPointerIterator} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ConstRef< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ConstRef< T & >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ConstructFromT< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ConstructionCounting} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::ContainerHelper} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACQR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ContainerPrinter} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ContainerTest< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ConversionHelperBase} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ConversionHelperDerived} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ConvertibleToAssertionResult} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ConvertibleToIntegerPrinter} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ConvertibleToStringViewPrinter} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Counter} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::CurrentTestInfoTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABZQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b CustomFunctionNamingTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b CustomFunctorNamingTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b CustomIntegerNamingTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b CustomLambdaNamingTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b CustomParamNameFunctor} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b CustomStruct} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b CustomStructNamingTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::DefaultGlobalTestPartResultReporter} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::DefaultNameGenerator} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::DefaultPerThreadTestPartResultReporter} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::DefaultValue< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABZT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::DefaultValue< T & >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::DefaultValue< void >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::DeleteArgAction< k >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_more_actions_test::DeletionTester} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACRJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Derived} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b DerivedTest< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b DetectNotInstantiatedTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b DetectNotInstantiatedTypesTest< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b DisabledTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::disjunction<... >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::disjunction< P1 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::disjunction< P1, Ps... >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::DoAllAction< Actions >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::DoAllAction< FinalAction >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::DoAllAction< InitialAction, OtherActions... >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACYE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::DoDefaultAction} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACYJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b DogAdder} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::DoubleSequence< plus_one, T, sizeofT >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACYL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::DoubleSequence< false, IndexSequence< I... >, sizeofT >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACYM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::DoubleSequence< true, IndexSequence< I... >, sizeofT >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACYO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b DynamicFixture} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b DynamicTest< Pass >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b DynamicUnitTestFixture} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ElemFromList< N, T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACYQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ElemFromListImpl< typename >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACYS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ElemFromListImpl< IndexSequence< I... > >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACYT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b EmptyBasenameParamInst} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::EmptyTestEventListener} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::Environment} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAWV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::EnvironmentInvocationCatcher} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACYV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::EqHelper} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACYY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::EventRecordingListener} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACZC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::EventRecordingListener2} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACZR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ExcessiveArg} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_function_mocker_test::ExpectCallTest< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACKR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ExpectFailureTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ExternalGeneratorTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ExternalInstantiationTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b FailedTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b FailingParamTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FailureReporterInterface} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::faketype} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FallbackPrinter} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b FatalFailureInFixtureConstructorTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b FatalFailureInSetUpTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b FieldHelper} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FinalSuccessChecker} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FindFirstPrinter< T, E, Printer, Printers >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FindFirstPrinter< T, decltype(Printer::PrintValue(std::declval< const T & >(), nullptr)), Printer, Printers... >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Fixture} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::Flags} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACBD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FlatTuple< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FlatTupleBase< Derived, Idx >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FlatTupleBase< FlatTuple< T... >, IndexSequence< Idx... > >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FlatTupleConstructTag} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FlatTupleElemBase< Derived, I >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FlatTupleElemBase< FlatTuple< T... >, I >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FloatingPoint< RawType >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_more_actions_test::Foo} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACRL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_nice_strict_test::Foo} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACSM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gtest_printers_test::Foo} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACTR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b FooEnvironment} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_function_mocker_test::FooInterface} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACKS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b FooTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b FooTestFixture} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FormatForComparison< ToPrint, OtherOperand >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADCD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FormatForComparison< ToPrint[N], OtherOperand >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADCF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Function< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADCH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Function< R(Args...)>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADCI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_function_mocker_test::FunctionMockerTest< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACLV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FunctionPointerPrinter} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADCQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Game} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::GenerateTypeList< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADCS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b GeneratorEvaluationTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABCP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_more_actions_test::GiantTemplate< T1, T2, T3, k4, k5, k6, T7, T8, T9 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACRY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b gmock_leak_test.GMockLeakTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABRJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b gmock_output_test.GMockOutputTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABRP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b GMockOutputTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABCS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::GoogleTestFailureReporter} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADCU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::GreaterThanMatcher< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACQT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b googletest-break-on-failure-unittest.GTestBreakOnFailureUnitTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABRR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b googletest-color-test.GTestColorTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABSN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b googletest-env-var-test.GTestEnvVarTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABST \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b googletest-failfast-unittest.GTestFailFastUnitTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABSX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b googletest-filter-unittest.GTestFilterUnitTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABTS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::GTestFlagSaver} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADCW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b googletest-global-environment-unittest.GTestGlobalEnvironmentUnitTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABUU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::GtestGreaterThanMatcher< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACQY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b gtest_help_test.GTestHelpTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABWW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b googletest-json-outfiles-test.GTestJsonOutFilesTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABUY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b googletest-json-output-unittest.GTestJsonOutputUnitTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABVF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b gtest_list_output_unittest.GTestListTestsOutputUnitTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b googletest-list-tests-unittest.GTestListTestsUnitTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABVM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::GTestLog} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADCX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::GTestMatcherTestP} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACRE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::GTestMutexLock} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::GTestNonCopyable} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b googletest-output-test.GTestOutputTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABVS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b googletest-param-test-invalid-name1-test.GTestParamTestInvalidName1Test} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABVV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b googletest-param-test-invalid-name2-test.GTestParamTestInvalidName2Test} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABVX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b googletest-setuptestsuite-test.GTestSetUpTestSuiteTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABVZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b googletest-shuffle-test.GTestShuffleUnitTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABWB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b gtest_testbridge_test.GTestTestFilterTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b googletest-uninitialized-test.GTestUninitializedTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABWU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b gtest_xml_outfiles_test.GTestXMLOutFilesTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b gtest_xml_output_unittest.GTestXMLOutputUnitTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b gtest_xml_test_utils.GTestXMLTestCase} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::HasDebugStringAndShortDebugString< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b HasDebugStringMethods} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABCU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b History} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABCX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ImplBase< Impl >::Holder} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Ignore< size_t >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::IgnoredValue} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::IgnoreResultAction< A >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ImplBase< Impl >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::IndexSequence< Is >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b InheritsDebugStringMethods} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABDB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b InstantiationInMultipleTranslationUnitsTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABDC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Interface} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABDD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b IntWrapper} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABDN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::InvokeArgumentAction< index, Params >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b InvokeHelper} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABDU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::InvokeMethodAction< Class, MethodPtr >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::InvokeMethodWithoutArgsAction< Class, MethodPtr >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADEC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::InvokeWithoutArgsAction< FunctionImpl >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADEH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::is_callable_r_impl< Void, R, F, Args >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADEK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::is_callable_r_impl< void_t< call_result_t< F, Args... > >, R, F, Args... >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADEL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::is_implicitly_convertible< From, To >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADEM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::is_proxy_type_list< typename >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADEP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::is_proxy_type_list< ProxyTypeList< Ts... > >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADEQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::IsEmptyMatcher} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADER \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::IsHashTable< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADEW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::IsRecursiveContainer< C >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADEY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::IsRecursiveContainerImpl< C, bool >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADEZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::IsRecursiveContainerImpl< C, false >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::IsRecursiveContainerImpl< C, true >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b foo::PathLike::iterator} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gtest_printers_test::iterator} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACTV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Vector< T >::iterator} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::JsonUnitTestResultPrinter} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::KindOf< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b King} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Knight} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_function_mocker_test::LegacyMockB} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACLY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_function_mocker_test::LegacyMockFoo} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACMA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_function_mocker_test::LegacyMockMethodSizes0} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_function_mocker_test::LegacyMockMethodSizes1} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_function_mocker_test::LegacyMockMethodSizes2} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_function_mocker_test::LegacyMockMethodSizes3} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_function_mocker_test::LegacyMockMethodSizes4} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_function_mocker_test::LegacyMockOverloadedOnArgNumber} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_function_mocker_test::LegacyMockStack< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::LessByName< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ListenerTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::internal_stream_operator_without_lexical_name_lookup::LookupBlocker} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADXE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b MacroNamingTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABET \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b MacroNamingTestNonParametrized} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::MakeIndexSequenceImpl< N >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::MakeIndexSequenceImpl< 0 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::MarkAsIgnored} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::Matcher< typename >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACCM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::MaxBipartiteMatchState} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b my_namespace::testing::Message} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::Message} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACCN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b MissingDebugStringMethod} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b bar::MixedUpTestSuiteTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b foo::MixedUpTestSuiteTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b bar::MixedUpTestSuiteWithSameTestNameTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b foo::MixedUpTestSuiteWithSameTestNameTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Mock} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_function_mocker_test::MockB} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_nice_strict_test::MockBar} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACSP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_nice_strict_test::MockBaz} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACSV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b MockFoo} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_function_mocker_test::MockFoo} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_nice_strict_test::MockFoo} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACTC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_function_mocker_test::MockMethodMockFunctionSignatureTest< F >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_function_mocker_test::MockMethodNoexceptSpecifier} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_function_mocker_test::MockMethodSizes0} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_function_mocker_test::MockMethodSizes1} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_function_mocker_test::MockMethodSizes2} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_function_mocker_test::MockMethodSizes3} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_function_mocker_test::MockMethodSizes4} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_function_mocker_test::MockOverloadedOnArgNumber} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_function_mocker_test::MockOverloadedOnConstness} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_function_mocker_test::MockStack< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACQB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_nice_strict_test::MockBaz::MoveOnly} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACSX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b MultipleInstantiationTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Mutex} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b MyArray< T, kSize >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b MyEnumTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b library2::MyPair< T1, T2 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b MyString} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b MyType} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b namespace1::MyTypeInNameSpace1} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b namespace2::MyTypeInNameSpace2} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::NaggyMock< MockClass >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACCX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::NaggyMockImpl< Base >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::NameGeneratorSelector< Provided >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b NamingTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::NativeArray< Element >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::negation< P >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::NiceMock< MockClass >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::NiceMockImpl< Base >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::NoDefaultContructor} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b NonContainer} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b NonDefaultConstructAssignString} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::None} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b NonFatalFailureInFixtureConstructorTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b NonFatalFailureInSetUpTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b NonParameterizedBaseTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b NotConstDebugStringMethod} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_nice_strict_test::NotDefaultConstructible} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACTH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b works_here::NotInstantiatedTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADXH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b works_here::NotInstantiatedTypeTest< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADXI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b NotReallyAHashTable} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b works_here::NotUsedTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADXJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b works_here::NotUsedTypeTest< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADXK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b library1::NumericTest< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b library2::NumericTest< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::OnceAction< F >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::OnceAction< Result(Args...)>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b OnTheFlyPrimeTable} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::OsStackTraceGetter} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::OsStackTraceGetterInterface} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_function_mocker_test::OverloadedMockMethodTest< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACQI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ParamConverterGenerator< Gen >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADHD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ParameterizedDeathTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ParameterizedDerivedTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ParameterizedTestFactory< TestClass >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADHG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ParameterizedTestSuiteInfo< TestSuite >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADHL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ParameterizedTestSuiteInfoBase} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADHT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ParameterizedTestSuiteRegistry} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADHZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ParamGenerator< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADID \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ParamGeneratorConverter< From, To >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADIK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ParamGeneratorInterface< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACWA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ParamIterator< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADIR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ParamIteratorInterface< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADJE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ParamTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ParentClass} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::ParseFlagsTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b foo::PathLike} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Pawn} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Piece} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D0\'A1\'D1\'82\'D1\'80\'D1\'83\'D0\'BA\'D1\'82\'D1\'83\'D1\'80\'D0\'B0 \'D0\'B0\'D0\'B1\'D1\'81\'D1\'82\'D1\'80\'D0\'B0\'D0\'BA\'D1\'82\'D0\'BD\'D0\'BE\'D0\'B9 \'D1\'84\'D0\'B8\'D0\'B3\'D1\'83\'D1\'80\'D1\'8B })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Player} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b foo::PointerPrintable} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::PointerPrinter} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADJK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::PolymorphicAction< Impl >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b PreCalculatedPrimeTable} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b PredFormatFunctor1} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABII \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b PredFormatFunctor2} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b PredFormatFunctor3} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b PredFormatFunctor4} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b PredFormatFunctor5} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b PredFunctor1} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b PredFunctor2} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b PredFunctor3} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b PredFunctor4} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b PredFunctor5} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Predicate1Test} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Predicate2Test} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Predicate3Test} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Predicate4Test} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Predicate5Test} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::PrettyUnitTestResultPrinter} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADJM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b PrimeTable} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b foo::PrintableViaPrintTo} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b foo::PrintableViaPrintToTemplate< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABRB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::PrintToStringParamName} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b PrivateCode} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b PropertyOne} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b PropertyRecordingTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b PropertyTwo} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABLC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ProtectedFixtureMethodsTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABLF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ProtobufPrinter} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADKC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ProxyTypeList< Ts >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADKF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Queen} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABLI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Queue< E >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABLQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b QueueNode< E >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Random} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADKH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::RangeGenerator< T, IncrementT >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADKM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::RawBytesPrinter} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADKQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::RE} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADKS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::RelationToSourceCopy} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADLB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::RelationToSourceReference} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADLC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::RemoveConstFromKey< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADLD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::RemoveConstFromKey< std::pair< const K, V > >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADLF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ReturnAction< R >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADLH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ReturnAction< ByMoveWrapper< T > >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADLL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ReturnArgAction< k >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADLO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ReturnNewAction< T, Params >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADLQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ReturnNullAction} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADLT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ReturnPointeeAction< Ptr >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADLV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ReturnRefAction< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADLY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ReturnRefOfCopyAction< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADMB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ReturnRoundRobinAction< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADME \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ReturnVoidAction} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADMH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Rook} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::SaveArgAction< k, Ptr >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADMJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::SaveArgPointeeAction< k, Ptr >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADMM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ScopedPrematureExitFile} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADMP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::ScopedTrace} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b SeparateInstanceTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b SequenceTestingListener} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::SetArgRefereeAction< k, T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADMR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::SetArgumentPointeeAction< N, A, typename >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADMU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::SetArrayArgumentAction< k, I1, I2 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADMX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::SetErrnoAndReturnAction< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADNB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b SetupEnvironment} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b SetupFailTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::SetUpTestCaseTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::SetUpTestSuiteTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACEF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b gtest_skip_check_output_test.SkipEntireEnvironmentTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b gtest_skip_environment_check_output_test.SkipEntireEnvironmentTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b SkippedTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_function_mocker_test::StackInterface< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACQJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b StatefulNamingFunctor} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABND \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b StatefulNamingTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b StaticAssertTypeEqTestHelper< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::StlContainerView< RawContainer >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADNE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::StlContainerView< ::std::tuple< ElementPointer, Size > >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADNJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::StlContainerView< Element[N]>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADNP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b StreamableInGlobal} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b foo::StreamableTemplateInFoo< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABRE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::internal_stream_operator_without_lexical_name_lookup::StreamPrinter} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADXF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::StrictMock< MockClass >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACEL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::StrictMockImpl< Base >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADNV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::String} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADNW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b gtest_test_utils.Subprocess} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b SuccessfulTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::SuiteApiResolver< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADOJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_more_actions_test::SumOf5Functor} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACSB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_more_actions_test::SumOf6Functor} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACSD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b TearDownFailTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_function_mocker_test::TemplatedCopyable< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACQO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b foo::TemplatedStreamableInFoo} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABRG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_function_mocker_test::TemplateMockTest< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACQQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Templates< Head_, Tail_ >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADON \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Templates< Head_ >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADOQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TemplateSel< Tmpl >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADOT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_more_actions_test::TenArgConstructorClass} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACSF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b my_namespace::testing::Test} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::gmockpp::Test< Args >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADXC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::Test} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b TEST_before_TEST_F_in_same_test_case} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b TEST_F_before_TEST_in_same_test_case} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::TestEventListener} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::TestEventListeners} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACFR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TestEventListenersAccessor} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADOW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TestEventRepeater} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADPC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TestFactoryBase} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADHK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TestFactoryImpl< TestClass >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADPY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b TestGenerationEnvironment< kExpectedCalls >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b TestGenerationTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::TestInfo} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACGC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::TestInfoTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACGT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b TestingVector} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b TestListener} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TestMetaFactory< TestSuite >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TestMetaFactoryBase< ParamType >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::TestParamInfo< ParamType >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACGW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::TestProperty} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACHA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TestPropertyKeyIs} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::TestResult} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACHF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TestResultAccessor} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::TestSuite} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TestSuiteNameIs} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b TestSuiteThatFailsToSetUp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TestSuiteWithCommentTest< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::TestWithParam< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ThisRefAdjuster< Pattern >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ThreadLocal< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ThrowListener} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b googletest-throw-on-failure-test.ThrowOnFailureTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABWO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Timer} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::To} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TraceInfo} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b library2::TrimmedTest< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TrueWithString} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tuple_size< testing::internal::FlatTuple< Ts... > >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b TypedTest< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b TypedTest1< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABON \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b TypedTest2< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b TypedTestNames} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b TypedTestP< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b TypedTestP1< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b TypedTestP2< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b TypedTestPNames} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b TypedTestSuitePStateTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b TypedTestWithNames< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TypeIdHelper< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TypeParameterizedTest< Fixture, TestSel, Types >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TypeParameterizedTest< Fixture, TestSel, internal::None >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TypeParameterizedTestSuite< Fixture, Tests, Types >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b TypeParameterizedTestSuite< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TypeParameterizedTestSuite< Fixture, internal::None, Types >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TypeParameterizedTestSuiteRegistry} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b TypeParametrizedTestNames} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b TypeParametrizedTestWithNames< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b TypeParamTest< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Types< Head_, Tail_ >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADSA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Types< Head_ >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADSD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TypeWithSize< size >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADSG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TypeWithSize< 4 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADSI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TypeWithSize< 8 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADSL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_more_actions_test::UnaryFunctor} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACSI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::UnitTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UnitTestHelper} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADSO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UnitTestImpl} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADSS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UnitTestOptions} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UnitTestRecordPropertyTestHelper} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UniversalPrinter< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UniversalPrinter< const T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UniversalPrinter< T & >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UniversalPrinter< T[N]>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UniversalPrinter< Wrapper< T > >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UniversalTersePrinter< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UniversalTersePrinter< char * >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UniversalTersePrinter< char16_t * >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UniversalTersePrinter< char32_t * >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UniversalTersePrinter< const char * >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UniversalTersePrinter< const char16_t * >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UniversalTersePrinter< const char32_t * >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADWB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UniversalTersePrinter< T & >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADWD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UniversalTersePrinter< T[N]>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADWF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UniversalTersePrinter< wchar_t * >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADWH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b foo::UnprintableInFoo} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABRH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b UnprintableTemplateInGlobal< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Unstreamable} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::DoAllAction< FinalAction >::UserConstructorTag} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACYD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::DoAllAction< InitialAction, OtherActions... >::UserConstructorTag} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACYI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ValueArray< Ts >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADWJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ValueParamTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ValuesInIteratorRangeGenerator< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADWM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Vector< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b VeryLoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooogName} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::WithArgsAction< InnerAction, I >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADWQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::WithoutMatchers} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADWV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::WithParamInterface< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACKM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b WrongTypeDebugStringMethod} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::XmlUnitTestResultPrinter} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADWX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Index\par \pard\plain 
{\tc \v File Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
File List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all documented files with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b game.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b helper.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Pieces.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googlemock/include/gmock/{\b gmock-actions.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googlemock/include/gmock/{\b gmock-cardinalities.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googlemock/include/gmock/{\b gmock-function-mocker.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googlemock/include/gmock/{\b gmock-matchers.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googlemock/include/gmock/{\b gmock-more-actions.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googlemock/include/gmock/{\b gmock-more-matchers.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googlemock/include/gmock/{\b gmock-nice-strict.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googlemock/include/gmock/{\b gmock-spec-builders.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googlemock/include/gmock/{\b gmock.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googlemock/include/gmock/internal/{\b gmock-internal-utils.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googlemock/include/gmock/internal/{\b gmock-port.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googlemock/include/gmock/internal/{\b gmock-pp.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googlemock/include/gmock/internal/custom/{\b gmock-generated-actions.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googlemock/include/gmock/internal/custom/{\b gmock-matchers.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googlemock/include/gmock/internal/custom/{\b gmock-port.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googlemock/test/{\b gmock-matchers_test.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googlemock/test/{\b gmock_link_test.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googletest/include/gtest/{\b gtest-assertion-result.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googletest/include/gtest/{\b gtest-death-test.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googletest/include/gtest/{\b gtest-matchers.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googletest/include/gtest/{\b gtest-message.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googletest/include/gtest/{\b gtest-param-test.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googletest/include/gtest/{\b gtest-printers.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googletest/include/gtest/{\b gtest-spi.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googletest/include/gtest/{\b gtest-test-part.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googletest/include/gtest/{\b gtest-typed-test.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googletest/include/gtest/{\b gtest.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googletest/include/gtest/{\b gtest_pred_impl.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googletest/include/gtest/{\b gtest_prod.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googletest/include/gtest/internal/{\b gtest-death-test-internal.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googletest/include/gtest/internal/{\b gtest-filepath.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googletest/include/gtest/internal/{\b gtest-internal.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googletest/include/gtest/internal/{\b gtest-param-util.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googletest/include/gtest/internal/{\b gtest-port-arch.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googletest/include/gtest/internal/{\b gtest-port.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googletest/include/gtest/internal/{\b gtest-string.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googletest/include/gtest/internal/{\b gtest-type-util.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googletest/include/gtest/internal/custom/{\b gtest-port.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googletest/include/gtest/internal/custom/{\b gtest-printers.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googletest/include/gtest/internal/custom/{\b gtest.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googletest/samples/{\b prime_tables.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googletest/samples/{\b sample1.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googletest/samples/{\b sample2.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googletest/samples/{\b sample3-inl.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googletest/samples/{\b sample4.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googletest/src/{\b gtest-internal-inl.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googletest/test/{\b googletest-param-test-test.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googletest/test/{\b gtest-typed-test_test.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib/googletest-main/googletest/test/{\b production.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b Vector/{\b my_vector.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b view/{\b view.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Documentation{\tc \v Class Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::Action< F > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::Action< F >}
{\xe \v testing::Action< F >}
{\bkmkstart AAAAAAABYY}
{\bkmkend AAAAAAABYY}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::Action< R(Args...)> Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::Action< R(Args...)>}
{\xe \v testing::Action< R(Args...)>}
{\bkmkstart AAAAAAABYZ}
{\bkmkend AAAAAAABYZ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::Function}< F >::Result {\b Result}{\bkmkstart AAAAAAABZA}
{\bkmkend AAAAAAABZA}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::Function}< F >::ArgumentTuple {\b ArgumentTuple}{\bkmkstart AAAAAAABZB}
{\bkmkend AAAAAAABZB}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename G , typename  = typename std::enable_if<internal::disjunction<          IsCompatibleFunctor<G>, std::is_constructible<std::function<Result()>,                                                        G>>::value>::type> {\b Action} (G &&fun){\bkmkstart AAAAAAABZC}
{\bkmkend AAAAAAABZC}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Action} ({\b ActionInterface}< F > *impl){\bkmkstart AAAAAAABZD}
{\bkmkend AAAAAAABZD}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Func > {\b Action} (const {\b Action}< Func > &action){\bkmkstart AAAAAAABZE}
{\bkmkend AAAAAAABZE}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b IsDoDefault} () const{\bkmkstart AAAAAAABZF}
{\bkmkend AAAAAAABZF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

Result {\b Perform} (ArgumentTuple args) const{\bkmkstart AAAAAAABZG}
{\bkmkend AAAAAAABZG}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b operator OnceAction< F >} () const{\bkmkstart AAAAAAABZH}
{\bkmkend AAAAAAABZH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ActionImpl< F, Impl > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ActionImpl< F, Impl >}
{\xe \v testing::internal::ActionImpl< F, Impl >}
{\bkmkstart AAAAAAACTX}
{\bkmkend AAAAAAACTX}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ActionImpl< R(Args...), Impl > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ActionImpl< R(Args...), Impl >}
{\xe \v testing::internal::ActionImpl< R(Args...), Impl >}
{\bkmkstart AAAAAAACTY}
{\bkmkend AAAAAAACTY}
Inheritance diagram for testing::internal::ActionImpl< R(Args...), Impl >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_action_impl_3_01_r_07_args_8_8_8_08_00_01_impl_01_4.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b Base} = typename {\b ImplBase}< Impl >::type{\bkmkstart AAAAAAACTZ}
{\bkmkend AAAAAAACTZ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b function_type} = R(Args...){\bkmkstart AAAAAAACUA}
{\bkmkend AAAAAAACUA}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b args_type} = std::tuple< Args... >{\bkmkstart AAAAAAACUB}
{\bkmkend AAAAAAACUB}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ActionImpl} (std::shared_ptr< Impl > impl){\bkmkstart AAAAAAACUC}
{\bkmkend AAAAAAACUC}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

R {\b operator()} (Args &&... arg) const{\bkmkstart AAAAAAACUD}
{\bkmkend AAAAAAACUD}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<std::size_t... arg_id, std::size_t... excess_id> R {\b Apply} ({\b IndexSequence}< arg_id... >, {\b IndexSequence}< excess_id... >, const args_type &args) const{\bkmkstart AAAAAAACUE}
{\bkmkend AAAAAAACUE}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::ActionInterface< F > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::ActionInterface< F >}
{\xe \v testing::ActionInterface< F >}
{\bkmkstart AAAAAAABZI}
{\bkmkend AAAAAAABZI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::Function}< F >::Result {\b Result}{\bkmkstart AAAAAAABZJ}
{\bkmkend AAAAAAABZJ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::Function}< F >::ArgumentTuple {\b ArgumentTuple}{\bkmkstart AAAAAAABZK}
{\bkmkend AAAAAAABZK}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual Result {\b Perform} (const ArgumentTuple &args)=0{\bkmkstart AAAAAAABZL}
{\bkmkend AAAAAAABZL}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
AHashTable Struct Reference\par \pard\plain 
{\tc\tcl2 \v AHashTable}
{\xe \v AHashTable}
{\bkmkstart AAAAAAAAWR}
{\bkmkend AAAAAAAAWR}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef void {\b hasher}{\bkmkstart AAAAAAAAWS}
{\bkmkend AAAAAAAAWS}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gtest_printers_test::AllowsGenericStreaming Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gtest_printers_test::AllowsGenericStreaming}
{\xe \v testing::gtest_printers_test::AllowsGenericStreaming}
{\bkmkstart AAAAAAACTJ}
{\bkmkend AAAAAAACTJ}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-printers-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gtest_printers_test::AllowsGenericStreamingAndImplicitConversionTemplate< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::gtest_printers_test::AllowsGenericStreamingAndImplicitConversionTemplate< T >}
{\xe \v testing::gtest_printers_test::AllowsGenericStreamingAndImplicitConversionTemplate< T >}
{\bkmkstart AAAAAAACTK}
{\bkmkend AAAAAAACTK}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b operator bool} () const{\bkmkstart AAAAAAACTL}
{\bkmkend AAAAAAACTL}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-printers-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gtest_printers_test::AllowsGenericStreamingTemplate< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::gtest_printers_test::AllowsGenericStreamingTemplate< T >}
{\xe \v testing::gtest_printers_test::AllowsGenericStreamingTemplate< T >}
{\bkmkstart AAAAAAACTM}
{\bkmkend AAAAAAACTM}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-printers-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_function_mocker_test::AlternateCallable< F > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_function_mocker_test::AlternateCallable< F >}
{\xe \v testing::gmock_function_mocker_test::AlternateCallable< F >}
{\bkmkstart AAAAAAACKQ}
{\bkmkend AAAAAAACKQ}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-function-mocker_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::AssertHelper Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::AssertHelper}
{\xe \v testing::internal::AssertHelper}
{\bkmkstart AAAAAAACUF}
{\bkmkend AAAAAAACUF}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b AssertHelper} (TestPartResult::Type type, const char *file, int line, const char *message){\bkmkstart AAAAAAACUG}
{\bkmkend AAAAAAACUG}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b operator=} (const {\b Message} &message) const{\bkmkstart AAAAAAACUH}
{\bkmkend AAAAAAACUH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
my_namespace::testing::AssertionResult Class Reference\par \pard\plain 
{\tc\tcl2 \v my_namespace::testing::AssertionResult}
{\xe \v my_namespace::testing::AssertionResult}
{\bkmkstart AAAAAAABYQ}
{\bkmkend AAAAAAABYQ}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::AssignAction< T1, T2 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::AssignAction< T1, T2 >}
{\xe \v testing::internal::AssignAction< T1, T2 >}
{\bkmkstart AAAAAAACUI}
{\bkmkend AAAAAAACUI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b AssignAction} (T1 *ptr, T2 value){\bkmkstart AAAAAAACUJ}
{\bkmkend AAAAAAACUJ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Result , typename ArgumentTuple > void {\b Perform} (const ArgumentTuple &) const{\bkmkstart AAAAAAACUK}
{\bkmkend AAAAAAACUK}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
BarEnvironment Class Reference\par \pard\plain 
{\tc\tcl2 \v BarEnvironment}
{\xe \v BarEnvironment}
{\bkmkstart AAAAAAAAWT}
{\bkmkend AAAAAAAAWT}
Inheritance diagram for BarEnvironment:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_bar_environment.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SetUp} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b TearDown} () override\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v SetUp\:BarEnvironment}
{\xe \v BarEnvironment\:SetUp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void BarEnvironment::SetUp (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAWU}
{\bkmkend AAAAAAAAWU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Environment} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAWV \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v TearDown\:BarEnvironment}
{\xe \v BarEnvironment\:TearDown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void BarEnvironment::TearDown (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAWW}
{\bkmkend AAAAAAAAWW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Environment} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAWV \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-output-test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Base Class Reference\par \pard\plain 
{\tc\tcl2 \v Base}
{\xe \v Base}
{\bkmkstart AAAAAAAAWX}
{\bkmkend AAAAAAAAWX}
Inheritance diagram for Base:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_base.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Base} (int an_x){\bkmkstart AAAAAAAAWY}
{\bkmkend AAAAAAAAWY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b x} () const{\bkmkstart AAAAAAAAWZ}
{\bkmkend AAAAAAAAWZ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Base Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Base}
{\xe \v testing::internal::Base}
{\bkmkstart AAAAAAACUL}
{\bkmkend AAAAAAACUL}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Base} (int n){\bkmkstart AAAAAAACUM}
{\bkmkend AAAAAAACUM}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Base} (const {\b Base} &)=default{\bkmkstart AAAAAAACUN}
{\bkmkend AAAAAAACUN}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Base} & {\b operator=} (const {\b Base} &)=default{\bkmkstart AAAAAAACUO}
{\bkmkend AAAAAAACUO}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b member} (){\bkmkstart AAAAAAACUP}
{\bkmkend AAAAAAACUP}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-port-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gtest_printers_test::Big Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gtest_printers_test::Big}
{\xe \v testing::gtest_printers_test::Big}
{\bkmkstart AAAAAAACTN}
{\bkmkend AAAAAAACTN}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

char {\b array} [257]{\bkmkstart AAAAAAACTO}
{\bkmkend AAAAAAACTO}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-printers-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
BiggestIntConvertible Class Reference\par \pard\plain 
{\tc\tcl2 \v BiggestIntConvertible}
{\xe \v BiggestIntConvertible}
{\bkmkstart AAAAAAAAXA}
{\bkmkend AAAAAAAAXA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b operator::testing::internal::BiggestInt} () const{\bkmkstart AAAAAAAAXB}
{\bkmkend AAAAAAAAXB}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-printers-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TemplateSel< Tmpl >::Bind< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TemplateSel< Tmpl >::Bind< T >}
{\xe \v testing::internal::TemplateSel< Tmpl >::Bind< T >}
{\bkmkstart AAAAAAADOU}
{\bkmkend AAAAAAADOU}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef Tmpl< T > {\b type}{\bkmkstart AAAAAAADOV}
{\bkmkend AAAAAAADOV}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-type-util.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Bishop Struct Reference\par \pard\plain 
{\tc\tcl2 \v Bishop}
{\xe \v Bishop}
{\bkmkstart AAAAAAAAXC}
{\bkmkend AAAAAAAAXC}
Inheritance diagram for Bishop:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "struct_bishop.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Bishop} (int {\b color}, std::string position){\bkmkstart AAAAAAAAXD}
{\bkmkend AAAAAAAAXD}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::string > {\b possible_moves} (std::string &move) override\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D0\'A4\'D1\'83\'D0\'BD\'D0\'BA\'D1\'86\'D0\'B8\'D1\'8F \'D0\'B2\'D0\'BE\'D0\'B7\'D0\'BC\'D0\'BE\'D0\'B6\'D0\'BD\'D1\'8B\'D1\'85 \'D1\'85\'D0\'BE\'D0\'B4\'D0\'BE\'D0\'B2 }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b check_move} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b GetN} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b GetC} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b GetColor} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b increment} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b GetM} () override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v check_move\:Bishop}
{\xe \v Bishop\:check_move}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Bishop::check_move (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAXE}
{\bkmkend AAAAAAAAXE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v GetC\:Bishop}
{\xe \v Bishop\:GetC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Bishop::GetC (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAXG}
{\bkmkend AAAAAAAAXG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v GetColor\:Bishop}
{\xe \v Bishop\:GetColor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Bishop::GetColor (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAXH}
{\bkmkend AAAAAAAAXH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v GetM\:Bishop}
{\xe \v Bishop\:GetM}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Bishop::GetM (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAXI}
{\bkmkend AAAAAAAAXI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v GetN\:Bishop}
{\xe \v Bishop\:GetN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string Bishop::GetN (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAXJ}
{\bkmkend AAAAAAAAXJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v increment\:Bishop}
{\xe \v Bishop\:increment}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Bishop::increment (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAXK}
{\bkmkend AAAAAAAAXK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v possible_moves\:Bishop}
{\xe \v Bishop\:possible_moves}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector< std::string > Bishop::possible_moves (std::string &  {\i move}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAXL}
{\bkmkend AAAAAAAAXL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D0\'A4\'D1\'83\'D0\'BD\'D0\'BA\'D1\'86\'D0\'B8\'D1\'8F \'D0\'B2\'D0\'BE\'D0\'B7\'D0\'BC\'D0\'BE\'D0\'B6\'D0\'BD\'D1\'8B\'D1\'85 \'D1\'85\'D0\'BE\'D0\'B4\'D0\'BE\'D0\'B2 }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i \'D0\'A1\'D1\'82\'D1\'80\'D0\'BE\'D0\'BA\'D0\'B0} \cell }{\'D0\'BF\'D0\'BE\'D0\'B7\'D0\'B8\'D1\'86\'D0\'B8\'D0\'B8 \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'D0\'92\'D0\'B5\'D0\'BA\'D1\'82\'D0\'BE\'D1\'80 \'D1\'85\'D0\'BE\'D0\'B4\'D0\'BE\'D0\'B2 \par
}}}{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXM \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Pieces.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
pieces.cpp\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Bool Struct Reference\par \pard\plain 
{\tc\tcl2 \v Bool}
{\xe \v Bool}
{\bkmkstart AAAAAAAAXN}
{\bkmkend AAAAAAAAXN}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Bool} (int val){\bkmkstart AAAAAAAAXO}
{\bkmkend AAAAAAAAXO}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b operator>} (int n) const{\bkmkstart AAAAAAAAXP}
{\bkmkend AAAAAAAAXP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Bool} {\b operator+} (const {\b Bool} &rhs) const{\bkmkstart AAAAAAAAXQ}
{\bkmkend AAAAAAAAXQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b operator==} (const {\b Bool} &rhs) const{\bkmkstart AAAAAAAAXR}
{\bkmkend AAAAAAAAXR}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b value}{\bkmkstart AAAAAAAAXS}
{\bkmkend AAAAAAAAXS}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_pred_impl_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_more_actions_test::BoolResetter Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_more_actions_test::BoolResetter}
{\xe \v testing::gmock_more_actions_test::BoolResetter}
{\bkmkstart AAAAAAACRH}
{\bkmkend AAAAAAACRH}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b BoolResetter} (bool *value){\bkmkstart AAAAAAACRI}
{\bkmkend AAAAAAACRI}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-more-actions_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::BriefUnitTestResultPrinter Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::BriefUnitTestResultPrinter}
{\xe \v testing::internal::BriefUnitTestResultPrinter}
{\bkmkstart AAAAAAACUQ}
{\bkmkend AAAAAAACUQ}
Inheritance diagram for testing::internal::BriefUnitTestResultPrinter:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_brief_unit_test_result_printer.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestProgramStart} (const {\b UnitTest} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestIterationStart} (const {\b UnitTest} &, int) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnEnvironmentsSetUpStart} (const {\b UnitTest} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnEnvironmentsSetUpEnd} (const {\b UnitTest} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestCaseStart} (const {\b TestCase} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestStart} (const {\b TestInfo} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestDisabled} (const {\b TestInfo} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestPartResult} (const TestPartResult &result) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestEnd} (const {\b TestInfo} &test_info) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestCaseEnd} (const {\b TestCase} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnEnvironmentsTearDownStart} (const {\b UnitTest} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnEnvironmentsTearDownEnd} (const {\b UnitTest} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestIterationEnd} (const {\b UnitTest} &unit_test, int iteration) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestProgramEnd} (const {\b UnitTest} &) override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b PrintTestName} (const char *test_suite, const char *test){\bkmkstart AAAAAAACUR}
{\bkmkend AAAAAAACUR}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v OnEnvironmentsSetUpEnd\:testing::internal::BriefUnitTestResultPrinter}
{\xe \v testing::internal::BriefUnitTestResultPrinter\:OnEnvironmentsSetUpEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::BriefUnitTestResultPrinter::OnEnvironmentsSetUpEnd (const {\b UnitTest} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACUS}
{\bkmkend AAAAAAACUS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnEnvironmentsSetUpStart\:testing::internal::BriefUnitTestResultPrinter}
{\xe \v testing::internal::BriefUnitTestResultPrinter\:OnEnvironmentsSetUpStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::BriefUnitTestResultPrinter::OnEnvironmentsSetUpStart (const {\b UnitTest} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACUT}
{\bkmkend AAAAAAACUT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnEnvironmentsTearDownEnd\:testing::internal::BriefUnitTestResultPrinter}
{\xe \v testing::internal::BriefUnitTestResultPrinter\:OnEnvironmentsTearDownEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::BriefUnitTestResultPrinter::OnEnvironmentsTearDownEnd (const {\b UnitTest} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACUU}
{\bkmkend AAAAAAACUU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnEnvironmentsTearDownStart\:testing::internal::BriefUnitTestResultPrinter}
{\xe \v testing::internal::BriefUnitTestResultPrinter\:OnEnvironmentsTearDownStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::BriefUnitTestResultPrinter::OnEnvironmentsTearDownStart (const {\b UnitTest} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACUV}
{\bkmkend AAAAAAACUV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestCaseEnd\:testing::internal::BriefUnitTestResultPrinter}
{\xe \v testing::internal::BriefUnitTestResultPrinter\:OnTestCaseEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::BriefUnitTestResultPrinter::OnTestCaseEnd (const {\b TestCase} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACUW}
{\bkmkend AAAAAAACUW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestCaseStart\:testing::internal::BriefUnitTestResultPrinter}
{\xe \v testing::internal::BriefUnitTestResultPrinter\:OnTestCaseStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::BriefUnitTestResultPrinter::OnTestCaseStart (const {\b TestCase} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACUX}
{\bkmkend AAAAAAACUX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestDisabled\:testing::internal::BriefUnitTestResultPrinter}
{\xe \v testing::internal::BriefUnitTestResultPrinter\:OnTestDisabled}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::BriefUnitTestResultPrinter::OnTestDisabled (const {\b TestInfo} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACUY}
{\bkmkend AAAAAAACUY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestEnd\:testing::internal::BriefUnitTestResultPrinter}
{\xe \v testing::internal::BriefUnitTestResultPrinter\:OnTestEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::BriefUnitTestResultPrinter::OnTestEnd (const {\b TestInfo} &  {\i test_info}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACUZ}
{\bkmkend AAAAAAACUZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestIterationEnd\:testing::internal::BriefUnitTestResultPrinter}
{\xe \v testing::internal::BriefUnitTestResultPrinter\:OnTestIterationEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::BriefUnitTestResultPrinter::OnTestIterationEnd (const {\b UnitTest} &  {\i unit_test}, int  {\i iteration}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACVA}
{\bkmkend AAAAAAACVA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestIterationStart\:testing::internal::BriefUnitTestResultPrinter}
{\xe \v testing::internal::BriefUnitTestResultPrinter\:OnTestIterationStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::BriefUnitTestResultPrinter::OnTestIterationStart (const {\b UnitTest} & , int ){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACVB}
{\bkmkend AAAAAAACVB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestPartResult\:testing::internal::BriefUnitTestResultPrinter}
{\xe \v testing::internal::BriefUnitTestResultPrinter\:OnTestPartResult}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::BriefUnitTestResultPrinter::OnTestPartResult (const TestPartResult &  {\i result}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACVC}
{\bkmkend AAAAAAACVC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestProgramEnd\:testing::internal::BriefUnitTestResultPrinter}
{\xe \v testing::internal::BriefUnitTestResultPrinter\:OnTestProgramEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::BriefUnitTestResultPrinter::OnTestProgramEnd (const {\b UnitTest} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACVD}
{\bkmkend AAAAAAACVD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestProgramStart\:testing::internal::BriefUnitTestResultPrinter}
{\xe \v testing::internal::BriefUnitTestResultPrinter\:OnTestProgramStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::BriefUnitTestResultPrinter::OnTestProgramStart (const {\b UnitTest} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACVE}
{\bkmkend AAAAAAACVE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestStart\:testing::internal::BriefUnitTestResultPrinter}
{\xe \v testing::internal::BriefUnitTestResultPrinter\:OnTestStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::BriefUnitTestResultPrinter::OnTestStart (const {\b TestInfo} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACVF}
{\bkmkend AAAAAAACVF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::BuiltInDefaultValue< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::BuiltInDefaultValue< T >}
{\xe \v testing::internal::BuiltInDefaultValue< T >}
{\bkmkstart AAAAAAACVG}
{\bkmkend AAAAAAACVG}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b Exists} (){\bkmkstart AAAAAAACVH}
{\bkmkend AAAAAAACVH}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static T {\b Get} (){\bkmkstart AAAAAAACVI}
{\bkmkend AAAAAAACVI}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::BuiltInDefaultValue< const T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::BuiltInDefaultValue< const T >}
{\xe \v testing::internal::BuiltInDefaultValue< const T >}
{\bkmkstart AAAAAAACVJ}
{\bkmkend AAAAAAACVJ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b Exists} (){\bkmkstart AAAAAAACVK}
{\bkmkend AAAAAAACVK}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static T {\b Get} (){\bkmkstart AAAAAAACVL}
{\bkmkend AAAAAAACVL}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::BuiltInDefaultValue< T * > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::BuiltInDefaultValue< T * >}
{\xe \v testing::internal::BuiltInDefaultValue< T * >}
{\bkmkstart AAAAAAACVM}
{\bkmkend AAAAAAACVM}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b Exists} (){\bkmkstart AAAAAAACVN}
{\bkmkend AAAAAAACVN}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static T * {\b Get} (){\bkmkstart AAAAAAACVO}
{\bkmkend AAAAAAACVO}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::BuiltInDefaultValueGetter< T, kDefaultConstructible > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::BuiltInDefaultValueGetter< T, kDefaultConstructible >}
{\xe \v testing::internal::BuiltInDefaultValueGetter< T, kDefaultConstructible >}
{\bkmkstart AAAAAAACVP}
{\bkmkend AAAAAAACVP}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static T {\b Get} (){\bkmkstart AAAAAAACVQ}
{\bkmkend AAAAAAACVQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::BuiltInDefaultValueGetter< T, false > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::BuiltInDefaultValueGetter< T, false >}
{\xe \v testing::internal::BuiltInDefaultValueGetter< T, false >}
{\bkmkstart AAAAAAACVR}
{\bkmkend AAAAAAACVR}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static T {\b Get} (){\bkmkstart AAAAAAACVS}
{\bkmkend AAAAAAACVS}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ByMoveWrapper< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ByMoveWrapper< T >}
{\xe \v testing::internal::ByMoveWrapper< T >}
{\bkmkstart AAAAAAACVT}
{\bkmkend AAAAAAACVT}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ByMoveWrapper} (T value){\bkmkstart AAAAAAACVU}
{\bkmkend AAAAAAACVU}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T {\b payload}{\bkmkstart AAAAAAACVV}
{\bkmkend AAAAAAACVV}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::OnceAction< Result(Args...)>::StdFunctionAdaptor< Callable >::CallableTag Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::OnceAction< Result(Args...)>::StdFunctionAdaptor< Callable >::CallableTag}
{\xe \v testing::OnceAction< Result(Args...)>::StdFunctionAdaptor< Callable >::CallableTag}
{\bkmkstart AAAAAAACDK}
{\bkmkend AAAAAAACDK}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_nice_strict_test::CallsMockMethodInDestructor Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_nice_strict_test::CallsMockMethodInDestructor}
{\xe \v testing::gmock_nice_strict_test::CallsMockMethodInDestructor}
{\bkmkstart AAAAAAACSK}
{\bkmkend AAAAAAACSK}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (void, OnDestroy,()){\bkmkstart AAAAAAACSL}
{\bkmkend AAAAAAACSL}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-nice-strict_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::CartesianProductGenerator< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::CartesianProductGenerator< T >}
{\xe \v testing::internal::CartesianProductGenerator< T >}
{\bkmkstart AAAAAAACVW}
{\bkmkend AAAAAAACVW}
Inheritance diagram for testing::internal::CartesianProductGenerator< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_cartesian_product_generator.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::std::tuple< T... > {\b ParamType}{\bkmkstart AAAAAAACVX}
{\bkmkend AAAAAAACVX}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b CartesianProductGenerator} (const std::tuple< {\b ParamGenerator}< T >... > &g){\bkmkstart AAAAAAACVY}
{\bkmkend AAAAAAACVY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ParamIteratorInterface}< ParamType > * {\b Begin} () const override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ParamIteratorInterface}< ParamType > * {\b End} () const override\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v Begin\:testing::internal::CartesianProductGenerator< T >}
{\xe \v testing::internal::CartesianProductGenerator< T >\:Begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename... T> {\b ParamIteratorInterface}< ParamType > * {\b testing::internal::CartesianProductGenerator}< T >::Begin () const{\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACVZ}
{\bkmkend AAAAAAACVZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::internal::ParamGeneratorInterface<::std::tuple< T... > >} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACWA \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v End\:testing::internal::CartesianProductGenerator< T >}
{\xe \v testing::internal::CartesianProductGenerator< T >\:End}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename... T> {\b ParamIteratorInterface}< ParamType > * {\b testing::internal::CartesianProductGenerator}< T >::End () const{\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACWB}
{\bkmkend AAAAAAACWB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::internal::ParamGeneratorInterface<::std::tuple< T... > >} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACWA \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-param-util.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::CartesianProductHolder< Gen > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::CartesianProductHolder< Gen >}
{\xe \v testing::internal::CartesianProductHolder< Gen >}
{\bkmkstart AAAAAAACWC}
{\bkmkend AAAAAAACWC}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b CartesianProductHolder} (const Gen &... g){\bkmkstart AAAAAAACWD}
{\bkmkend AAAAAAACWD}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename... T> {\b operator ParamGenerator<::std::tuple< T... > >} () const{\bkmkstart AAAAAAACWE}
{\bkmkend AAAAAAACWE}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-param-util.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Castable Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Castable}
{\xe \v testing::internal::Castable}
{\bkmkstart AAAAAAACWF}
{\bkmkend AAAAAAACWF}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Castable} (bool *converted){\bkmkstart AAAAAAACWG}
{\bkmkend AAAAAAACWG}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b operator Base} (){\bkmkstart AAAAAAACWH}
{\bkmkend AAAAAAACWH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-port-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
googletest-catch-exceptions-test.CatchCxxExceptionsTest Class Reference\par \pard\plain 
{\tc\tcl2 \v googletest-catch-exceptions-test.CatchCxxExceptionsTest}
{\xe \v googletest-catch-exceptions-test.CatchCxxExceptionsTest}
{\bkmkstart AAAAAAABRZ}
{\bkmkend AAAAAAABRZ}
Inheritance diagram for googletest-catch-exceptions-test.CatchCxxExceptionsTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgoogletest-catch-exceptions-test_1_1_catch_cxx_exceptions_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testCatchesCxxExceptionsInFixtureConstructor} (self){\bkmkstart AAAAAAABSA}
{\bkmkend AAAAAAABSA}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testCatchesCxxExceptionsInFixtureDestructor} (self){\bkmkstart AAAAAAABSB}
{\bkmkend AAAAAAABSB}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testCatchesCxxExceptionsInSetUpTestCase} (self){\bkmkstart AAAAAAABSC}
{\bkmkend AAAAAAABSC}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testCatchesCxxExceptionsInTearDownTestCase} (self){\bkmkstart AAAAAAABSD}
{\bkmkend AAAAAAABSD}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testCatchesCxxExceptionsInSetUp} (self){\bkmkstart AAAAAAABSE}
{\bkmkend AAAAAAABSE}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testCatchesCxxExceptionsInTearDown} (self){\bkmkstart AAAAAAABSF}
{\bkmkend AAAAAAABSF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testCatchesCxxExceptionsInTestBody} (self){\bkmkstart AAAAAAABSG}
{\bkmkend AAAAAAABSG}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testCatchesNonStdCxxExceptions} (self){\bkmkstart AAAAAAABSH}
{\bkmkend AAAAAAABSH}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testUnhandledCxxExceptionsAbortTheProgram} (self){\bkmkstart AAAAAAABSI}
{\bkmkend AAAAAAABSI}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests C++ exception-catching behavior.\par
\par
   Tests in this test case verify that:\par
   * C++ exceptions are caught and logged as C++ (not SEH) exceptions\par
   * Exception thrown affect the remainder of the test work flow in the\par
     expected manner.\par
}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-catch-exceptions-test.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
googletest-catch-exceptions-test.CatchSehExceptionsTest Class Reference\par \pard\plain 
{\tc\tcl2 \v googletest-catch-exceptions-test.CatchSehExceptionsTest}
{\xe \v googletest-catch-exceptions-test.CatchSehExceptionsTest}
{\bkmkstart AAAAAAABSJ}
{\bkmkend AAAAAAABSJ}
Inheritance diagram for googletest-catch-exceptions-test.CatchSehExceptionsTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgoogletest-catch-exceptions-test_1_1_catch_seh_exceptions_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b TestSehExceptions} (self, test_output){\bkmkstart AAAAAAABSK}
{\bkmkend AAAAAAABSK}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testCatchesSehExceptionsWithCxxExceptionsEnabled} (self){\bkmkstart AAAAAAABSL}
{\bkmkend AAAAAAABSL}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testCatchesSehExceptionsWithCxxExceptionsDisabled} (self){\bkmkstart AAAAAAABSM}
{\bkmkend AAAAAAABSM}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests exception-catching behavior.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-catch-exceptions-test.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ChildClassWithoutStreamOperator Class Reference\par \pard\plain 
{\tc\tcl2 \v ChildClassWithoutStreamOperator}
{\xe \v ChildClassWithoutStreamOperator}
{\bkmkstart AAAAAAAAXT}
{\bkmkend AAAAAAAAXT}
Inheritance diagram for ChildClassWithoutStreamOperator:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_child_class_without_stream_operator.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-printers-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ChildClassWithStreamOperator Class Reference\par \pard\plain 
{\tc\tcl2 \v ChildClassWithStreamOperator}
{\xe \v ChildClassWithStreamOperator}
{\bkmkstart AAAAAAAAXU}
{\bkmkend AAAAAAAAXU}
Inheritance diagram for ChildClassWithStreamOperator:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_child_class_with_stream_operator.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-printers-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Clock Class Reference\par \pard\plain 
{\tc\tcl2 \v Clock}
{\xe \v Clock}
{\bkmkstart AAAAAAAAXV}
{\bkmkend AAAAAAAAXV}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b clock_start} (){\bkmkstart AAAAAAAAXW}
{\bkmkend AAAAAAAAXW}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b clock_end} (){\bkmkstart AAAAAAAAXX}
{\bkmkend AAAAAAAAXX}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b Set_Time} (float time){\bkmkstart AAAAAAAAXY}
{\bkmkend AAAAAAAAXY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b Set_Addition} (float addition){\bkmkstart AAAAAAAAXZ}
{\bkmkend AAAAAAAAXZ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b add} (){\bkmkstart AAAAAAAAYA}
{\bkmkend AAAAAAAAYA}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

float {\b Get_Time} () const{\bkmkstart AAAAAAAAYB}
{\bkmkend AAAAAAAAYB}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
game.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::CodeLocation Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::CodeLocation}
{\xe \v testing::internal::CodeLocation}
{\bkmkstart AAAAAAACWI}
{\bkmkend AAAAAAACWI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b CodeLocation} (const std::string &a_file, int a_line){\bkmkstart AAAAAAACWJ}
{\bkmkend AAAAAAACWJ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::string {\b file}{\bkmkstart AAAAAAACWK}
{\bkmkend AAAAAAACWK}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b line}{\bkmkstart AAAAAAACWL}
{\bkmkend AAAAAAACWL}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::CodeLocationForTESTF Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::CodeLocationForTESTF}
{\xe \v testing::CodeLocationForTESTF}
{\bkmkstart AAAAAAABZM}
{\bkmkend AAAAAAABZM}
Inheritance diagram for testing::CodeLocationForTESTF:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_code_location_for_t_e_s_t_f.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::CodeLocationForTESTP Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::CodeLocationForTESTP}
{\xe \v testing::CodeLocationForTESTP}
{\bkmkstart AAAAAAABZN}
{\bkmkend AAAAAAABZN}
Inheritance diagram for testing::CodeLocationForTESTP:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_code_location_for_t_e_s_t_p.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::CodeLocationForTYPEDTEST< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::CodeLocationForTYPEDTEST< T >}
{\xe \v testing::CodeLocationForTYPEDTEST< T >}
{\bkmkstart AAAAAAABZO}
{\bkmkend AAAAAAABZO}
Inheritance diagram for testing::CodeLocationForTYPEDTEST< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_code_location_for_t_y_p_e_d_t_e_s_t.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::CodeLocationForTYPEDTESTP< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::CodeLocationForTYPEDTESTP< T >}
{\xe \v testing::CodeLocationForTYPEDTESTP< T >}
{\bkmkstart AAAAAAABZP}
{\bkmkend AAAAAAABZP}
Inheritance diagram for testing::CodeLocationForTYPEDTESTP< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_code_location_for_t_y_p_e_d_t_e_s_t_p.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CommentTest Class Reference\par \pard\plain 
{\tc\tcl2 \v CommentTest}
{\xe \v CommentTest}
{\bkmkstart AAAAAAAAYC}
{\bkmkend AAAAAAAAYC}
Inheritance diagram for CommentTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_comment_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CommonTest< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v CommonTest< T >}
{\xe \v CommonTest< T >}
{\bkmkstart AAAAAAAAYD}
{\bkmkend AAAAAAAAYD}
Inheritance diagram for CommonTest< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_common_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b SetUpTestSuite} (){\bkmkstart AAAAAAAAYE}
{\bkmkend AAAAAAAAYE}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b TearDownTestSuite} (){\bkmkstart AAAAAAAAYF}
{\bkmkend AAAAAAAAYF}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef std::vector< T > {\b Vector}{\bkmkstart AAAAAAAAYG}
{\bkmkend AAAAAAAAYG}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef std::set< int > {\b IntSet}{\bkmkstart AAAAAAAAYH}
{\bkmkend AAAAAAAAYH}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SetUp} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b TearDown} () override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T {\b value_}{\bkmkstart AAAAAAAAYI}
{\bkmkend AAAAAAAAYI}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static T * {\b shared_} = nullptr{\bkmkstart AAAAAAAAYJ}
{\bkmkend AAAAAAAAYJ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v SetUp\:CommonTest< T >}
{\xe \v CommonTest< T >\:SetUp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > void {\b CommonTest}< T >::SetUp (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAYK}
{\bkmkend AAAAAAAAYK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v TearDown\:CommonTest< T >}
{\xe \v CommonTest< T >\:TearDown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > void {\b CommonTest}< T >::TearDown (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAYM}
{\bkmkend AAAAAAAAYM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest-typed-test_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::conjunction<... > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::conjunction<... >}
{\xe \v testing::internal::conjunction<... >}
{\bkmkstart AAAAAAACWM}
{\bkmkend AAAAAAACWM}
Inheritance diagram for testing::internal::conjunction<... >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1conjunction.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::conjunction< P1 > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::conjunction< P1 >}
{\xe \v testing::internal::conjunction< P1 >}
{\bkmkstart AAAAAAACWN}
{\bkmkend AAAAAAACWN}
Inheritance diagram for testing::internal::conjunction< P1 >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1conjunction_3_01_p1_01_4.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::conjunction< P1, Ps... > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::conjunction< P1, Ps... >}
{\xe \v testing::internal::conjunction< P1, Ps... >}
{\bkmkstart AAAAAAACWO}
{\bkmkend AAAAAAACWO}
Inheritance diagram for testing::internal::conjunction< P1, Ps... >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1conjunction_3_01_p1_00_01_ps_8_8_8_01_4.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ConstOnlyContainerWithClassIterator::const_iterator Struct Reference\par \pard\plain 
{\tc\tcl2 \v ConstOnlyContainerWithClassIterator::const_iterator}
{\xe \v ConstOnlyContainerWithClassIterator::const_iterator}
{\bkmkstart AAAAAAAAYQ}
{\bkmkend AAAAAAAAYQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const int & {\b operator*} () const{\bkmkstart AAAAAAAAYR}
{\bkmkend AAAAAAAAYR}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b const_iterator} & {\b operator++} (){\bkmkstart AAAAAAAAYS}
{\bkmkend AAAAAAAAYS}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gtest_printers_test::const_iterator Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gtest_printers_test::const_iterator}
{\xe \v testing::gtest_printers_test::const_iterator}
{\bkmkstart AAAAAAACTP}
{\bkmkend AAAAAAACTP}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

char {\b x}{\bkmkstart AAAAAAACTQ}
{\bkmkend AAAAAAACTQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-printers-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ConstAndNonConstCastable Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ConstAndNonConstCastable}
{\xe \v testing::internal::ConstAndNonConstCastable}
{\bkmkstart AAAAAAACWP}
{\bkmkend AAAAAAACWP}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ConstAndNonConstCastable} (bool *converted, bool *const_converted){\bkmkstart AAAAAAACWQ}
{\bkmkend AAAAAAACWQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b operator Base} (){\bkmkstart AAAAAAACWR}
{\bkmkend AAAAAAACWR}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b operator Base} () const{\bkmkstart AAAAAAACWS}
{\bkmkend AAAAAAACWS}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-port-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ConstCastable Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ConstCastable}
{\xe \v testing::internal::ConstCastable}
{\bkmkstart AAAAAAACWT}
{\bkmkend AAAAAAACWT}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ConstCastable} (bool *converted){\bkmkstart AAAAAAACWU}
{\bkmkend AAAAAAACWU}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b operator Base} () const{\bkmkstart AAAAAAACWV}
{\bkmkend AAAAAAACWV}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-port-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ConstCharPtr Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ConstCharPtr}
{\xe \v testing::internal::ConstCharPtr}
{\bkmkstart AAAAAAACWW}
{\bkmkend AAAAAAACWW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ConstCharPtr} (const char *str){\bkmkstart AAAAAAACWX}
{\bkmkend AAAAAAACWX}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b operator bool} () const{\bkmkstart AAAAAAACWY}
{\bkmkend AAAAAAACWY}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b value}{\bkmkstart AAAAAAACWZ}
{\bkmkend AAAAAAACWZ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ConstOnlyContainerWithClassIterator Struct Reference\par \pard\plain 
{\tc\tcl2 \v ConstOnlyContainerWithClassIterator}
{\xe \v ConstOnlyContainerWithClassIterator}
{\bkmkstart AAAAAAAAYN}
{\bkmkend AAAAAAAAYN}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b const_iterator}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b const_iterator} {\b begin} () const{\bkmkstart AAAAAAAAYO}
{\bkmkend AAAAAAAAYO}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b const_iterator} {\b end} () const{\bkmkstart AAAAAAAAYP}
{\bkmkend AAAAAAAAYP}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ConstOnlyContainerWithPointerIterator Struct Reference\par \pard\plain 
{\tc\tcl2 \v ConstOnlyContainerWithPointerIterator}
{\xe \v ConstOnlyContainerWithPointerIterator}
{\bkmkstart AAAAAAAAYT}
{\bkmkend AAAAAAAAYT}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b const_iterator} = int *{\bkmkstart AAAAAAAAYU}
{\bkmkend AAAAAAAAYU}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const_iterator {\b begin} () const{\bkmkstart AAAAAAAAYV}
{\bkmkend AAAAAAAAYV}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const_iterator {\b end} () const{\bkmkstart AAAAAAAAYW}
{\bkmkend AAAAAAAAYW}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ConstRef< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ConstRef< T >}
{\xe \v testing::internal::ConstRef< T >}
{\bkmkstart AAAAAAACXA}
{\bkmkend AAAAAAACXA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef const T & {\b type}{\bkmkstart AAAAAAACXB}
{\bkmkend AAAAAAACXB}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-port.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ConstRef< T & > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ConstRef< T & >}
{\xe \v testing::internal::ConstRef< T & >}
{\bkmkstart AAAAAAACXC}
{\bkmkend AAAAAAACXC}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T & {\b type}{\bkmkstart AAAAAAACXD}
{\bkmkend AAAAAAACXD}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-port.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ConstructFromT< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v ConstructFromT< T >}
{\xe \v ConstructFromT< T >}
{\bkmkstart AAAAAAAAYX}
{\bkmkend AAAAAAAAYX}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ConstructFromT} (const T &t){\bkmkstart AAAAAAAAYY}
{\bkmkend AAAAAAAAYY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename... Args, typename std::enable_if< sizeof...(Args) !=1, int >::type  = 0> {\b ConstructFromT} (Args &&... args){\bkmkstart AAAAAAAAYZ}
{\bkmkend AAAAAAAAYZ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b operator==} (const {\b ConstructFromT} &other) const{\bkmkstart AAAAAAAAZA}
{\bkmkend AAAAAAAAZA}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const T & {\b get} () const{\bkmkstart AAAAAAAAZB}
{\bkmkend AAAAAAAAZB}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ConstructionCounting Struct Reference\par \pard\plain 
{\tc\tcl2 \v ConstructionCounting}
{\xe \v ConstructionCounting}
{\bkmkstart AAAAAAAAZC}
{\bkmkend AAAAAAAAZC}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ConstructionCounting} (const {\b ConstructionCounting} &){\bkmkstart AAAAAAAAZD}
{\bkmkend AAAAAAAAZD}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ConstructionCounting} ({\b ConstructionCounting} &&) noexcept{\bkmkstart AAAAAAAAZE}
{\bkmkend AAAAAAAAZE}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ConstructionCounting} & {\b operator=} (const {\b ConstructionCounting} &){\bkmkstart AAAAAAAAZF}
{\bkmkend AAAAAAAAZF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ConstructionCounting} & {\b operator=} ({\b ConstructionCounting} &&) noexcept{\bkmkstart AAAAAAAAZG}
{\bkmkend AAAAAAAAZG}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b Reset} (){\bkmkstart AAAAAAAAZH}
{\bkmkend AAAAAAAAZH}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b default_ctor_calls} = 0{\bkmkstart AAAAAAAAZI}
{\bkmkend AAAAAAAAZI}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b dtor_calls} = 0{\bkmkstart AAAAAAAAZJ}
{\bkmkend AAAAAAAAZJ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b copy_ctor_calls} = 0{\bkmkstart AAAAAAAAZK}
{\bkmkend AAAAAAAAZK}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b move_ctor_calls} = 0{\bkmkstart AAAAAAAAZL}
{\bkmkend AAAAAAAAZL}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b copy_assignment_calls} = 0{\bkmkstart AAAAAAAAZM}
{\bkmkend AAAAAAAAZM}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b move_assignment_calls} = 0{\bkmkstart AAAAAAAAZN}
{\bkmkend AAAAAAAAZN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::ContainerHelper Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::ContainerHelper}
{\xe \v testing::gmock_matchers_test::ContainerHelper}
{\bkmkstart AAAAAAACQR}
{\bkmkend AAAAAAACQR}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (Call, void(std::vector< std::unique_ptr< int > >)){\bkmkstart AAAAAAACQS}
{\bkmkend AAAAAAACQS}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-matchers_test.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ContainerPrinter Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ContainerPrinter}
{\xe \v testing::internal::ContainerPrinter}
{\bkmkstart AAAAAAACXE}
{\bkmkend AAAAAAACXE}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T , typename  = typename std::enable_if<                (sizeof(IsContainerTest<T>(0)) == sizeof(IsContainer)) &&                !IsRecursiveContainer<T>::value>::type> static void {\b PrintValue} (const T &container, std::ostream *os){\bkmkstart AAAAAAACXF}
{\bkmkend AAAAAAACXF}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ContainerTest< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v ContainerTest< T >}
{\xe \v ContainerTest< T >}
{\bkmkstart AAAAAAAAZO}
{\bkmkend AAAAAAAAZO}
Inheritance diagram for ContainerTest< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_container_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest-typed-test_test.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ConversionHelperBase Class Reference\par \pard\plain 
{\tc\tcl2 \v ConversionHelperBase}
{\xe \v ConversionHelperBase}
{\bkmkstart AAAAAAAAZP}
{\bkmkend AAAAAAAAZP}
Inheritance diagram for ConversionHelperBase:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_conversion_helper_base.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ConversionHelperDerived Class Reference\par \pard\plain 
{\tc\tcl2 \v ConversionHelperDerived}
{\xe \v ConversionHelperDerived}
{\bkmkstart AAAAAAAAZQ}
{\bkmkend AAAAAAAAZQ}
Inheritance diagram for ConversionHelperDerived:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_conversion_helper_derived.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ConvertibleToAssertionResult Struct Reference\par \pard\plain 
{\tc\tcl2 \v ConvertibleToAssertionResult}
{\xe \v ConvertibleToAssertionResult}
{\bkmkstart AAAAAAAAZR}
{\bkmkend AAAAAAAAZR}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b operator AssertionResult} () const{\bkmkstart AAAAAAAAZS}
{\bkmkend AAAAAAAAZS}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ConvertibleToIntegerPrinter Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ConvertibleToIntegerPrinter}
{\xe \v testing::internal::ConvertibleToIntegerPrinter}
{\bkmkstart AAAAAAACXG}
{\bkmkend AAAAAAACXG}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b PrintValue} (internal::BiggestInt value, ::std::ostream *os){\bkmkstart AAAAAAACXH}
{\bkmkend AAAAAAACXH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ConvertibleToStringViewPrinter Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ConvertibleToStringViewPrinter}
{\xe \v testing::internal::ConvertibleToStringViewPrinter}
{\bkmkstart AAAAAAACXI}
{\bkmkend AAAAAAACXI}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Counter Class Reference\par \pard\plain 
{\tc\tcl2 \v Counter}
{\xe \v Counter}
{\bkmkstart AAAAAAAAZT}
{\bkmkend AAAAAAAAZT}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b Increment} (){\bkmkstart AAAAAAAAZU}
{\bkmkend AAAAAAAAZU}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b Decrement} (){\bkmkstart AAAAAAAAZV}
{\bkmkend AAAAAAAAZV}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b Print} () const{\bkmkstart AAAAAAAAZW}
{\bkmkend AAAAAAAAZW}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/samples/sample4.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/samples/sample4.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::CurrentTestInfoTest Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::CurrentTestInfoTest}
{\xe \v testing::CurrentTestInfoTest}
{\bkmkstart AAAAAAABZQ}
{\bkmkend AAAAAAABZQ}
Inheritance diagram for testing::CurrentTestInfoTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_current_test_info_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b SetUpTestSuite} (){\bkmkstart AAAAAAABZR}
{\bkmkend AAAAAAABZR}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b TearDownTestSuite} (){\bkmkstart AAAAAAABZS}
{\bkmkend AAAAAAABZS}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CustomFunctionNamingTest Class Reference\par \pard\plain 
{\tc\tcl2 \v CustomFunctionNamingTest}
{\xe \v CustomFunctionNamingTest}
{\bkmkstart AAAAAAAAZX}
{\bkmkend AAAAAAAAZX}
Inheritance diagram for CustomFunctionNamingTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_custom_function_naming_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CustomFunctorNamingTest Class Reference\par \pard\plain 
{\tc\tcl2 \v CustomFunctorNamingTest}
{\xe \v CustomFunctorNamingTest}
{\bkmkstart AAAAAAAAZY}
{\bkmkend AAAAAAAAZY}
Inheritance diagram for CustomFunctorNamingTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_custom_functor_naming_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CustomIntegerNamingTest Class Reference\par \pard\plain 
{\tc\tcl2 \v CustomIntegerNamingTest}
{\xe \v CustomIntegerNamingTest}
{\bkmkstart AAAAAAAAZZ}
{\bkmkend AAAAAAAAZZ}
Inheritance diagram for CustomIntegerNamingTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_custom_integer_naming_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CustomLambdaNamingTest Class Reference\par \pard\plain 
{\tc\tcl2 \v CustomLambdaNamingTest}
{\xe \v CustomLambdaNamingTest}
{\bkmkstart AAAAAAABAA}
{\bkmkend AAAAAAABAA}
Inheritance diagram for CustomLambdaNamingTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_custom_lambda_naming_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CustomParamNameFunctor Struct Reference\par \pard\plain 
{\tc\tcl2 \v CustomParamNameFunctor}
{\xe \v CustomParamNameFunctor}
{\bkmkstart AAAAAAABAB}
{\bkmkend AAAAAAABAB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::string {\b operator()} (const {\b ::testing::TestParamInfo}< std::string > &inf){\bkmkstart AAAAAAABAC}
{\bkmkend AAAAAAABAC}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CustomStruct Struct Reference\par \pard\plain 
{\tc\tcl2 \v CustomStruct}
{\xe \v CustomStruct}
{\bkmkstart AAAAAAABAD}
{\bkmkend AAAAAAABAD}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b CustomStruct} (int value){\bkmkstart AAAAAAABAE}
{\bkmkend AAAAAAABAE}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b x}{\bkmkstart AAAAAAABAF}
{\bkmkend AAAAAAABAF}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CustomStructNamingTest Class Reference\par \pard\plain 
{\tc\tcl2 \v CustomStructNamingTest}
{\xe \v CustomStructNamingTest}
{\bkmkstart AAAAAAABAG}
{\bkmkend AAAAAAABAG}
Inheritance diagram for CustomStructNamingTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_custom_struct_naming_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::DefaultGlobalTestPartResultReporter Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::DefaultGlobalTestPartResultReporter}
{\xe \v testing::internal::DefaultGlobalTestPartResultReporter}
{\bkmkstart AAAAAAACXJ}
{\bkmkend AAAAAAACXJ}
Inheritance diagram for testing::internal::DefaultGlobalTestPartResultReporter:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_default_global_test_part_result_reporter.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b DefaultGlobalTestPartResultReporter} ({\b UnitTestImpl} *unit_test){\bkmkstart AAAAAAACXK}
{\bkmkend AAAAAAACXK}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b ReportTestPartResult} (const TestPartResult &result) override{\bkmkstart AAAAAAACXL}
{\bkmkend AAAAAAACXL}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest-internal-inl.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::DefaultNameGenerator Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::DefaultNameGenerator}
{\xe \v testing::internal::DefaultNameGenerator}
{\bkmkstart AAAAAAACXM}
{\bkmkend AAAAAAACXM}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > static std::string {\b GetName} (int i){\bkmkstart AAAAAAACXN}
{\bkmkend AAAAAAACXN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::DefaultPerThreadTestPartResultReporter Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::DefaultPerThreadTestPartResultReporter}
{\xe \v testing::internal::DefaultPerThreadTestPartResultReporter}
{\bkmkstart AAAAAAACXO}
{\bkmkend AAAAAAACXO}
Inheritance diagram for testing::internal::DefaultPerThreadTestPartResultReporter:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_default_per_thread_test_part_result_reporter.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b DefaultPerThreadTestPartResultReporter} ({\b UnitTestImpl} *unit_test){\bkmkstart AAAAAAACXP}
{\bkmkend AAAAAAACXP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b ReportTestPartResult} (const TestPartResult &result) override{\bkmkstart AAAAAAACXQ}
{\bkmkend AAAAAAACXQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest-internal-inl.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::DefaultValue< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::DefaultValue< T >}
{\xe \v testing::DefaultValue< T >}
{\bkmkstart AAAAAAABZT}
{\bkmkend AAAAAAABZT}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T(* {\b FactoryFunction}) (){\bkmkstart AAAAAAABZU}
{\bkmkend AAAAAAABZU}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b Set} (T x){\bkmkstart AAAAAAABZV}
{\bkmkend AAAAAAABZV}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b SetFactory} (FactoryFunction factory){\bkmkstart AAAAAAABZW}
{\bkmkend AAAAAAABZW}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b Clear} (){\bkmkstart AAAAAAABZX}
{\bkmkend AAAAAAABZX}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b IsSet} (){\bkmkstart AAAAAAABZY}
{\bkmkend AAAAAAABZY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b Exists} (){\bkmkstart AAAAAAABZZ}
{\bkmkend AAAAAAABZZ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static T {\b Get} (){\bkmkstart AAAAAAACAA}
{\bkmkend AAAAAAACAA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::DefaultValue< T & > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::DefaultValue< T & >}
{\xe \v testing::DefaultValue< T & >}
{\bkmkstart AAAAAAACAB}
{\bkmkend AAAAAAACAB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b Set} (T &x){\bkmkstart AAAAAAACAC}
{\bkmkend AAAAAAACAC}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b Clear} (){\bkmkstart AAAAAAACAD}
{\bkmkend AAAAAAACAD}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b IsSet} (){\bkmkstart AAAAAAACAE}
{\bkmkend AAAAAAACAE}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b Exists} (){\bkmkstart AAAAAAACAF}
{\bkmkend AAAAAAACAF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static T & {\b Get} (){\bkmkstart AAAAAAACAG}
{\bkmkend AAAAAAACAG}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::DefaultValue< void > Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::DefaultValue< void >}
{\xe \v testing::DefaultValue< void >}
{\bkmkstart AAAAAAACAH}
{\bkmkend AAAAAAACAH}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b Exists} (){\bkmkstart AAAAAAACAI}
{\bkmkend AAAAAAACAI}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b Get} (){\bkmkstart AAAAAAACAJ}
{\bkmkend AAAAAAACAJ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::DeleteArgAction< k > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::DeleteArgAction< k >}
{\xe \v testing::internal::DeleteArgAction< k >}
{\bkmkstart AAAAAAACXR}
{\bkmkend AAAAAAACXR}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename... Args> void {\b operator()} (const Args &... args) const{\bkmkstart AAAAAAACXS}
{\bkmkend AAAAAAACXS}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_more_actions_test::DeletionTester Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_more_actions_test::DeletionTester}
{\xe \v testing::gmock_more_actions_test::DeletionTester}
{\bkmkstart AAAAAAACRJ}
{\bkmkend AAAAAAACRJ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b DeletionTester} (bool *is_deleted){\bkmkstart AAAAAAACRK}
{\bkmkend AAAAAAACRK}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-more-actions_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Derived Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Derived}
{\xe \v testing::internal::Derived}
{\bkmkstart AAAAAAACXT}
{\bkmkend AAAAAAACXT}
\par
{
Inherits testing::internal::Base, and testing::internal::Base.}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Derived} (int n){\bkmkstart AAAAAAACXU}
{\bkmkend AAAAAAACXU}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-port-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
DerivedTest< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v DerivedTest< T >}
{\xe \v DerivedTest< T >}
{\bkmkstart AAAAAAABAH}
{\bkmkend AAAAAAABAH}
Inheritance diagram for DerivedTest< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_derived_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest-typed-test_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
DetectNotInstantiatedTest Class Reference\par \pard\plain 
{\tc\tcl2 \v DetectNotInstantiatedTest}
{\xe \v DetectNotInstantiatedTest}
{\bkmkstart AAAAAAABAI}
{\bkmkend AAAAAAABAI}
Inheritance diagram for DetectNotInstantiatedTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_detect_not_instantiated_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-output-test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
DetectNotInstantiatedTypesTest< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v DetectNotInstantiatedTypesTest< T >}
{\xe \v DetectNotInstantiatedTypesTest< T >}
{\bkmkstart AAAAAAABAJ}
{\bkmkend AAAAAAABAJ}
Inheritance diagram for DetectNotInstantiatedTypesTest< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_detect_not_instantiated_types_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-output-test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
DisabledTest Class Reference\par \pard\plain 
{\tc\tcl2 \v DisabledTest}
{\xe \v DisabledTest}
{\bkmkstart AAAAAAABAK}
{\bkmkend AAAAAAABAK}
Inheritance diagram for DisabledTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_disabled_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_xml_output_unittest_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::disjunction<... > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::disjunction<... >}
{\xe \v testing::internal::disjunction<... >}
{\bkmkstart AAAAAAACXV}
{\bkmkend AAAAAAACXV}
Inheritance diagram for testing::internal::disjunction<... >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1disjunction.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::disjunction< P1 > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::disjunction< P1 >}
{\xe \v testing::internal::disjunction< P1 >}
{\bkmkstart AAAAAAACXW}
{\bkmkend AAAAAAACXW}
Inheritance diagram for testing::internal::disjunction< P1 >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1disjunction_3_01_p1_01_4.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::disjunction< P1, Ps... > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::disjunction< P1, Ps... >}
{\xe \v testing::internal::disjunction< P1, Ps... >}
{\bkmkstart AAAAAAACXX}
{\bkmkend AAAAAAACXX}
Inheritance diagram for testing::internal::disjunction< P1, Ps... >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1disjunction_3_01_p1_00_01_ps_8_8_8_01_4.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::DoAllAction< Actions > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::DoAllAction< Actions >}
{\xe \v testing::internal::DoAllAction< Actions >}
{\bkmkstart AAAAAAACXY}
{\bkmkend AAAAAAACXY}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::DoAllAction< FinalAction > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::DoAllAction< FinalAction >}
{\xe \v testing::internal::DoAllAction< FinalAction >}
{\bkmkstart AAAAAAACXZ}
{\bkmkend AAAAAAACXZ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b UserConstructorTag}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > {\b DoAllAction} (UserConstructorTag, T &&action){\bkmkstart AAAAAAACYA}
{\bkmkend AAAAAAACYA}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename R , typename... Args, typename std::enable_if< std::is_convertible< FinalAction, {\b OnceAction}< R(Args...)> >::value, int >::type  = 0> {\b operator OnceAction< R} (Args...)>() &&{\bkmkstart AAAAAAACYB}
{\bkmkend AAAAAAACYB}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename R , typename... Args, typename std::enable_if< std::is_convertible< const FinalAction &, {\b Action}< R(Args...)> >::value, int >::type  = 0> {\b operator Action< R} (Args...)>() const{\bkmkstart AAAAAAACYC}
{\bkmkend AAAAAAACYC}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::DoAllAction< InitialAction, OtherActions... > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::DoAllAction< InitialAction, OtherActions... >}
{\xe \v testing::internal::DoAllAction< InitialAction, OtherActions... >}
{\bkmkstart AAAAAAACYE}
{\bkmkend AAAAAAACYE}
Inheritance diagram for testing::internal::DoAllAction< InitialAction, OtherActions... >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_do_all_action_3_01_initial_action_00_01_other_actions_8_8_8_01_4.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b UserConstructorTag}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T , typename... U> {\b DoAllAction} (UserConstructorTag, T &&initial_action, U &&... other_actions){\bkmkstart AAAAAAACYF}
{\bkmkend AAAAAAACYF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename R , typename... Args, typename std::enable_if< {\b conjunction}< std::is_convertible< InitialAction, {\b OnceAction}< void(InitialActionArgType< Args >...)> >, std::is_convertible< {\b Base}, {\b OnceAction}< R(Args...)> > >::value , int , ::type  = 0> {\b operator OnceAction< R} (Args...)>() &&{\bkmkstart AAAAAAACYG}
{\bkmkend AAAAAAACYG}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename R , typename... Args, typename std::enable_if< {\b conjunction}< std::is_convertible< const InitialAction &, {\b Action}< void(InitialActionArgType< Args >...)> >, std::is_convertible< const {\b Base} &, {\b Action}< R(Args...)> > >::value , int , ::type  = 0> {\b operator Action< R} (Args...)>() const{\bkmkstart AAAAAAACYH}
{\bkmkend AAAAAAACYH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::DoDefaultAction Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::DoDefaultAction}
{\xe \v testing::internal::DoDefaultAction}
{\bkmkstart AAAAAAACYJ}
{\bkmkend AAAAAAACYJ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename F > {\b operator Action< F >} () const{\bkmkstart AAAAAAACYK}
{\bkmkend AAAAAAACYK}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
DogAdder Class Reference\par \pard\plain 
{\tc\tcl2 \v DogAdder}
{\xe \v DogAdder}
{\bkmkstart AAAAAAABAL}
{\bkmkend AAAAAAABAL}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b DogAdder} (const char *a_value){\bkmkstart AAAAAAABAM}
{\bkmkend AAAAAAABAM}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b DogAdder} (const {\b DogAdder} &other){\bkmkstart AAAAAAABAN}
{\bkmkend AAAAAAABAN}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b DogAdder} {\b operator=} (const {\b DogAdder} &other){\bkmkstart AAAAAAABAO}
{\bkmkend AAAAAAABAO}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b DogAdder} {\b operator+} (const {\b DogAdder} &other) const{\bkmkstart AAAAAAABAP}
{\bkmkend AAAAAAABAP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b operator<} (const {\b DogAdder} &other) const{\bkmkstart AAAAAAABAQ}
{\bkmkend AAAAAAABAQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const std::string & {\b value} () const{\bkmkstart AAAAAAABAR}
{\bkmkend AAAAAAABAR}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::DoubleSequence< plus_one, T, sizeofT > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::DoubleSequence< plus_one, T, sizeofT >}
{\xe \v testing::internal::DoubleSequence< plus_one, T, sizeofT >}
{\bkmkstart AAAAAAACYL}
{\bkmkend AAAAAAACYL}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::DoubleSequence< false, IndexSequence< I... >, sizeofT > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::DoubleSequence< false, IndexSequence< I... >, sizeofT >}
{\xe \v testing::internal::DoubleSequence< false, IndexSequence< I... >, sizeofT >}
{\bkmkstart AAAAAAACYM}
{\bkmkend AAAAAAACYM}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b type} = {\b IndexSequence}< I...,(sizeofT+I)... >{\bkmkstart AAAAAAACYN}
{\bkmkend AAAAAAACYN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::DoubleSequence< true, IndexSequence< I... >, sizeofT > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::DoubleSequence< true, IndexSequence< I... >, sizeofT >}
{\xe \v testing::internal::DoubleSequence< true, IndexSequence< I... >, sizeofT >}
{\bkmkstart AAAAAAACYO}
{\bkmkend AAAAAAACYO}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b type} = {\b IndexSequence}< I...,(sizeofT+I)..., 2 *sizeofT >{\bkmkstart AAAAAAACYP}
{\bkmkend AAAAAAACYP}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
DynamicFixture Class Reference\par \pard\plain 
{\tc\tcl2 \v DynamicFixture}
{\xe \v DynamicFixture}
{\bkmkstart AAAAAAABAS}
{\bkmkend AAAAAAABAS}
Inheritance diagram for DynamicFixture:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_dynamic_fixture.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SetUp} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b TearDown} () override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b SetUpTestSuite} (){\bkmkstart AAAAAAABAT}
{\bkmkend AAAAAAABAT}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b TearDownTestSuite} (){\bkmkstart AAAAAAABAU}
{\bkmkend AAAAAAABAU}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v SetUp\:DynamicFixture}
{\xe \v DynamicFixture\:SetUp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void DynamicFixture::SetUp (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABAV}
{\bkmkend AAAAAAABAV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v TearDown\:DynamicFixture}
{\xe \v DynamicFixture\:TearDown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void DynamicFixture::TearDown (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABAW}
{\bkmkend AAAAAAABAW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-output-test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
DynamicTest< Pass > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v DynamicTest< Pass >}
{\xe \v DynamicTest< Pass >}
{\bkmkstart AAAAAAABAX}
{\bkmkend AAAAAAABAX}
Inheritance diagram for DynamicTest< Pass >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_dynamic_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b TestBody} () override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v TestBody\:DynamicTest< Pass >}
{\xe \v DynamicTest< Pass >\:TestBody}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<bool Pass> void {\b DynamicTest}< Pass >::TestBody (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABAY}
{\bkmkend AAAAAAABAY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-output-test_.cc\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
DynamicUnitTestFixture Class Reference\par \pard\plain 
{\tc\tcl2 \v DynamicUnitTestFixture}
{\xe \v DynamicUnitTestFixture}
{\bkmkstart AAAAAAABAZ}
{\bkmkend AAAAAAABAZ}
Inheritance diagram for DynamicUnitTestFixture:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_dynamic_unit_test_fixture.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ElemFromList< N, T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ElemFromList< N, T >}
{\xe \v testing::internal::ElemFromList< N, T >}
{\bkmkstart AAAAAAACYQ}
{\bkmkend AAAAAAACYQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b type} = decltype({\b ElemFromListImpl}< typename MakeIndexSequence< N >::type >::Apply(static_cast< T(*)()>(nullptr)...)){\bkmkstart AAAAAAACYR}
{\bkmkend AAAAAAACYR}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ElemFromListImpl< typename > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ElemFromListImpl< typename >}
{\xe \v testing::internal::ElemFromListImpl< typename >}
{\bkmkstart AAAAAAACYS}
{\bkmkend AAAAAAACYS}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ElemFromListImpl< IndexSequence< I... > > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ElemFromListImpl< IndexSequence< I... > >}
{\xe \v testing::internal::ElemFromListImpl< IndexSequence< I... > >}
{\bkmkstart AAAAAAACYT}
{\bkmkend AAAAAAACYT}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename R > static R {\b Apply} ({\b Ignore}< 0 *I >..., R(*)(),...){\bkmkstart AAAAAAACYU}
{\bkmkend AAAAAAACYU}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
EmptyBasenameParamInst Class Reference\par \pard\plain 
{\tc\tcl2 \v EmptyBasenameParamInst}
{\xe \v EmptyBasenameParamInst}
{\bkmkstart AAAAAAABBA}
{\bkmkend AAAAAAABBA}
Inheritance diagram for EmptyBasenameParamInst:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_empty_basename_param_inst.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-output-test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::EmptyTestEventListener Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::EmptyTestEventListener}
{\xe \v testing::EmptyTestEventListener}
{\bkmkstart AAAAAAABMU}
{\bkmkend AAAAAAABMU}
Inheritance diagram for testing::EmptyTestEventListener:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_empty_test_event_listener.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestProgramStart} (const {\b UnitTest} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestIterationStart} (const {\b UnitTest} &, int) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnEnvironmentsSetUpStart} (const {\b UnitTest} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnEnvironmentsSetUpEnd} (const {\b UnitTest} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestSuiteStart} (const {\b TestSuite} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestCaseStart} (const {\b TestCase} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestStart} (const {\b TestInfo} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestDisabled} (const {\b TestInfo} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestPartResult} (const TestPartResult &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestEnd} (const {\b TestInfo} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestSuiteEnd} (const {\b TestSuite} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestCaseEnd} (const {\b TestCase} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnEnvironmentsTearDownStart} (const {\b UnitTest} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnEnvironmentsTearDownEnd} (const {\b UnitTest} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestIterationEnd} (const {\b UnitTest} &, int) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestProgramEnd} (const {\b UnitTest} &) override\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v OnEnvironmentsSetUpEnd\:testing::EmptyTestEventListener}
{\xe \v testing::EmptyTestEventListener\:OnEnvironmentsSetUpEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::EmptyTestEventListener::OnEnvironmentsSetUpEnd (const {\b UnitTest} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACAK}
{\bkmkend AAAAAAACAK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnEnvironmentsSetUpStart\:testing::EmptyTestEventListener}
{\xe \v testing::EmptyTestEventListener\:OnEnvironmentsSetUpStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::EmptyTestEventListener::OnEnvironmentsSetUpStart (const {\b UnitTest} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACAM}
{\bkmkend AAAAAAACAM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnEnvironmentsTearDownEnd\:testing::EmptyTestEventListener}
{\xe \v testing::EmptyTestEventListener\:OnEnvironmentsTearDownEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::EmptyTestEventListener::OnEnvironmentsTearDownEnd (const {\b UnitTest} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACAN}
{\bkmkend AAAAAAACAN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnEnvironmentsTearDownStart\:testing::EmptyTestEventListener}
{\xe \v testing::EmptyTestEventListener\:OnEnvironmentsTearDownStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::EmptyTestEventListener::OnEnvironmentsTearDownStart (const {\b UnitTest} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACAO}
{\bkmkend AAAAAAACAO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestCaseEnd\:testing::EmptyTestEventListener}
{\xe \v testing::EmptyTestEventListener\:OnTestCaseEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::EmptyTestEventListener::OnTestCaseEnd (const {\b TestCase} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACAP}
{\bkmkend AAAAAAACAP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestCaseStart\:testing::EmptyTestEventListener}
{\xe \v testing::EmptyTestEventListener\:OnTestCaseStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::EmptyTestEventListener::OnTestCaseStart (const {\b TestCase} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACAQ}
{\bkmkend AAAAAAACAQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestDisabled\:testing::EmptyTestEventListener}
{\xe \v testing::EmptyTestEventListener\:OnTestDisabled}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::EmptyTestEventListener::OnTestDisabled (const {\b TestInfo} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACAR}
{\bkmkend AAAAAAACAR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestEnd\:testing::EmptyTestEventListener}
{\xe \v testing::EmptyTestEventListener\:OnTestEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::EmptyTestEventListener::OnTestEnd (const {\b TestInfo} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACAS}
{\bkmkend AAAAAAACAS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestIterationEnd\:testing::EmptyTestEventListener}
{\xe \v testing::EmptyTestEventListener\:OnTestIterationEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::EmptyTestEventListener::OnTestIterationEnd (const {\b UnitTest} & , int ){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACAT}
{\bkmkend AAAAAAACAT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestIterationStart\:testing::EmptyTestEventListener}
{\xe \v testing::EmptyTestEventListener\:OnTestIterationStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::EmptyTestEventListener::OnTestIterationStart (const {\b UnitTest} & , int ){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACAU}
{\bkmkend AAAAAAACAU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestPartResult\:testing::EmptyTestEventListener}
{\xe \v testing::EmptyTestEventListener\:OnTestPartResult}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::EmptyTestEventListener::OnTestPartResult (const TestPartResult & ){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACAV}
{\bkmkend AAAAAAACAV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestProgramEnd\:testing::EmptyTestEventListener}
{\xe \v testing::EmptyTestEventListener\:OnTestProgramEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::EmptyTestEventListener::OnTestProgramEnd (const {\b UnitTest} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACAW}
{\bkmkend AAAAAAACAW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestProgramStart\:testing::EmptyTestEventListener}
{\xe \v testing::EmptyTestEventListener\:OnTestProgramStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::EmptyTestEventListener::OnTestProgramStart (const {\b UnitTest} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACAX}
{\bkmkend AAAAAAACAX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestStart\:testing::EmptyTestEventListener}
{\xe \v testing::EmptyTestEventListener\:OnTestStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::EmptyTestEventListener::OnTestStart (const {\b TestInfo} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACAY}
{\bkmkend AAAAAAACAY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestSuiteEnd\:testing::EmptyTestEventListener}
{\xe \v testing::EmptyTestEventListener\:OnTestSuiteEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::EmptyTestEventListener::OnTestSuiteEnd (const {\b TestSuite} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACAZ}
{\bkmkend AAAAAAACAZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestSuiteStart\:testing::EmptyTestEventListener}
{\xe \v testing::EmptyTestEventListener\:OnTestSuiteStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::EmptyTestEventListener::OnTestSuiteStart (const {\b TestSuite} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACBA}
{\bkmkend AAAAAAACBA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::Environment Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::Environment}
{\xe \v testing::Environment}
{\bkmkstart AAAAAAAAWV}
{\bkmkend AAAAAAAAWV}
Inheritance diagram for testing::Environment:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_environment.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b SetUp} (){\bkmkstart AAAAAAACBB}
{\bkmkend AAAAAAACBB}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b TearDown} (){\bkmkstart AAAAAAACBC}
{\bkmkend AAAAAAACBC}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::EnvironmentInvocationCatcher Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::EnvironmentInvocationCatcher}
{\xe \v testing::internal::EnvironmentInvocationCatcher}
{\bkmkstart AAAAAAACYV}
{\bkmkend AAAAAAACYV}
Inheritance diagram for testing::internal::EnvironmentInvocationCatcher:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_environment_invocation_catcher.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SetUp} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b TearDown} () override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v SetUp\:testing::internal::EnvironmentInvocationCatcher}
{\xe \v testing::internal::EnvironmentInvocationCatcher\:SetUp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::EnvironmentInvocationCatcher::SetUp (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACYW}
{\bkmkend AAAAAAACYW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Environment} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAWV \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v TearDown\:testing::internal::EnvironmentInvocationCatcher}
{\xe \v testing::internal::EnvironmentInvocationCatcher\:TearDown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::EnvironmentInvocationCatcher::TearDown (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACYX}
{\bkmkend AAAAAAACYX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Environment} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAWV \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-listener-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::EqHelper Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::EqHelper}
{\xe \v testing::internal::EqHelper}
{\bkmkstart AAAAAAACYY}
{\bkmkend AAAAAAACYY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T1 , typename T2 , typename std::enable_if<!std::is_integral< T1 >::value||!std::is_pointer< T2 >::value >::type *  = nullptr> static AssertionResult {\b Compare} (const char *lhs_expression, const char *rhs_expression, const T1 &lhs, const T2 &rhs){\bkmkstart AAAAAAACYZ}
{\bkmkend AAAAAAACYZ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static AssertionResult {\b Compare} (const char *lhs_expression, const char *rhs_expression, BiggestInt lhs, BiggestInt rhs){\bkmkstart AAAAAAACZA}
{\bkmkend AAAAAAACZA}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > static AssertionResult {\b Compare} (const char *lhs_expression, const char *rhs_expression, std::nullptr_t, T *rhs){\bkmkstart AAAAAAACZB}
{\bkmkend AAAAAAACZB}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::EventRecordingListener Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::EventRecordingListener}
{\xe \v testing::internal::EventRecordingListener}
{\bkmkstart AAAAAAACZC}
{\bkmkend AAAAAAACZC}
Inheritance diagram for testing::internal::EventRecordingListener:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_event_recording_listener.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b EventRecordingListener} (const char *name){\bkmkstart AAAAAAACZD}
{\bkmkend AAAAAAACZD}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestProgramStart} (const {\b UnitTest} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestIterationStart} (const {\b UnitTest} &, int iteration) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnEnvironmentsSetUpStart} (const {\b UnitTest} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnEnvironmentsSetUpEnd} (const {\b UnitTest} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestCaseStart} (const {\b TestCase} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestStart} (const {\b TestInfo} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestPartResult} (const TestPartResult &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestEnd} (const {\b TestInfo} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestCaseEnd} (const {\b TestCase} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnEnvironmentsTearDownStart} (const {\b UnitTest} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnEnvironmentsTearDownEnd} (const {\b UnitTest} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestIterationEnd} (const {\b UnitTest} &, int iteration) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestProgramEnd} (const {\b UnitTest} &) override\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v OnEnvironmentsSetUpEnd\:testing::internal::EventRecordingListener}
{\xe \v testing::internal::EventRecordingListener\:OnEnvironmentsSetUpEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::EventRecordingListener::OnEnvironmentsSetUpEnd (const {\b UnitTest} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACZE}
{\bkmkend AAAAAAACZE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnEnvironmentsSetUpStart\:testing::internal::EventRecordingListener}
{\xe \v testing::internal::EventRecordingListener\:OnEnvironmentsSetUpStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::EventRecordingListener::OnEnvironmentsSetUpStart (const {\b UnitTest} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACZF}
{\bkmkend AAAAAAACZF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnEnvironmentsTearDownEnd\:testing::internal::EventRecordingListener}
{\xe \v testing::internal::EventRecordingListener\:OnEnvironmentsTearDownEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::EventRecordingListener::OnEnvironmentsTearDownEnd (const {\b UnitTest} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACZG}
{\bkmkend AAAAAAACZG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnEnvironmentsTearDownStart\:testing::internal::EventRecordingListener}
{\xe \v testing::internal::EventRecordingListener\:OnEnvironmentsTearDownStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::EventRecordingListener::OnEnvironmentsTearDownStart (const {\b UnitTest} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACZH}
{\bkmkend AAAAAAACZH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestCaseEnd\:testing::internal::EventRecordingListener}
{\xe \v testing::internal::EventRecordingListener\:OnTestCaseEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::EventRecordingListener::OnTestCaseEnd (const {\b TestCase} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACZI}
{\bkmkend AAAAAAACZI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestCaseStart\:testing::internal::EventRecordingListener}
{\xe \v testing::internal::EventRecordingListener\:OnTestCaseStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::EventRecordingListener::OnTestCaseStart (const {\b TestCase} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACZJ}
{\bkmkend AAAAAAACZJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestEnd\:testing::internal::EventRecordingListener}
{\xe \v testing::internal::EventRecordingListener\:OnTestEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::EventRecordingListener::OnTestEnd (const {\b TestInfo} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACZK}
{\bkmkend AAAAAAACZK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestIterationEnd\:testing::internal::EventRecordingListener}
{\xe \v testing::internal::EventRecordingListener\:OnTestIterationEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::EventRecordingListener::OnTestIterationEnd (const {\b UnitTest} & , int  {\i iteration}){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACZL}
{\bkmkend AAAAAAACZL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestIterationStart\:testing::internal::EventRecordingListener}
{\xe \v testing::internal::EventRecordingListener\:OnTestIterationStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::EventRecordingListener::OnTestIterationStart (const {\b UnitTest} & , int  {\i iteration}){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACZM}
{\bkmkend AAAAAAACZM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestPartResult\:testing::internal::EventRecordingListener}
{\xe \v testing::internal::EventRecordingListener\:OnTestPartResult}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::EventRecordingListener::OnTestPartResult (const TestPartResult & ){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACZN}
{\bkmkend AAAAAAACZN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestProgramEnd\:testing::internal::EventRecordingListener}
{\xe \v testing::internal::EventRecordingListener\:OnTestProgramEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::EventRecordingListener::OnTestProgramEnd (const {\b UnitTest} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACZO}
{\bkmkend AAAAAAACZO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestProgramStart\:testing::internal::EventRecordingListener}
{\xe \v testing::internal::EventRecordingListener\:OnTestProgramStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::EventRecordingListener::OnTestProgramStart (const {\b UnitTest} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACZP}
{\bkmkend AAAAAAACZP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestStart\:testing::internal::EventRecordingListener}
{\xe \v testing::internal::EventRecordingListener\:OnTestStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::EventRecordingListener::OnTestStart (const {\b TestInfo} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACZQ}
{\bkmkend AAAAAAACZQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-listener-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::EventRecordingListener2 Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::EventRecordingListener2}
{\xe \v testing::internal::EventRecordingListener2}
{\bkmkstart AAAAAAACZR}
{\bkmkend AAAAAAACZR}
Inheritance diagram for testing::internal::EventRecordingListener2:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_event_recording_listener2.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b EventRecordingListener2} (const char *name){\bkmkstart AAAAAAACZS}
{\bkmkend AAAAAAACZS}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestProgramStart} (const {\b UnitTest} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestIterationStart} (const {\b UnitTest} &, int iteration) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnEnvironmentsSetUpStart} (const {\b UnitTest} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnEnvironmentsSetUpEnd} (const {\b UnitTest} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestSuiteStart} (const {\b TestSuite} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestStart} (const {\b TestInfo} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestPartResult} (const TestPartResult &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestEnd} (const {\b TestInfo} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestSuiteEnd} (const {\b TestSuite} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnEnvironmentsTearDownStart} (const {\b UnitTest} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnEnvironmentsTearDownEnd} (const {\b UnitTest} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestIterationEnd} (const {\b UnitTest} &, int iteration) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestProgramEnd} (const {\b UnitTest} &) override\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v OnEnvironmentsSetUpEnd\:testing::internal::EventRecordingListener2}
{\xe \v testing::internal::EventRecordingListener2\:OnEnvironmentsSetUpEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::EventRecordingListener2::OnEnvironmentsSetUpEnd (const {\b UnitTest} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACZT}
{\bkmkend AAAAAAACZT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnEnvironmentsSetUpStart\:testing::internal::EventRecordingListener2}
{\xe \v testing::internal::EventRecordingListener2\:OnEnvironmentsSetUpStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::EventRecordingListener2::OnEnvironmentsSetUpStart (const {\b UnitTest} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACZU}
{\bkmkend AAAAAAACZU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnEnvironmentsTearDownEnd\:testing::internal::EventRecordingListener2}
{\xe \v testing::internal::EventRecordingListener2\:OnEnvironmentsTearDownEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::EventRecordingListener2::OnEnvironmentsTearDownEnd (const {\b UnitTest} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACZV}
{\bkmkend AAAAAAACZV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnEnvironmentsTearDownStart\:testing::internal::EventRecordingListener2}
{\xe \v testing::internal::EventRecordingListener2\:OnEnvironmentsTearDownStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::EventRecordingListener2::OnEnvironmentsTearDownStart (const {\b UnitTest} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACZW}
{\bkmkend AAAAAAACZW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestEnd\:testing::internal::EventRecordingListener2}
{\xe \v testing::internal::EventRecordingListener2\:OnTestEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::EventRecordingListener2::OnTestEnd (const {\b TestInfo} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACZX}
{\bkmkend AAAAAAACZX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestIterationEnd\:testing::internal::EventRecordingListener2}
{\xe \v testing::internal::EventRecordingListener2\:OnTestIterationEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::EventRecordingListener2::OnTestIterationEnd (const {\b UnitTest} & , int  {\i iteration}){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACZY}
{\bkmkend AAAAAAACZY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestIterationStart\:testing::internal::EventRecordingListener2}
{\xe \v testing::internal::EventRecordingListener2\:OnTestIterationStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::EventRecordingListener2::OnTestIterationStart (const {\b UnitTest} & , int  {\i iteration}){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACZZ}
{\bkmkend AAAAAAACZZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestPartResult\:testing::internal::EventRecordingListener2}
{\xe \v testing::internal::EventRecordingListener2\:OnTestPartResult}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::EventRecordingListener2::OnTestPartResult (const TestPartResult & ){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADAA}
{\bkmkend AAAAAAADAA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestProgramEnd\:testing::internal::EventRecordingListener2}
{\xe \v testing::internal::EventRecordingListener2\:OnTestProgramEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::EventRecordingListener2::OnTestProgramEnd (const {\b UnitTest} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADAB}
{\bkmkend AAAAAAADAB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestProgramStart\:testing::internal::EventRecordingListener2}
{\xe \v testing::internal::EventRecordingListener2\:OnTestProgramStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::EventRecordingListener2::OnTestProgramStart (const {\b UnitTest} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADAC}
{\bkmkend AAAAAAADAC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestStart\:testing::internal::EventRecordingListener2}
{\xe \v testing::internal::EventRecordingListener2\:OnTestStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::EventRecordingListener2::OnTestStart (const {\b TestInfo} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADAD}
{\bkmkend AAAAAAADAD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestSuiteEnd\:testing::internal::EventRecordingListener2}
{\xe \v testing::internal::EventRecordingListener2\:OnTestSuiteEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::EventRecordingListener2::OnTestSuiteEnd (const {\b TestSuite} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADAE}
{\bkmkend AAAAAAADAE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestSuiteStart\:testing::internal::EventRecordingListener2}
{\xe \v testing::internal::EventRecordingListener2\:OnTestSuiteStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::EventRecordingListener2::OnTestSuiteStart (const {\b TestSuite} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADAF}
{\bkmkend AAAAAAADAF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-listener-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ExcessiveArg Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ExcessiveArg}
{\xe \v testing::internal::ExcessiveArg}
{\bkmkstart AAAAAAADAG}
{\bkmkend AAAAAAADAG}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_function_mocker_test::ExpectCallTest< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_function_mocker_test::ExpectCallTest< T >}
{\xe \v testing::gmock_function_mocker_test::ExpectCallTest< T >}
{\bkmkstart AAAAAAACKR}
{\bkmkend AAAAAAACKR}
Inheritance diagram for testing::gmock_function_mocker_test::ExpectCallTest< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__function__mocker__test_1_1_expect_call_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-function-mocker_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ExpectFailureTest Class Reference\par \pard\plain 
{\tc\tcl2 \v ExpectFailureTest}
{\xe \v ExpectFailureTest}
{\bkmkstart AAAAAAABBB}
{\bkmkend AAAAAAABBB}
Inheritance diagram for ExpectFailureTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_expect_failure_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b FailureMode} \{ {\b FATAL_FAILURE}
, {\b NONFATAL_FAILURE}
 \}{\bkmkstart AAAAAAABBC}
{\bkmkend AAAAAAABBC}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b AddFailure} (FailureMode failure){\bkmkstart AAAAAAABBD}
{\bkmkend AAAAAAABBD}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-output-test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ExternalGeneratorTest Class Reference\par \pard\plain 
{\tc\tcl2 \v ExternalGeneratorTest}
{\xe \v ExternalGeneratorTest}
{\bkmkstart AAAAAAABBE}
{\bkmkend AAAAAAABBE}
Inheritance diagram for ExternalGeneratorTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_external_generator_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ExternalInstantiationTest Class Reference\par \pard\plain 
{\tc\tcl2 \v ExternalInstantiationTest}
{\xe \v ExternalInstantiationTest}
{\bkmkstart AAAAAAABBF}
{\bkmkend AAAAAAABBF}
Inheritance diagram for ExternalInstantiationTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_external_instantiation_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-test.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
FailedTest Class Reference\par \pard\plain 
{\tc\tcl2 \v FailedTest}
{\xe \v FailedTest}
{\bkmkstart AAAAAAABBG}
{\bkmkend AAAAAAABBG}
Inheritance diagram for FailedTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_failed_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_xml_output_unittest_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
FailingParamTest Class Reference\par \pard\plain 
{\tc\tcl2 \v FailingParamTest}
{\xe \v FailingParamTest}
{\bkmkstart AAAAAAABBH}
{\bkmkend AAAAAAABBH}
Inheritance diagram for FailingParamTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_failing_param_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-output-test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FailureReporterInterface Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FailureReporterInterface}
{\xe \v testing::internal::FailureReporterInterface}
{\bkmkstart AAAAAAADAH}
{\bkmkend AAAAAAADAH}
Inheritance diagram for testing::internal::FailureReporterInterface:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_failure_reporter_interface.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b FailureType} \{ {\b kNonfatal}
, {\b kFatal}
 \}{\bkmkstart AAAAAAADAI}
{\bkmkend AAAAAAADAI}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b ReportFailure} (FailureType type, const char *file, int line, const std::string &message)=0{\bkmkstart AAAAAAADAJ}
{\bkmkend AAAAAAADAJ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::faketype Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::faketype}
{\xe \v testing::internal::faketype}
{\bkmkstart AAAAAAADAK}
{\bkmkend AAAAAAADAK}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FallbackPrinter Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FallbackPrinter}
{\xe \v testing::internal::FallbackPrinter}
{\bkmkstart AAAAAAADAL}
{\bkmkend AAAAAAADAL}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > static void {\b PrintValue} (const T &, ::std::ostream *os){\bkmkstart AAAAAAADAM}
{\bkmkend AAAAAAADAM}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
FatalFailureInFixtureConstructorTest Class Reference\par \pard\plain 
{\tc\tcl2 \v FatalFailureInFixtureConstructorTest}
{\xe \v FatalFailureInFixtureConstructorTest}
{\bkmkstart AAAAAAABBI}
{\bkmkend AAAAAAABBI}
Inheritance diagram for FatalFailureInFixtureConstructorTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_fatal_failure_in_fixture_constructor_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SetUp} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b TearDown} () override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v SetUp\:FatalFailureInFixtureConstructorTest}
{\xe \v FatalFailureInFixtureConstructorTest\:SetUp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FatalFailureInFixtureConstructorTest::SetUp (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABBJ}
{\bkmkend AAAAAAABBJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v TearDown\:FatalFailureInFixtureConstructorTest}
{\xe \v FatalFailureInFixtureConstructorTest\:TearDown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FatalFailureInFixtureConstructorTest::TearDown (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABBK}
{\bkmkend AAAAAAABBK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-output-test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
FatalFailureInSetUpTest Class Reference\par \pard\plain 
{\tc\tcl2 \v FatalFailureInSetUpTest}
{\xe \v FatalFailureInSetUpTest}
{\bkmkstart AAAAAAABBL}
{\bkmkend AAAAAAABBL}
Inheritance diagram for FatalFailureInSetUpTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_fatal_failure_in_set_up_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SetUp} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b TearDown} () override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v SetUp\:FatalFailureInSetUpTest}
{\xe \v FatalFailureInSetUpTest\:SetUp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FatalFailureInSetUpTest::SetUp (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABBM}
{\bkmkend AAAAAAABBM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v TearDown\:FatalFailureInSetUpTest}
{\xe \v FatalFailureInSetUpTest\:TearDown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FatalFailureInSetUpTest::TearDown (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABBN}
{\bkmkend AAAAAAABBN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-output-test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
FieldHelper Class Reference\par \pard\plain 
{\tc\tcl2 \v FieldHelper}
{\xe \v FieldHelper}
{\bkmkstart AAAAAAABBO}
{\bkmkend AAAAAAABBO}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b FieldHelper} (int a_field){\bkmkstart AAAAAAABBP}
{\bkmkend AAAAAAABBP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b field} () const{\bkmkstart AAAAAAABBQ}
{\bkmkend AAAAAAABBQ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b field_}{\bkmkstart AAAAAAABBR}
{\bkmkend AAAAAAABBR}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock_link_test.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FinalSuccessChecker Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FinalSuccessChecker}
{\xe \v testing::internal::FinalSuccessChecker}
{\bkmkstart AAAAAAADAN}
{\bkmkend AAAAAAADAN}
Inheritance diagram for testing::internal::FinalSuccessChecker:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_final_success_checker.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b TearDown} () override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v TearDown\:testing::internal::FinalSuccessChecker}
{\xe \v testing::internal::FinalSuccessChecker\:TearDown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::FinalSuccessChecker::TearDown (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADAO}
{\bkmkend AAAAAAADAO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Environment} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAWV \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest-unittest-api_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FindFirstPrinter< T, E, Printer, Printers > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FindFirstPrinter< T, E, Printer, Printers >}
{\xe \v testing::internal::FindFirstPrinter< T, E, Printer, Printers >}
{\bkmkstart AAAAAAADAP}
{\bkmkend AAAAAAADAP}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FindFirstPrinter< T, decltype(Printer::PrintValue(std::declval< const T & >(), nullptr)), Printer, Printers... > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FindFirstPrinter< T, decltype(Printer::PrintValue(std::declval< const T & >(), nullptr)), Printer, Printers... >}
{\xe \v testing::internal::FindFirstPrinter< T, decltype(Printer::PrintValue(std::declval< const T & >(), nullptr)), Printer, Printers... >}
{\bkmkstart AAAAAAADAQ}
{\bkmkend AAAAAAADAQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b type} = Printer{\bkmkstart AAAAAAADAR}
{\bkmkend AAAAAAADAR}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Fixture Class Reference\par \pard\plain 
{\tc\tcl2 \v Fixture}
{\xe \v Fixture}
{\bkmkstart AAAAAAABBS}
{\bkmkend AAAAAAABBS}
Inheritance diagram for Fixture:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_fixture.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b SetUp} () override{\bkmkstart AAAAAAABBT}
{\bkmkend AAAAAAABBT}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_skip_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::Flags Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::Flags}
{\xe \v testing::Flags}
{\bkmkstart AAAAAAACBD}
{\bkmkend AAAAAAACBD}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Flags} {\b AlsoRunDisabledTests} (bool also_run_disabled_tests){\bkmkstart AAAAAAACBE}
{\bkmkend AAAAAAACBE}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Flags} {\b BreakOnFailure} (bool break_on_failure){\bkmkstart AAAAAAACBF}
{\bkmkend AAAAAAACBF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Flags} {\b CatchExceptions} (bool catch_exceptions){\bkmkstart AAAAAAACBG}
{\bkmkend AAAAAAACBG}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Flags} {\b DeathTestUseFork} (bool death_test_use_fork){\bkmkstart AAAAAAACBH}
{\bkmkend AAAAAAACBH}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Flags} {\b FailFast} (bool fail_fast){\bkmkstart AAAAAAACBI}
{\bkmkend AAAAAAACBI}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Flags} {\b Filter} (const char *filter){\bkmkstart AAAAAAACBJ}
{\bkmkend AAAAAAACBJ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Flags} {\b ListTests} (bool list_tests){\bkmkstart AAAAAAACBK}
{\bkmkend AAAAAAACBK}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Flags} {\b Output} (const char *output){\bkmkstart AAAAAAACBL}
{\bkmkend AAAAAAACBL}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Flags} {\b Brief} (bool brief){\bkmkstart AAAAAAACBM}
{\bkmkend AAAAAAACBM}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Flags} {\b PrintTime} (bool print_time){\bkmkstart AAAAAAACBN}
{\bkmkend AAAAAAACBN}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Flags} {\b RandomSeed} (int32_t random_seed){\bkmkstart AAAAAAACBO}
{\bkmkend AAAAAAACBO}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Flags} {\b Repeat} (int32_t repeat){\bkmkstart AAAAAAACBP}
{\bkmkend AAAAAAACBP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Flags} {\b RecreateEnvironmentsWhenRepeating} (bool recreate_environments_when_repeating){\bkmkstart AAAAAAACBQ}
{\bkmkend AAAAAAACBQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Flags} {\b Shuffle} (bool shuffle){\bkmkstart AAAAAAACBR}
{\bkmkend AAAAAAACBR}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Flags} {\b StackTraceDepth} (int32_t stack_trace_depth){\bkmkstart AAAAAAACBS}
{\bkmkend AAAAAAACBS}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Flags} {\b StreamResultTo} (const char *stream_result_to){\bkmkstart AAAAAAACBT}
{\bkmkend AAAAAAACBT}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Flags} {\b ThrowOnFailure} (bool throw_on_failure){\bkmkstart AAAAAAACBU}
{\bkmkend AAAAAAACBU}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b also_run_disabled_tests}{\bkmkstart AAAAAAACBV}
{\bkmkend AAAAAAACBV}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b break_on_failure}{\bkmkstart AAAAAAACBW}
{\bkmkend AAAAAAACBW}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b catch_exceptions}{\bkmkstart AAAAAAACBX}
{\bkmkend AAAAAAACBX}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b death_test_use_fork}{\bkmkstart AAAAAAACBY}
{\bkmkend AAAAAAACBY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b fail_fast}{\bkmkstart AAAAAAACBZ}
{\bkmkend AAAAAAACBZ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b filter}{\bkmkstart AAAAAAACCA}
{\bkmkend AAAAAAACCA}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b list_tests}{\bkmkstart AAAAAAACCB}
{\bkmkend AAAAAAACCB}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b output}{\bkmkstart AAAAAAACCC}
{\bkmkend AAAAAAACCC}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b brief}{\bkmkstart AAAAAAACCD}
{\bkmkend AAAAAAACCD}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b print_time}{\bkmkstart AAAAAAACCE}
{\bkmkend AAAAAAACCE}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int32_t {\b random_seed}{\bkmkstart AAAAAAACCF}
{\bkmkend AAAAAAACCF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int32_t {\b repeat}{\bkmkstart AAAAAAACCG}
{\bkmkend AAAAAAACCG}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b recreate_environments_when_repeating}{\bkmkstart AAAAAAACCH}
{\bkmkend AAAAAAACCH}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b shuffle}{\bkmkstart AAAAAAACCI}
{\bkmkend AAAAAAACCI}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int32_t {\b stack_trace_depth}{\bkmkstart AAAAAAACCJ}
{\bkmkend AAAAAAACCJ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b stream_result_to}{\bkmkstart AAAAAAACCK}
{\bkmkend AAAAAAACCK}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b throw_on_failure}{\bkmkstart AAAAAAACCL}
{\bkmkend AAAAAAACCL}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FlatTuple< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FlatTuple< T >}
{\xe \v testing::internal::FlatTuple< T >}
{\bkmkstart AAAAAAADAS}
{\bkmkend AAAAAAADAS}
Inheritance diagram for testing::internal::FlatTuple< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_flat_tuple.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename... Args> {\b FlatTuple} ({\b FlatTupleConstructTag} tag, Args &&... args){\bkmkstart AAAAAAADAT}
{\bkmkend AAAAAAADAT}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FlatTupleBase< Derived, Idx > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FlatTupleBase< Derived, Idx >}
{\xe \v testing::internal::FlatTupleBase< Derived, Idx >}
{\bkmkstart AAAAAAADAU}
{\bkmkend AAAAAAADAU}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FlatTupleBase< FlatTuple< T... >, IndexSequence< Idx... > > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FlatTupleBase< FlatTuple< T... >, IndexSequence< Idx... > >}
{\xe \v testing::internal::FlatTupleBase< FlatTuple< T... >, IndexSequence< Idx... > >}
{\bkmkstart AAAAAAADAV}
{\bkmkend AAAAAAADAV}
Inheritance diagram for testing::internal::FlatTupleBase< FlatTuple< T... >, IndexSequence< Idx... > >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_flat_tuple_base_3_01_flat_tuple_3_01_t_8_8_8_01_4_00_01_index_sequence_3_01_idx_8_8_8_01_4_01_4.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b Indices} = {\b IndexSequence}< Idx... >{\bkmkstart AAAAAAADAW}
{\bkmkend AAAAAAADAW}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename... Args> {\b FlatTupleBase} ({\b FlatTupleConstructTag}, Args &&... args){\bkmkstart AAAAAAADAX}
{\bkmkend AAAAAAADAX}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<size_t I> const {\b ElemFromList}< I, T... >::type & {\b Get} () const{\bkmkstart AAAAAAADAY}
{\bkmkend AAAAAAADAY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<size_t I> {\b ElemFromList}< I, T... >::type & {\b Get} (){\bkmkstart AAAAAAADAZ}
{\bkmkend AAAAAAADAZ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename F > auto {\b Apply} (F &&f) -> decltype(std::forward< F >(f)(this->Get< Idx >()...)){\bkmkstart AAAAAAADBA}
{\bkmkend AAAAAAADBA}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename F > auto {\b Apply} (F &&f) const -> decltype(std::forward< F >(f)(this->Get< Idx >()...)){\bkmkstart AAAAAAADBB}
{\bkmkend AAAAAAADBB}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FlatTupleConstructTag Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FlatTupleConstructTag}
{\xe \v testing::internal::FlatTupleConstructTag}
{\bkmkstart AAAAAAADBC}
{\bkmkend AAAAAAADBC}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FlatTupleElemBase< Derived, I > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FlatTupleElemBase< Derived, I >}
{\xe \v testing::internal::FlatTupleElemBase< Derived, I >}
{\bkmkstart AAAAAAADBD}
{\bkmkend AAAAAAADBD}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FlatTupleElemBase< FlatTuple< T... >, I > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FlatTupleElemBase< FlatTuple< T... >, I >}
{\xe \v testing::internal::FlatTupleElemBase< FlatTuple< T... >, I >}
{\bkmkstart AAAAAAADBE}
{\bkmkend AAAAAAADBE}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b value_type} = typename {\b ElemFromList}< I, T... >::type{\bkmkstart AAAAAAADBF}
{\bkmkend AAAAAAADBF}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Arg > {\b FlatTupleElemBase} ({\b FlatTupleConstructTag}, Arg &&t){\bkmkstart AAAAAAADBG}
{\bkmkend AAAAAAADBG}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

value_type {\b value}{\bkmkstart AAAAAAADBH}
{\bkmkend AAAAAAADBH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FloatingPoint< RawType > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FloatingPoint< RawType >}
{\xe \v testing::internal::FloatingPoint< RawType >}
{\bkmkstart AAAAAAADBI}
{\bkmkend AAAAAAADBI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b TypeWithSize}< sizeof(RawType)>::UInt {\b Bits}{\bkmkstart AAAAAAADBJ}
{\bkmkend AAAAAAADBJ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b FloatingPoint} (const RawType &x){\bkmkstart AAAAAAADBK}
{\bkmkend AAAAAAADBK}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const Bits & {\b bits} () const{\bkmkstart AAAAAAADBL}
{\bkmkend AAAAAAADBL}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

Bits {\b exponent_bits} () const{\bkmkstart AAAAAAADBM}
{\bkmkend AAAAAAADBM}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

Bits {\b fraction_bits} () const{\bkmkstart AAAAAAADBN}
{\bkmkend AAAAAAADBN}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

Bits {\b sign_bit} () const{\bkmkstart AAAAAAADBO}
{\bkmkend AAAAAAADBO}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b is_nan} () const{\bkmkstart AAAAAAADBP}
{\bkmkend AAAAAAADBP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b AlmostEquals} (const {\b FloatingPoint} &rhs) const{\bkmkstart AAAAAAADBQ}
{\bkmkend AAAAAAADBQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

float {\b Max} (){\bkmkstart AAAAAAADBR}
{\bkmkend AAAAAAADBR}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

double {\b Max} (){\bkmkstart AAAAAAADBS}
{\bkmkend AAAAAAADBS}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static RawType {\b ReinterpretBits} (const Bits bits){\bkmkstart AAAAAAADBT}
{\bkmkend AAAAAAADBT}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static RawType {\b Infinity} (){\bkmkstart AAAAAAADBU}
{\bkmkend AAAAAAADBU}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static RawType {\b Max} (){\bkmkstart AAAAAAADBV}
{\bkmkend AAAAAAADBV}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const size_t {\b kBitCount} = 8 * sizeof(RawType){\bkmkstart AAAAAAADBW}
{\bkmkend AAAAAAADBW}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const size_t {\b kFractionBitCount}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const size_t {\b kExponentBitCount} = kBitCount - 1 - kFractionBitCount{\bkmkstart AAAAAAADBX}
{\bkmkend AAAAAAADBX}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const Bits {\b kSignBitMask} = static_cast<Bits>(1) << (kBitCount - 1){\bkmkstart AAAAAAADBY}
{\bkmkend AAAAAAADBY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const Bits {\b kFractionBitMask}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const Bits {\b kExponentBitMask} = ~(kSignBitMask | kFractionBitMask){\bkmkstart AAAAAAADBZ}
{\bkmkend AAAAAAADBZ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const uint32_t {\b kMaxUlps} = 4{\bkmkstart AAAAAAADCA}
{\bkmkend AAAAAAADCA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v kFractionBitCount\:testing::internal::FloatingPoint< RawType >}
{\xe \v testing::internal::FloatingPoint< RawType >\:kFractionBitCount}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename RawType > const size_t {\b testing::internal::FloatingPoint}< RawType >::kFractionBitCount{\f2 [static]}}}
\par
{\bkmkstart AAAAAAADCB}
{\bkmkend AAAAAAADCB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid =\par
      std::numeric_limits<RawType>::digits - 1\par
}
}
{\xe \v kFractionBitMask\:testing::internal::FloatingPoint< RawType >}
{\xe \v testing::internal::FloatingPoint< RawType >\:kFractionBitMask}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename RawType > const Bits {\b testing::internal::FloatingPoint}< RawType >::kFractionBitMask{\f2 [static]}}}
\par
{\bkmkstart AAAAAAADCC}
{\bkmkend AAAAAAADCC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = ~static_cast<Bits>(0) >>\par
                                       (kExponentBitCount + 1)\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_more_actions_test::Foo Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_more_actions_test::Foo}
{\xe \v testing::gmock_more_actions_test::Foo}
{\bkmkstart AAAAAAACRL}
{\bkmkend AAAAAAACRL}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b Nullary} () const{\bkmkstart AAAAAAACRM}
{\bkmkend AAAAAAACRM}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

short {\b Unary} (long x){\bkmkstart AAAAAAACRN}
{\bkmkend AAAAAAACRN}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::string {\b Binary} (const std::string &str, char c) const{\bkmkstart AAAAAAACRO}
{\bkmkend AAAAAAACRO}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b Ternary} (int x, bool y, char z){\bkmkstart AAAAAAACRP}
{\bkmkend AAAAAAACRP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b SumOf4} (int a, int b, int c, int d) const{\bkmkstart AAAAAAACRQ}
{\bkmkend AAAAAAACRQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b SumOfLast2} ({\b Unused}, {\b Unused}, int a, int b) const{\bkmkstart AAAAAAACRR}
{\bkmkend AAAAAAACRR}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b SumOf5} (int a, int b, int c, int d, int e){\bkmkstart AAAAAAACRS}
{\bkmkend AAAAAAACRS}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b SumOf6} (int a, int b, int c, int d, int e, int f){\bkmkstart AAAAAAACRT}
{\bkmkend AAAAAAACRT}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::string {\b Concat7} (const char *s1, const char *s2, const char *s3, const char *s4, const char *s5, const char *s6, const char *s7){\bkmkstart AAAAAAACRU}
{\bkmkend AAAAAAACRU}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::string {\b Concat8} (const char *s1, const char *s2, const char *s3, const char *s4, const char *s5, const char *s6, const char *s7, const char *s8){\bkmkstart AAAAAAACRV}
{\bkmkend AAAAAAACRV}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::string {\b Concat9} (const char *s1, const char *s2, const char *s3, const char *s4, const char *s5, const char *s6, const char *s7, const char *s8, const char *s9){\bkmkstart AAAAAAACRW}
{\bkmkend AAAAAAACRW}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::string {\b Concat10} (const char *s1, const char *s2, const char *s3, const char *s4, const char *s5, const char *s6, const char *s7, const char *s8, const char *s9, const char *s10){\bkmkstart AAAAAAACRX}
{\bkmkend AAAAAAACRX}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-more-actions_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_nice_strict_test::Foo Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_nice_strict_test::Foo}
{\xe \v testing::gmock_nice_strict_test::Foo}
{\bkmkstart AAAAAAACSM}
{\bkmkend AAAAAAACSM}
Inheritance diagram for testing::gmock_nice_strict_test::Foo:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__nice__strict__test_1_1_foo.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DoThis} ()=0{\bkmkstart AAAAAAACSN}
{\bkmkend AAAAAAACSN}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b DoThat} (bool flag)=0{\bkmkstart AAAAAAACSO}
{\bkmkend AAAAAAACSO}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-nice-strict_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gtest_printers_test::Foo Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gtest_printers_test::Foo}
{\xe \v testing::gtest_printers_test::Foo}
{\bkmkstart AAAAAAACTR}
{\bkmkend AAAAAAACTR}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b MyMethod} (char x){\bkmkstart AAAAAAACTS}
{\bkmkend AAAAAAACTS}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual char {\b MyVirtualMethod} (int){\bkmkstart AAAAAAACTT}
{\bkmkend AAAAAAACTT}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b value}{\bkmkstart AAAAAAACTU}
{\bkmkend AAAAAAACTU}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-printers-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
FooEnvironment Class Reference\par \pard\plain 
{\tc\tcl2 \v FooEnvironment}
{\xe \v FooEnvironment}
{\bkmkstart AAAAAAABBU}
{\bkmkend AAAAAAABBU}
Inheritance diagram for FooEnvironment:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_foo_environment.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SetUp} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b TearDown} () override\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v SetUp\:FooEnvironment}
{\xe \v FooEnvironment\:SetUp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FooEnvironment::SetUp (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABBV}
{\bkmkend AAAAAAABBV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Environment} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAWV \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v TearDown\:FooEnvironment}
{\xe \v FooEnvironment\:TearDown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void FooEnvironment::TearDown (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABBW}
{\bkmkend AAAAAAABBW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Environment} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAWV \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-output-test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_function_mocker_test::FooInterface Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_function_mocker_test::FooInterface}
{\xe \v testing::gmock_function_mocker_test::FooInterface}
{\bkmkstart AAAAAAACKS}
{\bkmkend AAAAAAACKS}
Inheritance diagram for testing::gmock_function_mocker_test::FooInterface:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__function__mocker__test_1_1_foo_interface.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b fn_ptr} = int(*)(bool){\bkmkstart AAAAAAACKT}
{\bkmkend AAAAAAACKT}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b VoidReturning} (int x)=0{\bkmkstart AAAAAAACKU}
{\bkmkend AAAAAAACKU}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b Nullary} ()=0{\bkmkstart AAAAAAACKV}
{\bkmkend AAAAAAACKV}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual bool {\b Unary} (int x)=0{\bkmkstart AAAAAAACKW}
{\bkmkend AAAAAAACKW}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual long {\b Binary} (short x, int y)=0{\bkmkstart AAAAAAACKX}
{\bkmkend AAAAAAACKX}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b Decimal} (bool b, char c, short d, int e, long f, float g, double h, unsigned i, char *j, const std::string &k)=0{\bkmkstart AAAAAAACKY}
{\bkmkend AAAAAAACKY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual bool {\b TakesNonConstReference} (int &n)=0{\bkmkstart AAAAAAACKZ}
{\bkmkend AAAAAAACKZ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual std::string {\b TakesConstReference} (const int &n)=0{\bkmkstart AAAAAAACLA}
{\bkmkend AAAAAAACLA}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual bool {\b TakesConst} (const int x)=0{\bkmkstart AAAAAAACLB}
{\bkmkend AAAAAAACLB}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b OverloadedOnArgumentNumber} ()=0{\bkmkstart AAAAAAACLC}
{\bkmkend AAAAAAACLC}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b OverloadedOnArgumentNumber} (int n)=0{\bkmkstart AAAAAAACLD}
{\bkmkend AAAAAAACLD}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b OverloadedOnArgumentType} (int n)=0{\bkmkstart AAAAAAACLE}
{\bkmkend AAAAAAACLE}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual char {\b OverloadedOnArgumentType} (char c)=0{\bkmkstart AAAAAAACLF}
{\bkmkend AAAAAAACLF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b OverloadedOnConstness} ()=0{\bkmkstart AAAAAAACLG}
{\bkmkend AAAAAAACLG}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual char {\b OverloadedOnConstness} () const =0{\bkmkstart AAAAAAACLH}
{\bkmkend AAAAAAACLH}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b TypeWithHole} (int(*func)())=0{\bkmkstart AAAAAAACLI}
{\bkmkend AAAAAAACLI}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b TypeWithComma} (const std::map< int, std::string > &a_map)=0{\bkmkstart AAAAAAACLJ}
{\bkmkend AAAAAAACLJ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b TypeWithTemplatedCopyCtor} (const {\b TemplatedCopyable}< int > &)=0{\bkmkstart AAAAAAACLK}
{\bkmkend AAAAAAACLK}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual fn_ptr {\b ReturnsFunctionPointer2} (int)=0{\bkmkstart AAAAAAACLL}
{\bkmkend AAAAAAACLL}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b RefQualifiedConstRef} () const &=0{\bkmkstart AAAAAAACLM}
{\bkmkend AAAAAAACLM}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b RefQualifiedConstRefRef} () const &&=0{\bkmkstart AAAAAAACLN}
{\bkmkend AAAAAAACLN}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b RefQualifiedRef} () &=0{\bkmkstart AAAAAAACLO}
{\bkmkend AAAAAAACLO}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b RefQualifiedRefRef} () &&=0{\bkmkstart AAAAAAACLP}
{\bkmkend AAAAAAACLP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b RefQualifiedOverloaded} () const &=0{\bkmkstart AAAAAAACLQ}
{\bkmkend AAAAAAACLQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b RefQualifiedOverloaded} () const &&=0{\bkmkstart AAAAAAACLR}
{\bkmkend AAAAAAACLR}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b RefQualifiedOverloaded} () &=0{\bkmkstart AAAAAAACLS}
{\bkmkend AAAAAAACLS}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b RefQualifiedOverloaded} () &&=0{\bkmkstart AAAAAAACLT}
{\bkmkend AAAAAAACLT}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int(*)(bool) {\b ReturnsFunctionPointer1} (int){\bkmkstart AAAAAAACLU}
{\bkmkend AAAAAAACLU}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-function-mocker_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
FooTest Class Reference\par \pard\plain 
{\tc\tcl2 \v FooTest}
{\xe \v FooTest}
{\bkmkstart AAAAAAABBX}
{\bkmkend AAAAAAABBX}
Inheritance diagram for FooTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_foo_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-list-tests-unittest_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
FooTestFixture Class Reference\par \pard\plain 
{\tc\tcl2 \v FooTestFixture}
{\xe \v FooTestFixture}
{\bkmkstart AAAAAAABBY}
{\bkmkend AAAAAAABBY}
Inheritance diagram for FooTestFixture:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_foo_test_fixture.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_list_output_unittest_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FormatForComparison< ToPrint, OtherOperand > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FormatForComparison< ToPrint, OtherOperand >}
{\xe \v testing::internal::FormatForComparison< ToPrint, OtherOperand >}
{\bkmkstart AAAAAAADCD}
{\bkmkend AAAAAAADCD}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

::std::string {\b Format} (const ToPrint &value){\bkmkstart AAAAAAADCE}
{\bkmkend AAAAAAADCE}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FormatForComparison< ToPrint[N], OtherOperand > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FormatForComparison< ToPrint[N], OtherOperand >}
{\xe \v testing::internal::FormatForComparison< ToPrint[N], OtherOperand >}
{\bkmkstart AAAAAAADCF}
{\bkmkend AAAAAAADCF}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

::std::string {\b Format} (const ToPrint *value){\bkmkstart AAAAAAADCG}
{\bkmkend AAAAAAADCG}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Function< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Function< T >}
{\xe \v testing::internal::Function< T >}
{\bkmkstart AAAAAAADCH}
{\bkmkend AAAAAAADCH}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Function< R(Args...)> Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Function< R(Args...)>}
{\xe \v testing::internal::Function< R(Args...)>}
{\bkmkstart AAAAAAADCI}
{\bkmkend AAAAAAADCI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b Result} = R{\bkmkstart AAAAAAADCJ}
{\bkmkend AAAAAAADCJ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<size_t I> using {\b Arg} = {\b ElemFromList}< I, Args... >{\bkmkstart AAAAAAADCK}
{\bkmkend AAAAAAADCK}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b ArgumentTuple} = std::tuple< Args... >{\bkmkstart AAAAAAADCL}
{\bkmkend AAAAAAADCL}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b ArgumentMatcherTuple} = std::tuple< {\b Matcher}< Args >... >{\bkmkstart AAAAAAADCM}
{\bkmkend AAAAAAADCM}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b MakeResultVoid} = void(Args...){\bkmkstart AAAAAAADCN}
{\bkmkend AAAAAAADCN}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b MakeResultIgnoredValue} = {\b IgnoredValue}(Args...){\bkmkstart AAAAAAADCO}
{\bkmkend AAAAAAADCO}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static constexpr size_t {\b ArgumentCount} = sizeof...(Args){\bkmkstart AAAAAAADCP}
{\bkmkend AAAAAAADCP}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_function_mocker_test::FunctionMockerTest< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_function_mocker_test::FunctionMockerTest< T >}
{\xe \v testing::gmock_function_mocker_test::FunctionMockerTest< T >}
{\bkmkstart AAAAAAACLV}
{\bkmkend AAAAAAACLV}
Inheritance diagram for testing::gmock_function_mocker_test::FunctionMockerTest< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__function__mocker__test_1_1_function_mocker_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b FooInterface} *const {\b foo_}{\bkmkstart AAAAAAACLW}
{\bkmkend AAAAAAACLW}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T {\b mock_foo_}{\bkmkstart AAAAAAACLX}
{\bkmkend AAAAAAACLX}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-function-mocker_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FunctionPointerPrinter Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FunctionPointerPrinter}
{\xe \v testing::internal::FunctionPointerPrinter}
{\bkmkstart AAAAAAADCQ}
{\bkmkend AAAAAAADCQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T , typename  = typename std::enable_if<                            std::is_function<T>::value>::type> static void {\b PrintValue} (T *p, ::std::ostream *os){\bkmkstart AAAAAAADCR}
{\bkmkend AAAAAAADCR}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Game Class Reference\par \pard\plain 
{\tc\tcl2 \v Game}
{\xe \v Game}
{\bkmkstart AAAAAAABBZ}
{\bkmkend AAAAAAABBZ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::vector< std::vector< {\b Piece} * > > {\b GetBoard} (){\bkmkstart AAAAAAABCA}
{\bkmkend AAAAAAABCA}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b History} {\b GetHistory} (){\bkmkstart AAAAAAABCB}
{\bkmkend AAAAAAABCB}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

State {\b GetState} (){\bkmkstart AAAAAAABCC}
{\bkmkend AAAAAAABCC}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

Verdict {\b GetVerdict} (){\bkmkstart AAAAAAABCD}
{\bkmkend AAAAAAABCD}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b make_move} (){\bkmkstart AAAAAAABCE}
{\bkmkend AAAAAAABCE}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b check_moves} (std::vector< std::vector< {\b Piece} * > > &pieces, std::vector< std::string > &moves, std::string &from, int move){\bkmkstart AAAAAAABCF}
{\bkmkend AAAAAAABCF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b impossible_move} (std::vector< std::string > &moves, std::string &from, int move){\bkmkstart AAAAAAABCG}
{\bkmkend AAAAAAABCG}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b check} (int color, std::vector< std::vector< {\b Piece} * > > &pieces){\bkmkstart AAAAAAABCH}
{\bkmkend AAAAAAABCH}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b mate} (int color, std::vector< std::vector< {\b Piece} * > > &pieces){\bkmkstart AAAAAAABCI}
{\bkmkend AAAAAAABCI}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::string {\b en_passant} (std::vector< std::vector< {\b Piece} * > > &pieces, std::vector< std::string > &moves, std::string &from, int move){\bkmkstart AAAAAAABCJ}
{\bkmkend AAAAAAABCJ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b castling} (std::vector< std::vector< {\b Piece} * > > &pieces, std::vector< std::string > &moves, std::string &from, int move){\bkmkstart AAAAAAABCK}
{\bkmkend AAAAAAABCK}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b pawn_revolution} (std::vector< int > coo, std::vector< int > s){\bkmkstart AAAAAAABCL}
{\bkmkend AAAAAAABCL}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b set_time} (float time){\bkmkstart AAAAAAABCM}
{\bkmkend AAAAAAABCM}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b set_addition} (float addition){\bkmkstart AAAAAAABCN}
{\bkmkend AAAAAAABCN}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b new_game} (){\bkmkstart AAAAAAABCO}
{\bkmkend AAAAAAABCO}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
game.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
game.cpp\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::GenerateTypeList< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::GenerateTypeList< T >}
{\xe \v testing::internal::GenerateTypeList< T >}
{\bkmkstart AAAAAAADCS}
{\bkmkend AAAAAAADCS}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b type} = typename proxy::type{\bkmkstart AAAAAAADCT}
{\bkmkend AAAAAAADCT}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-type-util.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
GeneratorEvaluationTest Class Reference\par \pard\plain 
{\tc\tcl2 \v GeneratorEvaluationTest}
{\xe \v GeneratorEvaluationTest}
{\bkmkstart AAAAAAABCP}
{\bkmkend AAAAAAABCP}
Inheritance diagram for GeneratorEvaluationTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_generator_evaluation_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b param_value} (){\bkmkstart AAAAAAABCQ}
{\bkmkend AAAAAAABCQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b set_param_value} (int param_value){\bkmkstart AAAAAAABCR}
{\bkmkend AAAAAAABCR}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_more_actions_test::GiantTemplate< T1, T2, T3, k4, k5, k6, T7, T8, T9 > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_more_actions_test::GiantTemplate< T1, T2, T3, k4, k5, k6, T7, T8, T9 >}
{\xe \v testing::gmock_more_actions_test::GiantTemplate< T1, T2, T3, k4, k5, k6, T7, T8, T9 >}
{\bkmkstart AAAAAAACRY}
{\bkmkend AAAAAAACRY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b GiantTemplate} (int a_value){\bkmkstart AAAAAAACRZ}
{\bkmkend AAAAAAACRZ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b value}{\bkmkstart AAAAAAACSA}
{\bkmkend AAAAAAACSA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-more-actions_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gmock_leak_test.GMockLeakTest Class Reference\par \pard\plain 
{\tc\tcl2 \v gmock_leak_test.GMockLeakTest}
{\xe \v gmock_leak_test.GMockLeakTest}
{\bkmkstart AAAAAAABRJ}
{\bkmkend AAAAAAABRJ}
Inheritance diagram for gmock_leak_test.GMockLeakTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgmock__leak__test_1_1_g_mock_leak_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testCatchesLeakedMockByDefault} (self){\bkmkstart AAAAAAABRK}
{\bkmkend AAAAAAABRK}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testDoesNotCatchLeakedMockWhenDisabled} (self){\bkmkstart AAAAAAABRL}
{\bkmkend AAAAAAABRL}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testCatchesLeakedMockWhenEnabled} (self){\bkmkstart AAAAAAABRM}
{\bkmkend AAAAAAABRM}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testCatchesLeakedMockWhenEnabledWithExplictFlagValue} (self){\bkmkstart AAAAAAABRN}
{\bkmkend AAAAAAABRN}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testCatchesMultipleLeakedMocks} (self){\bkmkstart AAAAAAABRO}
{\bkmkend AAAAAAABRO}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock_leak_test.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gmock_output_test.GMockOutputTest Class Reference\par \pard\plain 
{\tc\tcl2 \v gmock_output_test.GMockOutputTest}
{\xe \v gmock_output_test.GMockOutputTest}
{\bkmkstart AAAAAAABRP}
{\bkmkend AAAAAAABRP}
Inheritance diagram for gmock_output_test.GMockOutputTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgmock__output__test_1_1_g_mock_output_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testOutput} (self){\bkmkstart AAAAAAABRQ}
{\bkmkend AAAAAAABRQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock_output_test.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
GMockOutputTest Class Reference\par \pard\plain 
{\tc\tcl2 \v GMockOutputTest}
{\xe \v GMockOutputTest}
{\bkmkstart AAAAAAABCS}
{\bkmkend AAAAAAABCS}
Inheritance diagram for GMockOutputTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_g_mock_output_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b NaggyMock}< {\b MockFoo} > {\b foo_}{\bkmkstart AAAAAAABCT}
{\bkmkend AAAAAAABCT}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock_output_test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::GoogleTestFailureReporter Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::GoogleTestFailureReporter}
{\xe \v testing::internal::GoogleTestFailureReporter}
{\bkmkstart AAAAAAADCU}
{\bkmkend AAAAAAADCU}
Inheritance diagram for testing::internal::GoogleTestFailureReporter:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_google_test_failure_reporter.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ReportFailure} (FailureType type, const char *file, int line, const std::string &message) override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v ReportFailure\:testing::internal::GoogleTestFailureReporter}
{\xe \v testing::internal::GoogleTestFailureReporter\:ReportFailure}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::GoogleTestFailureReporter::ReportFailure (FailureType  {\i type}, const char *  {\i file}, int  {\i line}, const std::string &  {\i message}){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADCV}
{\bkmkend AAAAAAADCV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::internal::FailureReporterInterface} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAADAH \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/src/gmock-internal-utils.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::GreaterThanMatcher< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::GreaterThanMatcher< T >}
{\xe \v testing::gmock_matchers_test::GreaterThanMatcher< T >}
{\bkmkstart AAAAAAACQT}
{\bkmkend AAAAAAACQT}
Inheritance diagram for testing::gmock_matchers_test::GreaterThanMatcher< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__matchers__test_1_1_greater_than_matcher.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b GreaterThanMatcher} (T rhs){\bkmkstart AAAAAAACQU}
{\bkmkend AAAAAAACQU}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeTo} (ostream *os) const override{\bkmkstart AAAAAAACQV}
{\bkmkend AAAAAAACQV}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeNegationTo} (ostream *os) const override{\bkmkstart AAAAAAACQW}
{\bkmkend AAAAAAACQW}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b MatchAndExplain} (T lhs, MatchResultListener *listener) const override{\bkmkstart AAAAAAACQX}
{\bkmkend AAAAAAACQX}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-matchers_test.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
googletest-break-on-failure-unittest.GTestBreakOnFailureUnitTest Class Reference\par \pard\plain 
{\tc\tcl2 \v googletest-break-on-failure-unittest.GTestBreakOnFailureUnitTest}
{\xe \v googletest-break-on-failure-unittest.GTestBreakOnFailureUnitTest}
{\bkmkstart AAAAAAABRR}
{\bkmkend AAAAAAABRR}
Inheritance diagram for googletest-break-on-failure-unittest.GTestBreakOnFailureUnitTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgoogletest-break-on-failure-unittest_1_1_g_test_break_on_failure_unit_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b RunAndVerify} (self, env_var_value, flag_value, expect_seg_fault)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testDefaultBehavior} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testEnvVar} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testFlag} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testFlagOverridesEnvVar} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testBreakOnFailureOverridesThrowOnFailure} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testCatchExceptionsDoesNotInterfere} (self)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests using the GTEST_BREAK_ON_FAILURE environment variable or\par
the --gtest_break_on_failure flag to turn assertion failures into\par
segmentation faults.\par
}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v RunAndVerify\:googletest-break-on-failure-unittest.GTestBreakOnFailureUnitTest}
{\xe \v googletest-break-on-failure-unittest.GTestBreakOnFailureUnitTest\:RunAndVerify}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-break-on-failure-unittest.GTestBreakOnFailureUnitTest.RunAndVerify (  {\i self},   {\i env_var_value},   {\i flag_value},   {\i expect_seg_fault})}}
\par
{\bkmkstart AAAAAAABRS}
{\bkmkend AAAAAAABRS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Runs googletest-break-on-failure-unittest_ and verifies that it does\par
(or does not) have a seg-fault.\par
\par
Args:\par
  env_var_value:    value of the GTEST_BREAK_ON_FAILURE environment\par
                    variable; None if the variable should be unset.\par
  flag_value:       value of the --gtest_break_on_failure flag;\par
                    None if the flag should not be present.\par
  expect_seg_fault: 1 if the program is expected to generate a seg-fault;\par
                    0 otherwise.\par
}
 \par
}}
{\xe \v testBreakOnFailureOverridesThrowOnFailure\:googletest-break-on-failure-unittest.GTestBreakOnFailureUnitTest}
{\xe \v googletest-break-on-failure-unittest.GTestBreakOnFailureUnitTest\:testBreakOnFailureOverridesThrowOnFailure}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-break-on-failure-unittest.GTestBreakOnFailureUnitTest.testBreakOnFailureOverridesThrowOnFailure (  {\i self})}}
\par
{\bkmkstart AAAAAAABRT}
{\bkmkend AAAAAAABRT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests that gtest_break_on_failure overrides gtest_throw_on_failure.}
 \par
}}
{\xe \v testCatchExceptionsDoesNotInterfere\:googletest-break-on-failure-unittest.GTestBreakOnFailureUnitTest}
{\xe \v googletest-break-on-failure-unittest.GTestBreakOnFailureUnitTest\:testCatchExceptionsDoesNotInterfere}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-break-on-failure-unittest.GTestBreakOnFailureUnitTest.testCatchExceptionsDoesNotInterfere (  {\i self})}}
\par
{\bkmkstart AAAAAAABRU}
{\bkmkend AAAAAAABRU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests that gtest_catch_exceptions doesn't interfere.}
 \par
}}
{\xe \v testDefaultBehavior\:googletest-break-on-failure-unittest.GTestBreakOnFailureUnitTest}
{\xe \v googletest-break-on-failure-unittest.GTestBreakOnFailureUnitTest\:testDefaultBehavior}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-break-on-failure-unittest.GTestBreakOnFailureUnitTest.testDefaultBehavior (  {\i self})}}
\par
{\bkmkstart AAAAAAABRV}
{\bkmkend AAAAAAABRV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the behavior of the default mode.}
 \par
}}
{\xe \v testEnvVar\:googletest-break-on-failure-unittest.GTestBreakOnFailureUnitTest}
{\xe \v googletest-break-on-failure-unittest.GTestBreakOnFailureUnitTest\:testEnvVar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-break-on-failure-unittest.GTestBreakOnFailureUnitTest.testEnvVar (  {\i self})}}
\par
{\bkmkstart AAAAAAABRW}
{\bkmkend AAAAAAABRW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests using the GTEST_BREAK_ON_FAILURE environment variable.}
 \par
}}
{\xe \v testFlag\:googletest-break-on-failure-unittest.GTestBreakOnFailureUnitTest}
{\xe \v googletest-break-on-failure-unittest.GTestBreakOnFailureUnitTest\:testFlag}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-break-on-failure-unittest.GTestBreakOnFailureUnitTest.testFlag (  {\i self})}}
\par
{\bkmkstart AAAAAAABRX}
{\bkmkend AAAAAAABRX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests using the --gtest_break_on_failure flag.}
 \par
}}
{\xe \v testFlagOverridesEnvVar\:googletest-break-on-failure-unittest.GTestBreakOnFailureUnitTest}
{\xe \v googletest-break-on-failure-unittest.GTestBreakOnFailureUnitTest\:testFlagOverridesEnvVar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-break-on-failure-unittest.GTestBreakOnFailureUnitTest.testFlagOverridesEnvVar (  {\i self})}}
\par
{\bkmkstart AAAAAAABRY}
{\bkmkend AAAAAAABRY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests that the flag overrides the environment variable.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-break-on-failure-unittest.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
googletest-color-test.GTestColorTest Class Reference\par \pard\plain 
{\tc\tcl2 \v googletest-color-test.GTestColorTest}
{\xe \v googletest-color-test.GTestColorTest}
{\bkmkstart AAAAAAABSN}
{\bkmkend AAAAAAABSN}
Inheritance diagram for googletest-color-test.GTestColorTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgoogletest-color-test_1_1_g_test_color_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testNoEnvVarNoFlag} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testFlagOnly} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testEnvVarOnly} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testEnvVarAndFlag} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testAliasesOfYesAndNo} (self)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v testAliasesOfYesAndNo\:googletest-color-test.GTestColorTest}
{\xe \v googletest-color-test.GTestColorTest\:testAliasesOfYesAndNo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-color-test.GTestColorTest.testAliasesOfYesAndNo (  {\i self})}}
\par
{\bkmkstart AAAAAAABSO}
{\bkmkend AAAAAAABSO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests using aliases in specifying --gtest_color.}
 \par
}}
{\xe \v testEnvVarAndFlag\:googletest-color-test.GTestColorTest}
{\xe \v googletest-color-test.GTestColorTest\:testEnvVarAndFlag}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-color-test.GTestColorTest.testEnvVarAndFlag (  {\i self})}}
\par
{\bkmkstart AAAAAAABSP}
{\bkmkend AAAAAAABSP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the case when there are both GTEST_COLOR and --gtest_color.}
 \par
}}
{\xe \v testEnvVarOnly\:googletest-color-test.GTestColorTest}
{\xe \v googletest-color-test.GTestColorTest\:testEnvVarOnly}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-color-test.GTestColorTest.testEnvVarOnly (  {\i self})}}
\par
{\bkmkstart AAAAAAABSQ}
{\bkmkend AAAAAAABSQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the case when there's GTEST_COLOR but not --gtest_color.}
 \par
}}
{\xe \v testFlagOnly\:googletest-color-test.GTestColorTest}
{\xe \v googletest-color-test.GTestColorTest\:testFlagOnly}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-color-test.GTestColorTest.testFlagOnly (  {\i self})}}
\par
{\bkmkstart AAAAAAABSR}
{\bkmkend AAAAAAABSR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the case when there's --gtest_color but not GTEST_COLOR.}
 \par
}}
{\xe \v testNoEnvVarNoFlag\:googletest-color-test.GTestColorTest}
{\xe \v googletest-color-test.GTestColorTest\:testNoEnvVarNoFlag}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-color-test.GTestColorTest.testNoEnvVarNoFlag (  {\i self})}}
\par
{\bkmkstart AAAAAAABSS}
{\bkmkend AAAAAAABSS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the case when there's neither GTEST_COLOR nor --gtest_color.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-color-test.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
googletest-env-var-test.GTestEnvVarTest Class Reference\par \pard\plain 
{\tc\tcl2 \v googletest-env-var-test.GTestEnvVarTest}
{\xe \v googletest-env-var-test.GTestEnvVarTest}
{\bkmkstart AAAAAAABST}
{\bkmkend AAAAAAABST}
Inheritance diagram for googletest-env-var-test.GTestEnvVarTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgoogletest-env-var-test_1_1_g_test_env_var_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testEnvVarAffectsFlag} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testXmlOutputFile} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testXmlOutputFileOverride} (self)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v testEnvVarAffectsFlag\:googletest-env-var-test.GTestEnvVarTest}
{\xe \v googletest-env-var-test.GTestEnvVarTest\:testEnvVarAffectsFlag}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-env-var-test.GTestEnvVarTest.testEnvVarAffectsFlag (  {\i self})}}
\par
{\bkmkstart AAAAAAABSU}
{\bkmkend AAAAAAABSU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests that environment variable should affect the corresponding flag.}
 \par
}}
{\xe \v testXmlOutputFile\:googletest-env-var-test.GTestEnvVarTest}
{\xe \v googletest-env-var-test.GTestEnvVarTest\:testXmlOutputFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-env-var-test.GTestEnvVarTest.testXmlOutputFile (  {\i self})}}
\par
{\bkmkstart AAAAAAABSV}
{\bkmkend AAAAAAABSV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests that $XML_OUTPUT_FILE affects the output flag.}
 \par
}}
{\xe \v testXmlOutputFileOverride\:googletest-env-var-test.GTestEnvVarTest}
{\xe \v googletest-env-var-test.GTestEnvVarTest\:testXmlOutputFileOverride}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-env-var-test.GTestEnvVarTest.testXmlOutputFileOverride (  {\i self})}}
\par
{\bkmkstart AAAAAAABSW}
{\bkmkend AAAAAAABSW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests that $XML_OUTPUT_FILE is overridden by $GTEST_OUTPUT.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-env-var-test.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
googletest-failfast-unittest.GTestFailFastUnitTest Class Reference\par \pard\plain 
{\tc\tcl2 \v googletest-failfast-unittest.GTestFailFastUnitTest}
{\xe \v googletest-failfast-unittest.GTestFailFastUnitTest}
{\bkmkstart AAAAAAABSX}
{\bkmkend AAAAAAABSX}
Inheritance diagram for googletest-failfast-unittest.GTestFailFastUnitTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgoogletest-failfast-unittest_1_1_g_test_fail_fast_unit_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testDefaultBehavior} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testGoogletestFlag} (self){\bkmkstart AAAAAAABSY}
{\bkmkend AAAAAAABSY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testGoogletestEnvVar} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testBazelEnvVar} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testFlagOverridesEnvVar} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testGoogletestEnvVarOverridesBazelEnvVar} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testEventListener} (self){\bkmkstart AAAAAAABSZ}
{\bkmkend AAAAAAABSZ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b assertXmlResultCount} (self, result, count, xml){\bkmkstart AAAAAAABTA}
{\bkmkend AAAAAAABTA}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b assertXmlStatusCount} (self, status, count, xml){\bkmkstart AAAAAAABTB}
{\bkmkend AAAAAAABTB}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b assertFailFastXmlAndTxtOutput} (self, fail_fast, test_suite, passed_count, failure_count, skipped_count, suppressed_count, run_disabled=False)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b assertFailFastBehavior} (self, test_suite, passed_count, failure_count, skipped_count, suppressed_count, run_disabled=False)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b assertNotFailFastBehavior} (self, test_suite, passed_count, failure_count, skipped_count, suppressed_count, run_disabled=False)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testFlag_HasFixtureTest} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testFlag_HasSimpleTest} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testFlag_HasParametersTest} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testFlag_HasDisabledTest} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testFlag_HasDisabledRunDisabledTest} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testFlag_HasDisabledSuiteTest} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testFlag_HasDisabledSuiteRunDisabledTest} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testFlag_HasDeathTest} (self)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the env variable or the command line flag for fail_fast.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v assertFailFastBehavior\:googletest-failfast-unittest.GTestFailFastUnitTest}
{\xe \v googletest-failfast-unittest.GTestFailFastUnitTest\:assertFailFastBehavior}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-failfast-unittest.GTestFailFastUnitTest.assertFailFastBehavior (  {\i self},   {\i test_suite},   {\i passed_count},   {\i failure_count},   {\i skipped_count},   {\i suppressed_count},   {\i run_disabled} = {\f2 False})}}
\par
{\bkmkstart AAAAAAABTC}
{\bkmkend AAAAAAABTC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Assert --fail_fast via flag.}
 \par
}}
{\xe \v assertFailFastXmlAndTxtOutput\:googletest-failfast-unittest.GTestFailFastUnitTest}
{\xe \v googletest-failfast-unittest.GTestFailFastUnitTest\:assertFailFastXmlAndTxtOutput}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-failfast-unittest.GTestFailFastUnitTest.assertFailFastXmlAndTxtOutput (  {\i self},   {\i fail_fast},   {\i test_suite},   {\i passed_count},   {\i failure_count},   {\i skipped_count},   {\i suppressed_count},   {\i run_disabled} = {\f2 False})}}
\par
{\bkmkstart AAAAAAABTD}
{\bkmkend AAAAAAABTD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Assert XML and text output of a test execution.}
 \par
}}
{\xe \v assertNotFailFastBehavior\:googletest-failfast-unittest.GTestFailFastUnitTest}
{\xe \v googletest-failfast-unittest.GTestFailFastUnitTest\:assertNotFailFastBehavior}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-failfast-unittest.GTestFailFastUnitTest.assertNotFailFastBehavior (  {\i self},   {\i test_suite},   {\i passed_count},   {\i failure_count},   {\i skipped_count},   {\i suppressed_count},   {\i run_disabled} = {\f2 False})}}
\par
{\bkmkstart AAAAAAABTE}
{\bkmkend AAAAAAABTE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Assert --nofail_fast via flag.}
 \par
}}
{\xe \v testBazelEnvVar\:googletest-failfast-unittest.GTestFailFastUnitTest}
{\xe \v googletest-failfast-unittest.GTestFailFastUnitTest\:testBazelEnvVar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-failfast-unittest.GTestFailFastUnitTest.testBazelEnvVar (  {\i self})}}
\par
{\bkmkstart AAAAAAABTF}
{\bkmkend AAAAAAABTF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the behavior of specifying fail_fast via Bazel testbridge.}
 \par
}}
{\xe \v testDefaultBehavior\:googletest-failfast-unittest.GTestFailFastUnitTest}
{\xe \v googletest-failfast-unittest.GTestFailFastUnitTest\:testDefaultBehavior}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-failfast-unittest.GTestFailFastUnitTest.testDefaultBehavior (  {\i self})}}
\par
{\bkmkstart AAAAAAABTG}
{\bkmkend AAAAAAABTG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the behavior of not specifying the fail_fast.}
 \par
}}
{\xe \v testFlag_HasDeathTest\:googletest-failfast-unittest.GTestFailFastUnitTest}
{\xe \v googletest-failfast-unittest.GTestFailFastUnitTest\:testFlag_HasDeathTest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-failfast-unittest.GTestFailFastUnitTest.testFlag_HasDeathTest (  {\i self})}}
\par
{\bkmkstart AAAAAAABTH}
{\bkmkend AAAAAAABTH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the behavior of fail_fast and death tests.}
 \par
}}
{\xe \v testFlag_HasDisabledRunDisabledTest\:googletest-failfast-unittest.GTestFailFastUnitTest}
{\xe \v googletest-failfast-unittest.GTestFailFastUnitTest\:testFlag_HasDisabledRunDisabledTest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-failfast-unittest.GTestFailFastUnitTest.testFlag_HasDisabledRunDisabledTest (  {\i self})}}
\par
{\bkmkstart AAAAAAABTI}
{\bkmkend AAAAAAABTI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the behavior of fail_fast and Disabled test cases enabled.}
 \par
}}
{\xe \v testFlag_HasDisabledSuiteRunDisabledTest\:googletest-failfast-unittest.GTestFailFastUnitTest}
{\xe \v googletest-failfast-unittest.GTestFailFastUnitTest\:testFlag_HasDisabledSuiteRunDisabledTest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-failfast-unittest.GTestFailFastUnitTest.testFlag_HasDisabledSuiteRunDisabledTest (  {\i self})}}
\par
{\bkmkstart AAAAAAABTJ}
{\bkmkend AAAAAAABTJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the behavior of fail_fast and Disabled test suites enabled.}
 \par
}}
{\xe \v testFlag_HasDisabledSuiteTest\:googletest-failfast-unittest.GTestFailFastUnitTest}
{\xe \v googletest-failfast-unittest.GTestFailFastUnitTest\:testFlag_HasDisabledSuiteTest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-failfast-unittest.GTestFailFastUnitTest.testFlag_HasDisabledSuiteTest (  {\i self})}}
\par
{\bkmkstart AAAAAAABTK}
{\bkmkend AAAAAAABTK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the behavior of fail_fast and Disabled test suites.}
 \par
}}
{\xe \v testFlag_HasDisabledTest\:googletest-failfast-unittest.GTestFailFastUnitTest}
{\xe \v googletest-failfast-unittest.GTestFailFastUnitTest\:testFlag_HasDisabledTest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-failfast-unittest.GTestFailFastUnitTest.testFlag_HasDisabledTest (  {\i self})}}
\par
{\bkmkstart AAAAAAABTL}
{\bkmkend AAAAAAABTL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the behavior of fail_fast and Disabled test cases.}
 \par
}}
{\xe \v testFlag_HasFixtureTest\:googletest-failfast-unittest.GTestFailFastUnitTest}
{\xe \v googletest-failfast-unittest.GTestFailFastUnitTest\:testFlag_HasFixtureTest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-failfast-unittest.GTestFailFastUnitTest.testFlag_HasFixtureTest (  {\i self})}}
\par
{\bkmkstart AAAAAAABTM}
{\bkmkend AAAAAAABTM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the behavior of fail_fast and TEST_F.}
 \par
}}
{\xe \v testFlag_HasParametersTest\:googletest-failfast-unittest.GTestFailFastUnitTest}
{\xe \v googletest-failfast-unittest.GTestFailFastUnitTest\:testFlag_HasParametersTest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-failfast-unittest.GTestFailFastUnitTest.testFlag_HasParametersTest (  {\i self})}}
\par
{\bkmkstart AAAAAAABTN}
{\bkmkend AAAAAAABTN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the behavior of fail_fast and TEST_P.}
 \par
}}
{\xe \v testFlag_HasSimpleTest\:googletest-failfast-unittest.GTestFailFastUnitTest}
{\xe \v googletest-failfast-unittest.GTestFailFastUnitTest\:testFlag_HasSimpleTest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-failfast-unittest.GTestFailFastUnitTest.testFlag_HasSimpleTest (  {\i self})}}
\par
{\bkmkstart AAAAAAABTO}
{\bkmkend AAAAAAABTO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the behavior of fail_fast and TEST.}
 \par
}}
{\xe \v testFlagOverridesEnvVar\:googletest-failfast-unittest.GTestFailFastUnitTest}
{\xe \v googletest-failfast-unittest.GTestFailFastUnitTest\:testFlagOverridesEnvVar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-failfast-unittest.GTestFailFastUnitTest.testFlagOverridesEnvVar (  {\i self})}}
\par
{\bkmkstart AAAAAAABTP}
{\bkmkend AAAAAAABTP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests precedence of flag over env var.}
 \par
}}
{\xe \v testGoogletestEnvVar\:googletest-failfast-unittest.GTestFailFastUnitTest}
{\xe \v googletest-failfast-unittest.GTestFailFastUnitTest\:testGoogletestEnvVar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-failfast-unittest.GTestFailFastUnitTest.testGoogletestEnvVar (  {\i self})}}
\par
{\bkmkstart AAAAAAABTQ}
{\bkmkend AAAAAAABTQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the behavior of specifying fail_fast via Googletest env var.}
 \par
}}
{\xe \v testGoogletestEnvVarOverridesBazelEnvVar\:googletest-failfast-unittest.GTestFailFastUnitTest}
{\xe \v googletest-failfast-unittest.GTestFailFastUnitTest\:testGoogletestEnvVarOverridesBazelEnvVar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-failfast-unittest.GTestFailFastUnitTest.testGoogletestEnvVarOverridesBazelEnvVar (  {\i self})}}
\par
{\bkmkstart AAAAAAABTR}
{\bkmkend AAAAAAABTR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests that the Googletest native env var over Bazel testbridge.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-failfast-unittest.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
googletest-filter-unittest.GTestFilterUnitTest Class Reference\par \pard\plain 
{\tc\tcl2 \v googletest-filter-unittest.GTestFilterUnitTest}
{\xe \v googletest-filter-unittest.GTestFilterUnitTest}
{\bkmkstart AAAAAAABTS}
{\bkmkend AAAAAAABTS}
Inheritance diagram for googletest-filter-unittest.GTestFilterUnitTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgoogletest-filter-unittest_1_1_g_test_filter_unit_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b AssertSetEqual} (self, lhs, rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b AssertPartitionIsValid} (self, set_var, list_of_sets)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b AdjustForParameterizedTests} (self, tests_to_run)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b RunAndVerify} (self, gtest_filter, tests_to_run)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b RunAndVerifyWithSharding} (self, gtest_filter, total_shards, tests_to_run, args=None, check_exit_0=False)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b RunAndVerifyAllowingDisabled} (self, gtest_filter, tests_to_run)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b setUp} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testDefaultBehavior} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testDefaultBehaviorWithShards} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testEmptyFilter} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testBadFilter} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testFullName} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testUniversalFilters} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testFilterByTestCase} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testFilterByTest} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testFilterDisabledTests} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testWildcardInTestCaseName} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testWildcardInTestName} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testFilterWithoutDot} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testTwoPatterns} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testThreePatterns} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testNegativeFilters} (self){\bkmkstart AAAAAAABTT}
{\bkmkend AAAAAAABTT}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testFlagOverridesEnvVar} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testShardStatusFileIsCreated} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testShardStatusFileIsCreatedWithListTests} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testDisabledBanner} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testShardingWorksWithDeathTests} (self)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the env variable or the command line flag to filter tests.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v AdjustForParameterizedTests\:googletest-filter-unittest.GTestFilterUnitTest}
{\xe \v googletest-filter-unittest.GTestFilterUnitTest\:AdjustForParameterizedTests}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-filter-unittest.GTestFilterUnitTest.AdjustForParameterizedTests (  {\i self},   {\i tests_to_run})}}
\par
{\bkmkstart AAAAAAABTU}
{\bkmkend AAAAAAABTU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Adjust tests_to_run in case value parameterized tests are disabled.}
 \par
}}
{\xe \v AssertPartitionIsValid\:googletest-filter-unittest.GTestFilterUnitTest}
{\xe \v googletest-filter-unittest.GTestFilterUnitTest\:AssertPartitionIsValid}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-filter-unittest.GTestFilterUnitTest.AssertPartitionIsValid (  {\i self},   {\i set_var},   {\i list_of_sets})}}
\par
{\bkmkstart AAAAAAABTV}
{\bkmkend AAAAAAABTV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Asserts that list_of_sets is a valid partition of set_var.}
 \par
}}
{\xe \v AssertSetEqual\:googletest-filter-unittest.GTestFilterUnitTest}
{\xe \v googletest-filter-unittest.GTestFilterUnitTest\:AssertSetEqual}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-filter-unittest.GTestFilterUnitTest.AssertSetEqual (  {\i self},   {\i lhs},   {\i rhs})}}
\par
{\bkmkstart AAAAAAABTW}
{\bkmkend AAAAAAABTW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Asserts that two sets are equal.}
 \par
}}
{\xe \v RunAndVerify\:googletest-filter-unittest.GTestFilterUnitTest}
{\xe \v googletest-filter-unittest.GTestFilterUnitTest\:RunAndVerify}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-filter-unittest.GTestFilterUnitTest.RunAndVerify (  {\i self},   {\i gtest_filter},   {\i tests_to_run})}}
\par
{\bkmkstart AAAAAAABTX}
{\bkmkend AAAAAAABTX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Checks that the binary runs correct set of tests for a given filter.}
 \par
}}
{\xe \v RunAndVerifyAllowingDisabled\:googletest-filter-unittest.GTestFilterUnitTest}
{\xe \v googletest-filter-unittest.GTestFilterUnitTest\:RunAndVerifyAllowingDisabled}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-filter-unittest.GTestFilterUnitTest.RunAndVerifyAllowingDisabled (  {\i self},   {\i gtest_filter},   {\i tests_to_run})}}
\par
{\bkmkstart AAAAAAABTY}
{\bkmkend AAAAAAABTY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Checks that the binary runs correct set of tests for the given filter.\par
\par
Runs googletest-filter-unittest_ with the given filter, and enables\par
disabled tests. Verifies that the right set of tests were run.\par
\par
Args:\par
  gtest_filter: A filter to apply to the tests.\par
  tests_to_run: A set of tests expected to run.\par
}
 \par
}}
{\xe \v RunAndVerifyWithSharding\:googletest-filter-unittest.GTestFilterUnitTest}
{\xe \v googletest-filter-unittest.GTestFilterUnitTest\:RunAndVerifyWithSharding}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-filter-unittest.GTestFilterUnitTest.RunAndVerifyWithSharding (  {\i self},   {\i gtest_filter},   {\i total_shards},   {\i tests_to_run},   {\i args} = {\f2 None},   {\i check_exit_0} = {\f2 False})}}
\par
{\bkmkstart AAAAAAABTZ}
{\bkmkend AAAAAAABTZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Checks that binary runs correct tests for the given filter and shard.\par
\par
Runs all shards of googletest-filter-unittest_ with the given filter, and\par
verifies that the right set of tests were run. The union of tests run\par
on each shard should be identical to tests_to_run, without duplicates.\par
If check_exit_0, .\par
\par
Args:\par
  gtest_filter: A filter to apply to the tests.\par
  total_shards: A total number of shards to split test run into.\par
  tests_to_run: A set of tests expected to run.\par
  args   :      Arguments to pass to the to the test binary.\par
  check_exit_0: When set to a true value, make sure that all shards\par
                return 0.\par
}
 \par
}}
{\xe \v setUp\:googletest-filter-unittest.GTestFilterUnitTest}
{\xe \v googletest-filter-unittest.GTestFilterUnitTest\:setUp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-filter-unittest.GTestFilterUnitTest.setUp (  {\i self})}}
\par
{\bkmkstart AAAAAAABUA}
{\bkmkend AAAAAAABUA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Sets up test case.\par
\par
Determines whether value-parameterized tests are enabled in the binary and\par
sets the flags accordingly.\par
}
 \par
}}
{\xe \v testBadFilter\:googletest-filter-unittest.GTestFilterUnitTest}
{\xe \v googletest-filter-unittest.GTestFilterUnitTest\:testBadFilter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-filter-unittest.GTestFilterUnitTest.testBadFilter (  {\i self})}}
\par
{\bkmkstart AAAAAAABUB}
{\bkmkend AAAAAAABUB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests a filter that matches nothing.}
 \par
}}
{\xe \v testDefaultBehavior\:googletest-filter-unittest.GTestFilterUnitTest}
{\xe \v googletest-filter-unittest.GTestFilterUnitTest\:testDefaultBehavior}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-filter-unittest.GTestFilterUnitTest.testDefaultBehavior (  {\i self})}}
\par
{\bkmkstart AAAAAAABUC}
{\bkmkend AAAAAAABUC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the behavior of not specifying the filter.}
 \par
}}
{\xe \v testDefaultBehaviorWithShards\:googletest-filter-unittest.GTestFilterUnitTest}
{\xe \v googletest-filter-unittest.GTestFilterUnitTest\:testDefaultBehaviorWithShards}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-filter-unittest.GTestFilterUnitTest.testDefaultBehaviorWithShards (  {\i self})}}
\par
{\bkmkstart AAAAAAABUD}
{\bkmkend AAAAAAABUD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the behavior without the filter, with sharding enabled.}
 \par
}}
{\xe \v testDisabledBanner\:googletest-filter-unittest.GTestFilterUnitTest}
{\xe \v googletest-filter-unittest.GTestFilterUnitTest\:testDisabledBanner}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-filter-unittest.GTestFilterUnitTest.testDisabledBanner (  {\i self})}}
\par
{\bkmkstart AAAAAAABUE}
{\bkmkend AAAAAAABUE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests that the disabled banner prints only tests that match filter.}
 \par
}}
{\xe \v testEmptyFilter\:googletest-filter-unittest.GTestFilterUnitTest}
{\xe \v googletest-filter-unittest.GTestFilterUnitTest\:testEmptyFilter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-filter-unittest.GTestFilterUnitTest.testEmptyFilter (  {\i self})}}
\par
{\bkmkstart AAAAAAABUF}
{\bkmkend AAAAAAABUF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests an empty filter.}
 \par
}}
{\xe \v testFilterByTest\:googletest-filter-unittest.GTestFilterUnitTest}
{\xe \v googletest-filter-unittest.GTestFilterUnitTest\:testFilterByTest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-filter-unittest.GTestFilterUnitTest.testFilterByTest (  {\i self})}}
\par
{\bkmkstart AAAAAAABUG}
{\bkmkend AAAAAAABUG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests filtering by test name.}
 \par
}}
{\xe \v testFilterByTestCase\:googletest-filter-unittest.GTestFilterUnitTest}
{\xe \v googletest-filter-unittest.GTestFilterUnitTest\:testFilterByTestCase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-filter-unittest.GTestFilterUnitTest.testFilterByTestCase (  {\i self})}}
\par
{\bkmkstart AAAAAAABUH}
{\bkmkend AAAAAAABUH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests filtering by test case name.}
 \par
}}
{\xe \v testFilterDisabledTests\:googletest-filter-unittest.GTestFilterUnitTest}
{\xe \v googletest-filter-unittest.GTestFilterUnitTest\:testFilterDisabledTests}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-filter-unittest.GTestFilterUnitTest.testFilterDisabledTests (  {\i self})}}
\par
{\bkmkstart AAAAAAABUI}
{\bkmkend AAAAAAABUI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Select only the disabled tests to run.}
 \par
}}
{\xe \v testFilterWithoutDot\:googletest-filter-unittest.GTestFilterUnitTest}
{\xe \v googletest-filter-unittest.GTestFilterUnitTest\:testFilterWithoutDot}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-filter-unittest.GTestFilterUnitTest.testFilterWithoutDot (  {\i self})}}
\par
{\bkmkstart AAAAAAABUJ}
{\bkmkend AAAAAAABUJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests a filter that has no '.' in it.}
 \par
}}
{\xe \v testFlagOverridesEnvVar\:googletest-filter-unittest.GTestFilterUnitTest}
{\xe \v googletest-filter-unittest.GTestFilterUnitTest\:testFlagOverridesEnvVar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-filter-unittest.GTestFilterUnitTest.testFlagOverridesEnvVar (  {\i self})}}
\par
{\bkmkstart AAAAAAABUK}
{\bkmkend AAAAAAABUK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests that the filter flag overrides the filtering env. variable.}
 \par
}}
{\xe \v testFullName\:googletest-filter-unittest.GTestFilterUnitTest}
{\xe \v googletest-filter-unittest.GTestFilterUnitTest\:testFullName}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-filter-unittest.GTestFilterUnitTest.testFullName (  {\i self})}}
\par
{\bkmkstart AAAAAAABUL}
{\bkmkend AAAAAAABUL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests filtering by full name.}
 \par
}}
{\xe \v testShardingWorksWithDeathTests\:googletest-filter-unittest.GTestFilterUnitTest}
{\xe \v googletest-filter-unittest.GTestFilterUnitTest\:testShardingWorksWithDeathTests}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-filter-unittest.GTestFilterUnitTest.testShardingWorksWithDeathTests (  {\i self})}}
\par
{\bkmkstart AAAAAAABUM}
{\bkmkend AAAAAAABUM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests integration with death tests and sharding.}
 \par
}}
{\xe \v testShardStatusFileIsCreated\:googletest-filter-unittest.GTestFilterUnitTest}
{\xe \v googletest-filter-unittest.GTestFilterUnitTest\:testShardStatusFileIsCreated}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-filter-unittest.GTestFilterUnitTest.testShardStatusFileIsCreated (  {\i self})}}
\par
{\bkmkstart AAAAAAABUN}
{\bkmkend AAAAAAABUN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests that the shard file is created if specified in the environment.}
 \par
}}
{\xe \v testShardStatusFileIsCreatedWithListTests\:googletest-filter-unittest.GTestFilterUnitTest}
{\xe \v googletest-filter-unittest.GTestFilterUnitTest\:testShardStatusFileIsCreatedWithListTests}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-filter-unittest.GTestFilterUnitTest.testShardStatusFileIsCreatedWithListTests (  {\i self})}}
\par
{\bkmkstart AAAAAAABUO}
{\bkmkend AAAAAAABUO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests that the shard file is created with the "list_tests" flag.}
 \par
}}
{\xe \v testThreePatterns\:googletest-filter-unittest.GTestFilterUnitTest}
{\xe \v googletest-filter-unittest.GTestFilterUnitTest\:testThreePatterns}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-filter-unittest.GTestFilterUnitTest.testThreePatterns (  {\i self})}}
\par
{\bkmkstart AAAAAAABUP}
{\bkmkend AAAAAAABUP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests filters that consist of three patterns.}
 \par
}}
{\xe \v testTwoPatterns\:googletest-filter-unittest.GTestFilterUnitTest}
{\xe \v googletest-filter-unittest.GTestFilterUnitTest\:testTwoPatterns}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-filter-unittest.GTestFilterUnitTest.testTwoPatterns (  {\i self})}}
\par
{\bkmkstart AAAAAAABUQ}
{\bkmkend AAAAAAABUQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests filters that consist of two patterns.}
 \par
}}
{\xe \v testUniversalFilters\:googletest-filter-unittest.GTestFilterUnitTest}
{\xe \v googletest-filter-unittest.GTestFilterUnitTest\:testUniversalFilters}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-filter-unittest.GTestFilterUnitTest.testUniversalFilters (  {\i self})}}
\par
{\bkmkstart AAAAAAABUR}
{\bkmkend AAAAAAABUR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests filters that match everything.}
 \par
}}
{\xe \v testWildcardInTestCaseName\:googletest-filter-unittest.GTestFilterUnitTest}
{\xe \v googletest-filter-unittest.GTestFilterUnitTest\:testWildcardInTestCaseName}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-filter-unittest.GTestFilterUnitTest.testWildcardInTestCaseName (  {\i self})}}
\par
{\bkmkstart AAAAAAABUS}
{\bkmkend AAAAAAABUS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests using wildcard in the test case name.}
 \par
}}
{\xe \v testWildcardInTestName\:googletest-filter-unittest.GTestFilterUnitTest}
{\xe \v googletest-filter-unittest.GTestFilterUnitTest\:testWildcardInTestName}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-filter-unittest.GTestFilterUnitTest.testWildcardInTestName (  {\i self})}}
\par
{\bkmkstart AAAAAAABUT}
{\bkmkend AAAAAAABUT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests using wildcard in the test name.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-filter-unittest.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::GTestFlagSaver Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::GTestFlagSaver}
{\xe \v testing::internal::GTestFlagSaver}
{\bkmkstart AAAAAAADCW}
{\bkmkend AAAAAAADCW}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest-internal-inl.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
googletest-global-environment-unittest.GTestGlobalEnvironmentUnitTest Class Reference\par \pard\plain 
{\tc\tcl2 \v googletest-global-environment-unittest.GTestGlobalEnvironmentUnitTest}
{\xe \v googletest-global-environment-unittest.GTestGlobalEnvironmentUnitTest}
{\bkmkstart AAAAAAABUU}
{\bkmkend AAAAAAABUU}
Inheritance diagram for googletest-global-environment-unittest.GTestGlobalEnvironmentUnitTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgoogletest-global-environment-unittest_1_1_g_test_global_environment_unit_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testEnvironmentSetUpFails} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testEnvironmentSetUpAndTornDownForEachRepeat} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testEnvironmentSetUpAndTornDownOnce} (self)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests global test environment failures.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v testEnvironmentSetUpAndTornDownForEachRepeat\:googletest-global-environment-unittest.GTestGlobalEnvironmentUnitTest}
{\xe \v googletest-global-environment-unittest.GTestGlobalEnvironmentUnitTest\:testEnvironmentSetUpAndTornDownForEachRepeat}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-global-environment-unittest.GTestGlobalEnvironmentUnitTest.testEnvironmentSetUpAndTornDownForEachRepeat (  {\i self})}}
\par
{\bkmkstart AAAAAAABUV}
{\bkmkend AAAAAAABUV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the behavior of test environments and gtest_repeat.}
 \par
}}
{\xe \v testEnvironmentSetUpAndTornDownOnce\:googletest-global-environment-unittest.GTestGlobalEnvironmentUnitTest}
{\xe \v googletest-global-environment-unittest.GTestGlobalEnvironmentUnitTest\:testEnvironmentSetUpAndTornDownOnce}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-global-environment-unittest.GTestGlobalEnvironmentUnitTest.testEnvironmentSetUpAndTornDownOnce (  {\i self})}}
\par
{\bkmkstart AAAAAAABUW}
{\bkmkend AAAAAAABUW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests environment and --gtest_recreate_environments_when_repeating.}
 \par
}}
{\xe \v testEnvironmentSetUpFails\:googletest-global-environment-unittest.GTestGlobalEnvironmentUnitTest}
{\xe \v googletest-global-environment-unittest.GTestGlobalEnvironmentUnitTest\:testEnvironmentSetUpFails}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-global-environment-unittest.GTestGlobalEnvironmentUnitTest.testEnvironmentSetUpFails (  {\i self})}}
\par
{\bkmkstart AAAAAAABUX}
{\bkmkend AAAAAAABUX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the behavior of not specifying the fail_fast.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-global-environment-unittest.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::GtestGreaterThanMatcher< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::GtestGreaterThanMatcher< T >}
{\xe \v testing::gmock_matchers_test::GtestGreaterThanMatcher< T >}
{\bkmkstart AAAAAAACQY}
{\bkmkend AAAAAAACQY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b is_gtest_matcher} = void{\bkmkstart AAAAAAACQZ}
{\bkmkend AAAAAAACQZ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeTo} (ostream *os) const{\bkmkstart AAAAAAACRA}
{\bkmkend AAAAAAACRA}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeNegationTo} (ostream *os) const{\bkmkstart AAAAAAACRB}
{\bkmkend AAAAAAACRB}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b MatchAndExplain} (T lhs, MatchResultListener *listener) const{\bkmkstart AAAAAAACRC}
{\bkmkend AAAAAAACRC}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T {\b rhs}{\bkmkstart AAAAAAACRD}
{\bkmkend AAAAAAACRD}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-matchers_test.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest_help_test.GTestHelpTest Class Reference\par \pard\plain 
{\tc\tcl2 \v gtest_help_test.GTestHelpTest}
{\xe \v gtest_help_test.GTestHelpTest}
{\bkmkstart AAAAAAABWW}
{\bkmkend AAAAAAABWW}
Inheritance diagram for gtest_help_test.GTestHelpTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__help__test_1_1_g_test_help_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b TestHelpFlag} (self, flag)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b TestUnknownFlagWithAbseil} (self, flag)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b TestNonHelpFlag} (self, flag)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testPrintsHelpWithFullFlag} (self){\bkmkstart AAAAAAABWX}
{\bkmkend AAAAAAABWX}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testPrintsHelpWithUnrecognizedGoogleTestFlag} (self){\bkmkstart AAAAAAABWY}
{\bkmkend AAAAAAABWY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testRunsTestsWithoutHelpFlag} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testRunsTestsWithGtestInternalFlag} (self)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the --help flag and its equivalent forms.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v TestHelpFlag\:gtest_help_test.GTestHelpTest}
{\xe \v gtest_help_test.GTestHelpTest\:TestHelpFlag}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_help_test.GTestHelpTest.TestHelpFlag (  {\i self},   {\i flag})}}
\par
{\bkmkstart AAAAAAABWZ}
{\bkmkend AAAAAAABWZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Verifies correct behavior when help flag is specified.\par
\par
The right message must be printed and the tests must\par
skipped when the given flag is specified.\par
\par
Args:\par
  flag:  A flag to pass to the binary or None.\par
}
 \par
}}
{\xe \v TestNonHelpFlag\:gtest_help_test.GTestHelpTest}
{\xe \v gtest_help_test.GTestHelpTest\:TestNonHelpFlag}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_help_test.GTestHelpTest.TestNonHelpFlag (  {\i self},   {\i flag})}}
\par
{\bkmkstart AAAAAAABXA}
{\bkmkend AAAAAAABXA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Verifies correct behavior when no help flag is specified.\par
\par
Verifies that when no help flag is specified, the tests are run\par
and the help message is not printed.\par
\par
Args:\par
  flag:  A flag to pass to the binary or None.\par
}
 \par
}}
{\xe \v testRunsTestsWithGtestInternalFlag\:gtest_help_test.GTestHelpTest}
{\xe \v gtest_help_test.GTestHelpTest\:testRunsTestsWithGtestInternalFlag}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_help_test.GTestHelpTest.testRunsTestsWithGtestInternalFlag (  {\i self})}}
\par
{\bkmkstart AAAAAAABXB}
{\bkmkend AAAAAAABXB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Verifies that the tests are run and no help message is printed when\par
a flag starting with Google Test prefix and 'internal_' is supplied.}
 \par
}}
{\xe \v testRunsTestsWithoutHelpFlag\:gtest_help_test.GTestHelpTest}
{\xe \v gtest_help_test.GTestHelpTest\:testRunsTestsWithoutHelpFlag}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_help_test.GTestHelpTest.testRunsTestsWithoutHelpFlag (  {\i self})}}
\par
{\bkmkstart AAAAAAABXC}
{\bkmkend AAAAAAABXC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Verifies that when no help flag is specified, the tests are run\par
and the help message is not printed.}
 \par
}}
{\xe \v TestUnknownFlagWithAbseil\:gtest_help_test.GTestHelpTest}
{\xe \v gtest_help_test.GTestHelpTest\:TestUnknownFlagWithAbseil}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_help_test.GTestHelpTest.TestUnknownFlagWithAbseil (  {\i self},   {\i flag})}}
\par
{\bkmkstart AAAAAAABXD}
{\bkmkend AAAAAAABXD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Verifies correct behavior when an unknown flag is specified.\par
\par
The right message must be printed and the tests must\par
skipped when the given flag is specified.\par
\par
Args:\par
  flag:  A flag to pass to the binary or None.\par
}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_help_test.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
googletest-json-outfiles-test.GTestJsonOutFilesTest Class Reference\par \pard\plain 
{\tc\tcl2 \v googletest-json-outfiles-test.GTestJsonOutFilesTest}
{\xe \v googletest-json-outfiles-test.GTestJsonOutFilesTest}
{\bkmkstart AAAAAAABUY}
{\bkmkend AAAAAAABUY}
Inheritance diagram for googletest-json-outfiles-test.GTestJsonOutFilesTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgoogletest-json-outfiles-test_1_1_g_test_json_out_files_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b setUp} (self){\bkmkstart AAAAAAABUZ}
{\bkmkend AAAAAAABUZ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b tearDown} (self){\bkmkstart AAAAAAABVA}
{\bkmkend AAAAAAABVA}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b DeleteFilesAndDir} (self){\bkmkstart AAAAAAABVB}
{\bkmkend AAAAAAABVB}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testOutfile1} (self){\bkmkstart AAAAAAABVC}
{\bkmkend AAAAAAABVC}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testOutfile2} (self){\bkmkstart AAAAAAABVD}
{\bkmkend AAAAAAABVD}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b output_dir_}{\bkmkstart AAAAAAABVE}
{\bkmkend AAAAAAABVE}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Unit test for Google Test's JSON output functionality.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-json-outfiles-test.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
googletest-json-output-unittest.GTestJsonOutputUnitTest Class Reference\par \pard\plain 
{\tc\tcl2 \v googletest-json-output-unittest.GTestJsonOutputUnitTest}
{\xe \v googletest-json-output-unittest.GTestJsonOutputUnitTest}
{\bkmkstart AAAAAAABVF}
{\bkmkend AAAAAAABVF}
Inheritance diagram for googletest-json-output-unittest.GTestJsonOutputUnitTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgoogletest-json-output-unittest_1_1_g_test_json_output_unit_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testNonEmptyJsonOutput} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testNoTestJsonOutput} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testTimestampValue} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testDefaultOutputFile} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testSuppressedJsonOutput} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testFilteredTestJsonOutput} (self)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Unit test for Google Test's JSON output functionality.\par
}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v testDefaultOutputFile\:googletest-json-output-unittest.GTestJsonOutputUnitTest}
{\xe \v googletest-json-output-unittest.GTestJsonOutputUnitTest\:testDefaultOutputFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-json-output-unittest.GTestJsonOutputUnitTest.testDefaultOutputFile (  {\i self})}}
\par
{\bkmkstart AAAAAAABVG}
{\bkmkend AAAAAAABVG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Verifies the default output file name.\par
\par
Confirms that Google Test produces an JSON output file with the expected\par
default name if no name is explicitly specified.\par
}
 \par
}}
{\xe \v testFilteredTestJsonOutput\:googletest-json-output-unittest.GTestJsonOutputUnitTest}
{\xe \v googletest-json-output-unittest.GTestJsonOutputUnitTest\:testFilteredTestJsonOutput}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-json-output-unittest.GTestJsonOutputUnitTest.testFilteredTestJsonOutput (  {\i self})}}
\par
{\bkmkstart AAAAAAABVH}
{\bkmkend AAAAAAABVH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Verifies JSON output when a filter is applied.\par
\par
Runs a test program that executes only some tests and verifies that\par
non-selected tests do not show up in the JSON output.\par
}
 \par
}}
{\xe \v testNonEmptyJsonOutput\:googletest-json-output-unittest.GTestJsonOutputUnitTest}
{\xe \v googletest-json-output-unittest.GTestJsonOutputUnitTest\:testNonEmptyJsonOutput}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-json-output-unittest.GTestJsonOutputUnitTest.testNonEmptyJsonOutput (  {\i self})}}
\par
{\bkmkstart AAAAAAABVI}
{\bkmkend AAAAAAABVI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Verifies JSON output for a Google Test binary with non-empty output.\par
\par
Runs a test program that generates a non-empty JSON output, and\par
tests that the JSON output is expected.\par
}
 \par
}}
{\xe \v testNoTestJsonOutput\:googletest-json-output-unittest.GTestJsonOutputUnitTest}
{\xe \v googletest-json-output-unittest.GTestJsonOutputUnitTest\:testNoTestJsonOutput}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-json-output-unittest.GTestJsonOutputUnitTest.testNoTestJsonOutput (  {\i self})}}
\par
{\bkmkstart AAAAAAABVJ}
{\bkmkend AAAAAAABVJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Verifies JSON output for a Google Test binary without actual tests.\par
\par
Runs a test program that generates an JSON output for a binary with no\par
tests, and tests that the JSON output is expected.\par
}
 \par
}}
{\xe \v testSuppressedJsonOutput\:googletest-json-output-unittest.GTestJsonOutputUnitTest}
{\xe \v googletest-json-output-unittest.GTestJsonOutputUnitTest\:testSuppressedJsonOutput}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-json-output-unittest.GTestJsonOutputUnitTest.testSuppressedJsonOutput (  {\i self})}}
\par
{\bkmkstart AAAAAAABVK}
{\bkmkend AAAAAAABVK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Verifies that no JSON output is generated.\par
\par
Tests that no JSON file is generated if the default JSON listener is\par
shut down before RUN_ALL_TESTS is invoked.\par
}
 \par
}}
{\xe \v testTimestampValue\:googletest-json-output-unittest.GTestJsonOutputUnitTest}
{\xe \v googletest-json-output-unittest.GTestJsonOutputUnitTest\:testTimestampValue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-json-output-unittest.GTestJsonOutputUnitTest.testTimestampValue (  {\i self})}}
\par
{\bkmkstart AAAAAAABVL}
{\bkmkend AAAAAAABVL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Checks whether the timestamp attribute in the JSON output is valid.\par
\par
Runs a test program that generates an empty JSON output, and checks if\par
the timestamp attribute in the testsuites tag is valid.\par
}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-json-output-unittest.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest_list_output_unittest.GTestListTestsOutputUnitTest Class Reference\par \pard\plain 
{\tc\tcl2 \v gtest_list_output_unittest.GTestListTestsOutputUnitTest}
{\xe \v gtest_list_output_unittest.GTestListTestsOutputUnitTest}
{\bkmkstart AAAAAAABXE}
{\bkmkend AAAAAAABXE}
Inheritance diagram for gtest_list_output_unittest.GTestListTestsOutputUnitTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__list__output__unittest_1_1_g_test_list_tests_output_unit_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testXml} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testJSON} (self)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Unit test for Google Test's list tests with output to file functionality.\par
}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v testJSON\:gtest_list_output_unittest.GTestListTestsOutputUnitTest}
{\xe \v gtest_list_output_unittest.GTestListTestsOutputUnitTest\:testJSON}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_list_output_unittest.GTestListTestsOutputUnitTest.testJSON (  {\i self})}}
\par
{\bkmkstart AAAAAAABXF}
{\bkmkend AAAAAAABXF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Verifies XML output for listing tests in a Google Test binary.\par
\par
Runs a test program that generates an empty XML output, and\par
tests that the XML output is expected.\par
}
 \par
}}
{\xe \v testXml\:gtest_list_output_unittest.GTestListTestsOutputUnitTest}
{\xe \v gtest_list_output_unittest.GTestListTestsOutputUnitTest\:testXml}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_list_output_unittest.GTestListTestsOutputUnitTest.testXml (  {\i self})}}
\par
{\bkmkstart AAAAAAABXG}
{\bkmkend AAAAAAABXG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Verifies XML output for listing tests in a Google Test binary.\par
\par
Runs a test program that generates an empty XML output, and\par
tests that the XML output is expected.\par
}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_list_output_unittest.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
googletest-list-tests-unittest.GTestListTestsUnitTest Class Reference\par \pard\plain 
{\tc\tcl2 \v googletest-list-tests-unittest.GTestListTestsUnitTest}
{\xe \v googletest-list-tests-unittest.GTestListTestsUnitTest}
{\bkmkstart AAAAAAABVM}
{\bkmkend AAAAAAABVM}
Inheritance diagram for googletest-list-tests-unittest.GTestListTestsUnitTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgoogletest-list-tests-unittest_1_1_g_test_list_tests_unit_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b RunAndVerify} (self, flag_value, expected_output_re, other_flag)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testDefaultBehavior} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testFlag} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testOverrideNonFilterFlags} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testWithFilterFlags} (self)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests using the --gtest_list_tests flag to list all tests.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v RunAndVerify\:googletest-list-tests-unittest.GTestListTestsUnitTest}
{\xe \v googletest-list-tests-unittest.GTestListTestsUnitTest\:RunAndVerify}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-list-tests-unittest.GTestListTestsUnitTest.RunAndVerify (  {\i self},   {\i flag_value},   {\i expected_output_re},   {\i other_flag})}}
\par
{\bkmkstart AAAAAAABVN}
{\bkmkend AAAAAAABVN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Runs googletest-list-tests-unittest_ and verifies that it prints\par
the correct tests.\par
\par
Args:\par
  flag_value:         value of the --gtest_list_tests flag;\par
                      None if the flag should not be present.\par
  expected_output_re: regular expression that matches the expected\par
                      output after running command;\par
  other_flag:         a different flag to be passed to command\par
                      along with gtest_list_tests;\par
                      None if the flag should not be present.\par
}
 \par
}}
{\xe \v testDefaultBehavior\:googletest-list-tests-unittest.GTestListTestsUnitTest}
{\xe \v googletest-list-tests-unittest.GTestListTestsUnitTest\:testDefaultBehavior}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-list-tests-unittest.GTestListTestsUnitTest.testDefaultBehavior (  {\i self})}}
\par
{\bkmkstart AAAAAAABVO}
{\bkmkend AAAAAAABVO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the behavior of the default mode.}
 \par
}}
{\xe \v testFlag\:googletest-list-tests-unittest.GTestListTestsUnitTest}
{\xe \v googletest-list-tests-unittest.GTestListTestsUnitTest\:testFlag}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-list-tests-unittest.GTestListTestsUnitTest.testFlag (  {\i self})}}
\par
{\bkmkstart AAAAAAABVP}
{\bkmkend AAAAAAABVP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests using the --gtest_list_tests flag.}
 \par
}}
{\xe \v testOverrideNonFilterFlags\:googletest-list-tests-unittest.GTestListTestsUnitTest}
{\xe \v googletest-list-tests-unittest.GTestListTestsUnitTest\:testOverrideNonFilterFlags}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-list-tests-unittest.GTestListTestsUnitTest.testOverrideNonFilterFlags (  {\i self})}}
\par
{\bkmkstart AAAAAAABVQ}
{\bkmkend AAAAAAABVQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests that --gtest_list_tests overrides the non-filter flags.}
 \par
}}
{\xe \v testWithFilterFlags\:googletest-list-tests-unittest.GTestListTestsUnitTest}
{\xe \v googletest-list-tests-unittest.GTestListTestsUnitTest\:testWithFilterFlags}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-list-tests-unittest.GTestListTestsUnitTest.testWithFilterFlags (  {\i self})}}
\par
{\bkmkstart AAAAAAABVR}
{\bkmkend AAAAAAABVR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests that --gtest_list_tests takes into account the\par
--gtest_filter flag.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-list-tests-unittest.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::GTestLog Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::GTestLog}
{\xe \v testing::internal::GTestLog}
{\bkmkstart AAAAAAADCX}
{\bkmkend AAAAAAADCX}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b GTestLog} (GTestLogSeverity severity, const char *file, int line){\bkmkstart AAAAAAADCY}
{\bkmkend AAAAAAADCY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

::std::ostream & {\b GetStream} (){\bkmkstart AAAAAAADCZ}
{\bkmkend AAAAAAADCZ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-port.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest-port.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::GTestMatcherTestP Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::GTestMatcherTestP}
{\xe \v testing::gmock_matchers_test::GTestMatcherTestP}
{\bkmkstart AAAAAAACRE}
{\bkmkend AAAAAAACRE}
Inheritance diagram for testing::gmock_matchers_test::GTestMatcherTestP:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__matchers__test_1_1_g_test_matcher_test_p.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > {\b Matcher}< T > {\b GreaterThan} (T n){\bkmkstart AAAAAAACRF}
{\bkmkend AAAAAAACRF}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const bool {\b use_gtest_matcher_} = GetParam(){\bkmkstart AAAAAAACRG}
{\bkmkend AAAAAAACRG}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-matchers_test.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::GTestMutexLock Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::GTestMutexLock}
{\xe \v testing::internal::GTestMutexLock}
{\bkmkstart AAAAAAADDA}
{\bkmkend AAAAAAADDA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b GTestMutexLock} ({\b Mutex} *){\bkmkstart AAAAAAADDB}
{\bkmkend AAAAAAADDB}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-port.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::GTestNonCopyable Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::GTestNonCopyable}
{\xe \v testing::internal::GTestNonCopyable}
{\bkmkstart AAAAAAADDC}
{\bkmkend AAAAAAADDC}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b GTestNonCopyable} (const {\b GTestNonCopyable} &)=delete{\bkmkstart AAAAAAADDD}
{\bkmkend AAAAAAADDD}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b GTestNonCopyable} & {\b operator=} (const {\b GTestNonCopyable} &)=delete{\bkmkstart AAAAAAADDE}
{\bkmkend AAAAAAADDE}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
googletest-output-test.GTestOutputTest Class Reference\par \pard\plain 
{\tc\tcl2 \v googletest-output-test.GTestOutputTest}
{\xe \v googletest-output-test.GTestOutputTest}
{\bkmkstart AAAAAAABVS}
{\bkmkend AAAAAAABVS}
Inheritance diagram for googletest-output-test.GTestOutputTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgoogletest-output-test_1_1_g_test_output_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b RemoveUnsupportedTests} (self, test_output){\bkmkstart AAAAAAABVT}
{\bkmkend AAAAAAABVT}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testOutput} (self){\bkmkstart AAAAAAABVU}
{\bkmkend AAAAAAABVU}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-output-test.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
googletest-param-test-invalid-name1-test.GTestParamTestInvalidName1Test Class Reference\par \pard\plain 
{\tc\tcl2 \v googletest-param-test-invalid-name1-test.GTestParamTestInvalidName1Test}
{\xe \v googletest-param-test-invalid-name1-test.GTestParamTestInvalidName1Test}
{\bkmkstart AAAAAAABVV}
{\bkmkend AAAAAAABVV}
Inheritance diagram for googletest-param-test-invalid-name1-test.GTestParamTestInvalidName1Test:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgoogletest-param-test-invalid-name1-test_1_1_g_test_param_test_invalid_name1_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testExitCodeAndOutput} (self){\bkmkstart AAAAAAABVW}
{\bkmkend AAAAAAABVW}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-invalid-name1-test.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
googletest-param-test-invalid-name2-test.GTestParamTestInvalidName2Test Class Reference\par \pard\plain 
{\tc\tcl2 \v googletest-param-test-invalid-name2-test.GTestParamTestInvalidName2Test}
{\xe \v googletest-param-test-invalid-name2-test.GTestParamTestInvalidName2Test}
{\bkmkstart AAAAAAABVX}
{\bkmkend AAAAAAABVX}
Inheritance diagram for googletest-param-test-invalid-name2-test.GTestParamTestInvalidName2Test:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgoogletest-param-test-invalid-name2-test_1_1_g_test_param_test_invalid_name2_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testExitCodeAndOutput} (self){\bkmkstart AAAAAAABVY}
{\bkmkend AAAAAAABVY}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-invalid-name2-test.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
googletest-setuptestsuite-test.GTestSetUpTestSuiteTest Class Reference\par \pard\plain 
{\tc\tcl2 \v googletest-setuptestsuite-test.GTestSetUpTestSuiteTest}
{\xe \v googletest-setuptestsuite-test.GTestSetUpTestSuiteTest}
{\bkmkstart AAAAAAABVZ}
{\bkmkend AAAAAAABVZ}
Inheritance diagram for googletest-setuptestsuite-test.GTestSetUpTestSuiteTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgoogletest-setuptestsuite-test_1_1_g_test_set_up_test_suite_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testSetupErrorAndTearDownError} (self){\bkmkstart AAAAAAABWA}
{\bkmkend AAAAAAABWA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-setuptestsuite-test.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
googletest-shuffle-test.GTestShuffleUnitTest Class Reference\par \pard\plain 
{\tc\tcl2 \v googletest-shuffle-test.GTestShuffleUnitTest}
{\xe \v googletest-shuffle-test.GTestShuffleUnitTest}
{\bkmkstart AAAAAAABWB}
{\bkmkend AAAAAAABWB}
Inheritance diagram for googletest-shuffle-test.GTestShuffleUnitTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgoogletest-shuffle-test_1_1_g_test_shuffle_unit_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b setUp} (self){\bkmkstart AAAAAAABWC}
{\bkmkend AAAAAAABWC}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testShufflePreservesNumberOfTests} (self){\bkmkstart AAAAAAABWD}
{\bkmkend AAAAAAABWD}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testShuffleChangesTestOrder} (self){\bkmkstart AAAAAAABWE}
{\bkmkend AAAAAAABWE}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testShuffleChangesTestCaseOrder} (self){\bkmkstart AAAAAAABWF}
{\bkmkend AAAAAAABWF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testShuffleDoesNotRepeatTest} (self){\bkmkstart AAAAAAABWG}
{\bkmkend AAAAAAABWG}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testShuffleDoesNotCreateNewTest} (self){\bkmkstart AAAAAAABWH}
{\bkmkend AAAAAAABWH}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testShuffleIncludesAllTests} (self){\bkmkstart AAAAAAABWI}
{\bkmkend AAAAAAABWI}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testShuffleLeavesDeathTestsAtFront} (self){\bkmkstart AAAAAAABWJ}
{\bkmkend AAAAAAABWJ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testShuffleDoesNotInterleaveTestCases} (self){\bkmkstart AAAAAAABWK}
{\bkmkend AAAAAAABWK}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testShuffleRestoresOrderAfterEachIteration} (self){\bkmkstart AAAAAAABWL}
{\bkmkend AAAAAAABWL}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testShuffleGeneratesNewOrderInEachIteration} (self){\bkmkstart AAAAAAABWM}
{\bkmkend AAAAAAABWM}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testShuffleShardedTestsPreservesPartition} (self){\bkmkstart AAAAAAABWN}
{\bkmkend AAAAAAABWN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests test shuffling.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-shuffle-test.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest_testbridge_test.GTestTestFilterTest Class Reference\par \pard\plain 
{\tc\tcl2 \v gtest_testbridge_test.GTestTestFilterTest}
{\xe \v gtest_testbridge_test.GTestTestFilterTest}
{\bkmkstart AAAAAAABXR}
{\bkmkend AAAAAAABXR}
Inheritance diagram for gtest_testbridge_test.GTestTestFilterTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__testbridge__test_1_1_g_test_test_filter_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testTestExecutionIsFiltered} (self)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v testTestExecutionIsFiltered\:gtest_testbridge_test.GTestTestFilterTest}
{\xe \v gtest_testbridge_test.GTestTestFilterTest\:testTestExecutionIsFiltered}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_testbridge_test.GTestTestFilterTest.testTestExecutionIsFiltered (  {\i self})}}
\par
{\bkmkstart AAAAAAABXS}
{\bkmkend AAAAAAABXS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests that the test filter is picked up from the testbridge env var.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_testbridge_test.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
googletest-uninitialized-test.GTestUninitializedTest Class Reference\par \pard\plain 
{\tc\tcl2 \v googletest-uninitialized-test.GTestUninitializedTest}
{\xe \v googletest-uninitialized-test.GTestUninitializedTest}
{\bkmkstart AAAAAAABWU}
{\bkmkend AAAAAAABWU}
Inheritance diagram for googletest-uninitialized-test.GTestUninitializedTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgoogletest-uninitialized-test_1_1_g_test_uninitialized_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testExitCodeAndOutput} (self){\bkmkstart AAAAAAABWV}
{\bkmkend AAAAAAABWV}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-uninitialized-test.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest_xml_outfiles_test.GTestXMLOutFilesTest Class Reference\par \pard\plain 
{\tc\tcl2 \v gtest_xml_outfiles_test.GTestXMLOutFilesTest}
{\xe \v gtest_xml_outfiles_test.GTestXMLOutFilesTest}
{\bkmkstart AAAAAAABXT}
{\bkmkend AAAAAAABXT}
Inheritance diagram for gtest_xml_outfiles_test.GTestXMLOutFilesTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__xml__outfiles__test_1_1_g_test_x_m_l_out_files_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b setUp} (self){\bkmkstart AAAAAAABXU}
{\bkmkend AAAAAAABXU}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b tearDown} (self){\bkmkstart AAAAAAABXV}
{\bkmkend AAAAAAABXV}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b DeleteFilesAndDir} (self){\bkmkstart AAAAAAABXW}
{\bkmkend AAAAAAABXW}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testOutfile1} (self){\bkmkstart AAAAAAABXX}
{\bkmkend AAAAAAABXX}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testOutfile2} (self){\bkmkstart AAAAAAABXY}
{\bkmkend AAAAAAABXY}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b output_dir_}{\bkmkstart AAAAAAABXZ}
{\bkmkend AAAAAAABXZ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Unit test for Google Test's XML output functionality.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_xml_outfiles_test.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest_xml_output_unittest.GTestXMLOutputUnitTest Class Reference\par \pard\plain 
{\tc\tcl2 \v gtest_xml_output_unittest.GTestXMLOutputUnitTest}
{\xe \v gtest_xml_output_unittest.GTestXMLOutputUnitTest}
{\bkmkstart AAAAAAABYA}
{\bkmkend AAAAAAABYA}
Inheritance diagram for gtest_xml_output_unittest.GTestXMLOutputUnitTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__xml__output__unittest_1_1_g_test_x_m_l_output_unit_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testNonEmptyXmlOutput} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testNoTestXmlOutput} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testTimestampValue} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testDefaultOutputFile} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testSuppressedXmlOutput} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testFilteredTestXmlOutput} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testShardedTestXmlOutput} (self)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Unit test for Google Test's XML output functionality.\par
}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v testDefaultOutputFile\:gtest_xml_output_unittest.GTestXMLOutputUnitTest}
{\xe \v gtest_xml_output_unittest.GTestXMLOutputUnitTest\:testDefaultOutputFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_xml_output_unittest.GTestXMLOutputUnitTest.testDefaultOutputFile (  {\i self})}}
\par
{\bkmkstart AAAAAAABYB}
{\bkmkend AAAAAAABYB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Confirms that Google Test produces an XML output file with the expected\par
default name if no name is explicitly specified.\par
}
 \par
}}
{\xe \v testFilteredTestXmlOutput\:gtest_xml_output_unittest.GTestXMLOutputUnitTest}
{\xe \v gtest_xml_output_unittest.GTestXMLOutputUnitTest\:testFilteredTestXmlOutput}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_xml_output_unittest.GTestXMLOutputUnitTest.testFilteredTestXmlOutput (  {\i self})}}
\par
{\bkmkstart AAAAAAABYC}
{\bkmkend AAAAAAABYC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Verifies XML output when a filter is applied.\par
\par
Runs a test program that executes only some tests and verifies that\par
non-selected tests do not show up in the XML output.\par
}
 \par
}}
{\xe \v testNonEmptyXmlOutput\:gtest_xml_output_unittest.GTestXMLOutputUnitTest}
{\xe \v gtest_xml_output_unittest.GTestXMLOutputUnitTest\:testNonEmptyXmlOutput}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_xml_output_unittest.GTestXMLOutputUnitTest.testNonEmptyXmlOutput (  {\i self})}}
\par
{\bkmkstart AAAAAAABYD}
{\bkmkend AAAAAAABYD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Runs a test program that generates a non-empty XML output, and\par
tests that the XML output is expected.\par
}
 \par
}}
{\xe \v testNoTestXmlOutput\:gtest_xml_output_unittest.GTestXMLOutputUnitTest}
{\xe \v gtest_xml_output_unittest.GTestXMLOutputUnitTest\:testNoTestXmlOutput}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_xml_output_unittest.GTestXMLOutputUnitTest.testNoTestXmlOutput (  {\i self})}}
\par
{\bkmkstart AAAAAAABYE}
{\bkmkend AAAAAAABYE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Verifies XML output for a Google Test binary without actual tests.\par
\par
Runs a test program that generates an XML output for a binary without tests,\par
and tests that the XML output is expected.\par
}
 \par
}}
{\xe \v testShardedTestXmlOutput\:gtest_xml_output_unittest.GTestXMLOutputUnitTest}
{\xe \v gtest_xml_output_unittest.GTestXMLOutputUnitTest\:testShardedTestXmlOutput}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_xml_output_unittest.GTestXMLOutputUnitTest.testShardedTestXmlOutput (  {\i self})}}
\par
{\bkmkstart AAAAAAABYF}
{\bkmkend AAAAAAABYF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Verifies XML output when run using multiple shards.\par
\par
Runs a test program that executes only one shard and verifies that tests\par
from other shards do not show up in the XML output.\par
}
 \par
}}
{\xe \v testSuppressedXmlOutput\:gtest_xml_output_unittest.GTestXMLOutputUnitTest}
{\xe \v gtest_xml_output_unittest.GTestXMLOutputUnitTest\:testSuppressedXmlOutput}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_xml_output_unittest.GTestXMLOutputUnitTest.testSuppressedXmlOutput (  {\i self})}}
\par
{\bkmkstart AAAAAAABYG}
{\bkmkend AAAAAAABYG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests that no XML file is generated if the default XML listener is\par
shut down before RUN_ALL_TESTS is invoked.\par
}
 \par
}}
{\xe \v testTimestampValue\:gtest_xml_output_unittest.GTestXMLOutputUnitTest}
{\xe \v gtest_xml_output_unittest.GTestXMLOutputUnitTest\:testTimestampValue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_xml_output_unittest.GTestXMLOutputUnitTest.testTimestampValue (  {\i self})}}
\par
{\bkmkstart AAAAAAABYH}
{\bkmkend AAAAAAABYH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Checks whether the timestamp attribute in the XML output is valid.\par
\par
Runs a test program that generates an empty XML output, and checks if\par
the timestamp attribute in the testsuites tag is valid.\par
}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_xml_output_unittest.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest_xml_test_utils.GTestXMLTestCase Class Reference\par \pard\plain 
{\tc\tcl2 \v gtest_xml_test_utils.GTestXMLTestCase}
{\xe \v gtest_xml_test_utils.GTestXMLTestCase}
{\bkmkstart AAAAAAABYI}
{\bkmkend AAAAAAABYI}
Inheritance diagram for gtest_xml_test_utils.GTestXMLTestCase:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__xml__test__utils_1_1_g_test_x_m_l_test_case.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b AssertEquivalentNodes} (self, expected_node, actual_node)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b NormalizeXml} (self, element)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
dictionary {\b identifying_attribute}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Base class for tests of Google Test's XML output functionality.\par
}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v AssertEquivalentNodes\:gtest_xml_test_utils.GTestXMLTestCase}
{\xe \v gtest_xml_test_utils.GTestXMLTestCase\:AssertEquivalentNodes}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_xml_test_utils.GTestXMLTestCase.AssertEquivalentNodes (  {\i self},   {\i expected_node},   {\i actual_node})}}
\par
{\bkmkstart AAAAAAABYJ}
{\bkmkend AAAAAAABYJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Asserts that actual_node (a DOM node object) is equivalent to\par
expected_node (another DOM node object), in that either both of\par
them are CDATA nodes and have the same value, or both are DOM\par
elements and actual_node meets all of the following conditions:\par
\par
*  It has the same tag name as expected_node.\par
*  It has the same set of attributes as expected_node, each with\par
   the same value as the corresponding attribute of expected_node.\par
   Exceptions are any attribute named "time", which needs only be\par
   convertible to a floating-point number and any attribute named\par
   "type_param" which only has to be non-empty.\par
*  It has an equivalent set of child nodes (including elements and\par
   CDATA sections) as expected_node.  Note that we ignore the\par
   order of the children as they are not guaranteed to be in any\par
   particular order.\par
}
 \par
}}
{\xe \v NormalizeXml\:gtest_xml_test_utils.GTestXMLTestCase}
{\xe \v gtest_xml_test_utils.GTestXMLTestCase\:NormalizeXml}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_xml_test_utils.GTestXMLTestCase.NormalizeXml (  {\i self},   {\i element})}}
\par
{\bkmkstart AAAAAAABYK}
{\bkmkend AAAAAAABYK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Normalizes Google Test's XML output to eliminate references to transient\par
information that may change from run to run.\par
\par
*  The "time" attribute of <testsuites>, <testsuite> and <testcase>\par
   elements is replaced with a single asterisk, if it contains\par
   only digit characters.\par
*  The "timestamp" attribute of <testsuites> elements is replaced with a\par
   single asterisk, if it contains a valid ISO8601 datetime value.\par
*  The "type_param" attribute of <testcase> elements is replaced with a\par
   single asterisk (if it sn non-empty) as it is the type name returned\par
   by the compiler and is platform dependent.\par
*  The line info reported in the first line of the "message"\par
   attribute and CDATA section of <failure> elements is replaced with the\par
   file's basename and a single asterisk for the line number.\par
*  The directory names in file paths are removed.\par
*  The stack traces are removed.\par
}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v identifying_attribute\:gtest_xml_test_utils.GTestXMLTestCase}
{\xe \v gtest_xml_test_utils.GTestXMLTestCase\:identifying_attribute}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
dictionary gtest_xml_test_utils.GTestXMLTestCase.identifying_attribute{\f2 [static]}}}
\par
{\bkmkstart AAAAAAABYL}
{\bkmkend AAAAAAABYL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid =  \{\par
      {\cf22 'testsuites'}: {\cf22 'name'},\par
      {\cf22 'testsuite'}: {\cf22 'name'},\par
      {\cf22 'testcase'}: {\cf22 'name'},\par
      {\cf22 'failure'}: {\cf22 'message'},\par
      {\cf22 'skipped'}: {\cf22 'message'},\par
      {\cf22 'property'}: {\cf22 'name'},\par
  \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_xml_test_utils.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::HasDebugStringAndShortDebugString< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::HasDebugStringAndShortDebugString< T >}
{\xe \v testing::internal::HasDebugStringAndShortDebugString< T >}
{\bkmkstart AAAAAAADDF}
{\bkmkend AAAAAAADDF}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static constexpr bool {\b value}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v value\:testing::internal::HasDebugStringAndShortDebugString< T >}
{\xe \v testing::internal::HasDebugStringAndShortDebugString< T >\:value}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > constexpr bool {\b testing::internal::HasDebugStringAndShortDebugString}< T >::value{\f2 [static]}, {\f2 [constexpr]}}}
\par
{\bkmkstart AAAAAAADDG}
{\bkmkend AAAAAAADDG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid =\par
      HasDebugStringType::value && HasShortDebugStringType::value\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
HasDebugStringMethods Struct Reference\par \pard\plain 
{\tc\tcl2 \v HasDebugStringMethods}
{\xe \v HasDebugStringMethods}
{\bkmkstart AAAAAAABCU}
{\bkmkend AAAAAAABCU}
Inheritance diagram for HasDebugStringMethods:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "struct_has_debug_string_methods.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::string {\b DebugString} () const{\bkmkstart AAAAAAABCV}
{\bkmkend AAAAAAABCV}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::string {\b ShortDebugString} () const{\bkmkstart AAAAAAABCW}
{\bkmkend AAAAAAABCW}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
History Struct Reference\par \pard\plain 
{\tc\tcl2 \v History}
{\xe \v History}
{\bkmkstart AAAAAAABCX}
{\bkmkend AAAAAAABCX}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b number} = 0{\bkmkstart AAAAAAABCY}
{\bkmkend AAAAAAABCY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::vector< std::string > {\b move}{\bkmkstart AAAAAAABCZ}
{\bkmkend AAAAAAABCZ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::vector< std::string > {\b formal}{\bkmkstart AAAAAAABDA}
{\bkmkend AAAAAAABDA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
game.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ImplBase< Impl >::Holder Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ImplBase< Impl >::Holder}
{\xe \v testing::internal::ImplBase< Impl >::Holder}
{\bkmkstart AAAAAAADDQ}
{\bkmkend AAAAAAADDQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b operator const Impl &} () const{\bkmkstart AAAAAAADDR}
{\bkmkend AAAAAAADDR}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::shared_ptr< Impl > {\b ptr}{\bkmkstart AAAAAAADDS}
{\bkmkend AAAAAAADDS}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Ignore< size_t > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Ignore< size_t >}
{\xe \v testing::internal::Ignore< size_t >}
{\bkmkstart AAAAAAADDH}
{\bkmkend AAAAAAADDH}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Ignore} (...){\bkmkstart AAAAAAADDI}
{\bkmkend AAAAAAADDI}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::IgnoredValue Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::IgnoredValue}
{\xe \v testing::internal::IgnoredValue}
{\bkmkstart AAAAAAADDJ}
{\bkmkend AAAAAAADDJ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T , typename std::enable_if<!std::is_convertible< T, Sink >::value, int >::type  = 0> {\b IgnoredValue} (const T &){\bkmkstart AAAAAAADDK}
{\bkmkend AAAAAAADDK}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::IgnoreResultAction< A > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::IgnoreResultAction< A >}
{\xe \v testing::internal::IgnoreResultAction< A >}
{\bkmkstart AAAAAAADDL}
{\bkmkend AAAAAAADDL}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b IgnoreResultAction} (const A &action){\bkmkstart AAAAAAADDM}
{\bkmkend AAAAAAADDM}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename F > {\b operator Action< F >} () const{\bkmkstart AAAAAAADDN}
{\bkmkend AAAAAAADDN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ImplBase< Impl > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ImplBase< Impl >}
{\xe \v testing::internal::ImplBase< Impl >}
{\bkmkstart AAAAAAADDO}
{\bkmkend AAAAAAADDO}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Holder}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b type} = typename std::conditional< std::is_constructible< Impl >::value, Impl, {\b Holder} >::type{\bkmkstart AAAAAAADDP}
{\bkmkend AAAAAAADDP}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::IndexSequence< Is > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::IndexSequence< Is >}
{\xe \v testing::internal::IndexSequence< Is >}
{\bkmkstart AAAAAAADDT}
{\bkmkend AAAAAAADDT}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b type} = {\b IndexSequence}{\bkmkstart AAAAAAADDU}
{\bkmkend AAAAAAADDU}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
InheritsDebugStringMethods Struct Reference\par \pard\plain 
{\tc\tcl2 \v InheritsDebugStringMethods}
{\xe \v InheritsDebugStringMethods}
{\bkmkstart AAAAAAABDB}
{\bkmkend AAAAAAABDB}
Inheritance diagram for InheritsDebugStringMethods:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "struct_inherits_debug_string_methods.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
InstantiationInMultipleTranslationUnitsTest Class Reference\par \pard\plain 
{\tc\tcl2 \v InstantiationInMultipleTranslationUnitsTest}
{\xe \v InstantiationInMultipleTranslationUnitsTest}
{\bkmkstart AAAAAAABDC}
{\bkmkend AAAAAAABDC}
Inheritance diagram for InstantiationInMultipleTranslationUnitsTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_instantiation_in_multiple_translation_units_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-test.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Interface Class Reference\par \pard\plain 
{\tc\tcl2 \v Interface}
{\xe \v Interface}
{\bkmkstart AAAAAAABDD}
{\bkmkend AAAAAAABDD}
Inheritance diagram for Interface:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_interface.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b VoidFromString} (char *str)=0{\bkmkstart AAAAAAABDE}
{\bkmkend AAAAAAABDE}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual char * {\b StringFromString} (char *str)=0{\bkmkstart AAAAAAABDF}
{\bkmkend AAAAAAABDF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b IntFromString} (char *str)=0{\bkmkstart AAAAAAABDG}
{\bkmkend AAAAAAABDG}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int & {\b IntRefFromString} (char *str)=0{\bkmkstart AAAAAAABDH}
{\bkmkend AAAAAAABDH}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b VoidFromFunc} (void(*func)(char *str))=0{\bkmkstart AAAAAAABDI}
{\bkmkend AAAAAAABDI}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b VoidFromIntRef} (int &n)=0{\bkmkstart AAAAAAABDJ}
{\bkmkend AAAAAAABDJ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b VoidFromFloat} (float n)=0{\bkmkstart AAAAAAABDK}
{\bkmkend AAAAAAABDK}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b VoidFromDouble} (double n)=0{\bkmkstart AAAAAAABDL}
{\bkmkend AAAAAAABDL}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b VoidFromVector} (const std::vector< int > &v)=0{\bkmkstart AAAAAAABDM}
{\bkmkend AAAAAAABDM}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock_link_test.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
IntWrapper Class Reference\par \pard\plain 
{\tc\tcl2 \v IntWrapper}
{\xe \v IntWrapper}
{\bkmkstart AAAAAAABDN}
{\bkmkend AAAAAAABDN}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b IntWrapper} (int a_value){\bkmkstart AAAAAAABDO}
{\bkmkend AAAAAAABDO}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b IntWrapper} (const {\b IntWrapper} &other){\bkmkstart AAAAAAABDP}
{\bkmkend AAAAAAABDP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b IntWrapper} {\b operator=} (const {\b IntWrapper} &other){\bkmkstart AAAAAAABDQ}
{\bkmkend AAAAAAABDQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b IntWrapper} {\b operator+} (int other) const{\bkmkstart AAAAAAABDR}
{\bkmkend AAAAAAABDR}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b operator<} (const {\b IntWrapper} &other) const{\bkmkstart AAAAAAABDS}
{\bkmkend AAAAAAABDS}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b value} () const{\bkmkstart AAAAAAABDT}
{\bkmkend AAAAAAABDT}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::InvokeArgumentAction< index, Params > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::InvokeArgumentAction< index, Params >}
{\xe \v testing::internal::InvokeArgumentAction< index, Params >}
{\bkmkstart AAAAAAADDV}
{\bkmkend AAAAAAADDV}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename... Args, typename  = typename std::enable_if<(index < sizeof...(Args))>::type> auto {\b operator()} (Args &&... args) const -> decltype(internal::InvokeArgument(std::get< index >(std::forward_as_tuple(std::forward< Args >(args)...)), std::declval< const Params & >()...)){\bkmkstart AAAAAAADDW}
{\bkmkend AAAAAAADDW}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b internal::FlatTuple}< Params... > {\b params}{\bkmkstart AAAAAAADDX}
{\bkmkend AAAAAAADDX}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-more-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
InvokeHelper Class Reference\par \pard\plain 
{\tc\tcl2 \v InvokeHelper}
{\xe \v InvokeHelper}
{\bkmkstart AAAAAAABDU}
{\bkmkend AAAAAAABDU}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b VoidFromVoid} (){\bkmkstart AAAAAAABDV}
{\bkmkend AAAAAAABDV}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b VoidFromString} (char *){\bkmkstart AAAAAAABDW}
{\bkmkend AAAAAAABDW}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b StaticVoidFromVoid} (){\bkmkstart AAAAAAABDX}
{\bkmkend AAAAAAABDX}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b StaticVoidFromString} (char *){\bkmkstart AAAAAAABDY}
{\bkmkend AAAAAAABDY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b StaticIntFromString} (char *){\bkmkstart AAAAAAABDZ}
{\bkmkend AAAAAAABDZ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b StaticBoolFromString} (const char *){\bkmkstart AAAAAAABEA}
{\bkmkend AAAAAAABEA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock_link_test.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::InvokeMethodAction< Class, MethodPtr > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::InvokeMethodAction< Class, MethodPtr >}
{\xe \v testing::internal::InvokeMethodAction< Class, MethodPtr >}
{\bkmkstart AAAAAAADDY}
{\bkmkend AAAAAAADDY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename... Args> auto {\b operator()} (Args &&... args) const -> decltype((obj_ptr-> *method_ptr)(std::forward< Args >(args)...)){\bkmkstart AAAAAAADDZ}
{\bkmkend AAAAAAADDZ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

Class *const {\b obj_ptr}{\bkmkstart AAAAAAADEA}
{\bkmkend AAAAAAADEA}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const MethodPtr {\b method_ptr}{\bkmkstart AAAAAAADEB}
{\bkmkend AAAAAAADEB}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::InvokeMethodWithoutArgsAction< Class, MethodPtr > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::InvokeMethodWithoutArgsAction< Class, MethodPtr >}
{\xe \v testing::internal::InvokeMethodWithoutArgsAction< Class, MethodPtr >}
{\bkmkstart AAAAAAADEC}
{\bkmkend AAAAAAADEC}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b ReturnType} = decltype((std::declval< Class * >() -> *std::declval< MethodPtr >())()){\bkmkstart AAAAAAADED}
{\bkmkend AAAAAAADED}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename... Args> ReturnType {\b operator()} (const Args &...) const{\bkmkstart AAAAAAADEE}
{\bkmkend AAAAAAADEE}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

Class *const {\b obj_ptr}{\bkmkstart AAAAAAADEF}
{\bkmkend AAAAAAADEF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const MethodPtr {\b method_ptr}{\bkmkstart AAAAAAADEG}
{\bkmkend AAAAAAADEG}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::InvokeWithoutArgsAction< FunctionImpl > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::InvokeWithoutArgsAction< FunctionImpl >}
{\xe \v testing::internal::InvokeWithoutArgsAction< FunctionImpl >}
{\bkmkstart AAAAAAADEH}
{\bkmkend AAAAAAADEH}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename... Args> auto {\b operator()} (const Args &...) -> decltype(function_impl()){\bkmkstart AAAAAAADEI}
{\bkmkend AAAAAAADEI}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

FunctionImpl {\b function_impl}{\bkmkstart AAAAAAADEJ}
{\bkmkend AAAAAAADEJ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::is_callable_r_impl< Void, R, F, Args > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::is_callable_r_impl< Void, R, F, Args >}
{\xe \v testing::internal::is_callable_r_impl< Void, R, F, Args >}
{\bkmkstart AAAAAAADEK}
{\bkmkend AAAAAAADEK}
Inheritance diagram for testing::internal::is_callable_r_impl< Void, R, F, Args >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1is__callable__r__impl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::is_callable_r_impl< void_t< call_result_t< F, Args... > >, R, F, Args... > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::is_callable_r_impl< void_t< call_result_t< F, Args... > >, R, F, Args... >}
{\xe \v testing::internal::is_callable_r_impl< void_t< call_result_t< F, Args... > >, R, F, Args... >}
{\bkmkstart AAAAAAADEL}
{\bkmkend AAAAAAADEL}
Inheritance diagram for testing::internal::is_callable_r_impl< void_t< call_result_t< F, Args... > >, R, F, Args... >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1is__callable__r__impl_3_01void__t_3_01call__result__t_3_01_f_00_01_15f04c251b05f7c651a5667e6d0fcb39.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::is_implicitly_convertible< From, To > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::is_implicitly_convertible< From, To >}
{\xe \v testing::internal::is_implicitly_convertible< From, To >}
{\bkmkstart AAAAAAADEM}
{\bkmkend AAAAAAADEM}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b type} = decltype(TestImplicitConversion< From >(0)){\bkmkstart AAAAAAADEN}
{\bkmkend AAAAAAADEN}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static constexpr bool {\b value} = type::value{\bkmkstart AAAAAAADEO}
{\bkmkend AAAAAAADEO}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::is_proxy_type_list< typename > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::is_proxy_type_list< typename >}
{\xe \v testing::internal::is_proxy_type_list< typename >}
{\bkmkstart AAAAAAADEP}
{\bkmkend AAAAAAADEP}
Inheritance diagram for testing::internal::is_proxy_type_list< typename >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1is__proxy__type__list.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-type-util.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::is_proxy_type_list< ProxyTypeList< Ts... > > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::is_proxy_type_list< ProxyTypeList< Ts... > >}
{\xe \v testing::internal::is_proxy_type_list< ProxyTypeList< Ts... > >}
{\bkmkstart AAAAAAADEQ}
{\bkmkend AAAAAAADEQ}
Inheritance diagram for testing::internal::is_proxy_type_list< ProxyTypeList< Ts... > >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1is__proxy__type__list_3_01_proxy_type_list_3_01_ts_8_8_8_01_4_01_4.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-type-util.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::IsEmptyMatcher Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::IsEmptyMatcher}
{\xe \v testing::internal::IsEmptyMatcher}
{\bkmkstart AAAAAAADER}
{\bkmkend AAAAAAADER}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename MatcheeContainerType > bool {\b MatchAndExplain} (const MatcheeContainerType &c, MatchResultListener *listener) const{\bkmkstart AAAAAAADES}
{\bkmkend AAAAAAADES}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b MatchAndExplain} (const char *s, MatchResultListener *listener) const{\bkmkstart AAAAAAADET}
{\bkmkend AAAAAAADET}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeTo} (std::ostream *os) const{\bkmkstart AAAAAAADEU}
{\bkmkend AAAAAAADEU}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeNegationTo} (std::ostream *os) const{\bkmkstart AAAAAAADEV}
{\bkmkend AAAAAAADEV}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-more-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::IsHashTable< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::IsHashTable< T >}
{\xe \v testing::internal::IsHashTable< T >}
{\bkmkstart AAAAAAADEW}
{\bkmkend AAAAAAADEW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const bool {\b value} = sizeof(test<T>(nullptr, nullptr)) == sizeof(int){\bkmkstart AAAAAAADEX}
{\bkmkend AAAAAAADEX}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::IsRecursiveContainer< C > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::IsRecursiveContainer< C >}
{\xe \v testing::internal::IsRecursiveContainer< C >}
{\bkmkstart AAAAAAADEY}
{\bkmkend AAAAAAADEY}
Inheritance diagram for testing::internal::IsRecursiveContainer< C >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_is_recursive_container.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::IsRecursiveContainerImpl< C, bool > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::IsRecursiveContainerImpl< C, bool >}
{\xe \v testing::internal::IsRecursiveContainerImpl< C, bool >}
{\bkmkstart AAAAAAADEZ}
{\bkmkend AAAAAAADEZ}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::IsRecursiveContainerImpl< C, false > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::IsRecursiveContainerImpl< C, false >}
{\xe \v testing::internal::IsRecursiveContainerImpl< C, false >}
{\bkmkstart AAAAAAADFA}
{\bkmkend AAAAAAADFA}
Inheritance diagram for testing::internal::IsRecursiveContainerImpl< C, false >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_is_recursive_container_impl_3_01_c_00_01false_01_4.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::IsRecursiveContainerImpl< C, true > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::IsRecursiveContainerImpl< C, true >}
{\xe \v testing::internal::IsRecursiveContainerImpl< C, true >}
{\bkmkstart AAAAAAADFB}
{\bkmkend AAAAAAADFB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b value_type} = decltype(*std::declval< typename C::const_iterator >()){\bkmkstart AAAAAAADFC}
{\bkmkend AAAAAAADFC}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b type} = std::is_same< typename std::remove_const< typename std::remove_reference< value_type >::type >::type, C >{\bkmkstart AAAAAAADFD}
{\bkmkend AAAAAAADFD}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
foo::PathLike::iterator Struct Reference\par \pard\plain 
{\tc\tcl2 \v foo::PathLike::iterator}
{\xe \v foo::PathLike::iterator}
{\bkmkstart AAAAAAABQU}
{\bkmkend AAAAAAABQU}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b PathLike} {\b value_type}{\bkmkstart AAAAAAABQV}
{\bkmkend AAAAAAABQV}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b iterator} & {\b operator++} (){\bkmkstart AAAAAAABQW}
{\bkmkend AAAAAAABQW}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b PathLike} & {\b operator*} (){\bkmkstart AAAAAAABQX}
{\bkmkend AAAAAAABQX}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-printers-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gtest_printers_test::iterator Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gtest_printers_test::iterator}
{\xe \v testing::gtest_printers_test::iterator}
{\bkmkstart AAAAAAACTV}
{\bkmkend AAAAAAACTV}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

char {\b x}{\bkmkstart AAAAAAACTW}
{\bkmkend AAAAAAACTW}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-printers-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Vector< T >::iterator Class Reference\par \pard\plain 
{\tc\tcl2 \v Vector< T >::iterator}
{\xe \v Vector< T >::iterator}
{\bkmkstart AAAAAAABPX}
{\bkmkend AAAAAAABPX}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b iterator} (T *p){\bkmkstart AAAAAAABPY}
{\bkmkend AAAAAAABPY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b A} (){\bkmkstart AAAAAAABPZ}
{\bkmkend AAAAAAABPZ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b iterator} & {\b B} (){\bkmkstart AAAAAAABQA}
{\bkmkend AAAAAAABQA}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b iterator} & {\b operator++} (){\bkmkstart AAAAAAABQB}
{\bkmkend AAAAAAABQB}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b iterator} & {\b operator--} (){\bkmkstart AAAAAAABQC}
{\bkmkend AAAAAAABQC}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T & {\b operator*} (){\bkmkstart AAAAAAABQD}
{\bkmkend AAAAAAABQD}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b operator==} (const {\b iterator} &b) const{\bkmkstart AAAAAAABQE}
{\bkmkend AAAAAAABQE}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b operator!=} (const {\b iterator} &b) const{\bkmkstart AAAAAAABQF}
{\bkmkend AAAAAAABQF}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Vector/my_vector.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::JsonUnitTestResultPrinter Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::JsonUnitTestResultPrinter}
{\xe \v testing::internal::JsonUnitTestResultPrinter}
{\bkmkstart AAAAAAADFE}
{\bkmkend AAAAAAADFE}
Inheritance diagram for testing::internal::JsonUnitTestResultPrinter:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_json_unit_test_result_printer.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b JsonUnitTestResultPrinter} (const char *output_file){\bkmkstart AAAAAAADFF}
{\bkmkend AAAAAAADFF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestIterationEnd} (const {\b UnitTest} &unit_test, int iteration) override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b PrintJsonTestList} (::std::ostream *stream, const std::vector< {\b TestSuite} * > &test_suites){\bkmkstart AAAAAAADFG}
{\bkmkend AAAAAAADFG}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v OnTestIterationEnd\:testing::internal::JsonUnitTestResultPrinter}
{\xe \v testing::internal::JsonUnitTestResultPrinter\:OnTestIterationEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::JsonUnitTestResultPrinter::OnTestIterationEnd (const {\b UnitTest} &  {\i unit_test}, int  {\i iteration}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADFH}
{\bkmkend AAAAAAADFH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::EmptyTestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABMU \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::KindOf< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::KindOf< T >}
{\xe \v testing::internal::KindOf< T >}
{\bkmkstart AAAAAAADFI}
{\bkmkend AAAAAAADFI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum \{ {\b value} = kOther
 \}{\bkmkstart AAAAAAADFJ}
{\bkmkend AAAAAAADFJ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
King Struct Reference\par \pard\plain 
{\tc\tcl2 \v King}
{\xe \v King}
{\bkmkstart AAAAAAABEB}
{\bkmkend AAAAAAABEB}
Inheritance diagram for King:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "struct_king.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b King} (int {\b color}, std::string position){\bkmkstart AAAAAAABEC}
{\bkmkend AAAAAAABEC}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::string > {\b possible_moves} (std::string &move) override\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D0\'A4\'D1\'83\'D0\'BD\'D0\'BA\'D1\'86\'D0\'B8\'D1\'8F \'D0\'B2\'D0\'BE\'D0\'B7\'D0\'BC\'D0\'BE\'D0\'B6\'D0\'BD\'D1\'8B\'D1\'85 \'D1\'85\'D0\'BE\'D0\'B4\'D0\'BE\'D0\'B2 }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b check_move} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b GetN} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b GetC} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b GetColor} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b increment} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b GetM} () override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v check_move\:King}
{\xe \v King\:check_move}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void King::check_move (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABED}
{\bkmkend AAAAAAABED}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v GetC\:King}
{\xe \v King\:GetC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void King::GetC (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABEE}
{\bkmkend AAAAAAABEE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v GetColor\:King}
{\xe \v King\:GetColor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int King::GetColor (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABEF}
{\bkmkend AAAAAAABEF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v GetM\:King}
{\xe \v King\:GetM}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int King::GetM (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABEG}
{\bkmkend AAAAAAABEG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v GetN\:King}
{\xe \v King\:GetN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string King::GetN (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABEH}
{\bkmkend AAAAAAABEH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v increment\:King}
{\xe \v King\:increment}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void King::increment (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABEI}
{\bkmkend AAAAAAABEI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v possible_moves\:King}
{\xe \v King\:possible_moves}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector< std::string > King::possible_moves (std::string &  {\i move}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABEJ}
{\bkmkend AAAAAAABEJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D0\'A4\'D1\'83\'D0\'BD\'D0\'BA\'D1\'86\'D0\'B8\'D1\'8F \'D0\'B2\'D0\'BE\'D0\'B7\'D0\'BC\'D0\'BE\'D0\'B6\'D0\'BD\'D1\'8B\'D1\'85 \'D1\'85\'D0\'BE\'D0\'B4\'D0\'BE\'D0\'B2 }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i \'D0\'A1\'D1\'82\'D1\'80\'D0\'BE\'D0\'BA\'D0\'B0} \cell }{\'D0\'BF\'D0\'BE\'D0\'B7\'D0\'B8\'D1\'86\'D0\'B8\'D0\'B8 \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'D0\'92\'D0\'B5\'D0\'BA\'D1\'82\'D0\'BE\'D1\'80 \'D1\'85\'D0\'BE\'D0\'B4\'D0\'BE\'D0\'B2 \par
}}}{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXM \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Pieces.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
pieces.cpp\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Knight Struct Reference\par \pard\plain 
{\tc\tcl2 \v Knight}
{\xe \v Knight}
{\bkmkstart AAAAAAABEK}
{\bkmkend AAAAAAABEK}
Inheritance diagram for Knight:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "struct_knight.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Knight} (int {\b color}, std::string position){\bkmkstart AAAAAAABEL}
{\bkmkend AAAAAAABEL}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::string > {\b possible_moves} (std::string &move) override\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D0\'A4\'D1\'83\'D0\'BD\'D0\'BA\'D1\'86\'D0\'B8\'D1\'8F \'D0\'B2\'D0\'BE\'D0\'B7\'D0\'BC\'D0\'BE\'D0\'B6\'D0\'BD\'D1\'8B\'D1\'85 \'D1\'85\'D0\'BE\'D0\'B4\'D0\'BE\'D0\'B2 }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b check_move} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b GetN} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b GetC} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b GetColor} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b increment} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b GetM} () override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v check_move\:Knight}
{\xe \v Knight\:check_move}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Knight::check_move (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABEM}
{\bkmkend AAAAAAABEM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v GetC\:Knight}
{\xe \v Knight\:GetC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Knight::GetC (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABEN}
{\bkmkend AAAAAAABEN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v GetColor\:Knight}
{\xe \v Knight\:GetColor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Knight::GetColor (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABEO}
{\bkmkend AAAAAAABEO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v GetM\:Knight}
{\xe \v Knight\:GetM}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Knight::GetM (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABEP}
{\bkmkend AAAAAAABEP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v GetN\:Knight}
{\xe \v Knight\:GetN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string Knight::GetN (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABEQ}
{\bkmkend AAAAAAABEQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v increment\:Knight}
{\xe \v Knight\:increment}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Knight::increment (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABER}
{\bkmkend AAAAAAABER}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v possible_moves\:Knight}
{\xe \v Knight\:possible_moves}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector< std::string > Knight::possible_moves (std::string &  {\i move}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABES}
{\bkmkend AAAAAAABES}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D0\'A4\'D1\'83\'D0\'BD\'D0\'BA\'D1\'86\'D0\'B8\'D1\'8F \'D0\'B2\'D0\'BE\'D0\'B7\'D0\'BC\'D0\'BE\'D0\'B6\'D0\'BD\'D1\'8B\'D1\'85 \'D1\'85\'D0\'BE\'D0\'B4\'D0\'BE\'D0\'B2 }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i \'D0\'A1\'D1\'82\'D1\'80\'D0\'BE\'D0\'BA\'D0\'B0} \cell }{\'D0\'BF\'D0\'BE\'D0\'B7\'D0\'B8\'D1\'86\'D0\'B8\'D0\'B8 \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'D0\'92\'D0\'B5\'D0\'BA\'D1\'82\'D0\'BE\'D1\'80 \'D1\'85\'D0\'BE\'D0\'B4\'D0\'BE\'D0\'B2 \par
}}}{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXM \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Pieces.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
pieces.cpp\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_function_mocker_test::LegacyMockB Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_function_mocker_test::LegacyMockB}
{\xe \v testing::gmock_function_mocker_test::LegacyMockB}
{\bkmkstart AAAAAAACLY}
{\bkmkend AAAAAAACLY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD0} (DoB, void()){\bkmkstart AAAAAAACLZ}
{\bkmkend AAAAAAACLZ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-function-mocker_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_function_mocker_test::LegacyMockFoo Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_function_mocker_test::LegacyMockFoo}
{\xe \v testing::gmock_function_mocker_test::LegacyMockFoo}
{\bkmkstart AAAAAAACMA}
{\bkmkend AAAAAAACMA}
Inheritance diagram for testing::gmock_function_mocker_test::LegacyMockFoo:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__function__mocker__test_1_1_legacy_mock_foo.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (VoidReturning, void(int n)){\bkmkstart AAAAAAACMB}
{\bkmkend AAAAAAACMB}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD0} (Nullary, int()){\bkmkstart AAAAAAACMC}
{\bkmkend AAAAAAACMC}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (Unary, bool(int)){\bkmkstart AAAAAAACMD}
{\bkmkend AAAAAAACMD}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD2} (Binary, long(short, int)){\bkmkstart AAAAAAACME}
{\bkmkend AAAAAAACME}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD10} (Decimal, int(bool, char, short, int, long, float, double, unsigned, char *, const std::string &str)){\bkmkstart AAAAAAACMF}
{\bkmkend AAAAAAACMF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (TakesNonConstReference, bool(int &)){\bkmkstart AAAAAAACMG}
{\bkmkend AAAAAAACMG}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (TakesConstReference, std::string(const int &)){\bkmkstart AAAAAAACMH}
{\bkmkend AAAAAAACMH}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (TakesConst, bool(const int)){\bkmkstart AAAAAAACMI}
{\bkmkend AAAAAAACMI}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD0} (ReturnTypeWithComma, std::map< int, std::string >()){\bkmkstart AAAAAAACMJ}
{\bkmkend AAAAAAACMJ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_CONST_METHOD1} (ReturnTypeWithComma, std::map< int, std::string >(int)){\bkmkstart AAAAAAACMK}
{\bkmkend AAAAAAACMK}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD0} (OverloadedOnArgumentNumber, int()){\bkmkstart AAAAAAACML}
{\bkmkend AAAAAAACML}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (OverloadedOnArgumentNumber, int(int)){\bkmkstart AAAAAAACMM}
{\bkmkend AAAAAAACMM}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (OverloadedOnArgumentType, int(int)){\bkmkstart AAAAAAACMN}
{\bkmkend AAAAAAACMN}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (OverloadedOnArgumentType, char(char)){\bkmkstart AAAAAAACMO}
{\bkmkend AAAAAAACMO}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD0} (OverloadedOnConstness, int()){\bkmkstart AAAAAAACMP}
{\bkmkend AAAAAAACMP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_CONST_METHOD0} (OverloadedOnConstness, char()){\bkmkstart AAAAAAACMQ}
{\bkmkend AAAAAAACMQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (TypeWithHole, int(int(*)())){\bkmkstart AAAAAAACMR}
{\bkmkend AAAAAAACMR}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (TypeWithComma, int(const std::map< int, std::string > &)){\bkmkstart AAAAAAACMS}
{\bkmkend AAAAAAACMS}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (TypeWithTemplatedCopyCtor, int(const {\b TemplatedCopyable}< int > &)){\bkmkstart AAAAAAACMT}
{\bkmkend AAAAAAACMT}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (ReturnsFunctionPointer1, int(*(int))(bool)){\bkmkstart AAAAAAACMU}
{\bkmkend AAAAAAACMU}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (ReturnsFunctionPointer2, fn_ptr(int)){\bkmkstart AAAAAAACMV}
{\bkmkend AAAAAAACMV}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b RefQualifiedConstRef} () const &override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b RefQualifiedConstRefRef} () const &&override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b RefQualifiedRef} () &override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b RefQualifiedRefRef} () &&override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b RefQualifiedOverloaded} () const &override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b RefQualifiedOverloaded} () const &&override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b RefQualifiedOverloaded} () &override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b RefQualifiedOverloaded} () &&override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v RefQualifiedConstRef\:testing::gmock_function_mocker_test::LegacyMockFoo}
{\xe \v testing::gmock_function_mocker_test::LegacyMockFoo\:RefQualifiedConstRef}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::gmock_function_mocker_test::LegacyMockFoo::RefQualifiedConstRef () const &{\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACMW}
{\bkmkend AAAAAAACMW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::gmock_function_mocker_test::FooInterface} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACKS \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v RefQualifiedConstRefRef\:testing::gmock_function_mocker_test::LegacyMockFoo}
{\xe \v testing::gmock_function_mocker_test::LegacyMockFoo\:RefQualifiedConstRefRef}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::gmock_function_mocker_test::LegacyMockFoo::RefQualifiedConstRefRef () const &&{\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACMX}
{\bkmkend AAAAAAACMX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::gmock_function_mocker_test::FooInterface} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACKS \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v RefQualifiedOverloaded\:testing::gmock_function_mocker_test::LegacyMockFoo}
{\xe \v testing::gmock_function_mocker_test::LegacyMockFoo\:RefQualifiedOverloaded}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::gmock_function_mocker_test::LegacyMockFoo::RefQualifiedOverloaded () &&{\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACMY}
{\bkmkend AAAAAAACMY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::gmock_function_mocker_test::FooInterface} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACKS \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v RefQualifiedOverloaded\:testing::gmock_function_mocker_test::LegacyMockFoo}
{\xe \v testing::gmock_function_mocker_test::LegacyMockFoo\:RefQualifiedOverloaded}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::gmock_function_mocker_test::LegacyMockFoo::RefQualifiedOverloaded () &{\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACMZ}
{\bkmkend AAAAAAACMZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::gmock_function_mocker_test::FooInterface} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACKS \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v RefQualifiedOverloaded\:testing::gmock_function_mocker_test::LegacyMockFoo}
{\xe \v testing::gmock_function_mocker_test::LegacyMockFoo\:RefQualifiedOverloaded}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::gmock_function_mocker_test::LegacyMockFoo::RefQualifiedOverloaded () const &&{\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACNA}
{\bkmkend AAAAAAACNA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::gmock_function_mocker_test::FooInterface} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACKS \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v RefQualifiedOverloaded\:testing::gmock_function_mocker_test::LegacyMockFoo}
{\xe \v testing::gmock_function_mocker_test::LegacyMockFoo\:RefQualifiedOverloaded}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::gmock_function_mocker_test::LegacyMockFoo::RefQualifiedOverloaded () const &{\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACNB}
{\bkmkend AAAAAAACNB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::gmock_function_mocker_test::FooInterface} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACKS \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v RefQualifiedRef\:testing::gmock_function_mocker_test::LegacyMockFoo}
{\xe \v testing::gmock_function_mocker_test::LegacyMockFoo\:RefQualifiedRef}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::gmock_function_mocker_test::LegacyMockFoo::RefQualifiedRef () &{\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACNC}
{\bkmkend AAAAAAACNC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::gmock_function_mocker_test::FooInterface} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACKS \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v RefQualifiedRefRef\:testing::gmock_function_mocker_test::LegacyMockFoo}
{\xe \v testing::gmock_function_mocker_test::LegacyMockFoo\:RefQualifiedRefRef}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int testing::gmock_function_mocker_test::LegacyMockFoo::RefQualifiedRefRef () &&{\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACND}
{\bkmkend AAAAAAACND}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::gmock_function_mocker_test::FooInterface} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACKS \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-function-mocker_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_function_mocker_test::LegacyMockMethodSizes0 Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_function_mocker_test::LegacyMockMethodSizes0}
{\xe \v testing::gmock_function_mocker_test::LegacyMockMethodSizes0}
{\bkmkstart AAAAAAACNE}
{\bkmkend AAAAAAACNE}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD0} (func, void()){\bkmkstart AAAAAAACNF}
{\bkmkend AAAAAAACNF}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-function-mocker_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_function_mocker_test::LegacyMockMethodSizes1 Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_function_mocker_test::LegacyMockMethodSizes1}
{\xe \v testing::gmock_function_mocker_test::LegacyMockMethodSizes1}
{\bkmkstart AAAAAAACNG}
{\bkmkend AAAAAAACNG}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (func, void(int)){\bkmkstart AAAAAAACNH}
{\bkmkend AAAAAAACNH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-function-mocker_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_function_mocker_test::LegacyMockMethodSizes2 Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_function_mocker_test::LegacyMockMethodSizes2}
{\xe \v testing::gmock_function_mocker_test::LegacyMockMethodSizes2}
{\bkmkstart AAAAAAACNI}
{\bkmkend AAAAAAACNI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD2} (func, void(int, int)){\bkmkstart AAAAAAACNJ}
{\bkmkend AAAAAAACNJ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-function-mocker_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_function_mocker_test::LegacyMockMethodSizes3 Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_function_mocker_test::LegacyMockMethodSizes3}
{\xe \v testing::gmock_function_mocker_test::LegacyMockMethodSizes3}
{\bkmkstart AAAAAAACNK}
{\bkmkend AAAAAAACNK}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD3} (func, void(int, int, int)){\bkmkstart AAAAAAACNL}
{\bkmkend AAAAAAACNL}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-function-mocker_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_function_mocker_test::LegacyMockMethodSizes4 Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_function_mocker_test::LegacyMockMethodSizes4}
{\xe \v testing::gmock_function_mocker_test::LegacyMockMethodSizes4}
{\bkmkstart AAAAAAACNM}
{\bkmkend AAAAAAACNM}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD4} (func, void(int, int, int, int)){\bkmkstart AAAAAAACNN}
{\bkmkend AAAAAAACNN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-function-mocker_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_function_mocker_test::LegacyMockOverloadedOnArgNumber Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_function_mocker_test::LegacyMockOverloadedOnArgNumber}
{\xe \v testing::gmock_function_mocker_test::LegacyMockOverloadedOnArgNumber}
{\bkmkstart AAAAAAACNO}
{\bkmkend AAAAAAACNO}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b LEGACY_MY_MOCK_METHODS1_}{\bkmkstart AAAAAAACNP}
{\bkmkend AAAAAAACNP}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-function-mocker_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_function_mocker_test::LegacyMockStack< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_function_mocker_test::LegacyMockStack< T >}
{\xe \v testing::gmock_function_mocker_test::LegacyMockStack< T >}
{\bkmkstart AAAAAAACNQ}
{\bkmkend AAAAAAACNQ}
Inheritance diagram for testing::gmock_function_mocker_test::LegacyMockStack< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__function__mocker__test_1_1_legacy_mock_stack.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1_T} (Push, void(const T &elem)){\bkmkstart AAAAAAACNR}
{\bkmkend AAAAAAACNR}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD0_T} (Pop, void()){\bkmkstart AAAAAAACNS}
{\bkmkend AAAAAAACNS}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_CONST_METHOD0_T} (GetSize, int()){\bkmkstart AAAAAAACNT}
{\bkmkend AAAAAAACNT}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_CONST_METHOD0_T} (GetTop, const T &()){\bkmkstart AAAAAAACNU}
{\bkmkend AAAAAAACNU}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD0_T} (ReturnTypeWithComma, std::map< int, int >()){\bkmkstart AAAAAAACNV}
{\bkmkend AAAAAAACNV}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_CONST_METHOD1_T} (ReturnTypeWithComma, std::map< int, int >(int)){\bkmkstart AAAAAAACNW}
{\bkmkend AAAAAAACNW}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-function-mocker_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::LessByName< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::LessByName< T >}
{\xe \v testing::internal::LessByName< T >}
{\bkmkstart AAAAAAADFK}
{\bkmkend AAAAAAADFK}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b operator()} (const T *a, const T *b){\bkmkstart AAAAAAADFL}
{\bkmkend AAAAAAADFL}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest-unittest-api_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ListenerTest Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ListenerTest}
{\xe \v testing::internal::ListenerTest}
{\bkmkstart AAAAAAADFM}
{\bkmkend AAAAAAADFM}
Inheritance diagram for testing::internal::ListenerTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_listener_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SetUp} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b TearDown} () override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b SetUpTestSuite} (){\bkmkstart AAAAAAADFN}
{\bkmkend AAAAAAADFN}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b TearDownTestSuite} (){\bkmkstart AAAAAAADFO}
{\bkmkend AAAAAAADFO}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v SetUp\:testing::internal::ListenerTest}
{\xe \v testing::internal::ListenerTest\:SetUp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::ListenerTest::SetUp (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADFP}
{\bkmkend AAAAAAADFP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v TearDown\:testing::internal::ListenerTest}
{\xe \v testing::internal::ListenerTest\:TearDown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::ListenerTest::TearDown (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADFQ}
{\bkmkend AAAAAAADFQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-listener-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::internal_stream_operator_without_lexical_name_lookup::LookupBlocker Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::internal_stream_operator_without_lexical_name_lookup::LookupBlocker}
{\xe \v testing::internal::internal_stream_operator_without_lexical_name_lookup::LookupBlocker}
{\bkmkstart AAAAAAADXE}
{\bkmkend AAAAAAADXE}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
MacroNamingTest Class Reference\par \pard\plain 
{\tc\tcl2 \v MacroNamingTest}
{\xe \v MacroNamingTest}
{\bkmkstart AAAAAAABET}
{\bkmkend AAAAAAABET}
Inheritance diagram for MacroNamingTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_macro_naming_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
MacroNamingTestNonParametrized Class Reference\par \pard\plain 
{\tc\tcl2 \v MacroNamingTestNonParametrized}
{\xe \v MacroNamingTestNonParametrized}
{\bkmkstart AAAAAAABEU}
{\bkmkend AAAAAAABEU}
Inheritance diagram for MacroNamingTestNonParametrized:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_macro_naming_test_non_parametrized.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::MakeIndexSequenceImpl< N > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::MakeIndexSequenceImpl< N >}
{\xe \v testing::internal::MakeIndexSequenceImpl< N >}
{\bkmkstart AAAAAAADFR}
{\bkmkend AAAAAAADFR}
Inheritance diagram for testing::internal::MakeIndexSequenceImpl< N >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_make_index_sequence_impl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::MakeIndexSequenceImpl< 0 > Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::MakeIndexSequenceImpl< 0 >}
{\xe \v testing::internal::MakeIndexSequenceImpl< 0 >}
{\bkmkstart AAAAAAADFS}
{\bkmkend AAAAAAADFS}
Inheritance diagram for testing::internal::MakeIndexSequenceImpl< 0 >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_make_index_sequence_impl_3_010_01_4.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::MarkAsIgnored Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::MarkAsIgnored}
{\xe \v testing::internal::MarkAsIgnored}
{\bkmkstart AAAAAAADFT}
{\bkmkend AAAAAAADFT}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MarkAsIgnored} (const char *test_suite){\bkmkstart AAAAAAADFU}
{\bkmkend AAAAAAADFU}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-param-util.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::Matcher< typename > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::Matcher< typename >}
{\xe \v testing::Matcher< typename >}
{\bkmkstart AAAAAAACCM}
{\bkmkend AAAAAAACCM}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::MaxBipartiteMatchState Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::MaxBipartiteMatchState}
{\xe \v testing::internal::MaxBipartiteMatchState}
{\bkmkstart AAAAAAADFV}
{\bkmkend AAAAAAADFV}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MaxBipartiteMatchState} (const MatchMatrix &graph){\bkmkstart AAAAAAADFW}
{\bkmkend AAAAAAADFW}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

ElementMatcherPairs {\b Compute} (){\bkmkstart AAAAAAADFX}
{\bkmkend AAAAAAADFX}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/src/gmock-matchers.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
my_namespace::testing::Message Class Reference\par \pard\plain 
{\tc\tcl2 \v my_namespace::testing::Message}
{\xe \v my_namespace::testing::Message}
{\bkmkstart AAAAAAABYR}
{\bkmkend AAAAAAABYR}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::Message Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::Message}
{\xe \v testing::Message}
{\bkmkstart AAAAAAACCN}
{\bkmkend AAAAAAACCN}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Message} (const {\b Message} &msg){\bkmkstart AAAAAAACCO}
{\bkmkend AAAAAAACCO}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Message} (const char *str){\bkmkstart AAAAAAACCP}
{\bkmkend AAAAAAACCP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > {\b Message} & {\b operator<<} (const T &val){\bkmkstart AAAAAAACCQ}
{\bkmkend AAAAAAACCQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > {\b Message} & {\b operator<<} (T *const &pointer){\bkmkstart AAAAAAACCR}
{\bkmkend AAAAAAACCR}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Message} & {\b operator<<} (BasicNarrowIoManip val){\bkmkstart AAAAAAACCS}
{\bkmkend AAAAAAACCS}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Message} & {\b operator<<} (bool b){\bkmkstart AAAAAAACCT}
{\bkmkend AAAAAAACCT}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Message} & {\b operator<<} (const wchar_t *wide_c_str){\bkmkstart AAAAAAACCU}
{\bkmkend AAAAAAACCU}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Message} & {\b operator<<} (wchar_t *wide_c_str){\bkmkstart AAAAAAACCV}
{\bkmkend AAAAAAACCV}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::string {\b GetString} () const{\bkmkstart AAAAAAACCW}
{\bkmkend AAAAAAACCW}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest-message.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
MissingDebugStringMethod Struct Reference\par \pard\plain 
{\tc\tcl2 \v MissingDebugStringMethod}
{\xe \v MissingDebugStringMethod}
{\bkmkstart AAAAAAABEV}
{\bkmkend AAAAAAABEV}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::string {\b DebugString} (){\bkmkstart AAAAAAABEW}
{\bkmkend AAAAAAABEW}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
bar::MixedUpTestSuiteTest Class Reference\par \pard\plain 
{\tc\tcl2 \v bar::MixedUpTestSuiteTest}
{\xe \v bar::MixedUpTestSuiteTest}
{\bkmkstart AAAAAAABQK}
{\bkmkend AAAAAAABQK}
Inheritance diagram for bar::MixedUpTestSuiteTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classbar_1_1_mixed_up_test_suite_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-output-test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
foo::MixedUpTestSuiteTest Class Reference\par \pard\plain 
{\tc\tcl2 \v foo::MixedUpTestSuiteTest}
{\xe \v foo::MixedUpTestSuiteTest}
{\bkmkstart AAAAAAABQM}
{\bkmkend AAAAAAABQM}
Inheritance diagram for foo::MixedUpTestSuiteTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classfoo_1_1_mixed_up_test_suite_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-output-test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
bar::MixedUpTestSuiteWithSameTestNameTest Class Reference\par \pard\plain 
{\tc\tcl2 \v bar::MixedUpTestSuiteWithSameTestNameTest}
{\xe \v bar::MixedUpTestSuiteWithSameTestNameTest}
{\bkmkstart AAAAAAABQL}
{\bkmkend AAAAAAABQL}
Inheritance diagram for bar::MixedUpTestSuiteWithSameTestNameTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classbar_1_1_mixed_up_test_suite_with_same_test_name_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-output-test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
foo::MixedUpTestSuiteWithSameTestNameTest Class Reference\par \pard\plain 
{\tc\tcl2 \v foo::MixedUpTestSuiteWithSameTestNameTest}
{\xe \v foo::MixedUpTestSuiteWithSameTestNameTest}
{\bkmkstart AAAAAAABQN}
{\bkmkend AAAAAAABQN}
Inheritance diagram for foo::MixedUpTestSuiteWithSameTestNameTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classfoo_1_1_mixed_up_test_suite_with_same_test_name_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-output-test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Mock Class Reference\par \pard\plain 
{\tc\tcl2 \v Mock}
{\xe \v Mock}
{\bkmkstart AAAAAAABEX}
{\bkmkend AAAAAAABEX}
Inheritance diagram for Mock:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_mock.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD0} (DoThis, void()){\bkmkstart AAAAAAABEY}
{\bkmkend AAAAAAABEY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (VoidFromString, void(char *str)){\bkmkstart AAAAAAABEZ}
{\bkmkend AAAAAAABEZ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (StringFromString, char *(char *str)){\bkmkstart AAAAAAABFA}
{\bkmkend AAAAAAABFA}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (IntFromString, int(char *str)){\bkmkstart AAAAAAABFB}
{\bkmkend AAAAAAABFB}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (IntRefFromString, int &(char *str)){\bkmkstart AAAAAAABFC}
{\bkmkend AAAAAAABFC}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (VoidFromFunc, void(void(*func)(char *str))){\bkmkstart AAAAAAABFD}
{\bkmkend AAAAAAABFD}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (VoidFromIntRef, void(int &n)){\bkmkstart AAAAAAABFE}
{\bkmkend AAAAAAABFE}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (VoidFromFloat, void(float n)){\bkmkstart AAAAAAABFF}
{\bkmkend AAAAAAABFF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (VoidFromDouble, void(double n)){\bkmkstart AAAAAAABFG}
{\bkmkend AAAAAAABFG}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (VoidFromVector, void(const std::vector< int > &v)){\bkmkstart AAAAAAABFH}
{\bkmkend AAAAAAABFH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-nice-strict_test.cc\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock_link_test.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_function_mocker_test::MockB Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_function_mocker_test::MockB}
{\xe \v testing::gmock_function_mocker_test::MockB}
{\bkmkstart AAAAAAACNX}
{\bkmkend AAAAAAACNX}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (void, DoB,()){\bkmkstart AAAAAAACNY}
{\bkmkend AAAAAAACNY}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-function-mocker_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_nice_strict_test::MockBar Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_nice_strict_test::MockBar}
{\xe \v testing::gmock_nice_strict_test::MockBar}
{\bkmkstart AAAAAAACSP}
{\bkmkend AAAAAAACSP}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MockBar} (const std::string &s){\bkmkstart AAAAAAACSQ}
{\bkmkend AAAAAAACSQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MockBar} (char a1, char a2, std::string a3, std::string a4, int a5, int a6, const std::string &a7, const std::string &a8, bool a9, bool a10){\bkmkstart AAAAAAACSR}
{\bkmkend AAAAAAACSR}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const std::string & {\b str} () const{\bkmkstart AAAAAAACSS}
{\bkmkend AAAAAAACSS}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD0} (This, int()){\bkmkstart AAAAAAACST}
{\bkmkend AAAAAAACST}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD2} (That, std::string(int, bool)){\bkmkstart AAAAAAACSU}
{\bkmkend AAAAAAACSU}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-nice-strict_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_nice_strict_test::MockBaz Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_nice_strict_test::MockBaz}
{\xe \v testing::gmock_nice_strict_test::MockBaz}
{\bkmkstart AAAAAAACSV}
{\bkmkend AAAAAAACSV}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b MoveOnly}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MockBaz} ({\b MoveOnly}){\bkmkstart AAAAAAACSW}
{\bkmkend AAAAAAACSW}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-nice-strict_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
MockFoo Class Reference\par \pard\plain 
{\tc\tcl2 \v MockFoo}
{\xe \v MockFoo}
{\bkmkstart AAAAAAABFI}
{\bkmkend AAAAAAABFI}
\par
{
Inherits FooInterface.}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD3} (Bar, char(const std::string &s, int i, double x)){\bkmkstart AAAAAAABFJ}
{\bkmkend AAAAAAABFJ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD2} (Bar2, bool(int x, int y)){\bkmkstart AAAAAAABFK}
{\bkmkend AAAAAAABFK}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD2} (Bar3, void(int x, int y)){\bkmkstart AAAAAAABFL}
{\bkmkend AAAAAAABFL}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock_output_test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_function_mocker_test::MockFoo Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_function_mocker_test::MockFoo}
{\xe \v testing::gmock_function_mocker_test::MockFoo}
{\bkmkstart AAAAAAACNZ}
{\bkmkend AAAAAAACNZ}
Inheritance diagram for testing::gmock_function_mocker_test::MockFoo:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__function__mocker__test_1_1_mock_foo.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (void, VoidReturning,(int n)){\bkmkstart AAAAAAACOA}
{\bkmkend AAAAAAACOA}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (int, Nullary,()){\bkmkstart AAAAAAACOB}
{\bkmkend AAAAAAACOB}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (bool, Unary,(int)){\bkmkstart AAAAAAACOC}
{\bkmkend AAAAAAACOC}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (long, Binary,(short, int)){\bkmkstart AAAAAAACOD}
{\bkmkend AAAAAAACOD}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (int, Decimal,(bool, char, short, int, long, float, double, unsigned, char *, const std::string &str),(override)){\bkmkstart AAAAAAACOE}
{\bkmkend AAAAAAACOE}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (bool, TakesNonConstReference,(int &)){\bkmkstart AAAAAAACOF}
{\bkmkend AAAAAAACOF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (std::string, TakesConstReference,(const int &)){\bkmkstart AAAAAAACOG}
{\bkmkend AAAAAAACOG}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (bool, TakesConst,(const int)){\bkmkstart AAAAAAACOH}
{\bkmkend AAAAAAACOH}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} ((std::map< int, std::string >), ReturnTypeWithComma,(),()){\bkmkstart AAAAAAACOI}
{\bkmkend AAAAAAACOI}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} ((std::map< int, std::string >), ReturnTypeWithComma,(int),(const)){\bkmkstart AAAAAAACOJ}
{\bkmkend AAAAAAACOJ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (int, OverloadedOnArgumentNumber,()){\bkmkstart AAAAAAACOK}
{\bkmkend AAAAAAACOK}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (int, OverloadedOnArgumentNumber,(int)){\bkmkstart AAAAAAACOL}
{\bkmkend AAAAAAACOL}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (int, OverloadedOnArgumentType,(int)){\bkmkstart AAAAAAACOM}
{\bkmkend AAAAAAACOM}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (char, OverloadedOnArgumentType,(char)){\bkmkstart AAAAAAACON}
{\bkmkend AAAAAAACON}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (int, OverloadedOnConstness,(),(override)){\bkmkstart AAAAAAACOO}
{\bkmkend AAAAAAACOO}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (char, OverloadedOnConstness,(),(override, const)){\bkmkstart AAAAAAACOP}
{\bkmkend AAAAAAACOP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (int, TypeWithHole,(int(*)()),()){\bkmkstart AAAAAAACOQ}
{\bkmkend AAAAAAACOQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (int, TypeWithComma,((const std::map< int, std::string > &))){\bkmkstart AAAAAAACOR}
{\bkmkend AAAAAAACOR}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (int, TypeWithTemplatedCopyCtor,(const {\b TemplatedCopyable}< int > &)){\bkmkstart AAAAAAACOS}
{\bkmkend AAAAAAACOS}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (int(*)(bool), ReturnsFunctionPointer1,(int),()){\bkmkstart AAAAAAACOT}
{\bkmkend AAAAAAACOT}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (fn_ptr, ReturnsFunctionPointer2,(int),()){\bkmkstart AAAAAAACOU}
{\bkmkend AAAAAAACOU}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (int, RefQualifiedConstRef,(),(const, ref(&), override)){\bkmkstart AAAAAAACOV}
{\bkmkend AAAAAAACOV}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (int, RefQualifiedConstRefRef,(),(const, ref(&&), override)){\bkmkstart AAAAAAACOW}
{\bkmkend AAAAAAACOW}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (int, RefQualifiedRef,(),(ref(&), override)){\bkmkstart AAAAAAACOX}
{\bkmkend AAAAAAACOX}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (int, RefQualifiedRefRef,(),(ref(&&), override)){\bkmkstart AAAAAAACOY}
{\bkmkend AAAAAAACOY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (int, RefQualifiedOverloaded,(),(const, ref(&), override)){\bkmkstart AAAAAAACOZ}
{\bkmkend AAAAAAACOZ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (int, RefQualifiedOverloaded,(),(const, ref(&&), override)){\bkmkstart AAAAAAACPA}
{\bkmkend AAAAAAACPA}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (int, RefQualifiedOverloaded,(),(ref(&), override)){\bkmkstart AAAAAAACPB}
{\bkmkend AAAAAAACPB}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (int, RefQualifiedOverloaded,(),(ref(&&), override)){\bkmkstart AAAAAAACPC}
{\bkmkend AAAAAAACPC}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-function-mocker_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_nice_strict_test::MockFoo Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_nice_strict_test::MockFoo}
{\xe \v testing::gmock_nice_strict_test::MockFoo}
{\bkmkstart AAAAAAACTC}
{\bkmkend AAAAAAACTC}
Inheritance diagram for testing::gmock_nice_strict_test::MockFoo:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__nice__strict__test_1_1_mock_foo.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b Delete} (){\bkmkstart AAAAAAACTD}
{\bkmkend AAAAAAACTD}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD0} (DoThis, void()){\bkmkstart AAAAAAACTE}
{\bkmkend AAAAAAACTE}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (DoThat, int(bool flag)){\bkmkstart AAAAAAACTF}
{\bkmkend AAAAAAACTF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD0} (ReturnNonDefaultConstructible, {\b NotDefaultConstructible}()){\bkmkstart AAAAAAACTG}
{\bkmkend AAAAAAACTG}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-nice-strict_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_function_mocker_test::MockMethodMockFunctionSignatureTest< F > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_function_mocker_test::MockMethodMockFunctionSignatureTest< F >}
{\xe \v testing::gmock_function_mocker_test::MockMethodMockFunctionSignatureTest< F >}
{\bkmkstart AAAAAAACPD}
{\bkmkend AAAAAAACPD}
Inheritance diagram for testing::gmock_function_mocker_test::MockMethodMockFunctionSignatureTest< F >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__function__mocker__test_1_1_mock_method_mock_function_signature_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-function-mocker_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_function_mocker_test::MockMethodNoexceptSpecifier Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_function_mocker_test::MockMethodNoexceptSpecifier}
{\xe \v testing::gmock_function_mocker_test::MockMethodNoexceptSpecifier}
{\bkmkstart AAAAAAACPE}
{\bkmkend AAAAAAACPE}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (void, func1,(),(noexcept)){\bkmkstart AAAAAAACPF}
{\bkmkend AAAAAAACPF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (void, func2,(),(noexcept(true))){\bkmkstart AAAAAAACPG}
{\bkmkend AAAAAAACPG}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (void, func3,(),(noexcept(false))){\bkmkstart AAAAAAACPH}
{\bkmkend AAAAAAACPH}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (void, func4,(),(noexcept(noexcept(MaybeThrows())))){\bkmkstart AAAAAAACPI}
{\bkmkend AAAAAAACPI}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (void, func5,(),(noexcept(noexcept(DoesntThrow())))){\bkmkstart AAAAAAACPJ}
{\bkmkend AAAAAAACPJ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (void, func6,(),(noexcept(noexcept(DoesntThrow())), const)){\bkmkstart AAAAAAACPK}
{\bkmkend AAAAAAACPK}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (void, func7,(),(const, noexcept(noexcept(DoesntThrow())))){\bkmkstart AAAAAAACPL}
{\bkmkend AAAAAAACPL}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (void, func8,(),(noexcept(noexcept(hasTwoParams(1, 2))), const)){\bkmkstart AAAAAAACPM}
{\bkmkend AAAAAAACPM}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-function-mocker_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_function_mocker_test::MockMethodSizes0 Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_function_mocker_test::MockMethodSizes0}
{\xe \v testing::gmock_function_mocker_test::MockMethodSizes0}
{\bkmkstart AAAAAAACPN}
{\bkmkend AAAAAAACPN}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (void, func,()){\bkmkstart AAAAAAACPO}
{\bkmkend AAAAAAACPO}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-function-mocker_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_function_mocker_test::MockMethodSizes1 Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_function_mocker_test::MockMethodSizes1}
{\xe \v testing::gmock_function_mocker_test::MockMethodSizes1}
{\bkmkstart AAAAAAACPP}
{\bkmkend AAAAAAACPP}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (void, func,(int)){\bkmkstart AAAAAAACPQ}
{\bkmkend AAAAAAACPQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-function-mocker_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_function_mocker_test::MockMethodSizes2 Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_function_mocker_test::MockMethodSizes2}
{\xe \v testing::gmock_function_mocker_test::MockMethodSizes2}
{\bkmkstart AAAAAAACPR}
{\bkmkend AAAAAAACPR}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (void, func,(int, int)){\bkmkstart AAAAAAACPS}
{\bkmkend AAAAAAACPS}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-function-mocker_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_function_mocker_test::MockMethodSizes3 Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_function_mocker_test::MockMethodSizes3}
{\xe \v testing::gmock_function_mocker_test::MockMethodSizes3}
{\bkmkstart AAAAAAACPT}
{\bkmkend AAAAAAACPT}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (void, func,(int, int, int)){\bkmkstart AAAAAAACPU}
{\bkmkend AAAAAAACPU}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-function-mocker_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_function_mocker_test::MockMethodSizes4 Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_function_mocker_test::MockMethodSizes4}
{\xe \v testing::gmock_function_mocker_test::MockMethodSizes4}
{\bkmkstart AAAAAAACPV}
{\bkmkend AAAAAAACPV}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (void, func,(int, int, int, int)){\bkmkstart AAAAAAACPW}
{\bkmkend AAAAAAACPW}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-function-mocker_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_function_mocker_test::MockOverloadedOnArgNumber Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_function_mocker_test::MockOverloadedOnArgNumber}
{\xe \v testing::gmock_function_mocker_test::MockOverloadedOnArgNumber}
{\bkmkstart AAAAAAACPX}
{\bkmkend AAAAAAACPX}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MY_MOCK_METHODS1_}{\bkmkstart AAAAAAACPY}
{\bkmkend AAAAAAACPY}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-function-mocker_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_function_mocker_test::MockOverloadedOnConstness Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_function_mocker_test::MockOverloadedOnConstness}
{\xe \v testing::gmock_function_mocker_test::MockOverloadedOnConstness}
{\bkmkstart AAAAAAACPZ}
{\bkmkend AAAAAAACPZ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MY_MOCK_METHODS2_}{\bkmkstart AAAAAAACQA}
{\bkmkend AAAAAAACQA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-function-mocker_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_function_mocker_test::MockStack< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_function_mocker_test::MockStack< T >}
{\xe \v testing::gmock_function_mocker_test::MockStack< T >}
{\bkmkstart AAAAAAACQB}
{\bkmkend AAAAAAACQB}
Inheritance diagram for testing::gmock_function_mocker_test::MockStack< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__function__mocker__test_1_1_mock_stack.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (void, Push,(const T &elem),()){\bkmkstart AAAAAAACQC}
{\bkmkend AAAAAAACQC}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (void, Pop,(),(final)){\bkmkstart AAAAAAACQD}
{\bkmkend AAAAAAACQD}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (int, GetSize,(),(const, override)){\bkmkstart AAAAAAACQE}
{\bkmkend AAAAAAACQE}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} (const T &, GetTop,(),(const)){\bkmkstart AAAAAAACQF}
{\bkmkend AAAAAAACQF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} ((std::map< int, int >), ReturnTypeWithComma,(),()){\bkmkstart AAAAAAACQG}
{\bkmkend AAAAAAACQG}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD} ((std::map< int, int >), ReturnTypeWithComma,(int),(const)){\bkmkstart AAAAAAACQH}
{\bkmkend AAAAAAACQH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-function-mocker_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_nice_strict_test::MockBaz::MoveOnly Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_nice_strict_test::MockBaz::MoveOnly}
{\xe \v testing::gmock_nice_strict_test::MockBaz::MoveOnly}
{\bkmkstart AAAAAAACSX}
{\bkmkend AAAAAAACSX}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MoveOnly} (const {\b MoveOnly} &)=delete{\bkmkstart AAAAAAACSY}
{\bkmkend AAAAAAACSY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MoveOnly} & {\b operator=} (const {\b MoveOnly} &)=delete{\bkmkstart AAAAAAACSZ}
{\bkmkend AAAAAAACSZ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MoveOnly} ({\b MoveOnly} &&)=default{\bkmkstart AAAAAAACTA}
{\bkmkend AAAAAAACTA}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MoveOnly} & {\b operator=} ({\b MoveOnly} &&)=default{\bkmkstart AAAAAAACTB}
{\bkmkend AAAAAAACTB}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-nice-strict_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
MultipleInstantiationTest Class Reference\par \pard\plain 
{\tc\tcl2 \v MultipleInstantiationTest}
{\xe \v MultipleInstantiationTest}
{\bkmkstart AAAAAAABFM}
{\bkmkend AAAAAAABFM}
Inheritance diagram for MultipleInstantiationTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_multiple_instantiation_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Mutex Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Mutex}
{\xe \v testing::internal::Mutex}
{\bkmkstart AAAAAAADFY}
{\bkmkend AAAAAAADFY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b Lock} (){\bkmkstart AAAAAAADFZ}
{\bkmkend AAAAAAADFZ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b Unlock} (){\bkmkstart AAAAAAADGA}
{\bkmkend AAAAAAADGA}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b AssertHeld} () const{\bkmkstart AAAAAAADGB}
{\bkmkend AAAAAAADGB}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-port.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
MyArray< T, kSize > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v MyArray< T, kSize >}
{\xe \v MyArray< T, kSize >}
{\bkmkstart AAAAAAABFN}
{\bkmkend AAAAAAABFN}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-list-tests-unittest_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
MyEnumTest Class Reference\par \pard\plain 
{\tc\tcl2 \v MyEnumTest}
{\xe \v MyEnumTest}
{\bkmkstart AAAAAAABFO}
{\bkmkend AAAAAAABFO}
Inheritance diagram for MyEnumTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_my_enum_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
library2::MyPair< T1, T2 > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v library2::MyPair< T1, T2 >}
{\xe \v library2::MyPair< T1, T2 >}
{\bkmkstart AAAAAAABYN}
{\bkmkend AAAAAAABYN}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest-typed-test_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
MyString Class Reference\par \pard\plain 
{\tc\tcl2 \v MyString}
{\xe \v MyString}
{\bkmkstart AAAAAAABFP}
{\bkmkend AAAAAAABFP}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MyString} (const char *a_c_string){\bkmkstart AAAAAAABFQ}
{\bkmkend AAAAAAABFQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MyString} (const {\b MyString} &string){\bkmkstart AAAAAAABFR}
{\bkmkend AAAAAAABFR}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b c_string} () const{\bkmkstart AAAAAAABFS}
{\bkmkend AAAAAAABFS}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

size_t {\b Length} () const{\bkmkstart AAAAAAABFT}
{\bkmkend AAAAAAABFT}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b Set} (const char *c_string){\bkmkstart AAAAAAABFU}
{\bkmkend AAAAAAABFU}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const char * {\b CloneCString} (const char *a_c_string){\bkmkstart AAAAAAABFV}
{\bkmkend AAAAAAABFV}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/samples/sample2.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/samples/sample2.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
MyType Class Reference\par \pard\plain 
{\tc\tcl2 \v MyType}
{\xe \v MyType}
{\bkmkstart AAAAAAABFW}
{\bkmkend AAAAAAABFW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MyType} (const std::string &a_value){\bkmkstart AAAAAAABFX}
{\bkmkend AAAAAAABFX}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const std::string & {\b value} () const{\bkmkstart AAAAAAABFY}
{\bkmkend AAAAAAABFY}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-list-tests-unittest_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
namespace1::MyTypeInNameSpace1 Class Reference\par \pard\plain 
{\tc\tcl2 \v namespace1::MyTypeInNameSpace1}
{\xe \v namespace1::MyTypeInNameSpace1}
{\bkmkstart AAAAAAABYT}
{\bkmkend AAAAAAABYT}
Inheritance diagram for namespace1::MyTypeInNameSpace1:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classnamespace1_1_1_my_type_in_name_space1.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MyTypeInNameSpace1} (int an_x){\bkmkstart AAAAAAABYU}
{\bkmkend AAAAAAABYU}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
namespace2::MyTypeInNameSpace2 Class Reference\par \pard\plain 
{\tc\tcl2 \v namespace2::MyTypeInNameSpace2}
{\xe \v namespace2::MyTypeInNameSpace2}
{\bkmkstart AAAAAAABYV}
{\bkmkend AAAAAAABYV}
Inheritance diagram for namespace2::MyTypeInNameSpace2:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classnamespace2_1_1_my_type_in_name_space2.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MyTypeInNameSpace2} (int an_x){\bkmkstart AAAAAAABYW}
{\bkmkend AAAAAAABYW}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::NaggyMock< MockClass > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::NaggyMock< MockClass >}
{\xe \v testing::NaggyMock< MockClass >}
{\bkmkstart AAAAAAACCX}
{\bkmkend AAAAAAACCX}
Inheritance diagram for testing::NaggyMock< MockClass >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_naggy_mock.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A > {\b NaggyMock} (A &&arg){\bkmkstart AAAAAAACCY}
{\bkmkend AAAAAAACCY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename TArg1 , typename TArg2 , typename... An> {\b NaggyMock} (TArg1 &&arg1, TArg2 &&arg2, An &&... args){\bkmkstart AAAAAAACCZ}
{\bkmkend AAAAAAACCZ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-nice-strict.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::NaggyMockImpl< Base > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::NaggyMockImpl< Base >}
{\xe \v testing::internal::NaggyMockImpl< Base >}
{\bkmkstart AAAAAAADGC}
{\bkmkend AAAAAAADGC}
Inheritance diagram for testing::internal::NaggyMockImpl< Base >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_naggy_mock_impl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-nice-strict.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::NameGeneratorSelector< Provided > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::NameGeneratorSelector< Provided >}
{\xe \v testing::internal::NameGeneratorSelector< Provided >}
{\bkmkstart AAAAAAADGD}
{\bkmkend AAAAAAADGD}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef Provided {\b type}{\bkmkstart AAAAAAADGE}
{\bkmkend AAAAAAADGE}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
NamingTest Class Reference\par \pard\plain 
{\tc\tcl2 \v NamingTest}
{\xe \v NamingTest}
{\bkmkstart AAAAAAABFZ}
{\bkmkend AAAAAAABFZ}
Inheritance diagram for NamingTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_naming_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::NativeArray< Element > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::NativeArray< Element >}
{\xe \v testing::internal::NativeArray< Element >}
{\bkmkstart AAAAAAADGF}
{\bkmkend AAAAAAADGF}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef Element {\b value_type}{\bkmkstart AAAAAAADGG}
{\bkmkend AAAAAAADGG}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef Element * {\b iterator}{\bkmkstart AAAAAAADGH}
{\bkmkend AAAAAAADGH}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef const Element * {\b const_iterator}{\bkmkstart AAAAAAADGI}
{\bkmkend AAAAAAADGI}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b NativeArray} (const Element *array, size_t count, {\b RelationToSourceReference}){\bkmkstart AAAAAAADGJ}
{\bkmkend AAAAAAADGJ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b NativeArray} (const Element *array, size_t count, {\b RelationToSourceCopy}){\bkmkstart AAAAAAADGK}
{\bkmkend AAAAAAADGK}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b NativeArray} (const {\b NativeArray} &rhs){\bkmkstart AAAAAAADGL}
{\bkmkend AAAAAAADGL}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

size_t {\b size} () const{\bkmkstart AAAAAAADGM}
{\bkmkend AAAAAAADGM}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const_iterator {\b begin} () const{\bkmkstart AAAAAAADGN}
{\bkmkend AAAAAAADGN}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const_iterator {\b end} () const{\bkmkstart AAAAAAADGO}
{\bkmkend AAAAAAADGO}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b operator==} (const {\b NativeArray} &rhs) const{\bkmkstart AAAAAAADGP}
{\bkmkend AAAAAAADGP}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::negation< P > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::negation< P >}
{\xe \v testing::internal::negation< P >}
{\bkmkstart AAAAAAADGQ}
{\bkmkend AAAAAAADGQ}
Inheritance diagram for testing::internal::negation< P >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1negation.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::NiceMock< MockClass > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::NiceMock< MockClass >}
{\xe \v testing::NiceMock< MockClass >}
{\bkmkstart AAAAAAACDA}
{\bkmkend AAAAAAACDA}
Inheritance diagram for testing::NiceMock< MockClass >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_nice_mock.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A > {\b NiceMock} (A &&arg){\bkmkstart AAAAAAACDB}
{\bkmkend AAAAAAACDB}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename TArg1 , typename TArg2 , typename... An> {\b NiceMock} (TArg1 &&arg1, TArg2 &&arg2, An &&... args){\bkmkstart AAAAAAACDC}
{\bkmkend AAAAAAACDC}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-nice-strict.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::NiceMockImpl< Base > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::NiceMockImpl< Base >}
{\xe \v testing::internal::NiceMockImpl< Base >}
{\bkmkstart AAAAAAADGR}
{\bkmkend AAAAAAADGR}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-nice-strict.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::NoDefaultContructor Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::NoDefaultContructor}
{\xe \v testing::internal::NoDefaultContructor}
{\bkmkstart AAAAAAADGS}
{\bkmkend AAAAAAADGS}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b NoDefaultContructor} (const char *){\bkmkstart AAAAAAADGT}
{\bkmkend AAAAAAADGT}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b NoDefaultContructor} (const {\b NoDefaultContructor} &){\bkmkstart AAAAAAADGU}
{\bkmkend AAAAAAADGU}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-port-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
NonContainer Class Reference\par \pard\plain 
{\tc\tcl2 \v NonContainer}
{\xe \v NonContainer}
{\bkmkstart AAAAAAABGA}
{\bkmkend AAAAAAABGA}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
NonDefaultConstructAssignString Class Reference\par \pard\plain 
{\tc\tcl2 \v NonDefaultConstructAssignString}
{\xe \v NonDefaultConstructAssignString}
{\bkmkstart AAAAAAABGB}
{\bkmkend AAAAAAABGB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b NonDefaultConstructAssignString} (const std::string &s){\bkmkstart AAAAAAABGC}
{\bkmkend AAAAAAABGC}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b NonDefaultConstructAssignString} (const {\b NonDefaultConstructAssignString} &)=default{\bkmkstart AAAAAAABGD}
{\bkmkend AAAAAAABGD}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b NonDefaultConstructAssignString} & {\b operator=} (const {\b NonDefaultConstructAssignString} &)=delete{\bkmkstart AAAAAAABGE}
{\bkmkend AAAAAAABGE}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const std::string & {\b str} () const{\bkmkstart AAAAAAABGF}
{\bkmkend AAAAAAABGF}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::None Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::None}
{\xe \v testing::internal::None}
{\bkmkstart AAAAAAADGV}
{\bkmkend AAAAAAADGV}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-type-util.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
NonFatalFailureInFixtureConstructorTest Class Reference\par \pard\plain 
{\tc\tcl2 \v NonFatalFailureInFixtureConstructorTest}
{\xe \v NonFatalFailureInFixtureConstructorTest}
{\bkmkstart AAAAAAABGG}
{\bkmkend AAAAAAABGG}
Inheritance diagram for NonFatalFailureInFixtureConstructorTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_non_fatal_failure_in_fixture_constructor_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SetUp} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b TearDown} () override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v SetUp\:NonFatalFailureInFixtureConstructorTest}
{\xe \v NonFatalFailureInFixtureConstructorTest\:SetUp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void NonFatalFailureInFixtureConstructorTest::SetUp (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABGH}
{\bkmkend AAAAAAABGH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v TearDown\:NonFatalFailureInFixtureConstructorTest}
{\xe \v NonFatalFailureInFixtureConstructorTest\:TearDown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void NonFatalFailureInFixtureConstructorTest::TearDown (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABGI}
{\bkmkend AAAAAAABGI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-output-test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
NonFatalFailureInSetUpTest Class Reference\par \pard\plain 
{\tc\tcl2 \v NonFatalFailureInSetUpTest}
{\xe \v NonFatalFailureInSetUpTest}
{\bkmkstart AAAAAAABGJ}
{\bkmkend AAAAAAABGJ}
Inheritance diagram for NonFatalFailureInSetUpTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_non_fatal_failure_in_set_up_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SetUp} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b TearDown} () override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v SetUp\:NonFatalFailureInSetUpTest}
{\xe \v NonFatalFailureInSetUpTest\:SetUp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void NonFatalFailureInSetUpTest::SetUp (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABGK}
{\bkmkend AAAAAAABGK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v TearDown\:NonFatalFailureInSetUpTest}
{\xe \v NonFatalFailureInSetUpTest\:TearDown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void NonFatalFailureInSetUpTest::TearDown (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABGL}
{\bkmkend AAAAAAABGL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-output-test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
NonParameterizedBaseTest Class Reference\par \pard\plain 
{\tc\tcl2 \v NonParameterizedBaseTest}
{\xe \v NonParameterizedBaseTest}
{\bkmkstart AAAAAAABGM}
{\bkmkend AAAAAAABGM}
Inheritance diagram for NonParameterizedBaseTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_non_parameterized_base_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b n_}{\bkmkstart AAAAAAABGN}
{\bkmkend AAAAAAABGN}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
NotConstDebugStringMethod Struct Reference\par \pard\plain 
{\tc\tcl2 \v NotConstDebugStringMethod}
{\xe \v NotConstDebugStringMethod}
{\bkmkstart AAAAAAABGO}
{\bkmkend AAAAAAABGO}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::string {\b DebugString} (){\bkmkstart AAAAAAABGP}
{\bkmkend AAAAAAABGP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::string {\b ShortDebugString} () const{\bkmkstart AAAAAAABGQ}
{\bkmkend AAAAAAABGQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_nice_strict_test::NotDefaultConstructible Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_nice_strict_test::NotDefaultConstructible}
{\xe \v testing::gmock_nice_strict_test::NotDefaultConstructible}
{\bkmkstart AAAAAAACTH}
{\bkmkend AAAAAAACTH}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b NotDefaultConstructible} (int){\bkmkstart AAAAAAACTI}
{\bkmkend AAAAAAACTI}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-nice-strict_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
works_here::NotInstantiatedTest Class Reference\par \pard\plain 
{\tc\tcl2 \v works_here::NotInstantiatedTest}
{\xe \v works_here::NotInstantiatedTest}
{\bkmkstart AAAAAAADXH}
{\bkmkend AAAAAAADXH}
Inheritance diagram for works_here::NotInstantiatedTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classworks__here_1_1_not_instantiated_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
works_here::NotInstantiatedTypeTest< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v works_here::NotInstantiatedTypeTest< T >}
{\xe \v works_here::NotInstantiatedTypeTest< T >}
{\bkmkstart AAAAAAADXI}
{\bkmkend AAAAAAADXI}
Inheritance diagram for works_here::NotInstantiatedTypeTest< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classworks__here_1_1_not_instantiated_type_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
NotReallyAHashTable Struct Reference\par \pard\plain 
{\tc\tcl2 \v NotReallyAHashTable}
{\xe \v NotReallyAHashTable}
{\bkmkstart AAAAAAABGR}
{\bkmkend AAAAAAABGR}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef void {\b hasher}{\bkmkstart AAAAAAABGS}
{\bkmkend AAAAAAABGS}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef void {\b reverse_iterator}{\bkmkstart AAAAAAABGT}
{\bkmkend AAAAAAABGT}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
works_here::NotUsedTest Class Reference\par \pard\plain 
{\tc\tcl2 \v works_here::NotUsedTest}
{\xe \v works_here::NotUsedTest}
{\bkmkstart AAAAAAADXJ}
{\bkmkend AAAAAAADXJ}
Inheritance diagram for works_here::NotUsedTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classworks__here_1_1_not_used_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
works_here::NotUsedTypeTest< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v works_here::NotUsedTypeTest< T >}
{\xe \v works_here::NotUsedTypeTest< T >}
{\bkmkstart AAAAAAADXK}
{\bkmkend AAAAAAADXK}
Inheritance diagram for works_here::NotUsedTypeTest< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classworks__here_1_1_not_used_type_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
library1::NumericTest< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v library1::NumericTest< T >}
{\xe \v library1::NumericTest< T >}
{\bkmkstart AAAAAAABYM}
{\bkmkend AAAAAAABYM}
Inheritance diagram for library1::NumericTest< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classlibrary1_1_1_numeric_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest-typed-test_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
library2::NumericTest< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v library2::NumericTest< T >}
{\xe \v library2::NumericTest< T >}
{\bkmkstart AAAAAAABYO}
{\bkmkend AAAAAAABYO}
Inheritance diagram for library2::NumericTest< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classlibrary2_1_1_numeric_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest-typed-test_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::OnceAction< F > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::OnceAction< F >}
{\xe \v testing::OnceAction< F >}
{\bkmkstart AAAAAAACDD}
{\bkmkend AAAAAAACDD}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::OnceAction< Result(Args...)> Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::OnceAction< Result(Args...)>}
{\xe \v testing::OnceAction< Result(Args...)>}
{\bkmkstart AAAAAAACDE}
{\bkmkend AAAAAAACDE}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Callable , typename std::enable_if< {\b internal::conjunction}< {\b internal::negation}< std::is_same< {\b OnceAction}, typename std::decay< Callable >::type > >, {\b IsDirectlyCompatible}< Callable > > ::value, int >::type  = 0> {\b OnceAction} (Callable &&callable){\bkmkstart AAAAAAACDF}
{\bkmkend AAAAAAACDF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Callable , typename std::enable_if< {\b internal::conjunction}< {\b internal::negation}< std::is_same< {\b OnceAction}, typename std::decay< Callable >::type > >, {\b internal::negation}< {\b IsDirectlyCompatible}< Callable > >, {\b IsCompatibleAfterIgnoringArguments}< Callable > >::value, int >::type  = 0> {\b OnceAction} (Callable &&callable){\bkmkstart AAAAAAACDF}
{\bkmkend AAAAAAACDF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b OnceAction} (const {\b OnceAction} &)=delete{\bkmkstart AAAAAAACDG}
{\bkmkend AAAAAAACDG}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b OnceAction} & {\b operator=} (const {\b OnceAction} &)=delete{\bkmkstart AAAAAAACDH}
{\bkmkend AAAAAAACDH}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b OnceAction} ({\b OnceAction} &&)=default{\bkmkstart AAAAAAACDI}
{\bkmkend AAAAAAACDI}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

Result {\b Call} (Args... args) &&{\bkmkstart AAAAAAACDJ}
{\bkmkend AAAAAAACDJ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
OnTheFlyPrimeTable Class Reference\par \pard\plain 
{\tc\tcl2 \v OnTheFlyPrimeTable}
{\xe \v OnTheFlyPrimeTable}
{\bkmkstart AAAAAAABGU}
{\bkmkend AAAAAAABGU}
Inheritance diagram for OnTheFlyPrimeTable:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_on_the_fly_prime_table.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b IsPrime} (int n) const override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b GetNextPrime} (int p) const override\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v GetNextPrime\:OnTheFlyPrimeTable}
{\xe \v OnTheFlyPrimeTable\:GetNextPrime}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int OnTheFlyPrimeTable::GetNextPrime (int  {\i p}) const{\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABGV}
{\bkmkend AAAAAAABGV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b PrimeTable} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABGW \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v IsPrime\:OnTheFlyPrimeTable}
{\xe \v OnTheFlyPrimeTable\:IsPrime}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool OnTheFlyPrimeTable::IsPrime (int  {\i n}) const{\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABGX}
{\bkmkend AAAAAAABGX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b PrimeTable} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABGW \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/samples/prime_tables.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::OsStackTraceGetter Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::OsStackTraceGetter}
{\xe \v testing::internal::OsStackTraceGetter}
{\bkmkstart AAAAAAADGW}
{\bkmkend AAAAAAADGW}
Inheritance diagram for testing::internal::OsStackTraceGetter:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_os_stack_trace_getter.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b CurrentStackTrace} (int max_depth, int skip_count) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b UponLeavingGTest} () override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v CurrentStackTrace\:testing::internal::OsStackTraceGetter}
{\xe \v testing::internal::OsStackTraceGetter\:CurrentStackTrace}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string testing::internal::OsStackTraceGetter::CurrentStackTrace (int  {\i max_depth}, int  {\i skip_count}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADGX}
{\bkmkend AAAAAAADGX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::internal::OsStackTraceGetterInterface} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAADGY \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v UponLeavingGTest\:testing::internal::OsStackTraceGetter}
{\xe \v testing::internal::OsStackTraceGetter\:UponLeavingGTest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::OsStackTraceGetter::UponLeavingGTest (){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADGZ}
{\bkmkend AAAAAAADGZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::internal::OsStackTraceGetterInterface} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAADGY \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest-internal-inl.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::OsStackTraceGetterInterface Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::OsStackTraceGetterInterface}
{\xe \v testing::internal::OsStackTraceGetterInterface}
{\bkmkstart AAAAAAADGY}
{\bkmkend AAAAAAADGY}
Inheritance diagram for testing::internal::OsStackTraceGetterInterface:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_os_stack_trace_getter_interface.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual std::string {\b CurrentStackTrace} (int max_depth, int skip_count)=0{\bkmkstart AAAAAAADHA}
{\bkmkend AAAAAAADHA}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b UponLeavingGTest} ()=0{\bkmkstart AAAAAAADHB}
{\bkmkend AAAAAAADHB}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const char *const {\b kElidedFramesMarker}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v kElidedFramesMarker\:testing::internal::OsStackTraceGetterInterface}
{\xe \v testing::internal::OsStackTraceGetterInterface\:kElidedFramesMarker}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char *const testing::internal::OsStackTraceGetterInterface::kElidedFramesMarker{\f2 [static]}}}
\par
{\bkmkstart AAAAAAADHC}
{\bkmkend AAAAAAADHC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid =\par
    {\cf22 "... "} GTEST_NAME_ {\cf22 " internal frames ..."}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest-internal-inl.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_function_mocker_test::OverloadedMockMethodTest< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_function_mocker_test::OverloadedMockMethodTest< T >}
{\xe \v testing::gmock_function_mocker_test::OverloadedMockMethodTest< T >}
{\bkmkstart AAAAAAACQI}
{\bkmkend AAAAAAACQI}
Inheritance diagram for testing::gmock_function_mocker_test::OverloadedMockMethodTest< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__function__mocker__test_1_1_overloaded_mock_method_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-function-mocker_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ParamConverterGenerator< Gen > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ParamConverterGenerator< Gen >}
{\xe \v testing::internal::ParamConverterGenerator< Gen >}
{\bkmkstart AAAAAAADHD}
{\bkmkend AAAAAAADHD}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ParamConverterGenerator} ({\b ParamGenerator}< Gen > g){\bkmkstart AAAAAAADHE}
{\bkmkend AAAAAAADHE}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > {\b operator ParamGenerator< T >} () const{\bkmkstart AAAAAAADHF}
{\bkmkend AAAAAAADHF}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-param-util.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ParameterizedDeathTest Class Reference\par \pard\plain 
{\tc\tcl2 \v ParameterizedDeathTest}
{\xe \v ParameterizedDeathTest}
{\bkmkstart AAAAAAABGY}
{\bkmkend AAAAAAABGY}
Inheritance diagram for ParameterizedDeathTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_parameterized_death_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ParameterizedDerivedTest Class Reference\par \pard\plain 
{\tc\tcl2 \v ParameterizedDerivedTest}
{\xe \v ParameterizedDerivedTest}
{\bkmkstart AAAAAAABGZ}
{\bkmkend AAAAAAABGZ}
Inheritance diagram for ParameterizedDerivedTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_parameterized_derived_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b count_}{\bkmkstart AAAAAAABHA}
{\bkmkend AAAAAAABHA}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b global_count_} = 0{\bkmkstart AAAAAAABHB}
{\bkmkend AAAAAAABHB}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ParameterizedTestFactory< TestClass > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ParameterizedTestFactory< TestClass >}
{\xe \v testing::internal::ParameterizedTestFactory< TestClass >}
{\bkmkstart AAAAAAADHG}
{\bkmkend AAAAAAADHG}
Inheritance diagram for testing::internal::ParameterizedTestFactory< TestClass >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_parameterized_test_factory.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef TestClass::ParamType {\b ParamType}{\bkmkstart AAAAAAADHH}
{\bkmkend AAAAAAADHH}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ParameterizedTestFactory} (ParamType parameter){\bkmkstart AAAAAAADHI}
{\bkmkend AAAAAAADHI}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Test} * {\b CreateTest} () override\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v CreateTest\:testing::internal::ParameterizedTestFactory< TestClass >}
{\xe \v testing::internal::ParameterizedTestFactory< TestClass >\:CreateTest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class TestClass > {\b Test} * {\b testing::internal::ParameterizedTestFactory}< TestClass >::CreateTest (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADHJ}
{\bkmkend AAAAAAADHJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::internal::TestFactoryBase} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAADHK \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-param-util.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ParameterizedTestSuiteInfo< TestSuite > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ParameterizedTestSuiteInfo< TestSuite >}
{\xe \v testing::internal::ParameterizedTestSuiteInfo< TestSuite >}
{\bkmkstart AAAAAAADHL}
{\bkmkend AAAAAAADHL}
Inheritance diagram for testing::internal::ParameterizedTestSuiteInfo< TestSuite >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_parameterized_test_suite_info.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b ParamType} = typename TestSuite::ParamType{\bkmkstart AAAAAAADHM}
{\bkmkend AAAAAAADHM}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b ParamNameGeneratorFunc} = std::string(const {\b TestParamInfo}< ParamType > &){\bkmkstart AAAAAAADHN}
{\bkmkend AAAAAAADHN}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b ParamGenerator} (GeneratorCreationFunc)(){\bkmkstart AAAAAAADHO}
{\bkmkend AAAAAAADHO}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ParameterizedTestSuiteInfo} (const char *name, {\b CodeLocation} code_location){\bkmkstart AAAAAAADHP}
{\bkmkend AAAAAAADHP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string & {\b GetTestSuiteName} () const override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
TypeId {\b GetTestSuiteTypeId} () const override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b AddTestPattern} (const char *test_suite_name, const char *test_base_name, {\b TestMetaFactoryBase}< ParamType > *meta_factory, {\b CodeLocation} code_location){\bkmkstart AAAAAAADHQ}
{\bkmkend AAAAAAADHQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b AddTestSuiteInstantiation} (const std::string &instantiation_name, GeneratorCreationFunc *func, ParamNameGeneratorFunc *name_func, const char *file, int line){\bkmkstart AAAAAAADHR}
{\bkmkend AAAAAAADHR}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b RegisterTests} () override\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v GetTestSuiteName\:testing::internal::ParameterizedTestSuiteInfo< TestSuite >}
{\xe \v testing::internal::ParameterizedTestSuiteInfo< TestSuite >\:GetTestSuiteName}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class {\b TestSuite} > const std::string & {\b testing::internal::ParameterizedTestSuiteInfo}< {\b TestSuite} >::GetTestSuiteName () const{\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADHS}
{\bkmkend AAAAAAADHS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::internal::ParameterizedTestSuiteInfoBase} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAADHT \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v GetTestSuiteTypeId\:testing::internal::ParameterizedTestSuiteInfo< TestSuite >}
{\xe \v testing::internal::ParameterizedTestSuiteInfo< TestSuite >\:GetTestSuiteTypeId}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class {\b TestSuite} > TypeId {\b testing::internal::ParameterizedTestSuiteInfo}< {\b TestSuite} >::GetTestSuiteTypeId () const{\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADHU}
{\bkmkend AAAAAAADHU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::internal::ParameterizedTestSuiteInfoBase} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAADHT \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v RegisterTests\:testing::internal::ParameterizedTestSuiteInfo< TestSuite >}
{\xe \v testing::internal::ParameterizedTestSuiteInfo< TestSuite >\:RegisterTests}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class {\b TestSuite} > void {\b testing::internal::ParameterizedTestSuiteInfo}< {\b TestSuite} >::RegisterTests (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADHV}
{\bkmkend AAAAAAADHV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::internal::ParameterizedTestSuiteInfoBase} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAADHT \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-param-util.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ParameterizedTestSuiteInfoBase Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ParameterizedTestSuiteInfoBase}
{\xe \v testing::internal::ParameterizedTestSuiteInfoBase}
{\bkmkstart AAAAAAADHT}
{\bkmkend AAAAAAADHT}
Inheritance diagram for testing::internal::ParameterizedTestSuiteInfoBase:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_parameterized_test_suite_info_base.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual const std::string & {\b GetTestSuiteName} () const =0{\bkmkstart AAAAAAADHW}
{\bkmkend AAAAAAADHW}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual TypeId {\b GetTestSuiteTypeId} () const =0{\bkmkstart AAAAAAADHX}
{\bkmkend AAAAAAADHX}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b RegisterTests} ()=0{\bkmkstart AAAAAAADHY}
{\bkmkend AAAAAAADHY}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-param-util.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ParameterizedTestSuiteRegistry Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ParameterizedTestSuiteRegistry}
{\xe \v testing::internal::ParameterizedTestSuiteRegistry}
{\bkmkstart AAAAAAADHZ}
{\bkmkend AAAAAAADHZ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class {\b TestSuite} > {\b ParameterizedTestSuiteInfo}< {\b TestSuite} > * {\b GetTestSuitePatternHolder} (const char *test_suite_name, {\b CodeLocation} code_location){\bkmkstart AAAAAAADIA}
{\bkmkend AAAAAAADIA}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b RegisterTests} (){\bkmkstart AAAAAAADIB}
{\bkmkend AAAAAAADIB}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class {\b TestCase} > {\b ParameterizedTestCaseInfo}< {\b TestCase} > * {\b GetTestCasePatternHolder} (const char *test_case_name, {\b CodeLocation} code_location){\bkmkstart AAAAAAADIC}
{\bkmkend AAAAAAADIC}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-param-util.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ParamGenerator< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ParamGenerator< T >}
{\xe \v testing::internal::ParamGenerator< T >}
{\bkmkstart AAAAAAADID}
{\bkmkend AAAAAAADID}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b ParamIterator}< T > {\b iterator}{\bkmkstart AAAAAAADIE}
{\bkmkend AAAAAAADIE}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ParamGenerator} ({\b ParamGeneratorInterface}< T > *impl){\bkmkstart AAAAAAADIF}
{\bkmkend AAAAAAADIF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ParamGenerator} (const {\b ParamGenerator} &other){\bkmkstart AAAAAAADIG}
{\bkmkend AAAAAAADIG}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ParamGenerator} & {\b operator=} (const {\b ParamGenerator} &other){\bkmkstart AAAAAAADIH}
{\bkmkend AAAAAAADIH}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b iterator} {\b begin} () const{\bkmkstart AAAAAAADII}
{\bkmkend AAAAAAADII}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b iterator} {\b end} () const{\bkmkstart AAAAAAADIJ}
{\bkmkend AAAAAAADIJ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-param-util.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ParamGeneratorConverter< From, To > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ParamGeneratorConverter< From, To >}
{\xe \v testing::internal::ParamGeneratorConverter< From, To >}
{\bkmkstart AAAAAAADIK}
{\bkmkend AAAAAAADIK}
Inheritance diagram for testing::internal::ParamGeneratorConverter< From, To >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_param_generator_converter.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ParamGeneratorConverter} ({\b ParamGenerator}< From > gen){\bkmkstart AAAAAAADIL}
{\bkmkend AAAAAAADIL}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ParamIteratorInterface}< {\b To} > * {\b Begin} () const override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ParamIteratorInterface}< {\b To} > * {\b End} () const override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v Begin\:testing::internal::ParamGeneratorConverter< From, To >}
{\xe \v testing::internal::ParamGeneratorConverter< From, To >\:Begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename From , typename {\b To} > {\b ParamIteratorInterface}< {\b To} > * {\b testing::internal::ParamGeneratorConverter}< From, {\b To} >::Begin () const{\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADIM}
{\bkmkend AAAAAAADIM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::internal::ParamGeneratorInterface< To >} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACWA \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v End\:testing::internal::ParamGeneratorConverter< From, To >}
{\xe \v testing::internal::ParamGeneratorConverter< From, To >\:End}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename From , typename {\b To} > {\b ParamIteratorInterface}< {\b To} > * {\b testing::internal::ParamGeneratorConverter}< From, {\b To} >::End () const{\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADIN}
{\bkmkend AAAAAAADIN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::internal::ParamGeneratorInterface< To >} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACWA \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-param-util.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ParamGeneratorInterface< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ParamGeneratorInterface< T >}
{\xe \v testing::internal::ParamGeneratorInterface< T >}
{\bkmkstart AAAAAAACWA}
{\bkmkend AAAAAAACWA}
Inheritance diagram for testing::internal::ParamGeneratorInterface< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_param_generator_interface.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T {\b ParamType}{\bkmkstart AAAAAAADIO}
{\bkmkend AAAAAAADIO}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual {\b ParamIteratorInterface}< T > * {\b Begin} () const =0{\bkmkstart AAAAAAADIP}
{\bkmkend AAAAAAADIP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual {\b ParamIteratorInterface}< T > * {\b End} () const =0{\bkmkstart AAAAAAADIQ}
{\bkmkend AAAAAAADIQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-param-util.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ParamIterator< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ParamIterator< T >}
{\xe \v testing::internal::ParamIterator< T >}
{\bkmkstart AAAAAAADIR}
{\bkmkend AAAAAAADIR}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T {\b value_type}{\bkmkstart AAAAAAADIS}
{\bkmkend AAAAAAADIS}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef const T & {\b reference}{\bkmkstart AAAAAAADIT}
{\bkmkend AAAAAAADIT}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ptrdiff_t {\b difference_type}{\bkmkstart AAAAAAADIU}
{\bkmkend AAAAAAADIU}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ParamIterator} (const {\b ParamIterator} &other){\bkmkstart AAAAAAADIV}
{\bkmkend AAAAAAADIV}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ParamIterator} & {\b operator=} (const {\b ParamIterator} &other){\bkmkstart AAAAAAADIW}
{\bkmkend AAAAAAADIW}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const T & {\b operator*} () const{\bkmkstart AAAAAAADIX}
{\bkmkend AAAAAAADIX}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const T * {\b operator->} () const{\bkmkstart AAAAAAADIY}
{\bkmkend AAAAAAADIY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ParamIterator} & {\b operator++} (){\bkmkstart AAAAAAADIZ}
{\bkmkend AAAAAAADIZ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ParamIterator} {\b operator++} (int){\bkmkstart AAAAAAADJA}
{\bkmkend AAAAAAADJA}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b operator==} (const {\b ParamIterator} &other) const{\bkmkstart AAAAAAADJB}
{\bkmkend AAAAAAADJB}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b operator!=} (const {\b ParamIterator} &other) const{\bkmkstart AAAAAAADJC}
{\bkmkend AAAAAAADJC}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b ParamGenerator< T >}{\bkmkstart AAAAAAADJD}
{\bkmkend AAAAAAADJD}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-param-util.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ParamIteratorInterface< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ParamIteratorInterface< T >}
{\xe \v testing::internal::ParamIteratorInterface< T >}
{\bkmkstart AAAAAAADJE}
{\bkmkend AAAAAAADJE}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual const {\b ParamGeneratorInterface}< T > * {\b BaseGenerator} () const =0{\bkmkstart AAAAAAADJF}
{\bkmkend AAAAAAADJF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b Advance} ()=0{\bkmkstart AAAAAAADJG}
{\bkmkend AAAAAAADJG}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual {\b ParamIteratorInterface} * {\b Clone} () const =0{\bkmkstart AAAAAAADJH}
{\bkmkend AAAAAAADJH}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual const T * {\b Current} () const =0{\bkmkstart AAAAAAADJI}
{\bkmkend AAAAAAADJI}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual bool {\b Equals} (const {\b ParamIteratorInterface} &other) const =0{\bkmkstart AAAAAAADJJ}
{\bkmkend AAAAAAADJJ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-param-util.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ParamTest Class Reference\par \pard\plain 
{\tc\tcl2 \v ParamTest}
{\xe \v ParamTest}
{\bkmkstart AAAAAAABHC}
{\bkmkend AAAAAAABHC}
Inheritance diagram for ParamTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_param_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-output-test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ParentClass Class Reference\par \pard\plain 
{\tc\tcl2 \v ParentClass}
{\xe \v ParentClass}
{\bkmkstart AAAAAAABHD}
{\bkmkend AAAAAAABHD}
Inheritance diagram for ParentClass:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_parent_class.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-printers-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::ParseFlagsTest Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::ParseFlagsTest}
{\xe \v testing::ParseFlagsTest}
{\bkmkstart AAAAAAACDL}
{\bkmkend AAAAAAACDL}
Inheritance diagram for testing::ParseFlagsTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_parse_flags_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SetUp} () override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename CharType > static void {\b AssertStringArrayEq} (int size1, CharType **array1, int size2, CharType **array2){\bkmkstart AAAAAAACDM}
{\bkmkend AAAAAAACDM}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b CheckFlags} (const {\b Flags} &expected){\bkmkstart AAAAAAACDN}
{\bkmkend AAAAAAACDN}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename CharType > static void {\b TestParsingFlags} (int argc1, const CharType **argv1, int argc2, const CharType **argv2, const {\b Flags} &expected, bool should_print_help){\bkmkstart AAAAAAACDO}
{\bkmkend AAAAAAACDO}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v SetUp\:testing::ParseFlagsTest}
{\xe \v testing::ParseFlagsTest\:SetUp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::ParseFlagsTest::SetUp (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACDP}
{\bkmkend AAAAAAACDP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
foo::PathLike Class Reference\par \pard\plain 
{\tc\tcl2 \v foo::PathLike}
{\xe \v foo::PathLike}
{\bkmkstart AAAAAAABQO}
{\bkmkend AAAAAAABQO}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b iterator}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b value_type} = char{\bkmkstart AAAAAAABQP}
{\bkmkend AAAAAAABQP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b const_iterator} = {\b iterator}{\bkmkstart AAAAAAABQQ}
{\bkmkend AAAAAAABQQ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b iterator} {\b begin} () const{\bkmkstart AAAAAAABQR}
{\bkmkend AAAAAAABQR}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b iterator} {\b end} () const{\bkmkstart AAAAAAABQS}
{\bkmkend AAAAAAABQS}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

friend::std::ostream & {\b operator<<} (::std::ostream &os, const {\b PathLike} &){\bkmkstart AAAAAAABQT}
{\bkmkend AAAAAAABQT}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-printers-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Pawn Struct Reference\par \pard\plain 
{\tc\tcl2 \v Pawn}
{\xe \v Pawn}
{\bkmkstart AAAAAAABHE}
{\bkmkend AAAAAAABHE}
Inheritance diagram for Pawn:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "struct_pawn.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Pawn} (int {\b color}, std::string position){\bkmkstart AAAAAAABHF}
{\bkmkend AAAAAAABHF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::string > {\b possible_moves} (std::string &move) override\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D0\'A4\'D1\'83\'D0\'BD\'D0\'BA\'D1\'86\'D0\'B8\'D1\'8F \'D0\'B2\'D0\'BE\'D0\'B7\'D0\'BC\'D0\'BE\'D0\'B6\'D0\'BD\'D1\'8B\'D1\'85 \'D1\'85\'D0\'BE\'D0\'B4\'D0\'BE\'D0\'B2 }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b check_move} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b GetN} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b GetC} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b GetColor} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b increment} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b GetM} () override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v check_move\:Pawn}
{\xe \v Pawn\:check_move}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Pawn::check_move (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABHG}
{\bkmkend AAAAAAABHG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v GetC\:Pawn}
{\xe \v Pawn\:GetC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Pawn::GetC (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABHH}
{\bkmkend AAAAAAABHH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v GetColor\:Pawn}
{\xe \v Pawn\:GetColor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Pawn::GetColor (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABHI}
{\bkmkend AAAAAAABHI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v GetM\:Pawn}
{\xe \v Pawn\:GetM}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Pawn::GetM (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABHJ}
{\bkmkend AAAAAAABHJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v GetN\:Pawn}
{\xe \v Pawn\:GetN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string Pawn::GetN (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABHK}
{\bkmkend AAAAAAABHK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v increment\:Pawn}
{\xe \v Pawn\:increment}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Pawn::increment (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABHL}
{\bkmkend AAAAAAABHL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v possible_moves\:Pawn}
{\xe \v Pawn\:possible_moves}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector< std::string > Pawn::possible_moves (std::string &  {\i move}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABHM}
{\bkmkend AAAAAAABHM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D0\'A4\'D1\'83\'D0\'BD\'D0\'BA\'D1\'86\'D0\'B8\'D1\'8F \'D0\'B2\'D0\'BE\'D0\'B7\'D0\'BC\'D0\'BE\'D0\'B6\'D0\'BD\'D1\'8B\'D1\'85 \'D1\'85\'D0\'BE\'D0\'B4\'D0\'BE\'D0\'B2 }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i \'D0\'A1\'D1\'82\'D1\'80\'D0\'BE\'D0\'BA\'D0\'B0} \cell }{\'D0\'BF\'D0\'BE\'D0\'B7\'D0\'B8\'D1\'86\'D0\'B8\'D0\'B8 \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'D0\'92\'D0\'B5\'D0\'BA\'D1\'82\'D0\'BE\'D1\'80 \'D1\'85\'D0\'BE\'D0\'B4\'D0\'BE\'D0\'B2 \par
}}}{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXM \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Pieces.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
pieces.cpp\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Piece Struct Reference\par \pard\plain 
{\tc\tcl2 \v Piece}
{\xe \v Piece}
{\bkmkstart AAAAAAAAXF}
{\bkmkend AAAAAAAAXF}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D0\'A1\'D1\'82\'D1\'80\'D1\'83\'D0\'BA\'D1\'82\'D1\'83\'D1\'80\'D0\'B0 \'D0\'B0\'D0\'B1\'D1\'81\'D1\'82\'D1\'80\'D0\'B0\'D0\'BA\'D1\'82\'D0\'BD\'D0\'BE\'D0\'B9 \'D1\'84\'D0\'B8\'D0\'B3\'D1\'83\'D1\'80\'D1\'8B }}\par
{
{\f2 #include <Pieces.h>}}\par
Inheritance diagram for Piece:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "struct_piece.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual std::vector< std::string > {\b possible_moves} (std::string &move)=0\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D0\'A4\'D1\'83\'D0\'BD\'D0\'BA\'D1\'86\'D0\'B8\'D1\'8F \'D0\'B2\'D0\'BE\'D0\'B7\'D0\'BC\'D0\'BE\'D0\'B6\'D0\'BD\'D1\'8B\'D1\'85 \'D1\'85\'D0\'BE\'D0\'B4\'D0\'BE\'D0\'B2 }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b check_move} ()=0{\bkmkstart AAAAAAABHN}
{\bkmkend AAAAAAABHN}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual std::string {\b GetN} ()=0{\bkmkstart AAAAAAABHO}
{\bkmkend AAAAAAABHO}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b GetC} ()=0{\bkmkstart AAAAAAABHP}
{\bkmkend AAAAAAABHP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b GetColor} ()=0{\bkmkstart AAAAAAABHQ}
{\bkmkend AAAAAAABHQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b increment} ()=0{\bkmkstart AAAAAAABHR}
{\bkmkend AAAAAAABHR}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b GetM} ()=0{\bkmkstart AAAAAAABHS}
{\bkmkend AAAAAAABHS}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b color} \{\}{\bkmkstart AAAAAAABHT}
{\bkmkend AAAAAAABHT}
\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D0\'A6\'D0\'B2\'D0\'B5\'D1\'82 \'D1\'84\'D0\'B8\'D0\'B3\'D1\'83\'D1\'80\'D1\'8B }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::string {\b name}{\bkmkstart AAAAAAABHU}
{\bkmkend AAAAAAABHU}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::string {\b position}{\bkmkstart AAAAAAABHV}
{\bkmkend AAAAAAABHV}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::string {\b c}{\bkmkstart AAAAAAABHW}
{\bkmkend AAAAAAABHW}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b moves} = 0{\bkmkstart AAAAAAABHX}
{\bkmkend AAAAAAABHX}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D0\'A1\'D1\'82\'D1\'80\'D1\'83\'D0\'BA\'D1\'82\'D1\'83\'D1\'80\'D0\'B0 \'D0\'B0\'D0\'B1\'D1\'81\'D1\'82\'D1\'80\'D0\'B0\'D0\'BA\'D1\'82\'D0\'BD\'D0\'BE\'D0\'B9 \'D1\'84\'D0\'B8\'D0\'B3\'D1\'83\'D1\'80\'D1\'8B \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v possible_moves\:Piece}
{\xe \v Piece\:possible_moves}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual std::vector< std::string > Piece::possible_moves (std::string &  {\i move}){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAAXM}
{\bkmkend AAAAAAAAXM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D0\'A4\'D1\'83\'D0\'BD\'D0\'BA\'D1\'86\'D0\'B8\'D1\'8F \'D0\'B2\'D0\'BE\'D0\'B7\'D0\'BC\'D0\'BE\'D0\'B6\'D0\'BD\'D1\'8B\'D1\'85 \'D1\'85\'D0\'BE\'D0\'B4\'D0\'BE\'D0\'B2 }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i \'D0\'A1\'D1\'82\'D1\'80\'D0\'BE\'D0\'BA\'D0\'B0} \cell }{\'D0\'BF\'D0\'BE\'D0\'B7\'D0\'B8\'D1\'86\'D0\'B8\'D0\'B8 \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'D0\'92\'D0\'B5\'D0\'BA\'D1\'82\'D0\'BE\'D1\'80 \'D1\'85\'D0\'BE\'D0\'B4\'D0\'BE\'D0\'B2 \par
}}}{
Implemented in {\b King} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABEJ \\*MERGEFORMAT}{\fldrslt pagenum}}}), {\b Queen} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABHY \\*MERGEFORMAT}{\fldrslt pagenum}}}), {\b Bishop} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXL \\*MERGEFORMAT}{\fldrslt pagenum}}}), {\b Knight} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABES \\*MERGEFORMAT}{\fldrslt pagenum}}}), {\b Rook} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABHZ \\*MERGEFORMAT}{\fldrslt pagenum}}}), and {\b Pawn} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABHM \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Pieces.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Player Struct Reference\par \pard\plain 
{\tc\tcl2 \v Player}
{\xe \v Player}
{\bkmkstart AAAAAAABIA}
{\bkmkend AAAAAAABIA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b elo}{\bkmkstart AAAAAAABIB}
{\bkmkend AAAAAAABIB}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::string {\b name}{\bkmkstart AAAAAAABIC}
{\bkmkend AAAAAAABIC}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Clock} {\b clock}{\bkmkstart AAAAAAABID}
{\bkmkend AAAAAAABID}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
game.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
foo::PointerPrintable Struct Reference\par \pard\plain 
{\tc\tcl2 \v foo::PointerPrintable}
{\xe \v foo::PointerPrintable}
{\bkmkstart AAAAAAABQY}
{\bkmkend AAAAAAABQY}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-printers-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::PointerPrinter Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::PointerPrinter}
{\xe \v testing::internal::PointerPrinter}
{\bkmkstart AAAAAAADJK}
{\bkmkend AAAAAAADJK}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > static void {\b PrintValue} (T *p, ::std::ostream *os){\bkmkstart AAAAAAADJL}
{\bkmkend AAAAAAADJL}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::PolymorphicAction< Impl > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::PolymorphicAction< Impl >}
{\xe \v testing::PolymorphicAction< Impl >}
{\bkmkstart AAAAAAACDQ}
{\bkmkend AAAAAAACDQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b PolymorphicAction} (const Impl &impl){\bkmkstart AAAAAAACDR}
{\bkmkend AAAAAAACDR}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename F > {\b operator Action< F >} () const{\bkmkstart AAAAAAACDS}
{\bkmkend AAAAAAACDS}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PreCalculatedPrimeTable Class Reference\par \pard\plain 
{\tc\tcl2 \v PreCalculatedPrimeTable}
{\xe \v PreCalculatedPrimeTable}
{\bkmkstart AAAAAAABIE}
{\bkmkend AAAAAAABIE}
Inheritance diagram for PreCalculatedPrimeTable:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_pre_calculated_prime_table.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b PreCalculatedPrimeTable} (int max){\bkmkstart AAAAAAABIF}
{\bkmkend AAAAAAABIF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b IsPrime} (int n) const override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b GetNextPrime} (int p) const override\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v GetNextPrime\:PreCalculatedPrimeTable}
{\xe \v PreCalculatedPrimeTable\:GetNextPrime}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int PreCalculatedPrimeTable::GetNextPrime (int  {\i p}) const{\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABIG}
{\bkmkend AAAAAAABIG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b PrimeTable} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABGW \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v IsPrime\:PreCalculatedPrimeTable}
{\xe \v PreCalculatedPrimeTable\:IsPrime}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool PreCalculatedPrimeTable::IsPrime (int  {\i n}) const{\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABIH}
{\bkmkend AAAAAAABIH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b PrimeTable} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABGW \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/samples/prime_tables.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PredFormatFunctor1 Struct Reference\par \pard\plain 
{\tc\tcl2 \v PredFormatFunctor1}
{\xe \v PredFormatFunctor1}
{\bkmkstart AAAAAAABII}
{\bkmkend AAAAAAABII}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T1 > testing::AssertionResult {\b operator()} (const char *e1, const T1 &v1) const{\bkmkstart AAAAAAABIJ}
{\bkmkend AAAAAAABIJ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_pred_impl_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PredFormatFunctor2 Struct Reference\par \pard\plain 
{\tc\tcl2 \v PredFormatFunctor2}
{\xe \v PredFormatFunctor2}
{\bkmkstart AAAAAAABIK}
{\bkmkend AAAAAAABIK}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T1 , typename T2 > testing::AssertionResult {\b operator()} (const char *e1, const char *e2, const T1 &v1, const T2 &v2) const{\bkmkstart AAAAAAABIL}
{\bkmkend AAAAAAABIL}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_pred_impl_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PredFormatFunctor3 Struct Reference\par \pard\plain 
{\tc\tcl2 \v PredFormatFunctor3}
{\xe \v PredFormatFunctor3}
{\bkmkstart AAAAAAABIM}
{\bkmkend AAAAAAABIM}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T1 , typename T2 , typename T3 > testing::AssertionResult {\b operator()} (const char *e1, const char *e2, const char *e3, const T1 &v1, const T2 &v2, const T3 &v3) const{\bkmkstart AAAAAAABIN}
{\bkmkend AAAAAAABIN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_pred_impl_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PredFormatFunctor4 Struct Reference\par \pard\plain 
{\tc\tcl2 \v PredFormatFunctor4}
{\xe \v PredFormatFunctor4}
{\bkmkstart AAAAAAABIO}
{\bkmkend AAAAAAABIO}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T1 , typename T2 , typename T3 , typename T4 > testing::AssertionResult {\b operator()} (const char *e1, const char *e2, const char *e3, const char *e4, const T1 &v1, const T2 &v2, const T3 &v3, const T4 &v4) const{\bkmkstart AAAAAAABIP}
{\bkmkend AAAAAAABIP}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_pred_impl_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PredFormatFunctor5 Struct Reference\par \pard\plain 
{\tc\tcl2 \v PredFormatFunctor5}
{\xe \v PredFormatFunctor5}
{\bkmkstart AAAAAAABIQ}
{\bkmkend AAAAAAABIQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > testing::AssertionResult {\b operator()} (const char *e1, const char *e2, const char *e3, const char *e4, const char *e5, const T1 &v1, const T2 &v2, const T3 &v3, const T4 &v4, const T5 &v5) const{\bkmkstart AAAAAAABIR}
{\bkmkend AAAAAAABIR}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_pred_impl_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PredFunctor1 Struct Reference\par \pard\plain 
{\tc\tcl2 \v PredFunctor1}
{\xe \v PredFunctor1}
{\bkmkstart AAAAAAABIS}
{\bkmkend AAAAAAABIS}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T1 > bool {\b operator()} (const T1 &v1){\bkmkstart AAAAAAABIT}
{\bkmkend AAAAAAABIT}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_pred_impl_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PredFunctor2 Struct Reference\par \pard\plain 
{\tc\tcl2 \v PredFunctor2}
{\xe \v PredFunctor2}
{\bkmkstart AAAAAAABIU}
{\bkmkend AAAAAAABIU}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T1 , typename T2 > bool {\b operator()} (const T1 &v1, const T2 &v2){\bkmkstart AAAAAAABIV}
{\bkmkend AAAAAAABIV}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_pred_impl_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PredFunctor3 Struct Reference\par \pard\plain 
{\tc\tcl2 \v PredFunctor3}
{\xe \v PredFunctor3}
{\bkmkstart AAAAAAABIW}
{\bkmkend AAAAAAABIW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T1 , typename T2 , typename T3 > bool {\b operator()} (const T1 &v1, const T2 &v2, const T3 &v3){\bkmkstart AAAAAAABIX}
{\bkmkend AAAAAAABIX}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_pred_impl_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PredFunctor4 Struct Reference\par \pard\plain 
{\tc\tcl2 \v PredFunctor4}
{\xe \v PredFunctor4}
{\bkmkstart AAAAAAABIY}
{\bkmkend AAAAAAABIY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T1 , typename T2 , typename T3 , typename T4 > bool {\b operator()} (const T1 &v1, const T2 &v2, const T3 &v3, const T4 &v4){\bkmkstart AAAAAAABIZ}
{\bkmkend AAAAAAABIZ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_pred_impl_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PredFunctor5 Struct Reference\par \pard\plain 
{\tc\tcl2 \v PredFunctor5}
{\xe \v PredFunctor5}
{\bkmkstart AAAAAAABJA}
{\bkmkend AAAAAAABJA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > bool {\b operator()} (const T1 &v1, const T2 &v2, const T3 &v3, const T4 &v4, const T5 &v5){\bkmkstart AAAAAAABJB}
{\bkmkend AAAAAAABJB}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_pred_impl_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Predicate1Test Class Reference\par \pard\plain 
{\tc\tcl2 \v Predicate1Test}
{\xe \v Predicate1Test}
{\bkmkstart AAAAAAABJC}
{\bkmkend AAAAAAABJC}
Inheritance diagram for Predicate1Test:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_predicate1_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SetUp} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b TearDown} () override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b expected_to_finish_}{\bkmkstart AAAAAAABJD}
{\bkmkend AAAAAAABJD}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b finished_}{\bkmkstart AAAAAAABJE}
{\bkmkend AAAAAAABJE}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b n1_}{\bkmkstart AAAAAAABJF}
{\bkmkend AAAAAAABJF}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v SetUp\:Predicate1Test}
{\xe \v Predicate1Test\:SetUp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Predicate1Test::SetUp (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABJG}
{\bkmkend AAAAAAABJG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v TearDown\:Predicate1Test}
{\xe \v Predicate1Test\:TearDown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Predicate1Test::TearDown (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABJH}
{\bkmkend AAAAAAABJH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_pred_impl_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Predicate2Test Class Reference\par \pard\plain 
{\tc\tcl2 \v Predicate2Test}
{\xe \v Predicate2Test}
{\bkmkstart AAAAAAABJI}
{\bkmkend AAAAAAABJI}
Inheritance diagram for Predicate2Test:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_predicate2_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SetUp} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b TearDown} () override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b expected_to_finish_}{\bkmkstart AAAAAAABJJ}
{\bkmkend AAAAAAABJJ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b finished_}{\bkmkstart AAAAAAABJK}
{\bkmkend AAAAAAABJK}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b n1_}{\bkmkstart AAAAAAABJL}
{\bkmkend AAAAAAABJL}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b n2_}{\bkmkstart AAAAAAABJM}
{\bkmkend AAAAAAABJM}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v SetUp\:Predicate2Test}
{\xe \v Predicate2Test\:SetUp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Predicate2Test::SetUp (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABJN}
{\bkmkend AAAAAAABJN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v TearDown\:Predicate2Test}
{\xe \v Predicate2Test\:TearDown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Predicate2Test::TearDown (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABJO}
{\bkmkend AAAAAAABJO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_pred_impl_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Predicate3Test Class Reference\par \pard\plain 
{\tc\tcl2 \v Predicate3Test}
{\xe \v Predicate3Test}
{\bkmkstart AAAAAAABJP}
{\bkmkend AAAAAAABJP}
Inheritance diagram for Predicate3Test:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_predicate3_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SetUp} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b TearDown} () override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b expected_to_finish_}{\bkmkstart AAAAAAABJQ}
{\bkmkend AAAAAAABJQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b finished_}{\bkmkstart AAAAAAABJR}
{\bkmkend AAAAAAABJR}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b n1_}{\bkmkstart AAAAAAABJS}
{\bkmkend AAAAAAABJS}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b n2_}{\bkmkstart AAAAAAABJT}
{\bkmkend AAAAAAABJT}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b n3_}{\bkmkstart AAAAAAABJU}
{\bkmkend AAAAAAABJU}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v SetUp\:Predicate3Test}
{\xe \v Predicate3Test\:SetUp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Predicate3Test::SetUp (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABJV}
{\bkmkend AAAAAAABJV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v TearDown\:Predicate3Test}
{\xe \v Predicate3Test\:TearDown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Predicate3Test::TearDown (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABJW}
{\bkmkend AAAAAAABJW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_pred_impl_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Predicate4Test Class Reference\par \pard\plain 
{\tc\tcl2 \v Predicate4Test}
{\xe \v Predicate4Test}
{\bkmkstart AAAAAAABJX}
{\bkmkend AAAAAAABJX}
Inheritance diagram for Predicate4Test:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_predicate4_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SetUp} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b TearDown} () override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b expected_to_finish_}{\bkmkstart AAAAAAABJY}
{\bkmkend AAAAAAABJY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b finished_}{\bkmkstart AAAAAAABJZ}
{\bkmkend AAAAAAABJZ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b n1_}{\bkmkstart AAAAAAABKA}
{\bkmkend AAAAAAABKA}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b n2_}{\bkmkstart AAAAAAABKB}
{\bkmkend AAAAAAABKB}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b n3_}{\bkmkstart AAAAAAABKC}
{\bkmkend AAAAAAABKC}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b n4_}{\bkmkstart AAAAAAABKD}
{\bkmkend AAAAAAABKD}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v SetUp\:Predicate4Test}
{\xe \v Predicate4Test\:SetUp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Predicate4Test::SetUp (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABKE}
{\bkmkend AAAAAAABKE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v TearDown\:Predicate4Test}
{\xe \v Predicate4Test\:TearDown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Predicate4Test::TearDown (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABKF}
{\bkmkend AAAAAAABKF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_pred_impl_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Predicate5Test Class Reference\par \pard\plain 
{\tc\tcl2 \v Predicate5Test}
{\xe \v Predicate5Test}
{\bkmkstart AAAAAAABKG}
{\bkmkend AAAAAAABKG}
Inheritance diagram for Predicate5Test:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_predicate5_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SetUp} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b TearDown} () override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b expected_to_finish_}{\bkmkstart AAAAAAABKH}
{\bkmkend AAAAAAABKH}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b finished_}{\bkmkstart AAAAAAABKI}
{\bkmkend AAAAAAABKI}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b n1_}{\bkmkstart AAAAAAABKJ}
{\bkmkend AAAAAAABKJ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b n2_}{\bkmkstart AAAAAAABKK}
{\bkmkend AAAAAAABKK}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b n3_}{\bkmkstart AAAAAAABKL}
{\bkmkend AAAAAAABKL}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b n4_}{\bkmkstart AAAAAAABKM}
{\bkmkend AAAAAAABKM}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b n5_}{\bkmkstart AAAAAAABKN}
{\bkmkend AAAAAAABKN}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v SetUp\:Predicate5Test}
{\xe \v Predicate5Test\:SetUp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Predicate5Test::SetUp (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABKO}
{\bkmkend AAAAAAABKO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v TearDown\:Predicate5Test}
{\xe \v Predicate5Test\:TearDown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Predicate5Test::TearDown (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABKP}
{\bkmkend AAAAAAABKP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_pred_impl_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::PrettyUnitTestResultPrinter Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::PrettyUnitTestResultPrinter}
{\xe \v testing::internal::PrettyUnitTestResultPrinter}
{\bkmkstart AAAAAAADJM}
{\bkmkend AAAAAAADJM}
Inheritance diagram for testing::internal::PrettyUnitTestResultPrinter:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_pretty_unit_test_result_printer.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestProgramStart} (const {\b UnitTest} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestIterationStart} (const {\b UnitTest} &unit_test, int iteration) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnEnvironmentsSetUpStart} (const {\b UnitTest} &unit_test) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnEnvironmentsSetUpEnd} (const {\b UnitTest} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestCaseStart} (const {\b TestCase} &test_case) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestStart} (const {\b TestInfo} &test_info) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestDisabled} (const {\b TestInfo} &test_info) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestPartResult} (const TestPartResult &result) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestEnd} (const {\b TestInfo} &test_info) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestCaseEnd} (const {\b TestCase} &test_case) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnEnvironmentsTearDownStart} (const {\b UnitTest} &unit_test) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnEnvironmentsTearDownEnd} (const {\b UnitTest} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestIterationEnd} (const {\b UnitTest} &unit_test, int iteration) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestProgramEnd} (const {\b UnitTest} &) override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b PrintTestName} (const char *test_suite, const char *test){\bkmkstart AAAAAAADJN}
{\bkmkend AAAAAAADJN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v OnEnvironmentsSetUpEnd\:testing::internal::PrettyUnitTestResultPrinter}
{\xe \v testing::internal::PrettyUnitTestResultPrinter\:OnEnvironmentsSetUpEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::PrettyUnitTestResultPrinter::OnEnvironmentsSetUpEnd (const {\b UnitTest} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADJO}
{\bkmkend AAAAAAADJO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnEnvironmentsSetUpStart\:testing::internal::PrettyUnitTestResultPrinter}
{\xe \v testing::internal::PrettyUnitTestResultPrinter\:OnEnvironmentsSetUpStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::PrettyUnitTestResultPrinter::OnEnvironmentsSetUpStart (const {\b UnitTest} &  {\i unit_test}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADJP}
{\bkmkend AAAAAAADJP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnEnvironmentsTearDownEnd\:testing::internal::PrettyUnitTestResultPrinter}
{\xe \v testing::internal::PrettyUnitTestResultPrinter\:OnEnvironmentsTearDownEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::PrettyUnitTestResultPrinter::OnEnvironmentsTearDownEnd (const {\b UnitTest} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADJQ}
{\bkmkend AAAAAAADJQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnEnvironmentsTearDownStart\:testing::internal::PrettyUnitTestResultPrinter}
{\xe \v testing::internal::PrettyUnitTestResultPrinter\:OnEnvironmentsTearDownStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::PrettyUnitTestResultPrinter::OnEnvironmentsTearDownStart (const {\b UnitTest} &  {\i unit_test}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADJR}
{\bkmkend AAAAAAADJR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestCaseEnd\:testing::internal::PrettyUnitTestResultPrinter}
{\xe \v testing::internal::PrettyUnitTestResultPrinter\:OnTestCaseEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::PrettyUnitTestResultPrinter::OnTestCaseEnd (const {\b TestCase} &  {\i test_case}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADJS}
{\bkmkend AAAAAAADJS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestCaseStart\:testing::internal::PrettyUnitTestResultPrinter}
{\xe \v testing::internal::PrettyUnitTestResultPrinter\:OnTestCaseStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::PrettyUnitTestResultPrinter::OnTestCaseStart (const {\b TestCase} &  {\i test_case}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADJT}
{\bkmkend AAAAAAADJT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestDisabled\:testing::internal::PrettyUnitTestResultPrinter}
{\xe \v testing::internal::PrettyUnitTestResultPrinter\:OnTestDisabled}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::PrettyUnitTestResultPrinter::OnTestDisabled (const {\b TestInfo} &  {\i test_info}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADJU}
{\bkmkend AAAAAAADJU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestEnd\:testing::internal::PrettyUnitTestResultPrinter}
{\xe \v testing::internal::PrettyUnitTestResultPrinter\:OnTestEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::PrettyUnitTestResultPrinter::OnTestEnd (const {\b TestInfo} &  {\i test_info}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADJV}
{\bkmkend AAAAAAADJV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestIterationEnd\:testing::internal::PrettyUnitTestResultPrinter}
{\xe \v testing::internal::PrettyUnitTestResultPrinter\:OnTestIterationEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::PrettyUnitTestResultPrinter::OnTestIterationEnd (const {\b UnitTest} &  {\i unit_test}, int  {\i iteration}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADJW}
{\bkmkend AAAAAAADJW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestIterationStart\:testing::internal::PrettyUnitTestResultPrinter}
{\xe \v testing::internal::PrettyUnitTestResultPrinter\:OnTestIterationStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::PrettyUnitTestResultPrinter::OnTestIterationStart (const {\b UnitTest} &  {\i unit_test}, int  {\i iteration}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADJX}
{\bkmkend AAAAAAADJX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestPartResult\:testing::internal::PrettyUnitTestResultPrinter}
{\xe \v testing::internal::PrettyUnitTestResultPrinter\:OnTestPartResult}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::PrettyUnitTestResultPrinter::OnTestPartResult (const TestPartResult &  {\i result}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADJY}
{\bkmkend AAAAAAADJY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestProgramEnd\:testing::internal::PrettyUnitTestResultPrinter}
{\xe \v testing::internal::PrettyUnitTestResultPrinter\:OnTestProgramEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::PrettyUnitTestResultPrinter::OnTestProgramEnd (const {\b UnitTest} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADJZ}
{\bkmkend AAAAAAADJZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestProgramStart\:testing::internal::PrettyUnitTestResultPrinter}
{\xe \v testing::internal::PrettyUnitTestResultPrinter\:OnTestProgramStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::PrettyUnitTestResultPrinter::OnTestProgramStart (const {\b UnitTest} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADKA}
{\bkmkend AAAAAAADKA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestStart\:testing::internal::PrettyUnitTestResultPrinter}
{\xe \v testing::internal::PrettyUnitTestResultPrinter\:OnTestStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::PrettyUnitTestResultPrinter::OnTestStart (const {\b TestInfo} &  {\i test_info}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADKB}
{\bkmkend AAAAAAADKB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PrimeTable Class Reference\par \pard\plain 
{\tc\tcl2 \v PrimeTable}
{\xe \v PrimeTable}
{\bkmkstart AAAAAAABGW}
{\bkmkend AAAAAAABGW}
Inheritance diagram for PrimeTable:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_prime_table.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual bool {\b IsPrime} (int n) const =0{\bkmkstart AAAAAAABKQ}
{\bkmkend AAAAAAABKQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b GetNextPrime} (int p) const =0{\bkmkstart AAAAAAABKR}
{\bkmkend AAAAAAABKR}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/samples/prime_tables.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
foo::PrintableViaPrintTo Struct Reference\par \pard\plain 
{\tc\tcl2 \v foo::PrintableViaPrintTo}
{\xe \v foo::PrintableViaPrintTo}
{\bkmkstart AAAAAAABQZ}
{\bkmkend AAAAAAABQZ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b value}{\bkmkstart AAAAAAABRA}
{\bkmkend AAAAAAABRA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-printers-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
foo::PrintableViaPrintToTemplate< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v foo::PrintableViaPrintToTemplate< T >}
{\xe \v foo::PrintableViaPrintToTemplate< T >}
{\bkmkstart AAAAAAABRB}
{\bkmkend AAAAAAABRB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b PrintableViaPrintToTemplate} (const T &a_value){\bkmkstart AAAAAAABRC}
{\bkmkend AAAAAAABRC}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const T & {\b value} () const{\bkmkstart AAAAAAABRD}
{\bkmkend AAAAAAABRD}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-printers-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::PrintToStringParamName Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::PrintToStringParamName}
{\xe \v testing::PrintToStringParamName}
{\bkmkstart AAAAAAACDT}
{\bkmkend AAAAAAACDT}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class ParamType > std::string {\b operator()} (const {\b TestParamInfo}< ParamType > &info) const{\bkmkstart AAAAAAACDU}
{\bkmkend AAAAAAACDU}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-param-util.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PrivateCode Class Reference\par \pard\plain 
{\tc\tcl2 \v PrivateCode}
{\xe \v PrivateCode}
{\bkmkstart AAAAAAABKS}
{\bkmkend AAAAAAABKS}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b FRIEND_TEST} (PrivateCodeTest, CanAccessPrivateMembers){\bkmkstart AAAAAAABKT}
{\bkmkend AAAAAAABKT}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b FRIEND_TEST} ({\b PrivateCodeFixtureTest}, CanAccessPrivateMembers){\bkmkstart AAAAAAABKU}
{\bkmkend AAAAAAABKU}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b x} () const{\bkmkstart AAAAAAABKV}
{\bkmkend AAAAAAABKV}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/production.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/production.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PropertyOne Class Reference\par \pard\plain 
{\tc\tcl2 \v PropertyOne}
{\xe \v PropertyOne}
{\bkmkstart AAAAAAABKW}
{\bkmkend AAAAAAABKW}
Inheritance diagram for PropertyOne:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_property_one.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SetUp} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b TearDown} () override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v SetUp\:PropertyOne}
{\xe \v PropertyOne\:SetUp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void PropertyOne::SetUp (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABKX}
{\bkmkend AAAAAAABKX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v TearDown\:PropertyOne}
{\xe \v PropertyOne\:TearDown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void PropertyOne::TearDown (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABKY}
{\bkmkend AAAAAAABKY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_xml_outfile1_test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PropertyRecordingTest Class Reference\par \pard\plain 
{\tc\tcl2 \v PropertyRecordingTest}
{\xe \v PropertyRecordingTest}
{\bkmkstart AAAAAAABKZ}
{\bkmkend AAAAAAABKZ}
Inheritance diagram for PropertyRecordingTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_property_recording_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b SetUpTestSuite} (){\bkmkstart AAAAAAABLA}
{\bkmkend AAAAAAABLA}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b TearDownTestSuite} (){\bkmkstart AAAAAAABLB}
{\bkmkend AAAAAAABLB}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_xml_output_unittest_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PropertyTwo Class Reference\par \pard\plain 
{\tc\tcl2 \v PropertyTwo}
{\xe \v PropertyTwo}
{\bkmkstart AAAAAAABLC}
{\bkmkend AAAAAAABLC}
Inheritance diagram for PropertyTwo:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_property_two.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SetUp} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b TearDown} () override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v SetUp\:PropertyTwo}
{\xe \v PropertyTwo\:SetUp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void PropertyTwo::SetUp (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABLD}
{\bkmkend AAAAAAABLD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v TearDown\:PropertyTwo}
{\xe \v PropertyTwo\:TearDown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void PropertyTwo::TearDown (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABLE}
{\bkmkend AAAAAAABLE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_xml_outfile2_test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ProtectedFixtureMethodsTest Class Reference\par \pard\plain 
{\tc\tcl2 \v ProtectedFixtureMethodsTest}
{\xe \v ProtectedFixtureMethodsTest}
{\bkmkstart AAAAAAABLF}
{\bkmkend AAAAAAABLF}
Inheritance diagram for ProtectedFixtureMethodsTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_protected_fixture_methods_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SetUp} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b TearDown} () override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v SetUp\:ProtectedFixtureMethodsTest}
{\xe \v ProtectedFixtureMethodsTest\:SetUp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ProtectedFixtureMethodsTest::SetUp (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABLG}
{\bkmkend AAAAAAABLG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v TearDown\:ProtectedFixtureMethodsTest}
{\xe \v ProtectedFixtureMethodsTest\:TearDown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ProtectedFixtureMethodsTest::TearDown (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABLH}
{\bkmkend AAAAAAABLH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ProtobufPrinter Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ProtobufPrinter}
{\xe \v testing::internal::ProtobufPrinter}
{\bkmkstart AAAAAAADKC}
{\bkmkend AAAAAAADKC}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T , typename  = typename std::enable_if<                internal::HasDebugStringAndShortDebugString<T>::value>::type> static void {\b PrintValue} (const T &value, ::std::ostream *os){\bkmkstart AAAAAAADKD}
{\bkmkend AAAAAAADKD}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const size_t {\b kProtobufOneLinerMaxLength} = 50{\bkmkstart AAAAAAADKE}
{\bkmkend AAAAAAADKE}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ProxyTypeList< Ts > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ProxyTypeList< Ts >}
{\xe \v testing::internal::ProxyTypeList< Ts >}
{\bkmkstart AAAAAAADKF}
{\bkmkend AAAAAAADKF}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b type} = {\b Types}< Ts... >{\bkmkstart AAAAAAADKG}
{\bkmkend AAAAAAADKG}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-type-util.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Queen Struct Reference\par \pard\plain 
{\tc\tcl2 \v Queen}
{\xe \v Queen}
{\bkmkstart AAAAAAABLI}
{\bkmkend AAAAAAABLI}
Inheritance diagram for Queen:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "struct_queen.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Queen} (int {\b color}, std::string position){\bkmkstart AAAAAAABLJ}
{\bkmkend AAAAAAABLJ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::string > {\b possible_moves} (std::string &move) override\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D0\'A4\'D1\'83\'D0\'BD\'D0\'BA\'D1\'86\'D0\'B8\'D1\'8F \'D0\'B2\'D0\'BE\'D0\'B7\'D0\'BC\'D0\'BE\'D0\'B6\'D0\'BD\'D1\'8B\'D1\'85 \'D1\'85\'D0\'BE\'D0\'B4\'D0\'BE\'D0\'B2 }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b check_move} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b GetN} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b GetC} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b GetColor} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b increment} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b GetM} () override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v check_move\:Queen}
{\xe \v Queen\:check_move}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Queen::check_move (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABLK}
{\bkmkend AAAAAAABLK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v GetC\:Queen}
{\xe \v Queen\:GetC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Queen::GetC (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABLL}
{\bkmkend AAAAAAABLL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v GetColor\:Queen}
{\xe \v Queen\:GetColor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Queen::GetColor (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABLM}
{\bkmkend AAAAAAABLM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v GetM\:Queen}
{\xe \v Queen\:GetM}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Queen::GetM (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABLN}
{\bkmkend AAAAAAABLN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v GetN\:Queen}
{\xe \v Queen\:GetN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string Queen::GetN (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABLO}
{\bkmkend AAAAAAABLO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v increment\:Queen}
{\xe \v Queen\:increment}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Queen::increment (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABLP}
{\bkmkend AAAAAAABLP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v possible_moves\:Queen}
{\xe \v Queen\:possible_moves}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector< std::string > Queen::possible_moves (std::string &  {\i move}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABHY}
{\bkmkend AAAAAAABHY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D0\'A4\'D1\'83\'D0\'BD\'D0\'BA\'D1\'86\'D0\'B8\'D1\'8F \'D0\'B2\'D0\'BE\'D0\'B7\'D0\'BC\'D0\'BE\'D0\'B6\'D0\'BD\'D1\'8B\'D1\'85 \'D1\'85\'D0\'BE\'D0\'B4\'D0\'BE\'D0\'B2 }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i \'D0\'A1\'D1\'82\'D1\'80\'D0\'BE\'D0\'BA\'D0\'B0} \cell }{\'D0\'BF\'D0\'BE\'D0\'B7\'D0\'B8\'D1\'86\'D0\'B8\'D0\'B8 \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'D0\'92\'D0\'B5\'D0\'BA\'D1\'82\'D0\'BE\'D1\'80 \'D1\'85\'D0\'BE\'D0\'B4\'D0\'BE\'D0\'B2 \par
}}}{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXM \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Pieces.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
pieces.cpp\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Queue< E > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v Queue< E >}
{\xe \v Queue< E >}
{\bkmkstart AAAAAAABLQ}
{\bkmkend AAAAAAABLQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b Clear} (){\bkmkstart AAAAAAABLR}
{\bkmkend AAAAAAABLR}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

size_t {\b Size} () const{\bkmkstart AAAAAAABLS}
{\bkmkend AAAAAAABLS}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b QueueNode}< E > * {\b Head} (){\bkmkstart AAAAAAABLT}
{\bkmkend AAAAAAABLT}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b QueueNode}< E > * {\b Head} () const{\bkmkstart AAAAAAABLU}
{\bkmkend AAAAAAABLU}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b QueueNode}< E > * {\b Last} (){\bkmkstart AAAAAAABLV}
{\bkmkend AAAAAAABLV}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b QueueNode}< E > * {\b Last} () const{\bkmkstart AAAAAAABLW}
{\bkmkend AAAAAAABLW}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b Enqueue} (const E &element){\bkmkstart AAAAAAABLX}
{\bkmkend AAAAAAABLX}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

E * {\b Dequeue} (){\bkmkstart AAAAAAABLY}
{\bkmkend AAAAAAABLY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename F > {\b Queue} * {\b Map} (F function) const{\bkmkstart AAAAAAABLZ}
{\bkmkend AAAAAAABLZ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/samples/sample3-inl.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
QueueNode< E > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v QueueNode< E >}
{\xe \v QueueNode< E >}
{\bkmkstart AAAAAAABMA}
{\bkmkend AAAAAAABMA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const E & {\b element} () const{\bkmkstart AAAAAAABMB}
{\bkmkend AAAAAAABMB}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b QueueNode} * {\b next} (){\bkmkstart AAAAAAABMC}
{\bkmkend AAAAAAABMC}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b QueueNode} * {\b next} () const{\bkmkstart AAAAAAABMD}
{\bkmkend AAAAAAABMD}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b Queue< E >}{\bkmkstart AAAAAAABME}
{\bkmkend AAAAAAABME}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/samples/sample3-inl.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Random Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Random}
{\xe \v testing::internal::Random}
{\bkmkstart AAAAAAADKH}
{\bkmkend AAAAAAADKH}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Random} (uint32_t seed){\bkmkstart AAAAAAADKI}
{\bkmkend AAAAAAADKI}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b Reseed} (uint32_t seed){\bkmkstart AAAAAAADKJ}
{\bkmkend AAAAAAADKJ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

uint32_t {\b Generate} (uint32_t range){\bkmkstart AAAAAAADKK}
{\bkmkend AAAAAAADKK}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const uint32_t {\b kMaxRange} = 1u << 31{\bkmkstart AAAAAAADKL}
{\bkmkend AAAAAAADKL}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::RangeGenerator< T, IncrementT > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::RangeGenerator< T, IncrementT >}
{\xe \v testing::internal::RangeGenerator< T, IncrementT >}
{\bkmkstart AAAAAAADKM}
{\bkmkend AAAAAAADKM}
Inheritance diagram for testing::internal::RangeGenerator< T, IncrementT >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_range_generator.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b RangeGenerator} (T begin, T end, IncrementT step){\bkmkstart AAAAAAADKN}
{\bkmkend AAAAAAADKN}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ParamIteratorInterface}< T > * {\b Begin} () const override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ParamIteratorInterface}< T > * {\b End} () const override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v Begin\:testing::internal::RangeGenerator< T, IncrementT >}
{\xe \v testing::internal::RangeGenerator< T, IncrementT >\:Begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T , typename IncrementT > {\b ParamIteratorInterface}< T > * {\b testing::internal::RangeGenerator}< T, IncrementT >::Begin () const{\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADKO}
{\bkmkend AAAAAAADKO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::internal::ParamGeneratorInterface< T >} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACWA \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v End\:testing::internal::RangeGenerator< T, IncrementT >}
{\xe \v testing::internal::RangeGenerator< T, IncrementT >\:End}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T , typename IncrementT > {\b ParamIteratorInterface}< T > * {\b testing::internal::RangeGenerator}< T, IncrementT >::End () const{\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADKP}
{\bkmkend AAAAAAADKP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::internal::ParamGeneratorInterface< T >} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACWA \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-param-util.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::RawBytesPrinter Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::RawBytesPrinter}
{\xe \v testing::internal::RawBytesPrinter}
{\bkmkstart AAAAAAADKQ}
{\bkmkend AAAAAAADKQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T , size_t  = sizeof(T)> static void {\b PrintValue} (const T &value, ::std::ostream *os){\bkmkstart AAAAAAADKR}
{\bkmkend AAAAAAADKR}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::RE Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::RE}
{\xe \v testing::internal::RE}
{\bkmkstart AAAAAAADKS}
{\bkmkend AAAAAAADKS}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b RE} (const {\b RE} &other){\bkmkstart AAAAAAADKT}
{\bkmkend AAAAAAADKT}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b RE} (const ::std::string &regex){\bkmkstart AAAAAAADKU}
{\bkmkend AAAAAAADKU}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b RE} (const char *regex){\bkmkstart AAAAAAADKV}
{\bkmkend AAAAAAADKV}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b pattern} () const{\bkmkstart AAAAAAADKW}
{\bkmkend AAAAAAADKW}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b FullMatch} (const ::std::string &str, const {\b RE} &re){\bkmkstart AAAAAAADKX}
{\bkmkend AAAAAAADKX}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b PartialMatch} (const ::std::string &str, const {\b RE} &re){\bkmkstart AAAAAAADKY}
{\bkmkend AAAAAAADKY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b FullMatch} (const char *str, const {\b RE} &re){\bkmkstart AAAAAAADKZ}
{\bkmkend AAAAAAADKZ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b PartialMatch} (const char *str, const {\b RE} &re){\bkmkstart AAAAAAADLA}
{\bkmkend AAAAAAADLA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-port.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::RelationToSourceCopy Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::RelationToSourceCopy}
{\xe \v testing::internal::RelationToSourceCopy}
{\bkmkstart AAAAAAADLB}
{\bkmkend AAAAAAADLB}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::RelationToSourceReference Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::RelationToSourceReference}
{\xe \v testing::internal::RelationToSourceReference}
{\bkmkstart AAAAAAADLC}
{\bkmkend AAAAAAADLC}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::RemoveConstFromKey< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::RemoveConstFromKey< T >}
{\xe \v testing::internal::RemoveConstFromKey< T >}
{\bkmkstart AAAAAAADLD}
{\bkmkend AAAAAAADLD}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T {\b type}{\bkmkstart AAAAAAADLE}
{\bkmkend AAAAAAADLE}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::RemoveConstFromKey< std::pair< const K, V > > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::RemoveConstFromKey< std::pair< const K, V > >}
{\xe \v testing::internal::RemoveConstFromKey< std::pair< const K, V > >}
{\bkmkstart AAAAAAADLF}
{\bkmkend AAAAAAADLF}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef std::pair< K, V > {\b type}{\bkmkstart AAAAAAADLG}
{\bkmkend AAAAAAADLG}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ReturnAction< R > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ReturnAction< R >}
{\xe \v testing::internal::ReturnAction< R >}
{\bkmkstart AAAAAAADLH}
{\bkmkend AAAAAAADLH}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ReturnAction} (R value){\bkmkstart AAAAAAADLI}
{\bkmkend AAAAAAADLI}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename U , typename... Args, typename  = typename std::enable_if<conjunction<                                negation<std::is_same<void, U>>,                  negation<std::is_reference<U>>,                   std::is_convertible<R, U>,                        std::is_move_constructible<U>>::value>::type> {\b operator OnceAction< U} (Args...)>() &&{\bkmkstart AAAAAAADLJ}
{\bkmkend AAAAAAADLJ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename U , typename... Args, typename  = typename std::enable_if<conjunction<                                negation<std::is_same<void, U>>,                   negation<std::is_reference<U>>,                    std::is_convertible<const R&, U>,                  std::is_copy_constructible<U>>::value>::type> {\b operator Action< U} (Args...)>() const{\bkmkstart AAAAAAADLK}
{\bkmkend AAAAAAADLK}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ReturnAction< ByMoveWrapper< T > > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ReturnAction< ByMoveWrapper< T > >}
{\xe \v testing::internal::ReturnAction< ByMoveWrapper< T > >}
{\bkmkstart AAAAAAADLL}
{\bkmkend AAAAAAADLL}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ReturnAction} ({\b ByMoveWrapper}< T > wrapper){\bkmkstart AAAAAAADLM}
{\bkmkend AAAAAAADLM}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T {\b operator()} () const{\bkmkstart AAAAAAADLN}
{\bkmkend AAAAAAADLN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ReturnArgAction< k > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ReturnArgAction< k >}
{\xe \v testing::internal::ReturnArgAction< k >}
{\bkmkstart AAAAAAADLO}
{\bkmkend AAAAAAADLO}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename... Args, typename  = typename std::enable_if<(k < sizeof...(Args))>::type> auto {\b operator()} (Args &&... args) const -> decltype(std::get< k >(std::forward_as_tuple(std::forward< Args >(args)...))){\bkmkstart AAAAAAADLP}
{\bkmkend AAAAAAADLP}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ReturnNewAction< T, Params > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ReturnNewAction< T, Params >}
{\xe \v testing::internal::ReturnNewAction< T, Params >}
{\bkmkstart AAAAAAADLQ}
{\bkmkend AAAAAAADLQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T * {\b operator()} () const{\bkmkstart AAAAAAADLR}
{\bkmkend AAAAAAADLR}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::tuple< Params... > {\b params}{\bkmkstart AAAAAAADLS}
{\bkmkend AAAAAAADLS}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ReturnNullAction Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ReturnNullAction}
{\xe \v testing::internal::ReturnNullAction}
{\bkmkstart AAAAAAADLT}
{\bkmkend AAAAAAADLT}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Result , typename ArgumentTuple > static Result {\b Perform} (const ArgumentTuple &){\bkmkstart AAAAAAADLU}
{\bkmkend AAAAAAADLU}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ReturnPointeeAction< Ptr > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ReturnPointeeAction< Ptr >}
{\xe \v testing::internal::ReturnPointeeAction< Ptr >}
{\bkmkstart AAAAAAADLV}
{\bkmkend AAAAAAADLV}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename... Args> auto {\b operator()} (const Args &...) const -> decltype(*pointer){\bkmkstart AAAAAAADLW}
{\bkmkend AAAAAAADLW}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

Ptr {\b pointer}{\bkmkstart AAAAAAADLX}
{\bkmkend AAAAAAADLX}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ReturnRefAction< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ReturnRefAction< T >}
{\xe \v testing::internal::ReturnRefAction< T >}
{\bkmkstart AAAAAAADLY}
{\bkmkend AAAAAAADLY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ReturnRefAction} (T &ref){\bkmkstart AAAAAAADLZ}
{\bkmkend AAAAAAADLZ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename F > {\b operator Action< F >} () const{\bkmkstart AAAAAAADMA}
{\bkmkend AAAAAAADMA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ReturnRefOfCopyAction< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ReturnRefOfCopyAction< T >}
{\xe \v testing::internal::ReturnRefOfCopyAction< T >}
{\bkmkstart AAAAAAADMB}
{\bkmkend AAAAAAADMB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ReturnRefOfCopyAction} (const T &value){\bkmkstart AAAAAAADMC}
{\bkmkend AAAAAAADMC}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename F > {\b operator Action< F >} () const{\bkmkstart AAAAAAADMD}
{\bkmkend AAAAAAADMD}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ReturnRoundRobinAction< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ReturnRoundRobinAction< T >}
{\xe \v testing::internal::ReturnRoundRobinAction< T >}
{\bkmkstart AAAAAAADME}
{\bkmkend AAAAAAADME}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ReturnRoundRobinAction} (std::vector< T > values){\bkmkstart AAAAAAADMF}
{\bkmkend AAAAAAADMF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename... Args> T {\b operator()} (Args &&...) const{\bkmkstart AAAAAAADMG}
{\bkmkend AAAAAAADMG}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ReturnVoidAction Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ReturnVoidAction}
{\xe \v testing::internal::ReturnVoidAction}
{\bkmkstart AAAAAAADMH}
{\bkmkend AAAAAAADMH}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Result , typename ArgumentTuple > static void {\b Perform} (const ArgumentTuple &){\bkmkstart AAAAAAADMI}
{\bkmkend AAAAAAADMI}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Rook Struct Reference\par \pard\plain 
{\tc\tcl2 \v Rook}
{\xe \v Rook}
{\bkmkstart AAAAAAABMF}
{\bkmkend AAAAAAABMF}
Inheritance diagram for Rook:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "struct_rook.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Rook} (int {\b color}, std::string position){\bkmkstart AAAAAAABMG}
{\bkmkend AAAAAAABMG}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::string > {\b possible_moves} (std::string &move) override\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D0\'A4\'D1\'83\'D0\'BD\'D0\'BA\'D1\'86\'D0\'B8\'D1\'8F \'D0\'B2\'D0\'BE\'D0\'B7\'D0\'BC\'D0\'BE\'D0\'B6\'D0\'BD\'D1\'8B\'D1\'85 \'D1\'85\'D0\'BE\'D0\'B4\'D0\'BE\'D0\'B2 }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b check_move} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b GetN} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b GetC} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b GetColor} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b increment} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b GetM} () override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v check_move\:Rook}
{\xe \v Rook\:check_move}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Rook::check_move (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABMH}
{\bkmkend AAAAAAABMH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v GetC\:Rook}
{\xe \v Rook\:GetC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Rook::GetC (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABMI}
{\bkmkend AAAAAAABMI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v GetColor\:Rook}
{\xe \v Rook\:GetColor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Rook::GetColor (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABMJ}
{\bkmkend AAAAAAABMJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v GetM\:Rook}
{\xe \v Rook\:GetM}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Rook::GetM (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABMK}
{\bkmkend AAAAAAABMK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v GetN\:Rook}
{\xe \v Rook\:GetN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string Rook::GetN (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABML}
{\bkmkend AAAAAAABML}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v increment\:Rook}
{\xe \v Rook\:increment}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Rook::increment (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABMM}
{\bkmkend AAAAAAABMM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXF \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v possible_moves\:Rook}
{\xe \v Rook\:possible_moves}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector< std::string > Rook::possible_moves (std::string &  {\i move}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABHZ}
{\bkmkend AAAAAAABHZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D0\'A4\'D1\'83\'D0\'BD\'D0\'BA\'D1\'86\'D0\'B8\'D1\'8F \'D0\'B2\'D0\'BE\'D0\'B7\'D0\'BC\'D0\'BE\'D0\'B6\'D0\'BD\'D1\'8B\'D1\'85 \'D1\'85\'D0\'BE\'D0\'B4\'D0\'BE\'D0\'B2 }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i \'D0\'A1\'D1\'82\'D1\'80\'D0\'BE\'D0\'BA\'D0\'B0} \cell }{\'D0\'BF\'D0\'BE\'D0\'B7\'D0\'B8\'D1\'86\'D0\'B8\'D0\'B8 \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'D0\'92\'D0\'B5\'D0\'BA\'D1\'82\'D0\'BE\'D1\'80 \'D1\'85\'D0\'BE\'D0\'B4\'D0\'BE\'D0\'B2 \par
}}}{
Implements {\b Piece} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXM \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Pieces.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
pieces.cpp\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::SaveArgAction< k, Ptr > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::SaveArgAction< k, Ptr >}
{\xe \v testing::internal::SaveArgAction< k, Ptr >}
{\bkmkstart AAAAAAADMJ}
{\bkmkend AAAAAAADMJ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename... Args> void {\b operator()} (const Args &... args) const{\bkmkstart AAAAAAADMK}
{\bkmkend AAAAAAADMK}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

Ptr {\b pointer}{\bkmkstart AAAAAAADML}
{\bkmkend AAAAAAADML}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::SaveArgPointeeAction< k, Ptr > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::SaveArgPointeeAction< k, Ptr >}
{\xe \v testing::internal::SaveArgPointeeAction< k, Ptr >}
{\bkmkstart AAAAAAADMM}
{\bkmkend AAAAAAADMM}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename... Args> void {\b operator()} (const Args &... args) const{\bkmkstart AAAAAAADMN}
{\bkmkend AAAAAAADMN}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

Ptr {\b pointer}{\bkmkstart AAAAAAADMO}
{\bkmkend AAAAAAADMO}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ScopedPrematureExitFile Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ScopedPrematureExitFile}
{\xe \v testing::internal::ScopedPrematureExitFile}
{\bkmkstart AAAAAAADMP}
{\bkmkend AAAAAAADMP}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ScopedPrematureExitFile} (const char *premature_exit_filepath){\bkmkstart AAAAAAADMQ}
{\bkmkend AAAAAAADMQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::ScopedTrace Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::ScopedTrace}
{\xe \v testing::ScopedTrace}
{\bkmkstart AAAAAAACDV}
{\bkmkend AAAAAAACDV}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > {\b ScopedTrace} (const char *file, int line, const T &message){\bkmkstart AAAAAAACDW}
{\bkmkend AAAAAAACDW}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ScopedTrace} (const char *file, int line, const char *message){\bkmkstart AAAAAAACDX}
{\bkmkend AAAAAAACDX}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ScopedTrace} (const char *file, int line, const std::string &message){\bkmkstart AAAAAAACDY}
{\bkmkend AAAAAAACDY}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SeparateInstanceTest Class Reference\par \pard\plain 
{\tc\tcl2 \v SeparateInstanceTest}
{\xe \v SeparateInstanceTest}
{\bkmkstart AAAAAAABMN}
{\bkmkend AAAAAAABMN}
Inheritance diagram for SeparateInstanceTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_separate_instance_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b TearDownTestSuite} (){\bkmkstart AAAAAAABMO}
{\bkmkend AAAAAAABMO}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b count_}{\bkmkstart AAAAAAABMP}
{\bkmkend AAAAAAABMP}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b global_count_} = 0{\bkmkstart AAAAAAABMQ}
{\bkmkend AAAAAAABMQ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SequenceTestingListener Class Reference\par \pard\plain 
{\tc\tcl2 \v SequenceTestingListener}
{\xe \v SequenceTestingListener}
{\bkmkstart AAAAAAABMR}
{\bkmkend AAAAAAABMR}
Inheritance diagram for SequenceTestingListener:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_sequence_testing_listener.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b SequenceTestingListener} (std::vector< std::string > *vector, const char *id){\bkmkstart AAAAAAABMS}
{\bkmkend AAAAAAABMS}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestProgramStart} (const {\b UnitTest} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestProgramEnd} (const {\b UnitTest} &) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestIterationStart} (const {\b UnitTest} &, int) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestIterationEnd} (const {\b UnitTest} &, int) override\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v OnTestIterationEnd\:SequenceTestingListener}
{\xe \v SequenceTestingListener\:OnTestIterationEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void SequenceTestingListener::OnTestIterationEnd (const {\b UnitTest} & , int ){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABMT}
{\bkmkend AAAAAAABMT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::EmptyTestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABMU \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestIterationStart\:SequenceTestingListener}
{\xe \v SequenceTestingListener\:OnTestIterationStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void SequenceTestingListener::OnTestIterationStart (const {\b UnitTest} & , int ){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABMV}
{\bkmkend AAAAAAABMV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::EmptyTestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABMU \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestProgramEnd\:SequenceTestingListener}
{\xe \v SequenceTestingListener\:OnTestProgramEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void SequenceTestingListener::OnTestProgramEnd (const {\b UnitTest} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABMW}
{\bkmkend AAAAAAABMW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::EmptyTestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABMU \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestProgramStart\:SequenceTestingListener}
{\xe \v SequenceTestingListener\:OnTestProgramStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void SequenceTestingListener::OnTestProgramStart (const {\b UnitTest} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABMX}
{\bkmkend AAAAAAABMX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::EmptyTestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABMU \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::SetArgRefereeAction< k, T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::SetArgRefereeAction< k, T >}
{\xe \v testing::internal::SetArgRefereeAction< k, T >}
{\bkmkstart AAAAAAADMR}
{\bkmkend AAAAAAADMR}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename... Args> void {\b operator()} (Args &&... args) const{\bkmkstart AAAAAAADMS}
{\bkmkend AAAAAAADMS}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T {\b value}{\bkmkstart AAAAAAADMT}
{\bkmkend AAAAAAADMT}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::SetArgumentPointeeAction< N, A, typename > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::SetArgumentPointeeAction< N, A, typename >}
{\xe \v testing::internal::SetArgumentPointeeAction< N, A, typename >}
{\bkmkstart AAAAAAADMU}
{\bkmkend AAAAAAADMU}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename... Args> void {\b operator()} (const Args &... args) const{\bkmkstart AAAAAAADMV}
{\bkmkend AAAAAAADMV}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

A {\b value}{\bkmkstart AAAAAAADMW}
{\bkmkend AAAAAAADMW}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::SetArrayArgumentAction< k, I1, I2 > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::SetArrayArgumentAction< k, I1, I2 >}
{\xe \v testing::internal::SetArrayArgumentAction< k, I1, I2 >}
{\bkmkstart AAAAAAADMX}
{\bkmkend AAAAAAADMX}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename... Args> void {\b operator()} (const Args &... args) const{\bkmkstart AAAAAAADMY}
{\bkmkend AAAAAAADMY}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

I1 {\b first}{\bkmkstart AAAAAAADMZ}
{\bkmkend AAAAAAADMZ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

I2 {\b last}{\bkmkstart AAAAAAADNA}
{\bkmkend AAAAAAADNA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::SetErrnoAndReturnAction< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::SetErrnoAndReturnAction< T >}
{\xe \v testing::internal::SetErrnoAndReturnAction< T >}
{\bkmkstart AAAAAAADNB}
{\bkmkend AAAAAAADNB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b SetErrnoAndReturnAction} (int errno_value, T result){\bkmkstart AAAAAAADNC}
{\bkmkend AAAAAAADNC}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Result , typename ArgumentTuple > Result {\b Perform} (const ArgumentTuple &) const{\bkmkstart AAAAAAADND}
{\bkmkend AAAAAAADND}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SetupEnvironment Class Reference\par \pard\plain 
{\tc\tcl2 \v SetupEnvironment}
{\xe \v SetupEnvironment}
{\bkmkstart AAAAAAABMY}
{\bkmkend AAAAAAABMY}
Inheritance diagram for SetupEnvironment:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_setup_environment.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SetUp} () override\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v SetUp\:SetupEnvironment}
{\xe \v SetupEnvironment\:SetUp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void SetupEnvironment::SetUp (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABMZ}
{\bkmkend AAAAAAABMZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Environment} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAWV \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_skip_in_environment_setup_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SetupFailTest Class Reference\par \pard\plain 
{\tc\tcl2 \v SetupFailTest}
{\xe \v SetupFailTest}
{\bkmkstart AAAAAAABNA}
{\bkmkend AAAAAAABNA}
Inheritance diagram for SetupFailTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_setup_fail_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b SetUpTestSuite} (){\bkmkstart AAAAAAABNB}
{\bkmkend AAAAAAABNB}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-setuptestsuite-test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::SetUpTestCaseTest Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::SetUpTestCaseTest}
{\xe \v testing::SetUpTestCaseTest}
{\bkmkstart AAAAAAACDZ}
{\bkmkend AAAAAAACDZ}
Inheritance diagram for testing::SetUpTestCaseTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_set_up_test_case_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SetUp} () override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b SetUpTestCase} (){\bkmkstart AAAAAAACEA}
{\bkmkend AAAAAAACEA}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b TearDownTestCase} (){\bkmkstart AAAAAAACEB}
{\bkmkend AAAAAAACEB}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b counter_} = 0{\bkmkstart AAAAAAACEC}
{\bkmkend AAAAAAACEC}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const char * {\b shared_resource_} = nullptr{\bkmkstart AAAAAAACED}
{\bkmkend AAAAAAACED}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v SetUp\:testing::SetUpTestCaseTest}
{\xe \v testing::SetUpTestCaseTest\:SetUp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::SetUpTestCaseTest::SetUp (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACEE}
{\bkmkend AAAAAAACEE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::SetUpTestSuiteTest Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::SetUpTestSuiteTest}
{\xe \v testing::SetUpTestSuiteTest}
{\bkmkstart AAAAAAACEF}
{\bkmkend AAAAAAACEF}
Inheritance diagram for testing::SetUpTestSuiteTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_set_up_test_suite_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SetUp} () override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b SetUpTestSuite} (){\bkmkstart AAAAAAACEG}
{\bkmkend AAAAAAACEG}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b TearDownTestSuite} (){\bkmkstart AAAAAAACEH}
{\bkmkend AAAAAAACEH}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b counter_} = 0{\bkmkstart AAAAAAACEI}
{\bkmkend AAAAAAACEI}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const char * {\b shared_resource_} = nullptr{\bkmkstart AAAAAAACEJ}
{\bkmkend AAAAAAACEJ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v SetUp\:testing::SetUpTestSuiteTest}
{\xe \v testing::SetUpTestSuiteTest\:SetUp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::SetUpTestSuiteTest::SetUp (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACEK}
{\bkmkend AAAAAAACEK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest_skip_check_output_test.SkipEntireEnvironmentTest Class Reference\par \pard\plain 
{\tc\tcl2 \v gtest_skip_check_output_test.SkipEntireEnvironmentTest}
{\xe \v gtest_skip_check_output_test.SkipEntireEnvironmentTest}
{\bkmkstart AAAAAAABXH}
{\bkmkend AAAAAAABXH}
Inheritance diagram for gtest_skip_check_output_test.SkipEntireEnvironmentTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__skip__check__output__test_1_1_skip_entire_environment_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testSkipEntireEnvironmentTest} (self){\bkmkstart AAAAAAABXI}
{\bkmkend AAAAAAABXI}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_skip_check_output_test.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest_skip_environment_check_output_test.SkipEntireEnvironmentTest Class Reference\par \pard\plain 
{\tc\tcl2 \v gtest_skip_environment_check_output_test.SkipEntireEnvironmentTest}
{\xe \v gtest_skip_environment_check_output_test.SkipEntireEnvironmentTest}
{\bkmkstart AAAAAAABXJ}
{\bkmkend AAAAAAABXJ}
Inheritance diagram for gtest_skip_environment_check_output_test.SkipEntireEnvironmentTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__skip__environment__check__output__test_1_1_skip_entire_environment_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testSkipEntireEnvironmentTest} (self){\bkmkstart AAAAAAABXK}
{\bkmkend AAAAAAABXK}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_skip_environment_check_output_test.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SkippedTest Class Reference\par \pard\plain 
{\tc\tcl2 \v SkippedTest}
{\xe \v SkippedTest}
{\bkmkstart AAAAAAABNC}
{\bkmkend AAAAAAABNC}
Inheritance diagram for SkippedTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_skipped_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_xml_output_unittest_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_function_mocker_test::StackInterface< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_function_mocker_test::StackInterface< T >}
{\xe \v testing::gmock_function_mocker_test::StackInterface< T >}
{\bkmkstart AAAAAAACQJ}
{\bkmkend AAAAAAACQJ}
Inheritance diagram for testing::gmock_function_mocker_test::StackInterface< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__function__mocker__test_1_1_stack_interface.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b Push} (const T &value)=0{\bkmkstart AAAAAAACQK}
{\bkmkend AAAAAAACQK}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b Pop} ()=0{\bkmkstart AAAAAAACQL}
{\bkmkend AAAAAAACQL}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b GetSize} () const =0{\bkmkstart AAAAAAACQM}
{\bkmkend AAAAAAACQM}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual const T & {\b GetTop} () const =0{\bkmkstart AAAAAAACQN}
{\bkmkend AAAAAAACQN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-function-mocker_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
StatefulNamingFunctor Struct Reference\par \pard\plain 
{\tc\tcl2 \v StatefulNamingFunctor}
{\xe \v StatefulNamingFunctor}
{\bkmkstart AAAAAAABND}
{\bkmkend AAAAAAABND}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::string {\b operator()} (const {\b ::testing::TestParamInfo}< int > &info){\bkmkstart AAAAAAABNE}
{\bkmkend AAAAAAABNE}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b sum}{\bkmkstart AAAAAAABNF}
{\bkmkend AAAAAAABNF}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
StatefulNamingTest Class Reference\par \pard\plain 
{\tc\tcl2 \v StatefulNamingTest}
{\xe \v StatefulNamingTest}
{\bkmkstart AAAAAAABNG}
{\bkmkend AAAAAAABNG}
Inheritance diagram for StatefulNamingTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_stateful_naming_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b sum_}{\bkmkstart AAAAAAABNH}
{\bkmkend AAAAAAABNH}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
StaticAssertTypeEqTestHelper< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v StaticAssertTypeEqTestHelper< T >}
{\xe \v StaticAssertTypeEqTestHelper< T >}
{\bkmkstart AAAAAAABNI}
{\bkmkend AAAAAAABNI}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::StlContainerView< RawContainer > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::StlContainerView< RawContainer >}
{\xe \v testing::internal::StlContainerView< RawContainer >}
{\bkmkstart AAAAAAADNE}
{\bkmkend AAAAAAADNE}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef RawContainer {\b type}{\bkmkstart AAAAAAADNF}
{\bkmkend AAAAAAADNF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef const type & {\b const_reference}{\bkmkstart AAAAAAADNG}
{\bkmkend AAAAAAADNG}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const_reference {\b ConstReference} (const RawContainer &container){\bkmkstart AAAAAAADNH}
{\bkmkend AAAAAAADNH}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static type {\b Copy} (const RawContainer &container){\bkmkstart AAAAAAADNI}
{\bkmkend AAAAAAADNI}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::StlContainerView< ::std::tuple< ElementPointer, Size > > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::StlContainerView< ::std::tuple< ElementPointer, Size > >}
{\xe \v testing::internal::StlContainerView< ::std::tuple< ElementPointer, Size > >}
{\bkmkstart AAAAAAADNJ}
{\bkmkend AAAAAAADNJ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef std::remove_const< typenamestd::pointer_traits< ElementPointer >::element_type >::type {\b RawElement}{\bkmkstart AAAAAAADNK}
{\bkmkend AAAAAAADNK}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::NativeArray}< RawElement > {\b type}{\bkmkstart AAAAAAADNL}
{\bkmkend AAAAAAADNL}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef const {\b type} {\b const_reference}{\bkmkstart AAAAAAADNM}
{\bkmkend AAAAAAADNM}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b const_reference} {\b ConstReference} (const ::std::tuple< ElementPointer, Size > &array){\bkmkstart AAAAAAADNN}
{\bkmkend AAAAAAADNN}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b type} {\b Copy} (const ::std::tuple< ElementPointer, Size > &array){\bkmkstart AAAAAAADNO}
{\bkmkend AAAAAAADNO}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::StlContainerView< Element[N]> Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::StlContainerView< Element[N]>}
{\xe \v testing::internal::StlContainerView< Element[N]>}
{\bkmkstart AAAAAAADNP}
{\bkmkend AAAAAAADNP}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef std::remove_const< Element >::type {\b RawElement}{\bkmkstart AAAAAAADNQ}
{\bkmkend AAAAAAADNQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::NativeArray}< RawElement > {\b type}{\bkmkstart AAAAAAADNR}
{\bkmkend AAAAAAADNR}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef const {\b type} {\b const_reference}{\bkmkstart AAAAAAADNS}
{\bkmkend AAAAAAADNS}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b const_reference} {\b ConstReference} (const Element(&array)[N]){\bkmkstart AAAAAAADNT}
{\bkmkend AAAAAAADNT}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b type} {\b Copy} (const Element(&array)[N]){\bkmkstart AAAAAAADNU}
{\bkmkend AAAAAAADNU}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
StreamableInGlobal Class Reference\par \pard\plain 
{\tc\tcl2 \v StreamableInGlobal}
{\xe \v StreamableInGlobal}
{\bkmkstart AAAAAAABNJ}
{\bkmkend AAAAAAABNJ}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-printers-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
foo::StreamableTemplateInFoo< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v foo::StreamableTemplateInFoo< T >}
{\xe \v foo::StreamableTemplateInFoo< T >}
{\bkmkstart AAAAAAABRE}
{\bkmkend AAAAAAABRE}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const T & {\b value} () const{\bkmkstart AAAAAAABRF}
{\bkmkend AAAAAAABRF}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-printers-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::internal_stream_operator_without_lexical_name_lookup::StreamPrinter Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::internal_stream_operator_without_lexical_name_lookup::StreamPrinter}
{\xe \v testing::internal::internal_stream_operator_without_lexical_name_lookup::StreamPrinter}
{\bkmkstart AAAAAAADXF}
{\bkmkend AAAAAAADXF}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T , typename  = typename std::enable_if<                !std::is_member_pointer<T>::value>::type, typename  = decltype(std::declval<std::ostream&>()                                << std::declval<const T&>())> static void {\b PrintValue} (const T &value, ::std::ostream *os){\bkmkstart AAAAAAADXG}
{\bkmkend AAAAAAADXG}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::StrictMock< MockClass > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::StrictMock< MockClass >}
{\xe \v testing::StrictMock< MockClass >}
{\bkmkstart AAAAAAACEL}
{\bkmkend AAAAAAACEL}
Inheritance diagram for testing::StrictMock< MockClass >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_strict_mock.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A > {\b StrictMock} (A &&arg){\bkmkstart AAAAAAACEM}
{\bkmkend AAAAAAACEM}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename TArg1 , typename TArg2 , typename... An> {\b StrictMock} (TArg1 &&arg1, TArg2 &&arg2, An &&... args){\bkmkstart AAAAAAACEN}
{\bkmkend AAAAAAACEN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-nice-strict.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::StrictMockImpl< Base > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::StrictMockImpl< Base >}
{\xe \v testing::internal::StrictMockImpl< Base >}
{\bkmkstart AAAAAAADNV}
{\bkmkend AAAAAAADNV}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-nice-strict.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::String Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::String}
{\xe \v testing::internal::String}
{\bkmkstart AAAAAAADNW}
{\bkmkend AAAAAAADNW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const char * {\b CloneCString} (const char *c_str){\bkmkstart AAAAAAADNX}
{\bkmkend AAAAAAADNX}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b CStringEquals} (const char *lhs, const char *rhs){\bkmkstart AAAAAAADNY}
{\bkmkend AAAAAAADNY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static std::string {\b ShowWideCString} (const wchar_t *wide_c_str){\bkmkstart AAAAAAADNZ}
{\bkmkend AAAAAAADNZ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b WideCStringEquals} (const wchar_t *lhs, const wchar_t *rhs){\bkmkstart AAAAAAADOA}
{\bkmkend AAAAAAADOA}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b CaseInsensitiveCStringEquals} (const char *lhs, const char *rhs){\bkmkstart AAAAAAADOB}
{\bkmkend AAAAAAADOB}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b CaseInsensitiveWideCStringEquals} (const wchar_t *lhs, const wchar_t *rhs){\bkmkstart AAAAAAADOC}
{\bkmkend AAAAAAADOC}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b EndsWithCaseInsensitive} (const std::string &str, const std::string &suffix){\bkmkstart AAAAAAADOD}
{\bkmkend AAAAAAADOD}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static std::string {\b FormatIntWidth2} (int value){\bkmkstart AAAAAAADOE}
{\bkmkend AAAAAAADOE}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static std::string {\b FormatIntWidthN} (int value, int width){\bkmkstart AAAAAAADOF}
{\bkmkend AAAAAAADOF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static std::string {\b FormatHexInt} (int value){\bkmkstart AAAAAAADOG}
{\bkmkend AAAAAAADOG}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static std::string {\b FormatHexUInt32} (uint32_t value){\bkmkstart AAAAAAADOH}
{\bkmkend AAAAAAADOH}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static std::string {\b FormatByte} (unsigned char value){\bkmkstart AAAAAAADOI}
{\bkmkend AAAAAAADOI}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-string.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest_test_utils.Subprocess Class Reference\par \pard\plain 
{\tc\tcl2 \v gtest_test_utils.Subprocess}
{\xe \v gtest_test_utils.Subprocess}
{\bkmkstart AAAAAAABXL}
{\bkmkend AAAAAAABXL}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b __init__} (self, command, working_dir=None, capture_stderr=True, env=None)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b output}{\bkmkstart AAAAAAABXM}
{\bkmkend AAAAAAABXM}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b terminated_by_signal}{\bkmkstart AAAAAAABXN}
{\bkmkend AAAAAAABXN}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b exited}{\bkmkstart AAAAAAABXO}
{\bkmkend AAAAAAABXO}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b exit_code}{\bkmkstart AAAAAAABXP}
{\bkmkend AAAAAAABXP}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v __init__\:gtest_test_utils.Subprocess}
{\xe \v gtest_test_utils.Subprocess\:__init__}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_test_utils.Subprocess.__init__ (  {\i self},   {\i command},   {\i working_dir} = {\f2 None},   {\i capture_stderr} = {\f2 True},   {\i env} = {\f2 None})}}
\par
{\bkmkstart AAAAAAABXQ}
{\bkmkend AAAAAAABXQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Changes into a specified directory, if provided, and executes a command.\par
\par
Restores the old directory afterwards.\par
\par
Args:\par
  command:        The command to run, in the form of sys.argv.\par
  working_dir:    The directory to change into.\par
  capture_stderr: Determines whether to capture stderr in the output member\par
                  or to discard it.\par
  env:            Dictionary with environment to pass to the subprocess.\par
\par
Returns:\par
  An object that represents outcome of the executed process. It has the\par
  following attributes:\par
    terminated_by_signal   True if and only if the child process has been\par
                           terminated by a signal.\par
    exited                 True if and only if the child process exited\par
                           normally.\par
    exit_code              The code with which the child process exited.\par
    output                 Child process's stdout and stderr output\par
                           combined in a string.\par
}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_test_utils.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SuccessfulTest Class Reference\par \pard\plain 
{\tc\tcl2 \v SuccessfulTest}
{\xe \v SuccessfulTest}
{\bkmkstart AAAAAAABNK}
{\bkmkend AAAAAAABNK}
Inheritance diagram for SuccessfulTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_successful_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_xml_output_unittest_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::SuiteApiResolver< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::SuiteApiResolver< T >}
{\xe \v testing::internal::SuiteApiResolver< T >}
{\bkmkstart AAAAAAADOJ}
{\bkmkend AAAAAAADOJ}
Inheritance diagram for testing::internal::SuiteApiResolver< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_suite_api_resolver.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b Test} = typename std::conditional< sizeof(T) !=0, {\b ::testing::Test}, void >::type{\bkmkstart AAAAAAADOK}
{\bkmkend AAAAAAADOK}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static SetUpTearDownSuiteFuncType {\b GetSetUpCaseOrSuite} (const char *filename, int line_num){\bkmkstart AAAAAAADOL}
{\bkmkend AAAAAAADOL}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static SetUpTearDownSuiteFuncType {\b GetTearDownCaseOrSuite} (const char *filename, int line_num){\bkmkstart AAAAAAADOM}
{\bkmkend AAAAAAADOM}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_more_actions_test::SumOf5Functor Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_more_actions_test::SumOf5Functor}
{\xe \v testing::gmock_more_actions_test::SumOf5Functor}
{\bkmkstart AAAAAAACSB}
{\bkmkend AAAAAAACSB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b operator()} (int a, int b, int c, int d, int e){\bkmkstart AAAAAAACSC}
{\bkmkend AAAAAAACSC}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-more-actions_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_more_actions_test::SumOf6Functor Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_more_actions_test::SumOf6Functor}
{\xe \v testing::gmock_more_actions_test::SumOf6Functor}
{\bkmkstart AAAAAAACSD}
{\bkmkend AAAAAAACSD}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b operator()} (int a, int b, int c, int d, int e, int f){\bkmkstart AAAAAAACSE}
{\bkmkend AAAAAAACSE}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-more-actions_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
TearDownFailTest Class Reference\par \pard\plain 
{\tc\tcl2 \v TearDownFailTest}
{\xe \v TearDownFailTest}
{\bkmkstart AAAAAAABNL}
{\bkmkend AAAAAAABNL}
Inheritance diagram for TearDownFailTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_tear_down_fail_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b TearDownTestSuite} (){\bkmkstart AAAAAAABNM}
{\bkmkend AAAAAAABNM}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-setuptestsuite-test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_function_mocker_test::TemplatedCopyable< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_function_mocker_test::TemplatedCopyable< T >}
{\xe \v testing::gmock_function_mocker_test::TemplatedCopyable< T >}
{\bkmkstart AAAAAAACQO}
{\bkmkend AAAAAAACQO}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename U > {\b TemplatedCopyable} (const U &other){\bkmkstart AAAAAAACQP}
{\bkmkend AAAAAAACQP}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-function-mocker_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
foo::TemplatedStreamableInFoo Struct Reference\par \pard\plain 
{\tc\tcl2 \v foo::TemplatedStreamableInFoo}
{\xe \v foo::TemplatedStreamableInFoo}
{\bkmkstart AAAAAAABRG}
{\bkmkend AAAAAAABRG}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-printers-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_function_mocker_test::TemplateMockTest< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_function_mocker_test::TemplateMockTest< T >}
{\xe \v testing::gmock_function_mocker_test::TemplateMockTest< T >}
{\bkmkstart AAAAAAACQQ}
{\bkmkend AAAAAAACQQ}
Inheritance diagram for testing::gmock_function_mocker_test::TemplateMockTest< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__function__mocker__test_1_1_template_mock_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-function-mocker_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Templates< Head_, Tail_ > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Templates< Head_, Tail_ >}
{\xe \v testing::internal::Templates< Head_, Tail_ >}
{\bkmkstart AAAAAAADON}
{\bkmkend AAAAAAADON}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b Head} = {\b TemplateSel}< Head_ >{\bkmkstart AAAAAAADOO}
{\bkmkend AAAAAAADOO}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b Tail} = {\b Templates}< Tail_... >{\bkmkstart AAAAAAADOP}
{\bkmkend AAAAAAADOP}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-type-util.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Templates< Head_ > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Templates< Head_ >}
{\xe \v testing::internal::Templates< Head_ >}
{\bkmkstart AAAAAAADOQ}
{\bkmkend AAAAAAADOQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b Head} = {\b TemplateSel}< Head_ >{\bkmkstart AAAAAAADOR}
{\bkmkend AAAAAAADOR}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b Tail} = {\b None}{\bkmkstart AAAAAAADOS}
{\bkmkend AAAAAAADOS}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-type-util.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TemplateSel< Tmpl > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TemplateSel< Tmpl >}
{\xe \v testing::internal::TemplateSel< Tmpl >}
{\bkmkstart AAAAAAADOT}
{\bkmkend AAAAAAADOT}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Bind}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-type-util.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_more_actions_test::TenArgConstructorClass Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_more_actions_test::TenArgConstructorClass}
{\xe \v testing::gmock_more_actions_test::TenArgConstructorClass}
{\bkmkstart AAAAAAACSF}
{\bkmkend AAAAAAACSF}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TenArgConstructorClass} (int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10){\bkmkstart AAAAAAACSG}
{\bkmkend AAAAAAACSG}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b value_}{\bkmkstart AAAAAAACSH}
{\bkmkend AAAAAAACSH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-more-actions_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
my_namespace::testing::Test Class Reference\par \pard\plain 
{\tc\tcl2 \v my_namespace::testing::Test}
{\xe \v my_namespace::testing::Test}
{\bkmkstart AAAAAAABYS}
{\bkmkend AAAAAAABYS}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::gmockpp::Test< Args > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::gmockpp::Test< Args >}
{\xe \v testing::internal::gmockpp::Test< Args >}
{\bkmkstart AAAAAAADXC}
{\bkmkend AAAAAAADXC}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static constexpr int {\b kArgs} = sizeof...(Args){\bkmkstart AAAAAAADXD}
{\bkmkend AAAAAAADXD}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-pp_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::Test Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::Test}
{\xe \v testing::Test}
{\bkmkstart AAAAAAAAYL}
{\bkmkend AAAAAAAAYL}
Inheritance diagram for testing::Test:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b SetUpTestSuite} (){\bkmkstart AAAAAAACEO}
{\bkmkend AAAAAAACEO}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b TearDownTestSuite} (){\bkmkstart AAAAAAACEP}
{\bkmkend AAAAAAACEP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b TearDownTestCase} (){\bkmkstart AAAAAAACEQ}
{\bkmkend AAAAAAACEQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b SetUpTestCase} (){\bkmkstart AAAAAAACER}
{\bkmkend AAAAAAACER}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b HasFatalFailure} (){\bkmkstart AAAAAAACES}
{\bkmkend AAAAAAACES}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b HasNonfatalFailure} (){\bkmkstart AAAAAAACET}
{\bkmkend AAAAAAACET}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b IsSkipped} (){\bkmkstart AAAAAAACEU}
{\bkmkend AAAAAAACEU}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b HasFailure} (){\bkmkstart AAAAAAACEV}
{\bkmkend AAAAAAACEV}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b RecordProperty} (const std::string &key, const std::string &value){\bkmkstart AAAAAAACEW}
{\bkmkend AAAAAAACEW}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b RecordProperty} (const std::string &key, int value){\bkmkstart AAAAAAACEX}
{\bkmkend AAAAAAACEX}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b SetUp} (){\bkmkstart AAAAAAACEY}
{\bkmkend AAAAAAACEY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b TearDown} (){\bkmkstart AAAAAAACEZ}
{\bkmkend AAAAAAACEZ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b TestInfo}{\bkmkstart AAAAAAACFA}
{\bkmkend AAAAAAACFA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
TEST_before_TEST_F_in_same_test_case Class Reference\par \pard\plain 
{\tc\tcl2 \v TEST_before_TEST_F_in_same_test_case}
{\xe \v TEST_before_TEST_F_in_same_test_case}
{\bkmkstart AAAAAAABNN}
{\bkmkend AAAAAAABNN}
Inheritance diagram for TEST_before_TEST_F_in_same_test_case:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_t_e_s_t__before___t_e_s_t___f__in__same__test__case.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-output-test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
TEST_F_before_TEST_in_same_test_case Class Reference\par \pard\plain 
{\tc\tcl2 \v TEST_F_before_TEST_in_same_test_case}
{\xe \v TEST_F_before_TEST_in_same_test_case}
{\bkmkstart AAAAAAABNO}
{\bkmkend AAAAAAABNO}
Inheritance diagram for TEST_F_before_TEST_in_same_test_case:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_t_e_s_t___f__before___t_e_s_t__in__same__test__case.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-output-test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::TestEventListener Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::TestEventListener}
{\xe \v testing::TestEventListener}
{\bkmkstart AAAAAAACAL}
{\bkmkend AAAAAAACAL}
Inheritance diagram for testing::TestEventListener:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_test_event_listener.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestProgramStart} (const {\b UnitTest} &unit_test)=0{\bkmkstart AAAAAAACFB}
{\bkmkend AAAAAAACFB}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestIterationStart} (const {\b UnitTest} &unit_test, int iteration)=0{\bkmkstart AAAAAAACFC}
{\bkmkend AAAAAAACFC}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnEnvironmentsSetUpStart} (const {\b UnitTest} &unit_test)=0{\bkmkstart AAAAAAACFD}
{\bkmkend AAAAAAACFD}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnEnvironmentsSetUpEnd} (const {\b UnitTest} &unit_test)=0{\bkmkstart AAAAAAACFE}
{\bkmkend AAAAAAACFE}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestSuiteStart} (const {\b TestSuite} &){\bkmkstart AAAAAAACFF}
{\bkmkend AAAAAAACFF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestCaseStart} (const {\b TestCase} &){\bkmkstart AAAAAAACFG}
{\bkmkend AAAAAAACFG}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestStart} (const {\b TestInfo} &test_info)=0{\bkmkstart AAAAAAACFH}
{\bkmkend AAAAAAACFH}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestDisabled} (const {\b TestInfo} &){\bkmkstart AAAAAAACFI}
{\bkmkend AAAAAAACFI}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestPartResult} (const TestPartResult &test_part_result)=0{\bkmkstart AAAAAAACFJ}
{\bkmkend AAAAAAACFJ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestEnd} (const {\b TestInfo} &test_info)=0{\bkmkstart AAAAAAACFK}
{\bkmkend AAAAAAACFK}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestSuiteEnd} (const {\b TestSuite} &){\bkmkstart AAAAAAACFL}
{\bkmkend AAAAAAACFL}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestCaseEnd} (const {\b TestCase} &){\bkmkstart AAAAAAACFM}
{\bkmkend AAAAAAACFM}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnEnvironmentsTearDownStart} (const {\b UnitTest} &unit_test)=0{\bkmkstart AAAAAAACFN}
{\bkmkend AAAAAAACFN}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnEnvironmentsTearDownEnd} (const {\b UnitTest} &unit_test)=0{\bkmkstart AAAAAAACFO}
{\bkmkend AAAAAAACFO}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestIterationEnd} (const {\b UnitTest} &unit_test, int iteration)=0{\bkmkstart AAAAAAACFP}
{\bkmkend AAAAAAACFP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestProgramEnd} (const {\b UnitTest} &unit_test)=0{\bkmkstart AAAAAAACFQ}
{\bkmkend AAAAAAACFQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::TestEventListeners Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::TestEventListeners}
{\xe \v testing::TestEventListeners}
{\bkmkstart AAAAAAACFR}
{\bkmkend AAAAAAACFR}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b Append} ({\b TestEventListener} *listener){\bkmkstart AAAAAAACFS}
{\bkmkend AAAAAAACFS}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestEventListener} * {\b Release} ({\b TestEventListener} *listener){\bkmkstart AAAAAAACFT}
{\bkmkend AAAAAAACFT}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestEventListener} * {\b default_result_printer} () const{\bkmkstart AAAAAAACFU}
{\bkmkend AAAAAAACFU}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestEventListener} * {\b default_xml_generator} () const{\bkmkstart AAAAAAACFV}
{\bkmkend AAAAAAACFV}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b TestSuite}{\bkmkstart AAAAAAACFW}
{\bkmkend AAAAAAACFW}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b TestInfo}{\bkmkstart AAAAAAACFX}
{\bkmkend AAAAAAACFX}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b internal::DefaultGlobalTestPartResultReporter}{\bkmkstart AAAAAAACFY}
{\bkmkend AAAAAAACFY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b internal::NoExecDeathTest}{\bkmkstart AAAAAAACFZ}
{\bkmkend AAAAAAACFZ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b internal::TestEventListenersAccessor}{\bkmkstart AAAAAAACGA}
{\bkmkend AAAAAAACGA}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b internal::UnitTestImpl}{\bkmkstart AAAAAAACGB}
{\bkmkend AAAAAAACGB}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TestEventListenersAccessor Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TestEventListenersAccessor}
{\xe \v testing::internal::TestEventListenersAccessor}
{\bkmkstart AAAAAAADOW}
{\bkmkend AAAAAAADOW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b TestEventListener} * {\b GetRepeater} ({\b TestEventListeners} *listeners){\bkmkstart AAAAAAADOX}
{\bkmkend AAAAAAADOX}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b SetDefaultResultPrinter} ({\b TestEventListeners} *listeners, {\b TestEventListener} *listener){\bkmkstart AAAAAAADOY}
{\bkmkend AAAAAAADOY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b SetDefaultXmlGenerator} ({\b TestEventListeners} *listeners, {\b TestEventListener} *listener){\bkmkstart AAAAAAADOZ}
{\bkmkend AAAAAAADOZ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b EventForwardingEnabled} (const {\b TestEventListeners} &listeners){\bkmkstart AAAAAAADPA}
{\bkmkend AAAAAAADPA}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b SuppressEventForwarding} ({\b TestEventListeners} *listeners){\bkmkstart AAAAAAADPB}
{\bkmkend AAAAAAADPB}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TestEventRepeater Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TestEventRepeater}
{\xe \v testing::internal::TestEventRepeater}
{\bkmkstart AAAAAAADPC}
{\bkmkend AAAAAAADPC}
Inheritance diagram for testing::internal::TestEventRepeater:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_test_event_repeater.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b Append} ({\b TestEventListener} *listener){\bkmkstart AAAAAAADPD}
{\bkmkend AAAAAAADPD}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestEventListener} * {\b Release} ({\b TestEventListener} *listener){\bkmkstart AAAAAAADPE}
{\bkmkend AAAAAAADPE}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b forwarding_enabled} () const{\bkmkstart AAAAAAADPF}
{\bkmkend AAAAAAADPF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b set_forwarding_enabled} (bool enable){\bkmkstart AAAAAAADPG}
{\bkmkend AAAAAAADPG}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestProgramStart} (const {\b UnitTest} &unit_test) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestIterationStart} (const {\b UnitTest} &unit_test, int iteration) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnEnvironmentsSetUpStart} (const {\b UnitTest} &unit_test) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnEnvironmentsSetUpEnd} (const {\b UnitTest} &unit_test) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestCaseStart} (const {\b TestSuite} &parameter) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestSuiteStart} (const {\b TestSuite} &parameter) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestStart} (const {\b TestInfo} &test_info) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestDisabled} (const {\b TestInfo} &test_info) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestPartResult} (const TestPartResult &result) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestEnd} (const {\b TestInfo} &test_info) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestCaseEnd} (const {\b TestCase} &parameter) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestSuiteEnd} (const {\b TestSuite} &parameter) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnEnvironmentsTearDownStart} (const {\b UnitTest} &unit_test) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnEnvironmentsTearDownEnd} (const {\b UnitTest} &unit_test) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestIterationEnd} (const {\b UnitTest} &unit_test, int iteration) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestProgramEnd} (const {\b UnitTest} &unit_test) override\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v OnEnvironmentsSetUpEnd\:testing::internal::TestEventRepeater}
{\xe \v testing::internal::TestEventRepeater\:OnEnvironmentsSetUpEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::TestEventRepeater::OnEnvironmentsSetUpEnd (const {\b UnitTest} &  {\i unit_test}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADPH}
{\bkmkend AAAAAAADPH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnEnvironmentsSetUpStart\:testing::internal::TestEventRepeater}
{\xe \v testing::internal::TestEventRepeater\:OnEnvironmentsSetUpStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::TestEventRepeater::OnEnvironmentsSetUpStart (const {\b UnitTest} &  {\i unit_test}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADPI}
{\bkmkend AAAAAAADPI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnEnvironmentsTearDownEnd\:testing::internal::TestEventRepeater}
{\xe \v testing::internal::TestEventRepeater\:OnEnvironmentsTearDownEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::TestEventRepeater::OnEnvironmentsTearDownEnd (const {\b UnitTest} &  {\i unit_test}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADPJ}
{\bkmkend AAAAAAADPJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnEnvironmentsTearDownStart\:testing::internal::TestEventRepeater}
{\xe \v testing::internal::TestEventRepeater\:OnEnvironmentsTearDownStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::TestEventRepeater::OnEnvironmentsTearDownStart (const {\b UnitTest} &  {\i unit_test}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADPK}
{\bkmkend AAAAAAADPK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestCaseEnd\:testing::internal::TestEventRepeater}
{\xe \v testing::internal::TestEventRepeater\:OnTestCaseEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::TestEventRepeater::OnTestCaseEnd (const {\b TestCase} &  {\i parameter}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADPL}
{\bkmkend AAAAAAADPL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestCaseStart\:testing::internal::TestEventRepeater}
{\xe \v testing::internal::TestEventRepeater\:OnTestCaseStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::TestEventRepeater::OnTestCaseStart (const {\b TestSuite} &  {\i parameter}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADPM}
{\bkmkend AAAAAAADPM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestDisabled\:testing::internal::TestEventRepeater}
{\xe \v testing::internal::TestEventRepeater\:OnTestDisabled}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::TestEventRepeater::OnTestDisabled (const {\b TestInfo} &  {\i test_info}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADPN}
{\bkmkend AAAAAAADPN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestEnd\:testing::internal::TestEventRepeater}
{\xe \v testing::internal::TestEventRepeater\:OnTestEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::TestEventRepeater::OnTestEnd (const {\b TestInfo} &  {\i test_info}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADPO}
{\bkmkend AAAAAAADPO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestIterationEnd\:testing::internal::TestEventRepeater}
{\xe \v testing::internal::TestEventRepeater\:OnTestIterationEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::TestEventRepeater::OnTestIterationEnd (const {\b UnitTest} &  {\i unit_test}, int  {\i iteration}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADPP}
{\bkmkend AAAAAAADPP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestIterationStart\:testing::internal::TestEventRepeater}
{\xe \v testing::internal::TestEventRepeater\:OnTestIterationStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::TestEventRepeater::OnTestIterationStart (const {\b UnitTest} &  {\i unit_test}, int  {\i iteration}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADPQ}
{\bkmkend AAAAAAADPQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestPartResult\:testing::internal::TestEventRepeater}
{\xe \v testing::internal::TestEventRepeater\:OnTestPartResult}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::TestEventRepeater::OnTestPartResult (const TestPartResult &  {\i result}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADPR}
{\bkmkend AAAAAAADPR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestProgramEnd\:testing::internal::TestEventRepeater}
{\xe \v testing::internal::TestEventRepeater\:OnTestProgramEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::TestEventRepeater::OnTestProgramEnd (const {\b UnitTest} &  {\i unit_test}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADPS}
{\bkmkend AAAAAAADPS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestProgramStart\:testing::internal::TestEventRepeater}
{\xe \v testing::internal::TestEventRepeater\:OnTestProgramStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::TestEventRepeater::OnTestProgramStart (const {\b UnitTest} &  {\i unit_test}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADPT}
{\bkmkend AAAAAAADPT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestStart\:testing::internal::TestEventRepeater}
{\xe \v testing::internal::TestEventRepeater\:OnTestStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::TestEventRepeater::OnTestStart (const {\b TestInfo} &  {\i test_info}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADPU}
{\bkmkend AAAAAAADPU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestSuiteEnd\:testing::internal::TestEventRepeater}
{\xe \v testing::internal::TestEventRepeater\:OnTestSuiteEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::TestEventRepeater::OnTestSuiteEnd (const {\b TestSuite} &  {\i parameter}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADPV}
{\bkmkend AAAAAAADPV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v OnTestSuiteStart\:testing::internal::TestEventRepeater}
{\xe \v testing::internal::TestEventRepeater\:OnTestSuiteStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::TestEventRepeater::OnTestSuiteStart (const {\b TestSuite} &  {\i parameter}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADPW}
{\bkmkend AAAAAAADPW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::TestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TestFactoryBase Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TestFactoryBase}
{\xe \v testing::internal::TestFactoryBase}
{\bkmkstart AAAAAAADHK}
{\bkmkend AAAAAAADHK}
Inheritance diagram for testing::internal::TestFactoryBase:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_test_factory_base.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual {\b Test} * {\b CreateTest} ()=0{\bkmkstart AAAAAAADPX}
{\bkmkend AAAAAAADPX}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TestFactoryImpl< TestClass > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TestFactoryImpl< TestClass >}
{\xe \v testing::internal::TestFactoryImpl< TestClass >}
{\bkmkstart AAAAAAADPY}
{\bkmkend AAAAAAADPY}
Inheritance diagram for testing::internal::TestFactoryImpl< TestClass >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_test_factory_impl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Test} * {\b CreateTest} () override\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v CreateTest\:testing::internal::TestFactoryImpl< TestClass >}
{\xe \v testing::internal::TestFactoryImpl< TestClass >\:CreateTest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class TestClass > {\b Test} * {\b testing::internal::TestFactoryImpl}< TestClass >::CreateTest (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADPZ}
{\bkmkend AAAAAAADPZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::internal::TestFactoryBase} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAADHK \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
TestGenerationEnvironment< kExpectedCalls > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v TestGenerationEnvironment< kExpectedCalls >}
{\xe \v TestGenerationEnvironment< kExpectedCalls >}
{\bkmkstart AAAAAAABNP}
{\bkmkend AAAAAAABNP}
Inheritance diagram for TestGenerationEnvironment< kExpectedCalls >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_test_generation_environment.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b FixtureConstructorExecuted} (){\bkmkstart AAAAAAABNQ}
{\bkmkend AAAAAAABNQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b SetUpExecuted} (){\bkmkstart AAAAAAABNR}
{\bkmkend AAAAAAABNR}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b TearDownExecuted} (){\bkmkstart AAAAAAABNS}
{\bkmkend AAAAAAABNS}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b TestBodyExecuted} (){\bkmkstart AAAAAAABNT}
{\bkmkend AAAAAAABNT}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b TearDown} () override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b TestGenerationEnvironment} * {\b Instance} (){\bkmkstart AAAAAAABNU}
{\bkmkend AAAAAAABNU}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v TearDown\:TestGenerationEnvironment< kExpectedCalls >}
{\xe \v TestGenerationEnvironment< kExpectedCalls >\:TearDown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<int kExpectedCalls> void {\b TestGenerationEnvironment}< kExpectedCalls >::TearDown (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABNV}
{\bkmkend AAAAAAABNV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Environment} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAWV \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
TestGenerationTest Class Reference\par \pard\plain 
{\tc\tcl2 \v TestGenerationTest}
{\xe \v TestGenerationTest}
{\bkmkstart AAAAAAABNW}
{\bkmkend AAAAAAABNW}
Inheritance diagram for TestGenerationTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_test_generation_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum \{ {\b PARAMETER_COUNT}
 \}{\bkmkstart AAAAAAABNX}
{\bkmkend AAAAAAABNX}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b TestGenerationEnvironment}< PARAMETER_COUNT > {\b Environment}{\bkmkstart AAAAAAABNY}
{\bkmkend AAAAAAABNY}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SetUp} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b TearDown} () override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b SetUpTestSuite} (){\bkmkstart AAAAAAABNZ}
{\bkmkend AAAAAAABNZ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b TearDownTestSuite} (){\bkmkstart AAAAAAABOA}
{\bkmkend AAAAAAABOA}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b current_parameter_}{\bkmkstart AAAAAAABOB}
{\bkmkend AAAAAAABOB}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static vector< int > {\b collected_parameters_}{\bkmkstart AAAAAAABOC}
{\bkmkend AAAAAAABOC}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v SetUp\:TestGenerationTest}
{\xe \v TestGenerationTest\:SetUp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void TestGenerationTest::SetUp (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABOD}
{\bkmkend AAAAAAABOD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v TearDown\:TestGenerationTest}
{\xe \v TestGenerationTest\:TearDown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void TestGenerationTest::TearDown (){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABOE}
{\bkmkend AAAAAAABOE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::TestInfo Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::TestInfo}
{\xe \v testing::TestInfo}
{\bkmkstart AAAAAAACGC}
{\bkmkend AAAAAAACGC}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b test_suite_name} () const{\bkmkstart AAAAAAACGD}
{\bkmkend AAAAAAACGD}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b test_case_name} () const{\bkmkstart AAAAAAACGE}
{\bkmkend AAAAAAACGE}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b name} () const{\bkmkstart AAAAAAACGF}
{\bkmkend AAAAAAACGF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b type_param} () const{\bkmkstart AAAAAAACGG}
{\bkmkend AAAAAAACGG}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b value_param} () const{\bkmkstart AAAAAAACGH}
{\bkmkend AAAAAAACGH}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b file} () const{\bkmkstart AAAAAAACGI}
{\bkmkend AAAAAAACGI}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b line} () const{\bkmkstart AAAAAAACGJ}
{\bkmkend AAAAAAACGJ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b is_in_another_shard} () const{\bkmkstart AAAAAAACGK}
{\bkmkend AAAAAAACGK}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b should_run} () const{\bkmkstart AAAAAAACGL}
{\bkmkend AAAAAAACGL}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b is_reportable} () const{\bkmkstart AAAAAAACGM}
{\bkmkend AAAAAAACGM}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b TestResult} * {\b result} () const{\bkmkstart AAAAAAACGN}
{\bkmkend AAAAAAACGN}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b Test}{\bkmkstart AAAAAAACGO}
{\bkmkend AAAAAAACGO}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b TestSuite}{\bkmkstart AAAAAAACGP}
{\bkmkend AAAAAAACGP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b internal::UnitTestImpl}{\bkmkstart AAAAAAACGQ}
{\bkmkend AAAAAAACGQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b internal::StreamingListenerTest}{\bkmkstart AAAAAAACGR}
{\bkmkend AAAAAAACGR}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestInfo} * {\b internal::MakeAndRegisterTestInfo} (const char *test_suite_name, const char *name, const char *type_param, const char *value_param, {\b internal::CodeLocation} code_location, internal::TypeId fixture_class_id, internal::SetUpTestSuiteFunc set_up_tc, internal::TearDownTestSuiteFunc tear_down_tc, {\b internal::TestFactoryBase} *factory){\bkmkstart AAAAAAACGS}
{\bkmkend AAAAAAACGS}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::TestInfoTest Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::TestInfoTest}
{\xe \v testing::TestInfoTest}
{\bkmkstart AAAAAAACGT}
{\bkmkend AAAAAAACGT}
Inheritance diagram for testing::TestInfoTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_test_info_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const {\b TestInfo} * {\b GetTestInfo} (const char *test_name){\bkmkstart AAAAAAACGU}
{\bkmkend AAAAAAACGU}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const {\b TestResult} * {\b GetTestResult} (const {\b TestInfo} *test_info){\bkmkstart AAAAAAACGV}
{\bkmkend AAAAAAACGV}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
TestingVector Class Reference\par \pard\plain 
{\tc\tcl2 \v TestingVector}
{\xe \v TestingVector}
{\bkmkstart AAAAAAABOF}
{\bkmkend AAAAAAABOF}
Inheritance diagram for TestingVector:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_testing_vector.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
TestListener Class Reference\par \pard\plain 
{\tc\tcl2 \v TestListener}
{\xe \v TestListener}
{\bkmkstart AAAAAAABOG}
{\bkmkend AAAAAAABOG}
Inheritance diagram for TestListener:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_test_listener.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestListener} (int *on_start_counter, bool *is_destroyed){\bkmkstart AAAAAAABOH}
{\bkmkend AAAAAAABOH}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestProgramStart} (const {\b UnitTest} &) override\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v OnTestProgramStart\:TestListener}
{\xe \v TestListener\:OnTestProgramStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void TestListener::OnTestProgramStart (const {\b UnitTest} & ){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABOI}
{\bkmkend AAAAAAABOI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::EmptyTestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABMU \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TestMetaFactory< TestSuite > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TestMetaFactory< TestSuite >}
{\xe \v testing::internal::TestMetaFactory< TestSuite >}
{\bkmkstart AAAAAAADQA}
{\bkmkend AAAAAAADQA}
Inheritance diagram for testing::internal::TestMetaFactory< TestSuite >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_test_meta_factory.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b ParamType} = typename TestSuite::ParamType{\bkmkstart AAAAAAADQB}
{\bkmkend AAAAAAADQB}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TestFactoryBase} * {\b CreateTestFactory} (ParamType parameter) override\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v CreateTestFactory\:testing::internal::TestMetaFactory< TestSuite >}
{\xe \v testing::internal::TestMetaFactory< TestSuite >\:CreateTestFactory}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class {\b TestSuite} > {\b TestFactoryBase} * {\b testing::internal::TestMetaFactory}< {\b TestSuite} >::CreateTestFactory (ParamType  {\i parameter}){\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADQC}
{\bkmkend AAAAAAADQC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::internal::TestMetaFactoryBase< TestSuite::ParamType >} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAADQD \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-param-util.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TestMetaFactoryBase< ParamType > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TestMetaFactoryBase< ParamType >}
{\xe \v testing::internal::TestMetaFactoryBase< ParamType >}
{\bkmkstart AAAAAAADQD}
{\bkmkend AAAAAAADQD}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual {\b TestFactoryBase} * {\b CreateTestFactory} (ParamType parameter)=0{\bkmkstart AAAAAAADQE}
{\bkmkend AAAAAAADQE}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-param-util.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::TestParamInfo< ParamType > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::TestParamInfo< ParamType >}
{\xe \v testing::TestParamInfo< ParamType >}
{\bkmkstart AAAAAAACGW}
{\bkmkend AAAAAAACGW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestParamInfo} (const ParamType &a_param, size_t an_index){\bkmkstart AAAAAAACGX}
{\bkmkend AAAAAAACGX}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

ParamType {\b param}{\bkmkstart AAAAAAACGY}
{\bkmkend AAAAAAACGY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

size_t {\b index}{\bkmkstart AAAAAAACGZ}
{\bkmkend AAAAAAACGZ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-param-util.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::TestProperty Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::TestProperty}
{\xe \v testing::TestProperty}
{\bkmkstart AAAAAAACHA}
{\bkmkend AAAAAAACHA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestProperty} (const std::string &a_key, const std::string &a_value){\bkmkstart AAAAAAACHB}
{\bkmkend AAAAAAACHB}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b key} () const{\bkmkstart AAAAAAACHC}
{\bkmkend AAAAAAACHC}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b value} () const{\bkmkstart AAAAAAACHD}
{\bkmkend AAAAAAACHD}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b SetValue} (const std::string &new_value){\bkmkstart AAAAAAACHE}
{\bkmkend AAAAAAACHE}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TestPropertyKeyIs Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TestPropertyKeyIs}
{\xe \v testing::internal::TestPropertyKeyIs}
{\bkmkstart AAAAAAADQF}
{\bkmkend AAAAAAADQF}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestPropertyKeyIs} (const std::string &key){\bkmkstart AAAAAAADQG}
{\bkmkend AAAAAAADQG}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b operator()} (const {\b TestProperty} &test_property) const{\bkmkstart AAAAAAADQH}
{\bkmkend AAAAAAADQH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest-internal-inl.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::TestResult Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::TestResult}
{\xe \v testing::TestResult}
{\bkmkstart AAAAAAACHF}
{\bkmkend AAAAAAACHF}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b total_part_count} () const{\bkmkstart AAAAAAACHG}
{\bkmkend AAAAAAACHG}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b test_property_count} () const{\bkmkstart AAAAAAACHH}
{\bkmkend AAAAAAACHH}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b Passed} () const{\bkmkstart AAAAAAACHI}
{\bkmkend AAAAAAACHI}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b Skipped} () const{\bkmkstart AAAAAAACHJ}
{\bkmkend AAAAAAACHJ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b Failed} () const{\bkmkstart AAAAAAACHK}
{\bkmkend AAAAAAACHK}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b HasFatalFailure} () const{\bkmkstart AAAAAAACHL}
{\bkmkend AAAAAAACHL}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b HasNonfatalFailure} () const{\bkmkstart AAAAAAACHM}
{\bkmkend AAAAAAACHM}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

TimeInMillis {\b elapsed_time} () const{\bkmkstart AAAAAAACHN}
{\bkmkend AAAAAAACHN}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

TimeInMillis {\b start_timestamp} () const{\bkmkstart AAAAAAACHO}
{\bkmkend AAAAAAACHO}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const TestPartResult & {\b GetTestPartResult} (int i) const{\bkmkstart AAAAAAACHP}
{\bkmkend AAAAAAACHP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b TestProperty} & {\b GetTestProperty} (int i) const{\bkmkstart AAAAAAACHQ}
{\bkmkend AAAAAAACHQ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b TestInfo}{\bkmkstart AAAAAAACHR}
{\bkmkend AAAAAAACHR}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b TestSuite}{\bkmkstart AAAAAAACHS}
{\bkmkend AAAAAAACHS}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b UnitTest}{\bkmkstart AAAAAAACHT}
{\bkmkend AAAAAAACHT}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b internal::DefaultGlobalTestPartResultReporter}{\bkmkstart AAAAAAACHU}
{\bkmkend AAAAAAACHU}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b internal::ExecDeathTest}{\bkmkstart AAAAAAACHV}
{\bkmkend AAAAAAACHV}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b internal::TestResultAccessor}{\bkmkstart AAAAAAACHW}
{\bkmkend AAAAAAACHW}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b internal::UnitTestImpl}{\bkmkstart AAAAAAACHX}
{\bkmkend AAAAAAACHX}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b internal::WindowsDeathTest}{\bkmkstart AAAAAAACHY}
{\bkmkend AAAAAAACHY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b internal::FuchsiaDeathTest}{\bkmkstart AAAAAAACHZ}
{\bkmkend AAAAAAACHZ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TestResultAccessor Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TestResultAccessor}
{\xe \v testing::internal::TestResultAccessor}
{\bkmkstart AAAAAAADQI}
{\bkmkend AAAAAAADQI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b RecordProperty} ({\b TestResult} *test_result, const std::string &xml_element, const {\b TestProperty} &property){\bkmkstart AAAAAAADQJ}
{\bkmkend AAAAAAADQJ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b ClearTestPartResults} ({\b TestResult} *test_result){\bkmkstart AAAAAAADQK}
{\bkmkend AAAAAAADQK}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const std::vector< testing::TestPartResult > & {\b test_part_results} (const {\b TestResult} &test_result){\bkmkstart AAAAAAADQL}
{\bkmkend AAAAAAADQL}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest-internal-inl.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::TestSuite Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::TestSuite}
{\xe \v testing::TestSuite}
{\bkmkstart AAAAAAACIA}
{\bkmkend AAAAAAACIA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestSuite} (const char *name, const char *a_type_param, internal::SetUpTestSuiteFunc set_up_tc, internal::TearDownTestSuiteFunc tear_down_tc){\bkmkstart AAAAAAACIB}
{\bkmkend AAAAAAACIB}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b name} () const{\bkmkstart AAAAAAACIC}
{\bkmkend AAAAAAACIC}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b type_param} () const{\bkmkstart AAAAAAACID}
{\bkmkend AAAAAAACID}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b should_run} () const{\bkmkstart AAAAAAACIE}
{\bkmkend AAAAAAACIE}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b successful_test_count} () const{\bkmkstart AAAAAAACIF}
{\bkmkend AAAAAAACIF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b skipped_test_count} () const{\bkmkstart AAAAAAACIG}
{\bkmkend AAAAAAACIG}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b failed_test_count} () const{\bkmkstart AAAAAAACIH}
{\bkmkend AAAAAAACIH}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b reportable_disabled_test_count} () const{\bkmkstart AAAAAAACII}
{\bkmkend AAAAAAACII}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b disabled_test_count} () const{\bkmkstart AAAAAAACIJ}
{\bkmkend AAAAAAACIJ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b reportable_test_count} () const{\bkmkstart AAAAAAACIK}
{\bkmkend AAAAAAACIK}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b test_to_run_count} () const{\bkmkstart AAAAAAACIL}
{\bkmkend AAAAAAACIL}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b total_test_count} () const{\bkmkstart AAAAAAACIM}
{\bkmkend AAAAAAACIM}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b Passed} () const{\bkmkstart AAAAAAACIN}
{\bkmkend AAAAAAACIN}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b Failed} () const{\bkmkstart AAAAAAACIO}
{\bkmkend AAAAAAACIO}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

TimeInMillis {\b elapsed_time} () const{\bkmkstart AAAAAAACIP}
{\bkmkend AAAAAAACIP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

TimeInMillis {\b start_timestamp} () const{\bkmkstart AAAAAAACIQ}
{\bkmkend AAAAAAACIQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b TestInfo} * {\b GetTestInfo} (int i) const{\bkmkstart AAAAAAACIR}
{\bkmkend AAAAAAACIR}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b TestResult} & {\b ad_hoc_test_result} () const{\bkmkstart AAAAAAACIS}
{\bkmkend AAAAAAACIS}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b Test}{\bkmkstart AAAAAAACIT}
{\bkmkend AAAAAAACIT}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b internal::UnitTestImpl}{\bkmkstart AAAAAAACIU}
{\bkmkend AAAAAAACIU}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TestSuiteNameIs Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TestSuiteNameIs}
{\xe \v testing::internal::TestSuiteNameIs}
{\bkmkstart AAAAAAADQM}
{\bkmkend AAAAAAADQM}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestSuiteNameIs} (const std::string &name){\bkmkstart AAAAAAADQN}
{\bkmkend AAAAAAADQN}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b operator()} (const {\b TestSuite} *test_suite) const{\bkmkstart AAAAAAADQO}
{\bkmkend AAAAAAADQO}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
TestSuiteThatFailsToSetUp Class Reference\par \pard\plain 
{\tc\tcl2 \v TestSuiteThatFailsToSetUp}
{\xe \v TestSuiteThatFailsToSetUp}
{\bkmkstart AAAAAAABOJ}
{\bkmkend AAAAAAABOJ}
Inheritance diagram for TestSuiteThatFailsToSetUp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_test_suite_that_fails_to_set_up.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b SetUpTestSuite} (){\bkmkstart AAAAAAABOK}
{\bkmkend AAAAAAABOK}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-output-test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TestSuiteWithCommentTest< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TestSuiteWithCommentTest< T >}
{\xe \v testing::internal::TestSuiteWithCommentTest< T >}
{\bkmkstart AAAAAAADQP}
{\bkmkend AAAAAAADQP}
Inheritance diagram for testing::internal::TestSuiteWithCommentTest< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_test_suite_with_comment_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest-unittest-api_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::TestWithParam< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::TestWithParam< T >}
{\xe \v testing::TestWithParam< T >}
{\bkmkstart AAAAAAACIV}
{\bkmkend AAAAAAACIV}
Inheritance diagram for testing::TestWithParam< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_test_with_param.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ThisRefAdjuster< Pattern > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ThisRefAdjuster< Pattern >}
{\xe \v testing::internal::ThisRefAdjuster< Pattern >}
{\bkmkstart AAAAAAADQQ}
{\bkmkend AAAAAAADQQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > using {\b AdjustT} = typename std::conditional< std::is_const< typename std::remove_reference< Pattern >::type >::value, typename std::conditional< std::is_lvalue_reference< Pattern >::value, const T &, const T && >::type, typename std::conditional< std::is_lvalue_reference< Pattern >::value, T &, T && >::type >::type{\bkmkstart AAAAAAADQR}
{\bkmkend AAAAAAADQR}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename MockType > static AdjustT< MockType > {\b Adjust} (const MockType &mock){\bkmkstart AAAAAAADQS}
{\bkmkend AAAAAAADQS}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-function-mocker.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ThreadLocal< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ThreadLocal< T >}
{\xe \v testing::internal::ThreadLocal< T >}
{\bkmkstart AAAAAAADQT}
{\bkmkend AAAAAAADQT}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ThreadLocal} (const T &value){\bkmkstart AAAAAAADQU}
{\bkmkend AAAAAAADQU}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T * {\b pointer} (){\bkmkstart AAAAAAADQV}
{\bkmkend AAAAAAADQV}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const T * {\b pointer} () const{\bkmkstart AAAAAAADQW}
{\bkmkend AAAAAAADQW}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const T & {\b get} () const{\bkmkstart AAAAAAADQX}
{\bkmkend AAAAAAADQX}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b set} (const T &value){\bkmkstart AAAAAAADQY}
{\bkmkend AAAAAAADQY}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-port.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ThrowListener Class Reference\par \pard\plain 
{\tc\tcl2 \v ThrowListener}
{\xe \v ThrowListener}
{\bkmkstart AAAAAAABOL}
{\bkmkend AAAAAAABOL}
Inheritance diagram for ThrowListener:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_throw_listener.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_assert_by_exception_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
googletest-throw-on-failure-test.ThrowOnFailureTest Class Reference\par \pard\plain 
{\tc\tcl2 \v googletest-throw-on-failure-test.ThrowOnFailureTest}
{\xe \v googletest-throw-on-failure-test.ThrowOnFailureTest}
{\bkmkstart AAAAAAABWO}
{\bkmkend AAAAAAABWO}
Inheritance diagram for googletest-throw-on-failure-test.ThrowOnFailureTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgoogletest-throw-on-failure-test_1_1_throw_on_failure_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b RunAndVerify} (self, env_var_value, flag_value, should_fail)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testDefaultBehavior} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testThrowOnFailureEnvVar} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testThrowOnFailureFlag} (self)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testThrowOnFailureFlagOverridesEnvVar} (self)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the throw-on-failure mode.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v RunAndVerify\:googletest-throw-on-failure-test.ThrowOnFailureTest}
{\xe \v googletest-throw-on-failure-test.ThrowOnFailureTest\:RunAndVerify}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-throw-on-failure-test.ThrowOnFailureTest.RunAndVerify (  {\i self},   {\i env_var_value},   {\i flag_value},   {\i should_fail})}}
\par
{\bkmkstart AAAAAAABWP}
{\bkmkend AAAAAAABWP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Runs googletest-throw-on-failure-test_ and verifies that it does\par
(or does not) exit with a non-zero code.\par
\par
Args:\par
  env_var_value:    value of the GTEST_BREAK_ON_FAILURE environment\par
                    variable; None if the variable should be unset.\par
  flag_value:       value of the --gtest_break_on_failure flag;\par
                    None if the flag should not be present.\par
  should_fail:      True if and only if the program is expected to fail.\par
}
 \par
}}
{\xe \v testDefaultBehavior\:googletest-throw-on-failure-test.ThrowOnFailureTest}
{\xe \v googletest-throw-on-failure-test.ThrowOnFailureTest\:testDefaultBehavior}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-throw-on-failure-test.ThrowOnFailureTest.testDefaultBehavior (  {\i self})}}
\par
{\bkmkstart AAAAAAABWQ}
{\bkmkend AAAAAAABWQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the behavior of the default mode.}
 \par
}}
{\xe \v testThrowOnFailureEnvVar\:googletest-throw-on-failure-test.ThrowOnFailureTest}
{\xe \v googletest-throw-on-failure-test.ThrowOnFailureTest\:testThrowOnFailureEnvVar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-throw-on-failure-test.ThrowOnFailureTest.testThrowOnFailureEnvVar (  {\i self})}}
\par
{\bkmkstart AAAAAAABWR}
{\bkmkend AAAAAAABWR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests using the GTEST_THROW_ON_FAILURE environment variable.}
 \par
}}
{\xe \v testThrowOnFailureFlag\:googletest-throw-on-failure-test.ThrowOnFailureTest}
{\xe \v googletest-throw-on-failure-test.ThrowOnFailureTest\:testThrowOnFailureFlag}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-throw-on-failure-test.ThrowOnFailureTest.testThrowOnFailureFlag (  {\i self})}}
\par
{\bkmkstart AAAAAAABWS}
{\bkmkend AAAAAAABWS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests using the --gtest_throw_on_failure flag.}
 \par
}}
{\xe \v testThrowOnFailureFlagOverridesEnvVar\:googletest-throw-on-failure-test.ThrowOnFailureTest}
{\xe \v googletest-throw-on-failure-test.ThrowOnFailureTest\:testThrowOnFailureFlagOverridesEnvVar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def googletest-throw-on-failure-test.ThrowOnFailureTest.testThrowOnFailureFlagOverridesEnvVar (  {\i self})}}
\par
{\bkmkstart AAAAAAABWT}
{\bkmkend AAAAAAABWT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests that --gtest_throw_on_failure overrides GTEST_THROW_ON_FAILURE.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-throw-on-failure-test.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Timer Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Timer}
{\xe \v testing::internal::Timer}
{\bkmkstart AAAAAAADQZ}
{\bkmkend AAAAAAADQZ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

TimeInMillis {\b Elapsed} (){\bkmkstart AAAAAAADRA}
{\bkmkend AAAAAAADRA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::To Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::To}
{\xe \v testing::internal::To}
{\bkmkstart AAAAAAADRB}
{\bkmkend AAAAAAADRB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b To} (bool *converted){\bkmkstart AAAAAAADRC}
{\bkmkend AAAAAAADRC}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-port-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TraceInfo Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TraceInfo}
{\xe \v testing::internal::TraceInfo}
{\bkmkstart AAAAAAADRD}
{\bkmkend AAAAAAADRD}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b file}{\bkmkstart AAAAAAADRE}
{\bkmkend AAAAAAADRE}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b line}{\bkmkstart AAAAAAADRF}
{\bkmkend AAAAAAADRF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::string {\b message}{\bkmkstart AAAAAAADRG}
{\bkmkend AAAAAAADRG}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest-internal-inl.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
library2::TrimmedTest< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v library2::TrimmedTest< T >}
{\xe \v library2::TrimmedTest< T >}
{\bkmkstart AAAAAAABYP}
{\bkmkend AAAAAAABYP}
Inheritance diagram for library2::TrimmedTest< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classlibrary2_1_1_trimmed_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest-typed-test_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TrueWithString Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TrueWithString}
{\xe \v testing::internal::TrueWithString}
{\bkmkstart AAAAAAADRH}
{\bkmkend AAAAAAADRH}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TrueWithString} (const char *str){\bkmkstart AAAAAAADRI}
{\bkmkend AAAAAAADRI}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TrueWithString} (const std::string &str){\bkmkstart AAAAAAADRJ}
{\bkmkend AAAAAAADRJ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b operator bool} () const{\bkmkstart AAAAAAADRK}
{\bkmkend AAAAAAADRK}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::string {\b value}{\bkmkstart AAAAAAADRL}
{\bkmkend AAAAAAADRL}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tuple_size< testing::internal::FlatTuple< Ts... > > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tuple_size< testing::internal::FlatTuple< Ts... > >}
{\xe \v std::tuple_size< testing::internal::FlatTuple< Ts... > >}
{\bkmkstart AAAAAAABYX}
{\bkmkend AAAAAAABYX}
Inheritance diagram for std::tuple_size< testing::internal::FlatTuple< Ts... > >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structstd_1_1tuple__size_3_01testing_1_1internal_1_1_flat_tuple_3_01_ts_8_8_8_01_4_01_4.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
TypedTest< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v TypedTest< T >}
{\xe \v TypedTest< T >}
{\bkmkstart AAAAAAABOM}
{\bkmkend AAAAAAABOM}
Inheritance diagram for TypedTest< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_typed_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-list-tests-unittest_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
TypedTest1< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v TypedTest1< T >}
{\xe \v TypedTest1< T >}
{\bkmkstart AAAAAAABON}
{\bkmkend AAAAAAABON}
Inheritance diagram for TypedTest1< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_typed_test1.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest-typed-test_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
TypedTest2< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v TypedTest2< T >}
{\xe \v TypedTest2< T >}
{\bkmkstart AAAAAAABOO}
{\bkmkend AAAAAAABOO}
Inheritance diagram for TypedTest2< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_typed_test2.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest-typed-test_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
TypedTestNames Class Reference\par \pard\plain 
{\tc\tcl2 \v TypedTestNames}
{\xe \v TypedTestNames}
{\bkmkstart AAAAAAABOP}
{\bkmkend AAAAAAABOP}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > static std::string {\b GetName} (int i){\bkmkstart AAAAAAABOQ}
{\bkmkend AAAAAAABOQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > static std::string {\b GetName} (int i){\bkmkstart AAAAAAABOQ}
{\bkmkend AAAAAAABOQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-output-test_.cc\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest-typed-test_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
TypedTestP< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v TypedTestP< T >}
{\xe \v TypedTestP< T >}
{\bkmkstart AAAAAAABOR}
{\bkmkend AAAAAAABOR}
Inheritance diagram for TypedTestP< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_typed_test_p.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-output-test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
TypedTestP1< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v TypedTestP1< T >}
{\xe \v TypedTestP1< T >}
{\bkmkstart AAAAAAABOS}
{\bkmkend AAAAAAABOS}
Inheritance diagram for TypedTestP1< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_typed_test_p1.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest-typed-test_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
TypedTestP2< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v TypedTestP2< T >}
{\xe \v TypedTestP2< T >}
{\bkmkstart AAAAAAABOT}
{\bkmkend AAAAAAABOT}
Inheritance diagram for TypedTestP2< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_typed_test_p2.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest-typed-test_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
TypedTestPNames Class Reference\par \pard\plain 
{\tc\tcl2 \v TypedTestPNames}
{\xe \v TypedTestPNames}
{\bkmkstart AAAAAAABOU}
{\bkmkend AAAAAAABOU}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > static std::string {\b GetName} (int i){\bkmkstart AAAAAAABOV}
{\bkmkend AAAAAAABOV}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-output-test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
TypedTestSuitePStateTest Class Reference\par \pard\plain 
{\tc\tcl2 \v TypedTestSuitePStateTest}
{\xe \v TypedTestSuitePStateTest}
{\bkmkstart AAAAAAABOW}
{\bkmkend AAAAAAABOW}
Inheritance diagram for TypedTestSuitePStateTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_typed_test_suite_p_state_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SetUp} () override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

TypedTestSuitePState {\b state_}{\bkmkstart AAAAAAABOX}
{\bkmkend AAAAAAABOX}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v SetUp\:TypedTestSuitePStateTest}
{\xe \v TypedTestSuitePStateTest\:SetUp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void TypedTestSuitePStateTest::SetUp (){\f2 [inline]}, {\f2 [override]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABOY}
{\bkmkend AAAAAAABOY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::Test} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest-typed-test_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
TypedTestWithNames< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v TypedTestWithNames< T >}
{\xe \v TypedTestWithNames< T >}
{\bkmkstart AAAAAAABOZ}
{\bkmkend AAAAAAABOZ}
Inheritance diagram for TypedTestWithNames< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_typed_test_with_names.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-output-test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TypeIdHelper< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TypeIdHelper< T >}
{\xe \v testing::internal::TypeIdHelper< T >}
{\bkmkstart AAAAAAADRM}
{\bkmkend AAAAAAADRM}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b dummy_} = false{\bkmkstart AAAAAAADRN}
{\bkmkend AAAAAAADRN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TypeParameterizedTest< Fixture, TestSel, Types > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TypeParameterizedTest< Fixture, TestSel, Types >}
{\xe \v testing::internal::TypeParameterizedTest< Fixture, TestSel, Types >}
{\bkmkstart AAAAAAADRO}
{\bkmkend AAAAAAADRO}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b Register} (const char *prefix, const {\b CodeLocation} &code_location, const char *case_name, const char *test_names, int index, const std::vector< std::string > &type_names=GenerateNames< {\b DefaultNameGenerator}, {\b Types} >()){\bkmkstart AAAAAAADRP}
{\bkmkend AAAAAAADRP}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TypeParameterizedTest< Fixture, TestSel, internal::None > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TypeParameterizedTest< Fixture, TestSel, internal::None >}
{\xe \v testing::internal::TypeParameterizedTest< Fixture, TestSel, internal::None >}
{\bkmkstart AAAAAAADRQ}
{\bkmkend AAAAAAADRQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b Register} (const char *, const {\b CodeLocation} &, const char *, const char *, int, const std::vector< std::string > &=std::vector< std::string >()){\bkmkstart AAAAAAADRR}
{\bkmkend AAAAAAADRR}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TypeParameterizedTestSuite< Fixture, Tests, Types > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TypeParameterizedTestSuite< Fixture, Tests, Types >}
{\xe \v testing::internal::TypeParameterizedTestSuite< Fixture, Tests, Types >}
{\bkmkstart AAAAAAADRS}
{\bkmkend AAAAAAADRS}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b Register} (const char *prefix, {\b CodeLocation} code_location, const TypedTestSuitePState *state, const char *case_name, const char *test_names, const std::vector< std::string > &type_names=GenerateNames< {\b DefaultNameGenerator}, {\b Types} >()){\bkmkstart AAAAAAADRT}
{\bkmkend AAAAAAADRT}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
TypeParameterizedTestSuite< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v TypeParameterizedTestSuite< T >}
{\xe \v TypeParameterizedTestSuite< T >}
{\bkmkstart AAAAAAABPA}
{\bkmkend AAAAAAABPA}
Inheritance diagram for TypeParameterizedTestSuite< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_type_parameterized_test_suite.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_list_output_unittest_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TypeParameterizedTestSuite< Fixture, internal::None, Types > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TypeParameterizedTestSuite< Fixture, internal::None, Types >}
{\xe \v testing::internal::TypeParameterizedTestSuite< Fixture, internal::None, Types >}
{\bkmkstart AAAAAAADRU}
{\bkmkend AAAAAAADRU}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b Register} (const char *, const {\b CodeLocation} &, const TypedTestSuitePState *, const char *, const char *, const std::vector< std::string > &=std::vector< std::string >()){\bkmkstart AAAAAAADRV}
{\bkmkend AAAAAAADRV}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TypeParameterizedTestSuiteRegistry Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TypeParameterizedTestSuiteRegistry}
{\xe \v testing::internal::TypeParameterizedTestSuiteRegistry}
{\bkmkstart AAAAAAADRW}
{\bkmkend AAAAAAADRW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b RegisterTestSuite} (const char *test_suite_name, {\b CodeLocation} code_location){\bkmkstart AAAAAAADRX}
{\bkmkend AAAAAAADRX}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b RegisterInstantiation} (const char *test_suite_name){\bkmkstart AAAAAAADRY}
{\bkmkend AAAAAAADRY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b CheckForInstantiations} (){\bkmkstart AAAAAAADRZ}
{\bkmkend AAAAAAADRZ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-param-util.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
TypeParametrizedTestNames Class Reference\par \pard\plain 
{\tc\tcl2 \v TypeParametrizedTestNames}
{\xe \v TypeParametrizedTestNames}
{\bkmkstart AAAAAAABPB}
{\bkmkend AAAAAAABPB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > static std::string {\b GetName} (int i){\bkmkstart AAAAAAABPC}
{\bkmkend AAAAAAABPC}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest-typed-test_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
TypeParametrizedTestWithNames< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v TypeParametrizedTestWithNames< T >}
{\xe \v TypeParametrizedTestWithNames< T >}
{\bkmkstart AAAAAAABPD}
{\bkmkend AAAAAAABPD}
Inheritance diagram for TypeParametrizedTestWithNames< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_type_parametrized_test_with_names.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest-typed-test_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
TypeParamTest< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v TypeParamTest< T >}
{\xe \v TypeParamTest< T >}
{\bkmkstart AAAAAAABPE}
{\bkmkend AAAAAAABPE}
Inheritance diagram for TypeParamTest< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_type_param_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-list-tests-unittest_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Types< Head_, Tail_ > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Types< Head_, Tail_ >}
{\xe \v testing::internal::Types< Head_, Tail_ >}
{\bkmkstart AAAAAAADSA}
{\bkmkend AAAAAAADSA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b Head} = Head_{\bkmkstart AAAAAAADSB}
{\bkmkend AAAAAAADSB}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b Tail} = {\b Types}< Tail_... >{\bkmkstart AAAAAAADSC}
{\bkmkend AAAAAAADSC}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-type-util.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Types< Head_ > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Types< Head_ >}
{\xe \v testing::internal::Types< Head_ >}
{\bkmkstart AAAAAAADSD}
{\bkmkend AAAAAAADSD}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b Head} = Head_{\bkmkstart AAAAAAADSE}
{\bkmkend AAAAAAADSE}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b Tail} = {\b None}{\bkmkstart AAAAAAADSF}
{\bkmkend AAAAAAADSF}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-type-util.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TypeWithSize< size > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TypeWithSize< size >}
{\xe \v testing::internal::TypeWithSize< size >}
{\bkmkstart AAAAAAADSG}
{\bkmkend AAAAAAADSG}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b UInt} = void{\bkmkstart AAAAAAADSH}
{\bkmkend AAAAAAADSH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-port.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TypeWithSize< 4 > Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TypeWithSize< 4 >}
{\xe \v testing::internal::TypeWithSize< 4 >}
{\bkmkstart AAAAAAADSI}
{\bkmkend AAAAAAADSI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b Int} = std::int32_t{\bkmkstart AAAAAAADSJ}
{\bkmkend AAAAAAADSJ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b UInt} = std::uint32_t{\bkmkstart AAAAAAADSK}
{\bkmkend AAAAAAADSK}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-port.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TypeWithSize< 8 > Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TypeWithSize< 8 >}
{\xe \v testing::internal::TypeWithSize< 8 >}
{\bkmkstart AAAAAAADSL}
{\bkmkend AAAAAAADSL}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b Int} = std::int64_t{\bkmkstart AAAAAAADSM}
{\bkmkend AAAAAAADSM}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

using {\b UInt} = std::uint64_t{\bkmkstart AAAAAAADSN}
{\bkmkend AAAAAAADSN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-port.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_more_actions_test::UnaryFunctor Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_more_actions_test::UnaryFunctor}
{\xe \v testing::gmock_more_actions_test::UnaryFunctor}
{\bkmkstart AAAAAAACSI}
{\bkmkend AAAAAAACSI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b operator()} (bool x){\bkmkstart AAAAAAACSJ}
{\bkmkend AAAAAAACSJ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/test/gmock-more-actions_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::UnitTest Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::UnitTest}
{\xe \v testing::UnitTest}
{\bkmkstart AAAAAAACIW}
{\bkmkend AAAAAAACIW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b Run} () GTEST_MUST_USE_RESULT_{\bkmkstart AAAAAAACIX}
{\bkmkend AAAAAAACIX}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b original_working_dir} () const{\bkmkstart AAAAAAACIY}
{\bkmkend AAAAAAACIY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b TestSuite} * {\b current_test_suite} () const GTEST_LOCK_EXCLUDED_(mutex_){\bkmkstart AAAAAAACIZ}
{\bkmkend AAAAAAACIZ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b TestCase} * {\b current_test_case} () const GTEST_LOCK_EXCLUDED_(mutex_){\bkmkstart AAAAAAACJA}
{\bkmkend AAAAAAACJA}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b TestInfo} * {\b current_test_info} () const GTEST_LOCK_EXCLUDED_(mutex_){\bkmkstart AAAAAAACJB}
{\bkmkend AAAAAAACJB}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b random_seed} () const{\bkmkstart AAAAAAACJC}
{\bkmkend AAAAAAACJC}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b internal::ParameterizedTestSuiteRegistry} & {\b parameterized_test_registry} () GTEST_LOCK_EXCLUDED_(mutex_){\bkmkstart AAAAAAACJD}
{\bkmkend AAAAAAACJD}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b successful_test_suite_count} () const{\bkmkstart AAAAAAACJE}
{\bkmkend AAAAAAACJE}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b failed_test_suite_count} () const{\bkmkstart AAAAAAACJF}
{\bkmkend AAAAAAACJF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b total_test_suite_count} () const{\bkmkstart AAAAAAACJG}
{\bkmkend AAAAAAACJG}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b test_suite_to_run_count} () const{\bkmkstart AAAAAAACJH}
{\bkmkend AAAAAAACJH}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b successful_test_case_count} () const{\bkmkstart AAAAAAACJI}
{\bkmkend AAAAAAACJI}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b failed_test_case_count} () const{\bkmkstart AAAAAAACJJ}
{\bkmkend AAAAAAACJJ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b total_test_case_count} () const{\bkmkstart AAAAAAACJK}
{\bkmkend AAAAAAACJK}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b test_case_to_run_count} () const{\bkmkstart AAAAAAACJL}
{\bkmkend AAAAAAACJL}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b successful_test_count} () const{\bkmkstart AAAAAAACJM}
{\bkmkend AAAAAAACJM}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b skipped_test_count} () const{\bkmkstart AAAAAAACJN}
{\bkmkend AAAAAAACJN}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b failed_test_count} () const{\bkmkstart AAAAAAACJO}
{\bkmkend AAAAAAACJO}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b reportable_disabled_test_count} () const{\bkmkstart AAAAAAACJP}
{\bkmkend AAAAAAACJP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b disabled_test_count} () const{\bkmkstart AAAAAAACJQ}
{\bkmkend AAAAAAACJQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b reportable_test_count} () const{\bkmkstart AAAAAAACJR}
{\bkmkend AAAAAAACJR}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b total_test_count} () const{\bkmkstart AAAAAAACJS}
{\bkmkend AAAAAAACJS}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b test_to_run_count} () const{\bkmkstart AAAAAAACJT}
{\bkmkend AAAAAAACJT}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

TimeInMillis {\b start_timestamp} () const{\bkmkstart AAAAAAACJU}
{\bkmkend AAAAAAACJU}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

TimeInMillis {\b elapsed_time} () const{\bkmkstart AAAAAAACJV}
{\bkmkend AAAAAAACJV}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b Passed} () const{\bkmkstart AAAAAAACJW}
{\bkmkend AAAAAAACJW}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b Failed} () const{\bkmkstart AAAAAAACJX}
{\bkmkend AAAAAAACJX}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b TestSuite} * {\b GetTestSuite} (int i) const{\bkmkstart AAAAAAACJY}
{\bkmkend AAAAAAACJY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b TestCase} * {\b GetTestCase} (int i) const{\bkmkstart AAAAAAACJZ}
{\bkmkend AAAAAAACJZ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b TestResult} & {\b ad_hoc_test_result} () const{\bkmkstart AAAAAAACKA}
{\bkmkend AAAAAAACKA}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestEventListeners} & {\b listeners} (){\bkmkstart AAAAAAACKB}
{\bkmkend AAAAAAACKB}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b UnitTest} * {\b GetInstance} (){\bkmkstart AAAAAAACKC}
{\bkmkend AAAAAAACKC}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b ScopedTrace}{\bkmkstart AAAAAAACKD}
{\bkmkend AAAAAAACKD}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b Test}{\bkmkstart AAAAAAACKE}
{\bkmkend AAAAAAACKE}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b internal::AssertHelper}{\bkmkstart AAAAAAACKF}
{\bkmkend AAAAAAACKF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b internal::StreamingListenerTest}{\bkmkstart AAAAAAACKG}
{\bkmkend AAAAAAACKG}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b internal::UnitTestRecordPropertyTestHelper}{\bkmkstart AAAAAAACKH}
{\bkmkend AAAAAAACKH}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Environment} * {\b AddGlobalTestEnvironment} ({\b Environment} *env){\bkmkstart AAAAAAACKI}
{\bkmkend AAAAAAACKI}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::set< std::string > * {\b internal::GetIgnoredParameterizedTestSuites} (){\bkmkstart AAAAAAACKJ}
{\bkmkend AAAAAAACKJ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b internal::UnitTestImpl} * {\b internal::GetUnitTestImpl} (){\bkmkstart AAAAAAACKK}
{\bkmkend AAAAAAACKK}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b internal::ReportFailureInUnknownLocation} (TestPartResult::Type result_type, const std::string &message){\bkmkstart AAAAAAACKL}
{\bkmkend AAAAAAACKL}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UnitTestHelper Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UnitTestHelper}
{\xe \v testing::internal::UnitTestHelper}
{\bkmkstart AAAAAAADSO}
{\bkmkend AAAAAAADSO}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b TestSuite} const ** {\b GetSortedTestSuites} (){\bkmkstart AAAAAAADSP}
{\bkmkend AAAAAAADSP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const {\b TestSuite} * {\b FindTestSuite} (const char *name){\bkmkstart AAAAAAADSQ}
{\bkmkend AAAAAAADSQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b TestInfo} const ** {\b GetSortedTests} (const {\b TestSuite} *test_suite){\bkmkstart AAAAAAADSR}
{\bkmkend AAAAAAADSR}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest-unittest-api_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UnitTestImpl Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl}
{\bkmkstart AAAAAAADSS}
{\bkmkend AAAAAAADSS}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b ReactionToSharding} \{ {\b HONOR_SHARDING_PROTOCOL}
, {\b IGNORE_SHARDING_PROTOCOL}
 \}{\bkmkstart AAAAAAADST}
{\bkmkend AAAAAAADST}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b UnitTestImpl} ({\b UnitTest} *parent){\bkmkstart AAAAAAADSU}
{\bkmkend AAAAAAADSU}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

TestPartResultReporterInterface * {\b GetGlobalTestPartResultReporter} (){\bkmkstart AAAAAAADSV}
{\bkmkend AAAAAAADSV}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b SetGlobalTestPartResultReporter} (TestPartResultReporterInterface *reporter){\bkmkstart AAAAAAADSW}
{\bkmkend AAAAAAADSW}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

TestPartResultReporterInterface * {\b GetTestPartResultReporterForCurrentThread} (){\bkmkstart AAAAAAADSX}
{\bkmkend AAAAAAADSX}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b SetTestPartResultReporterForCurrentThread} (TestPartResultReporterInterface *reporter){\bkmkstart AAAAAAADSY}
{\bkmkend AAAAAAADSY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b successful_test_suite_count} () const{\bkmkstart AAAAAAADSZ}
{\bkmkend AAAAAAADSZ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b failed_test_suite_count} () const{\bkmkstart AAAAAAADTA}
{\bkmkend AAAAAAADTA}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b total_test_suite_count} () const{\bkmkstart AAAAAAADTB}
{\bkmkend AAAAAAADTB}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b test_suite_to_run_count} () const{\bkmkstart AAAAAAADTC}
{\bkmkend AAAAAAADTC}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b successful_test_count} () const{\bkmkstart AAAAAAADTD}
{\bkmkend AAAAAAADTD}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b skipped_test_count} () const{\bkmkstart AAAAAAADTE}
{\bkmkend AAAAAAADTE}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b failed_test_count} () const{\bkmkstart AAAAAAADTF}
{\bkmkend AAAAAAADTF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b reportable_disabled_test_count} () const{\bkmkstart AAAAAAADTG}
{\bkmkend AAAAAAADTG}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b disabled_test_count} () const{\bkmkstart AAAAAAADTH}
{\bkmkend AAAAAAADTH}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b reportable_test_count} () const{\bkmkstart AAAAAAADTI}
{\bkmkend AAAAAAADTI}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b total_test_count} () const{\bkmkstart AAAAAAADTJ}
{\bkmkend AAAAAAADTJ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b test_to_run_count} () const{\bkmkstart AAAAAAADTK}
{\bkmkend AAAAAAADTK}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

TimeInMillis {\b start_timestamp} () const{\bkmkstart AAAAAAADTL}
{\bkmkend AAAAAAADTL}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

TimeInMillis {\b elapsed_time} () const{\bkmkstart AAAAAAADTM}
{\bkmkend AAAAAAADTM}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b Passed} () const{\bkmkstart AAAAAAADTN}
{\bkmkend AAAAAAADTN}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b Failed} () const{\bkmkstart AAAAAAADTO}
{\bkmkend AAAAAAADTO}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b TestSuite} * {\b GetTestSuite} (int i) const{\bkmkstart AAAAAAADTP}
{\bkmkend AAAAAAADTP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b TestCase} * {\b GetTestCase} (int i) const{\bkmkstart AAAAAAADTQ}
{\bkmkend AAAAAAADTQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestSuite} * {\b GetMutableSuiteCase} (int i){\bkmkstart AAAAAAADTR}
{\bkmkend AAAAAAADTR}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestEventListeners} * {\b listeners} (){\bkmkstart AAAAAAADTS}
{\bkmkend AAAAAAADTS}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestResult} * {\b current_test_result} (){\bkmkstart AAAAAAADTT}
{\bkmkend AAAAAAADTT}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b TestResult} * {\b ad_hoc_test_result} () const{\bkmkstart AAAAAAADTU}
{\bkmkend AAAAAAADTU}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b set_os_stack_trace_getter} ({\b OsStackTraceGetterInterface} *getter){\bkmkstart AAAAAAADTV}
{\bkmkend AAAAAAADTV}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b OsStackTraceGetterInterface} * {\b os_stack_trace_getter} (){\bkmkstart AAAAAAADTW}
{\bkmkend AAAAAAADTW}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::string {\b CurrentOsStackTraceExceptTop} (int skip_count) GTEST_NO_INLINE_ GTEST_NO_TAIL_CALL_{\bkmkstart AAAAAAADTX}
{\bkmkend AAAAAAADTX}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestSuite} * {\b GetTestSuite} (const char *test_suite_name, const char *type_param, internal::SetUpTestSuiteFunc set_up_tc, internal::TearDownTestSuiteFunc tear_down_tc){\bkmkstart AAAAAAADTY}
{\bkmkend AAAAAAADTY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestCase} * {\b GetTestCase} (const char *test_case_name, const char *type_param, internal::SetUpTestSuiteFunc set_up_tc, internal::TearDownTestSuiteFunc tear_down_tc){\bkmkstart AAAAAAADTZ}
{\bkmkend AAAAAAADTZ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b AddTestInfo} (internal::SetUpTestSuiteFunc set_up_tc, internal::TearDownTestSuiteFunc tear_down_tc, {\b TestInfo} *test_info){\bkmkstart AAAAAAADUA}
{\bkmkend AAAAAAADUA}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b internal::ParameterizedTestSuiteRegistry} & {\b parameterized_test_registry} (){\bkmkstart AAAAAAADUB}
{\bkmkend AAAAAAADUB}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::set< std::string > * {\b ignored_parameterized_test_suites} (){\bkmkstart AAAAAAADUC}
{\bkmkend AAAAAAADUC}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b internal::TypeParameterizedTestSuiteRegistry} & {\b type_parameterized_test_registry} (){\bkmkstart AAAAAAADUD}
{\bkmkend AAAAAAADUD}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b set_current_test_suite} ({\b TestSuite} *a_current_test_suite){\bkmkstart AAAAAAADUE}
{\bkmkend AAAAAAADUE}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b set_current_test_info} ({\b TestInfo} *a_current_test_info){\bkmkstart AAAAAAADUF}
{\bkmkend AAAAAAADUF}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b RegisterParameterizedTests} (){\bkmkstart AAAAAAADUG}
{\bkmkend AAAAAAADUG}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b RunAllTests} (){\bkmkstart AAAAAAADUH}
{\bkmkend AAAAAAADUH}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b ClearNonAdHocTestResult} (){\bkmkstart AAAAAAADUI}
{\bkmkend AAAAAAADUI}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b ClearAdHocTestResult} (){\bkmkstart AAAAAAADUJ}
{\bkmkend AAAAAAADUJ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b RecordProperty} (const {\b TestProperty} &test_property){\bkmkstart AAAAAAADUK}
{\bkmkend AAAAAAADUK}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b FilterTests} (ReactionToSharding shard_tests){\bkmkstart AAAAAAADUL}
{\bkmkend AAAAAAADUL}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b ListTestsMatchingFilter} (){\bkmkstart AAAAAAADUM}
{\bkmkend AAAAAAADUM}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b TestSuite} * {\b current_test_suite} () const{\bkmkstart AAAAAAADUN}
{\bkmkend AAAAAAADUN}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestInfo} * {\b current_test_info} (){\bkmkstart AAAAAAADUO}
{\bkmkend AAAAAAADUO}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b TestInfo} * {\b current_test_info} () const{\bkmkstart AAAAAAADUP}
{\bkmkend AAAAAAADUP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::vector< {\b Environment} * > & {\b environments} (){\bkmkstart AAAAAAADUQ}
{\bkmkend AAAAAAADUQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::vector< {\b TraceInfo} > & {\b gtest_trace_stack} (){\bkmkstart AAAAAAADUR}
{\bkmkend AAAAAAADUR}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const std::vector< {\b TraceInfo} > & {\b gtest_trace_stack} () const{\bkmkstart AAAAAAADUS}
{\bkmkend AAAAAAADUS}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b ConfigureXmlOutput} (){\bkmkstart AAAAAAADUT}
{\bkmkend AAAAAAADUT}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b PostFlagParsingInit} (){\bkmkstart AAAAAAADUU}
{\bkmkend AAAAAAADUU}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b random_seed} () const{\bkmkstart AAAAAAADUV}
{\bkmkend AAAAAAADUV}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b internal::Random} * {\b random} (){\bkmkstart AAAAAAADUW}
{\bkmkend AAAAAAADUW}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b ShuffleTests} (){\bkmkstart AAAAAAADUX}
{\bkmkend AAAAAAADUX}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b UnshuffleTests} (){\bkmkstart AAAAAAADUY}
{\bkmkend AAAAAAADUY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b catch_exceptions} () const{\bkmkstart AAAAAAADUZ}
{\bkmkend AAAAAAADUZ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b ::testing::UnitTest}{\bkmkstart AAAAAAADVA}
{\bkmkend AAAAAAADVA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest-internal-inl.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UnitTestOptions Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UnitTestOptions}
{\xe \v testing::internal::UnitTestOptions}
{\bkmkstart AAAAAAADVB}
{\bkmkend AAAAAAADVB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static std::string {\b GetOutputFormat} (){\bkmkstart AAAAAAADVC}
{\bkmkend AAAAAAADVC}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static std::string {\b GetAbsolutePathToOutputFile} (){\bkmkstart AAAAAAADVD}
{\bkmkend AAAAAAADVD}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b FilterMatchesTest} (const std::string &test_suite_name, const std::string &test_name){\bkmkstart AAAAAAADVE}
{\bkmkend AAAAAAADVE}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b MatchesFilter} (const std::string &name, const char *filter){\bkmkstart AAAAAAADVF}
{\bkmkend AAAAAAADVF}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest-internal-inl.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UnitTestRecordPropertyTestHelper Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UnitTestRecordPropertyTestHelper}
{\xe \v testing::internal::UnitTestRecordPropertyTestHelper}
{\bkmkstart AAAAAAADVG}
{\bkmkend AAAAAAADVG}
Inheritance diagram for testing::internal::UnitTestRecordPropertyTestHelper:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_unit_test_record_property_test_helper.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b UnitTestRecordProperty} (const char *key, const std::string &value){\bkmkstart AAAAAAADVH}
{\bkmkend AAAAAAADVH}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b UnitTest} {\b unit_test_}{\bkmkstart AAAAAAADVI}
{\bkmkend AAAAAAADVI}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UniversalPrinter< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UniversalPrinter< T >}
{\xe \v testing::internal::UniversalPrinter< T >}
{\bkmkstart AAAAAAADVJ}
{\bkmkend AAAAAAADVJ}
Inheritance diagram for testing::internal::UniversalPrinter< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_universal_printer.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b Print} (const T &value, ::std::ostream *os){\bkmkstart AAAAAAADVK}
{\bkmkend AAAAAAADVK}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UniversalPrinter< const T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UniversalPrinter< const T >}
{\xe \v testing::internal::UniversalPrinter< const T >}
{\bkmkstart AAAAAAADVL}
{\bkmkend AAAAAAADVL}
Inheritance diagram for testing::internal::UniversalPrinter< const T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_universal_printer_3_01const_01_t_01_4.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UniversalPrinter< T & > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UniversalPrinter< T & >}
{\xe \v testing::internal::UniversalPrinter< T & >}
{\bkmkstart AAAAAAADVM}
{\bkmkend AAAAAAADVM}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b Print} (const T &value, ::std::ostream *os){\bkmkstart AAAAAAADVN}
{\bkmkend AAAAAAADVN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UniversalPrinter< T[N]> Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UniversalPrinter< T[N]>}
{\xe \v testing::internal::UniversalPrinter< T[N]>}
{\bkmkstart AAAAAAADVO}
{\bkmkend AAAAAAADVO}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b Print} (const T(&a)[N], ::std::ostream *os){\bkmkstart AAAAAAADVP}
{\bkmkend AAAAAAADVP}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UniversalPrinter< Wrapper< T > > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UniversalPrinter< Wrapper< T > >}
{\xe \v testing::internal::UniversalPrinter< Wrapper< T > >}
{\bkmkstart AAAAAAADVQ}
{\bkmkend AAAAAAADVQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b Print} (const Wrapper< T > &w, ::std::ostream *os){\bkmkstart AAAAAAADVR}
{\bkmkend AAAAAAADVR}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-printers-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UniversalTersePrinter< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UniversalTersePrinter< T >}
{\xe \v testing::internal::UniversalTersePrinter< T >}
{\bkmkstart AAAAAAADVS}
{\bkmkend AAAAAAADVS}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b Print} (const T &value, ::std::ostream *os){\bkmkstart AAAAAAADVT}
{\bkmkend AAAAAAADVT}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UniversalTersePrinter< char * > Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UniversalTersePrinter< char * >}
{\xe \v testing::internal::UniversalTersePrinter< char * >}
{\bkmkstart AAAAAAADVU}
{\bkmkend AAAAAAADVU}
Inheritance diagram for testing::internal::UniversalTersePrinter< char * >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_universal_terse_printer_3_01char_01_5_01_4.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UniversalTersePrinter< char16_t * > Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UniversalTersePrinter< char16_t * >}
{\xe \v testing::internal::UniversalTersePrinter< char16_t * >}
{\bkmkstart AAAAAAADVV}
{\bkmkend AAAAAAADVV}
Inheritance diagram for testing::internal::UniversalTersePrinter< char16_t * >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_universal_terse_printer_3_01char16__t_01_5_01_4.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UniversalTersePrinter< char32_t * > Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UniversalTersePrinter< char32_t * >}
{\xe \v testing::internal::UniversalTersePrinter< char32_t * >}
{\bkmkstart AAAAAAADVW}
{\bkmkend AAAAAAADVW}
Inheritance diagram for testing::internal::UniversalTersePrinter< char32_t * >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_universal_terse_printer_3_01char32__t_01_5_01_4.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UniversalTersePrinter< const char * > Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UniversalTersePrinter< const char * >}
{\xe \v testing::internal::UniversalTersePrinter< const char * >}
{\bkmkstart AAAAAAADVX}
{\bkmkend AAAAAAADVX}
Inheritance diagram for testing::internal::UniversalTersePrinter< const char * >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_universal_terse_printer_3_01const_01char_01_5_01_4.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b Print} (const char *str, ::std::ostream *os){\bkmkstart AAAAAAADVY}
{\bkmkend AAAAAAADVY}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UniversalTersePrinter< const char16_t * > Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UniversalTersePrinter< const char16_t * >}
{\xe \v testing::internal::UniversalTersePrinter< const char16_t * >}
{\bkmkstart AAAAAAADVZ}
{\bkmkend AAAAAAADVZ}
Inheritance diagram for testing::internal::UniversalTersePrinter< const char16_t * >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_universal_terse_printer_3_01const_01char16__t_01_5_01_4.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b Print} (const char16_t *str, ::std::ostream *os){\bkmkstart AAAAAAADWA}
{\bkmkend AAAAAAADWA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UniversalTersePrinter< const char32_t * > Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UniversalTersePrinter< const char32_t * >}
{\xe \v testing::internal::UniversalTersePrinter< const char32_t * >}
{\bkmkstart AAAAAAADWB}
{\bkmkend AAAAAAADWB}
Inheritance diagram for testing::internal::UniversalTersePrinter< const char32_t * >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_universal_terse_printer_3_01const_01char32__t_01_5_01_4.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b Print} (const char32_t *str, ::std::ostream *os){\bkmkstart AAAAAAADWC}
{\bkmkend AAAAAAADWC}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UniversalTersePrinter< T & > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UniversalTersePrinter< T & >}
{\xe \v testing::internal::UniversalTersePrinter< T & >}
{\bkmkstart AAAAAAADWD}
{\bkmkend AAAAAAADWD}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b Print} (const T &value, ::std::ostream *os){\bkmkstart AAAAAAADWE}
{\bkmkend AAAAAAADWE}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UniversalTersePrinter< T[N]> Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UniversalTersePrinter< T[N]>}
{\xe \v testing::internal::UniversalTersePrinter< T[N]>}
{\bkmkstart AAAAAAADWF}
{\bkmkend AAAAAAADWF}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b Print} (const T(&value)[N], ::std::ostream *os){\bkmkstart AAAAAAADWG}
{\bkmkend AAAAAAADWG}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UniversalTersePrinter< wchar_t * > Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UniversalTersePrinter< wchar_t * >}
{\xe \v testing::internal::UniversalTersePrinter< wchar_t * >}
{\bkmkstart AAAAAAADWH}
{\bkmkend AAAAAAADWH}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b Print} (wchar_t *str, ::std::ostream *os){\bkmkstart AAAAAAADWI}
{\bkmkend AAAAAAADWI}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
foo::UnprintableInFoo Class Reference\par \pard\plain 
{\tc\tcl2 \v foo::UnprintableInFoo}
{\xe \v foo::UnprintableInFoo}
{\bkmkstart AAAAAAABRH}
{\bkmkend AAAAAAABRH}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

double {\b z} () const{\bkmkstart AAAAAAABRI}
{\bkmkend AAAAAAABRI}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-printers-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
UnprintableTemplateInGlobal< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v UnprintableTemplateInGlobal< T >}
{\xe \v UnprintableTemplateInGlobal< T >}
{\bkmkstart AAAAAAABPF}
{\bkmkend AAAAAAABPF}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-printers-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Unstreamable Class Reference\par \pard\plain 
{\tc\tcl2 \v Unstreamable}
{\xe \v Unstreamable}
{\bkmkstart AAAAAAABPG}
{\bkmkend AAAAAAABPG}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Unstreamable} (int value){\bkmkstart AAAAAAABPH}
{\bkmkend AAAAAAABPH}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const int & {\b dummy_value} () const{\bkmkstart AAAAAAABPI}
{\bkmkend AAAAAAABPI}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-param-test-test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::DoAllAction< FinalAction >::UserConstructorTag Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::DoAllAction< FinalAction >::UserConstructorTag}
{\xe \v testing::internal::DoAllAction< FinalAction >::UserConstructorTag}
{\bkmkstart AAAAAAACYD}
{\bkmkend AAAAAAACYD}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::DoAllAction< InitialAction, OtherActions... >::UserConstructorTag Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::DoAllAction< InitialAction, OtherActions... >::UserConstructorTag}
{\xe \v testing::internal::DoAllAction< InitialAction, OtherActions... >::UserConstructorTag}
{\bkmkstart AAAAAAACYI}
{\bkmkend AAAAAAACYI}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ValueArray< Ts > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ValueArray< Ts >}
{\xe \v testing::internal::ValueArray< Ts >}
{\bkmkstart AAAAAAADWJ}
{\bkmkend AAAAAAADWJ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ValueArray} (Ts... v){\bkmkstart AAAAAAADWK}
{\bkmkend AAAAAAADWK}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > {\b operator ParamGenerator< T >} () const{\bkmkstart AAAAAAADWL}
{\bkmkend AAAAAAADWL}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-param-util.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ValueParamTest Class Reference\par \pard\plain 
{\tc\tcl2 \v ValueParamTest}
{\xe \v ValueParamTest}
{\bkmkstart AAAAAAABPJ}
{\bkmkend AAAAAAABPJ}
Inheritance diagram for ValueParamTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_value_param_test.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-list-tests-unittest_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ValuesInIteratorRangeGenerator< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ValuesInIteratorRangeGenerator< T >}
{\xe \v testing::internal::ValuesInIteratorRangeGenerator< T >}
{\bkmkstart AAAAAAADWM}
{\bkmkend AAAAAAADWM}
Inheritance diagram for testing::internal::ValuesInIteratorRangeGenerator< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_values_in_iterator_range_generator.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename ForwardIterator > {\b ValuesInIteratorRangeGenerator} (ForwardIterator begin, ForwardIterator end){\bkmkstart AAAAAAADWN}
{\bkmkend AAAAAAADWN}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ParamIteratorInterface}< T > * {\b Begin} () const override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ParamIteratorInterface}< T > * {\b End} () const override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v Begin\:testing::internal::ValuesInIteratorRangeGenerator< T >}
{\xe \v testing::internal::ValuesInIteratorRangeGenerator< T >\:Begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > {\b ParamIteratorInterface}< T > * {\b testing::internal::ValuesInIteratorRangeGenerator}< T >::Begin () const{\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADWO}
{\bkmkend AAAAAAADWO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::internal::ParamGeneratorInterface< T >} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACWA \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v End\:testing::internal::ValuesInIteratorRangeGenerator< T >}
{\xe \v testing::internal::ValuesInIteratorRangeGenerator< T >\:End}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > {\b ParamIteratorInterface}< T > * {\b testing::internal::ValuesInIteratorRangeGenerator}< T >::End () const{\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADWP}
{\bkmkend AAAAAAADWP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b testing::internal::ParamGeneratorInterface< T >} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACWA \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/internal/gtest-param-util.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Vector< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v Vector< T >}
{\xe \v Vector< T >}
{\bkmkstart AAAAAAABPK}
{\bkmkend AAAAAAABPK}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b iterator}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Vector} (int s){\bkmkstart AAAAAAABPL}
{\bkmkend AAAAAAABPL}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

size_t {\b size} () const{\bkmkstart AAAAAAABPM}
{\bkmkend AAAAAAABPM}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

size_t {\b capacity} () const{\bkmkstart AAAAAAABPN}
{\bkmkend AAAAAAABPN}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b reserve} (size_t n){\bkmkstart AAAAAAABPO}
{\bkmkend AAAAAAABPO}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b resize} (size_t n, const T &value=T()){\bkmkstart AAAAAAABPP}
{\bkmkend AAAAAAABPP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b push_back} (const T &value){\bkmkstart AAAAAAABPQ}
{\bkmkend AAAAAAABPQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b pop_back} (){\bkmkstart AAAAAAABPR}
{\bkmkend AAAAAAABPR}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T & {\b operator[]} (int ind){\bkmkstart AAAAAAABPS}
{\bkmkend AAAAAAABPS}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const T & {\b operator[]} (int ind) const{\bkmkstart AAAAAAABPT}
{\bkmkend AAAAAAABPT}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b iterator} {\b begin} (){\bkmkstart AAAAAAABPU}
{\bkmkend AAAAAAABPU}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b iterator} {\b end} (){\bkmkstart AAAAAAABPV}
{\bkmkend AAAAAAABPV}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b empty} () const{\bkmkstart AAAAAAABPW}
{\bkmkend AAAAAAABPW}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Vector/my_vector.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
VeryLoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooogName Class Reference\par \pard\plain 
{\tc\tcl2 \v VeryLoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooogName}
{\xe \v VeryLoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooogName}
{\bkmkstart AAAAAAABQG}
{\bkmkend AAAAAAABQG}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/googletest-list-tests-unittest_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::WithArgsAction< InnerAction, I > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::WithArgsAction< InnerAction, I >}
{\xe \v testing::internal::WithArgsAction< InnerAction, I >}
{\bkmkstart AAAAAAADWQ}
{\bkmkend AAAAAAADWQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename R , typename... Args> using {\b InnerSignature} = R(typename std::tuple_element< I, std::tuple< Args... > >::type...){\bkmkstart AAAAAAADWR}
{\bkmkend AAAAAAADWR}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename R , typename... Args, typename std::enable_if< std::is_convertible< InnerAction, {\b OnceAction}< R(typename std::tuple_element< I, std::tuple< Args... > >::type...)> >::value, int >::type  = 0> {\b operator OnceAction< R} (Args...)>() &&{\bkmkstart AAAAAAADWS}
{\bkmkend AAAAAAADWS}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename R , typename... Args, typename std::enable_if< std::is_convertible< const InnerAction &, {\b Action}< R(typename std::tuple_element< I, std::tuple< Args... > >::type...)> >::value, int >::type  = 0> {\b operator Action< R} (Args...)>() const{\bkmkstart AAAAAAADWT}
{\bkmkend AAAAAAADWT}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

InnerAction {\b inner_action}{\bkmkstart AAAAAAADWU}
{\bkmkend AAAAAAADWU}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::WithoutMatchers Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::WithoutMatchers}
{\xe \v testing::internal::WithoutMatchers}
{\bkmkstart AAAAAAADWV}
{\bkmkend AAAAAAADWV}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

GTEST_API_ {\b WithoutMatchers} {\b GetWithoutMatchers} (){\bkmkstart AAAAAAADWW}
{\bkmkend AAAAAAADWW}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::WithParamInterface< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::WithParamInterface< T >}
{\xe \v testing::WithParamInterface< T >}
{\bkmkstart AAAAAAACKM}
{\bkmkend AAAAAAACKM}
Inheritance diagram for testing::WithParamInterface< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_with_param_interface.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T {\b ParamType}{\bkmkstart AAAAAAACKN}
{\bkmkend AAAAAAACKN}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const ParamType & {\b GetParam} (){\bkmkstart AAAAAAACKO}
{\bkmkend AAAAAAACKO}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class TestClass > class {\b internal::ParameterizedTestFactory}{\bkmkstart AAAAAAACKP}
{\bkmkend AAAAAAACKP}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/include/gtest/gtest.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
WrongTypeDebugStringMethod Struct Reference\par \pard\plain 
{\tc\tcl2 \v WrongTypeDebugStringMethod}
{\xe \v WrongTypeDebugStringMethod}
{\bkmkstart AAAAAAABQH}
{\bkmkend AAAAAAABQH}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::string {\b DebugString} () const{\bkmkstart AAAAAAABQI}
{\bkmkend AAAAAAABQI}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b ShortDebugString} () const{\bkmkstart AAAAAAABQJ}
{\bkmkend AAAAAAABQJ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::XmlUnitTestResultPrinter Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::XmlUnitTestResultPrinter}
{\xe \v testing::internal::XmlUnitTestResultPrinter}
{\bkmkstart AAAAAAADWX}
{\bkmkend AAAAAAADWX}
Inheritance diagram for testing::internal::XmlUnitTestResultPrinter:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_xml_unit_test_result_printer.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b XmlUnitTestResultPrinter} (const char *output_file){\bkmkstart AAAAAAADWY}
{\bkmkend AAAAAAADWY}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b OnTestIterationEnd} (const {\b UnitTest} &unit_test, int iteration) override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b ListTestsMatchingFilter} (const std::vector< {\b TestSuite} * > &test_suites){\bkmkstart AAAAAAADWZ}
{\bkmkend AAAAAAADWZ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b PrintXmlTestsList} (std::ostream *stream, const std::vector< {\b TestSuite} * > &test_suites){\bkmkstart AAAAAAADXA}
{\bkmkend AAAAAAADXA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v OnTestIterationEnd\:testing::internal::XmlUnitTestResultPrinter}
{\xe \v testing::internal::XmlUnitTestResultPrinter\:OnTestIterationEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void testing::internal::XmlUnitTestResultPrinter::OnTestIterationEnd (const {\b UnitTest} &  {\i unit_test}, int  {\i iteration}){\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADXB}
{\bkmkend AAAAAAADXB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplemented from {\b testing::EmptyTestEventListener} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABMU \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib/googletest-main/googletest/src/gtest.cc\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Documentation{\tc \v File Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
game.h\par \pard\plain 
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #ifndef CHESS_GAME_H}\par
2 {\cf21 #define CHESS_GAME_H}\par
3 {\cf21 #include <ctime>}\par
4 {\cf21 #include <chrono>}\par
5 {\cf21 #include <unistd.h>}\par
6 {\cf21 #include <string>}\par
7 {\cf21 #include <unistd.h>}\par
8 {\cf21 #include <vector>}\par
9 {\cf21 #include <iostream>}\par
10 {\cf21 #include <memory>}\par
11 {\cf21 #include "Pieces.h"}\par
12 \par
13 {\cf17 class }Clock\{\par
14 {\cf17 private}:\par
15     std::chrono::time_point<std::chrono::high_resolution_clock> start, end;\par
16     {\cf18 float} time = 0;\par
17     {\cf18 float} addition = 0;\par
18 {\cf17 public}:\par
19 \par
20     Clock() = {\cf19 default};\par
21 \par
22     {\cf18 void} clock_start()\{\par
23         start = std::chrono::high_resolution_clock::now();\par
24     \}\par
25 \par
26     {\cf18 void} clock_end()\{\par
27         end = std::chrono::high_resolution_clock::now();\par
28         std::chrono::duration<float> duration = end - start;\par
29         {\cf18 float} a = duration.count();\par
30         time -= duration.count();\par
31         {\cf20 //std::cout << duration.count() << std::endl;}\par
32     \}\par
33 \par
34     {\cf18 void} Set_Time({\cf18 float} time) \{\par
35         this->time = time;\par
36     \}\par
37 \par
38     {\cf18 void} Set_Addition({\cf18 float} addition) \{\par
39         this->addition = addition;\par
40     \}\par
41 \par
42     {\cf18 void} add()\{\par
43         time += addition;\par
44     \}\par
45 \par
46     {\cf18 float} Get_Time(){\cf17  const}\{\par
47         {\cf18 float} t = this->time;\par
48         {\cf19 return} t;\par
49     \}\par
50 \par
51 \};\par
52 \par
53 {\cf17 enum} State\{\par
54     {\cf20 //int state = 0; // 0 - no game, 1 - new game, 2 - now game, 3 - end game.}\par
55     No,\par
56     New,\par
57     Now,\par
58     End\par
59 \};\par
60 \par
61 {\cf17 enum} Verdict\{\par
62     {\cf20 // 0 - mate, 1 - stalemate, 2 - check, 3 - nothing}\par
63     Mate = 0,\par
64     Stalemate = 1,\par
65     Check = 2,\par
66     Nothing = 3,\par
67     Time\par
68 \};\par
69 \par
70 {\cf17 struct }Player\{\par
71     {\cf18 int} elo;\par
72     std::string name;\par
73     Clock clock;\par
74 \};\par
75 \par
76 {\cf17 struct }History\{\par
77     {\cf18 int} number = 0;\par
78     std::vector <std::string> move;\par
79     std::vector <std::string> formal;\par
80 \};\par
81 \par
82 {\cf17 class }Game\{\par
83 {\cf17 private}:\par
84     {\cf20 /*}\par
85 {\cf20      8  r k b q k b k r}\par
86 {\cf20      7  p p p p p p p p}\par
87 {\cf20      6  0 0 0 0 0 0 0 0}\par
88 {\cf20      5  0 0 0 0 0 0 0 0}\par
89 {\cf20      4  0 0 0 0 0 0 0 0}\par
90 {\cf20      3  0 0 0 0 0 0 0 0}\par
91 {\cf20      2  p p p p p p p p}\par
92 {\cf20      1  r k b q k b k r}\par
93 {\cf20         a b c d e f g h}\par
94 {\cf20      */}\par
95     {\cf18 int} move = 0; {\cf20 //0, 1: white, black}\par
96     Player player[2]; {\cf20 // name + rating + clock}\par
97     {\cf18 float} timing;\par
98     History history; {\cf20 // game history}\par
99     State state = State::No;\par
100     Verdict verdict;\par
101     std::vector< std::vector <Piece*> > pieces;\par
102 {\cf17 public}:\par
103     Game()\{\par
104         std::vector< std::vector <Piece*> > v\{ \{{\cf17 new} Rook(1, {\cf22 "a8"}), {\cf17 new} Knight(1, {\cf22 "b8"}), {\cf17 new} Bishop(1, {\cf22 "c8"}), {\cf17 new} Queen(1, {\cf22 "d8"}), {\cf17 new} King(1, {\cf22 "e8"}), {\cf17 new} Bishop(1, {\cf22 "f8"}), {\cf17 new} Knight(1, {\cf22 "g8"}), {\cf17 new} Rook(1, {\cf22 "h8"})\},\par
105                                                \{{\cf17 new} Pawn(1, {\cf22 "a7"}), {\cf17 new} Pawn(1, {\cf22 "b7"}), {\cf17 new} Pawn(1, {\cf22 "c7"}), {\cf17 new} Pawn(1, {\cf22 "d7"}), {\cf17 new} Pawn(1, {\cf22 "e7"}), {\cf17 new} Pawn(1, {\cf22 "f7"}), {\cf17 new} Pawn(1, {\cf22 "g7"}), {\cf17 new} Pawn(1, {\cf22 "h8"})\},\par
106                                                \{{\cf17 nullptr}, {\cf17 nullptr}, {\cf17 nullptr}, {\cf17 nullptr}, {\cf17 nullptr}, {\cf17 nullptr}, {\cf17 nullptr}, {\cf17 nullptr}\},\par
107                                                \{{\cf17 nullptr}, {\cf17 nullptr}, {\cf17 nullptr}, {\cf17 nullptr}, {\cf17 nullptr}, {\cf17 nullptr}, {\cf17 nullptr}, {\cf17 nullptr}\},\par
108                                                \{{\cf17 nullptr}, {\cf17 nullptr}, {\cf17 nullptr}, {\cf17 nullptr}, {\cf17 nullptr}, {\cf17 nullptr}, {\cf17 nullptr}, {\cf17 nullptr}\},\par
109                                                \{{\cf17 nullptr}, {\cf17 nullptr}, {\cf17 nullptr}, {\cf17 nullptr}, {\cf17 nullptr}, {\cf17 nullptr}, {\cf17 nullptr}, {\cf17 nullptr}\},\par
110                                                \{{\cf17 new} Pawn(0, {\cf22 "a7"}), {\cf17 new} Pawn(0, {\cf22 "b7"}), {\cf17 new} Pawn(0, {\cf22 "c2"}), {\cf17 new} Pawn(0, {\cf22 "d2"}), {\cf17 new} Pawn(0, {\cf22 "e2"}), {\cf17 new} Pawn(0, {\cf22 "f2"}), {\cf17 new} Pawn(0, {\cf22 "g2"}), {\cf17 new} Pawn(0, {\cf22 "h2"})\},\par
111                                                \{{\cf17 new} Rook(0, {\cf22 "a1"}), {\cf17 new} Knight(0, {\cf22 "b1"}), {\cf17 new} Bishop(0, {\cf22 "c1"}), {\cf17 new} Queen(0, {\cf22 "d1"}), {\cf17 new} King(0, {\cf22 "e1"}), {\cf17 new} Bishop(0, {\cf22 "f1"}), {\cf17 new} Knight(0, {\cf22 "g1"}), {\cf17 new} Rook(0, {\cf22 "h1"})\}\par
112                                                 \};;\par
113         pieces = v;\par
114     \}\par
115     std::vector< std::vector <Piece*>> GetBoard();\par
116 \par
117     History GetHistory();\par
118 \par
119     State GetState();\par
120 \par
121     Verdict GetVerdict();\par
122 \par
123     {\cf18 void} make_move();\par
124 \par
125     {\cf18 void} check_moves(std::vector< std::vector <Piece*> > &pieces, std::vector<std::string> &moves, std::string &from, {\cf18 int} move);\par
126 \par
127     {\cf18 void} impossible_move(std::vector<std::string> &moves, std::string &from, {\cf18 int} move);\par
128 \par
129     {\cf18 bool} check({\cf18 int} color, std::vector< std::vector <Piece*> > &pieces);\par
130 \par
131     {\cf18 bool} mate({\cf18 int} color, std::vector< std::vector <Piece*> > &pieces);\par
132 \par
133     std::string en_passant(std::vector< std::vector <Piece*> > &pieces, std::vector<std::string> &moves, std::string &from, {\cf18 int} move);\par
134 \par
135     {\cf18 bool} castling(std::vector< std::vector <Piece*> > &pieces, std::vector<std::string> &moves, std::string &from, {\cf18 int} move);\par
136 \par
137     {\cf18 void} pawn_revolution(std::vector <int> coo, std::vector <int> s);\par
138 \par
139     {\cf18 void} set_time({\cf18 float} time);\par
140 \par
141     {\cf18 void} set_addition({\cf18 float} addition);\par
142 \par
143     {\cf18 void} new_game();\par
144 \par
145 \par
146     ~Game()\{\par
147         {\cf19 for}({\cf18 int} i = 0; i < 8; i++)\{\par
148             {\cf19 for}({\cf18 int} j = 0; j < 8; j++)\{\par
149                 {\cf17 delete} pieces[i][j];\par
150             \}\par
151         \}\par
152     \}\par
153 \};\par
154 \par
155 {\cf21 #endif }{\cf20 //CHESS_GAME_H}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
helper.h\par \pard\plain 
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #ifndef CHESS_HELPER_H}\par
2 {\cf21 #define CHESS_HELPER_H}\par
3 {\cf21 #include <vector>}\par
4 std::vector<int> coordinates(std::string &move);\par
5 std::string to_move(std::vector<int> &coo);\par
6 {\cf18 void} print_moves(std::vector<std::string> &moves);\par
7 {\cf18 void} collision({\cf18 int} x, {\cf18 int} y, std::string &from, std::vector<std::string> &moves, std::vector<std::string> &possible);\par
8 {\cf18 bool} enter(std::string &move, {\cf17 const} std::string &msg);\par
9 {\cf18 bool} condition(std::vector<int> &coo);\par
10 {\cf18 void} time_minutes({\cf18 float} time);\par
11 \par
12 {\cf21 #endif }{\cf20 //CHESS_HELPER_H}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gmock-actions.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googlemock/include/gmock/gmock-actions.h}
{\xe \v lib/googletest-main/googlemock/include/gmock/gmock-actions.h}
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2007, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // Google Mock - a framework for writing C++ mock classes.}\par
31 {\cf20 //}\par
32 {\cf20 // The ACTION* family of macros can be used in a namespace scope to}\par
33 {\cf20 // define custom actions easily.  The syntax:}\par
34 {\cf20 //}\par
35 {\cf20 //   ACTION(name) \{ statements; \}}\par
36 {\cf20 //}\par
37 {\cf20 // will define an action with the given name that executes the}\par
38 {\cf20 // statements.  The value returned by the statements will be used as}\par
39 {\cf20 // the return value of the action.  Inside the statements, you can}\par
40 {\cf20 // refer to the K-th (0-based) argument of the mock function by}\par
41 {\cf20 // 'argK', and refer to its type by 'argK_type'.  For example:}\par
42 {\cf20 //}\par
43 {\cf20 //   ACTION(IncrementArg1) \{}\par
44 {\cf20 //     arg1_type temp = arg1;}\par
45 {\cf20 //     return ++(*temp);}\par
46 {\cf20 //   \}}\par
47 {\cf20 //}\par
48 {\cf20 // allows you to write}\par
49 {\cf20 //}\par
50 {\cf20 //   ...WillOnce(IncrementArg1());}\par
51 {\cf20 //}\par
52 {\cf20 // You can also refer to the entire argument tuple and its type by}\par
53 {\cf20 // 'args' and 'args_type', and refer to the mock function type and its}\par
54 {\cf20 // return type by 'function_type' and 'return_type'.}\par
55 {\cf20 //}\par
56 {\cf20 // Note that you don't need to specify the types of the mock function}\par
57 {\cf20 // arguments.  However rest assured that your code is still type-safe:}\par
58 {\cf20 // you'll get a compiler error if *arg1 doesn't support the ++}\par
59 {\cf20 // operator, or if the type of ++(*arg1) isn't compatible with the}\par
60 {\cf20 // mock function's return type, for example.}\par
61 {\cf20 //}\par
62 {\cf20 // Sometimes you'll want to parameterize the action.   For that you can use}\par
63 {\cf20 // another macro:}\par
64 {\cf20 //}\par
65 {\cf20 //   ACTION_P(name, param_name) \{ statements; \}}\par
66 {\cf20 //}\par
67 {\cf20 // For example:}\par
68 {\cf20 //}\par
69 {\cf20 //   ACTION_P(Add, n) \{ return arg0 + n; \}}\par
70 {\cf20 //}\par
71 {\cf20 // will allow you to write:}\par
72 {\cf20 //}\par
73 {\cf20 //   ...WillOnce(Add(5));}\par
74 {\cf20 //}\par
75 {\cf20 // Note that you don't need to provide the type of the parameter}\par
76 {\cf20 // either.  If you need to reference the type of a parameter named}\par
77 {\cf20 // 'foo', you can write 'foo_type'.  For example, in the body of}\par
78 {\cf20 // ACTION_P(Add, n) above, you can write 'n_type' to refer to the type}\par
79 {\cf20 // of 'n'.}\par
80 {\cf20 //}\par
81 {\cf20 // We also provide ACTION_P2, ACTION_P3, ..., up to ACTION_P10 to support}\par
82 {\cf20 // multi-parameter actions.}\par
83 {\cf20 //}\par
84 {\cf20 // For the purpose of typing, you can view}\par
85 {\cf20 //}\par
86 {\cf20 //   ACTION_Pk(Foo, p1, ..., pk) \{ ... \}}\par
87 {\cf20 //}\par
88 {\cf20 // as shorthand for}\par
89 {\cf20 //}\par
90 {\cf20 //   template <typename p1_type, ..., typename pk_type>}\par
91 {\cf20 //   FooActionPk<p1_type, ..., pk_type> Foo(p1_type p1, ..., pk_type pk) \{ ... \}}\par
92 {\cf20 //}\par
93 {\cf20 // In particular, you can provide the template type arguments}\par
94 {\cf20 // explicitly when invoking Foo(), as in Foo<long, bool>(5, false);}\par
95 {\cf20 // although usually you can rely on the compiler to infer the types}\par
96 {\cf20 // for you automatically.  You can assign the result of expression}\par
97 {\cf20 // Foo(p1, ..., pk) to a variable of type FooActionPk<p1_type, ...,}\par
98 {\cf20 // pk_type>.  This can be useful when composing actions.}\par
99 {\cf20 //}\par
100 {\cf20 // You can also overload actions with different numbers of parameters:}\par
101 {\cf20 //}\par
102 {\cf20 //   ACTION_P(Plus, a) \{ ... \}}\par
103 {\cf20 //   ACTION_P2(Plus, a, b) \{ ... \}}\par
104 {\cf20 //}\par
105 {\cf20 // While it's tempting to always use the ACTION* macros when defining}\par
106 {\cf20 // a new action, you should also consider implementing ActionInterface}\par
107 {\cf20 // or using MakePolymorphicAction() instead, especially if you need to}\par
108 {\cf20 // use the action a lot.  While these approaches require more work,}\par
109 {\cf20 // they give you more control on the types of the mock function}\par
110 {\cf20 // arguments and the action parameters, which in general leads to}\par
111 {\cf20 // better compiler error messages that pay off in the long run.  They}\par
112 {\cf20 // also allow overloading actions based on parameter types (as opposed}\par
113 {\cf20 // to just based on the number of parameters).}\par
114 {\cf20 //}\par
115 {\cf20 // CAVEAT:}\par
116 {\cf20 //}\par
117 {\cf20 // ACTION*() can only be used in a namespace scope as templates cannot be}\par
118 {\cf20 // declared inside of a local class.}\par
119 {\cf20 // Users can, however, define any local functors (e.g. a lambda) that}\par
120 {\cf20 // can be used as actions.}\par
121 {\cf20 //}\par
122 {\cf20 // MORE INFORMATION:}\par
123 {\cf20 //}\par
124 {\cf20 // To learn more about using these macros, please search for 'ACTION' on}\par
125 {\cf20 // https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md}\par
126 \par
127 {\cf20 // IWYU pragma: private, include "gmock/gmock.h"}\par
128 {\cf20 // IWYU pragma: friend gmock/.*}\par
129 \par
130 {\cf21 #ifndef GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_ACTIONS_H_}\par
131 {\cf21 #define GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_ACTIONS_H_}\par
132 \par
133 {\cf21 #ifndef _WIN32_WCE}\par
134 {\cf21 #include <errno.h>}\par
135 {\cf21 #endif}\par
136 \par
137 {\cf21 #include <algorithm>}\par
138 {\cf21 #include <functional>}\par
139 {\cf21 #include <memory>}\par
140 {\cf21 #include <string>}\par
141 {\cf21 #include <tuple>}\par
142 {\cf21 #include <type_traits>}\par
143 {\cf21 #include <utility>}\par
144 \par
145 {\cf21 #include "gmock/internal/gmock-internal-utils.h"}\par
146 {\cf21 #include "gmock/internal/gmock-port.h"}\par
147 {\cf21 #include "gmock/internal/gmock-pp.h"}\par
148 \par
149 {\cf21 #ifdef _MSC_VER}\par
150 {\cf21 #pragma warning(push)}\par
151 {\cf21 #pragma warning(disable : 4100)}\par
152 {\cf21 #endif}\par
153 \par
154 {\cf17 namespace }testing \{\par
155 \par
156 {\cf20 // To implement an action Foo, define:}\par
157 {\cf20 //   1. a class FooAction that implements the ActionInterface interface, and}\par
158 {\cf20 //   2. a factory function that creates an Action object from a}\par
159 {\cf20 //      const FooAction*.}\par
160 {\cf20 //}\par
161 {\cf20 // The two-level delegation design follows that of Matcher, providing}\par
162 {\cf20 // consistency for extension developers.  It also eases ownership}\par
163 {\cf20 // management as Action objects can now be copied like plain values.}\par
164 \par
165 {\cf17 namespace }internal \{\par
166 \par
167 {\cf20 // BuiltInDefaultValueGetter<T, true>::Get() returns a}\par
168 {\cf20 // default-constructed T value.  BuiltInDefaultValueGetter<T,}\par
169 {\cf20 // false>::Get() crashes with an error.}\par
170 {\cf20 //}\par
171 {\cf20 // This primary template is used when kDefaultConstructible is true.}\par
172 {\cf17 template} <{\cf17 typename} T, {\cf18 bool} kDefaultConstructible>\par
173 {\cf17 struct }BuiltInDefaultValueGetter \{\par
174   {\cf17 static} T Get() \{ {\cf19 return} T(); \}\par
175 \};\par
176 {\cf17 template} <{\cf17 typename} T>\par
177 {\cf17 struct }BuiltInDefaultValueGetter<T, false> \{\par
178   {\cf17 static} T Get() \{\par
179     Assert({\cf17 false}, __FILE__, __LINE__,\par
180            {\cf22 "Default action undefined for the function return type."});\par
181     {\cf19 return} internal::Invalid<T>();\par
182     {\cf20 // The above statement will never be reached, but is required in}\par
183     {\cf20 // order for this function to compile.}\par
184   \}\par
185 \};\par
186 \par
187 {\cf20 // BuiltInDefaultValue<T>::Get() returns the "built-in" default value}\par
188 {\cf20 // for type T, which is NULL when T is a raw pointer type, 0 when T is}\par
189 {\cf20 // a numeric type, false when T is bool, or "" when T is string or}\par
190 {\cf20 // std::string.  In addition, in C++11 and above, it turns a}\par
191 {\cf20 // default-constructed T value if T is default constructible.  For any}\par
192 {\cf20 // other type T, the built-in default T value is undefined, and the}\par
193 {\cf20 // function will abort the process.}\par
194 {\cf17 template} <{\cf17 typename} T>\par
195 {\cf17 class }BuiltInDefaultValue \{\par
196  {\cf17 public}:\par
197   {\cf20 // This function returns true if and only if type T has a built-in default}\par
198   {\cf20 // value.}\par
199   {\cf17 static} {\cf18 bool} Exists() \{ return ::std::is_default_constructible<T>::value; \}\par
200 \par
201   {\cf17 static} T Get() \{\par
202     {\cf19 return} BuiltInDefaultValueGetter<\par
203         T, ::std::is_default_constructible<T>::value>::Get();\par
204   \}\par
205 \};\par
206 \par
207 {\cf20 // This partial specialization says that we use the same built-in}\par
208 {\cf20 // default value for T and const T.}\par
209 {\cf17 template} <{\cf17 typename} T>\par
210 {\cf17 class }BuiltInDefaultValue<const T> \{\par
211  {\cf17 public}:\par
212   {\cf17 static} {\cf18 bool} Exists() \{ {\cf19 return} BuiltInDefaultValue<T>::Exists(); \}\par
213   {\cf17 static} T Get() \{ {\cf19 return} BuiltInDefaultValue<T>::Get(); \}\par
214 \};\par
215 \par
216 {\cf20 // This partial specialization defines the default values for pointer}\par
217 {\cf20 // types.}\par
218 {\cf17 template} <{\cf17 typename} T>\par
219 {\cf17 class }BuiltInDefaultValue<T*> \{\par
220  {\cf17 public}:\par
221   {\cf17 static} {\cf18 bool} Exists() \{ {\cf19 return} {\cf17 true}; \}\par
222   {\cf17 static} T* Get() \{ {\cf19 return} {\cf17 nullptr}; \}\par
223 \};\par
224 \par
225 {\cf20 // The following specializations define the default values for}\par
226 {\cf20 // specific types we care about.}\par
227 {\cf21 #define GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(type, value) \\}\par
228 {\cf21   template <>                                                     \\}\par
229 {\cf21   class BuiltInDefaultValue<type> \{                               \\}\par
230 {\cf21    public:                                                        \\}\par
231 {\cf21     static bool Exists() \{ return true; \}                         \\}\par
232 {\cf21     static type Get() \{ return value; \}                           \\}\par
233 {\cf21   \}}\par
234 \par
235 GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_({\cf18 void}, );  {\cf20 // NOLINT}\par
236 GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(::std::string, {\cf22 ""});\par
237 GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_({\cf18 bool}, {\cf17 false});\par
238 GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_({\cf18 unsigned} {\cf18 char}, {\cf23 '\\0'});\par
239 GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_({\cf18 signed} {\cf18 char}, {\cf23 '\\0'});\par
240 GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_({\cf18 char}, {\cf23 '\\0'});\par
241 \par
242 {\cf20 // There's no need for a default action for signed wchar_t, as that}\par
243 {\cf20 // type is the same as wchar_t for gcc, and invalid for MSVC.}\par
244 {\cf20 //}\par
245 {\cf20 // There's also no need for a default action for unsigned wchar_t, as}\par
246 {\cf20 // that type is the same as unsigned int for gcc, and invalid for}\par
247 {\cf20 // MSVC.}\par
248 {\cf21 #if GMOCK_WCHAR_T_IS_NATIVE_}\par
249 GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_({\cf18 wchar_t}, 0U);  {\cf20 // NOLINT}\par
250 {\cf21 #endif}\par
251 \par
252 GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_({\cf18 unsigned} {\cf18 short}, 0U);  {\cf20 // NOLINT}\par
253 GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_({\cf18 signed} {\cf18 short}, 0);     {\cf20 // NOLINT}\par
254 GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_({\cf18 unsigned} {\cf18 int}, 0U);\par
255 GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_({\cf18 signed} {\cf18 int}, 0);\par
256 GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_({\cf18 unsigned} {\cf18 long}, 0UL);     {\cf20 // NOLINT}\par
257 GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_({\cf18 signed} {\cf18 long}, 0L);        {\cf20 // NOLINT}\par
258 GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_({\cf18 unsigned} {\cf18 long} {\cf18 long}, 0);  {\cf20 // NOLINT}\par
259 GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_({\cf18 signed} {\cf18 long} {\cf18 long}, 0);    {\cf20 // NOLINT}\par
260 GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_({\cf18 float}, 0);\par
261 GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_({\cf18 double}, 0);\par
262 \par
263 {\cf21 #undef GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_}\par
264 \par
265 {\cf20 // Partial implementations of metaprogramming types from the standard library}\par
266 {\cf20 // not available in C++11.}\par
267 \par
268 {\cf17 template} <{\cf17 typename} P>\par
269 {\cf17 struct }negation\par
270     {\cf20 // NOLINTNEXTLINE}\par
271     : std::integral_constant<bool, bool(!P::value)> \{\};\par
272 \par
273 {\cf20 // Base case: with zero predicates the answer is always true.}\par
274 {\cf17 template} <{\cf17 typename}...>\par
275 {\cf17 struct }conjunction : std::true_type \{\};\par
276 \par
277 {\cf20 // With a single predicate, the answer is that predicate.}\par
278 {\cf17 template} <{\cf17 typename} P1>\par
279 {\cf17 struct }conjunction<P1> : P1 \{\};\par
280 \par
281 {\cf20 // With multiple predicates the answer is the first predicate if that is false,}\par
282 {\cf20 // and we recurse otherwise.}\par
283 {\cf17 template} <{\cf17 typename} P1, {\cf17 typename}... Ps>\par
284 {\cf17 struct }conjunction<P1, Ps...>\par
285     : std::conditional<bool(P1::value), conjunction<Ps...>, P1>::type \{\};\par
286 \par
287 {\cf17 template} <{\cf17 typename}...>\par
288 {\cf17 struct }disjunction : std::false_type \{\};\par
289 \par
290 {\cf17 template} <{\cf17 typename} P1>\par
291 {\cf17 struct }disjunction<P1> : P1 \{\};\par
292 \par
293 {\cf17 template} <{\cf17 typename} P1, {\cf17 typename}... Ps>\par
294 {\cf17 struct }disjunction<P1, Ps...>\par
295     {\cf20 // NOLINTNEXTLINE}\par
296     : std::conditional<!bool(P1::value), disjunction<Ps...>, P1>::type \{\};\par
297 \par
298 {\cf17 template} <{\cf17 typename}...>\par
299 {\cf17 using }void_t = void;\par
300 \par
301 {\cf20 // Detects whether an expression of type `From` can be implicitly converted to}\par
302 {\cf20 // `To` according to [conv]. In C++17, [conv]/3 defines this as follows:}\par
303 {\cf20 //}\par
304 {\cf20 //     An expression e can be implicitly converted to a type T if and only if}\par
305 {\cf20 //     the declaration T t=e; is well-formed, for some invented temporary}\par
306 {\cf20 //     variable t ([dcl.init]).}\par
307 {\cf20 //}\par
308 {\cf20 // [conv]/2 implies we can use function argument passing to detect whether this}\par
309 {\cf20 // initialization is valid.}\par
310 {\cf20 //}\par
311 {\cf20 // Note that this is distinct from is_convertible, which requires this be valid:}\par
312 {\cf20 //}\par
313 {\cf20 //     To test() \{}\par
314 {\cf20 //       return declval<From>();}\par
315 {\cf20 //     \}}\par
316 {\cf20 //}\par
317 {\cf20 // In particular, is_convertible doesn't give the correct answer when `To` and}\par
318 {\cf20 // `From` are the same non-moveable type since `declval<From>` will be an rvalue}\par
319 {\cf20 // reference, defeating the guaranteed copy elision that would otherwise make}\par
320 {\cf20 // this function work.}\par
321 {\cf20 //}\par
322 {\cf20 // REQUIRES: `From` is not cv void.}\par
323 {\cf17 template} <{\cf17 typename} From, {\cf17 typename} To>\par
324 {\cf17 struct }is_implicitly_convertible \{\par
325  {\cf17 private}:\par
326   {\cf20 // A function that accepts a parameter of type T. This can be called with type}\par
327   {\cf20 // U successfully only if U is implicitly convertible to T.}\par
328   {\cf17 template} <{\cf17 typename} T>\par
329   {\cf17 static} {\cf18 void} Accept(T);\par
330 \par
331   {\cf20 // A function that creates a value of type T.}\par
332   {\cf17 template} <{\cf17 typename} T>\par
333   {\cf17 static} T Make();\par
334 \par
335   {\cf20 // An overload be selected when implicit conversion from T to To is possible.}\par
336   template <typename T, typename = decltype(Accept<To>(Make<T>()))>\par
337   {\cf17 static} std::true_type TestImplicitConversion({\cf18 int});\par
338 \par
339   {\cf20 // A fallback overload selected in all other cases.}\par
340   {\cf17 template} <{\cf17 typename} T>\par
341   {\cf17 static} std::false_type TestImplicitConversion(...);\par
342 \par
343  {\cf17 public}:\par
344   {\cf17 using }type = {\cf17 decltype}(TestImplicitConversion<From>(0));\par
345   {\cf17 static} {\cf17 constexpr} {\cf18 bool} value = type::value;\par
346 \};\par
347 \par
348 {\cf20 // Like std::invoke_result_t from C++17, but works only for objects with call}\par
349 {\cf20 // operators (not e.g. member function pointers, which we don't need specific}\par
350 {\cf20 // support for in OnceAction because std::function deals with them).}\par
351 {\cf17 template} <{\cf17 typename} F, {\cf17 typename}... Args>\par
352 {\cf17 using }call_result_t = {\cf17 decltype}(std::declval<F>()(std::declval<Args>()...));\par
353 \par
354 {\cf17 template} <{\cf17 typename} Void, {\cf17 typename} R, {\cf17 typename} F, {\cf17 typename}... Args>\par
355 {\cf17 struct }is_callable_r_impl : std::false_type \{\};\par
356 \par
357 {\cf20 // Specialize the struct for those template arguments where call_result_t is}\par
358 {\cf20 // well-formed. When it's not, the generic template above is chosen, resulting}\par
359 {\cf20 // in std::false_type.}\par
360 {\cf17 template} <{\cf17 typename} R, {\cf17 typename} F, {\cf17 typename}... Args>\par
361 {\cf17 struct }is_callable_r_impl<void_t<call_result_t<F, Args...>>, R, F, Args...>\par
362     : std::conditional<\par
363           std::is_void<R>::value,  {\cf20 //}\par
364           std::true_type,          {\cf20 //}\par
365           is_implicitly_convertible<call_result_t<F, Args...>, R>>::type \{\};\par
366 \par
367 {\cf20 // Like std::is_invocable_r from C++17, but works only for objects with call}\par
368 {\cf20 // operators. See the note on call_result_t.}\par
369 {\cf17 template} <{\cf17 typename} R, {\cf17 typename} F, {\cf17 typename}... Args>\par
370 {\cf17 using }is_callable_r = is_callable_r_impl<void, R, F, Args...>;\par
371 \par
372 {\cf20 // Like std::as_const from C++17.}\par
373 {\cf17 template} <{\cf17 typename} T>\par
374 {\cf17 typename} std::add_const<T>::type& as_const(T& t) \{\par
375   {\cf19 return} t;\par
376 \}\par
377 \par
378 \}  {\cf20 // namespace internal}\par
379 \par
380 {\cf20 // Specialized for function types below.}\par
381 {\cf17 template} <{\cf17 typename} F>\par
382 {\cf17 class }OnceAction;\par
383 \par
384 {\cf20 // An action that can only be used once.}\par
385 {\cf20 //}\par
386 {\cf20 // This is accepted by WillOnce, which doesn't require the underlying action to}\par
387 {\cf20 // be copy-constructible (only move-constructible), and promises to invoke it as}\par
388 {\cf20 // an rvalue reference. This allows the action to work with move-only types like}\par
389 {\cf20 // std::move_only_function in a type-safe manner.}\par
390 {\cf20 //}\par
391 {\cf20 // For example:}\par
392 {\cf20 //}\par
393 {\cf20 //     // Assume we have some API that needs to accept a unique pointer to some}\par
394 {\cf20 //     // non-copyable object Foo.}\par
395 {\cf20 //     void AcceptUniquePointer(std::unique_ptr<Foo> foo);}\par
396 {\cf20 //}\par
397 {\cf20 //     // We can define an action that provides a Foo to that API. Because It}\par
398 {\cf20 //     // has to give away its unique pointer, it must not be called more than}\par
399 {\cf20 //     // once, so its call operator is &&-qualified.}\par
400 {\cf20 //     struct ProvideFoo \{}\par
401 {\cf20 //       std::unique_ptr<Foo> foo;}\par
402 {\cf20 //}\par
403 {\cf20 //       void operator()() && \{}\par
404 {\cf20 //         AcceptUniquePointer(std::move(Foo));}\par
405 {\cf20 //       \}}\par
406 {\cf20 //     \};}\par
407 {\cf20 //}\par
408 {\cf20 //     // This action can be used with WillOnce.}\par
409 {\cf20 //     EXPECT_CALL(mock, Call)}\par
410 {\cf20 //         .WillOnce(ProvideFoo\{std::make_unique<Foo>(...)\});}\par
411 {\cf20 //}\par
412 {\cf20 //     // But a call to WillRepeatedly will fail to compile. This is correct,}\par
413 {\cf20 //     // since the action cannot correctly be used repeatedly.}\par
414 {\cf20 //     EXPECT_CALL(mock, Call)}\par
415 {\cf20 //         .WillRepeatedly(ProvideFoo\{std::make_unique<Foo>(...)\});}\par
416 {\cf20 //}\par
417 {\cf20 // A less-contrived example would be an action that returns an arbitrary type,}\par
418 {\cf20 // whose &&-qualified call operator is capable of dealing with move-only types.}\par
419 {\cf17 template} <{\cf17 typename} Result, {\cf17 typename}... Args>\par
420 {\cf17 class }OnceAction<Result(Args...)> final \{\par
421  {\cf17 private}:\par
422   {\cf20 // True iff we can use the given callable type (or lvalue reference) directly}\par
423   {\cf20 // via StdFunctionAdaptor.}\par
424   {\cf17 template} <{\cf17 typename} Callable>\par
425   {\cf17 using }IsDirectlyCompatible = internal::conjunction<\par
426       {\cf20 // It must be possible to capture the callable in StdFunctionAdaptor.}\par
427       std::is_constructible<typename std::decay<Callable>::type, Callable>,\par
428       {\cf20 // The callable must be compatible with our signature.}\par
429       internal::is_callable_r<Result, typename std::decay<Callable>::type,\par
430                               Args...>>;\par
431 \par
432   {\cf20 // True iff we can use the given callable type via StdFunctionAdaptor once we}\par
433   {\cf20 // ignore incoming arguments.}\par
434   {\cf17 template} <{\cf17 typename} Callable>\par
435   {\cf17 using }IsCompatibleAfterIgnoringArguments = internal::conjunction<\par
436       {\cf20 // It must be possible to capture the callable in a lambda.}\par
437       std::is_constructible<typename std::decay<Callable>::type, Callable>,\par
438       {\cf20 // The callable must be invocable with zero arguments, returning something}\par
439       {\cf20 // convertible to Result.}\par
440       internal::is_callable_r<Result, typename std::decay<Callable>::type>>;\par
441 \par
442  {\cf17 public}:\par
443   {\cf20 // Construct from a callable that is directly compatible with our mocked}\par
444   {\cf20 // signature: it accepts our function type's arguments and returns something}\par
445   {\cf20 // convertible to our result type.}\par
446   {\cf17 template} <{\cf17 typename} Callable,\par
447             {\cf17 typename} std::enable_if<\par
448                 internal::conjunction<\par
449                     {\cf20 // Teach clang on macOS that we're not talking about a}\par
450                     {\cf20 // copy/move constructor here. Otherwise it gets confused}\par
451                     {\cf20 // when checking the is_constructible requirement of our}\par
452                     {\cf20 // traits above.}\par
453                     internal::negation<std::is_same<\par
454                         OnceAction, {\cf17 typename} std::decay<Callable>::type>>,\par
455                     IsDirectlyCompatible<Callable>>  {\cf20 //}\par
456                 ::value,\par
457                 {\cf18 int}>::type = 0>\par
458   OnceAction(Callable&& callable)  {\cf20 // NOLINT}\par
459       : function_(StdFunctionAdaptor<{\cf17 typename} std::decay<Callable>::type>(\par
460             \{\}, std::forward<Callable>(callable))) \{\}\par
461 \par
462   {\cf20 // As above, but for a callable that ignores the mocked function's arguments.}\par
463   {\cf17 template} <{\cf17 typename} Callable,\par
464             {\cf17 typename} std::enable_if<\par
465                 internal::conjunction<\par
466                     {\cf20 // Teach clang on macOS that we're not talking about a}\par
467                     {\cf20 // copy/move constructor here. Otherwise it gets confused}\par
468                     {\cf20 // when checking the is_constructible requirement of our}\par
469                     {\cf20 // traits above.}\par
470                     internal::negation<std::is_same<\par
471                         OnceAction, {\cf17 typename} std::decay<Callable>::type>>,\par
472                     {\cf20 // Exclude callables for which the overload above works.}\par
473                     {\cf20 // We'd rather provide the arguments if possible.}\par
474                     internal::negation<IsDirectlyCompatible<Callable>>,\par
475                     IsCompatibleAfterIgnoringArguments<Callable>>::value,\par
476                 {\cf18 int}>::type = 0>\par
477   OnceAction(Callable&& callable)  {\cf20 // NOLINT}\par
478                                    {\cf20 // Call the constructor above with a callable}\par
479                                    {\cf20 // that ignores the input arguments.}\par
480       : OnceAction(IgnoreIncomingArguments<{\cf17 typename} std::decay<Callable>::type>\{\par
481             std::forward<Callable>(callable)\}) \{\}\par
482 \par
483   {\cf20 // We are naturally copyable because we store only an std::function, but}\par
484   {\cf20 // semantically we should not be copyable.}\par
485   OnceAction({\cf17 const} OnceAction&) = {\cf17 delete};\par
486   OnceAction& operator=({\cf17 const} OnceAction&) = {\cf17 delete};\par
487   OnceAction(OnceAction&&) = {\cf19 default};\par
488 \par
489   {\cf20 // Invoke the underlying action callable with which we were constructed,}\par
490   {\cf20 // handing it the supplied arguments.}\par
491   Result Call(Args... args) && \{\par
492     {\cf19 return} function_(std::forward<Args>(args)...);\par
493   \}\par
494 \par
495  {\cf17 private}:\par
496   {\cf20 // An adaptor that wraps a callable that is compatible with our signature and}\par
497   {\cf20 // being invoked as an rvalue reference so that it can be used as an}\par
498   {\cf20 // StdFunctionAdaptor. This throws away type safety, but that's fine because}\par
499   {\cf20 // this is only used by WillOnce, which we know calls at most once.}\par
500   {\cf20 //}\par
501   {\cf20 // Once we have something like std::move_only_function from C++23, we can do}\par
502   {\cf20 // away with this.}\par
503   {\cf17 template} <{\cf17 typename} Callable>\par
504   {\cf17 class }StdFunctionAdaptor final \{\par
505    {\cf17 public}:\par
506     {\cf20 // A tag indicating that the (otherwise universal) constructor is accepting}\par
507     {\cf20 // the callable itself, instead of e.g. stealing calls for the move}\par
508     {\cf20 // constructor.}\par
509     {\cf17 struct }CallableTag final \{\};\par
510 \par
511     {\cf17 template} <{\cf17 typename} F>\par
512     {\cf17 explicit} StdFunctionAdaptor(CallableTag, F&& callable)\par
513         : callable_(std::make_shared<Callable>(std::forward<F>(callable))) \{\}\par
514 \par
515     {\cf20 // Rather than explicitly returning Result, we return whatever the wrapped}\par
516     {\cf20 // callable returns. This allows for compatibility with existing uses like}\par
517     {\cf20 // the following, when the mocked function returns void:}\par
518     {\cf20 //}\par
519     {\cf20 //     EXPECT_CALL(mock_fn_, Call)}\par
520     {\cf20 //         .WillOnce([&] \{}\par
521     {\cf20 //            [...]}\par
522     {\cf20 //            return 0;}\par
523     {\cf20 //         \});}\par
524     {\cf20 //}\par
525     {\cf20 // Such a callable can be turned into std::function<void()>. If we use an}\par
526     {\cf20 // explicit return type of Result here then it *doesn't* work with}\par
527     {\cf20 // std::function, because we'll get a "void function should not return a}\par
528     {\cf20 // value" error.}\par
529     {\cf20 //}\par
530     {\cf20 // We need not worry about incompatible result types because the SFINAE on}\par
531     {\cf20 // OnceAction already checks this for us. std::is_invocable_r_v itself makes}\par
532     {\cf20 // the same allowance for void result types.}\par
533     {\cf17 template} <{\cf17 typename}... ArgRefs>\par
534     internal::call_result_t<Callable, ArgRefs...> operator()(\par
535         ArgRefs&&... args){\cf17  const }\{\par
536       {\cf19 return} std::move(*callable_)(std::forward<ArgRefs>(args)...);\par
537     \}\par
538 \par
539    {\cf17 private}:\par
540     {\cf20 // We must put the callable on the heap so that we are copyable, which}\par
541     {\cf20 // std::function needs.}\par
542     std::shared_ptr<Callable> callable_;\par
543   \};\par
544 \par
545   {\cf20 // An adaptor that makes a callable that accepts zero arguments callable with}\par
546   {\cf20 // our mocked arguments.}\par
547   {\cf17 template} <{\cf17 typename} Callable>\par
548   {\cf17 struct }IgnoreIncomingArguments \{\par
549     internal::call_result_t<Callable> operator()(Args&&...) \{\par
550       {\cf19 return} std::move(callable)();\par
551     \}\par
552 \par
553     Callable callable;\par
554   \};\par
555 \par
556   std::function<Result(Args...)> function_;\par
557 \};\par
558 \par
559 {\cf20 // When an unexpected function call is encountered, Google Mock will}\par
560 {\cf20 // let it return a default value if the user has specified one for its}\par
561 {\cf20 // return type, or if the return type has a built-in default value;}\par
562 {\cf20 // otherwise Google Mock won't know what value to return and will have}\par
563 {\cf20 // to abort the process.}\par
564 {\cf20 //}\par
565 {\cf20 // The DefaultValue<T> class allows a user to specify the}\par
566 {\cf20 // default value for a type T that is both copyable and publicly}\par
567 {\cf20 // destructible (i.e. anything that can be used as a function return}\par
568 {\cf20 // type).  The usage is:}\par
569 {\cf20 //}\par
570 {\cf20 //   // Sets the default value for type T to be foo.}\par
571 {\cf20 //   DefaultValue<T>::Set(foo);}\par
572 {\cf17 template} <{\cf17 typename} T>\par
573 {\cf17 class }DefaultValue \{\par
574  {\cf17 public}:\par
575   {\cf20 // Sets the default value for type T; requires T to be}\par
576   {\cf20 // copy-constructable and have a public destructor.}\par
577   {\cf17 static} {\cf18 void} Set(T x) \{\par
578     {\cf17 delete} producer_;\par
579     producer_ = {\cf17 new} FixedValueProducer(x);\par
580   \}\par
581 \par
582   {\cf20 // Provides a factory function to be called to generate the default value.}\par
583   {\cf20 // This method can be used even if T is only move-constructible, but it is not}\par
584   {\cf20 // limited to that case.}\par
585   {\cf17 typedef} T (*FactoryFunction)();\par
586   {\cf17 static} {\cf18 void} SetFactory(FactoryFunction factory) \{\par
587     {\cf17 delete} producer_;\par
588     producer_ = {\cf17 new} FactoryValueProducer(factory);\par
589   \}\par
590 \par
591   {\cf20 // Unsets the default value for type T.}\par
592   {\cf17 static} {\cf18 void} Clear() \{\par
593     {\cf17 delete} producer_;\par
594     producer_ = {\cf17 nullptr};\par
595   \}\par
596 \par
597   {\cf20 // Returns true if and only if the user has set the default value for type T.}\par
598   {\cf17 static} {\cf18 bool} IsSet() \{ {\cf19 return} producer_ != {\cf17 nullptr}; \}\par
599 \par
600   {\cf20 // Returns true if T has a default return value set by the user or there}\par
601   {\cf20 // exists a built-in default value.}\par
602   {\cf17 static} {\cf18 bool} Exists() \{\par
603     {\cf19 return} IsSet() || internal::BuiltInDefaultValue<T>::Exists();\par
604   \}\par
605 \par
606   {\cf20 // Returns the default value for type T if the user has set one;}\par
607   {\cf20 // otherwise returns the built-in default value. Requires that Exists()}\par
608   {\cf20 // is true, which ensures that the return value is well-defined.}\par
609   {\cf17 static} T Get() \{\par
610     {\cf19 return} producer_ == {\cf17 nullptr} ? internal::BuiltInDefaultValue<T>::Get()\par
611                                 : producer_->Produce();\par
612   \}\par
613 \par
614  {\cf17 private}:\par
615   {\cf17 class }ValueProducer \{\par
616    {\cf17 public}:\par
617     {\cf17 virtual} ~ValueProducer() \{\}\par
618     {\cf17 virtual} T Produce() = 0;\par
619   \};\par
620 \par
621   {\cf17 class }FixedValueProducer : {\cf17 public} ValueProducer \{\par
622    {\cf17 public}:\par
623     {\cf17 explicit} FixedValueProducer(T value) : value_(value) \{\}\par
624     T Produce(){\cf17  override }\{ {\cf19 return} value_; \}\par
625 \par
626    {\cf17 private}:\par
627     {\cf17 const} T value_;\par
628     FixedValueProducer({\cf17 const} FixedValueProducer&) = {\cf17 delete};\par
629     FixedValueProducer& operator=({\cf17 const} FixedValueProducer&) = {\cf17 delete};\par
630   \};\par
631 \par
632   {\cf17 class }FactoryValueProducer : {\cf17 public} ValueProducer \{\par
633    {\cf17 public}:\par
634     {\cf17 explicit} FactoryValueProducer(FactoryFunction factory)\par
635         : factory_(factory) \{\}\par
636     T Produce(){\cf17  override }\{ {\cf19 return} factory_(); \}\par
637 \par
638    {\cf17 private}:\par
639     {\cf17 const} FactoryFunction factory_;\par
640     FactoryValueProducer({\cf17 const} FactoryValueProducer&) = {\cf17 delete};\par
641     FactoryValueProducer& operator=({\cf17 const} FactoryValueProducer&) = {\cf17 delete};\par
642   \};\par
643 \par
644   {\cf17 static} ValueProducer* producer_;\par
645 \};\par
646 \par
647 {\cf20 // This partial specialization allows a user to set default values for}\par
648 {\cf20 // reference types.}\par
649 {\cf17 template} <{\cf17 typename} T>\par
650 {\cf17 class }DefaultValue<T&> \{\par
651  {\cf17 public}:\par
652   {\cf20 // Sets the default value for type T&.}\par
653   {\cf17 static} {\cf18 void} Set(T& x) \{  {\cf20 // NOLINT}\par
654     address_ = &x;\par
655   \}\par
656 \par
657   {\cf20 // Unsets the default value for type T&.}\par
658   {\cf17 static} {\cf18 void} Clear() \{ address_ = {\cf17 nullptr}; \}\par
659 \par
660   {\cf20 // Returns true if and only if the user has set the default value for type T&.}\par
661   {\cf17 static} {\cf18 bool} IsSet() \{ {\cf19 return} address_ != {\cf17 nullptr}; \}\par
662 \par
663   {\cf20 // Returns true if T has a default return value set by the user or there}\par
664   {\cf20 // exists a built-in default value.}\par
665   {\cf17 static} {\cf18 bool} Exists() \{\par
666     {\cf19 return} IsSet() || internal::BuiltInDefaultValue<T&>::Exists();\par
667   \}\par
668 \par
669   {\cf20 // Returns the default value for type T& if the user has set one;}\par
670   {\cf20 // otherwise returns the built-in default value if there is one;}\par
671   {\cf20 // otherwise aborts the process.}\par
672   {\cf17 static} T& Get() \{\par
673     {\cf19 return} address_ == {\cf17 nullptr} ? internal::BuiltInDefaultValue<T&>::Get()\par
674                                : *address_;\par
675   \}\par
676 \par
677  {\cf17 private}:\par
678   {\cf17 static} T* address_;\par
679 \};\par
680 \par
681 {\cf20 // This specialization allows DefaultValue<void>::Get() to}\par
682 {\cf20 // compile.}\par
683 {\cf17 template} <>\par
684 {\cf17 class }DefaultValue<void> \{\par
685  {\cf17 public}:\par
686   {\cf17 static} {\cf18 bool} Exists() \{ {\cf19 return} {\cf17 true}; \}\par
687   {\cf17 static} {\cf18 void} Get() \{\}\par
688 \};\par
689 \par
690 {\cf20 // Points to the user-set default value for type T.}\par
691 {\cf17 template} <{\cf17 typename} T>\par
692 {\cf17 typename} DefaultValue<T>::ValueProducer* DefaultValue<T>::producer_ = {\cf17 nullptr};\par
693 \par
694 {\cf20 // Points to the user-set default value for type T&.}\par
695 {\cf17 template} <{\cf17 typename} T>\par
696 T* DefaultValue<T&>::address_ = {\cf17 nullptr};\par
697 \par
698 {\cf20 // Implement this interface to define an action for function type F.}\par
699 {\cf17 template} <{\cf17 typename} F>\par
700 {\cf17 class }ActionInterface \{\par
701  {\cf17 public}:\par
702   {\cf17 typedef} {\cf17 typename} internal::Function<F>::Result Result;\par
703   {\cf17 typedef} {\cf17 typename} internal::Function<F>::ArgumentTuple ArgumentTuple;\par
704 \par
705   ActionInterface() \{\}\par
706   {\cf17 virtual} ~ActionInterface() \{\}\par
707 \par
708   {\cf20 // Performs the action.  This method is not const, as in general an}\par
709   {\cf20 // action can have side effects and be stateful.  For example, a}\par
710   {\cf20 // get-the-next-element-from-the-collection action will need to}\par
711   {\cf20 // remember the current element.}\par
712   {\cf17 virtual} Result Perform({\cf17 const} ArgumentTuple& args) = 0;\par
713 \par
714  {\cf17 private}:\par
715   ActionInterface({\cf17 const} ActionInterface&) = {\cf17 delete};\par
716   ActionInterface& operator=({\cf17 const} ActionInterface&) = {\cf17 delete};\par
717 \};\par
718 \par
719 {\cf17 template} <{\cf17 typename} F>\par
720 {\cf17 class }Action;\par
721 \par
722 {\cf20 // An Action<R(Args...)> is a copyable and IMMUTABLE (except by assignment)}\par
723 {\cf20 // object that represents an action to be taken when a mock function of type}\par
724 {\cf20 // R(Args...) is called. The implementation of Action<T> is just a}\par
725 {\cf20 // std::shared_ptr to const ActionInterface<T>. Don't inherit from Action! You}\par
726 {\cf20 // can view an object implementing ActionInterface<F> as a concrete action}\par
727 {\cf20 // (including its current state), and an Action<F> object as a handle to it.}\par
728 {\cf17 template} <{\cf17 typename} R, {\cf17 typename}... Args>\par
729 {\cf17 class }Action<R(Args...)> \{\par
730  {\cf17 private}:\par
731   {\cf17 using }F = R(Args...);\par
732 \par
733   {\cf20 // Adapter class to allow constructing Action from a legacy ActionInterface.}\par
734   {\cf20 // New code should create Actions from functors instead.}\par
735   {\cf17 struct }ActionAdapter \{\par
736     {\cf20 // Adapter must be copyable to satisfy std::function requirements.}\par
737     ::std::shared_ptr<ActionInterface<F>> impl_;\par
738 \par
739     {\cf17 template} <{\cf17 typename}... InArgs>\par
740     {\cf17 typename} internal::Function<F>::Result operator()(InArgs&&... args) \{\par
741       {\cf19 return} impl_->Perform(\par
742           ::std::forward_as_tuple(::std::forward<InArgs>(args)...));\par
743     \}\par
744   \};\par
745 \par
746   {\cf17 template} <{\cf17 typename} G>\par
747   {\cf17 using }IsCompatibleFunctor = std::is_constructible<std::function<F>, G>;\par
748 \par
749  {\cf17 public}:\par
750   {\cf17 typedef} {\cf17 typename} internal::Function<F>::Result Result;\par
751   {\cf17 typedef} {\cf17 typename} internal::Function<F>::ArgumentTuple ArgumentTuple;\par
752 \par
753   {\cf20 // Constructs a null Action.  Needed for storing Action objects in}\par
754   {\cf20 // STL containers.}\par
755   Action() \{\}\par
756 \par
757   {\cf20 // Construct an Action from a specified callable.}\par
758   {\cf20 // This cannot take std::function directly, because then Action would not be}\par
759   {\cf20 // directly constructible from lambda (it would require two conversions).}\par
760   {\cf17 template} <\par
761       {\cf17 typename} G,\par
762       {\cf17 typename} = {\cf17 typename} std::enable_if<internal::disjunction<\par
763           IsCompatibleFunctor<G>, std::is_constructible<std::function<Result()>,\par
764                                                         G>>::value>::type>\par
765   Action(G&& fun) \{  {\cf20 // NOLINT}\par
766     Init(::std::forward<G>(fun), IsCompatibleFunctor<G>());\par
767   \}\par
768 \par
769   {\cf20 // Constructs an Action from its implementation.}\par
770   {\cf17 explicit} Action(ActionInterface<F>* impl)\par
771       : fun_(ActionAdapter\{::std::shared_ptr<ActionInterface<F>>(impl)\}) \{\}\par
772 \par
773   {\cf20 // This constructor allows us to turn an Action<Func> object into an}\par
774   {\cf20 // Action<F>, as long as F's arguments can be implicitly converted}\par
775   {\cf20 // to Func's and Func's return type can be implicitly converted to F's.}\par
776   {\cf17 template} <{\cf17 typename} Func>\par
777   Action({\cf17 const} Action<Func>& action)  {\cf20 // NOLINT}\par
778       : fun_(action.fun_) \{\}\par
779 \par
780   {\cf20 // Returns true if and only if this is the DoDefault() action.}\par
781   {\cf18 bool} IsDoDefault(){\cf17  const }\{ {\cf19 return} fun_ == {\cf17 nullptr}; \}\par
782 \par
783   {\cf20 // Performs the action.  Note that this method is const even though}\par
784   {\cf20 // the corresponding method in ActionInterface is not.  The reason}\par
785   {\cf20 // is that a const Action<F> means that it cannot be re-bound to}\par
786   {\cf20 // another concrete action, not that the concrete action it binds to}\par
787   {\cf20 // cannot change state.  (Think of the difference between a const}\par
788   {\cf20 // pointer and a pointer to const.)}\par
789   Result Perform(ArgumentTuple args){\cf17  const }\{\par
790     {\cf19 if} (IsDoDefault()) \{\par
791       internal::IllegalDoDefault(__FILE__, __LINE__);\par
792     \}\par
793     {\cf19 return} internal::Apply(fun_, ::std::move(args));\par
794   \}\par
795 \par
796   {\cf20 // An action can be used as a OnceAction, since it's obviously safe to call it}\par
797   {\cf20 // once.}\par
798   {\cf17 operator} OnceAction<F>(){\cf17  const }\{  {\cf20 // NOLINT}\par
799     {\cf20 // Return a OnceAction-compatible callable that calls Perform with the}\par
800     {\cf20 // arguments it is provided. We could instead just return fun_, but then}\par
801     {\cf20 // we'd need to handle the IsDoDefault() case separately.}\par
802     {\cf17 struct }OA \{\par
803       Action<F> action;\par
804 \par
805       R operator()(Args... args) && \{\par
806         {\cf19 return} action.Perform(\par
807             std::forward_as_tuple(std::forward<Args>(args)...));\par
808       \}\par
809     \};\par
810 \par
811     {\cf19 return} OA\{*{\cf17 this}\};\par
812   \}\par
813 \par
814  {\cf17 private}:\par
815   {\cf17 template} <{\cf17 typename} G>\par
816   {\cf17 friend} {\cf17 class }Action;\par
817 \par
818   {\cf17 template} <{\cf17 typename} G>\par
819   {\cf18 void} Init(G&& g, ::std::true_type) \{\par
820     fun_ = ::std::forward<G>(g);\par
821   \}\par
822 \par
823   {\cf17 template} <{\cf17 typename} G>\par
824   {\cf18 void} Init(G&& g, ::std::false_type) \{\par
825     fun_ = IgnoreArgs<typename ::std::decay<G>::type>\{::std::forward<G>(g)\};\par
826   \}\par
827 \par
828   {\cf17 template} <{\cf17 typename} FunctionImpl>\par
829   {\cf17 struct }IgnoreArgs \{\par
830     {\cf17 template} <{\cf17 typename}... InArgs>\par
831     Result operator()({\cf17 const} InArgs&...){\cf17  const }\{\par
832       {\cf19 return} function_impl();\par
833     \}\par
834 \par
835     FunctionImpl function_impl;\par
836   \};\par
837 \par
838   {\cf20 // fun_ is an empty function if and only if this is the DoDefault() action.}\par
839   ::std::function<F> fun_;\par
840 \};\par
841 \par
842 {\cf20 // The PolymorphicAction class template makes it easy to implement a}\par
843 {\cf20 // polymorphic action (i.e. an action that can be used in mock}\par
844 {\cf20 // functions of than one type, e.g. Return()).}\par
845 {\cf20 //}\par
846 {\cf20 // To define a polymorphic action, a user first provides a COPYABLE}\par
847 {\cf20 // implementation class that has a Perform() method template:}\par
848 {\cf20 //}\par
849 {\cf20 //   class FooAction \{}\par
850 {\cf20 //    public:}\par
851 {\cf20 //     template <typename Result, typename ArgumentTuple>}\par
852 {\cf20 //     Result Perform(const ArgumentTuple& args) const \{}\par
853 {\cf20 //       // Processes the arguments and returns a result, using}\par
854 {\cf20 //       // std::get<N>(args) to get the N-th (0-based) argument in the tuple.}\par
855 {\cf20 //     \}}\par
856 {\cf20 //     ...}\par
857 {\cf20 //   \};}\par
858 {\cf20 //}\par
859 {\cf20 // Then the user creates the polymorphic action using}\par
860 {\cf20 // MakePolymorphicAction(object) where object has type FooAction.  See}\par
861 {\cf20 // the definition of Return(void) and SetArgumentPointee<N>(value) for}\par
862 {\cf20 // complete examples.}\par
863 {\cf17 template} <{\cf17 typename} Impl>\par
864 {\cf17 class }PolymorphicAction \{\par
865  {\cf17 public}:\par
866   {\cf17 explicit} PolymorphicAction({\cf17 const} Impl& impl) : impl_(impl) \{\}\par
867 \par
868   {\cf17 template} <{\cf17 typename} F>\par
869   {\cf17 operator} Action<F>(){\cf17  const }\{\par
870     {\cf19 return} Action<F>({\cf17 new} MonomorphicImpl<F>(impl_));\par
871   \}\par
872 \par
873  {\cf17 private}:\par
874   {\cf17 template} <{\cf17 typename} F>\par
875   {\cf17 class }MonomorphicImpl : {\cf17 public} ActionInterface<F> \{\par
876    {\cf17 public}:\par
877     {\cf17 typedef} {\cf17 typename} internal::Function<F>::Result Result;\par
878     {\cf17 typedef} {\cf17 typename} internal::Function<F>::ArgumentTuple ArgumentTuple;\par
879 \par
880     {\cf17 explicit} MonomorphicImpl({\cf17 const} Impl& impl) : impl_(impl) \{\}\par
881 \par
882     Result Perform({\cf17 const} ArgumentTuple& args){\cf17  override }\{\par
883       {\cf19 return} impl_.template Perform<Result>(args);\par
884     \}\par
885 \par
886    {\cf17 private}:\par
887     Impl impl_;\par
888   \};\par
889 \par
890   Impl impl_;\par
891 \};\par
892 \par
893 {\cf20 // Creates an Action from its implementation and returns it.  The}\par
894 {\cf20 // created Action object owns the implementation.}\par
895 {\cf17 template} <{\cf17 typename} F>\par
896 Action<F> MakeAction(ActionInterface<F>* impl) \{\par
897   {\cf19 return} Action<F>(impl);\par
898 \}\par
899 \par
900 {\cf20 // Creates a polymorphic action from its implementation.  This is}\par
901 {\cf20 // easier to use than the PolymorphicAction<Impl> constructor as it}\par
902 {\cf20 // doesn't require you to explicitly write the template argument, e.g.}\par
903 {\cf20 //}\par
904 {\cf20 //   MakePolymorphicAction(foo);}\par
905 {\cf20 // vs}\par
906 {\cf20 //   PolymorphicAction<TypeOfFoo>(foo);}\par
907 {\cf17 template} <{\cf17 typename} Impl>\par
908 {\cf17 inline} PolymorphicAction<Impl> MakePolymorphicAction({\cf17 const} Impl& impl) \{\par
909   {\cf19 return} PolymorphicAction<Impl>(impl);\par
910 \}\par
911 \par
912 {\cf17 namespace }internal \{\par
913 \par
914 {\cf20 // Helper struct to specialize ReturnAction to execute a move instead of a copy}\par
915 {\cf20 // on return. Useful for move-only types, but could be used on any type.}\par
916 {\cf17 template} <{\cf17 typename} T>\par
917 {\cf17 struct }ByMoveWrapper \{\par
918   {\cf17 explicit} ByMoveWrapper(T value) : payload(std::move(value)) \{\}\par
919   T payload;\par
920 \};\par
921 \par
922 {\cf20 // The general implementation of Return(R). Specializations follow below.}\par
923 {\cf17 template} <{\cf17 typename} R>\par
924 {\cf17 class }ReturnAction final \{\par
925  {\cf17 public}:\par
926   {\cf17 explicit} ReturnAction(R value) : value_(std::move(value)) \{\}\par
927 \par
928   {\cf17 template} <{\cf17 typename} U, {\cf17 typename}... Args,\par
929             {\cf17 typename} = {\cf17 typename} std::enable_if<conjunction<\par
930                 {\cf20 // See the requirements documented on Return.}\par
931                 negation<std::is_same<void, U>>,  {\cf20 //}\par
932                 negation<std::is_reference<U>>,   {\cf20 //}\par
933                 std::is_convertible<R, U>,        {\cf20 //}\par
934                 std::is_move_constructible<U>>::value>::type>\par
935   {\cf17 operator} OnceAction<U(Args...)>() && \{  {\cf20 // NOLINT}\par
936     {\cf19 return} Impl<U>(std::move(value_));\par
937   \}\par
938 \par
939   {\cf17 template} <{\cf17 typename} U, {\cf17 typename}... Args,\par
940             {\cf17 typename} = {\cf17 typename} std::enable_if<conjunction<\par
941                 {\cf20 // See the requirements documented on Return.}\par
942                 negation<std::is_same<void, U>>,   {\cf20 //}\par
943                 negation<std::is_reference<U>>,    {\cf20 //}\par
944                 std::is_convertible<const R&, U>,  {\cf20 //}\par
945                 std::is_copy_constructible<U>>::value>::type>\par
946   {\cf17 operator} Action<U(Args...)>() {\cf17 const} \{  {\cf20 // NOLINT}\par
947     {\cf19 return} Impl<U>(value_);\par
948   \}\par
949 \par
950  {\cf17 private}:\par
951   {\cf20 // Implements the Return(x) action for a mock function that returns type U.}\par
952   {\cf17 template} <{\cf17 typename} U>\par
953   {\cf17 class }Impl final \{\par
954    {\cf17 public}:\par
955     {\cf20 // The constructor used when the return value is allowed to move from the}\par
956     {\cf20 // input value (i.e. we are converting to OnceAction).}\par
957     {\cf17 explicit} Impl(R&& input_value)\par
958         : state_({\cf17 new} State(std::move(input_value))) \{\}\par
959 \par
960     {\cf20 // The constructor used when the return value is not allowed to move from}\par
961     {\cf20 // the input value (i.e. we are converting to Action).}\par
962     {\cf17 explicit} Impl({\cf17 const} R& input_value) : state_({\cf17 new} State(input_value)) \{\}\par
963 \par
964     U operator()() && \{ {\cf19 return} std::move(state_->value); \}\par
965     U operator()() {\cf17 const}& \{ {\cf19 return} state_->value; \}\par
966 \par
967    {\cf17 private}:\par
968     {\cf20 // We put our state on the heap so that the compiler-generated copy/move}\par
969     {\cf20 // constructors work correctly even when U is a reference-like type. This is}\par
970     {\cf20 // necessary only because we eagerly create State::value (see the note on}\par
971     {\cf20 // that symbol for details). If we instead had only the input value as a}\par
972     {\cf20 // member then the default constructors would work fine.}\par
973     {\cf20 //}\par
974     {\cf20 // For example, when R is std::string and U is std::string_view, value is a}\par
975     {\cf20 // reference to the string backed by input_value. The copy constructor would}\par
976     {\cf20 // copy both, so that we wind up with a new input_value object (with the}\par
977     {\cf20 // same contents) and a reference to the *old* input_value object rather}\par
978     {\cf20 // than the new one.}\par
979     {\cf17 struct }State \{\par
980       {\cf17 explicit} State({\cf17 const} R& input_value_in)\par
981           : input_value(input_value_in),\par
982             {\cf20 // Make an implicit conversion to Result before initializing the U}\par
983             {\cf20 // object we store, avoiding calling any explicit constructor of U}\par
984             {\cf20 // from R.}\par
985             {\cf20 //}\par
986             {\cf20 // This simulates the language rules: a function with return type U}\par
987             {\cf20 // that does `return R()` requires R to be implicitly convertible to}\par
988             {\cf20 // U, and uses that path for the conversion, even U Result has an}\par
989             {\cf20 // explicit constructor from R.}\par
990             value(ImplicitCast_<U>(internal::as_const(input_value))) \{\}\par
991 \par
992       {\cf20 // As above, but for the case where we're moving from the ReturnAction}\par
993       {\cf20 // object because it's being used as a OnceAction.}\par
994       {\cf17 explicit} State(R&& input_value_in)\par
995           : input_value(std::move(input_value_in)),\par
996             {\cf20 // For the same reason as above we make an implicit conversion to U}\par
997             {\cf20 // before initializing the value.}\par
998             {\cf20 //}\par
999             {\cf20 // Unlike above we provide the input value as an rvalue to the}\par
1000             {\cf20 // implicit conversion because this is a OnceAction: it's fine if it}\par
1001             {\cf20 // wants to consume the input value.}\par
1002             value(ImplicitCast_<U>(std::move(input_value))) \{\}\par
1003 \par
1004       {\cf20 // A copy of the value originally provided by the user. We retain this in}\par
1005       {\cf20 // addition to the value of the mock function's result type below in case}\par
1006       {\cf20 // the latter is a reference-like type. See the std::string_view example}\par
1007       {\cf20 // in the documentation on Return.}\par
1008       R input_value;\par
1009 \par
1010       {\cf20 // The value we actually return, as the type returned by the mock function}\par
1011       {\cf20 // itself.}\par
1012       {\cf20 //}\par
1013       {\cf20 // We eagerly initialize this here, rather than lazily doing the implicit}\par
1014       {\cf20 // conversion automatically each time Perform is called, for historical}\par
1015       {\cf20 // reasons: in 2009-11, commit a070cbd91c (Google changelist 13540126)}\par
1016       {\cf20 // made the Action<U()> conversion operator eagerly convert the R value to}\par
1017       {\cf20 // U, but without keeping the R alive. This broke the use case discussed}\par
1018       {\cf20 // in the documentation for Return, making reference-like types such as}\par
1019       {\cf20 // std::string_view not safe to use as U where the input type R is a}\par
1020       {\cf20 // value-like type such as std::string.}\par
1021       {\cf20 //}\par
1022       {\cf20 // The example the commit gave was not very clear, nor was the issue}\par
1023       {\cf20 // thread (https://github.com/google/googlemock/issues/86), but it seems}\par
1024       {\cf20 // the worry was about reference-like input types R that flatten to a}\par
1025       {\cf20 // value-like type U when being implicitly converted. An example of this}\par
1026       {\cf20 // is std::vector<bool>::reference, which is often a proxy type with an}\par
1027       {\cf20 // reference to the underlying vector:}\par
1028       {\cf20 //}\par
1029       {\cf20 //     // Helper method: have the mock function return bools according}\par
1030       {\cf20 //     // to the supplied script.}\par
1031       {\cf20 //     void SetActions(MockFunction<bool(size_t)>& mock,}\par
1032       {\cf20 //                     const std::vector<bool>& script) \{}\par
1033       {\cf20 //       for (size_t i = 0; i < script.size(); ++i) \{}\par
1034       {\cf20 //         EXPECT_CALL(mock, Call(i)).WillOnce(Return(script[i]));}\par
1035       {\cf20 //       \}}\par
1036       {\cf20 //     \}}\par
1037       {\cf20 //}\par
1038       {\cf20 //     TEST(Foo, Bar) \{}\par
1039       {\cf20 //       // Set actions using a temporary vector, whose operator[]}\par
1040       {\cf20 //       // returns proxy objects that references that will be}\par
1041       {\cf20 //       // dangling once the call to SetActions finishes and the}\par
1042       {\cf20 //       // vector is destroyed.}\par
1043       {\cf20 //       MockFunction<bool(size_t)> mock;}\par
1044       {\cf20 //       SetActions(mock, \{false, true\});}\par
1045       {\cf20 //}\par
1046       {\cf20 //       EXPECT_FALSE(mock.AsStdFunction()(0));}\par
1047       {\cf20 //       EXPECT_TRUE(mock.AsStdFunction()(1));}\par
1048       {\cf20 //     \}}\par
1049       {\cf20 //}\par
1050       {\cf20 // This eager conversion helps with a simple case like this, but doesn't}\par
1051       {\cf20 // fully make these types work in general. For example the following still}\par
1052       {\cf20 // uses a dangling reference:}\par
1053       {\cf20 //}\par
1054       {\cf20 //     TEST(Foo, Baz) \{}\par
1055       {\cf20 //       MockFunction<std::vector<std::string>()> mock;}\par
1056       {\cf20 //}\par
1057       {\cf20 //       // Return the same vector twice, and then the empty vector}\par
1058       {\cf20 //       // thereafter.}\par
1059       {\cf20 //       auto action = Return(std::initializer_list<std::string>\{}\par
1060       {\cf20 //           "taco", "burrito",}\par
1061       {\cf20 //       \});}\par
1062       {\cf20 //}\par
1063       {\cf20 //       EXPECT_CALL(mock, Call)}\par
1064       {\cf20 //           .WillOnce(action)}\par
1065       {\cf20 //           .WillOnce(action)}\par
1066       {\cf20 //           .WillRepeatedly(Return(std::vector<std::string>\{\}));}\par
1067       {\cf20 //}\par
1068       {\cf20 //       EXPECT_THAT(mock.AsStdFunction()(),}\par
1069       {\cf20 //                   ElementsAre("taco", "burrito"));}\par
1070       {\cf20 //       EXPECT_THAT(mock.AsStdFunction()(),}\par
1071       {\cf20 //                   ElementsAre("taco", "burrito"));}\par
1072       {\cf20 //       EXPECT_THAT(mock.AsStdFunction()(), IsEmpty());}\par
1073       {\cf20 //     \}}\par
1074       {\cf20 //}\par
1075       U value;\par
1076     \};\par
1077 \par
1078     {\cf17 const} std::shared_ptr<State> state_;\par
1079   \};\par
1080 \par
1081   R value_;\par
1082 \};\par
1083 \par
1084 {\cf20 // A specialization of ReturnAction<R> when R is ByMoveWrapper<T> for some T.}\par
1085 {\cf20 //}\par
1086 {\cf20 // This version applies the type system-defeating hack of moving from T even in}\par
1087 {\cf20 // the const call operator, checking at runtime that it isn't called more than}\par
1088 {\cf20 // once, since the user has declared their intent to do so by using ByMove.}\par
1089 {\cf17 template} <{\cf17 typename} T>\par
1090 {\cf17 class }ReturnAction<ByMoveWrapper<T>> final \{\par
1091  {\cf17 public}:\par
1092   {\cf17 explicit} ReturnAction(ByMoveWrapper<T> wrapper)\par
1093       : state_({\cf17 new} State(std::move(wrapper.payload))) \{\}\par
1094 \par
1095   T operator()(){\cf17  const }\{\par
1096     GTEST_CHECK_(!state_->called)\par
1097         << {\cf22 "A ByMove() action must be performed at most once."};\par
1098 \par
1099     state_->called = {\cf17 true};\par
1100     {\cf19 return} std::move(state_->value);\par
1101   \}\par
1102 \par
1103  {\cf17 private}:\par
1104   {\cf20 // We store our state on the heap so that we are copyable as required by}\par
1105   {\cf20 // Action, despite the fact that we are stateful and T may not be copyable.}\par
1106   {\cf17 struct }State \{\par
1107     {\cf17 explicit} State(T&& value_in) : value(std::move(value_in)) \{\}\par
1108 \par
1109     T value;\par
1110     {\cf18 bool} called = {\cf17 false};\par
1111   \};\par
1112 \par
1113   {\cf17 const} std::shared_ptr<State> state_;\par
1114 \};\par
1115 \par
1116 {\cf20 // Implements the ReturnNull() action.}\par
1117 {\cf17 class }ReturnNullAction \{\par
1118  {\cf17 public}:\par
1119   {\cf20 // Allows ReturnNull() to be used in any pointer-returning function. In C++11}\par
1120   {\cf20 // this is enforced by returning nullptr, and in non-C++11 by asserting a}\par
1121   {\cf20 // pointer type on compile time.}\par
1122   {\cf17 template} <{\cf17 typename} Result, {\cf17 typename} ArgumentTuple>\par
1123   {\cf17 static} Result Perform({\cf17 const} ArgumentTuple&) \{\par
1124     {\cf19 return} {\cf17 nullptr};\par
1125   \}\par
1126 \};\par
1127 \par
1128 {\cf20 // Implements the Return() action.}\par
1129 {\cf17 class }ReturnVoidAction \{\par
1130  {\cf17 public}:\par
1131   {\cf20 // Allows Return() to be used in any void-returning function.}\par
1132   {\cf17 template} <{\cf17 typename} Result, {\cf17 typename} ArgumentTuple>\par
1133   {\cf17 static} {\cf18 void} Perform({\cf17 const} ArgumentTuple&) \{\par
1134     {\cf17 static_assert}(std::is_void<Result>::value, {\cf22 "Result should be void."});\par
1135   \}\par
1136 \};\par
1137 \par
1138 {\cf20 // Implements the polymorphic ReturnRef(x) action, which can be used}\par
1139 {\cf20 // in any function that returns a reference to the type of x,}\par
1140 {\cf20 // regardless of the argument types.}\par
1141 {\cf17 template} <{\cf17 typename} T>\par
1142 {\cf17 class }ReturnRefAction \{\par
1143  {\cf17 public}:\par
1144   {\cf20 // Constructs a ReturnRefAction object from the reference to be returned.}\par
1145   {\cf17 explicit} ReturnRefAction(T& ref) : ref_(ref) \{\}  {\cf20 // NOLINT}\par
1146 \par
1147   {\cf20 // This template type conversion operator allows ReturnRef(x) to be}\par
1148   {\cf20 // used in ANY function that returns a reference to x's type.}\par
1149   {\cf17 template} <{\cf17 typename} F>\par
1150   {\cf17 operator} Action<F>(){\cf17  const }\{\par
1151     {\cf17 typedef} {\cf17 typename} Function<F>::Result Result;\par
1152     {\cf20 // Asserts that the function return type is a reference.  This}\par
1153     {\cf20 // catches the user error of using ReturnRef(x) when Return(x)}\par
1154     {\cf20 // should be used, and generates some helpful error message.}\par
1155     {\cf17 static_assert}(std::is_reference<Result>::value,\par
1156                   {\cf22 "use Return instead of ReturnRef to return a value"});\par
1157     {\cf19 return} Action<F>({\cf17 new} Impl<F>(ref_));\par
1158   \}\par
1159 \par
1160  {\cf17 private}:\par
1161   {\cf20 // Implements the ReturnRef(x) action for a particular function type F.}\par
1162   {\cf17 template} <{\cf17 typename} F>\par
1163   {\cf17 class }Impl : {\cf17 public} ActionInterface<F> \{\par
1164    {\cf17 public}:\par
1165     {\cf17 typedef} {\cf17 typename} Function<F>::Result Result;\par
1166     {\cf17 typedef} {\cf17 typename} Function<F>::ArgumentTuple ArgumentTuple;\par
1167 \par
1168     {\cf17 explicit} Impl(T& ref) : ref_(ref) \{\}  {\cf20 // NOLINT}\par
1169 \par
1170     Result Perform({\cf17 const} ArgumentTuple&){\cf17  override }\{ {\cf19 return} ref_; \}\par
1171 \par
1172    {\cf17 private}:\par
1173     T& ref_;\par
1174   \};\par
1175 \par
1176   T& ref_;\par
1177 \};\par
1178 \par
1179 {\cf20 // Implements the polymorphic ReturnRefOfCopy(x) action, which can be}\par
1180 {\cf20 // used in any function that returns a reference to the type of x,}\par
1181 {\cf20 // regardless of the argument types.}\par
1182 {\cf17 template} <{\cf17 typename} T>\par
1183 {\cf17 class }ReturnRefOfCopyAction \{\par
1184  {\cf17 public}:\par
1185   {\cf20 // Constructs a ReturnRefOfCopyAction object from the reference to}\par
1186   {\cf20 // be returned.}\par
1187   {\cf17 explicit} ReturnRefOfCopyAction({\cf17 const} T& value) : value_(value) \{\}  {\cf20 // NOLINT}\par
1188 \par
1189   {\cf20 // This template type conversion operator allows ReturnRefOfCopy(x) to be}\par
1190   {\cf20 // used in ANY function that returns a reference to x's type.}\par
1191   {\cf17 template} <{\cf17 typename} F>\par
1192   {\cf17 operator} Action<F>(){\cf17  const }\{\par
1193     {\cf17 typedef} {\cf17 typename} Function<F>::Result Result;\par
1194     {\cf20 // Asserts that the function return type is a reference.  This}\par
1195     {\cf20 // catches the user error of using ReturnRefOfCopy(x) when Return(x)}\par
1196     {\cf20 // should be used, and generates some helpful error message.}\par
1197     {\cf17 static_assert}(std::is_reference<Result>::value,\par
1198                   {\cf22 "use Return instead of ReturnRefOfCopy to return a value"});\par
1199     {\cf19 return} Action<F>({\cf17 new} Impl<F>(value_));\par
1200   \}\par
1201 \par
1202  {\cf17 private}:\par
1203   {\cf20 // Implements the ReturnRefOfCopy(x) action for a particular function type F.}\par
1204   {\cf17 template} <{\cf17 typename} F>\par
1205   {\cf17 class }Impl : {\cf17 public} ActionInterface<F> \{\par
1206    {\cf17 public}:\par
1207     {\cf17 typedef} {\cf17 typename} Function<F>::Result Result;\par
1208     {\cf17 typedef} {\cf17 typename} Function<F>::ArgumentTuple ArgumentTuple;\par
1209 \par
1210     {\cf17 explicit} Impl({\cf17 const} T& value) : value_(value) \{\}  {\cf20 // NOLINT}\par
1211 \par
1212     Result Perform({\cf17 const} ArgumentTuple&){\cf17  override }\{ {\cf19 return} value_; \}\par
1213 \par
1214    {\cf17 private}:\par
1215     T value_;\par
1216   \};\par
1217 \par
1218   {\cf17 const} T value_;\par
1219 \};\par
1220 \par
1221 {\cf20 // Implements the polymorphic ReturnRoundRobin(v) action, which can be}\par
1222 {\cf20 // used in any function that returns the element_type of v.}\par
1223 {\cf17 template} <{\cf17 typename} T>\par
1224 {\cf17 class }ReturnRoundRobinAction \{\par
1225  {\cf17 public}:\par
1226   {\cf17 explicit} ReturnRoundRobinAction(std::vector<T> values) \{\par
1227     GTEST_CHECK_(!values.empty())\par
1228         << {\cf22 "ReturnRoundRobin requires at least one element."};\par
1229     state_->values = std::move(values);\par
1230   \}\par
1231 \par
1232   {\cf17 template} <{\cf17 typename}... Args>\par
1233   T operator()(Args&&...){\cf17  const }\{\par
1234     {\cf19 return} state_->Next();\par
1235   \}\par
1236 \par
1237  {\cf17 private}:\par
1238   {\cf17 struct }State \{\par
1239     T Next() \{\par
1240       T ret_val = values[i++];\par
1241       {\cf19 if} (i == values.size()) i = 0;\par
1242       {\cf19 return} ret_val;\par
1243     \}\par
1244 \par
1245     std::vector<T> values;\par
1246     {\cf18 size_t} i = 0;\par
1247   \};\par
1248   std::shared_ptr<State> state_ = std::make_shared<State>();\par
1249 \};\par
1250 \par
1251 {\cf20 // Implements the polymorphic DoDefault() action.}\par
1252 {\cf17 class }DoDefaultAction \{\par
1253  {\cf17 public}:\par
1254   {\cf20 // This template type conversion operator allows DoDefault() to be}\par
1255   {\cf20 // used in any function.}\par
1256   {\cf17 template} <{\cf17 typename} F>\par
1257   {\cf17 operator} Action<F>(){\cf17  const }\{\par
1258     {\cf19 return} Action<F>();\par
1259   \}  {\cf20 // NOLINT}\par
1260 \};\par
1261 \par
1262 {\cf20 // Implements the Assign action to set a given pointer referent to a}\par
1263 {\cf20 // particular value.}\par
1264 {\cf17 template} <{\cf17 typename} T1, {\cf17 typename} T2>\par
1265 {\cf17 class }AssignAction \{\par
1266  {\cf17 public}:\par
1267   AssignAction(T1* ptr, T2 value) : ptr_(ptr), value_(value) \{\}\par
1268 \par
1269   {\cf17 template} <{\cf17 typename} Result, {\cf17 typename} ArgumentTuple>\par
1270   {\cf18 void} Perform({\cf17 const} ArgumentTuple& {\cf20 /* args */}){\cf17  const }\{\par
1271     *ptr_ = value_;\par
1272   \}\par
1273 \par
1274  {\cf17 private}:\par
1275   T1* {\cf17 const} ptr_;\par
1276   {\cf17 const} T2 value_;\par
1277 \};\par
1278 \par
1279 {\cf21 #if !GTEST_OS_WINDOWS_MOBILE}\par
1280 \par
1281 {\cf20 // Implements the SetErrnoAndReturn action to simulate return from}\par
1282 {\cf20 // various system calls and libc functions.}\par
1283 {\cf17 template} <{\cf17 typename} T>\par
1284 {\cf17 class }SetErrnoAndReturnAction \{\par
1285  {\cf17 public}:\par
1286   SetErrnoAndReturnAction({\cf18 int} errno_value, T result)\par
1287       : errno_(errno_value), result_(result) \{\}\par
1288   {\cf17 template} <{\cf17 typename} Result, {\cf17 typename} ArgumentTuple>\par
1289   Result Perform({\cf17 const} ArgumentTuple& {\cf20 /* args */}){\cf17  const }\{\par
1290     errno = errno_;\par
1291     {\cf19 return} result_;\par
1292   \}\par
1293 \par
1294  {\cf17 private}:\par
1295   {\cf17 const} {\cf18 int} errno_;\par
1296   {\cf17 const} T result_;\par
1297 \};\par
1298 \par
1299 {\cf21 #endif  }{\cf20 // !GTEST_OS_WINDOWS_MOBILE}\par
1300 \par
1301 {\cf20 // Implements the SetArgumentPointee<N>(x) action for any function}\par
1302 {\cf20 // whose N-th argument (0-based) is a pointer to x's type.}\par
1303 {\cf17 template} <{\cf18 size_t} N, {\cf17 typename} A, {\cf17 typename} = {\cf18 void}>\par
1304 {\cf17 struct }SetArgumentPointeeAction \{\par
1305   A value;\par
1306 \par
1307   {\cf17 template} <{\cf17 typename}... Args>\par
1308   {\cf18 void} operator()({\cf17 const} Args&... args){\cf17  const }\{\par
1309     *::std::get<N>(std::tie(args...)) = value;\par
1310   \}\par
1311 \};\par
1312 \par
1313 {\cf20 // Implements the Invoke(object_ptr, &Class::Method) action.}\par
1314 {\cf17 template} <{\cf17 class} Class, {\cf17 typename} MethodPtr>\par
1315 {\cf17 struct }InvokeMethodAction \{\par
1316   Class* {\cf17 const} obj_ptr;\par
1317   {\cf17 const} MethodPtr method_ptr;\par
1318 \par
1319   {\cf17 template} <{\cf17 typename}... Args>\par
1320   {\cf17 auto} operator()(Args&&... args) {\cf17 const}\par
1321       -> {\cf17 decltype}((obj_ptr->*method_ptr)(std::forward<Args>(args)...)) \{\par
1322     {\cf19 return} (obj_ptr->*method_ptr)(std::forward<Args>(args)...);\par
1323   \}\par
1324 \};\par
1325 \par
1326 {\cf20 // Implements the InvokeWithoutArgs(f) action.  The template argument}\par
1327 {\cf20 // FunctionImpl is the implementation type of f, which can be either a}\par
1328 {\cf20 // function pointer or a functor.  InvokeWithoutArgs(f) can be used as an}\par
1329 {\cf20 // Action<F> as long as f's type is compatible with F.}\par
1330 {\cf17 template} <{\cf17 typename} FunctionImpl>\par
1331 {\cf17 struct }InvokeWithoutArgsAction \{\par
1332   FunctionImpl function_impl;\par
1333 \par
1334   {\cf20 // Allows InvokeWithoutArgs(f) to be used as any action whose type is}\par
1335   {\cf20 // compatible with f.}\par
1336   {\cf17 template} <{\cf17 typename}... Args>\par
1337   {\cf17 auto} operator()({\cf17 const} Args&...) -> {\cf17 decltype}(function_impl()) \{\par
1338     {\cf19 return} function_impl();\par
1339   \}\par
1340 \};\par
1341 \par
1342 {\cf20 // Implements the InvokeWithoutArgs(object_ptr, &Class::Method) action.}\par
1343 {\cf17 template} <{\cf17 class} Class, {\cf17 typename} MethodPtr>\par
1344 {\cf17 struct }InvokeMethodWithoutArgsAction \{\par
1345   Class* {\cf17 const} obj_ptr;\par
1346   {\cf17 const} MethodPtr method_ptr;\par
1347 \par
1348   {\cf17 using }ReturnType =\par
1349       {\cf17 decltype}((std::declval<Class*>()->*std::declval<MethodPtr>())());\par
1350 \par
1351   {\cf17 template} <{\cf17 typename}... Args>\par
1352   ReturnType operator()({\cf17 const} Args&...){\cf17  const }\{\par
1353     {\cf19 return} (obj_ptr->*method_ptr)();\par
1354   \}\par
1355 \};\par
1356 \par
1357 {\cf20 // Implements the IgnoreResult(action) action.}\par
1358 {\cf17 template} <{\cf17 typename} A>\par
1359 {\cf17 class }IgnoreResultAction \{\par
1360  {\cf17 public}:\par
1361   {\cf17 explicit} IgnoreResultAction({\cf17 const} A& action) : action_(action) \{\}\par
1362 \par
1363   {\cf17 template} <{\cf17 typename} F>\par
1364   {\cf17 operator} Action<F>(){\cf17  const }\{\par
1365     {\cf20 // Assert statement belongs here because this is the best place to verify}\par
1366     {\cf20 // conditions on F. It produces the clearest error messages}\par
1367     {\cf20 // in most compilers.}\par
1368     {\cf20 // Impl really belongs in this scope as a local class but can't}\par
1369     {\cf20 // because MSVC produces duplicate symbols in different translation units}\par
1370     {\cf20 // in this case. Until MS fixes that bug we put Impl into the class scope}\par
1371     {\cf20 // and put the typedef both here (for use in assert statement) and}\par
1372     {\cf20 // in the Impl class. But both definitions must be the same.}\par
1373     {\cf17 typedef} {\cf17 typename} internal::Function<F>::Result Result;\par
1374 \par
1375     {\cf20 // Asserts at compile time that F returns void.}\par
1376     {\cf17 static_assert}(std::is_void<Result>::value, {\cf22 "Result type should be void."});\par
1377 \par
1378     {\cf19 return} Action<F>({\cf17 new} Impl<F>(action_));\par
1379   \}\par
1380 \par
1381  {\cf17 private}:\par
1382   {\cf17 template} <{\cf17 typename} F>\par
1383   {\cf17 class }Impl : {\cf17 public} ActionInterface<F> \{\par
1384    {\cf17 public}:\par
1385     {\cf17 typedef} {\cf17 typename} internal::Function<F>::Result Result;\par
1386     {\cf17 typedef} {\cf17 typename} internal::Function<F>::ArgumentTuple ArgumentTuple;\par
1387 \par
1388     {\cf17 explicit} Impl({\cf17 const} A& action) : action_(action) \{\}\par
1389 \par
1390     {\cf18 void} Perform({\cf17 const} ArgumentTuple& args){\cf17  override }\{\par
1391       {\cf20 // Performs the action and ignores its result.}\par
1392       action_.Perform(args);\par
1393     \}\par
1394 \par
1395    {\cf17 private}:\par
1396     {\cf20 // Type OriginalFunction is the same as F except that its return}\par
1397     {\cf20 // type is IgnoredValue.}\par
1398     {\cf17 typedef}\par
1399         {\cf17 typename} internal::Function<F>::MakeResultIgnoredValue OriginalFunction;\par
1400 \par
1401     {\cf17 const} Action<OriginalFunction> action_;\par
1402   \};\par
1403 \par
1404   {\cf17 const} A action_;\par
1405 \};\par
1406 \par
1407 {\cf17 template} <{\cf17 typename} InnerAction, {\cf18 size_t}... I>\par
1408 {\cf17 struct }WithArgsAction \{\par
1409   InnerAction inner_action;\par
1410 \par
1411   {\cf20 // The signature of the function as seen by the inner action, given an out}\par
1412   {\cf20 // action with the given result and argument types.}\par
1413   {\cf17 template} <{\cf17 typename} R, {\cf17 typename}... Args>\par
1414   {\cf17 using }InnerSignature =\par
1415       R({\cf17 typename} std::tuple_element<I, std::tuple<Args...>>::type...);\par
1416 \par
1417   {\cf20 // Rather than a call operator, we must define conversion operators to}\par
1418   {\cf20 // particular action types. This is necessary for embedded actions like}\par
1419   {\cf20 // DoDefault(), which rely on an action conversion operators rather than}\par
1420   {\cf20 // providing a call operator because even with a particular set of arguments}\par
1421   {\cf20 // they don't have a fixed return type.}\par
1422 \par
1423   {\cf17 template} <{\cf17 typename} R, {\cf17 typename}... Args,\par
1424             {\cf17 typename} std::enable_if<\par
1425                 std::is_convertible<\par
1426                     InnerAction,\par
1427                     {\cf20 // Unfortunately we can't use the InnerSignature alias here;}\par
1428                     {\cf20 // MSVC complains about the I parameter pack not being}\par
1429                     {\cf20 // expanded (error C3520) despite it being expanded in the}\par
1430                     {\cf20 // type alias.}\par
1431                     OnceAction<R({\cf17 typename} std::tuple_element<\par
1432                                  I, std::tuple<Args...>>::type...)>>::value,\par
1433                 {\cf18 int}>::type = 0>\par
1434   {\cf17 operator} OnceAction<R(Args...)>() && \{  {\cf20 // NOLINT}\par
1435     {\cf17 struct }OA \{\par
1436       OnceAction<InnerSignature<R, Args...>> inner_action;\par
1437 \par
1438       R operator()(Args&&... args) && \{\par
1439         {\cf19 return} std::move(inner_action)\par
1440             .Call(std::get<I>(\par
1441                 std::forward_as_tuple(std::forward<Args>(args)...))...);\par
1442       \}\par
1443     \};\par
1444 \par
1445     {\cf19 return} OA\{std::move(inner_action)\};\par
1446   \}\par
1447 \par
1448   {\cf17 template} <{\cf17 typename} R, {\cf17 typename}... Args,\par
1449             {\cf17 typename} std::enable_if<\par
1450                 std::is_convertible<\par
1451                     {\cf17 const} InnerAction&,\par
1452                     {\cf20 // Unfortunately we can't use the InnerSignature alias here;}\par
1453                     {\cf20 // MSVC complains about the I parameter pack not being}\par
1454                     {\cf20 // expanded (error C3520) despite it being expanded in the}\par
1455                     {\cf20 // type alias.}\par
1456                     Action<R({\cf17 typename} std::tuple_element<\par
1457                              I, std::tuple<Args...>>::type...)>>::value,\par
1458                 {\cf18 int}>::type = 0>\par
1459   {\cf17 operator} Action<R(Args...)>() {\cf17 const} \{  {\cf20 // NOLINT}\par
1460     Action<InnerSignature<R, Args...>> converted(inner_action);\par
1461 \par
1462     {\cf19 return} [converted](Args&&... args) -> R \{\par
1463       {\cf19 return} converted.Perform(std::forward_as_tuple(\par
1464           std::get<I>(std::forward_as_tuple(std::forward<Args>(args)...))...));\par
1465     \};\par
1466   \}\par
1467 \};\par
1468 \par
1469 {\cf17 template} <{\cf17 typename}... Actions>\par
1470 {\cf17 class }DoAllAction;\par
1471 \par
1472 {\cf20 // Base case: only a single action.}\par
1473 {\cf17 template} <{\cf17 typename} FinalAction>\par
1474 {\cf17 class }DoAllAction<FinalAction> \{\par
1475  {\cf17 public}:\par
1476   {\cf17 struct }UserConstructorTag \{\};\par
1477 \par
1478   {\cf17 template} <{\cf17 typename} T>\par
1479   {\cf17 explicit} DoAllAction(UserConstructorTag, T&& action)\par
1480       : final_action_(std::forward<T>(action)) \{\}\par
1481 \par
1482   {\cf20 // Rather than a call operator, we must define conversion operators to}\par
1483   {\cf20 // particular action types. This is necessary for embedded actions like}\par
1484   {\cf20 // DoDefault(), which rely on an action conversion operators rather than}\par
1485   {\cf20 // providing a call operator because even with a particular set of arguments}\par
1486   {\cf20 // they don't have a fixed return type.}\par
1487 \par
1488   {\cf17 template} <{\cf17 typename} R, {\cf17 typename}... Args,\par
1489             {\cf17 typename} std::enable_if<\par
1490                 std::is_convertible<FinalAction, OnceAction<R(Args...)>>::value,\par
1491                 {\cf18 int}>::type = 0>\par
1492   {\cf17 operator} OnceAction<R(Args...)>() && \{  {\cf20 // NOLINT}\par
1493     {\cf19 return} std::move(final_action_);\par
1494   \}\par
1495 \par
1496   {\cf17 template} <\par
1497       {\cf17 typename} R, {\cf17 typename}... Args,\par
1498       {\cf17 typename} std::enable_if<\par
1499           std::is_convertible<{\cf17 const} FinalAction&, Action<R(Args...)>>::value,\par
1500           {\cf18 int}>::type = 0>\par
1501   {\cf17 operator} Action<R(Args...)>() {\cf17 const} \{  {\cf20 // NOLINT}\par
1502     {\cf19 return} final_action_;\par
1503   \}\par
1504 \par
1505  {\cf17 private}:\par
1506   FinalAction final_action_;\par
1507 \};\par
1508 \par
1509 {\cf20 // Recursive case: support N actions by calling the initial action and then}\par
1510 {\cf20 // calling through to the base class containing N-1 actions.}\par
1511 {\cf17 template} <{\cf17 typename} InitialAction, {\cf17 typename}... OtherActions>\par
1512 {\cf17 class }DoAllAction<InitialAction, OtherActions...>\par
1513     : {\cf17 private} DoAllAction<OtherActions...> \{\par
1514  {\cf17 private}:\par
1515   {\cf17 using }Base = DoAllAction<OtherActions...>;\par
1516 \par
1517   {\cf20 // The type of reference that should be provided to an initial action for a}\par
1518   {\cf20 // mocked function parameter of type T.}\par
1519   {\cf20 //}\par
1520   {\cf20 // There are two quirks here:}\par
1521   {\cf20 //}\par
1522   {\cf20 //  *  Unlike most forwarding functions, we pass scalars through by value.}\par
1523   {\cf20 //     This isn't strictly necessary because an lvalue reference would work}\par
1524   {\cf20 //     fine too and be consistent with other non-reference types, but it's}\par
1525   {\cf20 //     perhaps less surprising.}\par
1526   {\cf20 //}\par
1527   {\cf20 //     For example if the mocked function has signature void(int), then it}\par
1528   {\cf20 //     might seem surprising for the user's initial action to need to be}\par
1529   {\cf20 //     convertible to Action<void(const int&)>. This is perhaps less}\par
1530   {\cf20 //     surprising for a non-scalar type where there may be a performance}\par
1531   {\cf20 //     impact, or it might even be impossible, to pass by value.}\par
1532   {\cf20 //}\par
1533   {\cf20 //  *  More surprisingly, `const T&` is often not a const reference type.}\par
1534   {\cf20 //     By the reference collapsing rules in C++17 [dcl.ref]/6, if T refers to}\par
1535   {\cf20 //     U& or U&& for some non-scalar type U, then InitialActionArgType<T> is}\par
1536   {\cf20 //     U&. In other words, we may hand over a non-const reference.}\par
1537   {\cf20 //}\par
1538   {\cf20 //     So for example, given some non-scalar type Obj we have the following}\par
1539   {\cf20 //     mappings:}\par
1540   {\cf20 //}\par
1541   {\cf20 //            T               InitialActionArgType<T>}\par
1542   {\cf20 //         -------            -----------------------}\par
1543   {\cf20 //         Obj                const Obj&}\par
1544   {\cf20 //         Obj&               Obj&}\par
1545   {\cf20 //         Obj&&              Obj&}\par
1546   {\cf20 //         const Obj          const Obj&}\par
1547   {\cf20 //         const Obj&         const Obj&}\par
1548   {\cf20 //         const Obj&&        const Obj&}\par
1549   {\cf20 //}\par
1550   {\cf20 //     In other words, the initial actions get a mutable view of an non-scalar}\par
1551   {\cf20 //     argument if and only if the mock function itself accepts a non-const}\par
1552   {\cf20 //     reference type. They are never given an rvalue reference to an}\par
1553   {\cf20 //     non-scalar type.}\par
1554   {\cf20 //}\par
1555   {\cf20 //     This situation makes sense if you imagine use with a matcher that is}\par
1556   {\cf20 //     designed to write through a reference. For example, if the caller wants}\par
1557   {\cf20 //     to fill in a reference argument and then return a canned value:}\par
1558   {\cf20 //}\par
1559   {\cf20 //         EXPECT_CALL(mock, Call)}\par
1560   {\cf20 //             .WillOnce(DoAll(SetArgReferee<0>(17), Return(19)));}\par
1561   {\cf20 //}\par
1562   {\cf17 template} <{\cf17 typename} T>\par
1563   {\cf17 using }InitialActionArgType =\par
1564       {\cf17 typename} std::conditional<std::is_scalar<T>::value, T, {\cf17 const} T&>::type;\par
1565 \par
1566  {\cf17 public}:\par
1567   {\cf17 struct }UserConstructorTag \{\};\par
1568 \par
1569   {\cf17 template} <{\cf17 typename} T, {\cf17 typename}... U>\par
1570   {\cf17 explicit} DoAllAction(UserConstructorTag, T&& initial_action,\par
1571                        U&&... other_actions)\par
1572       : Base(\{\}, std::forward<U>(other_actions)...),\par
1573         initial_action_(std::forward<T>(initial_action)) \{\}\par
1574 \par
1575   {\cf17 template} <{\cf17 typename} R, {\cf17 typename}... Args,\par
1576             {\cf17 typename} std::enable_if<\par
1577                 conjunction<\par
1578                     {\cf20 // Both the initial action and the rest must support}\par
1579                     {\cf20 // conversion to OnceAction.}\par
1580                     std::is_convertible<\par
1581                         InitialAction,\par
1582                         OnceAction<void(InitialActionArgType<Args>...)>>,\par
1583                     std::is_convertible<Base, OnceAction<R(Args...)>>>::value,\par
1584                 {\cf18 int}>::type = 0>\par
1585   {\cf17 operator} OnceAction<R(Args...)>() && \{  {\cf20 // NOLINT}\par
1586     {\cf20 // Return an action that first calls the initial action with arguments}\par
1587     {\cf20 // filtered through InitialActionArgType, then forwards arguments directly}\par
1588     {\cf20 // to the base class to deal with the remaining actions.}\par
1589     {\cf17 struct }OA \{\par
1590       OnceAction<void(InitialActionArgType<Args>...)> initial_action;\par
1591       OnceAction<R(Args...)> remaining_actions;\par
1592 \par
1593       R operator()(Args... args) && \{\par
1594         std::move(initial_action)\par
1595             .Call({\cf17 static_cast<}InitialActionArgType<Args>{\cf17 >}(args)...);\par
1596 \par
1597         {\cf19 return} std::move(remaining_actions).Call(std::forward<Args>(args)...);\par
1598       \}\par
1599     \};\par
1600 \par
1601     {\cf19 return} OA\{\par
1602         std::move(initial_action_),\par
1603         std::move({\cf17 static_cast<}Base&{\cf17 >}(*{\cf17 this})),\par
1604     \};\par
1605   \}\par
1606 \par
1607   {\cf17 template} <\par
1608       {\cf17 typename} R, {\cf17 typename}... Args,\par
1609       {\cf17 typename} std::enable_if<\par
1610           conjunction<\par
1611               {\cf20 // Both the initial action and the rest must support conversion to}\par
1612               {\cf20 // Action.}\par
1613               std::is_convertible<{\cf17 const} InitialAction&,\par
1614                                   Action<void(InitialActionArgType<Args>...)>>,\par
1615               std::is_convertible<{\cf17 const} Base&, Action<R(Args...)>>>::value,\par
1616           {\cf18 int}>::type = 0>\par
1617   {\cf17 operator} Action<R(Args...)>() {\cf17 const} \{  {\cf20 // NOLINT}\par
1618     {\cf20 // Return an action that first calls the initial action with arguments}\par
1619     {\cf20 // filtered through InitialActionArgType, then forwards arguments directly}\par
1620     {\cf20 // to the base class to deal with the remaining actions.}\par
1621     {\cf17 struct }OA \{\par
1622       Action<void(InitialActionArgType<Args>...)> initial_action;\par
1623       Action<R(Args...)> remaining_actions;\par
1624 \par
1625       R operator()(Args... args){\cf17  const }\{\par
1626         initial_action.Perform(std::forward_as_tuple(\par
1627             {\cf17 static_cast<}InitialActionArgType<Args>{\cf17 >}(args)...));\par
1628 \par
1629         {\cf19 return} remaining_actions.Perform(\par
1630             std::forward_as_tuple(std::forward<Args>(args)...));\par
1631       \}\par
1632     \};\par
1633 \par
1634     {\cf19 return} OA\{\par
1635         initial_action_,\par
1636         {\cf17 static_cast<}{\cf17 const }Base&{\cf17 >}(*this),\par
1637     \};\par
1638   \}\par
1639 \par
1640  {\cf17 private}:\par
1641   InitialAction initial_action_;\par
1642 \};\par
1643 \par
1644 {\cf17 template} <{\cf17 typename} T, {\cf17 typename}... Params>\par
1645 {\cf17 struct }ReturnNewAction \{\par
1646   T* operator()(){\cf17  const }\{\par
1647     {\cf19 return} internal::Apply(\par
1648         []({\cf17 const} Params&... unpacked_params) \{\par
1649           {\cf19 return} {\cf17 new} T(unpacked_params...);\par
1650         \},\par
1651         params);\par
1652   \}\par
1653   std::tuple<Params...> params;\par
1654 \};\par
1655 \par
1656 {\cf17 template} <{\cf18 size_t} k>\par
1657 {\cf17 struct }ReturnArgAction \{\par
1658   {\cf17 template} <{\cf17 typename}... Args,\par
1659             {\cf17 typename} = {\cf17 typename} std::enable_if<(k < {\cf17 sizeof}...(Args))>::type>\par
1660   {\cf17 auto} operator()(Args&&... args) {\cf17 const} -> {\cf17 decltype}(std::get<k>(\par
1661       std::forward_as_tuple(std::forward<Args>(args)...))) \{\par
1662     {\cf19 return} std::get<k>(std::forward_as_tuple(std::forward<Args>(args)...));\par
1663   \}\par
1664 \};\par
1665 \par
1666 {\cf17 template} <{\cf18 size_t} k, {\cf17 typename} Ptr>\par
1667 {\cf17 struct }SaveArgAction \{\par
1668   Ptr pointer;\par
1669 \par
1670   {\cf17 template} <{\cf17 typename}... Args>\par
1671   {\cf18 void} operator()({\cf17 const} Args&... args){\cf17  const }\{\par
1672     *pointer = std::get<k>(std::tie(args...));\par
1673   \}\par
1674 \};\par
1675 \par
1676 {\cf17 template} <{\cf18 size_t} k, {\cf17 typename} Ptr>\par
1677 {\cf17 struct }SaveArgPointeeAction \{\par
1678   Ptr pointer;\par
1679 \par
1680   {\cf17 template} <{\cf17 typename}... Args>\par
1681   {\cf18 void} operator()({\cf17 const} Args&... args){\cf17  const }\{\par
1682     *pointer = *std::get<k>(std::tie(args...));\par
1683   \}\par
1684 \};\par
1685 \par
1686 {\cf17 template} <{\cf18 size_t} k, {\cf17 typename} T>\par
1687 {\cf17 struct }SetArgRefereeAction \{\par
1688   T value;\par
1689 \par
1690   {\cf17 template} <{\cf17 typename}... Args>\par
1691   {\cf18 void} operator()(Args&&... args){\cf17  const }\{\par
1692     {\cf17 using }argk_type =\par
1693         typename ::std::tuple_element<k, std::tuple<Args...>>::type;\par
1694     {\cf17 static_assert}(std::is_lvalue_reference<argk_type>::value,\par
1695                   {\cf22 "Argument must be a reference type."});\par
1696     std::get<k>(std::tie(args...)) = value;\par
1697   \}\par
1698 \};\par
1699 \par
1700 {\cf17 template} <{\cf18 size_t} k, {\cf17 typename} I1, {\cf17 typename} I2>\par
1701 {\cf17 struct }SetArrayArgumentAction \{\par
1702   I1 first;\par
1703   I2 last;\par
1704 \par
1705   {\cf17 template} <{\cf17 typename}... Args>\par
1706   {\cf18 void} operator()({\cf17 const} Args&... args){\cf17  const }\{\par
1707     {\cf17 auto} value = std::get<k>(std::tie(args...));\par
1708     {\cf19 for} ({\cf17 auto} it = first; it != last; ++it, (void)++value) \{\par
1709       *value = *it;\par
1710     \}\par
1711   \}\par
1712 \};\par
1713 \par
1714 {\cf17 template} <{\cf18 size_t} k>\par
1715 {\cf17 struct }DeleteArgAction \{\par
1716   {\cf17 template} <{\cf17 typename}... Args>\par
1717   {\cf18 void} operator()({\cf17 const} Args&... args){\cf17  const }\{\par
1718     {\cf17 delete} std::get<k>(std::tie(args...));\par
1719   \}\par
1720 \};\par
1721 \par
1722 {\cf17 template} <{\cf17 typename} Ptr>\par
1723 {\cf17 struct }ReturnPointeeAction \{\par
1724   Ptr pointer;\par
1725   {\cf17 template} <{\cf17 typename}... Args>\par
1726   {\cf17 auto} operator()({\cf17 const} Args&...) {\cf17 const} -> {\cf17 decltype}(*pointer) \{\par
1727     {\cf19 return} *pointer;\par
1728   \}\par
1729 \};\par
1730 \par
1731 {\cf21 #if GTEST_HAS_EXCEPTIONS}\par
1732 {\cf17 template} <{\cf17 typename} T>\par
1733 {\cf17 struct }ThrowAction \{\par
1734   T exception;\par
1735   {\cf20 // We use a conversion operator to adapt to any return type.}\par
1736   {\cf17 template} <{\cf17 typename} R, {\cf17 typename}... Args>\par
1737   {\cf17 operator} Action<R(Args...)>() {\cf17 const} \{  {\cf20 // NOLINT}\par
1738     T copy = exception;\par
1739     {\cf19 return} [copy](Args...) -> R \{ {\cf19 throw} copy; \};\par
1740   \}\par
1741 \};\par
1742 {\cf21 #endif  }{\cf20 // GTEST_HAS_EXCEPTIONS}\par
1743 \par
1744 \}  {\cf20 // namespace internal}\par
1745 \par
1746 {\cf20 // An Unused object can be implicitly constructed from ANY value.}\par
1747 {\cf20 // This is handy when defining actions that ignore some or all of the}\par
1748 {\cf20 // mock function arguments.  For example, given}\par
1749 {\cf20 //}\par
1750 {\cf20 //   MOCK_METHOD3(Foo, double(const string& label, double x, double y));}\par
1751 {\cf20 //   MOCK_METHOD3(Bar, double(int index, double x, double y));}\par
1752 {\cf20 //}\par
1753 {\cf20 // instead of}\par
1754 {\cf20 //}\par
1755 {\cf20 //   double DistanceToOriginWithLabel(const string& label, double x, double y) \{}\par
1756 {\cf20 //     return sqrt(x*x + y*y);}\par
1757 {\cf20 //   \}}\par
1758 {\cf20 //   double DistanceToOriginWithIndex(int index, double x, double y) \{}\par
1759 {\cf20 //     return sqrt(x*x + y*y);}\par
1760 {\cf20 //   \}}\par
1761 {\cf20 //   ...}\par
1762 {\cf20 //   EXPECT_CALL(mock, Foo("abc", _, _))}\par
1763 {\cf20 //       .WillOnce(Invoke(DistanceToOriginWithLabel));}\par
1764 {\cf20 //   EXPECT_CALL(mock, Bar(5, _, _))}\par
1765 {\cf20 //       .WillOnce(Invoke(DistanceToOriginWithIndex));}\par
1766 {\cf20 //}\par
1767 {\cf20 // you could write}\par
1768 {\cf20 //}\par
1769 {\cf20 //   // We can declare any uninteresting argument as Unused.}\par
1770 {\cf20 //   double DistanceToOrigin(Unused, double x, double y) \{}\par
1771 {\cf20 //     return sqrt(x*x + y*y);}\par
1772 {\cf20 //   \}}\par
1773 {\cf20 //   ...}\par
1774 {\cf20 //   EXPECT_CALL(mock, Foo("abc", _, _)).WillOnce(Invoke(DistanceToOrigin));}\par
1775 {\cf20 //   EXPECT_CALL(mock, Bar(5, _, _)).WillOnce(Invoke(DistanceToOrigin));}\par
1776 {\cf17 typedef} internal::IgnoredValue Unused;\par
1777 \par
1778 {\cf20 // Creates an action that does actions a1, a2, ..., sequentially in}\par
1779 {\cf20 // each invocation. All but the last action will have a readonly view of the}\par
1780 {\cf20 // arguments.}\par
1781 {\cf17 template} <{\cf17 typename}... Action>\par
1782 internal::DoAllAction<typename std::decay<Action>::type...> DoAll(\par
1783     Action&&... action) \{\par
1784   {\cf19 return} internal::DoAllAction<typename std::decay<Action>::type...>(\par
1785       \{\}, std::forward<Action>(action)...);\par
1786 \}\par
1787 \par
1788 {\cf20 // WithArg<k>(an_action) creates an action that passes the k-th}\par
1789 {\cf20 // (0-based) argument of the mock function to an_action and performs}\par
1790 {\cf20 // it.  It adapts an action accepting one argument to one that accepts}\par
1791 {\cf20 // multiple arguments.  For convenience, we also provide}\par
1792 {\cf20 // WithArgs<k>(an_action) (defined below) as a synonym.}\par
1793 {\cf17 template} <{\cf18 size_t} k, {\cf17 typename} InnerAction>\par
1794 internal::WithArgsAction<typename std::decay<InnerAction>::type, k> WithArg(\par
1795     InnerAction&& action) \{\par
1796   {\cf19 return} \{std::forward<InnerAction>(action)\};\par
1797 \}\par
1798 \par
1799 {\cf20 // WithArgs<N1, N2, ..., Nk>(an_action) creates an action that passes}\par
1800 {\cf20 // the selected arguments of the mock function to an_action and}\par
1801 {\cf20 // performs it.  It serves as an adaptor between actions with}\par
1802 {\cf20 // different argument lists.}\par
1803 {\cf17 template} <{\cf18 size_t} k, {\cf18 size_t}... ks, {\cf17 typename} InnerAction>\par
1804 internal::WithArgsAction<typename std::decay<InnerAction>::type, k, ks...>\par
1805 WithArgs(InnerAction&& action) \{\par
1806   {\cf19 return} \{std::forward<InnerAction>(action)\};\par
1807 \}\par
1808 \par
1809 {\cf20 // WithoutArgs(inner_action) can be used in a mock function with a}\par
1810 {\cf20 // non-empty argument list to perform inner_action, which takes no}\par
1811 {\cf20 // argument.  In other words, it adapts an action accepting no}\par
1812 {\cf20 // argument to one that accepts (and ignores) arguments.}\par
1813 {\cf17 template} <{\cf17 typename} InnerAction>\par
1814 internal::WithArgsAction<typename std::decay<InnerAction>::type> WithoutArgs(\par
1815     InnerAction&& action) \{\par
1816   {\cf19 return} \{std::forward<InnerAction>(action)\};\par
1817 \}\par
1818 \par
1819 {\cf20 // Creates an action that returns a value.}\par
1820 {\cf20 //}\par
1821 {\cf20 // The returned type can be used with a mock function returning a non-void,}\par
1822 {\cf20 // non-reference type U as follows:}\par
1823 {\cf20 //}\par
1824 {\cf20 //  *  If R is convertible to U and U is move-constructible, then the action can}\par
1825 {\cf20 //     be used with WillOnce.}\par
1826 {\cf20 //}\par
1827 {\cf20 //  *  If const R& is convertible to U and U is copy-constructible, then the}\par
1828 {\cf20 //     action can be used with both WillOnce and WillRepeatedly.}\par
1829 {\cf20 //}\par
1830 {\cf20 // The mock expectation contains the R value from which the U return value is}\par
1831 {\cf20 // constructed (a move/copy of the argument to Return). This means that the R}\par
1832 {\cf20 // value will survive at least until the mock object's expectations are cleared}\par
1833 {\cf20 // or the mock object is destroyed, meaning that U can safely be a}\par
1834 {\cf20 // reference-like type such as std::string_view:}\par
1835 {\cf20 //}\par
1836 {\cf20 //     // The mock function returns a view of a copy of the string fed to}\par
1837 {\cf20 //     // Return. The view is valid even after the action is performed.}\par
1838 {\cf20 //     MockFunction<std::string_view()> mock;}\par
1839 {\cf20 //     EXPECT_CALL(mock, Call).WillOnce(Return(std::string("taco")));}\par
1840 {\cf20 //     const std::string_view result = mock.AsStdFunction()();}\par
1841 {\cf20 //     EXPECT_EQ("taco", result);}\par
1842 {\cf20 //}\par
1843 {\cf17 template} <{\cf17 typename} R>\par
1844 internal::ReturnAction<R> Return(R value) \{\par
1845   {\cf19 return} internal::ReturnAction<R>(std::move(value));\par
1846 \}\par
1847 \par
1848 {\cf20 // Creates an action that returns NULL.}\par
1849 {\cf17 inline} PolymorphicAction<internal::ReturnNullAction> ReturnNull() \{\par
1850   {\cf19 return} MakePolymorphicAction(internal::ReturnNullAction());\par
1851 \}\par
1852 \par
1853 {\cf20 // Creates an action that returns from a void function.}\par
1854 {\cf17 inline} PolymorphicAction<internal::ReturnVoidAction> Return() \{\par
1855   {\cf19 return} MakePolymorphicAction(internal::ReturnVoidAction());\par
1856 \}\par
1857 \par
1858 {\cf20 // Creates an action that returns the reference to a variable.}\par
1859 {\cf17 template} <{\cf17 typename} R>\par
1860 {\cf17 inline} internal::ReturnRefAction<R> ReturnRef(R& x) \{  {\cf20 // NOLINT}\par
1861   {\cf19 return} internal::ReturnRefAction<R>(x);\par
1862 \}\par
1863 \par
1864 {\cf20 // Prevent using ReturnRef on reference to temporary.}\par
1865 {\cf17 template} <{\cf17 typename} R, R* = {\cf18 nullptr}>\par
1866 internal::ReturnRefAction<R> ReturnRef(R&&) = {\cf17 delete};\par
1867 \par
1868 {\cf20 // Creates an action that returns the reference to a copy of the}\par
1869 {\cf20 // argument.  The copy is created when the action is constructed and}\par
1870 {\cf20 // lives as long as the action.}\par
1871 {\cf17 template} <{\cf17 typename} R>\par
1872 {\cf17 inline} internal::ReturnRefOfCopyAction<R> ReturnRefOfCopy({\cf17 const} R& x) \{\par
1873   {\cf19 return} internal::ReturnRefOfCopyAction<R>(x);\par
1874 \}\par
1875 \par
1876 {\cf20 // DEPRECATED: use Return(x) directly with WillOnce.}\par
1877 {\cf20 //}\par
1878 {\cf20 // Modifies the parent action (a Return() action) to perform a move of the}\par
1879 {\cf20 // argument instead of a copy.}\par
1880 {\cf20 // Return(ByMove()) actions can only be executed once and will assert this}\par
1881 {\cf20 // invariant.}\par
1882 {\cf17 template} <{\cf17 typename} R>\par
1883 internal::ByMoveWrapper<R> ByMove(R x) \{\par
1884   {\cf19 return} internal::ByMoveWrapper<R>(std::move(x));\par
1885 \}\par
1886 \par
1887 {\cf20 // Creates an action that returns an element of `vals`. Calling this action will}\par
1888 {\cf20 // repeatedly return the next value from `vals` until it reaches the end and}\par
1889 {\cf20 // will restart from the beginning.}\par
1890 {\cf17 template} <{\cf17 typename} T>\par
1891 internal::ReturnRoundRobinAction<T> ReturnRoundRobin(std::vector<T> vals) \{\par
1892   {\cf19 return} internal::ReturnRoundRobinAction<T>(std::move(vals));\par
1893 \}\par
1894 \par
1895 {\cf20 // Creates an action that returns an element of `vals`. Calling this action will}\par
1896 {\cf20 // repeatedly return the next value from `vals` until it reaches the end and}\par
1897 {\cf20 // will restart from the beginning.}\par
1898 {\cf17 template} <{\cf17 typename} T>\par
1899 internal::ReturnRoundRobinAction<T> ReturnRoundRobin(\par
1900     std::initializer_list<T> vals) \{\par
1901   {\cf19 return} internal::ReturnRoundRobinAction<T>(std::vector<T>(vals));\par
1902 \}\par
1903 \par
1904 {\cf20 // Creates an action that does the default action for the give mock function.}\par
1905 {\cf17 inline} internal::DoDefaultAction DoDefault() \{\par
1906   {\cf19 return} internal::DoDefaultAction();\par
1907 \}\par
1908 \par
1909 {\cf20 // Creates an action that sets the variable pointed by the N-th}\par
1910 {\cf20 // (0-based) function argument to 'value'.}\par
1911 {\cf17 template} <{\cf18 size_t} N, {\cf17 typename} T>\par
1912 internal::SetArgumentPointeeAction<N, T> SetArgPointee(T value) \{\par
1913   {\cf19 return} \{std::move(value)\};\par
1914 \}\par
1915 \par
1916 {\cf20 // The following version is DEPRECATED.}\par
1917 {\cf17 template} <{\cf18 size_t} N, {\cf17 typename} T>\par
1918 internal::SetArgumentPointeeAction<N, T> SetArgumentPointee(T value) \{\par
1919   {\cf19 return} \{std::move(value)\};\par
1920 \}\par
1921 \par
1922 {\cf20 // Creates an action that sets a pointer referent to a given value.}\par
1923 {\cf17 template} <{\cf17 typename} T1, {\cf17 typename} T2>\par
1924 PolymorphicAction<internal::AssignAction<T1, T2>> Assign(T1* ptr, T2 val) \{\par
1925   {\cf19 return} MakePolymorphicAction(internal::AssignAction<T1, T2>(ptr, val));\par
1926 \}\par
1927 \par
1928 {\cf21 #if !GTEST_OS_WINDOWS_MOBILE}\par
1929 \par
1930 {\cf20 // Creates an action that sets errno and returns the appropriate error.}\par
1931 {\cf17 template} <{\cf17 typename} T>\par
1932 PolymorphicAction<internal::SetErrnoAndReturnAction<T>> SetErrnoAndReturn(\par
1933     {\cf18 int} errval, T result) \{\par
1934   {\cf19 return} MakePolymorphicAction(\par
1935       internal::SetErrnoAndReturnAction<T>(errval, result));\par
1936 \}\par
1937 \par
1938 {\cf21 #endif  }{\cf20 // !GTEST_OS_WINDOWS_MOBILE}\par
1939 \par
1940 {\cf20 // Various overloads for Invoke().}\par
1941 \par
1942 {\cf20 // Legacy function.}\par
1943 {\cf20 // Actions can now be implicitly constructed from callables. No need to create}\par
1944 {\cf20 // wrapper objects.}\par
1945 {\cf20 // This function exists for backwards compatibility.}\par
1946 {\cf17 template} <{\cf17 typename} FunctionImpl>\par
1947 {\cf17 typename} std::decay<FunctionImpl>::type Invoke(FunctionImpl&& function_impl) \{\par
1948   {\cf19 return} std::forward<FunctionImpl>(function_impl);\par
1949 \}\par
1950 \par
1951 {\cf20 // Creates an action that invokes the given method on the given object}\par
1952 {\cf20 // with the mock function's arguments.}\par
1953 {\cf17 template} <{\cf17 class} Class, {\cf17 typename} MethodPtr>\par
1954 internal::InvokeMethodAction<Class, MethodPtr> Invoke(Class* obj_ptr,\par
1955                                                       MethodPtr method_ptr) \{\par
1956   {\cf19 return} \{obj_ptr, method_ptr\};\par
1957 \}\par
1958 \par
1959 {\cf20 // Creates an action that invokes 'function_impl' with no argument.}\par
1960 {\cf17 template} <{\cf17 typename} FunctionImpl>\par
1961 internal::InvokeWithoutArgsAction<typename std::decay<FunctionImpl>::type>\par
1962 InvokeWithoutArgs(FunctionImpl function_impl) \{\par
1963   {\cf19 return} \{std::move(function_impl)\};\par
1964 \}\par
1965 \par
1966 {\cf20 // Creates an action that invokes the given method on the given object}\par
1967 {\cf20 // with no argument.}\par
1968 {\cf17 template} <{\cf17 class} Class, {\cf17 typename} MethodPtr>\par
1969 internal::InvokeMethodWithoutArgsAction<Class, MethodPtr> InvokeWithoutArgs(\par
1970     Class* obj_ptr, MethodPtr method_ptr) \{\par
1971   {\cf19 return} \{obj_ptr, method_ptr\};\par
1972 \}\par
1973 \par
1974 {\cf20 // Creates an action that performs an_action and throws away its}\par
1975 {\cf20 // result.  In other words, it changes the return type of an_action to}\par
1976 {\cf20 // void.  an_action MUST NOT return void, or the code won't compile.}\par
1977 {\cf17 template} <{\cf17 typename} A>\par
1978 {\cf17 inline} internal::IgnoreResultAction<A> IgnoreResult({\cf17 const} A& an_action) \{\par
1979   {\cf19 return} internal::IgnoreResultAction<A>(an_action);\par
1980 \}\par
1981 \par
1982 {\cf20 // Creates a reference wrapper for the given L-value.  If necessary,}\par
1983 {\cf20 // you can explicitly specify the type of the reference.  For example,}\par
1984 {\cf20 // suppose 'derived' is an object of type Derived, ByRef(derived)}\par
1985 {\cf20 // would wrap a Derived&.  If you want to wrap a const Base& instead,}\par
1986 {\cf20 // where Base is a base class of Derived, just write:}\par
1987 {\cf20 //}\par
1988 {\cf20 //   ByRef<const Base>(derived)}\par
1989 {\cf20 //}\par
1990 {\cf20 // N.B. ByRef is redundant with std::ref, std::cref and std::reference_wrapper.}\par
1991 {\cf20 // However, it may still be used for consistency with ByMove().}\par
1992 {\cf17 template} <{\cf17 typename} T>\par
1993 inline ::std::reference_wrapper<T> ByRef(T& l_value) \{  {\cf20 // NOLINT}\par
1994   return ::std::reference_wrapper<T>(l_value);\par
1995 \}\par
1996 \par
1997 {\cf20 // The ReturnNew<T>(a1, a2, ..., a_k) action returns a pointer to a new}\par
1998 {\cf20 // instance of type T, constructed on the heap with constructor arguments}\par
1999 {\cf20 // a1, a2, ..., and a_k. The caller assumes ownership of the returned value.}\par
2000 {\cf17 template} <{\cf17 typename} T, {\cf17 typename}... Params>\par
2001 internal::ReturnNewAction<T, typename std::decay<Params>::type...> ReturnNew(\par
2002     Params&&... params) \{\par
2003   {\cf19 return} \{std::forward_as_tuple(std::forward<Params>(params)...)\};\par
2004 \}\par
2005 \par
2006 {\cf20 // Action ReturnArg<k>() returns the k-th argument of the mock function.}\par
2007 {\cf17 template} <{\cf18 size_t} k>\par
2008 internal::ReturnArgAction<k> ReturnArg() \{\par
2009   {\cf19 return} \{\};\par
2010 \}\par
2011 \par
2012 {\cf20 // Action SaveArg<k>(pointer) saves the k-th (0-based) argument of the}\par
2013 {\cf20 // mock function to *pointer.}\par
2014 {\cf17 template} <{\cf18 size_t} k, {\cf17 typename} Ptr>\par
2015 internal::SaveArgAction<k, Ptr> SaveArg(Ptr pointer) \{\par
2016   {\cf19 return} \{pointer\};\par
2017 \}\par
2018 \par
2019 {\cf20 // Action SaveArgPointee<k>(pointer) saves the value pointed to}\par
2020 {\cf20 // by the k-th (0-based) argument of the mock function to *pointer.}\par
2021 {\cf17 template} <{\cf18 size_t} k, {\cf17 typename} Ptr>\par
2022 internal::SaveArgPointeeAction<k, Ptr> SaveArgPointee(Ptr pointer) \{\par
2023   {\cf19 return} \{pointer\};\par
2024 \}\par
2025 \par
2026 {\cf20 // Action SetArgReferee<k>(value) assigns 'value' to the variable}\par
2027 {\cf20 // referenced by the k-th (0-based) argument of the mock function.}\par
2028 {\cf17 template} <{\cf18 size_t} k, {\cf17 typename} T>\par
2029 internal::SetArgRefereeAction<k, typename std::decay<T>::type> SetArgReferee(\par
2030     T&& value) \{\par
2031   {\cf19 return} \{std::forward<T>(value)\};\par
2032 \}\par
2033 \par
2034 {\cf20 // Action SetArrayArgument<k>(first, last) copies the elements in}\par
2035 {\cf20 // source range [first, last) to the array pointed to by the k-th}\par
2036 {\cf20 // (0-based) argument, which can be either a pointer or an}\par
2037 {\cf20 // iterator. The action does not take ownership of the elements in the}\par
2038 {\cf20 // source range.}\par
2039 {\cf17 template} <{\cf18 size_t} k, {\cf17 typename} I1, {\cf17 typename} I2>\par
2040 internal::SetArrayArgumentAction<k, I1, I2> SetArrayArgument(I1 first,\par
2041                                                              I2 last) \{\par
2042   {\cf19 return} \{first, last\};\par
2043 \}\par
2044 \par
2045 {\cf20 // Action DeleteArg<k>() deletes the k-th (0-based) argument of the mock}\par
2046 {\cf20 // function.}\par
2047 {\cf17 template} <{\cf18 size_t} k>\par
2048 internal::DeleteArgAction<k> DeleteArg() \{\par
2049   {\cf19 return} \{\};\par
2050 \}\par
2051 \par
2052 {\cf20 // This action returns the value pointed to by 'pointer'.}\par
2053 {\cf17 template} <{\cf17 typename} Ptr>\par
2054 internal::ReturnPointeeAction<Ptr> ReturnPointee(Ptr pointer) \{\par
2055   {\cf19 return} \{pointer\};\par
2056 \}\par
2057 \par
2058 {\cf20 // Action Throw(exception) can be used in a mock function of any type}\par
2059 {\cf20 // to throw the given exception.  Any copyable value can be thrown.}\par
2060 {\cf21 #if GTEST_HAS_EXCEPTIONS}\par
2061 {\cf17 template} <{\cf17 typename} T>\par
2062 internal::ThrowAction<typename std::decay<T>::type> Throw(T&& exception) \{\par
2063   {\cf19 return} \{std::forward<T>(exception)\};\par
2064 \}\par
2065 {\cf21 #endif  }{\cf20 // GTEST_HAS_EXCEPTIONS}\par
2066 \par
2067 {\cf17 namespace }internal \{\par
2068 \par
2069 {\cf20 // A macro from the ACTION* family (defined later in gmock-generated-actions.h)}\par
2070 {\cf20 // defines an action that can be used in a mock function.  Typically,}\par
2071 {\cf20 // these actions only care about a subset of the arguments of the mock}\par
2072 {\cf20 // function.  For example, if such an action only uses the second}\par
2073 {\cf20 // argument, it can be used in any mock function that takes >= 2}\par
2074 {\cf20 // arguments where the type of the second argument is compatible.}\par
2075 {\cf20 //}\par
2076 {\cf20 // Therefore, the action implementation must be prepared to take more}\par
2077 {\cf20 // arguments than it needs.  The ExcessiveArg type is used to}\par
2078 {\cf20 // represent those excessive arguments.  In order to keep the compiler}\par
2079 {\cf20 // error messages tractable, we define it in the testing namespace}\par
2080 {\cf20 // instead of testing::internal.  However, this is an INTERNAL TYPE}\par
2081 {\cf20 // and subject to change without notice, so a user MUST NOT USE THIS}\par
2082 {\cf20 // TYPE DIRECTLY.}\par
2083 {\cf17 struct }ExcessiveArg \{\};\par
2084 \par
2085 {\cf20 // Builds an implementation of an Action<> for some particular signature, using}\par
2086 {\cf20 // a class defined by an ACTION* macro.}\par
2087 {\cf17 template} <{\cf17 typename} F, {\cf17 typename} Impl>\par
2088 {\cf17 struct }ActionImpl;\par
2089 \par
2090 {\cf17 template} <{\cf17 typename} Impl>\par
2091 {\cf17 struct }ImplBase \{\par
2092   {\cf17 struct }Holder \{\par
2093     {\cf20 // Allows each copy of the Action<> to get to the Impl.}\par
2094     {\cf17 explicit} {\cf17 operator} {\cf17 const} Impl&() {\cf17 const} \{ {\cf19 return} *ptr; \}\par
2095     std::shared_ptr<Impl> ptr;\par
2096   \};\par
2097   {\cf17 using }type = {\cf17 typename} std::conditional<std::is_constructible<Impl>::value,\par
2098                                          Impl, Holder>::type;\par
2099 \};\par
2100 \par
2101 {\cf17 template} <{\cf17 typename} R, {\cf17 typename}... Args, {\cf17 typename} Impl>\par
2102 {\cf17 struct }ActionImpl<R(Args...), Impl> : ImplBase<Impl>::type \{\par
2103   {\cf17 using }Base = {\cf17 typename} ImplBase<Impl>::type;\par
2104   {\cf17 using }function_type = R(Args...);\par
2105   {\cf17 using }args_type = std::tuple<Args...>;\par
2106 \par
2107   ActionImpl() = {\cf19 default};  {\cf20 // Only defined if appropriate for Base.}\par
2108   {\cf17 explicit} ActionImpl(std::shared_ptr<Impl> impl) : Base\{std::move(impl)\} \{\}\par
2109 \par
2110   R operator()(Args&&... arg){\cf17  const }\{\par
2111     {\cf17 static} {\cf17 constexpr} {\cf18 size_t} kMaxArgs =\par
2112         {\cf17 sizeof}...(Args) <= 10 ? {\cf17 sizeof}...(Args) : 10;\par
2113     {\cf19 return} Apply(MakeIndexSequence<kMaxArgs>\{\},\par
2114                  MakeIndexSequence<10 - kMaxArgs>\{\},\par
2115                  args_type\{std::forward<Args>(arg)...\});\par
2116   \}\par
2117 \par
2118   {\cf17 template} <std::size_t... arg_id, std::size_t... excess_id>\par
2119   R Apply(IndexSequence<arg_id...>, IndexSequence<excess_id...>,\par
2120           {\cf17 const} args_type& args){\cf17  const }\{\par
2121     {\cf20 // Impl need not be specific to the signature of action being implemented;}\par
2122     {\cf20 // only the implementing function body needs to have all of the specific}\par
2123     {\cf20 // types instantiated.  Up to 10 of the args that are provided by the}\par
2124     {\cf20 // args_type get passed, followed by a dummy of unspecified type for the}\par
2125     {\cf20 // remainder up to 10 explicit args.}\par
2126     {\cf17 static} {\cf17 constexpr} ExcessiveArg kExcessArg\{\};\par
2127     {\cf19 return} {\cf17 static_cast<}{\cf17 const }Impl&{\cf17 >}(*this)\par
2128         .template gmock_PerformImpl<\par
2129             {\cf20 /*function_type=*/}function_type, {\cf20 /*return_type=*/}R,\par
2130             {\cf20 /*args_type=*/}args_type,\par
2131             {\cf20 /*argN_type=*/}\par
2132             {\cf17 typename} std::tuple_element<arg_id, args_type>::type...>(\par
2133             {\cf20 /*args=*/}args, std::get<arg_id>(args)...,\par
2134             ((void)excess_id, kExcessArg)...);\par
2135   \}\par
2136 \};\par
2137 \par
2138 {\cf20 // Stores a default-constructed Impl as part of the Action<>'s}\par
2139 {\cf20 // std::function<>. The Impl should be trivial to copy.}\par
2140 {\cf17 template} <{\cf17 typename} F, {\cf17 typename} Impl>\par
2141 ::testing::Action<F> MakeAction() \{\par
2142   return ::testing::Action<F>(ActionImpl<F, Impl>());\par
2143 \}\par
2144 \par
2145 {\cf20 // Stores just the one given instance of Impl.}\par
2146 {\cf17 template} <{\cf17 typename} F, {\cf17 typename} Impl>\par
2147 ::testing::Action<F> MakeAction(std::shared_ptr<Impl> impl) \{\par
2148   return ::testing::Action<F>(ActionImpl<F, Impl>(std::move(impl)));\par
2149 \}\par
2150 \par
2151 {\cf21 #define GMOCK_INTERNAL_ARG_UNUSED(i, data, el) \\}\par
2152 {\cf21   , const arg##i##_type& arg##i GTEST_ATTRIBUTE_UNUSED_}\par
2153 {\cf21 #define GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_                 \\}\par
2154 {\cf21   const args_type& args GTEST_ATTRIBUTE_UNUSED_ GMOCK_PP_REPEAT( \\}\par
2155 {\cf21       GMOCK_INTERNAL_ARG_UNUSED, , 10)}\par
2156 \par
2157 {\cf21 #define GMOCK_INTERNAL_ARG(i, data, el) , const arg##i##_type& arg##i}\par
2158 {\cf21 #define GMOCK_ACTION_ARG_TYPES_AND_NAMES_ \\}\par
2159 {\cf21   const args_type& args GMOCK_PP_REPEAT(GMOCK_INTERNAL_ARG, , 10)}\par
2160 \par
2161 {\cf21 #define GMOCK_INTERNAL_TEMPLATE_ARG(i, data, el) , typename arg##i##_type}\par
2162 {\cf21 #define GMOCK_ACTION_TEMPLATE_ARGS_NAMES_ \\}\par
2163 {\cf21   GMOCK_PP_TAIL(GMOCK_PP_REPEAT(GMOCK_INTERNAL_TEMPLATE_ARG, , 10))}\par
2164 \par
2165 {\cf21 #define GMOCK_INTERNAL_TYPENAME_PARAM(i, data, param) , typename param##_type}\par
2166 {\cf21 #define GMOCK_ACTION_TYPENAME_PARAMS_(params) \\}\par
2167 {\cf21   GMOCK_PP_TAIL(GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_TYPENAME_PARAM, , params))}\par
2168 \par
2169 {\cf21 #define GMOCK_INTERNAL_TYPE_PARAM(i, data, param) , param##_type}\par
2170 {\cf21 #define GMOCK_ACTION_TYPE_PARAMS_(params) \\}\par
2171 {\cf21   GMOCK_PP_TAIL(GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_TYPE_PARAM, , params))}\par
2172 \par
2173 {\cf21 #define GMOCK_INTERNAL_TYPE_GVALUE_PARAM(i, data, param) \\}\par
2174 {\cf21   , param##_type gmock_p##i}\par
2175 {\cf21 #define GMOCK_ACTION_TYPE_GVALUE_PARAMS_(params) \\}\par
2176 {\cf21   GMOCK_PP_TAIL(GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_TYPE_GVALUE_PARAM, , params))}\par
2177 \par
2178 {\cf21 #define GMOCK_INTERNAL_GVALUE_PARAM(i, data, param) \\}\par
2179 {\cf21   , std::forward<param##_type>(gmock_p##i)}\par
2180 {\cf21 #define GMOCK_ACTION_GVALUE_PARAMS_(params) \\}\par
2181 {\cf21   GMOCK_PP_TAIL(GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_GVALUE_PARAM, , params))}\par
2182 \par
2183 {\cf21 #define GMOCK_INTERNAL_INIT_PARAM(i, data, param) \\}\par
2184 {\cf21   , param(::std::forward<param##_type>(gmock_p##i))}\par
2185 {\cf21 #define GMOCK_ACTION_INIT_PARAMS_(params) \\}\par
2186 {\cf21   GMOCK_PP_TAIL(GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_INIT_PARAM, , params))}\par
2187 \par
2188 {\cf21 #define GMOCK_INTERNAL_FIELD_PARAM(i, data, param) param##_type param;}\par
2189 {\cf21 #define GMOCK_ACTION_FIELD_PARAMS_(params) \\}\par
2190 {\cf21   GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_FIELD_PARAM, , params)}\par
2191 \par
2192 {\cf21 #define GMOCK_INTERNAL_ACTION(name, full_name, params)                         \\}\par
2193 {\cf21   template <GMOCK_ACTION_TYPENAME_PARAMS_(params)>                             \\}\par
2194 {\cf21   class full_name \{                                                            \\}\par
2195 {\cf21    public:                                                                     \\}\par
2196 {\cf21     explicit full_name(GMOCK_ACTION_TYPE_GVALUE_PARAMS_(params))               \\}\par
2197 {\cf21         : impl_(std::make_shared<gmock_Impl>(                                  \\}\par
2198 {\cf21               GMOCK_ACTION_GVALUE_PARAMS_(params))) \{\}                         \\}\par
2199 {\cf21     full_name(const full_name&) = default;                                     \\}\par
2200 {\cf21     full_name(full_name&&) noexcept = default;                                 \\}\par
2201 {\cf21     template <typename F>                                                      \\}\par
2202 {\cf21     operator ::testing::Action<F>() const \{                                    \\}\par
2203 {\cf21       return ::testing::internal::MakeAction<F>(impl_);                        \\}\par
2204 {\cf21     \}                                                                          \\}\par
2205 {\cf21                                                                                \\}\par
2206 {\cf21    private:                                                                    \\}\par
2207 {\cf21     class gmock_Impl \{                                                         \\}\par
2208 {\cf21      public:                                                                   \\}\par
2209 {\cf21       explicit gmock_Impl(GMOCK_ACTION_TYPE_GVALUE_PARAMS_(params))            \\}\par
2210 {\cf21           : GMOCK_ACTION_INIT_PARAMS_(params) \{\}                               \\}\par
2211 {\cf21       template <typename function_type, typename return_type,                  \\}\par
2212 {\cf21                 typename args_type, GMOCK_ACTION_TEMPLATE_ARGS_NAMES_>         \\}\par
2213 {\cf21       return_type gmock_PerformImpl(GMOCK_ACTION_ARG_TYPES_AND_NAMES_) const;  \\}\par
2214 {\cf21       GMOCK_ACTION_FIELD_PARAMS_(params)                                       \\}\par
2215 {\cf21     \};                                                                         \\}\par
2216 {\cf21     std::shared_ptr<const gmock_Impl> impl_;                                   \\}\par
2217 {\cf21   \};                                                                           \\}\par
2218 {\cf21   template <GMOCK_ACTION_TYPENAME_PARAMS_(params)>                             \\}\par
2219 {\cf21   inline full_name<GMOCK_ACTION_TYPE_PARAMS_(params)> name(                    \\}\par
2220 {\cf21       GMOCK_ACTION_TYPE_GVALUE_PARAMS_(params)) GTEST_MUST_USE_RESULT_;        \\}\par
2221 {\cf21   template <GMOCK_ACTION_TYPENAME_PARAMS_(params)>                             \\}\par
2222 {\cf21   inline full_name<GMOCK_ACTION_TYPE_PARAMS_(params)> name(                    \\}\par
2223 {\cf21       GMOCK_ACTION_TYPE_GVALUE_PARAMS_(params)) \{                              \\}\par
2224 {\cf21     return full_name<GMOCK_ACTION_TYPE_PARAMS_(params)>(                       \\}\par
2225 {\cf21         GMOCK_ACTION_GVALUE_PARAMS_(params));                                  \\}\par
2226 {\cf21   \}                                                                            \\}\par
2227 {\cf21   template <GMOCK_ACTION_TYPENAME_PARAMS_(params)>                             \\}\par
2228 {\cf21   template <typename function_type, typename return_type, typename args_type,  \\}\par
2229 {\cf21             GMOCK_ACTION_TEMPLATE_ARGS_NAMES_>                                 \\}\par
2230 {\cf21   return_type                                                                  \\}\par
2231 {\cf21   full_name<GMOCK_ACTION_TYPE_PARAMS_(params)>::gmock_Impl::gmock_PerformImpl( \\}\par
2232 {\cf21       GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const}\par
2233 \par
2234 \}  {\cf20 // namespace internal}\par
2235 \par
2236 {\cf20 // Similar to GMOCK_INTERNAL_ACTION, but no bound parameters are stored.}\par
2237 {\cf21 #define ACTION(name)                                                          \\}\par
2238 {\cf21   class name##Action \{                                                        \\}\par
2239 {\cf21    public:                                                                    \\}\par
2240 {\cf21     explicit name##Action() noexcept \{\}                                       \\}\par
2241 {\cf21     name##Action(const name##Action&) noexcept \{\}                             \\}\par
2242 {\cf21     template <typename F>                                                     \\}\par
2243 {\cf21     operator ::testing::Action<F>() const \{                                   \\}\par
2244 {\cf21       return ::testing::internal::MakeAction<F, gmock_Impl>();                \\}\par
2245 {\cf21     \}                                                                         \\}\par
2246 {\cf21                                                                               \\}\par
2247 {\cf21    private:                                                                   \\}\par
2248 {\cf21     class gmock_Impl \{                                                        \\}\par
2249 {\cf21      public:                                                                  \\}\par
2250 {\cf21       template <typename function_type, typename return_type,                 \\}\par
2251 {\cf21                 typename args_type, GMOCK_ACTION_TEMPLATE_ARGS_NAMES_>        \\}\par
2252 {\cf21       return_type gmock_PerformImpl(GMOCK_ACTION_ARG_TYPES_AND_NAMES_) const; \\}\par
2253 {\cf21     \};                                                                        \\}\par
2254 {\cf21   \};                                                                          \\}\par
2255 {\cf21   inline name##Action name() GTEST_MUST_USE_RESULT_;                          \\}\par
2256 {\cf21   inline name##Action name() \{ return name##Action(); \}                       \\}\par
2257 {\cf21   template <typename function_type, typename return_type, typename args_type, \\}\par
2258 {\cf21             GMOCK_ACTION_TEMPLATE_ARGS_NAMES_>                                \\}\par
2259 {\cf21   return_type name##Action::gmock_Impl::gmock_PerformImpl(                    \\}\par
2260 {\cf21       GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const}\par
2261 \par
2262 {\cf21 #define ACTION_P(name, ...) \\}\par
2263 {\cf21   GMOCK_INTERNAL_ACTION(name, name##ActionP, (__VA_ARGS__))}\par
2264 \par
2265 {\cf21 #define ACTION_P2(name, ...) \\}\par
2266 {\cf21   GMOCK_INTERNAL_ACTION(name, name##ActionP2, (__VA_ARGS__))}\par
2267 \par
2268 {\cf21 #define ACTION_P3(name, ...) \\}\par
2269 {\cf21   GMOCK_INTERNAL_ACTION(name, name##ActionP3, (__VA_ARGS__))}\par
2270 \par
2271 {\cf21 #define ACTION_P4(name, ...) \\}\par
2272 {\cf21   GMOCK_INTERNAL_ACTION(name, name##ActionP4, (__VA_ARGS__))}\par
2273 \par
2274 {\cf21 #define ACTION_P5(name, ...) \\}\par
2275 {\cf21   GMOCK_INTERNAL_ACTION(name, name##ActionP5, (__VA_ARGS__))}\par
2276 \par
2277 {\cf21 #define ACTION_P6(name, ...) \\}\par
2278 {\cf21   GMOCK_INTERNAL_ACTION(name, name##ActionP6, (__VA_ARGS__))}\par
2279 \par
2280 {\cf21 #define ACTION_P7(name, ...) \\}\par
2281 {\cf21   GMOCK_INTERNAL_ACTION(name, name##ActionP7, (__VA_ARGS__))}\par
2282 \par
2283 {\cf21 #define ACTION_P8(name, ...) \\}\par
2284 {\cf21   GMOCK_INTERNAL_ACTION(name, name##ActionP8, (__VA_ARGS__))}\par
2285 \par
2286 {\cf21 #define ACTION_P9(name, ...) \\}\par
2287 {\cf21   GMOCK_INTERNAL_ACTION(name, name##ActionP9, (__VA_ARGS__))}\par
2288 \par
2289 {\cf21 #define ACTION_P10(name, ...) \\}\par
2290 {\cf21   GMOCK_INTERNAL_ACTION(name, name##ActionP10, (__VA_ARGS__))}\par
2291 \par
2292 \}  {\cf20 // namespace testing}\par
2293 \par
2294 {\cf21 #ifdef _MSC_VER}\par
2295 {\cf21 #pragma warning(pop)}\par
2296 {\cf21 #endif}\par
2297 \par
2298 {\cf21 #endif  }{\cf20 // GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_ACTIONS_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gmock-cardinalities.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googlemock/include/gmock/gmock-cardinalities.h}
{\xe \v lib/googletest-main/googlemock/include/gmock/gmock-cardinalities.h}
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2007, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // Google Mock - a framework for writing C++ mock classes.}\par
31 {\cf20 //}\par
32 {\cf20 // This file implements some commonly used cardinalities.  More}\par
33 {\cf20 // cardinalities can be defined by the user implementing the}\par
34 {\cf20 // CardinalityInterface interface if necessary.}\par
35 \par
36 {\cf20 // IWYU pragma: private, include "gmock/gmock.h"}\par
37 {\cf20 // IWYU pragma: friend gmock/.*}\par
38 \par
39 {\cf21 #ifndef GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_CARDINALITIES_H_}\par
40 {\cf21 #define GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_CARDINALITIES_H_}\par
41 \par
42 {\cf21 #include <limits.h>}\par
43 \par
44 {\cf21 #include <memory>}\par
45 {\cf21 #include <ostream>}  {\cf20 // NOLINT}\par
46 \par
47 {\cf21 #include "gmock/internal/gmock-port.h"}\par
48 {\cf21 #include "gtest/gtest.h"}\par
49 \par
50 GTEST_DISABLE_MSC_WARNINGS_PUSH_(4251 \\\par
51 {\cf20 /* class A needs to have dll-interface to be used by clients of class B */})\par
52 \par
53 namespace testing \{\par
54 \par
55 {\cf20 // To implement a cardinality Foo, define:}\par
56 {\cf20 //   1. a class FooCardinality that implements the}\par
57 {\cf20 //      CardinalityInterface interface, and}\par
58 {\cf20 //   2. a factory function that creates a Cardinality object from a}\par
59 {\cf20 //      const FooCardinality*.}\par
60 {\cf20 //}\par
61 {\cf20 // The two-level delegation design follows that of Matcher, providing}\par
62 {\cf20 // consistency for extension developers.  It also eases ownership}\par
63 {\cf20 // management as Cardinality objects can now be copied like plain values.}\par
64 \par
65 {\cf20 // The implementation of a cardinality.}\par
66 {\cf17 class }CardinalityInterface \{\par
67  {\cf17 public}:\par
68   {\cf17 virtual} ~CardinalityInterface() \{\}\par
69 \par
70   {\cf20 // Conservative estimate on the lower/upper bound of the number of}\par
71   {\cf20 // calls allowed.}\par
72   {\cf17 virtual} {\cf18 int} ConservativeLowerBound(){\cf17  const }\{ {\cf19 return} 0; \}\par
73   {\cf17 virtual} {\cf18 int} ConservativeUpperBound(){\cf17  const }\{ {\cf19 return} INT_MAX; \}\par
74 \par
75   {\cf20 // Returns true if and only if call_count calls will satisfy this}\par
76   {\cf20 // cardinality.}\par
77   {\cf17 virtual} {\cf18 bool} IsSatisfiedByCallCount({\cf18 int} call_count) {\cf17 const} = 0;\par
78 \par
79   {\cf20 // Returns true if and only if call_count calls will saturate this}\par
80   {\cf20 // cardinality.}\par
81   {\cf17 virtual} {\cf18 bool} IsSaturatedByCallCount({\cf18 int} call_count) {\cf17 const} = 0;\par
82 \par
83   {\cf20 // Describes self to an ostream.}\par
84   {\cf17 virtual} {\cf18 void} DescribeTo(::std::ostream* os) {\cf17 const} = 0;\par
85 \};\par
86 \par
87 {\cf20 // A Cardinality is a copyable and IMMUTABLE (except by assignment)}\par
88 {\cf20 // object that specifies how many times a mock function is expected to}\par
89 {\cf20 // be called.  The implementation of Cardinality is just a std::shared_ptr}\par
90 {\cf20 // to const CardinalityInterface. Don't inherit from Cardinality!}\par
91 {\cf17 class }GTEST_API_ Cardinality \{\par
92  {\cf17 public}:\par
93   {\cf20 // Constructs a null cardinality.  Needed for storing Cardinality}\par
94   {\cf20 // objects in STL containers.}\par
95   Cardinality() \{\}\par
96 \par
97   {\cf20 // Constructs a Cardinality from its implementation.}\par
98   {\cf17 explicit} Cardinality({\cf17 const} CardinalityInterface* impl) : impl_(impl) \{\}\par
99 \par
100   {\cf20 // Conservative estimate on the lower/upper bound of the number of}\par
101   {\cf20 // calls allowed.}\par
102   {\cf18 int} ConservativeLowerBound(){\cf17  const }\{ {\cf19 return} impl_->ConservativeLowerBound(); \}\par
103   {\cf18 int} ConservativeUpperBound(){\cf17  const }\{ {\cf19 return} impl_->ConservativeUpperBound(); \}\par
104 \par
105   {\cf20 // Returns true if and only if call_count calls will satisfy this}\par
106   {\cf20 // cardinality.}\par
107   {\cf18 bool} IsSatisfiedByCallCount({\cf18 int} call_count){\cf17  const }\{\par
108     {\cf19 return} impl_->IsSatisfiedByCallCount(call_count);\par
109   \}\par
110 \par
111   {\cf20 // Returns true if and only if call_count calls will saturate this}\par
112   {\cf20 // cardinality.}\par
113   {\cf18 bool} IsSaturatedByCallCount({\cf18 int} call_count){\cf17  const }\{\par
114     {\cf19 return} impl_->IsSaturatedByCallCount(call_count);\par
115   \}\par
116 \par
117   {\cf20 // Returns true if and only if call_count calls will over-saturate this}\par
118   {\cf20 // cardinality, i.e. exceed the maximum number of allowed calls.}\par
119   {\cf18 bool} IsOverSaturatedByCallCount({\cf18 int} call_count){\cf17  const }\{\par
120     {\cf19 return} impl_->IsSaturatedByCallCount(call_count) &&\par
121            !impl_->IsSatisfiedByCallCount(call_count);\par
122   \}\par
123 \par
124   {\cf20 // Describes self to an ostream}\par
125   {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const }\{ impl_->DescribeTo(os); \}\par
126 \par
127   {\cf20 // Describes the given actual call count to an ostream.}\par
128   {\cf17 static} {\cf18 void} DescribeActualCallCountTo({\cf18 int} actual_call_count,\par
129                                         ::std::ostream* os);\par
130 \par
131  {\cf17 private}:\par
132   std::shared_ptr<const CardinalityInterface> impl_;\par
133 \};\par
134 \par
135 {\cf20 // Creates a cardinality that allows at least n calls.}\par
136 GTEST_API_ Cardinality AtLeast({\cf18 int} n);\par
137 \par
138 {\cf20 // Creates a cardinality that allows at most n calls.}\par
139 GTEST_API_ Cardinality AtMost({\cf18 int} n);\par
140 \par
141 {\cf20 // Creates a cardinality that allows any number of calls.}\par
142 GTEST_API_ Cardinality AnyNumber();\par
143 \par
144 {\cf20 // Creates a cardinality that allows between min and max calls.}\par
145 GTEST_API_ Cardinality Between({\cf18 int} min, {\cf18 int} max);\par
146 \par
147 {\cf20 // Creates a cardinality that allows exactly n calls.}\par
148 GTEST_API_ Cardinality Exactly({\cf18 int} n);\par
149 \par
150 {\cf20 // Creates a cardinality from its implementation.}\par
151 {\cf17 inline} Cardinality MakeCardinality({\cf17 const} CardinalityInterface* c) \{\par
152   {\cf19 return} Cardinality(c);\par
153 \}\par
154 \par
155 \}  {\cf20 // namespace testing}\par
156 \par
157 GTEST_DISABLE_MSC_WARNINGS_POP_()  {\cf20 //  4251}\par
158 \par
159 {\cf21 #endif  }{\cf20 // GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_CARDINALITIES_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gmock-function-mocker.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googlemock/include/gmock/gmock-function-mocker.h}
{\xe \v lib/googletest-main/googlemock/include/gmock/gmock-function-mocker.h}
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2007, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // Google Mock - a framework for writing C++ mock classes.}\par
31 {\cf20 //}\par
32 {\cf20 // This file implements MOCK_METHOD.}\par
33 \par
34 {\cf20 // IWYU pragma: private, include "gmock/gmock.h"}\par
35 {\cf20 // IWYU pragma: friend gmock/.*}\par
36 \par
37 {\cf21 #ifndef GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_FUNCTION_MOCKER_H_}\par
38 {\cf21 #define GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_FUNCTION_MOCKER_H_}\par
39 \par
40 {\cf21 #include <type_traits>}  {\cf20 // IWYU pragma: keep}\par
41 {\cf21 #include <utility>}      {\cf20 // IWYU pragma: keep}\par
42 \par
43 {\cf21 #include "gmock/gmock-spec-builders.h"}\par
44 {\cf21 #include "gmock/internal/gmock-internal-utils.h"}\par
45 {\cf21 #include "gmock/internal/gmock-pp.h"}\par
46 \par
47 {\cf17 namespace }testing \{\par
48 {\cf17 namespace }internal \{\par
49 {\cf17 template} <{\cf17 typename} T>\par
50 {\cf17 using }identity_t = T;\par
51 \par
52 {\cf17 template} <{\cf17 typename} Pattern>\par
53 {\cf17 struct }ThisRefAdjuster \{\par
54   {\cf17 template} <{\cf17 typename} T>\par
55   {\cf17 using }AdjustT = {\cf17 typename} std::conditional<\par
56       std::is_const<typename std::remove_reference<Pattern>::type>::value,\par
57       {\cf17 typename} std::conditional<std::is_lvalue_reference<Pattern>::value,\par
58                                 {\cf17 const} T&, {\cf17 const} T&&>::type,\par
59       {\cf17 typename} std::conditional<std::is_lvalue_reference<Pattern>::value, T&,\par
60                                 T&&>::type>::type;\par
61 \par
62   {\cf17 template} <{\cf17 typename} MockType>\par
63   {\cf17 static} AdjustT<MockType> Adjust({\cf17 const} MockType& mock) \{\par
64     {\cf19 return} {\cf17 static_cast<}AdjustT<MockType>{\cf17 >}({\cf17 const_cast<}MockType&{\cf17 >}(mock));\par
65   \}\par
66 \};\par
67 \par
68 {\cf17 constexpr} {\cf18 bool} PrefixOf({\cf17 const} {\cf18 char}* a, {\cf17 const} {\cf18 char}* b) \{\par
69   {\cf19 return} *a == 0 || (*a == *b && internal::PrefixOf(a + 1, b + 1));\par
70 \}\par
71 \par
72 {\cf17 template} <{\cf18 int} N, {\cf18 int} M>\par
73 {\cf17 constexpr} {\cf18 bool} StartsWith({\cf17 const} {\cf18 char} (&prefix)[N], {\cf17 const} {\cf18 char} (&str)[M]) \{\par
74   {\cf19 return} N <= M && internal::PrefixOf(prefix, str);\par
75 \}\par
76 \par
77 {\cf17 template} <{\cf18 int} N, {\cf18 int} M>\par
78 {\cf17 constexpr} {\cf18 bool} EndsWith({\cf17 const} {\cf18 char} (&suffix)[N], {\cf17 const} {\cf18 char} (&str)[M]) \{\par
79   {\cf19 return} N <= M && internal::PrefixOf(suffix, str + M - N);\par
80 \}\par
81 \par
82 {\cf17 template} <{\cf18 int} N, {\cf18 int} M>\par
83 {\cf17 constexpr} {\cf18 bool} Equals({\cf17 const} {\cf18 char} (&a)[N], {\cf17 const} {\cf18 char} (&b)[M]) \{\par
84   {\cf19 return} N == M && internal::PrefixOf(a, b);\par
85 \}\par
86 \par
87 {\cf17 template} <{\cf18 int} N>\par
88 {\cf17 constexpr} {\cf18 bool} ValidateSpec({\cf17 const} {\cf18 char} (&spec)[N]) \{\par
89   {\cf19 return} internal::Equals({\cf22 "const"}, spec) ||\par
90          internal::Equals({\cf22 "override"}, spec) ||\par
91          internal::Equals({\cf22 "final"}, spec) ||\par
92          internal::Equals({\cf22 "noexcept"}, spec) ||\par
93          (internal::StartsWith({\cf22 "noexcept("}, spec) &&\par
94           internal::EndsWith({\cf22 ")"}, spec)) ||\par
95          internal::Equals({\cf22 "ref(&)"}, spec) ||\par
96          internal::Equals({\cf22 "ref(&&)"}, spec) ||\par
97          (internal::StartsWith({\cf22 "Calltype("}, spec) &&\par
98           internal::EndsWith({\cf22 ")"}, spec));\par
99 \}\par
100 \par
101 \}  {\cf20 // namespace internal}\par
102 \par
103 {\cf20 // The style guide prohibits "using" statements in a namespace scope}\par
104 {\cf20 // inside a header file.  However, the FunctionMocker class template}\par
105 {\cf20 // is meant to be defined in the ::testing namespace.  The following}\par
106 {\cf20 // line is just a trick for working around a bug in MSVC 8.0, which}\par
107 {\cf20 // cannot handle it if we define FunctionMocker in ::testing.}\par
108 {\cf17 using }internal::FunctionMocker;\par
109 \}  {\cf20 // namespace testing}\par
110 \par
111 {\cf21 #define MOCK_METHOD(...) \\}\par
112 {\cf21   GMOCK_PP_VARIADIC_CALL(GMOCK_INTERNAL_MOCK_METHOD_ARG_, __VA_ARGS__)}\par
113 \par
114 {\cf21 #define GMOCK_INTERNAL_MOCK_METHOD_ARG_1(...) \\}\par
115 {\cf21   GMOCK_INTERNAL_WRONG_ARITY(__VA_ARGS__)}\par
116 \par
117 {\cf21 #define GMOCK_INTERNAL_MOCK_METHOD_ARG_2(...) \\}\par
118 {\cf21   GMOCK_INTERNAL_WRONG_ARITY(__VA_ARGS__)}\par
119 \par
120 {\cf21 #define GMOCK_INTERNAL_MOCK_METHOD_ARG_3(_Ret, _MethodName, _Args) \\}\par
121 {\cf21   GMOCK_INTERNAL_MOCK_METHOD_ARG_4(_Ret, _MethodName, _Args, ())}\par
122 \par
123 {\cf21 #define GMOCK_INTERNAL_MOCK_METHOD_ARG_4(_Ret, _MethodName, _Args, _Spec)  \\}\par
124 {\cf21   GMOCK_INTERNAL_ASSERT_PARENTHESIS(_Args);                                \\}\par
125 {\cf21   GMOCK_INTERNAL_ASSERT_PARENTHESIS(_Spec);                                \\}\par
126 {\cf21   GMOCK_INTERNAL_ASSERT_VALID_SIGNATURE(                                   \\}\par
127 {\cf21       GMOCK_PP_NARG0 _Args, GMOCK_INTERNAL_SIGNATURE(_Ret, _Args));        \\}\par
128 {\cf21   GMOCK_INTERNAL_ASSERT_VALID_SPEC(_Spec)                                  \\}\par
129 {\cf21   GMOCK_INTERNAL_MOCK_METHOD_IMPL(                                         \\}\par
130 {\cf21       GMOCK_PP_NARG0 _Args, _MethodName, GMOCK_INTERNAL_HAS_CONST(_Spec),  \\}\par
131 {\cf21       GMOCK_INTERNAL_HAS_OVERRIDE(_Spec), GMOCK_INTERNAL_HAS_FINAL(_Spec), \\}\par
132 {\cf21       GMOCK_INTERNAL_GET_NOEXCEPT_SPEC(_Spec),                             \\}\par
133 {\cf21       GMOCK_INTERNAL_GET_CALLTYPE_SPEC(_Spec),                             \\}\par
134 {\cf21       GMOCK_INTERNAL_GET_REF_SPEC(_Spec),                                  \\}\par
135 {\cf21       (GMOCK_INTERNAL_SIGNATURE(_Ret, _Args)))}\par
136 \par
137 {\cf21 #define GMOCK_INTERNAL_MOCK_METHOD_ARG_5(...) \\}\par
138 {\cf21   GMOCK_INTERNAL_WRONG_ARITY(__VA_ARGS__)}\par
139 \par
140 {\cf21 #define GMOCK_INTERNAL_MOCK_METHOD_ARG_6(...) \\}\par
141 {\cf21   GMOCK_INTERNAL_WRONG_ARITY(__VA_ARGS__)}\par
142 \par
143 {\cf21 #define GMOCK_INTERNAL_MOCK_METHOD_ARG_7(...) \\}\par
144 {\cf21   GMOCK_INTERNAL_WRONG_ARITY(__VA_ARGS__)}\par
145 \par
146 {\cf21 #define GMOCK_INTERNAL_WRONG_ARITY(...)                                      \\}\par
147 {\cf21   static_assert(                                                             \\}\par
148 {\cf21       false,                                                                 \\}\par
149 {\cf21       "MOCK_METHOD must be called with 3 or 4 arguments. _Ret, "}             \\\par
150       "_MethodName, _Args and optionally _Spec. _Args and _Spec must be "    \\\par
151       "enclosed in parentheses. If _Ret is a type with unprotected commas, " \\\par
152       "it must also be enclosed in parentheses.")\par
153 \par
154 {\cf21 #define GMOCK_INTERNAL_ASSERT_PARENTHESIS(_Tuple) \\}\par
155 {\cf21   static_assert(                                  \\}\par
156 {\cf21       GMOCK_PP_IS_ENCLOSED_PARENS(_Tuple),        \\}\par
157 {\cf21       GMOCK_PP_STRINGIZE(_Tuple) " should be enclosed in parentheses."})\par
158 \par
159 {\cf21 #define GMOCK_INTERNAL_ASSERT_VALID_SIGNATURE(_N, ...)                 \\}\par
160 {\cf21   static_assert(                                                       \\}\par
161 {\cf21       std::is_function<__VA_ARGS__>::value,                            \\}\par
162 {\cf21       "Signature must be a function type, maybe return type contains "} \\\par
163       "unprotected comma.");                                           \\\par
164   static_assert(                                                       \\\par
165       ::testing::tuple_size<typename ::testing::internal::Function<    \\\par
166               __VA_ARGS__>::ArgumentTuple>::value == _N,               \\\par
167       "This method does not take " GMOCK_PP_STRINGIZE(                 \\\par
168           _N) " arguments. Parenthesize all types with unprotected commas.")\par
169 \par
170 {\cf21 #define GMOCK_INTERNAL_ASSERT_VALID_SPEC(_Spec) \\}\par
171 {\cf21   GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_ASSERT_VALID_SPEC_ELEMENT, ~, _Spec)}\par
172 \par
173 {\cf21 #define GMOCK_INTERNAL_MOCK_METHOD_IMPL(_N, _MethodName, _Constness,           \\}\par
174 {\cf21                                         _Override, _Final, _NoexceptSpec,      \\}\par
175 {\cf21                                         _CallType, _RefSpec, _Signature)       \\}\par
176 {\cf21   typename ::testing::internal::Function<GMOCK_PP_REMOVE_PARENS(               \\}\par
177 {\cf21       _Signature)>::Result                                                     \\}\par
178 {\cf21   GMOCK_INTERNAL_EXPAND(_CallType)                                             \\}\par
179 {\cf21       _MethodName(GMOCK_PP_REPEAT(GMOCK_INTERNAL_PARAMETER, _Signature, _N))   \\}\par
180 {\cf21           GMOCK_PP_IF(_Constness, const, ) _RefSpec _NoexceptSpec              \\}\par
181 {\cf21           GMOCK_PP_IF(_Override, override, ) GMOCK_PP_IF(_Final, final, ) \{    \\}\par
182 {\cf21     GMOCK_MOCKER_(_N, _Constness, _MethodName)                                 \\}\par
183 {\cf21         .SetOwnerAndName(this, #_MethodName);                                  \\}\par
184 {\cf21     return GMOCK_MOCKER_(_N, _Constness, _MethodName)                          \\}\par
185 {\cf21         .Invoke(GMOCK_PP_REPEAT(GMOCK_INTERNAL_FORWARD_ARG, _Signature, _N));  \\}\par
186 {\cf21   \}                                                                            \\}\par
187 {\cf21   ::testing::MockSpec<GMOCK_PP_REMOVE_PARENS(_Signature)> gmock_##_MethodName( \\}\par
188 {\cf21       GMOCK_PP_REPEAT(GMOCK_INTERNAL_MATCHER_PARAMETER, _Signature, _N))       \\}\par
189 {\cf21       GMOCK_PP_IF(_Constness, const, ) _RefSpec \{                              \\}\par
190 {\cf21     GMOCK_MOCKER_(_N, _Constness, _MethodName).RegisterOwner(this);            \\}\par
191 {\cf21     return GMOCK_MOCKER_(_N, _Constness, _MethodName)                          \\}\par
192 {\cf21         .With(GMOCK_PP_REPEAT(GMOCK_INTERNAL_MATCHER_ARGUMENT, , _N));         \\}\par
193 {\cf21   \}                                                                            \\}\par
194 {\cf21   ::testing::MockSpec<GMOCK_PP_REMOVE_PARENS(_Signature)> gmock_##_MethodName( \\}\par
195 {\cf21       const ::testing::internal::WithoutMatchers&,                             \\}\par
196 {\cf21       GMOCK_PP_IF(_Constness, const, )::testing::internal::Function<           \\}\par
197 {\cf21           GMOCK_PP_REMOVE_PARENS(_Signature)>*) const _RefSpec _NoexceptSpec \{ \\}\par
198 {\cf21     return ::testing::internal::ThisRefAdjuster<GMOCK_PP_IF(                   \\}\par
199 {\cf21         _Constness, const, ) int _RefSpec>::Adjust(*this)                      \\}\par
200 {\cf21         .gmock_##_MethodName(GMOCK_PP_REPEAT(                                  \\}\par
201 {\cf21             GMOCK_INTERNAL_A_MATCHER_ARGUMENT, _Signature, _N));               \\}\par
202 {\cf21   \}                                                                            \\}\par
203 {\cf21   mutable ::testing::FunctionMocker<GMOCK_PP_REMOVE_PARENS(_Signature)>        \\}\par
204 {\cf21   GMOCK_MOCKER_(_N, _Constness, _MethodName)}\par
205 \par
206 {\cf21 #define GMOCK_INTERNAL_EXPAND(...) __VA_ARGS__}\par
207 \par
208 {\cf20 // Valid modifiers.}\par
209 {\cf21 #define GMOCK_INTERNAL_HAS_CONST(_Tuple) \\}\par
210 {\cf21   GMOCK_PP_HAS_COMMA(GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_DETECT_CONST, ~, _Tuple))}\par
211 \par
212 {\cf21 #define GMOCK_INTERNAL_HAS_OVERRIDE(_Tuple) \\}\par
213 {\cf21   GMOCK_PP_HAS_COMMA(                       \\}\par
214 {\cf21       GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_DETECT_OVERRIDE, ~, _Tuple))}\par
215 \par
216 {\cf21 #define GMOCK_INTERNAL_HAS_FINAL(_Tuple) \\}\par
217 {\cf21   GMOCK_PP_HAS_COMMA(GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_DETECT_FINAL, ~, _Tuple))}\par
218 \par
219 {\cf21 #define GMOCK_INTERNAL_GET_NOEXCEPT_SPEC(_Tuple) \\}\par
220 {\cf21   GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_NOEXCEPT_SPEC_IF_NOEXCEPT, ~, _Tuple)}\par
221 \par
222 {\cf21 #define GMOCK_INTERNAL_NOEXCEPT_SPEC_IF_NOEXCEPT(_i, _, _elem)          \\}\par
223 {\cf21   GMOCK_PP_IF(                                                          \\}\par
224 {\cf21       GMOCK_PP_HAS_COMMA(GMOCK_INTERNAL_DETECT_NOEXCEPT(_i, _, _elem)), \\}\par
225 {\cf21       _elem, )}\par
226 \par
227 {\cf21 #define GMOCK_INTERNAL_GET_CALLTYPE_SPEC(_Tuple) \\}\par
228 {\cf21   GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_CALLTYPE_SPEC_IF_CALLTYPE, ~, _Tuple)}\par
229 \par
230 {\cf21 #define GMOCK_INTERNAL_CALLTYPE_SPEC_IF_CALLTYPE(_i, _, _elem)          \\}\par
231 {\cf21   GMOCK_PP_IF(                                                          \\}\par
232 {\cf21       GMOCK_PP_HAS_COMMA(GMOCK_INTERNAL_DETECT_CALLTYPE(_i, _, _elem)), \\}\par
233 {\cf21       GMOCK_PP_CAT(GMOCK_INTERNAL_UNPACK_, _elem), )}\par
234 \par
235 {\cf21 #define GMOCK_INTERNAL_GET_REF_SPEC(_Tuple) \\}\par
236 {\cf21   GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_REF_SPEC_IF_REF, ~, _Tuple)}\par
237 \par
238 {\cf21 #define GMOCK_INTERNAL_REF_SPEC_IF_REF(_i, _, _elem)                       \\}\par
239 {\cf21   GMOCK_PP_IF(GMOCK_PP_HAS_COMMA(GMOCK_INTERNAL_DETECT_REF(_i, _, _elem)), \\}\par
240 {\cf21               GMOCK_PP_CAT(GMOCK_INTERNAL_UNPACK_, _elem), )}\par
241 \par
242 {\cf21 #ifdef GMOCK_INTERNAL_STRICT_SPEC_ASSERT}\par
243 {\cf21 #define GMOCK_INTERNAL_ASSERT_VALID_SPEC_ELEMENT(_i, _, _elem) \\}\par
244 {\cf21   static_assert(                                                     \\}\par
245 {\cf21       ::testing::internal::ValidateSpec(GMOCK_PP_STRINGIZE(_elem)),  \\}\par
246 {\cf21       "Token \\'"} GMOCK_PP_STRINGIZE(                                 \\\par
247           _elem) "\\' cannot be recognized as a valid specification " \\\par
248                  "modifier. Is a ',' missing?");\par
249 {\cf21 #else}\par
250 {\cf21 #define GMOCK_INTERNAL_ASSERT_VALID_SPEC_ELEMENT(_i, _, _elem)                 \\}\par
251 {\cf21   static_assert(                                                               \\}\par
252 {\cf21       (GMOCK_PP_HAS_COMMA(GMOCK_INTERNAL_DETECT_CONST(_i, _, _elem)) +         \\}\par
253 {\cf21        GMOCK_PP_HAS_COMMA(GMOCK_INTERNAL_DETECT_OVERRIDE(_i, _, _elem)) +      \\}\par
254 {\cf21        GMOCK_PP_HAS_COMMA(GMOCK_INTERNAL_DETECT_FINAL(_i, _, _elem)) +         \\}\par
255 {\cf21        GMOCK_PP_HAS_COMMA(GMOCK_INTERNAL_DETECT_NOEXCEPT(_i, _, _elem)) +      \\}\par
256 {\cf21        GMOCK_PP_HAS_COMMA(GMOCK_INTERNAL_DETECT_REF(_i, _, _elem)) +           \\}\par
257 {\cf21        GMOCK_PP_HAS_COMMA(GMOCK_INTERNAL_DETECT_CALLTYPE(_i, _, _elem))) == 1, \\}\par
258 {\cf21       GMOCK_PP_STRINGIZE(                                                      \\}\par
259 {\cf21           _elem) " cannot be recognized as a valid specification modifier."});\par
260 {\cf21 #endif  }{\cf20 // GMOCK_INTERNAL_STRICT_SPEC_ASSERT}\par
261 \par
262 {\cf20 // Modifiers implementation.}\par
263 {\cf21 #define GMOCK_INTERNAL_DETECT_CONST(_i, _, _elem) \\}\par
264 {\cf21   GMOCK_PP_CAT(GMOCK_INTERNAL_DETECT_CONST_I_, _elem)}\par
265 \par
266 {\cf21 #define GMOCK_INTERNAL_DETECT_CONST_I_const ,}\par
267 \par
268 {\cf21 #define GMOCK_INTERNAL_DETECT_OVERRIDE(_i, _, _elem) \\}\par
269 {\cf21   GMOCK_PP_CAT(GMOCK_INTERNAL_DETECT_OVERRIDE_I_, _elem)}\par
270 \par
271 {\cf21 #define GMOCK_INTERNAL_DETECT_OVERRIDE_I_override ,}\par
272 \par
273 {\cf21 #define GMOCK_INTERNAL_DETECT_FINAL(_i, _, _elem) \\}\par
274 {\cf21   GMOCK_PP_CAT(GMOCK_INTERNAL_DETECT_FINAL_I_, _elem)}\par
275 \par
276 {\cf21 #define GMOCK_INTERNAL_DETECT_FINAL_I_final ,}\par
277 \par
278 {\cf21 #define GMOCK_INTERNAL_DETECT_NOEXCEPT(_i, _, _elem) \\}\par
279 {\cf21   GMOCK_PP_CAT(GMOCK_INTERNAL_DETECT_NOEXCEPT_I_, _elem)}\par
280 \par
281 {\cf21 #define GMOCK_INTERNAL_DETECT_NOEXCEPT_I_noexcept ,}\par
282 \par
283 {\cf21 #define GMOCK_INTERNAL_DETECT_REF(_i, _, _elem) \\}\par
284 {\cf21   GMOCK_PP_CAT(GMOCK_INTERNAL_DETECT_REF_I_, _elem)}\par
285 \par
286 {\cf21 #define GMOCK_INTERNAL_DETECT_REF_I_ref ,}\par
287 \par
288 {\cf21 #define GMOCK_INTERNAL_UNPACK_ref(x) x}\par
289 \par
290 {\cf21 #define GMOCK_INTERNAL_DETECT_CALLTYPE(_i, _, _elem) \\}\par
291 {\cf21   GMOCK_PP_CAT(GMOCK_INTERNAL_DETECT_CALLTYPE_I_, _elem)}\par
292 \par
293 {\cf21 #define GMOCK_INTERNAL_DETECT_CALLTYPE_I_Calltype ,}\par
294 \par
295 {\cf21 #define GMOCK_INTERNAL_UNPACK_Calltype(...) __VA_ARGS__}\par
296 \par
297 {\cf20 // Note: The use of `identity_t` here allows _Ret to represent return types that}\par
298 {\cf20 // would normally need to be specified in a different way. For example, a method}\par
299 {\cf20 // returning a function pointer must be written as}\par
300 {\cf20 //}\par
301 {\cf20 // fn_ptr_return_t (*method(method_args_t...))(fn_ptr_args_t...)}\par
302 {\cf20 //}\par
303 {\cf20 // But we only support placing the return type at the beginning. To handle this,}\par
304 {\cf20 // we wrap all calls in identity_t, so that a declaration will be expanded to}\par
305 {\cf20 //}\par
306 {\cf20 // identity_t<fn_ptr_return_t (*)(fn_ptr_args_t...)> method(method_args_t...)}\par
307 {\cf20 //}\par
308 {\cf20 // This allows us to work around the syntactic oddities of function/method}\par
309 {\cf20 // types.}\par
310 {\cf21 #define GMOCK_INTERNAL_SIGNATURE(_Ret, _Args)                                 \\}\par
311 {\cf21   ::testing::internal::identity_t<GMOCK_PP_IF(GMOCK_PP_IS_BEGIN_PARENS(_Ret), \\}\par
312 {\cf21                                               GMOCK_PP_REMOVE_PARENS,         \\}\par
313 {\cf21                                               GMOCK_PP_IDENTITY)(_Ret)>(      \\}\par
314 {\cf21       GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_GET_TYPE, _, _Args))}\par
315 \par
316 {\cf21 #define GMOCK_INTERNAL_GET_TYPE(_i, _, _elem)                          \\}\par
317 {\cf21   GMOCK_PP_COMMA_IF(_i)                                                \\}\par
318 {\cf21   GMOCK_PP_IF(GMOCK_PP_IS_BEGIN_PARENS(_elem), GMOCK_PP_REMOVE_PARENS, \\}\par
319 {\cf21               GMOCK_PP_IDENTITY)                                       \\}\par
320 {\cf21   (_elem)}\par
321 \par
322 {\cf21 #define GMOCK_INTERNAL_PARAMETER(_i, _Signature, _)            \\}\par
323 {\cf21   GMOCK_PP_COMMA_IF(_i)                                        \\}\par
324 {\cf21   GMOCK_INTERNAL_ARG_O(_i, GMOCK_PP_REMOVE_PARENS(_Signature)) \\}\par
325 {\cf21   gmock_a##_i}\par
326 \par
327 {\cf21 #define GMOCK_INTERNAL_FORWARD_ARG(_i, _Signature, _) \\}\par
328 {\cf21   GMOCK_PP_COMMA_IF(_i)                               \\}\par
329 {\cf21   ::std::forward<GMOCK_INTERNAL_ARG_O(                \\}\par
330 {\cf21       _i, GMOCK_PP_REMOVE_PARENS(_Signature))>(gmock_a##_i)}\par
331 \par
332 {\cf21 #define GMOCK_INTERNAL_MATCHER_PARAMETER(_i, _Signature, _)        \\}\par
333 {\cf21   GMOCK_PP_COMMA_IF(_i)                                            \\}\par
334 {\cf21   GMOCK_INTERNAL_MATCHER_O(_i, GMOCK_PP_REMOVE_PARENS(_Signature)) \\}\par
335 {\cf21   gmock_a##_i}\par
336 \par
337 {\cf21 #define GMOCK_INTERNAL_MATCHER_ARGUMENT(_i, _1, _2) \\}\par
338 {\cf21   GMOCK_PP_COMMA_IF(_i)                             \\}\par
339 {\cf21   gmock_a##_i}\par
340 \par
341 {\cf21 #define GMOCK_INTERNAL_A_MATCHER_ARGUMENT(_i, _Signature, _) \\}\par
342 {\cf21   GMOCK_PP_COMMA_IF(_i)                                      \\}\par
343 {\cf21   ::testing::A<GMOCK_INTERNAL_ARG_O(_i, GMOCK_PP_REMOVE_PARENS(_Signature))>()}\par
344 \par
345 {\cf21 #define GMOCK_INTERNAL_ARG_O(_i, ...) \\}\par
346 {\cf21   typename ::testing::internal::Function<__VA_ARGS__>::template Arg<_i>::type}\par
347 \par
348 {\cf21 #define GMOCK_INTERNAL_MATCHER_O(_i, ...)                          \\}\par
349 {\cf21   const ::testing::Matcher<typename ::testing::internal::Function< \\}\par
350 {\cf21       __VA_ARGS__>::template Arg<_i>::type>&}\par
351 \par
352 {\cf21 #define MOCK_METHOD0(m, ...) GMOCK_INTERNAL_MOCK_METHODN(, , m, 0, __VA_ARGS__)}\par
353 {\cf21 #define MOCK_METHOD1(m, ...) GMOCK_INTERNAL_MOCK_METHODN(, , m, 1, __VA_ARGS__)}\par
354 {\cf21 #define MOCK_METHOD2(m, ...) GMOCK_INTERNAL_MOCK_METHODN(, , m, 2, __VA_ARGS__)}\par
355 {\cf21 #define MOCK_METHOD3(m, ...) GMOCK_INTERNAL_MOCK_METHODN(, , m, 3, __VA_ARGS__)}\par
356 {\cf21 #define MOCK_METHOD4(m, ...) GMOCK_INTERNAL_MOCK_METHODN(, , m, 4, __VA_ARGS__)}\par
357 {\cf21 #define MOCK_METHOD5(m, ...) GMOCK_INTERNAL_MOCK_METHODN(, , m, 5, __VA_ARGS__)}\par
358 {\cf21 #define MOCK_METHOD6(m, ...) GMOCK_INTERNAL_MOCK_METHODN(, , m, 6, __VA_ARGS__)}\par
359 {\cf21 #define MOCK_METHOD7(m, ...) GMOCK_INTERNAL_MOCK_METHODN(, , m, 7, __VA_ARGS__)}\par
360 {\cf21 #define MOCK_METHOD8(m, ...) GMOCK_INTERNAL_MOCK_METHODN(, , m, 8, __VA_ARGS__)}\par
361 {\cf21 #define MOCK_METHOD9(m, ...) GMOCK_INTERNAL_MOCK_METHODN(, , m, 9, __VA_ARGS__)}\par
362 {\cf21 #define MOCK_METHOD10(m, ...) \\}\par
363 {\cf21   GMOCK_INTERNAL_MOCK_METHODN(, , m, 10, __VA_ARGS__)}\par
364 \par
365 {\cf21 #define MOCK_CONST_METHOD0(m, ...) \\}\par
366 {\cf21   GMOCK_INTERNAL_MOCK_METHODN(const, , m, 0, __VA_ARGS__)}\par
367 {\cf21 #define MOCK_CONST_METHOD1(m, ...) \\}\par
368 {\cf21   GMOCK_INTERNAL_MOCK_METHODN(const, , m, 1, __VA_ARGS__)}\par
369 {\cf21 #define MOCK_CONST_METHOD2(m, ...) \\}\par
370 {\cf21   GMOCK_INTERNAL_MOCK_METHODN(const, , m, 2, __VA_ARGS__)}\par
371 {\cf21 #define MOCK_CONST_METHOD3(m, ...) \\}\par
372 {\cf21   GMOCK_INTERNAL_MOCK_METHODN(const, , m, 3, __VA_ARGS__)}\par
373 {\cf21 #define MOCK_CONST_METHOD4(m, ...) \\}\par
374 {\cf21   GMOCK_INTERNAL_MOCK_METHODN(const, , m, 4, __VA_ARGS__)}\par
375 {\cf21 #define MOCK_CONST_METHOD5(m, ...) \\}\par
376 {\cf21   GMOCK_INTERNAL_MOCK_METHODN(const, , m, 5, __VA_ARGS__)}\par
377 {\cf21 #define MOCK_CONST_METHOD6(m, ...) \\}\par
378 {\cf21   GMOCK_INTERNAL_MOCK_METHODN(const, , m, 6, __VA_ARGS__)}\par
379 {\cf21 #define MOCK_CONST_METHOD7(m, ...) \\}\par
380 {\cf21   GMOCK_INTERNAL_MOCK_METHODN(const, , m, 7, __VA_ARGS__)}\par
381 {\cf21 #define MOCK_CONST_METHOD8(m, ...) \\}\par
382 {\cf21   GMOCK_INTERNAL_MOCK_METHODN(const, , m, 8, __VA_ARGS__)}\par
383 {\cf21 #define MOCK_CONST_METHOD9(m, ...) \\}\par
384 {\cf21   GMOCK_INTERNAL_MOCK_METHODN(const, , m, 9, __VA_ARGS__)}\par
385 {\cf21 #define MOCK_CONST_METHOD10(m, ...) \\}\par
386 {\cf21   GMOCK_INTERNAL_MOCK_METHODN(const, , m, 10, __VA_ARGS__)}\par
387 \par
388 {\cf21 #define MOCK_METHOD0_T(m, ...) MOCK_METHOD0(m, __VA_ARGS__)}\par
389 {\cf21 #define MOCK_METHOD1_T(m, ...) MOCK_METHOD1(m, __VA_ARGS__)}\par
390 {\cf21 #define MOCK_METHOD2_T(m, ...) MOCK_METHOD2(m, __VA_ARGS__)}\par
391 {\cf21 #define MOCK_METHOD3_T(m, ...) MOCK_METHOD3(m, __VA_ARGS__)}\par
392 {\cf21 #define MOCK_METHOD4_T(m, ...) MOCK_METHOD4(m, __VA_ARGS__)}\par
393 {\cf21 #define MOCK_METHOD5_T(m, ...) MOCK_METHOD5(m, __VA_ARGS__)}\par
394 {\cf21 #define MOCK_METHOD6_T(m, ...) MOCK_METHOD6(m, __VA_ARGS__)}\par
395 {\cf21 #define MOCK_METHOD7_T(m, ...) MOCK_METHOD7(m, __VA_ARGS__)}\par
396 {\cf21 #define MOCK_METHOD8_T(m, ...) MOCK_METHOD8(m, __VA_ARGS__)}\par
397 {\cf21 #define MOCK_METHOD9_T(m, ...) MOCK_METHOD9(m, __VA_ARGS__)}\par
398 {\cf21 #define MOCK_METHOD10_T(m, ...) MOCK_METHOD10(m, __VA_ARGS__)}\par
399 \par
400 {\cf21 #define MOCK_CONST_METHOD0_T(m, ...) MOCK_CONST_METHOD0(m, __VA_ARGS__)}\par
401 {\cf21 #define MOCK_CONST_METHOD1_T(m, ...) MOCK_CONST_METHOD1(m, __VA_ARGS__)}\par
402 {\cf21 #define MOCK_CONST_METHOD2_T(m, ...) MOCK_CONST_METHOD2(m, __VA_ARGS__)}\par
403 {\cf21 #define MOCK_CONST_METHOD3_T(m, ...) MOCK_CONST_METHOD3(m, __VA_ARGS__)}\par
404 {\cf21 #define MOCK_CONST_METHOD4_T(m, ...) MOCK_CONST_METHOD4(m, __VA_ARGS__)}\par
405 {\cf21 #define MOCK_CONST_METHOD5_T(m, ...) MOCK_CONST_METHOD5(m, __VA_ARGS__)}\par
406 {\cf21 #define MOCK_CONST_METHOD6_T(m, ...) MOCK_CONST_METHOD6(m, __VA_ARGS__)}\par
407 {\cf21 #define MOCK_CONST_METHOD7_T(m, ...) MOCK_CONST_METHOD7(m, __VA_ARGS__)}\par
408 {\cf21 #define MOCK_CONST_METHOD8_T(m, ...) MOCK_CONST_METHOD8(m, __VA_ARGS__)}\par
409 {\cf21 #define MOCK_CONST_METHOD9_T(m, ...) MOCK_CONST_METHOD9(m, __VA_ARGS__)}\par
410 {\cf21 #define MOCK_CONST_METHOD10_T(m, ...) MOCK_CONST_METHOD10(m, __VA_ARGS__)}\par
411 \par
412 {\cf21 #define MOCK_METHOD0_WITH_CALLTYPE(ct, m, ...) \\}\par
413 {\cf21   GMOCK_INTERNAL_MOCK_METHODN(, ct, m, 0, __VA_ARGS__)}\par
414 {\cf21 #define MOCK_METHOD1_WITH_CALLTYPE(ct, m, ...) \\}\par
415 {\cf21   GMOCK_INTERNAL_MOCK_METHODN(, ct, m, 1, __VA_ARGS__)}\par
416 {\cf21 #define MOCK_METHOD2_WITH_CALLTYPE(ct, m, ...) \\}\par
417 {\cf21   GMOCK_INTERNAL_MOCK_METHODN(, ct, m, 2, __VA_ARGS__)}\par
418 {\cf21 #define MOCK_METHOD3_WITH_CALLTYPE(ct, m, ...) \\}\par
419 {\cf21   GMOCK_INTERNAL_MOCK_METHODN(, ct, m, 3, __VA_ARGS__)}\par
420 {\cf21 #define MOCK_METHOD4_WITH_CALLTYPE(ct, m, ...) \\}\par
421 {\cf21   GMOCK_INTERNAL_MOCK_METHODN(, ct, m, 4, __VA_ARGS__)}\par
422 {\cf21 #define MOCK_METHOD5_WITH_CALLTYPE(ct, m, ...) \\}\par
423 {\cf21   GMOCK_INTERNAL_MOCK_METHODN(, ct, m, 5, __VA_ARGS__)}\par
424 {\cf21 #define MOCK_METHOD6_WITH_CALLTYPE(ct, m, ...) \\}\par
425 {\cf21   GMOCK_INTERNAL_MOCK_METHODN(, ct, m, 6, __VA_ARGS__)}\par
426 {\cf21 #define MOCK_METHOD7_WITH_CALLTYPE(ct, m, ...) \\}\par
427 {\cf21   GMOCK_INTERNAL_MOCK_METHODN(, ct, m, 7, __VA_ARGS__)}\par
428 {\cf21 #define MOCK_METHOD8_WITH_CALLTYPE(ct, m, ...) \\}\par
429 {\cf21   GMOCK_INTERNAL_MOCK_METHODN(, ct, m, 8, __VA_ARGS__)}\par
430 {\cf21 #define MOCK_METHOD9_WITH_CALLTYPE(ct, m, ...) \\}\par
431 {\cf21   GMOCK_INTERNAL_MOCK_METHODN(, ct, m, 9, __VA_ARGS__)}\par
432 {\cf21 #define MOCK_METHOD10_WITH_CALLTYPE(ct, m, ...) \\}\par
433 {\cf21   GMOCK_INTERNAL_MOCK_METHODN(, ct, m, 10, __VA_ARGS__)}\par
434 \par
435 {\cf21 #define MOCK_CONST_METHOD0_WITH_CALLTYPE(ct, m, ...) \\}\par
436 {\cf21   GMOCK_INTERNAL_MOCK_METHODN(const, ct, m, 0, __VA_ARGS__)}\par
437 {\cf21 #define MOCK_CONST_METHOD1_WITH_CALLTYPE(ct, m, ...) \\}\par
438 {\cf21   GMOCK_INTERNAL_MOCK_METHODN(const, ct, m, 1, __VA_ARGS__)}\par
439 {\cf21 #define MOCK_CONST_METHOD2_WITH_CALLTYPE(ct, m, ...) \\}\par
440 {\cf21   GMOCK_INTERNAL_MOCK_METHODN(const, ct, m, 2, __VA_ARGS__)}\par
441 {\cf21 #define MOCK_CONST_METHOD3_WITH_CALLTYPE(ct, m, ...) \\}\par
442 {\cf21   GMOCK_INTERNAL_MOCK_METHODN(const, ct, m, 3, __VA_ARGS__)}\par
443 {\cf21 #define MOCK_CONST_METHOD4_WITH_CALLTYPE(ct, m, ...) \\}\par
444 {\cf21   GMOCK_INTERNAL_MOCK_METHODN(const, ct, m, 4, __VA_ARGS__)}\par
445 {\cf21 #define MOCK_CONST_METHOD5_WITH_CALLTYPE(ct, m, ...) \\}\par
446 {\cf21   GMOCK_INTERNAL_MOCK_METHODN(const, ct, m, 5, __VA_ARGS__)}\par
447 {\cf21 #define MOCK_CONST_METHOD6_WITH_CALLTYPE(ct, m, ...) \\}\par
448 {\cf21   GMOCK_INTERNAL_MOCK_METHODN(const, ct, m, 6, __VA_ARGS__)}\par
449 {\cf21 #define MOCK_CONST_METHOD7_WITH_CALLTYPE(ct, m, ...) \\}\par
450 {\cf21   GMOCK_INTERNAL_MOCK_METHODN(const, ct, m, 7, __VA_ARGS__)}\par
451 {\cf21 #define MOCK_CONST_METHOD8_WITH_CALLTYPE(ct, m, ...) \\}\par
452 {\cf21   GMOCK_INTERNAL_MOCK_METHODN(const, ct, m, 8, __VA_ARGS__)}\par
453 {\cf21 #define MOCK_CONST_METHOD9_WITH_CALLTYPE(ct, m, ...) \\}\par
454 {\cf21   GMOCK_INTERNAL_MOCK_METHODN(const, ct, m, 9, __VA_ARGS__)}\par
455 {\cf21 #define MOCK_CONST_METHOD10_WITH_CALLTYPE(ct, m, ...) \\}\par
456 {\cf21   GMOCK_INTERNAL_MOCK_METHODN(const, ct, m, 10, __VA_ARGS__)}\par
457 \par
458 {\cf21 #define MOCK_METHOD0_T_WITH_CALLTYPE(ct, m, ...) \\}\par
459 {\cf21   MOCK_METHOD0_WITH_CALLTYPE(ct, m, __VA_ARGS__)}\par
460 {\cf21 #define MOCK_METHOD1_T_WITH_CALLTYPE(ct, m, ...) \\}\par
461 {\cf21   MOCK_METHOD1_WITH_CALLTYPE(ct, m, __VA_ARGS__)}\par
462 {\cf21 #define MOCK_METHOD2_T_WITH_CALLTYPE(ct, m, ...) \\}\par
463 {\cf21   MOCK_METHOD2_WITH_CALLTYPE(ct, m, __VA_ARGS__)}\par
464 {\cf21 #define MOCK_METHOD3_T_WITH_CALLTYPE(ct, m, ...) \\}\par
465 {\cf21   MOCK_METHOD3_WITH_CALLTYPE(ct, m, __VA_ARGS__)}\par
466 {\cf21 #define MOCK_METHOD4_T_WITH_CALLTYPE(ct, m, ...) \\}\par
467 {\cf21   MOCK_METHOD4_WITH_CALLTYPE(ct, m, __VA_ARGS__)}\par
468 {\cf21 #define MOCK_METHOD5_T_WITH_CALLTYPE(ct, m, ...) \\}\par
469 {\cf21   MOCK_METHOD5_WITH_CALLTYPE(ct, m, __VA_ARGS__)}\par
470 {\cf21 #define MOCK_METHOD6_T_WITH_CALLTYPE(ct, m, ...) \\}\par
471 {\cf21   MOCK_METHOD6_WITH_CALLTYPE(ct, m, __VA_ARGS__)}\par
472 {\cf21 #define MOCK_METHOD7_T_WITH_CALLTYPE(ct, m, ...) \\}\par
473 {\cf21   MOCK_METHOD7_WITH_CALLTYPE(ct, m, __VA_ARGS__)}\par
474 {\cf21 #define MOCK_METHOD8_T_WITH_CALLTYPE(ct, m, ...) \\}\par
475 {\cf21   MOCK_METHOD8_WITH_CALLTYPE(ct, m, __VA_ARGS__)}\par
476 {\cf21 #define MOCK_METHOD9_T_WITH_CALLTYPE(ct, m, ...) \\}\par
477 {\cf21   MOCK_METHOD9_WITH_CALLTYPE(ct, m, __VA_ARGS__)}\par
478 {\cf21 #define MOCK_METHOD10_T_WITH_CALLTYPE(ct, m, ...) \\}\par
479 {\cf21   MOCK_METHOD10_WITH_CALLTYPE(ct, m, __VA_ARGS__)}\par
480 \par
481 {\cf21 #define MOCK_CONST_METHOD0_T_WITH_CALLTYPE(ct, m, ...) \\}\par
482 {\cf21   MOCK_CONST_METHOD0_WITH_CALLTYPE(ct, m, __VA_ARGS__)}\par
483 {\cf21 #define MOCK_CONST_METHOD1_T_WITH_CALLTYPE(ct, m, ...) \\}\par
484 {\cf21   MOCK_CONST_METHOD1_WITH_CALLTYPE(ct, m, __VA_ARGS__)}\par
485 {\cf21 #define MOCK_CONST_METHOD2_T_WITH_CALLTYPE(ct, m, ...) \\}\par
486 {\cf21   MOCK_CONST_METHOD2_WITH_CALLTYPE(ct, m, __VA_ARGS__)}\par
487 {\cf21 #define MOCK_CONST_METHOD3_T_WITH_CALLTYPE(ct, m, ...) \\}\par
488 {\cf21   MOCK_CONST_METHOD3_WITH_CALLTYPE(ct, m, __VA_ARGS__)}\par
489 {\cf21 #define MOCK_CONST_METHOD4_T_WITH_CALLTYPE(ct, m, ...) \\}\par
490 {\cf21   MOCK_CONST_METHOD4_WITH_CALLTYPE(ct, m, __VA_ARGS__)}\par
491 {\cf21 #define MOCK_CONST_METHOD5_T_WITH_CALLTYPE(ct, m, ...) \\}\par
492 {\cf21   MOCK_CONST_METHOD5_WITH_CALLTYPE(ct, m, __VA_ARGS__)}\par
493 {\cf21 #define MOCK_CONST_METHOD6_T_WITH_CALLTYPE(ct, m, ...) \\}\par
494 {\cf21   MOCK_CONST_METHOD6_WITH_CALLTYPE(ct, m, __VA_ARGS__)}\par
495 {\cf21 #define MOCK_CONST_METHOD7_T_WITH_CALLTYPE(ct, m, ...) \\}\par
496 {\cf21   MOCK_CONST_METHOD7_WITH_CALLTYPE(ct, m, __VA_ARGS__)}\par
497 {\cf21 #define MOCK_CONST_METHOD8_T_WITH_CALLTYPE(ct, m, ...) \\}\par
498 {\cf21   MOCK_CONST_METHOD8_WITH_CALLTYPE(ct, m, __VA_ARGS__)}\par
499 {\cf21 #define MOCK_CONST_METHOD9_T_WITH_CALLTYPE(ct, m, ...) \\}\par
500 {\cf21   MOCK_CONST_METHOD9_WITH_CALLTYPE(ct, m, __VA_ARGS__)}\par
501 {\cf21 #define MOCK_CONST_METHOD10_T_WITH_CALLTYPE(ct, m, ...) \\}\par
502 {\cf21   MOCK_CONST_METHOD10_WITH_CALLTYPE(ct, m, __VA_ARGS__)}\par
503 \par
504 {\cf21 #define GMOCK_INTERNAL_MOCK_METHODN(constness, ct, Method, args_num, ...) \\}\par
505 {\cf21   GMOCK_INTERNAL_ASSERT_VALID_SIGNATURE(                                  \\}\par
506 {\cf21       args_num, ::testing::internal::identity_t<__VA_ARGS__>);            \\}\par
507 {\cf21   GMOCK_INTERNAL_MOCK_METHOD_IMPL(                                        \\}\par
508 {\cf21       args_num, Method, GMOCK_PP_NARG0(constness), 0, 0, , ct, ,          \\}\par
509 {\cf21       (::testing::internal::identity_t<__VA_ARGS__>))}\par
510 \par
511 {\cf21 #define GMOCK_MOCKER_(arity, constness, Method) \\}\par
512 {\cf21   GTEST_CONCAT_TOKEN_(gmock##constness##arity##_##Method##_, __LINE__)}\par
513 \par
514 {\cf21 #endif  }{\cf20 // GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_FUNCTION_MOCKER_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gmock-matchers.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googlemock/include/gmock/gmock-matchers.h}
{\xe \v lib/googletest-main/googlemock/include/gmock/gmock-matchers.h}
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2007, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // Google Mock - a framework for writing C++ mock classes.}\par
31 {\cf20 //}\par
32 {\cf20 // The MATCHER* family of macros can be used in a namespace scope to}\par
33 {\cf20 // define custom matchers easily.}\par
34 {\cf20 //}\par
35 {\cf20 // Basic Usage}\par
36 {\cf20 // ===========}\par
37 {\cf20 //}\par
38 {\cf20 // The syntax}\par
39 {\cf20 //}\par
40 {\cf20 //   MATCHER(name, description_string) \{ statements; \}}\par
41 {\cf20 //}\par
42 {\cf20 // defines a matcher with the given name that executes the statements,}\par
43 {\cf20 // which must return a bool to indicate if the match succeeds.  Inside}\par
44 {\cf20 // the statements, you can refer to the value being matched by 'arg',}\par
45 {\cf20 // and refer to its type by 'arg_type'.}\par
46 {\cf20 //}\par
47 {\cf20 // The description string documents what the matcher does, and is used}\par
48 {\cf20 // to generate the failure message when the match fails.  Since a}\par
49 {\cf20 // MATCHER() is usually defined in a header file shared by multiple}\par
50 {\cf20 // C++ source files, we require the description to be a C-string}\par
51 {\cf20 // literal to avoid possible side effects.  It can be empty, in which}\par
52 {\cf20 // case we'll use the sequence of words in the matcher name as the}\par
53 {\cf20 // description.}\par
54 {\cf20 //}\par
55 {\cf20 // For example:}\par
56 {\cf20 //}\par
57 {\cf20 //   MATCHER(IsEven, "") \{ return (arg % 2) == 0; \}}\par
58 {\cf20 //}\par
59 {\cf20 // allows you to write}\par
60 {\cf20 //}\par
61 {\cf20 //   // Expects mock_foo.Bar(n) to be called where n is even.}\par
62 {\cf20 //   EXPECT_CALL(mock_foo, Bar(IsEven()));}\par
63 {\cf20 //}\par
64 {\cf20 // or,}\par
65 {\cf20 //}\par
66 {\cf20 //   // Verifies that the value of some_expression is even.}\par
67 {\cf20 //   EXPECT_THAT(some_expression, IsEven());}\par
68 {\cf20 //}\par
69 {\cf20 // If the above assertion fails, it will print something like:}\par
70 {\cf20 //}\par
71 {\cf20 //   Value of: some_expression}\par
72 {\cf20 //   Expected: is even}\par
73 {\cf20 //     Actual: 7}\par
74 {\cf20 //}\par
75 {\cf20 // where the description "is even" is automatically calculated from the}\par
76 {\cf20 // matcher name IsEven.}\par
77 {\cf20 //}\par
78 {\cf20 // Argument Type}\par
79 {\cf20 // =============}\par
80 {\cf20 //}\par
81 {\cf20 // Note that the type of the value being matched (arg_type) is}\par
82 {\cf20 // determined by the context in which you use the matcher and is}\par
83 {\cf20 // supplied to you by the compiler, so you don't need to worry about}\par
84 {\cf20 // declaring it (nor can you).  This allows the matcher to be}\par
85 {\cf20 // polymorphic.  For example, IsEven() can be used to match any type}\par
86 {\cf20 // where the value of "(arg % 2) == 0" can be implicitly converted to}\par
87 {\cf20 // a bool.  In the "Bar(IsEven())" example above, if method Bar()}\par
88 {\cf20 // takes an int, 'arg_type' will be int; if it takes an unsigned long,}\par
89 {\cf20 // 'arg_type' will be unsigned long; and so on.}\par
90 {\cf20 //}\par
91 {\cf20 // Parameterizing Matchers}\par
92 {\cf20 // =======================}\par
93 {\cf20 //}\par
94 {\cf20 // Sometimes you'll want to parameterize the matcher.  For that you}\par
95 {\cf20 // can use another macro:}\par
96 {\cf20 //}\par
97 {\cf20 //   MATCHER_P(name, param_name, description_string) \{ statements; \}}\par
98 {\cf20 //}\par
99 {\cf20 // For example:}\par
100 {\cf20 //}\par
101 {\cf20 //   MATCHER_P(HasAbsoluteValue, value, "") \{ return abs(arg) == value; \}}\par
102 {\cf20 //}\par
103 {\cf20 // will allow you to write:}\par
104 {\cf20 //}\par
105 {\cf20 //   EXPECT_THAT(Blah("a"), HasAbsoluteValue(n));}\par
106 {\cf20 //}\par
107 {\cf20 // which may lead to this message (assuming n is 10):}\par
108 {\cf20 //}\par
109 {\cf20 //   Value of: Blah("a")}\par
110 {\cf20 //   Expected: has absolute value 10}\par
111 {\cf20 //     Actual: -9}\par
112 {\cf20 //}\par
113 {\cf20 // Note that both the matcher description and its parameter are}\par
114 {\cf20 // printed, making the message human-friendly.}\par
115 {\cf20 //}\par
116 {\cf20 // In the matcher definition body, you can write 'foo_type' to}\par
117 {\cf20 // reference the type of a parameter named 'foo'.  For example, in the}\par
118 {\cf20 // body of MATCHER_P(HasAbsoluteValue, value) above, you can write}\par
119 {\cf20 // 'value_type' to refer to the type of 'value'.}\par
120 {\cf20 //}\par
121 {\cf20 // We also provide MATCHER_P2, MATCHER_P3, ..., up to MATCHER_P$n to}\par
122 {\cf20 // support multi-parameter matchers.}\par
123 {\cf20 //}\par
124 {\cf20 // Describing Parameterized Matchers}\par
125 {\cf20 // =================================}\par
126 {\cf20 //}\par
127 {\cf20 // The last argument to MATCHER*() is a string-typed expression.  The}\par
128 {\cf20 // expression can reference all of the matcher's parameters and a}\par
129 {\cf20 // special bool-typed variable named 'negation'.  When 'negation' is}\par
130 {\cf20 // false, the expression should evaluate to the matcher's description;}\par
131 {\cf20 // otherwise it should evaluate to the description of the negation of}\par
132 {\cf20 // the matcher.  For example,}\par
133 {\cf20 //}\par
134 {\cf20 //   using testing::PrintToString;}\par
135 {\cf20 //}\par
136 {\cf20 //   MATCHER_P2(InClosedRange, low, hi,}\par
137 {\cf20 //       std::string(negation ? "is not" : "is") + " in range [" +}\par
138 {\cf20 //       PrintToString(low) + ", " + PrintToString(hi) + "]") \{}\par
139 {\cf20 //     return low <= arg && arg <= hi;}\par
140 {\cf20 //   \}}\par
141 {\cf20 //   ...}\par
142 {\cf20 //   EXPECT_THAT(3, InClosedRange(4, 6));}\par
143 {\cf20 //   EXPECT_THAT(3, Not(InClosedRange(2, 4)));}\par
144 {\cf20 //}\par
145 {\cf20 // would generate two failures that contain the text:}\par
146 {\cf20 //}\par
147 {\cf20 //   Expected: is in range [4, 6]}\par
148 {\cf20 //   ...}\par
149 {\cf20 //   Expected: is not in range [2, 4]}\par
150 {\cf20 //}\par
151 {\cf20 // If you specify "" as the description, the failure message will}\par
152 {\cf20 // contain the sequence of words in the matcher name followed by the}\par
153 {\cf20 // parameter values printed as a tuple.  For example,}\par
154 {\cf20 //}\par
155 {\cf20 //   MATCHER_P2(InClosedRange, low, hi, "") \{ ... \}}\par
156 {\cf20 //   ...}\par
157 {\cf20 //   EXPECT_THAT(3, InClosedRange(4, 6));}\par
158 {\cf20 //   EXPECT_THAT(3, Not(InClosedRange(2, 4)));}\par
159 {\cf20 //}\par
160 {\cf20 // would generate two failures that contain the text:}\par
161 {\cf20 //}\par
162 {\cf20 //   Expected: in closed range (4, 6)}\par
163 {\cf20 //   ...}\par
164 {\cf20 //   Expected: not (in closed range (2, 4))}\par
165 {\cf20 //}\par
166 {\cf20 // Types of Matcher Parameters}\par
167 {\cf20 // ===========================}\par
168 {\cf20 //}\par
169 {\cf20 // For the purpose of typing, you can view}\par
170 {\cf20 //}\par
171 {\cf20 //   MATCHER_Pk(Foo, p1, ..., pk, description_string) \{ ... \}}\par
172 {\cf20 //}\par
173 {\cf20 // as shorthand for}\par
174 {\cf20 //}\par
175 {\cf20 //   template <typename p1_type, ..., typename pk_type>}\par
176 {\cf20 //   FooMatcherPk<p1_type, ..., pk_type>}\par
177 {\cf20 //   Foo(p1_type p1, ..., pk_type pk) \{ ... \}}\par
178 {\cf20 //}\par
179 {\cf20 // When you write Foo(v1, ..., vk), the compiler infers the types of}\par
180 {\cf20 // the parameters v1, ..., and vk for you.  If you are not happy with}\par
181 {\cf20 // the result of the type inference, you can specify the types by}\par
182 {\cf20 // explicitly instantiating the template, as in Foo<long, bool>(5,}\par
183 {\cf20 // false).  As said earlier, you don't get to (or need to) specify}\par
184 {\cf20 // 'arg_type' as that's determined by the context in which the matcher}\par
185 {\cf20 // is used.  You can assign the result of expression Foo(p1, ..., pk)}\par
186 {\cf20 // to a variable of type FooMatcherPk<p1_type, ..., pk_type>.  This}\par
187 {\cf20 // can be useful when composing matchers.}\par
188 {\cf20 //}\par
189 {\cf20 // While you can instantiate a matcher template with reference types,}\par
190 {\cf20 // passing the parameters by pointer usually makes your code more}\par
191 {\cf20 // readable.  If, however, you still want to pass a parameter by}\par
192 {\cf20 // reference, be aware that in the failure message generated by the}\par
193 {\cf20 // matcher you will see the value of the referenced object but not its}\par
194 {\cf20 // address.}\par
195 {\cf20 //}\par
196 {\cf20 // Explaining Match Results}\par
197 {\cf20 // ========================}\par
198 {\cf20 //}\par
199 {\cf20 // Sometimes the matcher description alone isn't enough to explain why}\par
200 {\cf20 // the match has failed or succeeded.  For example, when expecting a}\par
201 {\cf20 // long string, it can be very helpful to also print the diff between}\par
202 {\cf20 // the expected string and the actual one.  To achieve that, you can}\par
203 {\cf20 // optionally stream additional information to a special variable}\par
204 {\cf20 // named result_listener, whose type is a pointer to class}\par
205 {\cf20 // MatchResultListener:}\par
206 {\cf20 //}\par
207 {\cf20 //   MATCHER_P(EqualsLongString, str, "") \{}\par
208 {\cf20 //     if (arg == str) return true;}\par
209 {\cf20 //}\par
210 {\cf20 //     *result_listener << "the difference: "}\par
212 {\cf20 }{\cf20 //     return false;}\par
213 {\cf20 //   \}}\par
214 {\cf20 //}\par
215 {\cf20 // Overloading Matchers}\par
216 {\cf20 // ====================}\par
217 {\cf20 //}\par
218 {\cf20 // You can overload matchers with different numbers of parameters:}\par
219 {\cf20 //}\par
220 {\cf20 //   MATCHER_P(Blah, a, description_string1) \{ ... \}}\par
221 {\cf20 //   MATCHER_P2(Blah, a, b, description_string2) \{ ... \}}\par
222 {\cf20 //}\par
223 {\cf20 // Caveats}\par
224 {\cf20 // =======}\par
225 {\cf20 //}\par
226 {\cf20 // When defining a new matcher, you should also consider implementing}\par
227 {\cf20 // MatcherInterface or using MakePolymorphicMatcher().  These}\par
228 {\cf20 // approaches require more work than the MATCHER* macros, but also}\par
229 {\cf20 // give you more control on the types of the value being matched and}\par
230 {\cf20 // the matcher parameters, which may leads to better compiler error}\par
231 {\cf20 // messages when the matcher is used wrong.  They also allow}\par
232 {\cf20 // overloading matchers based on parameter types (as opposed to just}\par
233 {\cf20 // based on the number of parameters).}\par
234 {\cf20 //}\par
235 {\cf20 // MATCHER*() can only be used in a namespace scope as templates cannot be}\par
236 {\cf20 // declared inside of a local class.}\par
237 {\cf20 //}\par
238 {\cf20 // More Information}\par
239 {\cf20 // ================}\par
240 {\cf20 //}\par
241 {\cf20 // To learn more about using these macros, please search for 'MATCHER'}\par
242 {\cf20 // on}\par
243 {\cf20 // https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md}\par
244 {\cf20 //}\par
245 {\cf20 // This file also implements some commonly used argument matchers.  More}\par
246 {\cf20 // matchers can be defined by the user implementing the}\par
247 {\cf20 // MatcherInterface<T> interface if necessary.}\par
248 {\cf20 //}\par
249 {\cf20 // See googletest/include/gtest/gtest-matchers.h for the definition of class}\par
250 {\cf20 // Matcher, class MatcherInterface, and others.}\par
251 \par
252 {\cf20 // IWYU pragma: private, include "gmock/gmock.h"}\par
253 {\cf20 // IWYU pragma: friend gmock/.*}\par
254 \par
255 {\cf21 #ifndef GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_MATCHERS_H_}\par
256 {\cf21 #define GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_MATCHERS_H_}\par
257 \par
258 {\cf21 #include <algorithm>}\par
259 {\cf21 #include <cmath>}\par
260 {\cf21 #include <initializer_list>}\par
261 {\cf21 #include <iterator>}\par
262 {\cf21 #include <limits>}\par
263 {\cf21 #include <memory>}\par
264 {\cf21 #include <ostream>}  {\cf20 // NOLINT}\par
265 {\cf21 #include <sstream>}\par
266 {\cf21 #include <string>}\par
267 {\cf21 #include <type_traits>}\par
268 {\cf21 #include <utility>}\par
269 {\cf21 #include <vector>}\par
270 \par
271 {\cf21 #include "gmock/internal/gmock-internal-utils.h"}\par
272 {\cf21 #include "gmock/internal/gmock-port.h"}\par
273 {\cf21 #include "gmock/internal/gmock-pp.h"}\par
274 {\cf21 #include "gtest/gtest.h"}\par
275 \par
276 {\cf20 // MSVC warning C5046 is new as of VS2017 version 15.8.}\par
277 {\cf21 #if defined(_MSC_VER) && _MSC_VER >= 1915}\par
278 {\cf21 #define GMOCK_MAYBE_5046_ 5046}\par
279 {\cf21 #else}\par
280 {\cf21 #define GMOCK_MAYBE_5046_}\par
281 {\cf21 #endif}\par
282 \par
283 GTEST_DISABLE_MSC_WARNINGS_PUSH_(\par
284     4251 GMOCK_MAYBE_5046_ {\cf20 /* class A needs to have dll-interface to be used by}\par
285 {\cf20                               clients of class B */}\par
286     {\cf20 /* Symbol involving type with internal linkage not defined */})\par
287 \par
288 {\cf17 namespace }testing \{\par
289 \par
290 {\cf20 // To implement a matcher Foo for type T, define:}\par
291 {\cf20 //   1. a class FooMatcherImpl that implements the}\par
292 {\cf20 //      MatcherInterface<T> interface, and}\par
293 {\cf20 //   2. a factory function that creates a Matcher<T> object from a}\par
294 {\cf20 //      FooMatcherImpl*.}\par
295 {\cf20 //}\par
296 {\cf20 // The two-level delegation design makes it possible to allow a user}\par
297 {\cf20 // to write "v" instead of "Eq(v)" where a Matcher is expected, which}\par
298 {\cf20 // is impossible if we pass matchers by pointers.  It also eases}\par
299 {\cf20 // ownership management as Matcher objects can now be copied like}\par
300 {\cf20 // plain values.}\par
301 \par
302 {\cf20 // A match result listener that stores the explanation in a string.}\par
303 {\cf17 class }StringMatchResultListener : {\cf17 public} MatchResultListener \{\par
304  {\cf17 public}:\par
305   StringMatchResultListener() : MatchResultListener(&ss_) \{\}\par
306 \par
307   {\cf20 // Returns the explanation accumulated so far.}\par
308   std::string str(){\cf17  const }\{ {\cf19 return} ss_.str(); \}\par
309 \par
310   {\cf20 // Clears the explanation accumulated so far.}\par
311   {\cf18 void} Clear() \{ ss_.str({\cf22 ""}); \}\par
312 \par
313  {\cf17 private}:\par
314   ::std::stringstream ss_;\par
315 \par
316   StringMatchResultListener({\cf17 const} StringMatchResultListener&) = {\cf17 delete};\par
317   StringMatchResultListener& operator=({\cf17 const} StringMatchResultListener&) =\par
318       {\cf17 delete};\par
319 \};\par
320 \par
321 {\cf20 // Anything inside the 'internal' namespace IS INTERNAL IMPLEMENTATION}\par
322 {\cf20 // and MUST NOT BE USED IN USER CODE!!!}\par
323 {\cf17 namespace }internal \{\par
324 \par
325 {\cf20 // The MatcherCastImpl class template is a helper for implementing}\par
326 {\cf20 // MatcherCast().  We need this helper in order to partially}\par
327 {\cf20 // specialize the implementation of MatcherCast() (C++ allows}\par
328 {\cf20 // class/struct templates to be partially specialized, but not}\par
329 {\cf20 // function templates.).}\par
330 \par
331 {\cf20 // This general version is used when MatcherCast()'s argument is a}\par
332 {\cf20 // polymorphic matcher (i.e. something that can be converted to a}\par
333 {\cf20 // Matcher but is not one yet; for example, Eq(value)) or a value (for}\par
334 {\cf20 // example, "hello").}\par
335 {\cf17 template} <{\cf17 typename} T, {\cf17 typename} M>\par
336 {\cf17 class }MatcherCastImpl \{\par
337  {\cf17 public}:\par
338   {\cf17 static} Matcher<T> Cast({\cf17 const} M& polymorphic_matcher_or_value) \{\par
339     {\cf20 // M can be a polymorphic matcher, in which case we want to use}\par
340     {\cf20 // its conversion operator to create Matcher<T>.  Or it can be a value}\par
341     {\cf20 // that should be passed to the Matcher<T>'s constructor.}\par
342     {\cf20 //}\par
343     {\cf20 // We can't call Matcher<T>(polymorphic_matcher_or_value) when M is a}\par
344     {\cf20 // polymorphic matcher because it'll be ambiguous if T has an implicit}\par
345     {\cf20 // constructor from M (this usually happens when T has an implicit}\par
346     {\cf20 // constructor from any type).}\par
347     {\cf20 //}\par
348     {\cf20 // It won't work to unconditionally implicit_cast}\par
349     {\cf20 // polymorphic_matcher_or_value to Matcher<T> because it won't trigger}\par
350     {\cf20 // a user-defined conversion from M to T if one exists (assuming M is}\par
351     {\cf20 // a value).}\par
352     {\cf19 return} CastImpl(polymorphic_matcher_or_value,\par
353                     std::is_convertible<M, Matcher<T>>\{\},\par
354                     std::is_convertible<M, T>\{\});\par
355   \}\par
356 \par
357  {\cf17 private}:\par
358   {\cf17 template} <{\cf18 bool} Ignore>\par
359   {\cf17 static} Matcher<T> CastImpl({\cf17 const} M& polymorphic_matcher_or_value,\par
360                              std::true_type {\cf20 /* convertible_to_matcher */},\par
361                              std::integral_constant<bool, Ignore>) \{\par
362     {\cf20 // M is implicitly convertible to Matcher<T>, which means that either}\par
363     {\cf20 // M is a polymorphic matcher or Matcher<T> has an implicit constructor}\par
364     {\cf20 // from M.  In both cases using the implicit conversion will produce a}\par
365     {\cf20 // matcher.}\par
366     {\cf20 //}\par
367     {\cf20 // Even if T has an implicit constructor from M, it won't be called because}\par
368     {\cf20 // creating Matcher<T> would require a chain of two user-defined conversions}\par
369     {\cf20 // (first to create T from M and then to create Matcher<T> from T).}\par
370     {\cf19 return} polymorphic_matcher_or_value;\par
371   \}\par
372 \par
373   {\cf20 // M can't be implicitly converted to Matcher<T>, so M isn't a polymorphic}\par
374   {\cf20 // matcher. It's a value of a type implicitly convertible to T. Use direct}\par
375   {\cf20 // initialization to create a matcher.}\par
376   {\cf17 static} Matcher<T> CastImpl({\cf17 const} M& value,\par
377                              std::false_type {\cf20 /* convertible_to_matcher */},\par
378                              std::true_type {\cf20 /* convertible_to_T */}) \{\par
379     {\cf19 return} Matcher<T>(ImplicitCast_<T>(value));\par
380   \}\par
381 \par
382   {\cf20 // M can't be implicitly converted to either Matcher<T> or T. Attempt to use}\par
383   {\cf20 // polymorphic matcher Eq(value) in this case.}\par
384   {\cf20 //}\par
385   {\cf20 // Note that we first attempt to perform an implicit cast on the value and}\par
386   {\cf20 // only fall back to the polymorphic Eq() matcher afterwards because the}\par
387   {\cf20 // latter calls bool operator==(const Lhs& lhs, const Rhs& rhs) in the end}\par
388   {\cf20 // which might be undefined even when Rhs is implicitly convertible to Lhs}\par
389   {\cf20 // (e.g. std::pair<const int, int> vs. std::pair<int, int>).}\par
390   {\cf20 //}\par
391   {\cf20 // We don't define this method inline as we need the declaration of Eq().}\par
392   {\cf17 static} Matcher<T> CastImpl({\cf17 const} M& value,\par
393                              std::false_type {\cf20 /* convertible_to_matcher */},\par
394                              std::false_type {\cf20 /* convertible_to_T */});\par
395 \};\par
396 \par
397 {\cf20 // This more specialized version is used when MatcherCast()'s argument}\par
398 {\cf20 // is already a Matcher.  This only compiles when type T can be}\par
399 {\cf20 // statically converted to type U.}\par
400 {\cf17 template} <{\cf17 typename} T, {\cf17 typename} U>\par
401 {\cf17 class }MatcherCastImpl<T, Matcher<U>> \{\par
402  {\cf17 public}:\par
403   {\cf17 static} Matcher<T> Cast({\cf17 const} Matcher<U>& source_matcher) \{\par
404     {\cf19 return} Matcher<T>({\cf17 new} Impl(source_matcher));\par
405   \}\par
406 \par
407  {\cf17 private}:\par
408   {\cf17 class }Impl : {\cf17 public} MatcherInterface<T> \{\par
409    {\cf17 public}:\par
410     {\cf17 explicit} Impl({\cf17 const} Matcher<U>& source_matcher)\par
411         : source_matcher_(source_matcher) \{\}\par
412 \par
413     {\cf20 // We delegate the matching logic to the source matcher.}\par
414     {\cf18 bool} MatchAndExplain(T x, MatchResultListener* listener){\cf17  const override }\{\par
415       {\cf17 using }FromType = {\cf17 typename} std::remove_cv<{\cf17 typename} std::remove_pointer<\par
416           {\cf17 typename} std::remove_reference<T>::type>::type>::type;\par
417       {\cf17 using }ToType = {\cf17 typename} std::remove_cv<{\cf17 typename} std::remove_pointer<\par
418           {\cf17 typename} std::remove_reference<U>::type>::type>::type;\par
419       {\cf20 // Do not allow implicitly converting base*/& to derived*/&.}\par
420       {\cf17 static_assert}(\par
421           {\cf20 // Do not trigger if only one of them is a pointer. That implies a}\par
422           {\cf20 // regular conversion and not a down_cast.}\par
423           (std::is_pointer<typename std::remove_reference<T>::type>::value !=\par
424            std::is_pointer<typename std::remove_reference<U>::type>::value) ||\par
425               std::is_same<FromType, ToType>::value ||\par
426               !std::is_base_of<FromType, ToType>::value,\par
427           {\cf22 "Can't implicitly convert from <base> to <derived>"});\par
428 \par
429       {\cf20 // Do the cast to `U` explicitly if necessary.}\par
430       {\cf20 // Otherwise, let implicit conversions do the trick.}\par
431       {\cf17 using }CastType =\par
432           {\cf17 typename} std::conditional<std::is_convertible<T&, const U&>::value,\par
433                                     T&, U>::type;\par
434 \par
435       {\cf19 return} source_matcher_.MatchAndExplain({\cf17 static_cast<}CastType{\cf17 >}(x),\par
436                                              listener);\par
437     \}\par
438 \par
439     {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const override }\{\par
440       source_matcher_.DescribeTo(os);\par
441     \}\par
442 \par
443     {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const override }\{\par
444       source_matcher_.DescribeNegationTo(os);\par
445     \}\par
446 \par
447    {\cf17 private}:\par
448     {\cf17 const} Matcher<U> source_matcher_;\par
449   \};\par
450 \};\par
451 \par
452 {\cf20 // This even more specialized version is used for efficiently casting}\par
453 {\cf20 // a matcher to its own type.}\par
454 {\cf17 template} <{\cf17 typename} T>\par
455 {\cf17 class }MatcherCastImpl<T, Matcher<T>> \{\par
456  {\cf17 public}:\par
457   {\cf17 static} Matcher<T> Cast({\cf17 const} Matcher<T>& matcher) \{ {\cf19 return} matcher; \}\par
458 \};\par
459 \par
460 {\cf20 // Template specialization for parameterless Matcher.}\par
461 {\cf17 template} <{\cf17 typename} Derived>\par
462 {\cf17 class }MatcherBaseImpl \{\par
463  {\cf17 public}:\par
464   MatcherBaseImpl() = {\cf19 default};\par
465 \par
466   {\cf17 template} <{\cf17 typename} T>\par
467   operator ::testing::Matcher<T>(){\cf17  const }\{  {\cf20 // NOLINT(runtime/explicit)}\par
468     return ::testing::Matcher<T>({\cf17 new}\par
469                                  {\cf17 typename} Derived::template gmock_Impl<T>());\par
470   \}\par
471 \};\par
472 \par
473 {\cf20 // Template specialization for Matcher with parameters.}\par
474 {\cf17 template} <{\cf17 template} <{\cf17 typename}...> {\cf17 class }Derived, {\cf17 typename}... Ts>\par
475 {\cf17 class }MatcherBaseImpl<Derived<Ts...>> \{\par
476  {\cf17 public}:\par
477   {\cf20 // Mark the constructor explicit for single argument T to avoid implicit}\par
478   {\cf20 // conversions.}\par
479   {\cf17 template} <{\cf17 typename} E = std::enable_if<{\cf17 sizeof}...(Ts) == 1>,\par
480             {\cf17 typename} E::type* = {\cf17 nullptr}>\par
481   {\cf17 explicit} MatcherBaseImpl(Ts... params)\par
482       : params_(std::forward<Ts>(params)...) \{\}\par
483   {\cf17 template} <{\cf17 typename} E = std::enable_if<{\cf17 sizeof}...(Ts) != 1>,\par
484             {\cf17 typename} = {\cf17 typename} E::type>\par
485   MatcherBaseImpl(Ts... params)  {\cf20 // NOLINT}\par
486       : params_(std::forward<Ts>(params)...) \{\}\par
487 \par
488   {\cf17 template} <{\cf17 typename} F>\par
489   operator ::testing::Matcher<F>(){\cf17  const }\{  {\cf20 // NOLINT(runtime/explicit)}\par
490     {\cf19 return} Apply<F>(MakeIndexSequence<{\cf17 sizeof}...(Ts)>\{\});\par
491   \}\par
492 \par
493  {\cf17 private}:\par
494   {\cf17 template} <{\cf17 typename} F, std::size_t... tuple_ids>\par
495   ::testing::Matcher<F> Apply(IndexSequence<tuple_ids...>){\cf17  const }\{\par
496     return ::testing::Matcher<F>(\par
497         {\cf17 new} {\cf17 typename} Derived<Ts...>::template gmock_Impl<F>(\par
498             std::get<tuple_ids>(params_)...));\par
499   \}\par
500 \par
501   {\cf17 const} std::tuple<Ts...> params_;\par
502 \};\par
503 \par
504 \}  {\cf20 // namespace internal}\par
505 \par
506 {\cf20 // In order to be safe and clear, casting between different matcher}\par
507 {\cf20 // types is done explicitly via MatcherCast<T>(m), which takes a}\par
508 {\cf20 // matcher m and returns a Matcher<T>.  It compiles only when T can be}\par
509 {\cf20 // statically converted to the argument type of m.}\par
510 {\cf17 template} <{\cf17 typename} T, {\cf17 typename} M>\par
511 {\cf17 inline} Matcher<T> MatcherCast({\cf17 const} M& matcher) \{\par
512   {\cf19 return} internal::MatcherCastImpl<T, M>::Cast(matcher);\par
513 \}\par
514 \par
515 {\cf20 // This overload handles polymorphic matchers and values only since}\par
516 {\cf20 // monomorphic matchers are handled by the next one.}\par
517 {\cf17 template} <{\cf17 typename} T, {\cf17 typename} M>\par
518 {\cf17 inline} Matcher<T> SafeMatcherCast({\cf17 const} M& polymorphic_matcher_or_value) \{\par
519   {\cf19 return} MatcherCast<T>(polymorphic_matcher_or_value);\par
520 \}\par
521 \par
522 {\cf20 // This overload handles monomorphic matchers.}\par
523 {\cf20 //}\par
524 {\cf20 // In general, if type T can be implicitly converted to type U, we can}\par
525 {\cf20 // safely convert a Matcher<U> to a Matcher<T> (i.e. Matcher is}\par
526 {\cf20 // contravariant): just keep a copy of the original Matcher<U>, convert the}\par
527 {\cf20 // argument from type T to U, and then pass it to the underlying Matcher<U>.}\par
528 {\cf20 // The only exception is when U is a reference and T is not, as the}\par
529 {\cf20 // underlying Matcher<U> may be interested in the argument's address, which}\par
530 {\cf20 // is not preserved in the conversion from T to U.}\par
531 {\cf17 template} <{\cf17 typename} T, {\cf17 typename} U>\par
532 {\cf17 inline} Matcher<T> SafeMatcherCast({\cf17 const} Matcher<U>& matcher) \{\par
533   {\cf20 // Enforce that T can be implicitly converted to U.}\par
534   {\cf17 static_assert}(std::is_convertible<const T&, const U&>::value,\par
535                 {\cf22 "T must be implicitly convertible to U"});\par
536   {\cf20 // Enforce that we are not converting a non-reference type T to a reference}\par
537   {\cf20 // type U.}\par
538   {\cf17 static_assert}(std::is_reference<T>::value || !std::is_reference<U>::value,\par
539                 {\cf22 "cannot convert non reference arg to reference"});\par
540   {\cf20 // In case both T and U are arithmetic types, enforce that the}\par
541   {\cf20 // conversion is not lossy.}\par
542   {\cf17 typedef} GTEST_REMOVE_REFERENCE_AND_CONST_(T) RawT;\par
543   {\cf17 typedef} GTEST_REMOVE_REFERENCE_AND_CONST_(U) RawU;\par
544   {\cf17 constexpr} {\cf18 bool} kTIsOther = GMOCK_KIND_OF_(RawT) == internal::kOther;\par
545   {\cf17 constexpr} {\cf18 bool} kUIsOther = GMOCK_KIND_OF_(RawU) == internal::kOther;\par
546   {\cf17 static_assert}(\par
547       kTIsOther || kUIsOther ||\par
548           (internal::LosslessArithmeticConvertible<RawT, RawU>::value),\par
549       {\cf22 "conversion of arithmetic types must be lossless"});\par
550   {\cf19 return} MatcherCast<T>(matcher);\par
551 \}\par
552 \par
553 {\cf20 // A<T>() returns a matcher that matches any value of type T.}\par
554 {\cf17 template} <{\cf17 typename} T>\par
555 Matcher<T> A();\par
556 \par
557 {\cf20 // Anything inside the 'internal' namespace IS INTERNAL IMPLEMENTATION}\par
558 {\cf20 // and MUST NOT BE USED IN USER CODE!!!}\par
559 {\cf17 namespace }internal \{\par
560 \par
561 {\cf20 // If the explanation is not empty, prints it to the ostream.}\par
562 {\cf17 inline} {\cf18 void} PrintIfNotEmpty({\cf17 const} std::string& explanation,\par
563                             ::std::ostream* os) \{\par
564   {\cf19 if} (explanation != {\cf22 ""} && os != {\cf17 nullptr}) \{\par
565     *os << {\cf22 ", "} << explanation;\par
566   \}\par
567 \}\par
568 \par
569 {\cf20 // Returns true if the given type name is easy to read by a human.}\par
570 {\cf20 // This is used to decide whether printing the type of a value might}\par
571 {\cf20 // be helpful.}\par
572 {\cf17 inline} {\cf18 bool} IsReadableTypeName({\cf17 const} std::string& type_name) \{\par
573   {\cf20 // We consider a type name readable if it's short or doesn't contain}\par
574   {\cf20 // a template or function type.}\par
575   {\cf19 return} (type_name.length() <= 20 ||\par
576           type_name.find_first_of({\cf22 "<("}) == std::string::npos);\par
577 \}\par
578 \par
579 {\cf20 // Matches the value against the given matcher, prints the value and explains}\par
580 {\cf20 // the match result to the listener. Returns the match result.}\par
581 {\cf20 // 'listener' must not be NULL.}\par
582 {\cf20 // Value cannot be passed by const reference, because some matchers take a}\par
583 {\cf20 // non-const argument.}\par
584 {\cf17 template} <{\cf17 typename} Value, {\cf17 typename} T>\par
585 {\cf18 bool} MatchPrintAndExplain(Value& value, {\cf17 const} Matcher<T>& matcher,\par
586                           MatchResultListener* listener) \{\par
587   {\cf19 if} (!listener->IsInterested()) \{\par
588     {\cf20 // If the listener is not interested, we do not need to construct the}\par
589     {\cf20 // inner explanation.}\par
590     {\cf19 return} matcher.Matches(value);\par
591   \}\par
592 \par
593   StringMatchResultListener inner_listener;\par
594   {\cf17 const} {\cf18 bool} match = matcher.MatchAndExplain(value, &inner_listener);\par
595 \par
596   UniversalPrint(value, listener->stream());\par
597 {\cf21 #if GTEST_HAS_RTTI}\par
598   {\cf17 const} std::string& type_name = GetTypeName<Value>();\par
599   {\cf19 if} (IsReadableTypeName(type_name))\par
600     *listener->stream() << {\cf22 " (of type "} << type_name << {\cf22 ")"};\par
601 {\cf21 #endif}\par
602   PrintIfNotEmpty(inner_listener.str(), listener->stream());\par
603 \par
604   {\cf19 return} match;\par
605 \}\par
606 \par
607 {\cf20 // An internal helper class for doing compile-time loop on a tuple's}\par
608 {\cf20 // fields.}\par
609 {\cf17 template} <{\cf18 size_t} N>\par
610 {\cf17 class }TuplePrefix \{\par
611  {\cf17 public}:\par
612   {\cf20 // TuplePrefix<N>::Matches(matcher_tuple, value_tuple) returns true}\par
613   {\cf20 // if and only if the first N fields of matcher_tuple matches}\par
614   {\cf20 // the first N fields of value_tuple, respectively.}\par
615   {\cf17 template} <{\cf17 typename} MatcherTuple, {\cf17 typename} ValueTuple>\par
616   {\cf17 static} {\cf18 bool} Matches({\cf17 const} MatcherTuple& matcher_tuple,\par
617                       {\cf17 const} ValueTuple& value_tuple) \{\par
618     {\cf19 return} TuplePrefix<N - 1>::Matches(matcher_tuple, value_tuple) &&\par
619            std::get<N - 1>(matcher_tuple).Matches(std::get<N - 1>(value_tuple));\par
620   \}\par
621 \par
622   {\cf20 // TuplePrefix<N>::ExplainMatchFailuresTo(matchers, values, os)}\par
623   {\cf20 // describes failures in matching the first N fields of matchers}\par
624   {\cf20 // against the first N fields of values.  If there is no failure,}\par
625   {\cf20 // nothing will be streamed to os.}\par
626   {\cf17 template} <{\cf17 typename} MatcherTuple, {\cf17 typename} ValueTuple>\par
627   {\cf17 static} {\cf18 void} ExplainMatchFailuresTo({\cf17 const} MatcherTuple& matchers,\par
628                                      {\cf17 const} ValueTuple& values,\par
629                                      ::std::ostream* os) \{\par
630     {\cf20 // First, describes failures in the first N - 1 fields.}\par
631     TuplePrefix<N - 1>::ExplainMatchFailuresTo(matchers, values, os);\par
632 \par
633     {\cf20 // Then describes the failure (if any) in the (N - 1)-th (0-based)}\par
634     {\cf20 // field.}\par
635     {\cf17 typename} std::tuple_element<N - 1, MatcherTuple>::type matcher =\par
636         std::get<N - 1>(matchers);\par
637     {\cf17 typedef} {\cf17 typename} std::tuple_element<N - 1, ValueTuple>::type Value;\par
638     {\cf17 const} Value& value = std::get<N - 1>(values);\par
639     StringMatchResultListener listener;\par
640     {\cf19 if} (!matcher.MatchAndExplain(value, &listener)) \{\par
641       *os << {\cf22 "  Expected arg #"} << N - 1 << {\cf22 ": "};\par
642       std::get<N - 1>(matchers).DescribeTo(os);\par
643       *os << {\cf22 "\\n           Actual: "};\par
644       {\cf20 // We remove the reference in type Value to prevent the}\par
645       {\cf20 // universal printer from printing the address of value, which}\par
646       {\cf20 // isn't interesting to the user most of the time.  The}\par
647       {\cf20 // matcher's MatchAndExplain() method handles the case when}\par
648       {\cf20 // the address is interesting.}\par
649       internal::UniversalPrint(value, os);\par
650       PrintIfNotEmpty(listener.str(), os);\par
651       *os << {\cf22 "\\n"};\par
652     \}\par
653   \}\par
654 \};\par
655 \par
656 {\cf20 // The base case.}\par
657 {\cf17 template} <>\par
658 {\cf17 class }TuplePrefix<0> \{\par
659  {\cf17 public}:\par
660   {\cf17 template} <{\cf17 typename} MatcherTuple, {\cf17 typename} ValueTuple>\par
661   {\cf17 static} {\cf18 bool} Matches({\cf17 const} MatcherTuple& {\cf20 /* matcher_tuple */},\par
662                       {\cf17 const} ValueTuple& {\cf20 /* value_tuple */}) \{\par
663     {\cf19 return} {\cf17 true};\par
664   \}\par
665 \par
666   {\cf17 template} <{\cf17 typename} MatcherTuple, {\cf17 typename} ValueTuple>\par
667   {\cf17 static} {\cf18 void} ExplainMatchFailuresTo({\cf17 const} MatcherTuple& {\cf20 /* matchers */},\par
668                                      {\cf17 const} ValueTuple& {\cf20 /* values */},\par
669                                      ::std::ostream* {\cf20 /* os */}) \{\}\par
670 \};\par
671 \par
672 {\cf20 // TupleMatches(matcher_tuple, value_tuple) returns true if and only if}\par
673 {\cf20 // all matchers in matcher_tuple match the corresponding fields in}\par
674 {\cf20 // value_tuple.  It is a compiler error if matcher_tuple and}\par
675 {\cf20 // value_tuple have different number of fields or incompatible field}\par
676 {\cf20 // types.}\par
677 {\cf17 template} <{\cf17 typename} MatcherTuple, {\cf17 typename} ValueTuple>\par
678 {\cf18 bool} TupleMatches({\cf17 const} MatcherTuple& matcher_tuple,\par
679                   {\cf17 const} ValueTuple& value_tuple) \{\par
680   {\cf20 // Makes sure that matcher_tuple and value_tuple have the same}\par
681   {\cf20 // number of fields.}\par
682   {\cf17 static_assert}(std::tuple_size<MatcherTuple>::value ==\par
683                     std::tuple_size<ValueTuple>::value,\par
684                 {\cf22 "matcher and value have different numbers of fields"});\par
685   {\cf19 return} TuplePrefix<std::tuple_size<ValueTuple>::value>::Matches(matcher_tuple,\par
686                                                                   value_tuple);\par
687 \}\par
688 \par
689 {\cf20 // Describes failures in matching matchers against values.  If there}\par
690 {\cf20 // is no failure, nothing will be streamed to os.}\par
691 {\cf17 template} <{\cf17 typename} MatcherTuple, {\cf17 typename} ValueTuple>\par
692 {\cf18 void} ExplainMatchFailureTupleTo({\cf17 const} MatcherTuple& matchers,\par
693                                 {\cf17 const} ValueTuple& values, ::std::ostream* os) \{\par
694   TuplePrefix<std::tuple_size<MatcherTuple>::value>::ExplainMatchFailuresTo(\par
695       matchers, values, os);\par
696 \}\par
697 \par
698 {\cf20 // TransformTupleValues and its helper.}\par
699 {\cf20 //}\par
700 {\cf20 // TransformTupleValuesHelper hides the internal machinery that}\par
701 {\cf20 // TransformTupleValues uses to implement a tuple traversal.}\par
702 {\cf17 template} <{\cf17 typename} Tuple, {\cf17 typename} Func, {\cf17 typename} OutIter>\par
703 {\cf17 class }TransformTupleValuesHelper \{\par
704  {\cf17 private}:\par
705   typedef ::std::tuple_size<Tuple> TupleSize;\par
706 \par
707  {\cf17 public}:\par
708   {\cf20 // For each member of tuple 't', taken in order, evaluates '*out++ = f(t)'.}\par
709   {\cf20 // Returns the final value of 'out' in case the caller needs it.}\par
710   {\cf17 static} OutIter Run(Func f, {\cf17 const} Tuple& t, OutIter out) \{\par
711     {\cf19 return} IterateOverTuple<Tuple, TupleSize::value>()(f, t, out);\par
712   \}\par
713 \par
714  {\cf17 private}:\par
715   {\cf17 template} <{\cf17 typename} Tup, {\cf18 size_t} kRemainingSize>\par
716   {\cf17 struct }IterateOverTuple \{\par
717     OutIter operator()(Func f, {\cf17 const} Tup& t, OutIter out){\cf17  const }\{\par
718       *out++ = f(::std::get<TupleSize::value - kRemainingSize>(t));\par
719       {\cf19 return} IterateOverTuple<Tup, kRemainingSize - 1>()(f, t, out);\par
720     \}\par
721   \};\par
722   {\cf17 template} <{\cf17 typename} Tup>\par
723   {\cf17 struct }IterateOverTuple<Tup, 0> \{\par
724     OutIter operator()(Func {\cf20 /* f */}, {\cf17 const} Tup& {\cf20 /* t */}, OutIter out){\cf17  const }\{\par
725       {\cf19 return} out;\par
726     \}\par
727   \};\par
728 \};\par
729 \par
730 {\cf20 // Successively invokes 'f(element)' on each element of the tuple 't',}\par
731 {\cf20 // appending each result to the 'out' iterator. Returns the final value}\par
732 {\cf20 // of 'out'.}\par
733 {\cf17 template} <{\cf17 typename} Tuple, {\cf17 typename} Func, {\cf17 typename} OutIter>\par
734 OutIter TransformTupleValues(Func f, {\cf17 const} Tuple& t, OutIter out) \{\par
735   {\cf19 return} TransformTupleValuesHelper<Tuple, Func, OutIter>::Run(f, t, out);\par
736 \}\par
737 \par
738 {\cf20 // Implements _, a matcher that matches any value of any}\par
739 {\cf20 // type.  This is a polymorphic matcher, so we need a template type}\par
740 {\cf20 // conversion operator to make it appearing as a Matcher<T> for any}\par
741 {\cf20 // type T.}\par
742 {\cf17 class }AnythingMatcher \{\par
743  {\cf17 public}:\par
744   {\cf17 using }is_gtest_matcher = void;\par
745 \par
746   {\cf17 template} <{\cf17 typename} T>\par
747   {\cf18 bool} MatchAndExplain({\cf17 const} T& {\cf20 /* x */}, std::ostream* {\cf20 /* listener */}){\cf17  const }\{\par
748     {\cf19 return} {\cf17 true};\par
749   \}\par
750   {\cf18 void} DescribeTo(std::ostream* os){\cf17  const }\{ *os << {\cf22 "is anything"}; \}\par
751   {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const }\{\par
752     {\cf20 // This is mostly for completeness' sake, as it's not very useful}\par
753     {\cf20 // to write Not(A<bool>()).  However we cannot completely rule out}\par
754     {\cf20 // such a possibility, and it doesn't hurt to be prepared.}\par
755     *os << {\cf22 "never matches"};\par
756   \}\par
757 \};\par
758 \par
759 {\cf20 // Implements the polymorphic IsNull() matcher, which matches any raw or smart}\par
760 {\cf20 // pointer that is NULL.}\par
761 {\cf17 class }IsNullMatcher \{\par
762  {\cf17 public}:\par
763   {\cf17 template} <{\cf17 typename} Po{\cf18 int}er>\par
764   {\cf18 bool} MatchAndExplain({\cf17 const} Pointer& p,\par
765                        MatchResultListener* {\cf20 /* listener */}){\cf17  const }\{\par
766     {\cf19 return} p == {\cf17 nullptr};\par
767   \}\par
768 \par
769   {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const }\{ *os << {\cf22 "is NULL"}; \}\par
770   {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const }\{ *os << {\cf22 "isn't NULL"}; \}\par
771 \};\par
772 \par
773 {\cf20 // Implements the polymorphic NotNull() matcher, which matches any raw or smart}\par
774 {\cf20 // pointer that is not NULL.}\par
775 {\cf17 class }NotNullMatcher \{\par
776  {\cf17 public}:\par
777   {\cf17 template} <{\cf17 typename} Po{\cf18 int}er>\par
778   {\cf18 bool} MatchAndExplain({\cf17 const} Pointer& p,\par
779                        MatchResultListener* {\cf20 /* listener */}){\cf17  const }\{\par
780     {\cf19 return} p != {\cf17 nullptr};\par
781   \}\par
782 \par
783   {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const }\{ *os << {\cf22 "isn't NULL"}; \}\par
784   {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const }\{ *os << {\cf22 "is NULL"}; \}\par
785 \};\par
786 \par
787 {\cf20 // Ref(variable) matches any argument that is a reference to}\par
788 {\cf20 // 'variable'.  This matcher is polymorphic as it can match any}\par
789 {\cf20 // super type of the type of 'variable'.}\par
790 {\cf20 //}\par
791 {\cf20 // The RefMatcher template class implements Ref(variable).  It can}\par
792 {\cf20 // only be instantiated with a reference type.  This prevents a user}\par
793 {\cf20 // from mistakenly using Ref(x) to match a non-reference function}\par
794 {\cf20 // argument.  For example, the following will righteously cause a}\par
795 {\cf20 // compiler error:}\par
796 {\cf20 //}\par
797 {\cf20 //   int n;}\par
798 {\cf20 //   Matcher<int> m1 = Ref(n);   // This won't compile.}\par
799 {\cf20 //   Matcher<int&> m2 = Ref(n);  // This will compile.}\par
800 {\cf17 template} <{\cf17 typename} T>\par
801 {\cf17 class }RefMatcher;\par
802 \par
803 {\cf17 template} <{\cf17 typename} T>\par
804 {\cf17 class }RefMatcher<T&> \{\par
805   {\cf20 // Google Mock is a generic framework and thus needs to support}\par
806   {\cf20 // mocking any function types, including those that take non-const}\par
807   {\cf20 // reference arguments.  Therefore the template parameter T (and}\par
808   {\cf20 // Super below) can be instantiated to either a const type or a}\par
809   {\cf20 // non-const type.}\par
810  {\cf17 public}:\par
811   {\cf20 // RefMatcher() takes a T& instead of const T&, as we want the}\par
812   {\cf20 // compiler to catch using Ref(const_value) as a matcher for a}\par
813   {\cf20 // non-const reference.}\par
814   {\cf17 explicit} RefMatcher(T& x) : object_(x) \{\}  {\cf20 // NOLINT}\par
815 \par
816   {\cf17 template} <{\cf17 typename} Super>\par
817   {\cf17 operator} Matcher<Super&>(){\cf17  const }\{\par
818     {\cf20 // By passing object_ (type T&) to Impl(), which expects a Super&,}\par
819     {\cf20 // we make sure that Super is a super type of T.  In particular,}\par
820     {\cf20 // this catches using Ref(const_value) as a matcher for a}\par
821     {\cf20 // non-const reference, as you cannot implicitly convert a const}\par
822     {\cf20 // reference to a non-const reference.}\par
823     {\cf19 return} MakeMatcher({\cf17 new} Impl<Super>(object_));\par
824   \}\par
825 \par
826  {\cf17 private}:\par
827   {\cf17 template} <{\cf17 typename} Super>\par
828   {\cf17 class }Impl : {\cf17 public} MatcherInterface<Super&> \{\par
829    {\cf17 public}:\par
830     {\cf17 explicit} Impl(Super& x) : object_(x) \{\}  {\cf20 // NOLINT}\par
831 \par
832     {\cf20 // MatchAndExplain() takes a Super& (as opposed to const Super&)}\par
833     {\cf20 // in order to match the interface MatcherInterface<Super&>.}\par
834     {\cf18 bool} MatchAndExplain(Super& x,\par
835                          MatchResultListener* listener){\cf17  const override }\{\par
836       *listener << {\cf22 "which is located @"} << {\cf17 static_cast<}{\cf17 const }{\cf18 void}*{\cf17 >}(&x);\par
837       {\cf19 return} &x == &object_;\par
838     \}\par
839 \par
840     {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const override }\{\par
841       *os << {\cf22 "references the variable "};\par
842       UniversalPrinter<Super&>::Print(object_, os);\par
843     \}\par
844 \par
845     {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const override }\{\par
846       *os << {\cf22 "does not reference the variable "};\par
847       UniversalPrinter<Super&>::Print(object_, os);\par
848     \}\par
849 \par
850    {\cf17 private}:\par
851     {\cf17 const} Super& object_;\par
852   \};\par
853 \par
854   T& object_;\par
855 \};\par
856 \par
857 {\cf20 // Polymorphic helper functions for narrow and wide string matchers.}\par
858 {\cf17 inline} {\cf18 bool} CaseInsensitiveCStringEquals({\cf17 const} {\cf18 char}* lhs, {\cf17 const} {\cf18 char}* rhs) \{\par
859   {\cf19 return} String::CaseInsensitiveCStringEquals(lhs, rhs);\par
860 \}\par
861 \par
862 {\cf17 inline} {\cf18 bool} CaseInsensitiveCStringEquals({\cf17 const} {\cf18 wchar_t}* lhs,\par
863                                          {\cf17 const} {\cf18 wchar_t}* rhs) \{\par
864   {\cf19 return} String::CaseInsensitiveWideCStringEquals(lhs, rhs);\par
865 \}\par
866 \par
867 {\cf20 // String comparison for narrow or wide strings that can have embedded NUL}\par
868 {\cf20 // characters.}\par
869 {\cf17 template} <{\cf17 typename} StringType>\par
870 {\cf18 bool} CaseInsensitiveStringEquals({\cf17 const} StringType& s1, {\cf17 const} StringType& s2) \{\par
871   {\cf20 // Are the heads equal?}\par
872   {\cf19 if} (!CaseInsensitiveCStringEquals(s1.c_str(), s2.c_str())) \{\par
873     {\cf19 return} {\cf17 false};\par
874   \}\par
875 \par
876   {\cf20 // Skip the equal heads.}\par
877   {\cf17 const} {\cf17 typename} StringType::value_type nul = 0;\par
878   {\cf17 const} {\cf18 size_t} i1 = s1.find(nul), i2 = s2.find(nul);\par
879 \par
880   {\cf20 // Are we at the end of either s1 or s2?}\par
881   {\cf19 if} (i1 == StringType::npos || i2 == StringType::npos) \{\par
882     {\cf19 return} i1 == i2;\par
883   \}\par
884 \par
885   {\cf20 // Are the tails equal?}\par
886   {\cf19 return} CaseInsensitiveStringEquals(s1.substr(i1 + 1), s2.substr(i2 + 1));\par
887 \}\par
888 \par
889 {\cf20 // String matchers.}\par
890 \par
891 {\cf20 // Implements equality-based string matchers like StrEq, StrCaseNe, and etc.}\par
892 {\cf17 template} <{\cf17 typename} StringType>\par
893 {\cf17 class }StrEqualityMatcher \{\par
894  {\cf17 public}:\par
895   StrEqualityMatcher(StringType str, {\cf18 bool} expect_eq, {\cf18 bool} case_sensitive)\par
896       : string_(std::move(str)),\par
897         expect_eq_(expect_eq),\par
898         case_sensitive_(case_sensitive) \{\}\par
899 \par
900 {\cf21 #if GTEST_INTERNAL_HAS_STRING_VIEW}\par
901   {\cf18 bool} MatchAndExplain({\cf17 const} internal::StringView& s,\par
902                        MatchResultListener* listener){\cf17  const }\{\par
903     {\cf20 // This should fail to compile if StringView is used with wide}\par
904     {\cf20 // strings.}\par
905     {\cf17 const} StringType& str = std::string(s);\par
906     {\cf19 return} MatchAndExplain(str, listener);\par
907   \}\par
908 {\cf21 #endif  }{\cf20 // GTEST_INTERNAL_HAS_STRING_VIEW}\par
909 \par
910   {\cf20 // Accepts pointer types, particularly:}\par
911   {\cf20 //   const char*}\par
912   {\cf20 //   char*}\par
913   {\cf20 //   const wchar_t*}\par
914   {\cf20 //   wchar_t*}\par
915   {\cf17 template} <{\cf17 typename} CharType>\par
916   {\cf18 bool} MatchAndExplain(CharType* s, MatchResultListener* listener){\cf17  const }\{\par
917     {\cf19 if} (s == {\cf17 nullptr}) \{\par
918       {\cf19 return} !expect_eq_;\par
919     \}\par
920     {\cf19 return} MatchAndExplain(StringType(s), listener);\par
921   \}\par
922 \par
923   {\cf20 // Matches anything that can convert to StringType.}\par
924   {\cf20 //}\par
925   {\cf20 // This is a template, not just a plain function with const StringType&,}\par
926   {\cf20 // because StringView has some interfering non-explicit constructors.}\par
927   {\cf17 template} <{\cf17 typename} MatcheeStringType>\par
928   {\cf18 bool} MatchAndExplain({\cf17 const} MatcheeStringType& s,\par
929                        MatchResultListener* {\cf20 /* listener */}){\cf17  const }\{\par
930     {\cf17 const} StringType s2(s);\par
931     {\cf17 const} {\cf18 bool} eq = case_sensitive_ ? s2 == string_\par
932                                     : CaseInsensitiveStringEquals(s2, string_);\par
933     {\cf19 return} expect_eq_ == eq;\par
934   \}\par
935 \par
936   {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const }\{\par
937     DescribeToHelper(expect_eq_, os);\par
938   \}\par
939 \par
940   {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const }\{\par
941     DescribeToHelper(!expect_eq_, os);\par
942   \}\par
943 \par
944  {\cf17 private}:\par
945   {\cf18 void} DescribeToHelper({\cf18 bool} expect_eq, ::std::ostream* os){\cf17  const }\{\par
946     *os << (expect_eq ? {\cf22 "is "} : {\cf22 "isn't "});\par
947     *os << {\cf22 "equal to "};\par
948     {\cf19 if} (!case_sensitive_) \{\par
949       *os << {\cf22 "(ignoring case) "};\par
950     \}\par
951     UniversalPrint(string_, os);\par
952   \}\par
953 \par
954   {\cf17 const} StringType string_;\par
955   {\cf17 const} {\cf18 bool} expect_eq_;\par
956   {\cf17 const} {\cf18 bool} case_sensitive_;\par
957 \};\par
958 \par
959 {\cf20 // Implements the polymorphic HasSubstr(substring) matcher, which}\par
960 {\cf20 // can be used as a Matcher<T> as long as T can be converted to a}\par
961 {\cf20 // string.}\par
962 {\cf17 template} <{\cf17 typename} StringType>\par
963 {\cf17 class }HasSubstrMatcher \{\par
964  {\cf17 public}:\par
965   {\cf17 explicit} HasSubstrMatcher({\cf17 const} StringType& substring)\par
966       : substring_(substring) \{\}\par
967 \par
968 {\cf21 #if GTEST_INTERNAL_HAS_STRING_VIEW}\par
969   {\cf18 bool} MatchAndExplain({\cf17 const} internal::StringView& s,\par
970                        MatchResultListener* listener){\cf17  const }\{\par
971     {\cf20 // This should fail to compile if StringView is used with wide}\par
972     {\cf20 // strings.}\par
973     {\cf17 const} StringType& str = std::string(s);\par
974     {\cf19 return} MatchAndExplain(str, listener);\par
975   \}\par
976 {\cf21 #endif  }{\cf20 // GTEST_INTERNAL_HAS_STRING_VIEW}\par
977 \par
978   {\cf20 // Accepts pointer types, particularly:}\par
979   {\cf20 //   const char*}\par
980   {\cf20 //   char*}\par
981   {\cf20 //   const wchar_t*}\par
982   {\cf20 //   wchar_t*}\par
983   {\cf17 template} <{\cf17 typename} CharType>\par
984   {\cf18 bool} MatchAndExplain(CharType* s, MatchResultListener* listener){\cf17  const }\{\par
985     {\cf19 return} s != {\cf17 nullptr} && MatchAndExplain(StringType(s), listener);\par
986   \}\par
987 \par
988   {\cf20 // Matches anything that can convert to StringType.}\par
989   {\cf20 //}\par
990   {\cf20 // This is a template, not just a plain function with const StringType&,}\par
991   {\cf20 // because StringView has some interfering non-explicit constructors.}\par
992   {\cf17 template} <{\cf17 typename} MatcheeStringType>\par
993   {\cf18 bool} MatchAndExplain({\cf17 const} MatcheeStringType& s,\par
994                        MatchResultListener* {\cf20 /* listener */}){\cf17  const }\{\par
995     {\cf19 return} StringType(s).find(substring_) != StringType::npos;\par
996   \}\par
997 \par
998   {\cf20 // Describes what this matcher matches.}\par
999   {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const }\{\par
1000     *os << {\cf22 "has substring "};\par
1001     UniversalPrint(substring_, os);\par
1002   \}\par
1003 \par
1004   {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const }\{\par
1005     *os << {\cf22 "has no substring "};\par
1006     UniversalPrint(substring_, os);\par
1007   \}\par
1008 \par
1009  {\cf17 private}:\par
1010   {\cf17 const} StringType substring_;\par
1011 \};\par
1012 \par
1013 {\cf20 // Implements the polymorphic StartsWith(substring) matcher, which}\par
1014 {\cf20 // can be used as a Matcher<T> as long as T can be converted to a}\par
1015 {\cf20 // string.}\par
1016 {\cf17 template} <{\cf17 typename} StringType>\par
1017 {\cf17 class }StartsWithMatcher \{\par
1018  {\cf17 public}:\par
1019   {\cf17 explicit} StartsWithMatcher({\cf17 const} StringType& prefix) : prefix_(prefix) \{\}\par
1020 \par
1021 {\cf21 #if GTEST_INTERNAL_HAS_STRING_VIEW}\par
1022   {\cf18 bool} MatchAndExplain({\cf17 const} internal::StringView& s,\par
1023                        MatchResultListener* listener){\cf17  const }\{\par
1024     {\cf20 // This should fail to compile if StringView is used with wide}\par
1025     {\cf20 // strings.}\par
1026     {\cf17 const} StringType& str = std::string(s);\par
1027     {\cf19 return} MatchAndExplain(str, listener);\par
1028   \}\par
1029 {\cf21 #endif  }{\cf20 // GTEST_INTERNAL_HAS_STRING_VIEW}\par
1030 \par
1031   {\cf20 // Accepts pointer types, particularly:}\par
1032   {\cf20 //   const char*}\par
1033   {\cf20 //   char*}\par
1034   {\cf20 //   const wchar_t*}\par
1035   {\cf20 //   wchar_t*}\par
1036   {\cf17 template} <{\cf17 typename} CharType>\par
1037   {\cf18 bool} MatchAndExplain(CharType* s, MatchResultListener* listener){\cf17  const }\{\par
1038     {\cf19 return} s != {\cf17 nullptr} && MatchAndExplain(StringType(s), listener);\par
1039   \}\par
1040 \par
1041   {\cf20 // Matches anything that can convert to StringType.}\par
1042   {\cf20 //}\par
1043   {\cf20 // This is a template, not just a plain function with const StringType&,}\par
1044   {\cf20 // because StringView has some interfering non-explicit constructors.}\par
1045   {\cf17 template} <{\cf17 typename} MatcheeStringType>\par
1046   {\cf18 bool} MatchAndExplain({\cf17 const} MatcheeStringType& s,\par
1047                        MatchResultListener* {\cf20 /* listener */}){\cf17  const }\{\par
1048     {\cf17 const} StringType& s2(s);\par
1049     {\cf19 return} s2.length() >= prefix_.length() &&\par
1050            s2.substr(0, prefix_.length()) == prefix_;\par
1051   \}\par
1052 \par
1053   {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const }\{\par
1054     *os << {\cf22 "starts with "};\par
1055     UniversalPrint(prefix_, os);\par
1056   \}\par
1057 \par
1058   {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const }\{\par
1059     *os << {\cf22 "doesn't start with "};\par
1060     UniversalPrint(prefix_, os);\par
1061   \}\par
1062 \par
1063  {\cf17 private}:\par
1064   {\cf17 const} StringType prefix_;\par
1065 \};\par
1066 \par
1067 {\cf20 // Implements the polymorphic EndsWith(substring) matcher, which}\par
1068 {\cf20 // can be used as a Matcher<T> as long as T can be converted to a}\par
1069 {\cf20 // string.}\par
1070 {\cf17 template} <{\cf17 typename} StringType>\par
1071 {\cf17 class }EndsWithMatcher \{\par
1072  {\cf17 public}:\par
1073   {\cf17 explicit} EndsWithMatcher({\cf17 const} StringType& suffix) : suffix_(suffix) \{\}\par
1074 \par
1075 {\cf21 #if GTEST_INTERNAL_HAS_STRING_VIEW}\par
1076   {\cf18 bool} MatchAndExplain({\cf17 const} internal::StringView& s,\par
1077                        MatchResultListener* listener){\cf17  const }\{\par
1078     {\cf20 // This should fail to compile if StringView is used with wide}\par
1079     {\cf20 // strings.}\par
1080     {\cf17 const} StringType& str = std::string(s);\par
1081     {\cf19 return} MatchAndExplain(str, listener);\par
1082   \}\par
1083 {\cf21 #endif  }{\cf20 // GTEST_INTERNAL_HAS_STRING_VIEW}\par
1084 \par
1085   {\cf20 // Accepts pointer types, particularly:}\par
1086   {\cf20 //   const char*}\par
1087   {\cf20 //   char*}\par
1088   {\cf20 //   const wchar_t*}\par
1089   {\cf20 //   wchar_t*}\par
1090   {\cf17 template} <{\cf17 typename} CharType>\par
1091   {\cf18 bool} MatchAndExplain(CharType* s, MatchResultListener* listener){\cf17  const }\{\par
1092     {\cf19 return} s != {\cf17 nullptr} && MatchAndExplain(StringType(s), listener);\par
1093   \}\par
1094 \par
1095   {\cf20 // Matches anything that can convert to StringType.}\par
1096   {\cf20 //}\par
1097   {\cf20 // This is a template, not just a plain function with const StringType&,}\par
1098   {\cf20 // because StringView has some interfering non-explicit constructors.}\par
1099   {\cf17 template} <{\cf17 typename} MatcheeStringType>\par
1100   {\cf18 bool} MatchAndExplain({\cf17 const} MatcheeStringType& s,\par
1101                        MatchResultListener* {\cf20 /* listener */}){\cf17  const }\{\par
1102     {\cf17 const} StringType& s2(s);\par
1103     {\cf19 return} s2.length() >= suffix_.length() &&\par
1104            s2.substr(s2.length() - suffix_.length()) == suffix_;\par
1105   \}\par
1106 \par
1107   {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const }\{\par
1108     *os << {\cf22 "ends with "};\par
1109     UniversalPrint(suffix_, os);\par
1110   \}\par
1111 \par
1112   {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const }\{\par
1113     *os << {\cf22 "doesn't end with "};\par
1114     UniversalPrint(suffix_, os);\par
1115   \}\par
1116 \par
1117  {\cf17 private}:\par
1118   {\cf17 const} StringType suffix_;\par
1119 \};\par
1120 \par
1121 {\cf20 // Implements the polymorphic WhenBase64Unescaped(matcher) matcher, which can be}\par
1122 {\cf20 // used as a Matcher<T> as long as T can be converted to a string.}\par
1123 {\cf17 class }WhenBase64UnescapedMatcher \{\par
1124  {\cf17 public}:\par
1125   {\cf17 using }is_gtest_matcher = void;\par
1126 \par
1127   {\cf17 explicit} WhenBase64UnescapedMatcher(\par
1128       {\cf17 const} Matcher<const std::string&>& internal_matcher)\par
1129       : internal_matcher_(internal_matcher) \{\}\par
1130 \par
1131   {\cf20 // Matches anything that can convert to std::string.}\par
1132   {\cf17 template} <{\cf17 typename} MatcheeStringType>\par
1133   {\cf18 bool} MatchAndExplain({\cf17 const} MatcheeStringType& s,\par
1134                        MatchResultListener* listener){\cf17  const }\{\par
1135     {\cf17 const} std::string s2(s);  {\cf20 // NOLINT (needed for working with string_view).}\par
1136     std::string unescaped;\par
1137     {\cf19 if} (!internal::Base64Unescape(s2, &unescaped)) \{\par
1138       {\cf19 if} (listener != {\cf17 nullptr}) \{\par
1139         *listener << {\cf22 "is not a valid base64 escaped string"};\par
1140       \}\par
1141       {\cf19 return} {\cf17 false};\par
1142     \}\par
1143     {\cf19 return} MatchPrintAndExplain(unescaped, internal_matcher_, listener);\par
1144   \}\par
1145 \par
1146   {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const }\{\par
1147     *os << {\cf22 "matches after Base64Unescape "};\par
1148     internal_matcher_.DescribeTo(os);\par
1149   \}\par
1150 \par
1151   {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const }\{\par
1152     *os << {\cf22 "does not match after Base64Unescape "};\par
1153     internal_matcher_.DescribeTo(os);\par
1154   \}\par
1155 \par
1156  {\cf17 private}:\par
1157   {\cf17 const} Matcher<const std::string&> internal_matcher_;\par
1158 \};\par
1159 \par
1160 {\cf20 // Implements a matcher that compares the two fields of a 2-tuple}\par
1161 {\cf20 // using one of the ==, <=, <, etc, operators.  The two fields being}\par
1162 {\cf20 // compared don't have to have the same type.}\par
1163 {\cf20 //}\par
1164 {\cf20 // The matcher defined here is polymorphic (for example, Eq() can be}\par
1165 {\cf20 // used to match a std::tuple<int, short>, a std::tuple<const long&, double>,}\par
1166 {\cf20 // etc).  Therefore we use a template type conversion operator in the}\par
1167 {\cf20 // implementation.}\par
1168 {\cf17 template} <{\cf17 typename} D, {\cf17 typename} Op>\par
1169 {\cf17 class }PairMatchBase \{\par
1170  {\cf17 public}:\par
1171   {\cf17 template} <{\cf17 typename} T1, {\cf17 typename} T2>\par
1172   {\cf17 operator} Matcher<::std::tuple<T1, T2>>() {\cf17 const} \{\par
1173     {\cf19 return} Matcher<::std::tuple<T1, T2>>({\cf17 new} Impl<const ::std::tuple<T1, T2>&>);\par
1174   \}\par
1175   {\cf17 template} <{\cf17 typename} T1, {\cf17 typename} T2>\par
1176   {\cf17 operator} Matcher<const ::std::tuple<T1, T2>&>() {\cf17 const} \{\par
1177     {\cf19 return} MakeMatcher({\cf17 new} Impl<const ::std::tuple<T1, T2>&>);\par
1178   \}\par
1179 \par
1180  {\cf17 private}:\par
1181   static ::std::ostream& GetDesc(::std::ostream& os) \{  {\cf20 // NOLINT}\par
1182     {\cf19 return} os << D::Desc();\par
1183   \}\par
1184 \par
1185   {\cf17 template} <{\cf17 typename} Tuple>\par
1186   {\cf17 class }Impl : {\cf17 public} MatcherInterface<Tuple> \{\par
1187    {\cf17 public}:\par
1188     {\cf18 bool} MatchAndExplain(Tuple args,\par
1189                          MatchResultListener* {\cf20 /* listener */}){\cf17  const override }\{\par
1190       {\cf19 return} Op()(::std::get<0>(args), ::std::get<1>(args));\par
1191     \}\par
1192     {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const override }\{\par
1193       *os << {\cf22 "are "} << GetDesc;\par
1194     \}\par
1195     {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const override }\{\par
1196       *os << {\cf22 "aren't "} << GetDesc;\par
1197     \}\par
1198   \};\par
1199 \};\par
1200 \par
1201 {\cf17 class }Eq2Matcher : {\cf17 public} PairMatchBase<Eq2Matcher, AnyEq> \{\par
1202  {\cf17 public}:\par
1203   {\cf17 static} {\cf17 const} {\cf18 char}* Desc() \{ {\cf19 return} {\cf22 "an equal pair"}; \}\par
1204 \};\par
1205 {\cf17 class }Ne2Matcher : {\cf17 public} PairMatchBase<Ne2Matcher, AnyNe> \{\par
1206  {\cf17 public}:\par
1207   {\cf17 static} {\cf17 const} {\cf18 char}* Desc() \{ {\cf19 return} {\cf22 "an unequal pair"}; \}\par
1208 \};\par
1209 {\cf17 class }Lt2Matcher : {\cf17 public} PairMatchBase<Lt2Matcher, AnyLt> \{\par
1210  {\cf17 public}:\par
1211   {\cf17 static} {\cf17 const} {\cf18 char}* Desc() \{ {\cf19 return} {\cf22 "a pair where the first < the second"}; \}\par
1212 \};\par
1213 {\cf17 class }Gt2Matcher : {\cf17 public} PairMatchBase<Gt2Matcher, AnyGt> \{\par
1214  {\cf17 public}:\par
1215   {\cf17 static} {\cf17 const} {\cf18 char}* Desc() \{ {\cf19 return} {\cf22 "a pair where the first > the second"}; \}\par
1216 \};\par
1217 {\cf17 class }Le2Matcher : {\cf17 public} PairMatchBase<Le2Matcher, AnyLe> \{\par
1218  {\cf17 public}:\par
1219   {\cf17 static} {\cf17 const} {\cf18 char}* Desc() \{ {\cf19 return} {\cf22 "a pair where the first <= the second"}; \}\par
1220 \};\par
1221 {\cf17 class }Ge2Matcher : {\cf17 public} PairMatchBase<Ge2Matcher, AnyGe> \{\par
1222  {\cf17 public}:\par
1223   {\cf17 static} {\cf17 const} {\cf18 char}* Desc() \{ {\cf19 return} {\cf22 "a pair where the first >= the second"}; \}\par
1224 \};\par
1225 \par
1226 {\cf20 // Implements the Not(...) matcher for a particular argument type T.}\par
1227 {\cf20 // We do not nest it inside the NotMatcher class template, as that}\par
1228 {\cf20 // will prevent different instantiations of NotMatcher from sharing}\par
1229 {\cf20 // the same NotMatcherImpl<T> class.}\par
1230 {\cf17 template} <{\cf17 typename} T>\par
1231 {\cf17 class }NotMatcherImpl : {\cf17 public} MatcherInterface<const T&> \{\par
1232  {\cf17 public}:\par
1233   {\cf17 explicit} NotMatcherImpl({\cf17 const} Matcher<T>& matcher) : matcher_(matcher) \{\}\par
1234 \par
1235   {\cf18 bool} MatchAndExplain({\cf17 const} T& x,\par
1236                        MatchResultListener* listener){\cf17  const override }\{\par
1237     {\cf19 return} !matcher_.MatchAndExplain(x, listener);\par
1238   \}\par
1239 \par
1240   {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const override }\{\par
1241     matcher_.DescribeNegationTo(os);\par
1242   \}\par
1243 \par
1244   {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const override }\{\par
1245     matcher_.DescribeTo(os);\par
1246   \}\par
1247 \par
1248  {\cf17 private}:\par
1249   {\cf17 const} Matcher<T> matcher_;\par
1250 \};\par
1251 \par
1252 {\cf20 // Implements the Not(m) matcher, which matches a value that doesn't}\par
1253 {\cf20 // match matcher m.}\par
1254 {\cf17 template} <{\cf17 typename} InnerMatcher>\par
1255 {\cf17 class }NotMatcher \{\par
1256  {\cf17 public}:\par
1257   {\cf17 explicit} NotMatcher(InnerMatcher matcher) : matcher_(matcher) \{\}\par
1258 \par
1259   {\cf20 // This template type conversion operator allows Not(m) to be used}\par
1260   {\cf20 // to match any type m can match.}\par
1261   {\cf17 template} <{\cf17 typename} T>\par
1262   {\cf17 operator} Matcher<T>(){\cf17  const }\{\par
1263     {\cf19 return} Matcher<T>({\cf17 new} NotMatcherImpl<T>(SafeMatcherCast<T>(matcher_)));\par
1264   \}\par
1265 \par
1266  {\cf17 private}:\par
1267   InnerMatcher matcher_;\par
1268 \};\par
1269 \par
1270 {\cf20 // Implements the AllOf(m1, m2) matcher for a particular argument type}\par
1271 {\cf20 // T. We do not nest it inside the BothOfMatcher class template, as}\par
1272 {\cf20 // that will prevent different instantiations of BothOfMatcher from}\par
1273 {\cf20 // sharing the same BothOfMatcherImpl<T> class.}\par
1274 {\cf17 template} <{\cf17 typename} T>\par
1275 {\cf17 class }AllOfMatcherImpl : {\cf17 public} MatcherInterface<const T&> \{\par
1276  {\cf17 public}:\par
1277   {\cf17 explicit} AllOfMatcherImpl(std::vector<Matcher<T>> matchers)\par
1278       : matchers_(std::move(matchers)) \{\}\par
1279 \par
1280   {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const override }\{\par
1281     *os << {\cf22 "("};\par
1282     {\cf19 for} ({\cf18 size_t} i = 0; i < matchers_.size(); ++i) \{\par
1283       {\cf19 if} (i != 0) *os << {\cf22 ") and ("};\par
1284       matchers_[i].DescribeTo(os);\par
1285     \}\par
1286     *os << {\cf22 ")"};\par
1287   \}\par
1288 \par
1289   {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const override }\{\par
1290     *os << {\cf22 "("};\par
1291     {\cf19 for} ({\cf18 size_t} i = 0; i < matchers_.size(); ++i) \{\par
1292       {\cf19 if} (i != 0) *os << {\cf22 ") or ("};\par
1293       matchers_[i].DescribeNegationTo(os);\par
1294     \}\par
1295     *os << {\cf22 ")"};\par
1296   \}\par
1297 \par
1298   {\cf18 bool} MatchAndExplain({\cf17 const} T& x,\par
1299                        MatchResultListener* listener){\cf17  const override }\{\par
1300     {\cf20 // If either matcher1_ or matcher2_ doesn't match x, we only need}\par
1301     {\cf20 // to explain why one of them fails.}\par
1302     std::string all_match_result;\par
1303 \par
1304     {\cf19 for} ({\cf18 size_t} i = 0; i < matchers_.size(); ++i) \{\par
1305       StringMatchResultListener slistener;\par
1306       {\cf19 if} (matchers_[i].MatchAndExplain(x, &slistener)) \{\par
1307         {\cf19 if} (all_match_result.empty()) \{\par
1308           all_match_result = slistener.str();\par
1309         \} {\cf19 else} \{\par
1310           std::string result = slistener.str();\par
1311           {\cf19 if} (!result.empty()) \{\par
1312             all_match_result += {\cf22 ", and "};\par
1313             all_match_result += result;\par
1314           \}\par
1315         \}\par
1316       \} {\cf19 else} \{\par
1317         *listener << slistener.str();\par
1318         {\cf19 return} {\cf17 false};\par
1319       \}\par
1320     \}\par
1321 \par
1322     {\cf20 // Otherwise we need to explain why *both* of them match.}\par
1323     *listener << all_match_result;\par
1324     {\cf19 return} {\cf17 true};\par
1325   \}\par
1326 \par
1327  {\cf17 private}:\par
1328   {\cf17 const} std::vector<Matcher<T>> matchers_;\par
1329 \};\par
1330 \par
1331 {\cf20 // VariadicMatcher is used for the variadic implementation of}\par
1332 {\cf20 // AllOf(m_1, m_2, ...) and AnyOf(m_1, m_2, ...).}\par
1333 {\cf20 // CombiningMatcher<T> is used to recursively combine the provided matchers}\par
1334 {\cf20 // (of type Args...).}\par
1335 {\cf17 template} <{\cf17 template} <{\cf17 typename} T> {\cf17 class }CombiningMatcher, {\cf17 typename}... Args>\par
1336 {\cf17 class }VariadicMatcher \{\par
1337  {\cf17 public}:\par
1338   VariadicMatcher({\cf17 const} Args&... matchers)  {\cf20 // NOLINT}\par
1339       : matchers_(matchers...) \{\par
1340     {\cf17 static_assert}({\cf17 sizeof}...(Args) > 0, {\cf22 "Must have at least one matcher."});\par
1341   \}\par
1342 \par
1343   VariadicMatcher({\cf17 const} VariadicMatcher&) = {\cf19 default};\par
1344   VariadicMatcher& operator=({\cf17 const} VariadicMatcher&) = {\cf17 delete};\par
1345 \par
1346   {\cf20 // This template type conversion operator allows an}\par
1347   {\cf20 // VariadicMatcher<Matcher1, Matcher2...> object to match any type that}\par
1348   {\cf20 // all of the provided matchers (Matcher1, Matcher2, ...) can match.}\par
1349   {\cf17 template} <{\cf17 typename} T>\par
1350   {\cf17 operator} Matcher<T>(){\cf17  const }\{\par
1351     std::vector<Matcher<T>> values;\par
1352     CreateVariadicMatcher<T>(&values, std::integral_constant<size_t, 0>());\par
1353     {\cf19 return} Matcher<T>({\cf17 new} CombiningMatcher<T>(std::move(values)));\par
1354   \}\par
1355 \par
1356  {\cf17 private}:\par
1357   {\cf17 template} <{\cf17 typename} T, {\cf18 size_t} I>\par
1358   {\cf18 void} CreateVariadicMatcher(std::vector<Matcher<T>>* values,\par
1359                              std::integral_constant<size_t, I>){\cf17  const }\{\par
1360     values->push_back(SafeMatcherCast<T>(std::get<I>(matchers_)));\par
1361     CreateVariadicMatcher<T>(values, std::integral_constant<size_t, I + 1>());\par
1362   \}\par
1363 \par
1364   {\cf17 template} <{\cf17 typename} T>\par
1365   {\cf18 void} CreateVariadicMatcher(\par
1366       std::vector<Matcher<T>>*,\par
1367       std::integral_constant<{\cf18 size_t}, {\cf17 sizeof}...(Args)>){\cf17  const }\{\}\par
1368 \par
1369   std::tuple<Args...> matchers_;\par
1370 \};\par
1371 \par
1372 {\cf17 template} <{\cf17 typename}... Args>\par
1373 {\cf17 using }AllOfMatcher = VariadicMatcher<AllOfMatcherImpl, Args...>;\par
1374 \par
1375 {\cf20 // Implements the AnyOf(m1, m2) matcher for a particular argument type}\par
1376 {\cf20 // T.  We do not nest it inside the AnyOfMatcher class template, as}\par
1377 {\cf20 // that will prevent different instantiations of AnyOfMatcher from}\par
1378 {\cf20 // sharing the same EitherOfMatcherImpl<T> class.}\par
1379 {\cf17 template} <{\cf17 typename} T>\par
1380 {\cf17 class }AnyOfMatcherImpl : {\cf17 public} MatcherInterface<const T&> \{\par
1381  {\cf17 public}:\par
1382   {\cf17 explicit} AnyOfMatcherImpl(std::vector<Matcher<T>> matchers)\par
1383       : matchers_(std::move(matchers)) \{\}\par
1384 \par
1385   {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const override }\{\par
1386     *os << {\cf22 "("};\par
1387     {\cf19 for} ({\cf18 size_t} i = 0; i < matchers_.size(); ++i) \{\par
1388       {\cf19 if} (i != 0) *os << {\cf22 ") or ("};\par
1389       matchers_[i].DescribeTo(os);\par
1390     \}\par
1391     *os << {\cf22 ")"};\par
1392   \}\par
1393 \par
1394   {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const override }\{\par
1395     *os << {\cf22 "("};\par
1396     {\cf19 for} ({\cf18 size_t} i = 0; i < matchers_.size(); ++i) \{\par
1397       {\cf19 if} (i != 0) *os << {\cf22 ") and ("};\par
1398       matchers_[i].DescribeNegationTo(os);\par
1399     \}\par
1400     *os << {\cf22 ")"};\par
1401   \}\par
1402 \par
1403   {\cf18 bool} MatchAndExplain({\cf17 const} T& x,\par
1404                        MatchResultListener* listener){\cf17  const override }\{\par
1405     std::string no_match_result;\par
1406 \par
1407     {\cf20 // If either matcher1_ or matcher2_ matches x, we just need to}\par
1408     {\cf20 // explain why *one* of them matches.}\par
1409     {\cf19 for} ({\cf18 size_t} i = 0; i < matchers_.size(); ++i) \{\par
1410       StringMatchResultListener slistener;\par
1411       {\cf19 if} (matchers_[i].MatchAndExplain(x, &slistener)) \{\par
1412         *listener << slistener.str();\par
1413         {\cf19 return} {\cf17 true};\par
1414       \} {\cf19 else} \{\par
1415         {\cf19 if} (no_match_result.empty()) \{\par
1416           no_match_result = slistener.str();\par
1417         \} {\cf19 else} \{\par
1418           std::string result = slistener.str();\par
1419           {\cf19 if} (!result.empty()) \{\par
1420             no_match_result += {\cf22 ", and "};\par
1421             no_match_result += result;\par
1422           \}\par
1423         \}\par
1424       \}\par
1425     \}\par
1426 \par
1427     {\cf20 // Otherwise we need to explain why *both* of them fail.}\par
1428     *listener << no_match_result;\par
1429     {\cf19 return} {\cf17 false};\par
1430   \}\par
1431 \par
1432  {\cf17 private}:\par
1433   {\cf17 const} std::vector<Matcher<T>> matchers_;\par
1434 \};\par
1435 \par
1436 {\cf20 // AnyOfMatcher is used for the variadic implementation of AnyOf(m_1, m_2, ...).}\par
1437 {\cf17 template} <{\cf17 typename}... Args>\par
1438 {\cf17 using }AnyOfMatcher = VariadicMatcher<AnyOfMatcherImpl, Args...>;\par
1439 \par
1440 {\cf20 // ConditionalMatcher is the implementation of Conditional(cond, m1, m2)}\par
1441 {\cf17 template} <{\cf17 typename} MatcherTrue, {\cf17 typename} MatcherFalse>\par
1442 {\cf17 class }ConditionalMatcher \{\par
1443  {\cf17 public}:\par
1444   ConditionalMatcher({\cf18 bool} condition, MatcherTrue matcher_true,\par
1445                      MatcherFalse matcher_false)\par
1446       : condition_(condition),\par
1447         matcher_true_(std::move(matcher_true)),\par
1448         matcher_false_(std::move(matcher_false)) \{\}\par
1449 \par
1450   {\cf17 template} <{\cf17 typename} T>\par
1451   {\cf17 operator} Matcher<T>(){\cf17  const }\{  {\cf20 // NOLINT(runtime/explicit)}\par
1452     {\cf19 return} condition_ ? SafeMatcherCast<T>(matcher_true_)\par
1453                       : SafeMatcherCast<T>(matcher_false_);\par
1454   \}\par
1455 \par
1456  {\cf17 private}:\par
1457   {\cf18 bool} condition_;\par
1458   MatcherTrue matcher_true_;\par
1459   MatcherFalse matcher_false_;\par
1460 \};\par
1461 \par
1462 {\cf20 // Wrapper for implementation of Any/AllOfArray().}\par
1463 {\cf17 template} <{\cf17 template} <{\cf17 class}> {\cf17 class }MatcherImpl, {\cf17 typename} T>\par
1464 {\cf17 class }SomeOfArrayMatcher \{\par
1465  {\cf17 public}:\par
1466   {\cf20 // Constructs the matcher from a sequence of element values or}\par
1467   {\cf20 // element matchers.}\par
1468   {\cf17 template} <{\cf17 typename} Iter>\par
1469   SomeOfArrayMatcher(Iter first, Iter last) : matchers_(first, last) \{\}\par
1470 \par
1471   {\cf17 template} <{\cf17 typename} U>\par
1472   {\cf17 operator} Matcher<U>(){\cf17  const }\{  {\cf20 // NOLINT}\par
1473     {\cf17 using }RawU = {\cf17 typename} std::decay<U>::type;\par
1474     std::vector<Matcher<RawU>> matchers;\par
1475     {\cf19 for} ({\cf17 const} {\cf17 auto}& matcher : matchers_) \{\par
1476       matchers.push_back(MatcherCast<RawU>(matcher));\par
1477     \}\par
1478     {\cf19 return} Matcher<U>({\cf17 new} MatcherImpl<RawU>(std::move(matchers)));\par
1479   \}\par
1480 \par
1481  {\cf17 private}:\par
1482   const ::std::vector<T> matchers_;\par
1483 \};\par
1484 \par
1485 {\cf17 template} <{\cf17 typename} T>\par
1486 {\cf17 using }AllOfArrayMatcher = SomeOfArrayMatcher<AllOfMatcherImpl, T>;\par
1487 \par
1488 {\cf17 template} <{\cf17 typename} T>\par
1489 {\cf17 using }AnyOfArrayMatcher = SomeOfArrayMatcher<AnyOfMatcherImpl, T>;\par
1490 \par
1491 {\cf20 // Used for implementing Truly(pred), which turns a predicate into a}\par
1492 {\cf20 // matcher.}\par
1493 {\cf17 template} <{\cf17 typename} Predicate>\par
1494 {\cf17 class }TrulyMatcher \{\par
1495  {\cf17 public}:\par
1496   {\cf17 explicit} TrulyMatcher(Predicate pred) : predicate_(pred) \{\}\par
1497 \par
1498   {\cf20 // This method template allows Truly(pred) to be used as a matcher}\par
1499   {\cf20 // for type T where T is the argument type of predicate 'pred'.  The}\par
1500   {\cf20 // argument is passed by reference as the predicate may be}\par
1501   {\cf20 // interested in the address of the argument.}\par
1502   {\cf17 template} <{\cf17 typename} T>\par
1503   {\cf18 bool} MatchAndExplain(T& x,  {\cf20 // NOLINT}\par
1504                        MatchResultListener* listener){\cf17  const }\{\par
1505     {\cf20 // Without the if-statement, MSVC sometimes warns about converting}\par
1506     {\cf20 // a value to bool (warning 4800).}\par
1507     {\cf20 //}\par
1508     {\cf20 // We cannot write 'return !!predicate_(x);' as that doesn't work}\par
1509     {\cf20 // when predicate_(x) returns a class convertible to bool but}\par
1510     {\cf20 // having no operator!().}\par
1511     {\cf19 if} (predicate_(x)) {\cf19 return} {\cf17 true};\par
1512     *listener << {\cf22 "didn't satisfy the given predicate"};\par
1513     {\cf19 return} {\cf17 false};\par
1514   \}\par
1515 \par
1516   {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const }\{\par
1517     *os << {\cf22 "satisfies the given predicate"};\par
1518   \}\par
1519 \par
1520   {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const }\{\par
1521     *os << {\cf22 "doesn't satisfy the given predicate"};\par
1522   \}\par
1523 \par
1524  {\cf17 private}:\par
1525   Predicate predicate_;\par
1526 \};\par
1527 \par
1528 {\cf20 // Used for implementing Matches(matcher), which turns a matcher into}\par
1529 {\cf20 // a predicate.}\par
1530 {\cf17 template} <{\cf17 typename} M>\par
1531 {\cf17 class }MatcherAsPredicate \{\par
1532  {\cf17 public}:\par
1533   {\cf17 explicit} MatcherAsPredicate(M matcher) : matcher_(matcher) \{\}\par
1534 \par
1535   {\cf20 // This template operator() allows Matches(m) to be used as a}\par
1536   {\cf20 // predicate on type T where m is a matcher on type T.}\par
1537   {\cf20 //}\par
1538   {\cf20 // The argument x is passed by reference instead of by value, as}\par
1539   {\cf20 // some matcher may be interested in its address (e.g. as in}\par
1540   {\cf20 // Matches(Ref(n))(x)).}\par
1541   {\cf17 template} <{\cf17 typename} T>\par
1542   {\cf18 bool} operator()({\cf17 const} T& x){\cf17  const }\{\par
1543     {\cf20 // We let matcher_ commit to a particular type here instead of}\par
1544     {\cf20 // when the MatcherAsPredicate object was constructed.  This}\par
1545     {\cf20 // allows us to write Matches(m) where m is a polymorphic matcher}\par
1546     {\cf20 // (e.g. Eq(5)).}\par
1547     {\cf20 //}\par
1548     {\cf20 // If we write Matcher<T>(matcher_).Matches(x) here, it won't}\par
1549     {\cf20 // compile when matcher_ has type Matcher<const T&>; if we write}\par
1550     {\cf20 // Matcher<const T&>(matcher_).Matches(x) here, it won't compile}\par
1551     {\cf20 // when matcher_ has type Matcher<T>; if we just write}\par
1552     {\cf20 // matcher_.Matches(x), it won't compile when matcher_ is}\par
1553     {\cf20 // polymorphic, e.g. Eq(5).}\par
1554     {\cf20 //}\par
1555     {\cf20 // MatcherCast<const T&>() is necessary for making the code work}\par
1556     {\cf20 // in all of the above situations.}\par
1557     {\cf19 return} MatcherCast<const T&>(matcher_).Matches(x);\par
1558   \}\par
1559 \par
1560  {\cf17 private}:\par
1561   M matcher_;\par
1562 \};\par
1563 \par
1564 {\cf20 // For implementing ASSERT_THAT() and EXPECT_THAT().  The template}\par
1565 {\cf20 // argument M must be a type that can be converted to a matcher.}\par
1566 {\cf17 template} <{\cf17 typename} M>\par
1567 {\cf17 class }PredicateFormatterFromMatcher \{\par
1568  {\cf17 public}:\par
1569   {\cf17 explicit} PredicateFormatterFromMatcher(M m) : matcher_(std::move(m)) \{\}\par
1570 \par
1571   {\cf20 // This template () operator allows a PredicateFormatterFromMatcher}\par
1572   {\cf20 // object to act as a predicate-formatter suitable for using with}\par
1573   {\cf20 // Google Test's EXPECT_PRED_FORMAT1() macro.}\par
1574   {\cf17 template} <{\cf17 typename} T>\par
1575   AssertionResult operator()({\cf17 const} {\cf18 char}* value_text, {\cf17 const} T& x){\cf17  const }\{\par
1576     {\cf20 // We convert matcher_ to a Matcher<const T&> *now* instead of}\par
1577     {\cf20 // when the PredicateFormatterFromMatcher object was constructed,}\par
1578     {\cf20 // as matcher_ may be polymorphic (e.g. NotNull()) and we won't}\par
1579     {\cf20 // know which type to instantiate it to until we actually see the}\par
1580     {\cf20 // type of x here.}\par
1581     {\cf20 //}\par
1582     {\cf20 // We write SafeMatcherCast<const T&>(matcher_) instead of}\par
1583     {\cf20 // Matcher<const T&>(matcher_), as the latter won't compile when}\par
1584     {\cf20 // matcher_ has type Matcher<T> (e.g. An<int>()).}\par
1585     {\cf20 // We don't write MatcherCast<const T&> either, as that allows}\par
1586     {\cf20 // potentially unsafe downcasting of the matcher argument.}\par
1587     {\cf17 const} Matcher<const T&> matcher = SafeMatcherCast<const T&>(matcher_);\par
1588 \par
1589     {\cf20 // The expected path here is that the matcher should match (i.e. that most}\par
1590     {\cf20 // tests pass) so optimize for this case.}\par
1591     {\cf19 if} (matcher.Matches(x)) \{\par
1592       {\cf19 return} AssertionSuccess();\par
1593     \}\par
1594 \par
1595     ::std::stringstream ss;\par
1596     ss << {\cf22 "Value of: "} << value_text << {\cf22 "\\n"}\par
1597        << {\cf22 "Expected: "};\par
1598     matcher.DescribeTo(&ss);\par
1599 \par
1600     {\cf20 // Rerun the matcher to "PrintAndExplain" the failure.}\par
1601     StringMatchResultListener listener;\par
1602     {\cf19 if} (MatchPrintAndExplain(x, matcher, &listener)) \{\par
1603       ss << {\cf22 "\\n  The matcher failed on the initial attempt; but passed when "}\par
1604             {\cf22 "rerun to generate the explanation."};\par
1605     \}\par
1606     ss << {\cf22 "\\n  Actual: "} << listener.str();\par
1607     {\cf19 return} AssertionFailure() << ss.str();\par
1608   \}\par
1609 \par
1610  {\cf17 private}:\par
1611   {\cf17 const} M matcher_;\par
1612 \};\par
1613 \par
1614 {\cf20 // A helper function for converting a matcher to a predicate-formatter}\par
1615 {\cf20 // without the user needing to explicitly write the type.  This is}\par
1616 {\cf20 // used for implementing ASSERT_THAT() and EXPECT_THAT().}\par
1617 {\cf20 // Implementation detail: 'matcher' is received by-value to force decaying.}\par
1618 {\cf17 template} <{\cf17 typename} M>\par
1619 {\cf17 inline} PredicateFormatterFromMatcher<M> MakePredicateFormatterFromMatcher(\par
1620     M matcher) \{\par
1621   {\cf19 return} PredicateFormatterFromMatcher<M>(std::move(matcher));\par
1622 \}\par
1623 \par
1624 {\cf20 // Implements the polymorphic IsNan() matcher, which matches any floating type}\par
1625 {\cf20 // value that is Nan.}\par
1626 {\cf17 class }IsNanMatcher \{\par
1627  {\cf17 public}:\par
1628   {\cf17 template} <{\cf17 typename} FloatType>\par
1629   {\cf18 bool} MatchAndExplain({\cf17 const} FloatType& f,\par
1630                        MatchResultListener* {\cf20 /* listener */}){\cf17  const }\{\par
1631     {\cf19 return} (::std::isnan)(f);\par
1632   \}\par
1633 \par
1634   {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const }\{ *os << {\cf22 "is NaN"}; \}\par
1635   {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const }\{ *os << {\cf22 "isn't NaN"}; \}\par
1636 \};\par
1637 \par
1638 {\cf20 // Implements the polymorphic floating point equality matcher, which matches}\par
1639 {\cf20 // two float values using ULP-based approximation or, optionally, a}\par
1640 {\cf20 // user-specified epsilon.  The template is meant to be instantiated with}\par
1641 {\cf20 // FloatType being either float or double.}\par
1642 {\cf17 template} <{\cf17 typename} FloatType>\par
1643 {\cf17 class }FloatingEqMatcher \{\par
1644  {\cf17 public}:\par
1645   {\cf20 // Constructor for FloatingEqMatcher.}\par
1646   {\cf20 // The matcher's input will be compared with expected.  The matcher treats two}\par
1647   {\cf20 // NANs as equal if nan_eq_nan is true.  Otherwise, under IEEE standards,}\par
1648   {\cf20 // equality comparisons between NANs will always return false.  We specify a}\par
1649   {\cf20 // negative max_abs_error_ term to indicate that ULP-based approximation will}\par
1650   {\cf20 // be used for comparison.}\par
1651   FloatingEqMatcher(FloatType expected, {\cf18 bool} nan_eq_nan)\par
1652       : expected_(expected), nan_eq_nan_(nan_eq_nan), max_abs_error_(-1) \{\}\par
1653 \par
1654   {\cf20 // Constructor that supports a user-specified max_abs_error that will be used}\par
1655   {\cf20 // for comparison instead of ULP-based approximation.  The max absolute}\par
1656   {\cf20 // should be non-negative.}\par
1657   FloatingEqMatcher(FloatType expected, {\cf18 bool} nan_eq_nan,\par
1658                     FloatType max_abs_error)\par
1659       : expected_(expected),\par
1660         nan_eq_nan_(nan_eq_nan),\par
1661         max_abs_error_(max_abs_error) \{\par
1662     GTEST_CHECK_(max_abs_error >= 0)\par
1663         << {\cf22 ", where max_abs_error is"} << max_abs_error;\par
1664   \}\par
1665 \par
1666   {\cf20 // Implements floating point equality matcher as a Matcher<T>.}\par
1667   {\cf17 template} <{\cf17 typename} T>\par
1668   {\cf17 class }Impl : {\cf17 public} MatcherInterface<T> \{\par
1669    {\cf17 public}:\par
1670     Impl(FloatType expected, {\cf18 bool} nan_eq_nan, FloatType max_abs_error)\par
1671         : expected_(expected),\par
1672           nan_eq_nan_(nan_eq_nan),\par
1673           max_abs_error_(max_abs_error) \{\}\par
1674 \par
1675     {\cf18 bool} MatchAndExplain(T value,\par
1676                          MatchResultListener* listener){\cf17  const override }\{\par
1677       {\cf17 const} FloatingPoint<FloatType> actual(value), expected(expected_);\par
1678 \par
1679       {\cf20 // Compares NaNs first, if nan_eq_nan_ is true.}\par
1680       {\cf19 if} (actual.is_nan() || expected.is_nan()) \{\par
1681         {\cf19 if} (actual.is_nan() && expected.is_nan()) \{\par
1682           {\cf19 return} nan_eq_nan_;\par
1683         \}\par
1684         {\cf20 // One is nan; the other is not nan.}\par
1685         {\cf19 return} {\cf17 false};\par
1686       \}\par
1687       {\cf19 if} (HasMaxAbsError()) \{\par
1688         {\cf20 // We perform an equality check so that inf will match inf, regardless}\par
1689         {\cf20 // of error bounds.  If the result of value - expected_ would result in}\par
1690         {\cf20 // overflow or if either value is inf, the default result is infinity,}\par
1691         {\cf20 // which should only match if max_abs_error_ is also infinity.}\par
1692         {\cf19 if} (value == expected_) \{\par
1693           {\cf19 return} {\cf17 true};\par
1694         \}\par
1695 \par
1696         {\cf17 const} FloatType diff = value - expected_;\par
1697         {\cf19 if} (::std::fabs(diff) <= max_abs_error_) \{\par
1698           {\cf19 return} {\cf17 true};\par
1699         \}\par
1700 \par
1701         {\cf19 if} (listener->IsInterested()) \{\par
1702           *listener << {\cf22 "which is "} << diff << {\cf22 " from "} << expected_;\par
1703         \}\par
1704         {\cf19 return} {\cf17 false};\par
1705       \} {\cf19 else} \{\par
1706         {\cf19 return} actual.AlmostEquals(expected);\par
1707       \}\par
1708     \}\par
1709 \par
1710     {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const override }\{\par
1711       {\cf20 // os->precision() returns the previously set precision, which we}\par
1712       {\cf20 // store to restore the ostream to its original configuration}\par
1713       {\cf20 // after outputting.}\par
1714       const ::std::streamsize old_precision =\par
1715           os->precision(::std::numeric_limits<FloatType>::digits10 + 2);\par
1716       {\cf19 if} (FloatingPoint<FloatType>(expected_).is_nan()) \{\par
1717         {\cf19 if} (nan_eq_nan_) \{\par
1718           *os << {\cf22 "is NaN"};\par
1719         \} {\cf19 else} \{\par
1720           *os << {\cf22 "never matches"};\par
1721         \}\par
1722       \} {\cf19 else} \{\par
1723         *os << {\cf22 "is approximately "} << expected_;\par
1724         {\cf19 if} (HasMaxAbsError()) \{\par
1725           *os << {\cf22 " (absolute error <= "} << max_abs_error_ << {\cf22 ")"};\par
1726         \}\par
1727       \}\par
1728       os->precision(old_precision);\par
1729     \}\par
1730 \par
1731     {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const override }\{\par
1732       {\cf20 // As before, get original precision.}\par
1733       const ::std::streamsize old_precision =\par
1734           os->precision(::std::numeric_limits<FloatType>::digits10 + 2);\par
1735       {\cf19 if} (FloatingPoint<FloatType>(expected_).is_nan()) \{\par
1736         {\cf19 if} (nan_eq_nan_) \{\par
1737           *os << {\cf22 "isn't NaN"};\par
1738         \} {\cf19 else} \{\par
1739           *os << {\cf22 "is anything"};\par
1740         \}\par
1741       \} {\cf19 else} \{\par
1742         *os << {\cf22 "isn't approximately "} << expected_;\par
1743         {\cf19 if} (HasMaxAbsError()) \{\par
1744           *os << {\cf22 " (absolute error > "} << max_abs_error_ << {\cf22 ")"};\par
1745         \}\par
1746       \}\par
1747       {\cf20 // Restore original precision.}\par
1748       os->precision(old_precision);\par
1749     \}\par
1750 \par
1751    {\cf17 private}:\par
1752     {\cf18 bool} HasMaxAbsError(){\cf17  const }\{ {\cf19 return} max_abs_error_ >= 0; \}\par
1753 \par
1754     {\cf17 const} FloatType expected_;\par
1755     {\cf17 const} {\cf18 bool} nan_eq_nan_;\par
1756     {\cf20 // max_abs_error will be used for value comparison when >= 0.}\par
1757     {\cf17 const} FloatType max_abs_error_;\par
1758   \};\par
1759 \par
1760   {\cf20 // The following 3 type conversion operators allow FloatEq(expected) and}\par
1761   {\cf20 // NanSensitiveFloatEq(expected) to be used as a Matcher<float>, a}\par
1762   {\cf20 // Matcher<const float&>, or a Matcher<float&>, but nothing else.}\par
1763   {\cf17 operator} Matcher<FloatType>(){\cf17  const }\{\par
1764     {\cf19 return} MakeMatcher(\par
1765         {\cf17 new} Impl<FloatType>(expected_, nan_eq_nan_, max_abs_error_));\par
1766   \}\par
1767 \par
1768   {\cf17 operator} Matcher<const FloatType&>(){\cf17  const }\{\par
1769     {\cf19 return} MakeMatcher(\par
1770         {\cf17 new} Impl<const FloatType&>(expected_, nan_eq_nan_, max_abs_error_));\par
1771   \}\par
1772 \par
1773   {\cf17 operator} Matcher<FloatType&>(){\cf17  const }\{\par
1774     {\cf19 return} MakeMatcher(\par
1775         {\cf17 new} Impl<FloatType&>(expected_, nan_eq_nan_, max_abs_error_));\par
1776   \}\par
1777 \par
1778  {\cf17 private}:\par
1779   {\cf17 const} FloatType expected_;\par
1780   {\cf17 const} {\cf18 bool} nan_eq_nan_;\par
1781   {\cf20 // max_abs_error will be used for value comparison when >= 0.}\par
1782   {\cf17 const} FloatType max_abs_error_;\par
1783 \};\par
1784 \par
1785 {\cf20 // A 2-tuple ("binary") wrapper around FloatingEqMatcher:}\par
1786 {\cf20 // FloatingEq2Matcher() matches (x, y) by matching FloatingEqMatcher(x, false)}\par
1787 {\cf20 // against y, and FloatingEq2Matcher(e) matches FloatingEqMatcher(x, false, e)}\par
1788 {\cf20 // against y. The former implements "Eq", the latter "Near". At present, there}\par
1789 {\cf20 // is no version that compares NaNs as equal.}\par
1790 {\cf17 template} <{\cf17 typename} FloatType>\par
1791 {\cf17 class }FloatingEq2Matcher \{\par
1792  {\cf17 public}:\par
1793   FloatingEq2Matcher() \{ Init(-1, {\cf17 false}); \}\par
1794 \par
1795   {\cf17 explicit} FloatingEq2Matcher({\cf18 bool} nan_eq_nan) \{ Init(-1, nan_eq_nan); \}\par
1796 \par
1797   {\cf17 explicit} FloatingEq2Matcher(FloatType max_abs_error) \{\par
1798     Init(max_abs_error, {\cf17 false});\par
1799   \}\par
1800 \par
1801   FloatingEq2Matcher(FloatType max_abs_error, {\cf18 bool} nan_eq_nan) \{\par
1802     Init(max_abs_error, nan_eq_nan);\par
1803   \}\par
1804 \par
1805   {\cf17 template} <{\cf17 typename} T1, {\cf17 typename} T2>\par
1806   {\cf17 operator} Matcher<::std::tuple<T1, T2>>() {\cf17 const} \{\par
1807     {\cf19 return} MakeMatcher(\par
1808         {\cf17 new} Impl<::std::tuple<T1, T2>>(max_abs_error_, nan_eq_nan_));\par
1809   \}\par
1810   {\cf17 template} <{\cf17 typename} T1, {\cf17 typename} T2>\par
1811   {\cf17 operator} Matcher<const ::std::tuple<T1, T2>&>() {\cf17 const} \{\par
1812     {\cf19 return} MakeMatcher(\par
1813         {\cf17 new} Impl<const ::std::tuple<T1, T2>&>(max_abs_error_, nan_eq_nan_));\par
1814   \}\par
1815 \par
1816  {\cf17 private}:\par
1817   static ::std::ostream& GetDesc(::std::ostream& os) \{  {\cf20 // NOLINT}\par
1818     {\cf19 return} os << {\cf22 "an almost-equal pair"};\par
1819   \}\par
1820 \par
1821   {\cf17 template} <{\cf17 typename} Tuple>\par
1822   {\cf17 class }Impl : {\cf17 public} MatcherInterface<Tuple> \{\par
1823    {\cf17 public}:\par
1824     Impl(FloatType max_abs_error, {\cf18 bool} nan_eq_nan)\par
1825         : max_abs_error_(max_abs_error), nan_eq_nan_(nan_eq_nan) \{\}\par
1826 \par
1827     {\cf18 bool} MatchAndExplain(Tuple args,\par
1828                          MatchResultListener* listener){\cf17  const override }\{\par
1829       {\cf19 if} (max_abs_error_ == -1) \{\par
1830         FloatingEqMatcher<FloatType> fm(::std::get<0>(args), nan_eq_nan_);\par
1831         {\cf19 return} {\cf17 static_cast<}Matcher<FloatType>{\cf17 >}(fm).MatchAndExplain(\par
1832             ::std::get<1>(args), listener);\par
1833       \} {\cf19 else} \{\par
1834         FloatingEqMatcher<FloatType> fm(::std::get<0>(args), nan_eq_nan_,\par
1835                                         max_abs_error_);\par
1836         {\cf19 return} {\cf17 static_cast<}Matcher<FloatType>{\cf17 >}(fm).MatchAndExplain(\par
1837             ::std::get<1>(args), listener);\par
1838       \}\par
1839     \}\par
1840     {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const override }\{\par
1841       *os << {\cf22 "are "} << GetDesc;\par
1842     \}\par
1843     {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const override }\{\par
1844       *os << {\cf22 "aren't "} << GetDesc;\par
1845     \}\par
1846 \par
1847    {\cf17 private}:\par
1848     FloatType max_abs_error_;\par
1849     {\cf17 const} {\cf18 bool} nan_eq_nan_;\par
1850   \};\par
1851 \par
1852   {\cf18 void} Init(FloatType max_abs_error_val, {\cf18 bool} nan_eq_nan_val) \{\par
1853     max_abs_error_ = max_abs_error_val;\par
1854     nan_eq_nan_ = nan_eq_nan_val;\par
1855   \}\par
1856   FloatType max_abs_error_;\par
1857   {\cf18 bool} nan_eq_nan_;\par
1858 \};\par
1859 \par
1860 {\cf20 // Implements the Pointee(m) matcher for matching a pointer whose}\par
1861 {\cf20 // pointee matches matcher m.  The pointer can be either raw or smart.}\par
1862 {\cf17 template} <{\cf17 typename} InnerMatcher>\par
1863 {\cf17 class }PointeeMatcher \{\par
1864  {\cf17 public}:\par
1865   {\cf17 explicit} PointeeMatcher({\cf17 const} InnerMatcher& matcher) : matcher_(matcher) \{\}\par
1866 \par
1867   {\cf20 // This type conversion operator template allows Pointee(m) to be}\par
1868   {\cf20 // used as a matcher for any pointer type whose pointee type is}\par
1869   {\cf20 // compatible with the inner matcher, where type Pointer can be}\par
1870   {\cf20 // either a raw pointer or a smart pointer.}\par
1871   {\cf20 //}\par
1872   {\cf20 // The reason we do this instead of relying on}\par
1873   {\cf20 // MakePolymorphicMatcher() is that the latter is not flexible}\par
1874   {\cf20 // enough for implementing the DescribeTo() method of Pointee().}\par
1875   {\cf17 template} <{\cf17 typename} Po{\cf18 int}er>\par
1876   {\cf17 operator} Matcher<Pointer>(){\cf17  const }\{\par
1877     {\cf19 return} Matcher<Pointer>({\cf17 new} Impl<const Pointer&>(matcher_));\par
1878   \}\par
1879 \par
1880  {\cf17 private}:\par
1881   {\cf20 // The monomorphic implementation that works for a particular pointer type.}\par
1882   {\cf17 template} <{\cf17 typename} Po{\cf18 int}er>\par
1883   {\cf17 class }Impl : {\cf17 public} MatcherInterface<Pointer> \{\par
1884    {\cf17 public}:\par
1885     {\cf17 using }Pointee =\par
1886         {\cf17 typename} std::pointer_traits<GTEST_REMOVE_REFERENCE_AND_CONST_(\par
1887             Pointer)>::element_type;\par
1888 \par
1889     {\cf17 explicit} Impl({\cf17 const} InnerMatcher& matcher)\par
1890         : matcher_(MatcherCast<const Pointee&>(matcher)) \{\}\par
1891 \par
1892     {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const override }\{\par
1893       *os << {\cf22 "points to a value that "};\par
1894       matcher_.DescribeTo(os);\par
1895     \}\par
1896 \par
1897     {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const override }\{\par
1898       *os << {\cf22 "does not point to a value that "};\par
1899       matcher_.DescribeTo(os);\par
1900     \}\par
1901 \par
1902     {\cf18 bool} MatchAndExplain(Pointer pointer,\par
1903                          MatchResultListener* listener){\cf17  const override }\{\par
1904       {\cf19 if} (GetRawPointer(pointer) == {\cf17 nullptr}) {\cf19 return} {\cf17 false};\par
1905 \par
1906       *listener << {\cf22 "which points to "};\par
1907       {\cf19 return} MatchPrintAndExplain(*pointer, matcher_, listener);\par
1908     \}\par
1909 \par
1910    {\cf17 private}:\par
1911     {\cf17 const} Matcher<const Pointee&> matcher_;\par
1912   \};\par
1913 \par
1914   {\cf17 const} InnerMatcher matcher_;\par
1915 \};\par
1916 \par
1917 {\cf20 // Implements the Pointer(m) matcher}\par
1918 {\cf20 // Implements the Pointer(m) matcher for matching a pointer that matches matcher}\par
1919 {\cf20 // m.  The pointer can be either raw or smart, and will match `m` against the}\par
1920 {\cf20 // raw pointer.}\par
1921 {\cf17 template} <{\cf17 typename} InnerMatcher>\par
1922 {\cf17 class }PointerMatcher \{\par
1923  {\cf17 public}:\par
1924   {\cf17 explicit} PointerMatcher({\cf17 const} InnerMatcher& matcher) : matcher_(matcher) \{\}\par
1925 \par
1926   {\cf20 // This type conversion operator template allows Pointer(m) to be}\par
1927   {\cf20 // used as a matcher for any pointer type whose pointer type is}\par
1928   {\cf20 // compatible with the inner matcher, where type PointerType can be}\par
1929   {\cf20 // either a raw pointer or a smart pointer.}\par
1930   {\cf20 //}\par
1931   {\cf20 // The reason we do this instead of relying on}\par
1932   {\cf20 // MakePolymorphicMatcher() is that the latter is not flexible}\par
1933   {\cf20 // enough for implementing the DescribeTo() method of Pointer().}\par
1934   {\cf17 template} <{\cf17 typename} Po{\cf18 int}erType>\par
1935   {\cf17 operator} Matcher<PointerType>(){\cf17  const }\{  {\cf20 // NOLINT}\par
1936     {\cf19 return} Matcher<PointerType>({\cf17 new} Impl<const PointerType&>(matcher_));\par
1937   \}\par
1938 \par
1939  {\cf17 private}:\par
1940   {\cf20 // The monomorphic implementation that works for a particular pointer type.}\par
1941   {\cf17 template} <{\cf17 typename} Po{\cf18 int}erType>\par
1942   {\cf17 class }Impl : {\cf17 public} MatcherInterface<PointerType> \{\par
1943    {\cf17 public}:\par
1944     {\cf17 using }Pointer =\par
1945         {\cf17 const} {\cf17 typename} std::pointer_traits<GTEST_REMOVE_REFERENCE_AND_CONST_(\par
1946             PointerType)>::element_type*;\par
1947 \par
1948     {\cf17 explicit} Impl({\cf17 const} InnerMatcher& matcher)\par
1949         : matcher_(MatcherCast<Pointer>(matcher)) \{\}\par
1950 \par
1951     {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const override }\{\par
1952       *os << {\cf22 "is a pointer that "};\par
1953       matcher_.DescribeTo(os);\par
1954     \}\par
1955 \par
1956     {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const override }\{\par
1957       *os << {\cf22 "is not a pointer that "};\par
1958       matcher_.DescribeTo(os);\par
1959     \}\par
1960 \par
1961     {\cf18 bool} MatchAndExplain(PointerType pointer,\par
1962                          MatchResultListener* listener){\cf17  const override }\{\par
1963       *listener << {\cf22 "which is a pointer that "};\par
1964       Pointer p = GetRawPointer(pointer);\par
1965       {\cf19 return} MatchPrintAndExplain(p, matcher_, listener);\par
1966     \}\par
1967 \par
1968    {\cf17 private}:\par
1969     Matcher<Pointer> matcher_;\par
1970   \};\par
1971 \par
1972   {\cf17 const} InnerMatcher matcher_;\par
1973 \};\par
1974 \par
1975 {\cf21 #if GTEST_HAS_RTTI}\par
1976 {\cf20 // Implements the WhenDynamicCastTo<T>(m) matcher that matches a pointer or}\par
1977 {\cf20 // reference that matches inner_matcher when dynamic_cast<T> is applied.}\par
1978 {\cf20 // The result of dynamic_cast<To> is forwarded to the inner matcher.}\par
1979 {\cf20 // If To is a pointer and the cast fails, the inner matcher will receive NULL.}\par
1980 {\cf20 // If To is a reference and the cast fails, this matcher returns false}\par
1981 {\cf20 // immediately.}\par
1982 {\cf17 template} <{\cf17 typename} To>\par
1983 {\cf17 class }WhenDynamicCastToMatcherBase \{\par
1984  {\cf17 public}:\par
1985   {\cf17 explicit} WhenDynamicCastToMatcherBase({\cf17 const} Matcher<To>& matcher)\par
1986       : matcher_(matcher) \{\}\par
1987 \par
1988   {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const }\{\par
1989     GetCastTypeDescription(os);\par
1990     matcher_.DescribeTo(os);\par
1991   \}\par
1992 \par
1993   {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const }\{\par
1994     GetCastTypeDescription(os);\par
1995     matcher_.DescribeNegationTo(os);\par
1996   \}\par
1997 \par
1998  {\cf17 protected}:\par
1999   {\cf17 const} Matcher<To> matcher_;\par
2000 \par
2001   {\cf17 static} std::string GetToName() \{ {\cf19 return} GetTypeName<To>(); \}\par
2002 \par
2003  {\cf17 private}:\par
2004   {\cf17 static} {\cf18 void} GetCastTypeDescription(::std::ostream* os) \{\par
2005     *os << {\cf22 "when dynamic_cast to "} << GetToName() << {\cf22 ", "};\par
2006   \}\par
2007 \};\par
2008 \par
2009 {\cf20 // Primary template.}\par
2010 {\cf20 // To is a pointer. Cast and forward the result.}\par
2011 {\cf17 template} <{\cf17 typename} To>\par
2012 {\cf17 class }WhenDynamicCastToMatcher : {\cf17 public} WhenDynamicCastToMatcherBase<To> \{\par
2013  {\cf17 public}:\par
2014   {\cf17 explicit} WhenDynamicCastToMatcher({\cf17 const} Matcher<To>& matcher)\par
2015       : WhenDynamicCastToMatcherBase<To>(matcher) \{\}\par
2016 \par
2017   {\cf17 template} <{\cf17 typename} From>\par
2018   {\cf18 bool} MatchAndExplain(From from, MatchResultListener* listener){\cf17  const }\{\par
2019     To to = {\cf17 dynamic_cast<}To{\cf17 >}(from);\par
2020     {\cf19 return} MatchPrintAndExplain(to, this->matcher_, listener);\par
2021   \}\par
2022 \};\par
2023 \par
2024 {\cf20 // Specialize for references.}\par
2025 {\cf20 // In this case we return false if the dynamic_cast fails.}\par
2026 {\cf17 template} <{\cf17 typename} To>\par
2027 {\cf17 class }WhenDynamicCastToMatcher<To&> : {\cf17 public} WhenDynamicCastToMatcherBase<To&> \{\par
2028  {\cf17 public}:\par
2029   {\cf17 explicit} WhenDynamicCastToMatcher({\cf17 const} Matcher<To&>& matcher)\par
2030       : WhenDynamicCastToMatcherBase<To&>(matcher) \{\}\par
2031 \par
2032   {\cf17 template} <{\cf17 typename} From>\par
2033   {\cf18 bool} MatchAndExplain(From& from, MatchResultListener* listener){\cf17  const }\{\par
2034     {\cf20 // We don't want an std::bad_cast here, so do the cast with pointers.}\par
2035     To* to = {\cf17 dynamic_cast<}To*{\cf17 >}(&from);\par
2036     {\cf19 if} (to == {\cf17 nullptr}) \{\par
2037       *listener << {\cf22 "which cannot be dynamic_cast to "} << this->GetToName();\par
2038       {\cf19 return} {\cf17 false};\par
2039     \}\par
2040     {\cf19 return} MatchPrintAndExplain(*to, this->matcher_, listener);\par
2041   \}\par
2042 \};\par
2043 {\cf21 #endif  }{\cf20 // GTEST_HAS_RTTI}\par
2044 \par
2045 {\cf20 // Implements the Field() matcher for matching a field (i.e. member}\par
2046 {\cf20 // variable) of an object.}\par
2047 {\cf17 template} <{\cf17 typename} Class, {\cf17 typename} FieldType>\par
2048 {\cf17 class }FieldMatcher \{\par
2049  {\cf17 public}:\par
2050   FieldMatcher(FieldType Class::*field,\par
2051                {\cf17 const} Matcher<const FieldType&>& matcher)\par
2052       : field_(field), matcher_(matcher), whose_field_({\cf22 "whose given field "}) \{\}\par
2053 \par
2054   FieldMatcher({\cf17 const} std::string& field_name, FieldType Class::*field,\par
2055                {\cf17 const} Matcher<const FieldType&>& matcher)\par
2056       : field_(field),\par
2057         matcher_(matcher),\par
2058         whose_field_({\cf22 "whose field `"} + field_name + {\cf22 "` "}) \{\}\par
2059 \par
2060   {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const }\{\par
2061     *os << {\cf22 "is an object "} << whose_field_;\par
2062     matcher_.DescribeTo(os);\par
2063   \}\par
2064 \par
2065   {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const }\{\par
2066     *os << {\cf22 "is an object "} << whose_field_;\par
2067     matcher_.DescribeNegationTo(os);\par
2068   \}\par
2069 \par
2070   {\cf17 template} <{\cf17 typename} T>\par
2071   {\cf18 bool} MatchAndExplain({\cf17 const} T& value, MatchResultListener* listener){\cf17  const }\{\par
2072     {\cf20 // FIXME: The dispatch on std::is_pointer was introduced as a workaround for}\par
2073     {\cf20 // a compiler bug, and can now be removed.}\par
2074     {\cf19 return} MatchAndExplainImpl(\par
2075         {\cf17 typename} std::is_pointer<{\cf17 typename} std::remove_const<T>::type>::type(),\par
2076         value, listener);\par
2077   \}\par
2078 \par
2079  {\cf17 private}:\par
2080   {\cf18 bool} MatchAndExplainImpl(std::false_type {\cf20 /* is_not_pointer */},\par
2081                            {\cf17 const} Class& obj,\par
2082                            MatchResultListener* listener){\cf17  const }\{\par
2083     *listener << whose_field_ << {\cf22 "is "};\par
2084     {\cf19 return} MatchPrintAndExplain(obj.*field_, matcher_, listener);\par
2085   \}\par
2086 \par
2087   {\cf18 bool} MatchAndExplainImpl(std::true_type {\cf20 /* is_pointer */}, {\cf17 const} Class* p,\par
2088                            MatchResultListener* listener){\cf17  const }\{\par
2089     {\cf19 if} (p == {\cf17 nullptr}) {\cf19 return} {\cf17 false};\par
2090 \par
2091     *listener << {\cf22 "which points to an object "};\par
2092     {\cf20 // Since *p has a field, it must be a class/struct/union type and}\par
2093     {\cf20 // thus cannot be a pointer.  Therefore we pass false_type() as}\par
2094     {\cf20 // the first argument.}\par
2095     {\cf19 return} MatchAndExplainImpl(std::false_type(), *p, listener);\par
2096   \}\par
2097 \par
2098   {\cf17 const} FieldType Class::*field_;\par
2099   {\cf17 const} Matcher<const FieldType&> matcher_;\par
2100 \par
2101   {\cf20 // Contains either "whose given field " if the name of the field is unknown}\par
2102   {\cf20 // or "whose field `name_of_field` " if the name is known.}\par
2103   {\cf17 const} std::string whose_field_;\par
2104 \};\par
2105 \par
2106 {\cf20 // Implements the Property() matcher for matching a property}\par
2107 {\cf20 // (i.e. return value of a getter method) of an object.}\par
2108 {\cf20 //}\par
2109 {\cf20 // Property is a const-qualified member function of Class returning}\par
2110 {\cf20 // PropertyType.}\par
2111 {\cf17 template} <{\cf17 typename} Class, {\cf17 typename} PropertyType, {\cf17 typename} Property>\par
2112 {\cf17 class }PropertyMatcher \{\par
2113  {\cf17 public}:\par
2114   {\cf17 typedef} {\cf17 const} PropertyType& RefToConstProperty;\par
2115 \par
2116   PropertyMatcher(Property property, {\cf17 const} Matcher<RefToConstProperty>& matcher)\par
2117       : property_(property),\par
2118         matcher_(matcher),\par
2119         whose_property_({\cf22 "whose given property "}) \{\}\par
2120 \par
2121   PropertyMatcher({\cf17 const} std::string& property_name, Property property,\par
2122                   {\cf17 const} Matcher<RefToConstProperty>& matcher)\par
2123       : property_(property),\par
2124         matcher_(matcher),\par
2125         whose_property_({\cf22 "whose property `"} + property_name + {\cf22 "` "}) \{\}\par
2126 \par
2127   {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const }\{\par
2128     *os << {\cf22 "is an object "} << whose_property_;\par
2129     matcher_.DescribeTo(os);\par
2130   \}\par
2131 \par
2132   {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const }\{\par
2133     *os << {\cf22 "is an object "} << whose_property_;\par
2134     matcher_.DescribeNegationTo(os);\par
2135   \}\par
2136 \par
2137   {\cf17 template} <{\cf17 typename} T>\par
2138   {\cf18 bool} MatchAndExplain({\cf17 const} T& value, MatchResultListener* listener){\cf17  const }\{\par
2139     {\cf19 return} MatchAndExplainImpl(\par
2140         {\cf17 typename} std::is_pointer<{\cf17 typename} std::remove_const<T>::type>::type(),\par
2141         value, listener);\par
2142   \}\par
2143 \par
2144  {\cf17 private}:\par
2145   {\cf18 bool} MatchAndExplainImpl(std::false_type {\cf20 /* is_not_pointer */},\par
2146                            {\cf17 const} Class& obj,\par
2147                            MatchResultListener* listener){\cf17  const }\{\par
2148     *listener << whose_property_ << {\cf22 "is "};\par
2149     {\cf20 // Cannot pass the return value (for example, int) to MatchPrintAndExplain,}\par
2150     {\cf20 // which takes a non-const reference as argument.}\par
2151     RefToConstProperty result = (obj.*property_)();\par
2152     {\cf19 return} MatchPrintAndExplain(result, matcher_, listener);\par
2153   \}\par
2154 \par
2155   {\cf18 bool} MatchAndExplainImpl(std::true_type {\cf20 /* is_pointer */}, {\cf17 const} Class* p,\par
2156                            MatchResultListener* listener){\cf17  const }\{\par
2157     {\cf19 if} (p == {\cf17 nullptr}) {\cf19 return} {\cf17 false};\par
2158 \par
2159     *listener << {\cf22 "which points to an object "};\par
2160     {\cf20 // Since *p has a property method, it must be a class/struct/union}\par
2161     {\cf20 // type and thus cannot be a pointer.  Therefore we pass}\par
2162     {\cf20 // false_type() as the first argument.}\par
2163     {\cf19 return} MatchAndExplainImpl(std::false_type(), *p, listener);\par
2164   \}\par
2165 \par
2166   Property property_;\par
2167   {\cf17 const} Matcher<RefToConstProperty> matcher_;\par
2168 \par
2169   {\cf20 // Contains either "whose given property " if the name of the property is}\par
2170   {\cf20 // unknown or "whose property `name_of_property` " if the name is known.}\par
2171   {\cf17 const} std::string whose_property_;\par
2172 \};\par
2173 \par
2174 {\cf20 // Type traits specifying various features of different functors for ResultOf.}\par
2175 {\cf20 // The default template specifies features for functor objects.}\par
2176 {\cf17 template} <{\cf17 typename} Functor>\par
2177 {\cf17 struct }CallableTraits \{\par
2178   {\cf17 typedef} Functor StorageType;\par
2179 \par
2180   {\cf17 static} {\cf18 void} CheckIsValid(Functor {\cf20 /* functor */}) \{\}\par
2181 \par
2182   {\cf17 template} <{\cf17 typename} T>\par
2183   {\cf17 static} {\cf17 auto} Invoke(Functor f, {\cf17 const} T& arg) -> {\cf17 decltype}(f(arg)) \{\par
2184     {\cf19 return} f(arg);\par
2185   \}\par
2186 \};\par
2187 \par
2188 {\cf20 // Specialization for function pointers.}\par
2189 {\cf17 template} <{\cf17 typename} ArgType, {\cf17 typename} ResType>\par
2190 {\cf17 struct }CallableTraits<ResType (*)(ArgType)> \{\par
2191   {\cf17 typedef} ResType ResultType;\par
2192   {\cf17 typedef} ResType (*StorageType)(ArgType);\par
2193 \par
2194   {\cf17 static} {\cf18 void} CheckIsValid(ResType (*f)(ArgType)) \{\par
2195     GTEST_CHECK_(f != {\cf17 nullptr})\par
2196         << {\cf22 "NULL function pointer is passed into ResultOf()."};\par
2197   \}\par
2198   {\cf17 template} <{\cf17 typename} T>\par
2199   {\cf17 static} ResType Invoke(ResType (*f)(ArgType), T arg) \{\par
2200     {\cf19 return} (*f)(arg);\par
2201   \}\par
2202 \};\par
2203 \par
2204 {\cf20 // Implements the ResultOf() matcher for matching a return value of a}\par
2205 {\cf20 // unary function of an object.}\par
2206 {\cf17 template} <{\cf17 typename} Callable, {\cf17 typename} InnerMatcher>\par
2207 {\cf17 class }ResultOfMatcher \{\par
2208  {\cf17 public}:\par
2209   ResultOfMatcher(Callable callable, InnerMatcher matcher)\par
2210       : ResultOfMatcher({\cf20 /*result_description=*/}{\cf22 ""}, std::move(callable),\par
2211                         std::move(matcher)) \{\}\par
2212 \par
2213   ResultOfMatcher({\cf17 const} std::string& result_description, Callable callable,\par
2214                   InnerMatcher matcher)\par
2215       : result_description_(result_description),\par
2216         callable_(std::move(callable)),\par
2217         matcher_(std::move(matcher)) \{\par
2218     CallableTraits<Callable>::CheckIsValid(callable_);\par
2219   \}\par
2220 \par
2221   {\cf17 template} <{\cf17 typename} T>\par
2222   {\cf17 operator} Matcher<T>(){\cf17  const }\{\par
2223     {\cf19 return} Matcher<T>(\par
2224         {\cf17 new} Impl<const T&>(result_description_, callable_, matcher_));\par
2225   \}\par
2226 \par
2227  {\cf17 private}:\par
2228   {\cf17 typedef} {\cf17 typename} CallableTraits<Callable>::StorageType CallableStorageType;\par
2229 \par
2230   {\cf17 template} <{\cf17 typename} T>\par
2231   {\cf17 class }Impl : {\cf17 public} MatcherInterface<T> \{\par
2232     {\cf17 using }ResultType = {\cf17 decltype}(CallableTraits<Callable>::template Invoke<T>(\par
2233         std::declval<CallableStorageType>(), std::declval<T>()));\par
2234 \par
2235    {\cf17 public}:\par
2236     {\cf17 template} <{\cf17 typename} M>\par
2237     Impl({\cf17 const} std::string& result_description,\par
2238          {\cf17 const} CallableStorageType& callable, {\cf17 const} M& matcher)\par
2239         : result_description_(result_description),\par
2240           callable_(callable),\par
2241           matcher_(MatcherCast<ResultType>(matcher)) \{\}\par
2242 \par
2243     {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const override }\{\par
2244       {\cf19 if} (result_description_.empty()) \{\par
2245         *os << {\cf22 "is mapped by the given callable to a value that "};\par
2246       \} {\cf19 else} \{\par
2247         *os << {\cf22 "whose "} << result_description_ << {\cf22 " "};\par
2248       \}\par
2249       matcher_.DescribeTo(os);\par
2250     \}\par
2251 \par
2252     {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const override }\{\par
2253       {\cf19 if} (result_description_.empty()) \{\par
2254         *os << {\cf22 "is mapped by the given callable to a value that "};\par
2255       \} {\cf19 else} \{\par
2256         *os << {\cf22 "whose "} << result_description_ << {\cf22 " "};\par
2257       \}\par
2258       matcher_.DescribeNegationTo(os);\par
2259     \}\par
2260 \par
2261     {\cf18 bool} MatchAndExplain(T obj, MatchResultListener* listener){\cf17  const override }\{\par
2262       {\cf19 if} (result_description_.empty()) \{\par
2263         *listener << {\cf22 "which is mapped by the given callable to "};\par
2264       \} {\cf19 else} \{\par
2265         *listener << {\cf22 "whose "} << result_description_ << {\cf22 " is "};\par
2266       \}\par
2267       {\cf20 // Cannot pass the return value directly to MatchPrintAndExplain, which}\par
2268       {\cf20 // takes a non-const reference as argument.}\par
2269       {\cf20 // Also, specifying template argument explicitly is needed because T could}\par
2270       {\cf20 // be a non-const reference (e.g. Matcher<Uncopyable&>).}\par
2271       ResultType result =\par
2272           CallableTraits<Callable>::template Invoke<T>(callable_, obj);\par
2273       {\cf19 return} MatchPrintAndExplain(result, matcher_, listener);\par
2274     \}\par
2275 \par
2276    {\cf17 private}:\par
2277     {\cf17 const} std::string result_description_;\par
2278     {\cf20 // Functors often define operator() as non-const method even though}\par
2279     {\cf20 // they are actually stateless. But we need to use them even when}\par
2280     {\cf20 // 'this' is a const pointer. It's the user's responsibility not to}\par
2281     {\cf20 // use stateful callables with ResultOf(), which doesn't guarantee}\par
2282     {\cf20 // how many times the callable will be invoked.}\par
2283     {\cf17 mutable} CallableStorageType callable_;\par
2284     {\cf17 const} Matcher<ResultType> matcher_;\par
2285   \};  {\cf20 // class Impl}\par
2286 \par
2287   {\cf17 const} std::string result_description_;\par
2288   {\cf17 const} CallableStorageType callable_;\par
2289   {\cf17 const} InnerMatcher matcher_;\par
2290 \};\par
2291 \par
2292 {\cf20 // Implements a matcher that checks the size of an STL-style container.}\par
2293 {\cf17 template} <{\cf17 typename} SizeMatcher>\par
2294 {\cf17 class }SizeIsMatcher \{\par
2295  {\cf17 public}:\par
2296   {\cf17 explicit} SizeIsMatcher({\cf17 const} SizeMatcher& size_matcher)\par
2297       : size_matcher_(size_matcher) \{\}\par
2298 \par
2299   {\cf17 template} <{\cf17 typename} Container>\par
2300   {\cf17 operator} Matcher<Container>(){\cf17  const }\{\par
2301     {\cf19 return} Matcher<Container>({\cf17 new} Impl<const Container&>(size_matcher_));\par
2302   \}\par
2303 \par
2304   {\cf17 template} <{\cf17 typename} Container>\par
2305   {\cf17 class }Impl : {\cf17 public} MatcherInterface<Container> \{\par
2306    {\cf17 public}:\par
2307     {\cf17 using }SizeType = {\cf17 decltype}(std::declval<Container>().size());\par
2308     {\cf17 explicit} Impl({\cf17 const} SizeMatcher& size_matcher)\par
2309         : size_matcher_(MatcherCast<SizeType>(size_matcher)) \{\}\par
2310 \par
2311     {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const override }\{\par
2312       *os << {\cf22 "size "};\par
2313       size_matcher_.DescribeTo(os);\par
2314     \}\par
2315     {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const override }\{\par
2316       *os << {\cf22 "size "};\par
2317       size_matcher_.DescribeNegationTo(os);\par
2318     \}\par
2319 \par
2320     {\cf18 bool} MatchAndExplain(Container container,\par
2321                          MatchResultListener* listener){\cf17  const override }\{\par
2322       SizeType size = container.size();\par
2323       StringMatchResultListener size_listener;\par
2324       {\cf17 const} {\cf18 bool} result = size_matcher_.MatchAndExplain(size, &size_listener);\par
2325       *listener << {\cf22 "whose size "} << size\par
2326                 << (result ? {\cf22 " matches"} : {\cf22 " doesn't match"});\par
2327       PrintIfNotEmpty(size_listener.str(), listener->stream());\par
2328       {\cf19 return} result;\par
2329     \}\par
2330 \par
2331    {\cf17 private}:\par
2332     {\cf17 const} Matcher<SizeType> size_matcher_;\par
2333   \};\par
2334 \par
2335  {\cf17 private}:\par
2336   {\cf17 const} SizeMatcher size_matcher_;\par
2337 \};\par
2338 \par
2339 {\cf20 // Implements a matcher that checks the begin()..end() distance of an STL-style}\par
2340 {\cf20 // container.}\par
2341 {\cf17 template} <{\cf17 typename} DistanceMatcher>\par
2342 {\cf17 class }BeginEndDistanceIsMatcher \{\par
2343  {\cf17 public}:\par
2344   {\cf17 explicit} BeginEndDistanceIsMatcher({\cf17 const} DistanceMatcher& distance_matcher)\par
2345       : distance_matcher_(distance_matcher) \{\}\par
2346 \par
2347   {\cf17 template} <{\cf17 typename} Container>\par
2348   {\cf17 operator} Matcher<Container>(){\cf17  const }\{\par
2349     {\cf19 return} Matcher<Container>({\cf17 new} Impl<const Container&>(distance_matcher_));\par
2350   \}\par
2351 \par
2352   {\cf17 template} <{\cf17 typename} Container>\par
2353   {\cf17 class }Impl : {\cf17 public} MatcherInterface<Container> \{\par
2354    {\cf17 public}:\par
2355     {\cf17 typedef} internal::StlContainerView<GTEST_REMOVE_REFERENCE_AND_CONST_(\par
2356         Container)>\par
2357         ContainerView;\par
2358     {\cf17 typedef} {\cf17 typename} std::iterator_traits<\par
2359         {\cf17 typename} ContainerView::type::const_iterator>::difference_type\par
2360         DistanceType;\par
2361     {\cf17 explicit} Impl({\cf17 const} DistanceMatcher& distance_matcher)\par
2362         : distance_matcher_(MatcherCast<DistanceType>(distance_matcher)) \{\}\par
2363 \par
2364     {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const override }\{\par
2365       *os << {\cf22 "distance between begin() and end() "};\par
2366       distance_matcher_.DescribeTo(os);\par
2367     \}\par
2368     {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const override }\{\par
2369       *os << {\cf22 "distance between begin() and end() "};\par
2370       distance_matcher_.DescribeNegationTo(os);\par
2371     \}\par
2372 \par
2373     {\cf18 bool} MatchAndExplain(Container container,\par
2374                          MatchResultListener* listener){\cf17  const override }\{\par
2375       {\cf17 using }std::begin;\par
2376       {\cf17 using }std::end;\par
2377       DistanceType distance = std::distance(begin(container), end(container));\par
2378       StringMatchResultListener distance_listener;\par
2379       {\cf17 const} {\cf18 bool} result =\par
2380           distance_matcher_.MatchAndExplain(distance, &distance_listener);\par
2381       *listener << {\cf22 "whose distance between begin() and end() "} << distance\par
2382                 << (result ? {\cf22 " matches"} : {\cf22 " doesn't match"});\par
2383       PrintIfNotEmpty(distance_listener.str(), listener->stream());\par
2384       {\cf19 return} result;\par
2385     \}\par
2386 \par
2387    {\cf17 private}:\par
2388     {\cf17 const} Matcher<DistanceType> distance_matcher_;\par
2389   \};\par
2390 \par
2391  {\cf17 private}:\par
2392   {\cf17 const} DistanceMatcher distance_matcher_;\par
2393 \};\par
2394 \par
2395 {\cf20 // Implements an equality matcher for any STL-style container whose elements}\par
2396 {\cf20 // support ==. This matcher is like Eq(), but its failure explanations provide}\par
2397 {\cf20 // more detailed information that is useful when the container is used as a set.}\par
2398 {\cf20 // The failure message reports elements that are in one of the operands but not}\par
2399 {\cf20 // the other. The failure messages do not report duplicate or out-of-order}\par
2400 {\cf20 // elements in the containers (which don't properly matter to sets, but can}\par
2401 {\cf20 // occur if the containers are vectors or lists, for example).}\par
2402 {\cf20 //}\par
2403 {\cf20 // Uses the container's const_iterator, value_type, operator ==,}\par
2404 {\cf20 // begin(), and end().}\par
2405 {\cf17 template} <{\cf17 typename} Container>\par
2406 {\cf17 class }ContainerEqMatcher \{\par
2407  {\cf17 public}:\par
2408   {\cf17 typedef} internal::StlContainerView<Container> View;\par
2409   {\cf17 typedef} {\cf17 typename} View::type StlContainer;\par
2410   {\cf17 typedef} {\cf17 typename} View::const_reference StlContainerReference;\par
2411 \par
2412   {\cf17 static_assert}(!std::is_const<Container>::value,\par
2413                 {\cf22 "Container type must not be const"});\par
2414   {\cf17 static_assert}(!std::is_reference<Container>::value,\par
2415                 {\cf22 "Container type must not be a reference"});\par
2416 \par
2417   {\cf20 // We make a copy of expected in case the elements in it are modified}\par
2418   {\cf20 // after this matcher is created.}\par
2419   {\cf17 explicit} ContainerEqMatcher({\cf17 const} Container& expected)\par
2420       : expected_(View::Copy(expected)) \{\}\par
2421 \par
2422   {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const }\{\par
2423     *os << {\cf22 "equals "};\par
2424     UniversalPrint(expected_, os);\par
2425   \}\par
2426   {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const }\{\par
2427     *os << {\cf22 "does not equal "};\par
2428     UniversalPrint(expected_, os);\par
2429   \}\par
2430 \par
2431   {\cf17 template} <{\cf17 typename} LhsContainer>\par
2432   {\cf18 bool} MatchAndExplain({\cf17 const} LhsContainer& lhs,\par
2433                        MatchResultListener* listener){\cf17  const }\{\par
2434     {\cf17 typedef} internal::StlContainerView<\par
2435         {\cf17 typename} std::remove_const<LhsContainer>::type>\par
2436         LhsView;\par
2437     StlContainerReference lhs_stl_container = LhsView::ConstReference(lhs);\par
2438     {\cf19 if} (lhs_stl_container == expected_) {\cf19 return} {\cf17 true};\par
2439 \par
2440     ::std::ostream* {\cf17 const} os = listener->stream();\par
2441     {\cf19 if} (os != {\cf17 nullptr}) \{\par
2442       {\cf20 // Something is different. Check for extra values first.}\par
2443       {\cf18 bool} printed_header = {\cf17 false};\par
2444       {\cf19 for} ({\cf17 auto} it = lhs_stl_container.begin(); it != lhs_stl_container.end();\par
2445            ++it) \{\par
2446         {\cf19 if} (internal::ArrayAwareFind(expected_.begin(), expected_.end(), *it) ==\par
2447             expected_.end()) \{\par
2448           {\cf19 if} (printed_header) \{\par
2449             *os << {\cf22 ", "};\par
2450           \} {\cf19 else} \{\par
2451             *os << {\cf22 "which has these unexpected elements: "};\par
2452             printed_header = {\cf17 true};\par
2453           \}\par
2454           UniversalPrint(*it, os);\par
2455         \}\par
2456       \}\par
2457 \par
2458       {\cf20 // Now check for missing values.}\par
2459       {\cf18 bool} printed_header2 = {\cf17 false};\par
2460       {\cf19 for} ({\cf17 auto} it = expected_.begin(); it != expected_.end(); ++it) \{\par
2461         {\cf19 if} (internal::ArrayAwareFind(lhs_stl_container.begin(),\par
2462                                      lhs_stl_container.end(),\par
2463                                      *it) == lhs_stl_container.end()) \{\par
2464           {\cf19 if} (printed_header2) \{\par
2465             *os << {\cf22 ", "};\par
2466           \} {\cf19 else} \{\par
2467             *os << (printed_header ? {\cf22 ",\\nand"} : {\cf22 "which"})\par
2468                 << {\cf22 " doesn't have these expected elements: "};\par
2469             printed_header2 = {\cf17 true};\par
2470           \}\par
2471           UniversalPrint(*it, os);\par
2472         \}\par
2473       \}\par
2474     \}\par
2475 \par
2476     {\cf19 return} {\cf17 false};\par
2477   \}\par
2478 \par
2479  {\cf17 private}:\par
2480   {\cf17 const} StlContainer expected_;\par
2481 \};\par
2482 \par
2483 {\cf20 // A comparator functor that uses the < operator to compare two values.}\par
2484 {\cf17 struct }LessComparator \{\par
2485   {\cf17 template} <{\cf17 typename} T, {\cf17 typename} U>\par
2486   {\cf18 bool} operator()({\cf17 const} T& lhs, {\cf17 const} U& rhs){\cf17  const }\{\par
2487     {\cf19 return} lhs < rhs;\par
2488   \}\par
2489 \};\par
2490 \par
2491 {\cf20 // Implements WhenSortedBy(comparator, container_matcher).}\par
2492 {\cf17 template} <{\cf17 typename} Comparator, {\cf17 typename} ContainerMatcher>\par
2493 {\cf17 class }WhenSortedByMatcher \{\par
2494  {\cf17 public}:\par
2495   WhenSortedByMatcher({\cf17 const} Comparator& comparator,\par
2496                       {\cf17 const} ContainerMatcher& matcher)\par
2497       : comparator_(comparator), matcher_(matcher) \{\}\par
2498 \par
2499   {\cf17 template} <{\cf17 typename} LhsContainer>\par
2500   {\cf17 operator} Matcher<LhsContainer>(){\cf17  const }\{\par
2501     {\cf19 return} MakeMatcher({\cf17 new} Impl<LhsContainer>(comparator_, matcher_));\par
2502   \}\par
2503 \par
2504   {\cf17 template} <{\cf17 typename} LhsContainer>\par
2505   {\cf17 class }Impl : {\cf17 public} MatcherInterface<LhsContainer> \{\par
2506    {\cf17 public}:\par
2507     {\cf17 typedef} internal::StlContainerView<GTEST_REMOVE_REFERENCE_AND_CONST_(\par
2508         LhsContainer)>\par
2509         LhsView;\par
2510     {\cf17 typedef} {\cf17 typename} LhsView::type LhsStlContainer;\par
2511     {\cf17 typedef} {\cf17 typename} LhsView::const_reference LhsStlContainerReference;\par
2512     {\cf20 // Transforms std::pair<const Key, Value> into std::pair<Key, Value>}\par
2513     {\cf20 // so that we can match associative containers.}\par
2514     {\cf17 typedef}\par
2515         {\cf17 typename} RemoveConstFromKey<typename LhsStlContainer::value_type>::type\par
2516             LhsValue;\par
2517 \par
2518     Impl({\cf17 const} Comparator& comparator, {\cf17 const} ContainerMatcher& matcher)\par
2519         : comparator_(comparator), matcher_(matcher) \{\}\par
2520 \par
2521     {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const override }\{\par
2522       *os << {\cf22 "(when sorted) "};\par
2523       matcher_.DescribeTo(os);\par
2524     \}\par
2525 \par
2526     {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const override }\{\par
2527       *os << {\cf22 "(when sorted) "};\par
2528       matcher_.DescribeNegationTo(os);\par
2529     \}\par
2530 \par
2531     {\cf18 bool} MatchAndExplain(LhsContainer lhs,\par
2532                          MatchResultListener* listener){\cf17  const override }\{\par
2533       LhsStlContainerReference lhs_stl_container = LhsView::ConstReference(lhs);\par
2534       ::std::vector<LhsValue> sorted_container(lhs_stl_container.begin(),\par
2535                                                lhs_stl_container.end());\par
2536       ::std::sort(sorted_container.begin(), sorted_container.end(),\par
2537                   comparator_);\par
2538 \par
2539       {\cf19 if} (!listener->IsInterested()) \{\par
2540         {\cf20 // If the listener is not interested, we do not need to}\par
2541         {\cf20 // construct the inner explanation.}\par
2542         {\cf19 return} matcher_.Matches(sorted_container);\par
2543       \}\par
2544 \par
2545       *listener << {\cf22 "which is "};\par
2546       UniversalPrint(sorted_container, listener->stream());\par
2547       *listener << {\cf22 " when sorted"};\par
2548 \par
2549       StringMatchResultListener inner_listener;\par
2550       {\cf17 const} {\cf18 bool} match =\par
2551           matcher_.MatchAndExplain(sorted_container, &inner_listener);\par
2552       PrintIfNotEmpty(inner_listener.str(), listener->stream());\par
2553       {\cf19 return} match;\par
2554     \}\par
2555 \par
2556    {\cf17 private}:\par
2557     {\cf17 const} Comparator comparator_;\par
2558     {\cf17 const} Matcher<const ::std::vector<LhsValue>&> matcher_;\par
2559 \par
2560     Impl({\cf17 const} Impl&) = {\cf17 delete};\par
2561     Impl& operator=({\cf17 const} Impl&) = {\cf17 delete};\par
2562   \};\par
2563 \par
2564  {\cf17 private}:\par
2565   {\cf17 const} Comparator comparator_;\par
2566   {\cf17 const} ContainerMatcher matcher_;\par
2567 \};\par
2568 \par
2569 {\cf20 // Implements Pointwise(tuple_matcher, rhs_container).  tuple_matcher}\par
2570 {\cf20 // must be able to be safely cast to Matcher<std::tuple<const T1&, const}\par
2571 {\cf20 // T2&> >, where T1 and T2 are the types of elements in the LHS}\par
2572 {\cf20 // container and the RHS container respectively.}\par
2573 {\cf17 template} <{\cf17 typename} TupleMatcher, {\cf17 typename} RhsContainer>\par
2574 {\cf17 class }PointwiseMatcher \{\par
2575   {\cf17 static_assert}(\par
2576       !IsHashTable<GTEST_REMOVE_REFERENCE_AND_CONST_(RhsContainer)>::value,\par
2577       {\cf22 "use UnorderedPointwise with hash tables"});\par
2578 \par
2579  {\cf17 public}:\par
2580   {\cf17 typedef} internal::StlContainerView<RhsContainer> RhsView;\par
2581   {\cf17 typedef} {\cf17 typename} RhsView::type RhsStlContainer;\par
2582   {\cf17 typedef} {\cf17 typename} RhsStlContainer::value_type RhsValue;\par
2583 \par
2584   {\cf17 static_assert}(!std::is_const<RhsContainer>::value,\par
2585                 {\cf22 "RhsContainer type must not be const"});\par
2586   {\cf17 static_assert}(!std::is_reference<RhsContainer>::value,\par
2587                 {\cf22 "RhsContainer type must not be a reference"});\par
2588 \par
2589   {\cf20 // Like ContainerEq, we make a copy of rhs in case the elements in}\par
2590   {\cf20 // it are modified after this matcher is created.}\par
2591   PointwiseMatcher({\cf17 const} TupleMatcher& tuple_matcher, {\cf17 const} RhsContainer& rhs)\par
2592       : tuple_matcher_(tuple_matcher), rhs_(RhsView::Copy(rhs)) \{\}\par
2593 \par
2594   {\cf17 template} <{\cf17 typename} LhsContainer>\par
2595   {\cf17 operator} Matcher<LhsContainer>(){\cf17  const }\{\par
2596     {\cf17 static_assert}(\par
2597         !IsHashTable<GTEST_REMOVE_REFERENCE_AND_CONST_(LhsContainer)>::value,\par
2598         {\cf22 "use UnorderedPointwise with hash tables"});\par
2599 \par
2600     {\cf19 return} Matcher<LhsContainer>(\par
2601         {\cf17 new} Impl<const LhsContainer&>(tuple_matcher_, rhs_));\par
2602   \}\par
2603 \par
2604   {\cf17 template} <{\cf17 typename} LhsContainer>\par
2605   {\cf17 class }Impl : {\cf17 public} MatcherInterface<LhsContainer> \{\par
2606    {\cf17 public}:\par
2607     {\cf17 typedef} internal::StlContainerView<GTEST_REMOVE_REFERENCE_AND_CONST_(\par
2608         LhsContainer)>\par
2609         LhsView;\par
2610     {\cf17 typedef} {\cf17 typename} LhsView::type LhsStlContainer;\par
2611     {\cf17 typedef} {\cf17 typename} LhsView::const_reference LhsStlContainerReference;\par
2612     {\cf17 typedef} {\cf17 typename} LhsStlContainer::value_type LhsValue;\par
2613     {\cf20 // We pass the LHS value and the RHS value to the inner matcher by}\par
2614     {\cf20 // reference, as they may be expensive to copy.  We must use tuple}\par
2615     {\cf20 // instead of pair here, as a pair cannot hold references (C++ 98,}\par
2616     {\cf20 // 20.2.2 [lib.pairs]).}\par
2617     typedef ::std::tuple<const LhsValue&, const RhsValue&> InnerMatcherArg;\par
2618 \par
2619     Impl({\cf17 const} TupleMatcher& tuple_matcher, {\cf17 const} RhsStlContainer& rhs)\par
2620         {\cf20 // mono_tuple_matcher_ holds a monomorphic version of the tuple matcher.}\par
2621         : mono_tuple_matcher_(SafeMatcherCast<InnerMatcherArg>(tuple_matcher)),\par
2622           rhs_(rhs) \{\}\par
2623 \par
2624     {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const override }\{\par
2625       *os << {\cf22 "contains "} << rhs_.size()\par
2626           << {\cf22 " values, where each value and its corresponding value in "};\par
2627       UniversalPrinter<RhsStlContainer>::Print(rhs_, os);\par
2628       *os << {\cf22 " "};\par
2629       mono_tuple_matcher_.DescribeTo(os);\par
2630     \}\par
2631     {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const override }\{\par
2632       *os << {\cf22 "doesn't contain exactly "} << rhs_.size()\par
2633           << {\cf22 " values, or contains a value x at some index i"}\par
2634           << {\cf22 " where x and the i-th value of "};\par
2635       UniversalPrint(rhs_, os);\par
2636       *os << {\cf22 " "};\par
2637       mono_tuple_matcher_.DescribeNegationTo(os);\par
2638     \}\par
2639 \par
2640     {\cf18 bool} MatchAndExplain(LhsContainer lhs,\par
2641                          MatchResultListener* listener){\cf17  const override }\{\par
2642       LhsStlContainerReference lhs_stl_container = LhsView::ConstReference(lhs);\par
2643       {\cf17 const} {\cf18 size_t} actual_size = lhs_stl_container.size();\par
2644       {\cf19 if} (actual_size != rhs_.size()) \{\par
2645         *listener << {\cf22 "which contains "} << actual_size << {\cf22 " values"};\par
2646         {\cf19 return} {\cf17 false};\par
2647       \}\par
2648 \par
2649       {\cf17 auto} left = lhs_stl_container.begin();\par
2650       {\cf17 auto} right = rhs_.begin();\par
2651       {\cf19 for} ({\cf18 size_t} i = 0; i != actual_size; ++i, ++left, ++right) \{\par
2652         {\cf19 if} (listener->IsInterested()) \{\par
2653           StringMatchResultListener inner_listener;\par
2654           {\cf20 // Create InnerMatcherArg as a temporarily object to avoid it outlives}\par
2655           {\cf20 // *left and *right. Dereference or the conversion to `const T&` may}\par
2656           {\cf20 // return temp objects, e.g. for vector<bool>.}\par
2657           {\cf19 if} (!mono_tuple_matcher_.MatchAndExplain(\par
2658                   InnerMatcherArg(ImplicitCast_<const LhsValue&>(*left),\par
2659                                   ImplicitCast_<const RhsValue&>(*right)),\par
2660                   &inner_listener)) \{\par
2661             *listener << {\cf22 "where the value pair ("};\par
2662             UniversalPrint(*left, listener->stream());\par
2663             *listener << {\cf22 ", "};\par
2664             UniversalPrint(*right, listener->stream());\par
2665             *listener << {\cf22 ") at index #"} << i << {\cf22 " don't match"};\par
2666             PrintIfNotEmpty(inner_listener.str(), listener->stream());\par
2667             {\cf19 return} {\cf17 false};\par
2668           \}\par
2669         \} {\cf19 else} \{\par
2670           {\cf19 if} (!mono_tuple_matcher_.Matches(\par
2671                   InnerMatcherArg(ImplicitCast_<const LhsValue&>(*left),\par
2672                                   ImplicitCast_<const RhsValue&>(*right))))\par
2673             {\cf19 return} {\cf17 false};\par
2674         \}\par
2675       \}\par
2676 \par
2677       {\cf19 return} {\cf17 true};\par
2678     \}\par
2679 \par
2680    {\cf17 private}:\par
2681     {\cf17 const} Matcher<InnerMatcherArg> mono_tuple_matcher_;\par
2682     {\cf17 const} RhsStlContainer rhs_;\par
2683   \};\par
2684 \par
2685  {\cf17 private}:\par
2686   {\cf17 const} TupleMatcher tuple_matcher_;\par
2687   {\cf17 const} RhsStlContainer rhs_;\par
2688 \};\par
2689 \par
2690 {\cf20 // Holds the logic common to ContainsMatcherImpl and EachMatcherImpl.}\par
2691 {\cf17 template} <{\cf17 typename} Container>\par
2692 {\cf17 class }QuantifierMatcherImpl : {\cf17 public} MatcherInterface<Container> \{\par
2693  {\cf17 public}:\par
2694   {\cf17 typedef} GTEST_REMOVE_REFERENCE_AND_CONST_(Container) RawContainer;\par
2695   {\cf17 typedef} StlContainerView<RawContainer> View;\par
2696   {\cf17 typedef} {\cf17 typename} View::type StlContainer;\par
2697   {\cf17 typedef} {\cf17 typename} View::const_reference StlContainerReference;\par
2698   {\cf17 typedef} {\cf17 typename} StlContainer::value_type Element;\par
2699 \par
2700   {\cf17 template} <{\cf17 typename} InnerMatcher>\par
2701   {\cf17 explicit} QuantifierMatcherImpl(InnerMatcher inner_matcher)\par
2702       : inner_matcher_(\par
2703             testing::SafeMatcherCast<const Element&>(inner_matcher)) \{\}\par
2704 \par
2705   {\cf20 // Checks whether:}\par
2706   {\cf20 // * All elements in the container match, if all_elements_should_match.}\par
2707   {\cf20 // * Any element in the container matches, if !all_elements_should_match.}\par
2708   {\cf18 bool} MatchAndExplainImpl({\cf18 bool} all_elements_should_match, Container container,\par
2709                            MatchResultListener* listener){\cf17  const }\{\par
2710     StlContainerReference stl_container = View::ConstReference(container);\par
2711     {\cf18 size_t} i = 0;\par
2712     {\cf19 for} ({\cf17 auto} it = stl_container.begin(); it != stl_container.end();\par
2713          ++it, ++i) \{\par
2714       StringMatchResultListener inner_listener;\par
2715       {\cf17 const} {\cf18 bool} matches = inner_matcher_.MatchAndExplain(*it, &inner_listener);\par
2716 \par
2717       {\cf19 if} (matches != all_elements_should_match) \{\par
2718         *listener << {\cf22 "whose element #"} << i\par
2719                   << (matches ? {\cf22 " matches"} : {\cf22 " doesn't match"});\par
2720         PrintIfNotEmpty(inner_listener.str(), listener->stream());\par
2721         {\cf19 return} !all_elements_should_match;\par
2722       \}\par
2723     \}\par
2724     {\cf19 return} all_elements_should_match;\par
2725   \}\par
2726 \par
2727   {\cf18 bool} MatchAndExplainImpl({\cf17 const} Matcher<size_t>& count_matcher,\par
2728                            Container container,\par
2729                            MatchResultListener* listener){\cf17  const }\{\par
2730     StlContainerReference stl_container = View::ConstReference(container);\par
2731     {\cf18 size_t} i = 0;\par
2732     std::vector<size_t> match_elements;\par
2733     {\cf19 for} ({\cf17 auto} it = stl_container.begin(); it != stl_container.end();\par
2734          ++it, ++i) \{\par
2735       StringMatchResultListener inner_listener;\par
2736       {\cf17 const} {\cf18 bool} matches = inner_matcher_.MatchAndExplain(*it, &inner_listener);\par
2737       {\cf19 if} (matches) \{\par
2738         match_elements.push_back(i);\par
2739       \}\par
2740     \}\par
2741     {\cf19 if} (listener->IsInterested()) \{\par
2742       {\cf19 if} (match_elements.empty()) \{\par
2743         *listener << {\cf22 "has no element that matches"};\par
2744       \} {\cf19 else} {\cf19 if} (match_elements.size() == 1) \{\par
2745         *listener << {\cf22 "whose element #"} << match_elements[0] << {\cf22 " matches"};\par
2746       \} {\cf19 else} \{\par
2747         *listener << {\cf22 "whose elements ("};\par
2748         std::string sep = {\cf22 ""};\par
2749         {\cf19 for} ({\cf18 size_t} e : match_elements) \{\par
2750           *listener << sep << e;\par
2751           sep = {\cf22 ", "};\par
2752         \}\par
2753         *listener << {\cf22 ") match"};\par
2754       \}\par
2755     \}\par
2756     StringMatchResultListener count_listener;\par
2757     {\cf19 if} (count_matcher.MatchAndExplain(match_elements.size(), &count_listener)) \{\par
2758       *listener << {\cf22 " and whose match quantity of "} << match_elements.size()\par
2759                 << {\cf22 " matches"};\par
2760       PrintIfNotEmpty(count_listener.str(), listener->stream());\par
2761       {\cf19 return} {\cf17 true};\par
2762     \} {\cf19 else} \{\par
2763       {\cf19 if} (match_elements.empty()) \{\par
2764         *listener << {\cf22 " and"};\par
2765       \} {\cf19 else} \{\par
2766         *listener << {\cf22 " but"};\par
2767       \}\par
2768       *listener << {\cf22 " whose match quantity of "} << match_elements.size()\par
2769                 << {\cf22 " does not match"};\par
2770       PrintIfNotEmpty(count_listener.str(), listener->stream());\par
2771       {\cf19 return} {\cf17 false};\par
2772     \}\par
2773   \}\par
2774 \par
2775  {\cf17 protected}:\par
2776   {\cf17 const} Matcher<const Element&> inner_matcher_;\par
2777 \};\par
2778 \par
2779 {\cf20 // Implements Contains(element_matcher) for the given argument type Container.}\par
2780 {\cf20 // Symmetric to EachMatcherImpl.}\par
2781 {\cf17 template} <{\cf17 typename} Container>\par
2782 {\cf17 class }ContainsMatcherImpl : {\cf17 public} QuantifierMatcherImpl<Container> \{\par
2783  {\cf17 public}:\par
2784   {\cf17 template} <{\cf17 typename} InnerMatcher>\par
2785   {\cf17 explicit} ContainsMatcherImpl(InnerMatcher inner_matcher)\par
2786       : QuantifierMatcherImpl<Container>(inner_matcher) \{\}\par
2787 \par
2788   {\cf20 // Describes what this matcher does.}\par
2789   {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const override }\{\par
2790     *os << {\cf22 "contains at least one element that "};\par
2791     this->inner_matcher_.DescribeTo(os);\par
2792   \}\par
2793 \par
2794   {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const override }\{\par
2795     *os << {\cf22 "doesn't contain any element that "};\par
2796     this->inner_matcher_.DescribeTo(os);\par
2797   \}\par
2798 \par
2799   {\cf18 bool} MatchAndExplain(Container container,\par
2800                        MatchResultListener* listener){\cf17  const override }\{\par
2801     {\cf19 return} this->MatchAndExplainImpl({\cf17 false}, container, listener);\par
2802   \}\par
2803 \};\par
2804 \par
2805 {\cf20 // Implements Each(element_matcher) for the given argument type Container.}\par
2806 {\cf20 // Symmetric to ContainsMatcherImpl.}\par
2807 {\cf17 template} <{\cf17 typename} Container>\par
2808 {\cf17 class }EachMatcherImpl : {\cf17 public} QuantifierMatcherImpl<Container> \{\par
2809  {\cf17 public}:\par
2810   {\cf17 template} <{\cf17 typename} InnerMatcher>\par
2811   {\cf17 explicit} EachMatcherImpl(InnerMatcher inner_matcher)\par
2812       : QuantifierMatcherImpl<Container>(inner_matcher) \{\}\par
2813 \par
2814   {\cf20 // Describes what this matcher does.}\par
2815   {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const override }\{\par
2816     *os << {\cf22 "only contains elements that "};\par
2817     this->inner_matcher_.DescribeTo(os);\par
2818   \}\par
2819 \par
2820   {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const override }\{\par
2821     *os << {\cf22 "contains some element that "};\par
2822     this->inner_matcher_.DescribeNegationTo(os);\par
2823   \}\par
2824 \par
2825   {\cf18 bool} MatchAndExplain(Container container,\par
2826                        MatchResultListener* listener){\cf17  const override }\{\par
2827     {\cf19 return} this->MatchAndExplainImpl({\cf17 true}, container, listener);\par
2828   \}\par
2829 \};\par
2830 \par
2831 {\cf20 // Implements Contains(element_matcher).Times(n) for the given argument type}\par
2832 {\cf20 // Container.}\par
2833 {\cf17 template} <{\cf17 typename} Container>\par
2834 {\cf17 class }ContainsTimesMatcherImpl : {\cf17 public} QuantifierMatcherImpl<Container> \{\par
2835  {\cf17 public}:\par
2836   {\cf17 template} <{\cf17 typename} InnerMatcher>\par
2837   {\cf17 explicit} ContainsTimesMatcherImpl(InnerMatcher inner_matcher,\par
2838                                     Matcher<size_t> count_matcher)\par
2839       : QuantifierMatcherImpl<Container>(inner_matcher),\par
2840         count_matcher_(std::move(count_matcher)) \{\}\par
2841 \par
2842   {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const override }\{\par
2843     *os << {\cf22 "quantity of elements that match "};\par
2844     this->inner_matcher_.DescribeTo(os);\par
2845     *os << {\cf22 " "};\par
2846     count_matcher_.DescribeTo(os);\par
2847   \}\par
2848 \par
2849   {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const override }\{\par
2850     *os << {\cf22 "quantity of elements that match "};\par
2851     this->inner_matcher_.DescribeTo(os);\par
2852     *os << {\cf22 " "};\par
2853     count_matcher_.DescribeNegationTo(os);\par
2854   \}\par
2855 \par
2856   {\cf18 bool} MatchAndExplain(Container container,\par
2857                        MatchResultListener* listener){\cf17  const override }\{\par
2858     {\cf19 return} this->MatchAndExplainImpl(count_matcher_, container, listener);\par
2859   \}\par
2860 \par
2861  {\cf17 private}:\par
2862   {\cf17 const} Matcher<size_t> count_matcher_;\par
2863 \};\par
2864 \par
2865 {\cf20 // Implements polymorphic Contains(element_matcher).Times(n).}\par
2866 {\cf17 template} <{\cf17 typename} M>\par
2867 {\cf17 class }ContainsTimesMatcher \{\par
2868  {\cf17 public}:\par
2869   {\cf17 explicit} ContainsTimesMatcher(M m, Matcher<size_t> count_matcher)\par
2870       : inner_matcher_(m), count_matcher_(std::move(count_matcher)) \{\}\par
2871 \par
2872   {\cf17 template} <{\cf17 typename} Container>\par
2873   {\cf17 operator} Matcher<Container>(){\cf17  const }\{  {\cf20 // NOLINT}\par
2874     {\cf19 return} Matcher<Container>({\cf17 new} ContainsTimesMatcherImpl<const Container&>(\par
2875         inner_matcher_, count_matcher_));\par
2876   \}\par
2877 \par
2878  {\cf17 private}:\par
2879   {\cf17 const} M inner_matcher_;\par
2880   {\cf17 const} Matcher<size_t> count_matcher_;\par
2881 \};\par
2882 \par
2883 {\cf20 // Implements polymorphic Contains(element_matcher).}\par
2884 {\cf17 template} <{\cf17 typename} M>\par
2885 {\cf17 class }ContainsMatcher \{\par
2886  {\cf17 public}:\par
2887   {\cf17 explicit} ContainsMatcher(M m) : inner_matcher_(m) \{\}\par
2888 \par
2889   {\cf17 template} <{\cf17 typename} Container>\par
2890   {\cf17 operator} Matcher<Container>(){\cf17  const }\{  {\cf20 // NOLINT}\par
2891     {\cf19 return} Matcher<Container>(\par
2892         {\cf17 new} ContainsMatcherImpl<const Container&>(inner_matcher_));\par
2893   \}\par
2894 \par
2895   ContainsTimesMatcher<M> Times(Matcher<size_t> count_matcher){\cf17  const }\{\par
2896     {\cf19 return} ContainsTimesMatcher<M>(inner_matcher_, std::move(count_matcher));\par
2897   \}\par
2898 \par
2899  {\cf17 private}:\par
2900   {\cf17 const} M inner_matcher_;\par
2901 \};\par
2902 \par
2903 {\cf20 // Implements polymorphic Each(element_matcher).}\par
2904 {\cf17 template} <{\cf17 typename} M>\par
2905 {\cf17 class }EachMatcher \{\par
2906  {\cf17 public}:\par
2907   {\cf17 explicit} EachMatcher(M m) : inner_matcher_(m) \{\}\par
2908 \par
2909   {\cf17 template} <{\cf17 typename} Container>\par
2910   {\cf17 operator} Matcher<Container>(){\cf17  const }\{  {\cf20 // NOLINT}\par
2911     {\cf19 return} Matcher<Container>(\par
2912         {\cf17 new} EachMatcherImpl<const Container&>(inner_matcher_));\par
2913   \}\par
2914 \par
2915  {\cf17 private}:\par
2916   {\cf17 const} M inner_matcher_;\par
2917 \};\par
2918 \par
2919 {\cf17 struct }Rank1 \{\};\par
2920 {\cf17 struct }Rank0 : Rank1 \{\};\par
2921 \par
2922 {\cf17 namespace }pair_getters \{\par
2923 {\cf17 using }std::get;\par
2924 {\cf17 template} <{\cf17 typename} T>\par
2925 {\cf17 auto} First(T& x, Rank1) -> {\cf17 decltype}(get<0>(x)) \{  {\cf20 // NOLINT}\par
2926   {\cf19 return} get<0>(x);\par
2927 \}\par
2928 {\cf17 template} <{\cf17 typename} T>\par
2929 {\cf17 auto} First(T& x, Rank0) -> {\cf17 decltype}((x.first)) \{  {\cf20 // NOLINT}\par
2930   {\cf19 return} x.first;\par
2931 \}\par
2932 \par
2933 {\cf17 template} <{\cf17 typename} T>\par
2934 {\cf17 auto} Second(T& x, Rank1) -> {\cf17 decltype}(get<1>(x)) \{  {\cf20 // NOLINT}\par
2935   {\cf19 return} get<1>(x);\par
2936 \}\par
2937 {\cf17 template} <{\cf17 typename} T>\par
2938 {\cf17 auto} Second(T& x, Rank0) -> {\cf17 decltype}((x.second)) \{  {\cf20 // NOLINT}\par
2939   {\cf19 return} x.second;\par
2940 \}\par
2941 \}  {\cf20 // namespace pair_getters}\par
2942 \par
2943 {\cf20 // Implements Key(inner_matcher) for the given argument pair type.}\par
2944 {\cf20 // Key(inner_matcher) matches an std::pair whose 'first' field matches}\par
2945 {\cf20 // inner_matcher.  For example, Contains(Key(Ge(5))) can be used to match an}\par
2946 {\cf20 // std::map that contains at least one element whose key is >= 5.}\par
2947 {\cf17 template} <{\cf17 typename} PairType>\par
2948 {\cf17 class }KeyMatcherImpl : {\cf17 public} MatcherInterface<PairType> \{\par
2949  {\cf17 public}:\par
2950   {\cf17 typedef} GTEST_REMOVE_REFERENCE_AND_CONST_(PairType) RawPairType;\par
2951   {\cf17 typedef} {\cf17 typename} RawPairType::first_type KeyType;\par
2952 \par
2953   {\cf17 template} <{\cf17 typename} InnerMatcher>\par
2954   {\cf17 explicit} KeyMatcherImpl(InnerMatcher inner_matcher)\par
2955       : inner_matcher_(\par
2956             testing::SafeMatcherCast<const KeyType&>(inner_matcher)) \{\}\par
2957 \par
2958   {\cf20 // Returns true if and only if 'key_value.first' (the key) matches the inner}\par
2959   {\cf20 // matcher.}\par
2960   {\cf18 bool} MatchAndExplain(PairType key_value,\par
2961                        MatchResultListener* listener){\cf17  const override }\{\par
2962     StringMatchResultListener inner_listener;\par
2963     {\cf17 const} {\cf18 bool} match = inner_matcher_.MatchAndExplain(\par
2964         pair_getters::First(key_value, Rank0()), &inner_listener);\par
2965     {\cf17 const} std::string explanation = inner_listener.str();\par
2966     {\cf19 if} (explanation != {\cf22 ""}) \{\par
2967       *listener << {\cf22 "whose first field is a value "} << explanation;\par
2968     \}\par
2969     {\cf19 return} match;\par
2970   \}\par
2971 \par
2972   {\cf20 // Describes what this matcher does.}\par
2973   {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const override }\{\par
2974     *os << {\cf22 "has a key that "};\par
2975     inner_matcher_.DescribeTo(os);\par
2976   \}\par
2977 \par
2978   {\cf20 // Describes what the negation of this matcher does.}\par
2979   {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const override }\{\par
2980     *os << {\cf22 "doesn't have a key that "};\par
2981     inner_matcher_.DescribeTo(os);\par
2982   \}\par
2983 \par
2984  {\cf17 private}:\par
2985   {\cf17 const} Matcher<const KeyType&> inner_matcher_;\par
2986 \};\par
2987 \par
2988 {\cf20 // Implements polymorphic Key(matcher_for_key).}\par
2989 {\cf17 template} <{\cf17 typename} M>\par
2990 {\cf17 class }KeyMatcher \{\par
2991  {\cf17 public}:\par
2992   {\cf17 explicit} KeyMatcher(M m) : matcher_for_key_(m) \{\}\par
2993 \par
2994   {\cf17 template} <{\cf17 typename} PairType>\par
2995   {\cf17 operator} Matcher<PairType>(){\cf17  const }\{\par
2996     {\cf19 return} Matcher<PairType>(\par
2997         {\cf17 new} KeyMatcherImpl<const PairType&>(matcher_for_key_));\par
2998   \}\par
2999 \par
3000  {\cf17 private}:\par
3001   {\cf17 const} M matcher_for_key_;\par
3002 \};\par
3003 \par
3004 {\cf20 // Implements polymorphic Address(matcher_for_address).}\par
3005 {\cf17 template} <{\cf17 typename} InnerMatcher>\par
3006 {\cf17 class }AddressMatcher \{\par
3007  {\cf17 public}:\par
3008   {\cf17 explicit} AddressMatcher(InnerMatcher m) : matcher_(m) \{\}\par
3009 \par
3010   {\cf17 template} <{\cf17 typename} Type>\par
3011   {\cf17 operator} Matcher<Type>(){\cf17  const }\{  {\cf20 // NOLINT}\par
3012     {\cf19 return} Matcher<Type>({\cf17 new} Impl<const Type&>(matcher_));\par
3013   \}\par
3014 \par
3015  {\cf17 private}:\par
3016   {\cf20 // The monomorphic implementation that works for a particular object type.}\par
3017   {\cf17 template} <{\cf17 typename} Type>\par
3018   {\cf17 class }Impl : {\cf17 public} MatcherInterface<Type> \{\par
3019    {\cf17 public}:\par
3020     {\cf17 using }Address = {\cf17 const} GTEST_REMOVE_REFERENCE_AND_CONST_(Type) *;\par
3021     {\cf17 explicit} Impl({\cf17 const} InnerMatcher& matcher)\par
3022         : matcher_(MatcherCast<Address>(matcher)) \{\}\par
3023 \par
3024     {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const override }\{\par
3025       *os << {\cf22 "has address that "};\par
3026       matcher_.DescribeTo(os);\par
3027     \}\par
3028 \par
3029     {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const override }\{\par
3030       *os << {\cf22 "does not have address that "};\par
3031       matcher_.DescribeTo(os);\par
3032     \}\par
3033 \par
3034     {\cf18 bool} MatchAndExplain(Type {\cf18 object},\par
3035                          MatchResultListener* listener){\cf17  const override }\{\par
3036       *listener << {\cf22 "which has address "};\par
3037       Address address = std::addressof({\cf18 object});\par
3038       {\cf19 return} MatchPrintAndExplain(address, matcher_, listener);\par
3039     \}\par
3040 \par
3041    {\cf17 private}:\par
3042     {\cf17 const} Matcher<Address> matcher_;\par
3043   \};\par
3044   {\cf17 const} InnerMatcher matcher_;\par
3045 \};\par
3046 \par
3047 {\cf20 // Implements Pair(first_matcher, second_matcher) for the given argument pair}\par
3048 {\cf20 // type with its two matchers. See Pair() function below.}\par
3049 {\cf17 template} <{\cf17 typename} PairType>\par
3050 {\cf17 class }PairMatcherImpl : {\cf17 public} MatcherInterface<PairType> \{\par
3051  {\cf17 public}:\par
3052   {\cf17 typedef} GTEST_REMOVE_REFERENCE_AND_CONST_(PairType) RawPairType;\par
3053   {\cf17 typedef} {\cf17 typename} RawPairType::first_type FirstType;\par
3054   {\cf17 typedef} {\cf17 typename} RawPairType::second_type SecondType;\par
3055 \par
3056   {\cf17 template} <{\cf17 typename} FirstMatcher, {\cf17 typename} SecondMatcher>\par
3057   PairMatcherImpl(FirstMatcher first_matcher, SecondMatcher second_matcher)\par
3058       : first_matcher_(\par
3059             testing::SafeMatcherCast<const FirstType&>(first_matcher)),\par
3060         second_matcher_(\par
3061             testing::SafeMatcherCast<const SecondType&>(second_matcher)) \{\}\par
3062 \par
3063   {\cf20 // Describes what this matcher does.}\par
3064   {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const override }\{\par
3065     *os << {\cf22 "has a first field that "};\par
3066     first_matcher_.DescribeTo(os);\par
3067     *os << {\cf22 ", and has a second field that "};\par
3068     second_matcher_.DescribeTo(os);\par
3069   \}\par
3070 \par
3071   {\cf20 // Describes what the negation of this matcher does.}\par
3072   {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const override }\{\par
3073     *os << {\cf22 "has a first field that "};\par
3074     first_matcher_.DescribeNegationTo(os);\par
3075     *os << {\cf22 ", or has a second field that "};\par
3076     second_matcher_.DescribeNegationTo(os);\par
3077   \}\par
3078 \par
3079   {\cf20 // Returns true if and only if 'a_pair.first' matches first_matcher and}\par
3080   {\cf20 // 'a_pair.second' matches second_matcher.}\par
3081   {\cf18 bool} MatchAndExplain(PairType a_pair,\par
3082                        MatchResultListener* listener){\cf17  const override }\{\par
3083     {\cf19 if} (!listener->IsInterested()) \{\par
3084       {\cf20 // If the listener is not interested, we don't need to construct the}\par
3085       {\cf20 // explanation.}\par
3086       {\cf19 return} first_matcher_.Matches(pair_getters::First(a_pair, Rank0())) &&\par
3087              second_matcher_.Matches(pair_getters::Second(a_pair, Rank0()));\par
3088     \}\par
3089     StringMatchResultListener first_inner_listener;\par
3090     {\cf19 if} (!first_matcher_.MatchAndExplain(pair_getters::First(a_pair, Rank0()),\par
3091                                         &first_inner_listener)) \{\par
3092       *listener << {\cf22 "whose first field does not match"};\par
3093       PrintIfNotEmpty(first_inner_listener.str(), listener->stream());\par
3094       {\cf19 return} {\cf17 false};\par
3095     \}\par
3096     StringMatchResultListener second_inner_listener;\par
3097     {\cf19 if} (!second_matcher_.MatchAndExplain(pair_getters::Second(a_pair, Rank0()),\par
3098                                          &second_inner_listener)) \{\par
3099       *listener << {\cf22 "whose second field does not match"};\par
3100       PrintIfNotEmpty(second_inner_listener.str(), listener->stream());\par
3101       {\cf19 return} {\cf17 false};\par
3102     \}\par
3103     ExplainSuccess(first_inner_listener.str(), second_inner_listener.str(),\par
3104                    listener);\par
3105     {\cf19 return} {\cf17 true};\par
3106   \}\par
3107 \par
3108  {\cf17 private}:\par
3109   {\cf18 void} ExplainSuccess({\cf17 const} std::string& first_explanation,\par
3110                       {\cf17 const} std::string& second_explanation,\par
3111                       MatchResultListener* listener){\cf17  const }\{\par
3112     *listener << {\cf22 "whose both fields match"};\par
3113     {\cf19 if} (first_explanation != {\cf22 ""}) \{\par
3114       *listener << {\cf22 ", where the first field is a value "} << first_explanation;\par
3115     \}\par
3116     {\cf19 if} (second_explanation != {\cf22 ""}) \{\par
3117       *listener << {\cf22 ", "};\par
3118       {\cf19 if} (first_explanation != {\cf22 ""}) \{\par
3119         *listener << {\cf22 "and "};\par
3120       \} {\cf19 else} \{\par
3121         *listener << {\cf22 "where "};\par
3122       \}\par
3123       *listener << {\cf22 "the second field is a value "} << second_explanation;\par
3124     \}\par
3125   \}\par
3126 \par
3127   {\cf17 const} Matcher<const FirstType&> first_matcher_;\par
3128   {\cf17 const} Matcher<const SecondType&> second_matcher_;\par
3129 \};\par
3130 \par
3131 {\cf20 // Implements polymorphic Pair(first_matcher, second_matcher).}\par
3132 {\cf17 template} <{\cf17 typename} FirstMatcher, {\cf17 typename} SecondMatcher>\par
3133 {\cf17 class }PairMatcher \{\par
3134  {\cf17 public}:\par
3135   PairMatcher(FirstMatcher first_matcher, SecondMatcher second_matcher)\par
3136       : first_matcher_(first_matcher), second_matcher_(second_matcher) \{\}\par
3137 \par
3138   {\cf17 template} <{\cf17 typename} PairType>\par
3139   {\cf17 operator} Matcher<PairType>(){\cf17  const }\{\par
3140     {\cf19 return} Matcher<PairType>(\par
3141         {\cf17 new} PairMatcherImpl<const PairType&>(first_matcher_, second_matcher_));\par
3142   \}\par
3143 \par
3144  {\cf17 private}:\par
3145   {\cf17 const} FirstMatcher first_matcher_;\par
3146   {\cf17 const} SecondMatcher second_matcher_;\par
3147 \};\par
3148 \par
3149 {\cf17 template} <{\cf17 typename} T, {\cf18 size_t}... I>\par
3150 {\cf17 auto} UnpackStructImpl({\cf17 const} T& t, IndexSequence<I...>, {\cf18 int})\par
3151     -> {\cf17 decltype}(std::tie(get<I>(t)...)) \{\par
3152   {\cf17 static_assert}(std::tuple_size<T>::value == {\cf17 sizeof}...(I),\par
3153                 {\cf22 "Number of arguments doesn't match the number of fields."});\par
3154   {\cf19 return} std::tie(get<I>(t)...);\par
3155 \}\par
3156 \par
3157 {\cf21 #if defined(__cpp_structured_bindings) && __cpp_structured_bindings >= 201606}\par
3158 {\cf17 template} <{\cf17 typename} T>\par
3159 {\cf17 auto} UnpackStructImpl({\cf17 const} T& t, MakeIndexSequence<1>, {\cf18 char}) \{\par
3160   {\cf17 const} {\cf17 auto}& [a] = t;\par
3161   {\cf19 return} std::tie(a);\par
3162 \}\par
3163 {\cf17 template} <{\cf17 typename} T>\par
3164 {\cf17 auto} UnpackStructImpl({\cf17 const} T& t, MakeIndexSequence<2>, {\cf18 char}) \{\par
3165   {\cf17 const} {\cf17 auto}& [a, b] = t;\par
3166   {\cf19 return} std::tie(a, b);\par
3167 \}\par
3168 {\cf17 template} <{\cf17 typename} T>\par
3169 {\cf17 auto} UnpackStructImpl({\cf17 const} T& t, MakeIndexSequence<3>, {\cf18 char}) \{\par
3170   {\cf17 const} {\cf17 auto}& [a, b, c] = t;\par
3171   {\cf19 return} std::tie(a, b, c);\par
3172 \}\par
3173 {\cf17 template} <{\cf17 typename} T>\par
3174 {\cf17 auto} UnpackStructImpl({\cf17 const} T& t, MakeIndexSequence<4>, {\cf18 char}) \{\par
3175   {\cf17 const} {\cf17 auto}& [a, b, c, d] = t;\par
3176   {\cf19 return} std::tie(a, b, c, d);\par
3177 \}\par
3178 {\cf17 template} <{\cf17 typename} T>\par
3179 {\cf17 auto} UnpackStructImpl({\cf17 const} T& t, MakeIndexSequence<5>, {\cf18 char}) \{\par
3180   {\cf17 const} {\cf17 auto}& [a, b, c, d, e] = t;\par
3181   {\cf19 return} std::tie(a, b, c, d, e);\par
3182 \}\par
3183 {\cf17 template} <{\cf17 typename} T>\par
3184 {\cf17 auto} UnpackStructImpl({\cf17 const} T& t, MakeIndexSequence<6>, {\cf18 char}) \{\par
3185   {\cf17 const} {\cf17 auto}& [a, b, c, d, e, f] = t;\par
3186   {\cf19 return} std::tie(a, b, c, d, e, f);\par
3187 \}\par
3188 {\cf17 template} <{\cf17 typename} T>\par
3189 {\cf17 auto} UnpackStructImpl({\cf17 const} T& t, MakeIndexSequence<7>, {\cf18 char}) \{\par
3190   {\cf17 const} {\cf17 auto}& [a, b, c, d, e, f, g] = t;\par
3191   {\cf19 return} std::tie(a, b, c, d, e, f, g);\par
3192 \}\par
3193 {\cf17 template} <{\cf17 typename} T>\par
3194 {\cf17 auto} UnpackStructImpl({\cf17 const} T& t, MakeIndexSequence<8>, {\cf18 char}) \{\par
3195   {\cf17 const} {\cf17 auto}& [a, b, c, d, e, f, g, h] = t;\par
3196   {\cf19 return} std::tie(a, b, c, d, e, f, g, h);\par
3197 \}\par
3198 {\cf17 template} <{\cf17 typename} T>\par
3199 {\cf17 auto} UnpackStructImpl({\cf17 const} T& t, MakeIndexSequence<9>, {\cf18 char}) \{\par
3200   {\cf17 const} {\cf17 auto}& [a, b, c, d, e, f, g, h, i] = t;\par
3201   {\cf19 return} std::tie(a, b, c, d, e, f, g, h, i);\par
3202 \}\par
3203 {\cf17 template} <{\cf17 typename} T>\par
3204 {\cf17 auto} UnpackStructImpl({\cf17 const} T& t, MakeIndexSequence<10>, {\cf18 char}) \{\par
3205   {\cf17 const} {\cf17 auto}& [a, b, c, d, e, f, g, h, i, j] = t;\par
3206   {\cf19 return} std::tie(a, b, c, d, e, f, g, h, i, j);\par
3207 \}\par
3208 {\cf17 template} <{\cf17 typename} T>\par
3209 {\cf17 auto} UnpackStructImpl({\cf17 const} T& t, MakeIndexSequence<11>, {\cf18 char}) \{\par
3210   {\cf17 const} {\cf17 auto}& [a, b, c, d, e, f, g, h, i, j, k] = t;\par
3211   {\cf19 return} std::tie(a, b, c, d, e, f, g, h, i, j, k);\par
3212 \}\par
3213 {\cf17 template} <{\cf17 typename} T>\par
3214 {\cf17 auto} UnpackStructImpl({\cf17 const} T& t, MakeIndexSequence<12>, {\cf18 char}) \{\par
3215   {\cf17 const} {\cf17 auto}& [a, b, c, d, e, f, g, h, i, j, k, l] = t;\par
3216   {\cf19 return} std::tie(a, b, c, d, e, f, g, h, i, j, k, l);\par
3217 \}\par
3218 {\cf17 template} <{\cf17 typename} T>\par
3219 {\cf17 auto} UnpackStructImpl({\cf17 const} T& t, MakeIndexSequence<13>, {\cf18 char}) \{\par
3220   {\cf17 const} {\cf17 auto}& [a, b, c, d, e, f, g, h, i, j, k, l, m] = t;\par
3221   {\cf19 return} std::tie(a, b, c, d, e, f, g, h, i, j, k, l, m);\par
3222 \}\par
3223 {\cf17 template} <{\cf17 typename} T>\par
3224 {\cf17 auto} UnpackStructImpl({\cf17 const} T& t, MakeIndexSequence<14>, {\cf18 char}) \{\par
3225   {\cf17 const} {\cf17 auto}& [a, b, c, d, e, f, g, h, i, j, k, l, m, n] = t;\par
3226   {\cf19 return} std::tie(a, b, c, d, e, f, g, h, i, j, k, l, m, n);\par
3227 \}\par
3228 {\cf17 template} <{\cf17 typename} T>\par
3229 {\cf17 auto} UnpackStructImpl({\cf17 const} T& t, MakeIndexSequence<15>, {\cf18 char}) \{\par
3230   {\cf17 const} {\cf17 auto}& [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o] = t;\par
3231   {\cf19 return} std::tie(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);\par
3232 \}\par
3233 {\cf17 template} <{\cf17 typename} T>\par
3234 {\cf17 auto} UnpackStructImpl({\cf17 const} T& t, MakeIndexSequence<16>, {\cf18 char}) \{\par
3235   {\cf17 const} {\cf17 auto}& [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p] = t;\par
3236   {\cf19 return} std::tie(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);\par
3237 \}\par
3238 {\cf17 template} <{\cf17 typename} T>\par
3239 {\cf17 auto} UnpackStructImpl({\cf17 const} T& t, MakeIndexSequence<17>, {\cf18 char}) \{\par
3240   {\cf17 const} {\cf17 auto}& [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q] = t;\par
3241   {\cf19 return} std::tie(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);\par
3242 \}\par
3243 {\cf17 template} <{\cf17 typename} T>\par
3244 {\cf17 auto} UnpackStructImpl({\cf17 const} T& t, MakeIndexSequence<18>, {\cf18 char}) \{\par
3245   {\cf17 const} {\cf17 auto}& [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r] = t;\par
3246   {\cf19 return} std::tie(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);\par
3247 \}\par
3248 {\cf17 template} <{\cf17 typename} T>\par
3249 {\cf17 auto} UnpackStructImpl({\cf17 const} T& t, MakeIndexSequence<19>, {\cf18 char}) \{\par
3250   {\cf17 const} {\cf17 auto}& [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s] = t;\par
3251   {\cf19 return} std::tie(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);\par
3252 \}\par
3253 {\cf21 #endif  }{\cf20 // defined(__cpp_structured_bindings)}\par
3254 \par
3255 {\cf17 template} <{\cf18 size_t} I, {\cf17 typename} T>\par
3256 {\cf17 auto} UnpackStruct({\cf17 const} T& t)\par
3257     -> {\cf17 decltype}((UnpackStructImpl)(t, MakeIndexSequence<I>\{\}, 0)) \{\par
3258   {\cf19 return} (UnpackStructImpl)(t, MakeIndexSequence<I>\{\}, 0);\par
3259 \}\par
3260 \par
3261 {\cf20 // Helper function to do comma folding in C++11.}\par
3262 {\cf20 // The array ensures left-to-right order of evaluation.}\par
3263 {\cf20 // Usage: VariadicExpand(\{expr...\});}\par
3264 {\cf17 template} <{\cf17 typename} T, {\cf18 size_t} N>\par
3265 {\cf18 void} VariadicExpand({\cf17 const} T (&)[N]) \{\}\par
3266 \par
3267 {\cf17 template} <{\cf17 typename} Struct, {\cf17 typename} StructSize>\par
3268 {\cf17 class }FieldsAreMatcherImpl;\par
3269 \par
3270 {\cf17 template} <{\cf17 typename} Struct, {\cf18 size_t}... I>\par
3271 {\cf17 class }FieldsAreMatcherImpl<Struct, IndexSequence<I...>>\par
3272     : {\cf17 public} MatcherInterface<Struct> \{\par
3273   {\cf17 using }UnpackedType =\par
3274       {\cf17 decltype}(UnpackStruct<{\cf17 sizeof}...(I)>(std::declval<const Struct&>()));\par
3275   {\cf17 using }MatchersType = std::tuple<\par
3276       Matcher<const typename std::tuple_element<I, UnpackedType>::type&>...>;\par
3277 \par
3278  {\cf17 public}:\par
3279   {\cf17 template} <{\cf17 typename} Inner>\par
3280   {\cf17 explicit} FieldsAreMatcherImpl({\cf17 const} Inner& matchers)\par
3281       : matchers_(testing::SafeMatcherCast<\par
3282                   const typename std::tuple_element<I, UnpackedType>::type&>(\par
3283             std::get<I>(matchers))...) \{\}\par
3284 \par
3285   {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const override }\{\par
3286     {\cf17 const} {\cf18 char}* separator = {\cf22 ""};\par
3287     VariadicExpand(\par
3288         \{(*os << separator << {\cf22 "has field #"} << I << {\cf22 " that "},\par
3289           std::get<I>(matchers_).DescribeTo(os), separator = {\cf22 ", and "})...\});\par
3290   \}\par
3291 \par
3292   {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const override }\{\par
3293     {\cf17 const} {\cf18 char}* separator = {\cf22 ""};\par
3294     VariadicExpand(\{(*os << separator << {\cf22 "has field #"} << I << {\cf22 " that "},\par
3295                      std::get<I>(matchers_).DescribeNegationTo(os),\par
3296                      separator = {\cf22 ", or "})...\});\par
3297   \}\par
3298 \par
3299   {\cf18 bool} MatchAndExplain(Struct t, MatchResultListener* listener){\cf17  const override }\{\par
3300     {\cf19 return} MatchInternal((UnpackStruct<{\cf17 sizeof}...(I)>)(t), listener);\par
3301   \}\par
3302 \par
3303  {\cf17 private}:\par
3304   {\cf18 bool} MatchInternal(UnpackedType tuple, MatchResultListener* listener){\cf17  const }\{\par
3305     {\cf19 if} (!listener->IsInterested()) \{\par
3306       {\cf20 // If the listener is not interested, we don't need to construct the}\par
3307       {\cf20 // explanation.}\par
3308       {\cf18 bool} good = {\cf17 true};\par
3309       VariadicExpand(\{good = good && std::get<I>(matchers_).Matches(\par
3310                                          std::get<I>(tuple))...\});\par
3311       {\cf19 return} good;\par
3312     \}\par
3313 \par
3314     {\cf18 size_t} failed_pos = ~size_t\{\};\par
3315 \par
3316     std::vector<StringMatchResultListener> inner_listener({\cf17 sizeof}...(I));\par
3317 \par
3318     VariadicExpand(\par
3319         \{failed_pos == ~size_t\{\}&& !std::get<I>(matchers_).MatchAndExplain(\par
3320                            std::get<I>(tuple), &inner_listener[I])\par
3321              ? failed_pos = I\par
3322              : 0 ...\});\par
3323     {\cf19 if} (failed_pos != ~{\cf18 size_t}\{\}) \{\par
3324       *listener << {\cf22 "whose field #"} << failed_pos << {\cf22 " does not match"};\par
3325       PrintIfNotEmpty(inner_listener[failed_pos].str(), listener->stream());\par
3326       {\cf19 return} {\cf17 false};\par
3327     \}\par
3328 \par
3329     *listener << {\cf22 "whose all elements match"};\par
3330     {\cf17 const} {\cf18 char}* separator = {\cf22 ", where"};\par
3331     {\cf19 for} ({\cf18 size_t} index = 0; index < {\cf17 sizeof}...(I); ++index) \{\par
3332       {\cf17 const} std::string str = inner_listener[index].str();\par
3333       {\cf19 if} (!str.empty()) \{\par
3334         *listener << separator << {\cf22 " field #"} << index << {\cf22 " is a value "} << str;\par
3335         separator = {\cf22 ", and"};\par
3336       \}\par
3337     \}\par
3338 \par
3339     {\cf19 return} {\cf17 true};\par
3340   \}\par
3341 \par
3342   MatchersType matchers_;\par
3343 \};\par
3344 \par
3345 {\cf17 template} <{\cf17 typename}... Inner>\par
3346 {\cf17 class }FieldsAreMatcher \{\par
3347  {\cf17 public}:\par
3348   {\cf17 explicit} FieldsAreMatcher(Inner... inner) : matchers_(std::move(inner)...) \{\}\par
3349 \par
3350   {\cf17 template} <{\cf17 typename} Struct>\par
3351   {\cf17 operator} Matcher<Struct>(){\cf17  const }\{  {\cf20 // NOLINT}\par
3352     {\cf19 return} Matcher<Struct>(\par
3353         {\cf17 new} FieldsAreMatcherImpl<{\cf17 const} Struct&, IndexSequenceFor<Inner...>>(\par
3354             matchers_));\par
3355   \}\par
3356 \par
3357  {\cf17 private}:\par
3358   std::tuple<Inner...> matchers_;\par
3359 \};\par
3360 \par
3361 {\cf20 // Implements ElementsAre() and ElementsAreArray().}\par
3362 {\cf17 template} <{\cf17 typename} Container>\par
3363 {\cf17 class }ElementsAreMatcherImpl : {\cf17 public} MatcherInterface<Container> \{\par
3364  {\cf17 public}:\par
3365   {\cf17 typedef} GTEST_REMOVE_REFERENCE_AND_CONST_(Container) RawContainer;\par
3366   {\cf17 typedef} internal::StlContainerView<RawContainer> View;\par
3367   {\cf17 typedef} {\cf17 typename} View::type StlContainer;\par
3368   {\cf17 typedef} {\cf17 typename} View::const_reference StlContainerReference;\par
3369   {\cf17 typedef} {\cf17 typename} StlContainer::value_type Element;\par
3370 \par
3371   {\cf20 // Constructs the matcher from a sequence of element values or}\par
3372   {\cf20 // element matchers.}\par
3373   {\cf17 template} <{\cf17 typename} InputIter>\par
3374   ElementsAreMatcherImpl(InputIter first, InputIter last) \{\par
3375     {\cf19 while} (first != last) \{\par
3376       matchers_.push_back(MatcherCast<const Element&>(*first++));\par
3377     \}\par
3378   \}\par
3379 \par
3380   {\cf20 // Describes what this matcher does.}\par
3381   {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const override }\{\par
3382     {\cf19 if} (count() == 0) \{\par
3383       *os << {\cf22 "is empty"};\par
3384     \} {\cf19 else} {\cf19 if} (count() == 1) \{\par
3385       *os << {\cf22 "has 1 element that "};\par
3386       matchers_[0].DescribeTo(os);\par
3387     \} {\cf19 else} \{\par
3388       *os << {\cf22 "has "} << Elements(count()) << {\cf22 " where\\n"};\par
3389       {\cf19 for} ({\cf18 size_t} i = 0; i != count(); ++i) \{\par
3390         *os << {\cf22 "element #"} << i << {\cf22 " "};\par
3391         matchers_[i].DescribeTo(os);\par
3392         {\cf19 if} (i + 1 < count()) \{\par
3393           *os << {\cf22 ",\\n"};\par
3394         \}\par
3395       \}\par
3396     \}\par
3397   \}\par
3398 \par
3399   {\cf20 // Describes what the negation of this matcher does.}\par
3400   {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const override }\{\par
3401     {\cf19 if} (count() == 0) \{\par
3402       *os << {\cf22 "isn't empty"};\par
3403       {\cf19 return};\par
3404     \}\par
3405 \par
3406     *os << {\cf22 "doesn't have "} << Elements(count()) << {\cf22 ", or\\n"};\par
3407     {\cf19 for} ({\cf18 size_t} i = 0; i != count(); ++i) \{\par
3408       *os << {\cf22 "element #"} << i << {\cf22 " "};\par
3409       matchers_[i].DescribeNegationTo(os);\par
3410       {\cf19 if} (i + 1 < count()) \{\par
3411         *os << {\cf22 ", or\\n"};\par
3412       \}\par
3413     \}\par
3414   \}\par
3415 \par
3416   {\cf18 bool} MatchAndExplain(Container container,\par
3417                        MatchResultListener* listener){\cf17  const override }\{\par
3418     {\cf20 // To work with stream-like "containers", we must only walk}\par
3419     {\cf20 // through the elements in one pass.}\par
3420 \par
3421     {\cf17 const} {\cf18 bool} listener_interested = listener->IsInterested();\par
3422 \par
3423     {\cf20 // explanations[i] is the explanation of the element at index i.}\par
3424     ::std::vector<std::string> explanations(count());\par
3425     StlContainerReference stl_container = View::ConstReference(container);\par
3426     {\cf17 auto} it = stl_container.begin();\par
3427     {\cf18 size_t} exam_pos = 0;\par
3428     {\cf18 bool} mismatch_found = {\cf17 false};  {\cf20 // Have we found a mismatched element yet?}\par
3429 \par
3430     {\cf20 // Go through the elements and matchers in pairs, until we reach}\par
3431     {\cf20 // the end of either the elements or the matchers, or until we find a}\par
3432     {\cf20 // mismatch.}\par
3433     {\cf19 for} (; it != stl_container.end() && exam_pos != count(); ++it, ++exam_pos) \{\par
3434       {\cf18 bool} match;  {\cf20 // Does the current element match the current matcher?}\par
3435       {\cf19 if} (listener_interested) \{\par
3436         StringMatchResultListener s;\par
3437         match = matchers_[exam_pos].MatchAndExplain(*it, &s);\par
3438         explanations[exam_pos] = s.str();\par
3439       \} {\cf19 else} \{\par
3440         match = matchers_[exam_pos].Matches(*it);\par
3441       \}\par
3442 \par
3443       {\cf19 if} (!match) \{\par
3444         mismatch_found = {\cf17 true};\par
3445         {\cf19 break};\par
3446       \}\par
3447     \}\par
3448     {\cf20 // If mismatch_found is true, 'exam_pos' is the index of the mismatch.}\par
3449 \par
3450     {\cf20 // Find how many elements the actual container has.  We avoid}\par
3451     {\cf20 // calling size() s.t. this code works for stream-like "containers"}\par
3452     {\cf20 // that don't define size().}\par
3453     {\cf18 size_t} actual_count = exam_pos;\par
3454     {\cf19 for} (; it != stl_container.end(); ++it) \{\par
3455       ++actual_count;\par
3456     \}\par
3457 \par
3458     {\cf19 if} (actual_count != count()) \{\par
3459       {\cf20 // The element count doesn't match.  If the container is empty,}\par
3460       {\cf20 // there's no need to explain anything as Google Mock already}\par
3461       {\cf20 // prints the empty container.  Otherwise we just need to show}\par
3462       {\cf20 // how many elements there actually are.}\par
3463       {\cf19 if} (listener_interested && (actual_count != 0)) \{\par
3464         *listener << {\cf22 "which has "} << Elements(actual_count);\par
3465       \}\par
3466       {\cf19 return} {\cf17 false};\par
3467     \}\par
3468 \par
3469     {\cf19 if} (mismatch_found) \{\par
3470       {\cf20 // The element count matches, but the exam_pos-th element doesn't match.}\par
3471       {\cf19 if} (listener_interested) \{\par
3472         *listener << {\cf22 "whose element #"} << exam_pos << {\cf22 " doesn't match"};\par
3473         PrintIfNotEmpty(explanations[exam_pos], listener->stream());\par
3474       \}\par
3475       {\cf19 return} {\cf17 false};\par
3476     \}\par
3477 \par
3478     {\cf20 // Every element matches its expectation.  We need to explain why}\par
3479     {\cf20 // (the obvious ones can be skipped).}\par
3480     {\cf19 if} (listener_interested) \{\par
3481       {\cf18 bool} reason_printed = {\cf17 false};\par
3482       {\cf19 for} ({\cf18 size_t} i = 0; i != count(); ++i) \{\par
3483         {\cf17 const} std::string& s = explanations[i];\par
3484         {\cf19 if} (!s.empty()) \{\par
3485           {\cf19 if} (reason_printed) \{\par
3486             *listener << {\cf22 ",\\nand "};\par
3487           \}\par
3488           *listener << {\cf22 "whose element #"} << i << {\cf22 " matches, "} << s;\par
3489           reason_printed = {\cf17 true};\par
3490         \}\par
3491       \}\par
3492     \}\par
3493     {\cf19 return} {\cf17 true};\par
3494   \}\par
3495 \par
3496  {\cf17 private}:\par
3497   {\cf17 static} Message Elements({\cf18 size_t} count) \{\par
3498     {\cf19 return} Message() << count << (count == 1 ? {\cf22 " element"} : {\cf22 " elements"});\par
3499   \}\par
3500 \par
3501   {\cf18 size_t} count(){\cf17  const }\{ {\cf19 return} matchers_.size(); \}\par
3502 \par
3503   ::std::vector<Matcher<const Element&>> matchers_;\par
3504 \};\par
3505 \par
3506 {\cf20 // Connectivity matrix of (elements X matchers), in element-major order.}\par
3507 {\cf20 // Initially, there are no edges.}\par
3508 {\cf20 // Use NextGraph() to iterate over all possible edge configurations.}\par
3509 {\cf20 // Use Randomize() to generate a random edge configuration.}\par
3510 {\cf17 class }GTEST_API_ MatchMatrix \{\par
3511  {\cf17 public}:\par
3512   MatchMatrix({\cf18 size_t} num_elements, {\cf18 size_t} num_matchers)\par
3513       : num_elements_(num_elements),\par
3514         num_matchers_(num_matchers),\par
3515         matched_(num_elements_ * num_matchers_, 0) \{\}\par
3516 \par
3517   {\cf18 size_t} LhsSize(){\cf17  const }\{ {\cf19 return} num_elements_; \}\par
3518   {\cf18 size_t} RhsSize(){\cf17  const }\{ {\cf19 return} num_matchers_; \}\par
3519   {\cf18 bool} HasEdge({\cf18 size_t} ilhs, {\cf18 size_t} irhs){\cf17  const }\{\par
3520     {\cf19 return} matched_[SpaceIndex(ilhs, irhs)] == 1;\par
3521   \}\par
3522   {\cf18 void} SetEdge({\cf18 size_t} ilhs, {\cf18 size_t} irhs, {\cf18 bool} b) \{\par
3523     matched_[SpaceIndex(ilhs, irhs)] = b ? 1 : 0;\par
3524   \}\par
3525 \par
3526   {\cf20 // Treating the connectivity matrix as a (LhsSize()*RhsSize())-bit number,}\par
3527   {\cf20 // adds 1 to that number; returns false if incrementing the graph left it}\par
3528   {\cf20 // empty.}\par
3529   {\cf18 bool} NextGraph();\par
3530 \par
3531   {\cf18 void} Randomize();\par
3532 \par
3533   std::string DebugString() {\cf17 const};\par
3534 \par
3535  {\cf17 private}:\par
3536   {\cf18 size_t} SpaceIndex({\cf18 size_t} ilhs, {\cf18 size_t} irhs){\cf17  const }\{\par
3537     {\cf19 return} ilhs * num_matchers_ + irhs;\par
3538   \}\par
3539 \par
3540   {\cf18 size_t} num_elements_;\par
3541   {\cf18 size_t} num_matchers_;\par
3542 \par
3543   {\cf20 // Each element is a char interpreted as bool. They are stored as a}\par
3544   {\cf20 // flattened array in lhs-major order, use 'SpaceIndex()' to translate}\par
3545   {\cf20 // a (ilhs, irhs) matrix coordinate into an offset.}\par
3546   ::std::vector<char> matched_;\par
3547 \};\par
3548 \par
3549 typedef ::std::pair<size_t, size_t> ElementMatcherPair;\par
3550 typedef ::std::vector<ElementMatcherPair> ElementMatcherPairs;\par
3551 \par
3552 {\cf20 // Returns a maximum bipartite matching for the specified graph 'g'.}\par
3553 {\cf20 // The matching is represented as a vector of \{element, matcher\} pairs.}\par
3554 GTEST_API_ ElementMatcherPairs FindMaxBipartiteMatching({\cf17 const} MatchMatrix& g);\par
3555 \par
3556 {\cf17 struct }UnorderedMatcherRequire \{\par
3557   {\cf17 enum} Flags \{\par
3558     Superset = 1 << 0,\par
3559     Subset = 1 << 1,\par
3560     ExactMatch = Superset | Subset,\par
3561   \};\par
3562 \};\par
3563 \par
3564 {\cf20 // Untyped base class for implementing UnorderedElementsAre.  By}\par
3565 {\cf20 // putting logic that's not specific to the element type here, we}\par
3566 {\cf20 // reduce binary bloat and increase compilation speed.}\par
3567 {\cf17 class }GTEST_API_ UnorderedElementsAreMatcherImplBase \{\par
3568  {\cf17 protected}:\par
3569   {\cf17 explicit} UnorderedElementsAreMatcherImplBase(\par
3570       UnorderedMatcherRequire::Flags matcher_flags)\par
3571       : match_flags_(matcher_flags) \{\}\par
3572 \par
3573   {\cf20 // A vector of matcher describers, one for each element matcher.}\par
3574   {\cf20 // Does not own the describers (and thus can be used only when the}\par
3575   {\cf20 // element matchers are alive).}\par
3576   typedef ::std::vector<const MatcherDescriberInterface*> MatcherDescriberVec;\par
3577 \par
3578   {\cf20 // Describes this UnorderedElementsAre matcher.}\par
3579   {\cf18 void} DescribeToImpl(::std::ostream* os) {\cf17 const};\par
3580 \par
3581   {\cf20 // Describes the negation of this UnorderedElementsAre matcher.}\par
3582   {\cf18 void} DescribeNegationToImpl(::std::ostream* os) {\cf17 const};\par
3583 \par
3584   {\cf18 bool} VerifyMatchMatrix(const ::std::vector<std::string>& element_printouts,\par
3585                          {\cf17 const} MatchMatrix& matrix,\par
3586                          MatchResultListener* listener) {\cf17 const};\par
3587 \par
3588   {\cf18 bool} FindPairing({\cf17 const} MatchMatrix& matrix,\par
3589                    MatchResultListener* listener) {\cf17 const};\par
3590 \par
3591   MatcherDescriberVec& matcher_describers() \{ {\cf19 return} matcher_describers_; \}\par
3592 \par
3593   {\cf17 static} Message Elements({\cf18 size_t} n) \{\par
3594     {\cf19 return} Message() << n << {\cf22 " element"} << (n == 1 ? {\cf22 ""} : {\cf22 "s"});\par
3595   \}\par
3596 \par
3597   UnorderedMatcherRequire::Flags match_flags(){\cf17  const }\{ {\cf19 return} match_flags_; \}\par
3598 \par
3599  {\cf17 private}:\par
3600   UnorderedMatcherRequire::Flags match_flags_;\par
3601   MatcherDescriberVec matcher_describers_;\par
3602 \};\par
3603 \par
3604 {\cf20 // Implements UnorderedElementsAre, UnorderedElementsAreArray, IsSubsetOf, and}\par
3605 {\cf20 // IsSupersetOf.}\par
3606 {\cf17 template} <{\cf17 typename} Container>\par
3607 {\cf17 class }UnorderedElementsAreMatcherImpl\par
3608     : {\cf17 public} MatcherInterface<Container>,\par
3609       {\cf17 public} UnorderedElementsAreMatcherImplBase \{\par
3610  {\cf17 public}:\par
3611   {\cf17 typedef} GTEST_REMOVE_REFERENCE_AND_CONST_(Container) RawContainer;\par
3612   {\cf17 typedef} internal::StlContainerView<RawContainer> View;\par
3613   {\cf17 typedef} {\cf17 typename} View::type StlContainer;\par
3614   {\cf17 typedef} {\cf17 typename} View::const_reference StlContainerReference;\par
3615   {\cf17 typedef} {\cf17 typename} StlContainer::value_type Element;\par
3616 \par
3617   {\cf17 template} <{\cf17 typename} InputIter>\par
3618   UnorderedElementsAreMatcherImpl(UnorderedMatcherRequire::Flags matcher_flags,\par
3619                                   InputIter first, InputIter last)\par
3620       : UnorderedElementsAreMatcherImplBase(matcher_flags) \{\par
3621     {\cf19 for} (; first != last; ++first) \{\par
3622       matchers_.push_back(MatcherCast<const Element&>(*first));\par
3623     \}\par
3624     {\cf19 for} ({\cf17 const} {\cf17 auto}& m : matchers_) \{\par
3625       matcher_describers().push_back(m.GetDescriber());\par
3626     \}\par
3627   \}\par
3628 \par
3629   {\cf20 // Describes what this matcher does.}\par
3630   {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const override }\{\par
3631     {\cf19 return} UnorderedElementsAreMatcherImplBase::DescribeToImpl(os);\par
3632   \}\par
3633 \par
3634   {\cf20 // Describes what the negation of this matcher does.}\par
3635   {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const override }\{\par
3636     {\cf19 return} UnorderedElementsAreMatcherImplBase::DescribeNegationToImpl(os);\par
3637   \}\par
3638 \par
3639   {\cf18 bool} MatchAndExplain(Container container,\par
3640                        MatchResultListener* listener){\cf17  const override }\{\par
3641     StlContainerReference stl_container = View::ConstReference(container);\par
3642     ::std::vector<std::string> element_printouts;\par
3643     MatchMatrix matrix =\par
3644         AnalyzeElements(stl_container.begin(), stl_container.end(),\par
3645                         &element_printouts, listener);\par
3646 \par
3647     {\cf19 if} (matrix.LhsSize() == 0 && matrix.RhsSize() == 0) \{\par
3648       {\cf19 return} {\cf17 true};\par
3649     \}\par
3650 \par
3651     {\cf19 if} (match_flags() == UnorderedMatcherRequire::ExactMatch) \{\par
3652       {\cf19 if} (matrix.LhsSize() != matrix.RhsSize()) \{\par
3653         {\cf20 // The element count doesn't match.  If the container is empty,}\par
3654         {\cf20 // there's no need to explain anything as Google Mock already}\par
3655         {\cf20 // prints the empty container. Otherwise we just need to show}\par
3656         {\cf20 // how many elements there actually are.}\par
3657         {\cf19 if} (matrix.LhsSize() != 0 && listener->IsInterested()) \{\par
3658           *listener << {\cf22 "which has "} << Elements(matrix.LhsSize());\par
3659         \}\par
3660         {\cf19 return} {\cf17 false};\par
3661       \}\par
3662     \}\par
3663 \par
3664     {\cf19 return} VerifyMatchMatrix(element_printouts, matrix, listener) &&\par
3665            FindPairing(matrix, listener);\par
3666   \}\par
3667 \par
3668  {\cf17 private}:\par
3669   {\cf17 template} <{\cf17 typename} ElementIter>\par
3670   MatchMatrix AnalyzeElements(ElementIter elem_first, ElementIter elem_last,\par
3671                               ::std::vector<std::string>* element_printouts,\par
3672                               MatchResultListener* listener){\cf17  const }\{\par
3673     element_printouts->clear();\par
3674     ::std::vector<char> did_match;\par
3675     {\cf18 size_t} num_elements = 0;\par
3676     DummyMatchResultListener dummy;\par
3677     {\cf19 for} (; elem_first != elem_last; ++num_elements, ++elem_first) \{\par
3678       {\cf19 if} (listener->IsInterested()) \{\par
3679         element_printouts->push_back(PrintToString(*elem_first));\par
3680       \}\par
3681       {\cf19 for} ({\cf18 size_t} irhs = 0; irhs != matchers_.size(); ++irhs) \{\par
3682         did_match.push_back(\par
3683             matchers_[irhs].MatchAndExplain(*elem_first, &dummy));\par
3684       \}\par
3685     \}\par
3686 \par
3687     MatchMatrix matrix(num_elements, matchers_.size());\par
3688     ::std::vector<char>::const_iterator did_match_iter = did_match.begin();\par
3689     {\cf19 for} ({\cf18 size_t} ilhs = 0; ilhs != num_elements; ++ilhs) \{\par
3690       {\cf19 for} ({\cf18 size_t} irhs = 0; irhs != matchers_.size(); ++irhs) \{\par
3691         matrix.SetEdge(ilhs, irhs, *did_match_iter++ != 0);\par
3692       \}\par
3693     \}\par
3694     {\cf19 return} matrix;\par
3695   \}\par
3696 \par
3697   ::std::vector<Matcher<const Element&>> matchers_;\par
3698 \};\par
3699 \par
3700 {\cf20 // Functor for use in TransformTuple.}\par
3701 {\cf20 // Performs MatcherCast<Target> on an input argument of any type.}\par
3702 {\cf17 template} <{\cf17 typename} Target>\par
3703 {\cf17 struct }CastAndAppendTransform \{\par
3704   {\cf17 template} <{\cf17 typename} Arg>\par
3705   Matcher<Target> operator()({\cf17 const} Arg& a){\cf17  const }\{\par
3706     {\cf19 return} MatcherCast<Target>(a);\par
3707   \}\par
3708 \};\par
3709 \par
3710 {\cf20 // Implements UnorderedElementsAre.}\par
3711 {\cf17 template} <{\cf17 typename} MatcherTuple>\par
3712 {\cf17 class }UnorderedElementsAreMatcher \{\par
3713  {\cf17 public}:\par
3714   {\cf17 explicit} UnorderedElementsAreMatcher({\cf17 const} MatcherTuple& args)\par
3715       : matchers_(args) \{\}\par
3716 \par
3717   {\cf17 template} <{\cf17 typename} Container>\par
3718   {\cf17 operator} Matcher<Container>(){\cf17  const }\{\par
3719     {\cf17 typedef} GTEST_REMOVE_REFERENCE_AND_CONST_(Container) RawContainer;\par
3720     {\cf17 typedef} {\cf17 typename} internal::StlContainerView<RawContainer>::type View;\par
3721     {\cf17 typedef} {\cf17 typename} View::value_type Element;\par
3722     typedef ::std::vector<Matcher<const Element&>> MatcherVec;\par
3723     MatcherVec matchers;\par
3724     matchers.reserve(::std::tuple_size<MatcherTuple>::value);\par
3725     TransformTupleValues(CastAndAppendTransform<const Element&>(), matchers_,\par
3726                          ::std::back_inserter(matchers));\par
3727     {\cf19 return} Matcher<Container>(\par
3728         {\cf17 new} UnorderedElementsAreMatcherImpl<const Container&>(\par
3729             UnorderedMatcherRequire::ExactMatch, matchers.begin(),\par
3730             matchers.end()));\par
3731   \}\par
3732 \par
3733  {\cf17 private}:\par
3734   {\cf17 const} MatcherTuple matchers_;\par
3735 \};\par
3736 \par
3737 {\cf20 // Implements ElementsAre.}\par
3738 {\cf17 template} <{\cf17 typename} MatcherTuple>\par
3739 {\cf17 class }ElementsAreMatcher \{\par
3740  {\cf17 public}:\par
3741   {\cf17 explicit} ElementsAreMatcher({\cf17 const} MatcherTuple& args) : matchers_(args) \{\}\par
3742 \par
3743   {\cf17 template} <{\cf17 typename} Container>\par
3744   {\cf17 operator} Matcher<Container>(){\cf17  const }\{\par
3745     {\cf17 static_assert}(\par
3746         !IsHashTable<GTEST_REMOVE_REFERENCE_AND_CONST_(Container)>::value ||\par
3747             ::std::tuple_size<MatcherTuple>::value < 2,\par
3748         {\cf22 "use UnorderedElementsAre with hash tables"});\par
3749 \par
3750     {\cf17 typedef} GTEST_REMOVE_REFERENCE_AND_CONST_(Container) RawContainer;\par
3751     {\cf17 typedef} {\cf17 typename} internal::StlContainerView<RawContainer>::type View;\par
3752     {\cf17 typedef} {\cf17 typename} View::value_type Element;\par
3753     typedef ::std::vector<Matcher<const Element&>> MatcherVec;\par
3754     MatcherVec matchers;\par
3755     matchers.reserve(::std::tuple_size<MatcherTuple>::value);\par
3756     TransformTupleValues(CastAndAppendTransform<const Element&>(), matchers_,\par
3757                          ::std::back_inserter(matchers));\par
3758     {\cf19 return} Matcher<Container>({\cf17 new} ElementsAreMatcherImpl<const Container&>(\par
3759         matchers.begin(), matchers.end()));\par
3760   \}\par
3761 \par
3762  {\cf17 private}:\par
3763   {\cf17 const} MatcherTuple matchers_;\par
3764 \};\par
3765 \par
3766 {\cf20 // Implements UnorderedElementsAreArray(), IsSubsetOf(), and IsSupersetOf().}\par
3767 {\cf17 template} <{\cf17 typename} T>\par
3768 {\cf17 class }UnorderedElementsAreArrayMatcher \{\par
3769  {\cf17 public}:\par
3770   {\cf17 template} <{\cf17 typename} Iter>\par
3771   UnorderedElementsAreArrayMatcher(UnorderedMatcherRequire::Flags match_flags,\par
3772                                    Iter first, Iter last)\par
3773       : match_flags_(match_flags), matchers_(first, last) \{\}\par
3774 \par
3775   {\cf17 template} <{\cf17 typename} Container>\par
3776   {\cf17 operator} Matcher<Container>(){\cf17  const }\{\par
3777     {\cf19 return} Matcher<Container>(\par
3778         {\cf17 new} UnorderedElementsAreMatcherImpl<const Container&>(\par
3779             match_flags_, matchers_.begin(), matchers_.end()));\par
3780   \}\par
3781 \par
3782  {\cf17 private}:\par
3783   UnorderedMatcherRequire::Flags match_flags_;\par
3784   ::std::vector<T> matchers_;\par
3785 \};\par
3786 \par
3787 {\cf20 // Implements ElementsAreArray().}\par
3788 {\cf17 template} <{\cf17 typename} T>\par
3789 {\cf17 class }ElementsAreArrayMatcher \{\par
3790  {\cf17 public}:\par
3791   {\cf17 template} <{\cf17 typename} Iter>\par
3792   ElementsAreArrayMatcher(Iter first, Iter last) : matchers_(first, last) \{\}\par
3793 \par
3794   {\cf17 template} <{\cf17 typename} Container>\par
3795   {\cf17 operator} Matcher<Container>(){\cf17  const }\{\par
3796     {\cf17 static_assert}(\par
3797         !IsHashTable<GTEST_REMOVE_REFERENCE_AND_CONST_(Container)>::value,\par
3798         {\cf22 "use UnorderedElementsAreArray with hash tables"});\par
3799 \par
3800     {\cf19 return} Matcher<Container>({\cf17 new} ElementsAreMatcherImpl<const Container&>(\par
3801         matchers_.begin(), matchers_.end()));\par
3802   \}\par
3803 \par
3804  {\cf17 private}:\par
3805   const ::std::vector<T> matchers_;\par
3806 \};\par
3807 \par
3808 {\cf20 // Given a 2-tuple matcher tm of type Tuple2Matcher and a value second}\par
3809 {\cf20 // of type Second, BoundSecondMatcher<Tuple2Matcher, Second>(tm,}\par
3810 {\cf20 // second) is a polymorphic matcher that matches a value x if and only if}\par
3811 {\cf20 // tm matches tuple (x, second).  Useful for implementing}\par
3812 {\cf20 // UnorderedPointwise() in terms of UnorderedElementsAreArray().}\par
3813 {\cf20 //}\par
3814 {\cf20 // BoundSecondMatcher is copyable and assignable, as we need to put}\par
3815 {\cf20 // instances of this class in a vector when implementing}\par
3816 {\cf20 // UnorderedPointwise().}\par
3817 {\cf17 template} <{\cf17 typename} Tuple2Matcher, {\cf17 typename} Second>\par
3818 {\cf17 class }BoundSecondMatcher \{\par
3819  {\cf17 public}:\par
3820   BoundSecondMatcher({\cf17 const} Tuple2Matcher& tm, {\cf17 const} Second& second)\par
3821       : tuple2_matcher_(tm), second_value_(second) \{\}\par
3822 \par
3823   BoundSecondMatcher({\cf17 const} BoundSecondMatcher& other) = {\cf19 default};\par
3824 \par
3825   {\cf17 template} <{\cf17 typename} T>\par
3826   {\cf17 operator} Matcher<T>(){\cf17  const }\{\par
3827     {\cf19 return} MakeMatcher({\cf17 new} Impl<T>(tuple2_matcher_, second_value_));\par
3828   \}\par
3829 \par
3830   {\cf20 // We have to define this for UnorderedPointwise() to compile in}\par
3831   {\cf20 // C++98 mode, as it puts BoundSecondMatcher instances in a vector,}\par
3832   {\cf20 // which requires the elements to be assignable in C++98.  The}\par
3833   {\cf20 // compiler cannot generate the operator= for us, as Tuple2Matcher}\par
3834   {\cf20 // and Second may not be assignable.}\par
3835   {\cf20 //}\par
3836   {\cf20 // However, this should never be called, so the implementation just}\par
3837   {\cf20 // need to assert.}\par
3838   {\cf18 void} operator=({\cf17 const} BoundSecondMatcher& {\cf20 /*rhs*/}) \{\par
3839     GTEST_LOG_(FATAL) << {\cf22 "BoundSecondMatcher should never be assigned."};\par
3840   \}\par
3841 \par
3842  {\cf17 private}:\par
3843   {\cf17 template} <{\cf17 typename} T>\par
3844   {\cf17 class }Impl : {\cf17 public} MatcherInterface<T> \{\par
3845    {\cf17 public}:\par
3846     typedef ::std::tuple<T, Second> ArgTuple;\par
3847 \par
3848     Impl({\cf17 const} Tuple2Matcher& tm, {\cf17 const} Second& second)\par
3849         : mono_tuple2_matcher_(SafeMatcherCast<const ArgTuple&>(tm)),\par
3850           second_value_(second) \{\}\par
3851 \par
3852     {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const override }\{\par
3853       *os << {\cf22 "and "};\par
3854       UniversalPrint(second_value_, os);\par
3855       *os << {\cf22 " "};\par
3856       mono_tuple2_matcher_.DescribeTo(os);\par
3857     \}\par
3858 \par
3859     {\cf18 bool} MatchAndExplain(T x, MatchResultListener* listener){\cf17  const override }\{\par
3860       {\cf19 return} mono_tuple2_matcher_.MatchAndExplain(ArgTuple(x, second_value_),\par
3861                                                   listener);\par
3862     \}\par
3863 \par
3864    {\cf17 private}:\par
3865     {\cf17 const} Matcher<const ArgTuple&> mono_tuple2_matcher_;\par
3866     {\cf17 const} Second second_value_;\par
3867   \};\par
3868 \par
3869   {\cf17 const} Tuple2Matcher tuple2_matcher_;\par
3870   {\cf17 const} Second second_value_;\par
3871 \};\par
3872 \par
3873 {\cf20 // Given a 2-tuple matcher tm and a value second,}\par
3874 {\cf20 // MatcherBindSecond(tm, second) returns a matcher that matches a}\par
3875 {\cf20 // value x if and only if tm matches tuple (x, second).  Useful for}\par
3876 {\cf20 // implementing UnorderedPointwise() in terms of UnorderedElementsAreArray().}\par
3877 {\cf17 template} <{\cf17 typename} Tuple2Matcher, {\cf17 typename} Second>\par
3878 BoundSecondMatcher<Tuple2Matcher, Second> MatcherBindSecond(\par
3879     {\cf17 const} Tuple2Matcher& tm, {\cf17 const} Second& second) \{\par
3880   {\cf19 return} BoundSecondMatcher<Tuple2Matcher, Second>(tm, second);\par
3881 \}\par
3882 \par
3883 {\cf20 // Returns the description for a matcher defined using the MATCHER*()}\par
3884 {\cf20 // macro where the user-supplied description string is "", if}\par
3885 {\cf20 // 'negation' is false; otherwise returns the description of the}\par
3886 {\cf20 // negation of the matcher.  'param_values' contains a list of strings}\par
3887 {\cf20 // that are the print-out of the matcher's parameters.}\par
3888 GTEST_API_ std::string FormatMatcherDescription(\par
3889     {\cf18 bool} negation, {\cf17 const} {\cf18 char}* matcher_name,\par
3890     {\cf17 const} std::vector<const char*>& param_names, {\cf17 const} Strings& param_values);\par
3891 \par
3892 {\cf20 // Implements a matcher that checks the value of a optional<> type variable.}\par
3893 {\cf17 template} <{\cf17 typename} ValueMatcher>\par
3894 {\cf17 class }OptionalMatcher \{\par
3895  {\cf17 public}:\par
3896   {\cf17 explicit} OptionalMatcher({\cf17 const} ValueMatcher& value_matcher)\par
3897       : value_matcher_(value_matcher) \{\}\par
3898 \par
3899   {\cf17 template} <{\cf17 typename} Optional>\par
3900   {\cf17 operator} Matcher<Optional>(){\cf17  const }\{\par
3901     {\cf19 return} Matcher<Optional>({\cf17 new} Impl<const Optional&>(value_matcher_));\par
3902   \}\par
3903 \par
3904   {\cf17 template} <{\cf17 typename} Optional>\par
3905   {\cf17 class }Impl : {\cf17 public} MatcherInterface<Optional> \{\par
3906    {\cf17 public}:\par
3907     {\cf17 typedef} GTEST_REMOVE_REFERENCE_AND_CONST_(Optional) OptionalView;\par
3908     {\cf17 typedef} {\cf17 typename} OptionalView::value_type ValueType;\par
3909     {\cf17 explicit} Impl({\cf17 const} ValueMatcher& value_matcher)\par
3910         : value_matcher_(MatcherCast<ValueType>(value_matcher)) \{\}\par
3911 \par
3912     {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const override }\{\par
3913       *os << {\cf22 "value "};\par
3914       value_matcher_.DescribeTo(os);\par
3915     \}\par
3916 \par
3917     {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const override }\{\par
3918       *os << {\cf22 "value "};\par
3919       value_matcher_.DescribeNegationTo(os);\par
3920     \}\par
3921 \par
3922     {\cf18 bool} MatchAndExplain(Optional optional,\par
3923                          MatchResultListener* listener){\cf17  const override }\{\par
3924       {\cf19 if} (!optional) \{\par
3925         *listener << {\cf22 "which is not engaged"};\par
3926         {\cf19 return} {\cf17 false};\par
3927       \}\par
3928       {\cf17 const} ValueType& value = *optional;\par
3929       StringMatchResultListener value_listener;\par
3930       {\cf17 const} {\cf18 bool} match = value_matcher_.MatchAndExplain(value, &value_listener);\par
3931       *listener << {\cf22 "whose value "} << PrintToString(value)\par
3932                 << (match ? {\cf22 " matches"} : {\cf22 " doesn't match"});\par
3933       PrintIfNotEmpty(value_listener.str(), listener->stream());\par
3934       {\cf19 return} match;\par
3935     \}\par
3936 \par
3937    {\cf17 private}:\par
3938     {\cf17 const} Matcher<ValueType> value_matcher_;\par
3939   \};\par
3940 \par
3941  {\cf17 private}:\par
3942   {\cf17 const} ValueMatcher value_matcher_;\par
3943 \};\par
3944 \par
3945 {\cf17 namespace }variant_matcher \{\par
3946 {\cf20 // Overloads to allow VariantMatcher to do proper ADL lookup.}\par
3947 {\cf17 template} <{\cf17 typename} T>\par
3948 {\cf18 void} holds_alternative() \{\}\par
3949 {\cf17 template} <{\cf17 typename} T>\par
3950 {\cf18 void} get() \{\}\par
3951 \par
3952 {\cf20 // Implements a matcher that checks the value of a variant<> type variable.}\par
3953 {\cf17 template} <{\cf17 typename} T>\par
3954 {\cf17 class }VariantMatcher \{\par
3955  {\cf17 public}:\par
3956   {\cf17 explicit} VariantMatcher(::testing::Matcher<const T&> matcher)\par
3957       : matcher_(std::move(matcher)) \{\}\par
3958 \par
3959   {\cf17 template} <{\cf17 typename} Variant>\par
3960   {\cf18 bool} MatchAndExplain({\cf17 const} Variant& value,\par
3961                        ::testing::MatchResultListener* listener){\cf17  const }\{\par
3962     {\cf17 using }std::get;\par
3963     {\cf19 if} (!listener->IsInterested()) \{\par
3964       {\cf19 return} holds_alternative<T>(value) && matcher_.Matches(get<T>(value));\par
3965     \}\par
3966 \par
3967     {\cf19 if} (!holds_alternative<T>(value)) \{\par
3968       *listener << {\cf22 "whose value is not of type '"} << GetTypeName() << {\cf22 "'"};\par
3969       {\cf19 return} {\cf17 false};\par
3970     \}\par
3971 \par
3972     {\cf17 const} T& elem = get<T>(value);\par
3973     StringMatchResultListener elem_listener;\par
3974     {\cf17 const} {\cf18 bool} match = matcher_.MatchAndExplain(elem, &elem_listener);\par
3975     *listener << {\cf22 "whose value "} << PrintToString(elem)\par
3976               << (match ? {\cf22 " matches"} : {\cf22 " doesn't match"});\par
3977     PrintIfNotEmpty(elem_listener.str(), listener->stream());\par
3978     {\cf19 return} match;\par
3979   \}\par
3980 \par
3981   {\cf18 void} DescribeTo(std::ostream* os){\cf17  const }\{\par
3982     *os << {\cf22 "is a variant<> with value of type '"} << GetTypeName()\par
3983         << {\cf22 "' and the value "};\par
3984     matcher_.DescribeTo(os);\par
3985   \}\par
3986 \par
3987   {\cf18 void} DescribeNegationTo(std::ostream* os){\cf17  const }\{\par
3988     *os << {\cf22 "is a variant<> with value of type other than '"} << GetTypeName()\par
3989         << {\cf22 "' or the value "};\par
3990     matcher_.DescribeNegationTo(os);\par
3991   \}\par
3992 \par
3993  {\cf17 private}:\par
3994   {\cf17 static} std::string GetTypeName() \{\par
3995 {\cf21 #if GTEST_HAS_RTTI}\par
3996     GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(\par
3997         {\cf19 return} internal::GetTypeName<T>());\par
3998 {\cf21 #endif}\par
3999     {\cf19 return} {\cf22 "the element type"};\par
4000   \}\par
4001 \par
4002   const ::testing::Matcher<const T&> matcher_;\par
4003 \};\par
4004 \par
4005 \}  {\cf20 // namespace variant_matcher}\par
4006 \par
4007 {\cf17 namespace }any_cast_matcher \{\par
4008 \par
4009 {\cf20 // Overloads to allow AnyCastMatcher to do proper ADL lookup.}\par
4010 {\cf17 template} <{\cf17 typename} T>\par
4011 {\cf18 void} any_cast() \{\}\par
4012 \par
4013 {\cf20 // Implements a matcher that any_casts the value.}\par
4014 {\cf17 template} <{\cf17 typename} T>\par
4015 {\cf17 class }AnyCastMatcher \{\par
4016  {\cf17 public}:\par
4017   {\cf17 explicit} AnyCastMatcher(const ::testing::Matcher<const T&>& matcher)\par
4018       : matcher_(matcher) \{\}\par
4019 \par
4020   {\cf17 template} <{\cf17 typename} AnyType>\par
4021   {\cf18 bool} MatchAndExplain({\cf17 const} AnyType& value,\par
4022                        ::testing::MatchResultListener* listener){\cf17  const }\{\par
4023     {\cf19 if} (!listener->IsInterested()) \{\par
4024       {\cf17 const} T* ptr = any_cast<T>(&value);\par
4025       {\cf19 return} ptr != {\cf17 nullptr} && matcher_.Matches(*ptr);\par
4026     \}\par
4027 \par
4028     {\cf17 const} T* elem = any_cast<T>(&value);\par
4029     {\cf19 if} (elem == {\cf17 nullptr}) \{\par
4030       *listener << {\cf22 "whose value is not of type '"} << GetTypeName() << {\cf22 "'"};\par
4031       {\cf19 return} {\cf17 false};\par
4032     \}\par
4033 \par
4034     StringMatchResultListener elem_listener;\par
4035     {\cf17 const} {\cf18 bool} match = matcher_.MatchAndExplain(*elem, &elem_listener);\par
4036     *listener << {\cf22 "whose value "} << PrintToString(*elem)\par
4037               << (match ? {\cf22 " matches"} : {\cf22 " doesn't match"});\par
4038     PrintIfNotEmpty(elem_listener.str(), listener->stream());\par
4039     {\cf19 return} match;\par
4040   \}\par
4041 \par
4042   {\cf18 void} DescribeTo(std::ostream* os){\cf17  const }\{\par
4043     *os << {\cf22 "is an 'any' type with value of type '"} << GetTypeName()\par
4044         << {\cf22 "' and the value "};\par
4045     matcher_.DescribeTo(os);\par
4046   \}\par
4047 \par
4048   {\cf18 void} DescribeNegationTo(std::ostream* os){\cf17  const }\{\par
4049     *os << {\cf22 "is an 'any' type with value of type other than '"} << GetTypeName()\par
4050         << {\cf22 "' or the value "};\par
4051     matcher_.DescribeNegationTo(os);\par
4052   \}\par
4053 \par
4054  {\cf17 private}:\par
4055   {\cf17 static} std::string GetTypeName() \{\par
4056 {\cf21 #if GTEST_HAS_RTTI}\par
4057     GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(\par
4058         {\cf19 return} internal::GetTypeName<T>());\par
4059 {\cf21 #endif}\par
4060     {\cf19 return} {\cf22 "the element type"};\par
4061   \}\par
4062 \par
4063   const ::testing::Matcher<const T&> matcher_;\par
4064 \};\par
4065 \par
4066 \}  {\cf20 // namespace any_cast_matcher}\par
4067 \par
4068 {\cf20 // Implements the Args() matcher.}\par
4069 {\cf17 template} <{\cf17 class }ArgsTuple, {\cf18 size_t}... k>\par
4070 {\cf17 class }ArgsMatcherImpl : {\cf17 public} MatcherInterface<ArgsTuple> \{\par
4071  {\cf17 public}:\par
4072   {\cf17 using }RawArgsTuple = {\cf17 typename} std::decay<ArgsTuple>::type;\par
4073   {\cf17 using }SelectedArgs =\par
4074       std::tuple<typename std::tuple_element<k, RawArgsTuple>::type...>;\par
4075   {\cf17 using }MonomorphicInnerMatcher = Matcher<const SelectedArgs&>;\par
4076 \par
4077   {\cf17 template} <{\cf17 typename} InnerMatcher>\par
4078   {\cf17 explicit} ArgsMatcherImpl({\cf17 const} InnerMatcher& inner_matcher)\par
4079       : inner_matcher_(SafeMatcherCast<const SelectedArgs&>(inner_matcher)) \{\}\par
4080 \par
4081   {\cf18 bool} MatchAndExplain(ArgsTuple args,\par
4082                        MatchResultListener* listener){\cf17  const override }\{\par
4083     {\cf20 // Workaround spurious C4100 on MSVC<=15.7 when k is empty.}\par
4084     (void)args;\par
4085     {\cf17 const} SelectedArgs& selected_args =\par
4086         std::forward_as_tuple(std::get<k>(args)...);\par
4087     {\cf19 if} (!listener->IsInterested()) {\cf19 return} inner_matcher_.Matches(selected_args);\par
4088 \par
4089     PrintIndices(listener->stream());\par
4090     *listener << {\cf22 "are "} << PrintToString(selected_args);\par
4091 \par
4092     StringMatchResultListener inner_listener;\par
4093     {\cf17 const} {\cf18 bool} match =\par
4094         inner_matcher_.MatchAndExplain(selected_args, &inner_listener);\par
4095     PrintIfNotEmpty(inner_listener.str(), listener->stream());\par
4096     {\cf19 return} match;\par
4097   \}\par
4098 \par
4099   {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const override }\{\par
4100     *os << {\cf22 "are a tuple "};\par
4101     PrintIndices(os);\par
4102     inner_matcher_.DescribeTo(os);\par
4103   \}\par
4104 \par
4105   {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const override }\{\par
4106     *os << {\cf22 "are a tuple "};\par
4107     PrintIndices(os);\par
4108     inner_matcher_.DescribeNegationTo(os);\par
4109   \}\par
4110 \par
4111  {\cf17 private}:\par
4112   {\cf20 // Prints the indices of the selected fields.}\par
4113   {\cf17 static} {\cf18 void} PrintIndices(::std::ostream* os) \{\par
4114     *os << {\cf22 "whose fields ("};\par
4115     {\cf17 const} {\cf18 char}* sep = {\cf22 ""};\par
4116     {\cf20 // Workaround spurious C4189 on MSVC<=15.7 when k is empty.}\par
4117     (void)sep;\par
4118     {\cf17 const} {\cf18 char}* dummy[] = \{{\cf22 ""}, (*os << sep << {\cf22 "#"} << k, sep = {\cf22 ", "})...\};\par
4119     (void)dummy;\par
4120     *os << {\cf22 ") "};\par
4121   \}\par
4122 \par
4123   MonomorphicInnerMatcher inner_matcher_;\par
4124 \};\par
4125 \par
4126 {\cf17 template} <{\cf17 class }InnerMatcher, {\cf18 size_t}... k>\par
4127 {\cf17 class }ArgsMatcher \{\par
4128  {\cf17 public}:\par
4129   {\cf17 explicit} ArgsMatcher(InnerMatcher inner_matcher)\par
4130       : inner_matcher_(std::move(inner_matcher)) \{\}\par
4131 \par
4132   {\cf17 template} <{\cf17 typename} ArgsTuple>\par
4133   {\cf17 operator} Matcher<ArgsTuple>(){\cf17  const }\{  {\cf20 // NOLINT}\par
4134     {\cf19 return} MakeMatcher({\cf17 new} ArgsMatcherImpl<ArgsTuple, k...>(inner_matcher_));\par
4135   \}\par
4136 \par
4137  {\cf17 private}:\par
4138   InnerMatcher inner_matcher_;\par
4139 \};\par
4140 \par
4141 \}  {\cf20 // namespace internal}\par
4142 \par
4143 {\cf20 // ElementsAreArray(iterator_first, iterator_last)}\par
4144 {\cf20 // ElementsAreArray(pointer, count)}\par
4145 {\cf20 // ElementsAreArray(array)}\par
4146 {\cf20 // ElementsAreArray(container)}\par
4147 {\cf20 // ElementsAreArray(\{ e1, e2, ..., en \})}\par
4148 {\cf20 //}\par
4149 {\cf20 // The ElementsAreArray() functions are like ElementsAre(...), except}\par
4150 {\cf20 // that they are given a homogeneous sequence rather than taking each}\par
4151 {\cf20 // element as a function argument. The sequence can be specified as an}\par
4152 {\cf20 // array, a pointer and count, a vector, an initializer list, or an}\par
4153 {\cf20 // STL iterator range. In each of these cases, the underlying sequence}\par
4154 {\cf20 // can be either a sequence of values or a sequence of matchers.}\par
4155 {\cf20 //}\par
4156 {\cf20 // All forms of ElementsAreArray() make a copy of the input matcher sequence.}\par
4157 \par
4158 {\cf17 template} <{\cf17 typename} Iter>\par
4159 {\cf17 inline} internal::ElementsAreArrayMatcher<\par
4160     typename ::std::iterator_traits<Iter>::value_type>\par
4161 ElementsAreArray(Iter first, Iter last) \{\par
4162   {\cf17 typedef} typename ::std::iterator_traits<Iter>::value_type T;\par
4163   {\cf19 return} internal::ElementsAreArrayMatcher<T>(first, last);\par
4164 \}\par
4165 \par
4166 {\cf17 template} <{\cf17 typename} T>\par
4167 {\cf17 inline} {\cf17 auto} ElementsAreArray({\cf17 const} T* pointer, {\cf18 size_t} count)\par
4168     -> {\cf17 decltype}(ElementsAreArray(pointer, pointer + count)) \{\par
4169   {\cf19 return} ElementsAreArray(pointer, pointer + count);\par
4170 \}\par
4171 \par
4172 {\cf17 template} <{\cf17 typename} T, {\cf18 size_t} N>\par
4173 {\cf17 inline} {\cf17 auto} ElementsAreArray({\cf17 const} T (&array)[N])\par
4174     -> {\cf17 decltype}(ElementsAreArray(array, N)) \{\par
4175   {\cf19 return} ElementsAreArray(array, N);\par
4176 \}\par
4177 \par
4178 {\cf17 template} <{\cf17 typename} Container>\par
4179 {\cf17 inline} {\cf17 auto} ElementsAreArray({\cf17 const} Container& container)\par
4180     -> {\cf17 decltype}(ElementsAreArray(container.begin(), container.end())) \{\par
4181   {\cf19 return} ElementsAreArray(container.begin(), container.end());\par
4182 \}\par
4183 \par
4184 {\cf17 template} <{\cf17 typename} T>\par
4185 {\cf17 inline} {\cf17 auto} ElementsAreArray(::std::initializer_list<T> xs)\par
4186     -> {\cf17 decltype}(ElementsAreArray(xs.begin(), xs.end())) \{\par
4187   {\cf19 return} ElementsAreArray(xs.begin(), xs.end());\par
4188 \}\par
4189 \par
4190 {\cf20 // UnorderedElementsAreArray(iterator_first, iterator_last)}\par
4191 {\cf20 // UnorderedElementsAreArray(pointer, count)}\par
4192 {\cf20 // UnorderedElementsAreArray(array)}\par
4193 {\cf20 // UnorderedElementsAreArray(container)}\par
4194 {\cf20 // UnorderedElementsAreArray(\{ e1, e2, ..., en \})}\par
4195 {\cf20 //}\par
4196 {\cf20 // UnorderedElementsAreArray() verifies that a bijective mapping onto a}\par
4197 {\cf20 // collection of matchers exists.}\par
4198 {\cf20 //}\par
4199 {\cf20 // The matchers can be specified as an array, a pointer and count, a container,}\par
4200 {\cf20 // an initializer list, or an STL iterator range. In each of these cases, the}\par
4201 {\cf20 // underlying matchers can be either values or matchers.}\par
4202 \par
4203 {\cf17 template} <{\cf17 typename} Iter>\par
4204 {\cf17 inline} internal::UnorderedElementsAreArrayMatcher<\par
4205     typename ::std::iterator_traits<Iter>::value_type>\par
4206 UnorderedElementsAreArray(Iter first, Iter last) \{\par
4207   {\cf17 typedef} typename ::std::iterator_traits<Iter>::value_type T;\par
4208   {\cf19 return} internal::UnorderedElementsAreArrayMatcher<T>(\par
4209       internal::UnorderedMatcherRequire::ExactMatch, first, last);\par
4210 \}\par
4211 \par
4212 {\cf17 template} <{\cf17 typename} T>\par
4213 {\cf17 inline} internal::UnorderedElementsAreArrayMatcher<T> UnorderedElementsAreArray(\par
4214     {\cf17 const} T* pointer, {\cf18 size_t} count) \{\par
4215   {\cf19 return} UnorderedElementsAreArray(pointer, pointer + count);\par
4216 \}\par
4217 \par
4218 {\cf17 template} <{\cf17 typename} T, {\cf18 size_t} N>\par
4219 {\cf17 inline} internal::UnorderedElementsAreArrayMatcher<T> UnorderedElementsAreArray(\par
4220     {\cf17 const} T (&array)[N]) \{\par
4221   {\cf19 return} UnorderedElementsAreArray(array, N);\par
4222 \}\par
4223 \par
4224 {\cf17 template} <{\cf17 typename} Container>\par
4225 {\cf17 inline} internal::UnorderedElementsAreArrayMatcher<\par
4226     {\cf17 typename} Container::value_type>\par
4227 UnorderedElementsAreArray({\cf17 const} Container& container) \{\par
4228   {\cf19 return} UnorderedElementsAreArray(container.begin(), container.end());\par
4229 \}\par
4230 \par
4231 {\cf17 template} <{\cf17 typename} T>\par
4232 {\cf17 inline} internal::UnorderedElementsAreArrayMatcher<T> UnorderedElementsAreArray(\par
4233     ::std::initializer_list<T> xs) \{\par
4234   {\cf19 return} UnorderedElementsAreArray(xs.begin(), xs.end());\par
4235 \}\par
4236 \par
4237 {\cf20 // _ is a matcher that matches anything of any type.}\par
4238 {\cf20 //}\par
4239 {\cf20 // This definition is fine as:}\par
4240 {\cf20 //}\par
4241 {\cf20 //   1. The C++ standard permits using the name _ in a namespace that}\par
4242 {\cf20 //      is not the global namespace or ::std.}\par
4243 {\cf20 //   2. The AnythingMatcher class has no data member or constructor,}\par
4244 {\cf20 //      so it's OK to create global variables of this type.}\par
4245 {\cf20 //   3. c-style has approved of using _ in this case.}\par
4246 {\cf17 const} internal::AnythingMatcher _ = \{\};\par
4247 {\cf20 // Creates a matcher that matches any value of the given type T.}\par
4248 {\cf17 template} <{\cf17 typename} T>\par
4249 {\cf17 inline} Matcher<T> A() \{\par
4250   {\cf19 return} _;\par
4251 \}\par
4252 \par
4253 {\cf20 // Creates a matcher that matches any value of the given type T.}\par
4254 {\cf17 template} <{\cf17 typename} T>\par
4255 {\cf17 inline} Matcher<T> An() \{\par
4256   {\cf19 return} _;\par
4257 \}\par
4258 \par
4259 {\cf17 template} <{\cf17 typename} T, {\cf17 typename} M>\par
4260 Matcher<T> internal::MatcherCastImpl<T, M>::CastImpl(\par
4261     {\cf17 const} M& value, std::false_type {\cf20 /* convertible_to_matcher */},\par
4262     std::false_type {\cf20 /* convertible_to_T */}) \{\par
4263   {\cf19 return} Eq(value);\par
4264 \}\par
4265 \par
4266 {\cf20 // Creates a polymorphic matcher that matches any NULL pointer.}\par
4267 {\cf17 inline} PolymorphicMatcher<internal::IsNullMatcher> IsNull() \{\par
4268   {\cf19 return} MakePolymorphicMatcher(internal::IsNullMatcher());\par
4269 \}\par
4270 \par
4271 {\cf20 // Creates a polymorphic matcher that matches any non-NULL pointer.}\par
4272 {\cf20 // This is convenient as Not(NULL) doesn't compile (the compiler}\par
4273 {\cf20 // thinks that that expression is comparing a pointer with an integer).}\par
4274 {\cf17 inline} PolymorphicMatcher<internal::NotNullMatcher> NotNull() \{\par
4275   {\cf19 return} MakePolymorphicMatcher(internal::NotNullMatcher());\par
4276 \}\par
4277 \par
4278 {\cf20 // Creates a polymorphic matcher that matches any argument that}\par
4279 {\cf20 // references variable x.}\par
4280 {\cf17 template} <{\cf17 typename} T>\par
4281 {\cf17 inline} internal::RefMatcher<T&> Ref(T& x) \{  {\cf20 // NOLINT}\par
4282   {\cf19 return} internal::RefMatcher<T&>(x);\par
4283 \}\par
4284 \par
4285 {\cf20 // Creates a polymorphic matcher that matches any NaN floating point.}\par
4286 {\cf17 inline} PolymorphicMatcher<internal::IsNanMatcher> IsNan() \{\par
4287   {\cf19 return} MakePolymorphicMatcher(internal::IsNanMatcher());\par
4288 \}\par
4289 \par
4290 {\cf20 // Creates a matcher that matches any double argument approximately}\par
4291 {\cf20 // equal to rhs, where two NANs are considered unequal.}\par
4292 {\cf17 inline} internal::FloatingEqMatcher<double> DoubleEq({\cf18 double} rhs) \{\par
4293   {\cf19 return} internal::FloatingEqMatcher<double>(rhs, {\cf17 false});\par
4294 \}\par
4295 \par
4296 {\cf20 // Creates a matcher that matches any double argument approximately}\par
4297 {\cf20 // equal to rhs, including NaN values when rhs is NaN.}\par
4298 {\cf17 inline} internal::FloatingEqMatcher<double> NanSensitiveDoubleEq({\cf18 double} rhs) \{\par
4299   {\cf19 return} internal::FloatingEqMatcher<double>(rhs, {\cf17 true});\par
4300 \}\par
4301 \par
4302 {\cf20 // Creates a matcher that matches any double argument approximately equal to}\par
4303 {\cf20 // rhs, up to the specified max absolute error bound, where two NANs are}\par
4304 {\cf20 // considered unequal.  The max absolute error bound must be non-negative.}\par
4305 {\cf17 inline} internal::FloatingEqMatcher<double> DoubleNear({\cf18 double} rhs,\par
4306                                                       {\cf18 double} max_abs_error) \{\par
4307   {\cf19 return} internal::FloatingEqMatcher<double>(rhs, {\cf17 false}, max_abs_error);\par
4308 \}\par
4309 \par
4310 {\cf20 // Creates a matcher that matches any double argument approximately equal to}\par
4311 {\cf20 // rhs, up to the specified max absolute error bound, including NaN values when}\par
4312 {\cf20 // rhs is NaN.  The max absolute error bound must be non-negative.}\par
4313 {\cf17 inline} internal::FloatingEqMatcher<double> NanSensitiveDoubleNear(\par
4314     {\cf18 double} rhs, {\cf18 double} max_abs_error) \{\par
4315   {\cf19 return} internal::FloatingEqMatcher<double>(rhs, {\cf17 true}, max_abs_error);\par
4316 \}\par
4317 \par
4318 {\cf20 // Creates a matcher that matches any float argument approximately}\par
4319 {\cf20 // equal to rhs, where two NANs are considered unequal.}\par
4320 {\cf17 inline} internal::FloatingEqMatcher<float> FloatEq({\cf18 float} rhs) \{\par
4321   {\cf19 return} internal::FloatingEqMatcher<float>(rhs, {\cf17 false});\par
4322 \}\par
4323 \par
4324 {\cf20 // Creates a matcher that matches any float argument approximately}\par
4325 {\cf20 // equal to rhs, including NaN values when rhs is NaN.}\par
4326 {\cf17 inline} internal::FloatingEqMatcher<float> NanSensitiveFloatEq({\cf18 float} rhs) \{\par
4327   {\cf19 return} internal::FloatingEqMatcher<float>(rhs, {\cf17 true});\par
4328 \}\par
4329 \par
4330 {\cf20 // Creates a matcher that matches any float argument approximately equal to}\par
4331 {\cf20 // rhs, up to the specified max absolute error bound, where two NANs are}\par
4332 {\cf20 // considered unequal.  The max absolute error bound must be non-negative.}\par
4333 {\cf17 inline} internal::FloatingEqMatcher<float> FloatNear({\cf18 float} rhs,\par
4334                                                     {\cf18 float} max_abs_error) \{\par
4335   {\cf19 return} internal::FloatingEqMatcher<float>(rhs, {\cf17 false}, max_abs_error);\par
4336 \}\par
4337 \par
4338 {\cf20 // Creates a matcher that matches any float argument approximately equal to}\par
4339 {\cf20 // rhs, up to the specified max absolute error bound, including NaN values when}\par
4340 {\cf20 // rhs is NaN.  The max absolute error bound must be non-negative.}\par
4341 {\cf17 inline} internal::FloatingEqMatcher<float> NanSensitiveFloatNear(\par
4342     {\cf18 float} rhs, {\cf18 float} max_abs_error) \{\par
4343   {\cf19 return} internal::FloatingEqMatcher<float>(rhs, {\cf17 true}, max_abs_error);\par
4344 \}\par
4345 \par
4346 {\cf20 // Creates a matcher that matches a pointer (raw or smart) that points}\par
4347 {\cf20 // to a value that matches inner_matcher.}\par
4348 {\cf17 template} <{\cf17 typename} InnerMatcher>\par
4349 {\cf17 inline} internal::PointeeMatcher<InnerMatcher> Pointee(\par
4350     {\cf17 const} InnerMatcher& inner_matcher) \{\par
4351   {\cf19 return} internal::PointeeMatcher<InnerMatcher>(inner_matcher);\par
4352 \}\par
4353 \par
4354 {\cf21 #if GTEST_HAS_RTTI}\par
4355 {\cf20 // Creates a matcher that matches a pointer or reference that matches}\par
4356 {\cf20 // inner_matcher when dynamic_cast<To> is applied.}\par
4357 {\cf20 // The result of dynamic_cast<To> is forwarded to the inner matcher.}\par
4358 {\cf20 // If To is a pointer and the cast fails, the inner matcher will receive NULL.}\par
4359 {\cf20 // If To is a reference and the cast fails, this matcher returns false}\par
4360 {\cf20 // immediately.}\par
4361 {\cf17 template} <{\cf17 typename} To>\par
4362 {\cf17 inline} PolymorphicMatcher<internal::WhenDynamicCastToMatcher<To>>\par
4363 WhenDynamicCastTo({\cf17 const} Matcher<To>& inner_matcher) \{\par
4364   {\cf19 return} MakePolymorphicMatcher(\par
4365       internal::WhenDynamicCastToMatcher<To>(inner_matcher));\par
4366 \}\par
4367 {\cf21 #endif  }{\cf20 // GTEST_HAS_RTTI}\par
4368 \par
4369 {\cf20 // Creates a matcher that matches an object whose given field matches}\par
4370 {\cf20 // 'matcher'.  For example,}\par
4371 {\cf20 //   Field(&Foo::number, Ge(5))}\par
4372 {\cf20 // matches a Foo object x if and only if x.number >= 5.}\par
4373 {\cf17 template} <{\cf17 typename} Class, {\cf17 typename} FieldType, {\cf17 typename} FieldMatcher>\par
4374 {\cf17 inline} PolymorphicMatcher<internal::FieldMatcher<Class, FieldType>> Field(\par
4375     FieldType Class::*field, {\cf17 const} FieldMatcher& matcher) \{\par
4376   {\cf19 return} MakePolymorphicMatcher(internal::FieldMatcher<Class, FieldType>(\par
4377       field, MatcherCast<const FieldType&>(matcher)));\par
4378   {\cf20 // The call to MatcherCast() is required for supporting inner}\par
4379   {\cf20 // matchers of compatible types.  For example, it allows}\par
4380   {\cf20 //   Field(&Foo::bar, m)}\par
4381   {\cf20 // to compile where bar is an int32 and m is a matcher for int64.}\par
4382 \}\par
4383 \par
4384 {\cf20 // Same as Field() but also takes the name of the field to provide better error}\par
4385 {\cf20 // messages.}\par
4386 {\cf17 template} <{\cf17 typename} Class, {\cf17 typename} FieldType, {\cf17 typename} FieldMatcher>\par
4387 {\cf17 inline} PolymorphicMatcher<internal::FieldMatcher<Class, FieldType>> Field(\par
4388     {\cf17 const} std::string& field_name, FieldType Class::*field,\par
4389     {\cf17 const} FieldMatcher& matcher) \{\par
4390   {\cf19 return} MakePolymorphicMatcher(internal::FieldMatcher<Class, FieldType>(\par
4391       field_name, field, MatcherCast<const FieldType&>(matcher)));\par
4392 \}\par
4393 \par
4394 {\cf20 // Creates a matcher that matches an object whose given property}\par
4395 {\cf20 // matches 'matcher'.  For example,}\par
4396 {\cf20 //   Property(&Foo::str, StartsWith("hi"))}\par
4397 {\cf20 // matches a Foo object x if and only if x.str() starts with "hi".}\par
4398 {\cf17 template} <{\cf17 typename} Class, {\cf17 typename} PropertyType, {\cf17 typename} PropertyMatcher>\par
4399 {\cf17 inline} PolymorphicMatcher<internal::PropertyMatcher<\par
4400     Class, PropertyType, PropertyType (Class::*)() {\cf17 const}>>\par
4401 Property(PropertyType (Class::*property)() {\cf17 const},\par
4402          {\cf17 const} PropertyMatcher& matcher) \{\par
4403   {\cf19 return} MakePolymorphicMatcher(\par
4404       internal::PropertyMatcher<Class, PropertyType,\par
4405                                 PropertyType (Class::*)() {\cf17 const}>(\par
4406           property, MatcherCast<const PropertyType&>(matcher)));\par
4407   {\cf20 // The call to MatcherCast() is required for supporting inner}\par
4408   {\cf20 // matchers of compatible types.  For example, it allows}\par
4409   {\cf20 //   Property(&Foo::bar, m)}\par
4410   {\cf20 // to compile where bar() returns an int32 and m is a matcher for int64.}\par
4411 \}\par
4412 \par
4413 {\cf20 // Same as Property() above, but also takes the name of the property to provide}\par
4414 {\cf20 // better error messages.}\par
4415 {\cf17 template} <{\cf17 typename} Class, {\cf17 typename} PropertyType, {\cf17 typename} PropertyMatcher>\par
4416 {\cf17 inline} PolymorphicMatcher<internal::PropertyMatcher<\par
4417     Class, PropertyType, PropertyType (Class::*)() {\cf17 const}>>\par
4418 Property({\cf17 const} std::string& property_name,\par
4419          PropertyType (Class::*property)() {\cf17 const},\par
4420          {\cf17 const} PropertyMatcher& matcher) \{\par
4421   {\cf19 return} MakePolymorphicMatcher(\par
4422       internal::PropertyMatcher<Class, PropertyType,\par
4423                                 PropertyType (Class::*)() {\cf17 const}>(\par
4424           property_name, property, MatcherCast<const PropertyType&>(matcher)));\par
4425 \}\par
4426 \par
4427 {\cf20 // The same as above but for reference-qualified member functions.}\par
4428 {\cf17 template} <{\cf17 typename} Class, {\cf17 typename} PropertyType, {\cf17 typename} PropertyMatcher>\par
4429 {\cf17 inline} PolymorphicMatcher<internal::PropertyMatcher<\par
4430     Class, PropertyType, PropertyType (Class::*)() {\cf17 const}&>>\par
4431 Property(PropertyType (Class::*property)() {\cf17 const}&,\par
4432          {\cf17 const} PropertyMatcher& matcher) \{\par
4433   {\cf19 return} MakePolymorphicMatcher(\par
4434       internal::PropertyMatcher<Class, PropertyType,\par
4435                                 PropertyType (Class::*)() {\cf17 const}&>(\par
4436           property, MatcherCast<const PropertyType&>(matcher)));\par
4437 \}\par
4438 \par
4439 {\cf20 // Three-argument form for reference-qualified member functions.}\par
4440 {\cf17 template} <{\cf17 typename} Class, {\cf17 typename} PropertyType, {\cf17 typename} PropertyMatcher>\par
4441 {\cf17 inline} PolymorphicMatcher<internal::PropertyMatcher<\par
4442     Class, PropertyType, PropertyType (Class::*)() {\cf17 const}&>>\par
4443 Property({\cf17 const} std::string& property_name,\par
4444          PropertyType (Class::*property)() {\cf17 const}&,\par
4445          {\cf17 const} PropertyMatcher& matcher) \{\par
4446   {\cf19 return} MakePolymorphicMatcher(\par
4447       internal::PropertyMatcher<Class, PropertyType,\par
4448                                 PropertyType (Class::*)() {\cf17 const}&>(\par
4449           property_name, property, MatcherCast<const PropertyType&>(matcher)));\par
4450 \}\par
4451 \par
4452 {\cf20 // Creates a matcher that matches an object if and only if the result of}\par
4453 {\cf20 // applying a callable to x matches 'matcher'. For example,}\par
4454 {\cf20 //   ResultOf(f, StartsWith("hi"))}\par
4455 {\cf20 // matches a Foo object x if and only if f(x) starts with "hi".}\par
4456 {\cf20 // `callable` parameter can be a function, function pointer, or a functor. It is}\par
4457 {\cf20 // required to keep no state affecting the results of the calls on it and make}\par
4458 {\cf20 // no assumptions about how many calls will be made. Any state it keeps must be}\par
4459 {\cf20 // protected from the concurrent access.}\par
4460 {\cf17 template} <{\cf17 typename} Callable, {\cf17 typename} InnerMatcher>\par
4461 internal::ResultOfMatcher<Callable, InnerMatcher> ResultOf(\par
4462     Callable callable, InnerMatcher matcher) \{\par
4463   {\cf19 return} internal::ResultOfMatcher<Callable, InnerMatcher>(std::move(callable),\par
4464                                                            std::move(matcher));\par
4465 \}\par
4466 \par
4467 {\cf20 // Same as ResultOf() above, but also takes a description of the `callable`}\par
4468 {\cf20 // result to provide better error messages.}\par
4469 {\cf17 template} <{\cf17 typename} Callable, {\cf17 typename} InnerMatcher>\par
4470 internal::ResultOfMatcher<Callable, InnerMatcher> ResultOf(\par
4471     {\cf17 const} std::string& result_description, Callable callable,\par
4472     InnerMatcher matcher) \{\par
4473   {\cf19 return} internal::ResultOfMatcher<Callable, InnerMatcher>(\par
4474       result_description, std::move(callable), std::move(matcher));\par
4475 \}\par
4476 \par
4477 {\cf20 // String matchers.}\par
4478 \par
4479 {\cf20 // Matches a string equal to str.}\par
4480 {\cf17 template} <{\cf17 typename} T = std::{\cf18 string}>\par
4481 PolymorphicMatcher<internal::StrEqualityMatcher<std::string>> StrEq(\par
4482     {\cf17 const} internal::StringLike<T>& str) \{\par
4483   {\cf19 return} MakePolymorphicMatcher(\par
4484       internal::StrEqualityMatcher<std::string>(std::string(str), {\cf17 true}, {\cf17 true}));\par
4485 \}\par
4486 \par
4487 {\cf20 // Matches a string not equal to str.}\par
4488 {\cf17 template} <{\cf17 typename} T = std::{\cf18 string}>\par
4489 PolymorphicMatcher<internal::StrEqualityMatcher<std::string>> StrNe(\par
4490     {\cf17 const} internal::StringLike<T>& str) \{\par
4491   {\cf19 return} MakePolymorphicMatcher(\par
4492       internal::StrEqualityMatcher<std::string>(std::string(str), {\cf17 false}, {\cf17 true}));\par
4493 \}\par
4494 \par
4495 {\cf20 // Matches a string equal to str, ignoring case.}\par
4496 {\cf17 template} <{\cf17 typename} T = std::{\cf18 string}>\par
4497 PolymorphicMatcher<internal::StrEqualityMatcher<std::string>> StrCaseEq(\par
4498     {\cf17 const} internal::StringLike<T>& str) \{\par
4499   {\cf19 return} MakePolymorphicMatcher(\par
4500       internal::StrEqualityMatcher<std::string>(std::string(str), {\cf17 true}, {\cf17 false}));\par
4501 \}\par
4502 \par
4503 {\cf20 // Matches a string not equal to str, ignoring case.}\par
4504 {\cf17 template} <{\cf17 typename} T = std::{\cf18 string}>\par
4505 PolymorphicMatcher<internal::StrEqualityMatcher<std::string>> StrCaseNe(\par
4506     {\cf17 const} internal::StringLike<T>& str) \{\par
4507   {\cf19 return} MakePolymorphicMatcher(internal::StrEqualityMatcher<std::string>(\par
4508       std::string(str), {\cf17 false}, {\cf17 false}));\par
4509 \}\par
4510 \par
4511 {\cf20 // Creates a matcher that matches any string, std::string, or C string}\par
4512 {\cf20 // that contains the given substring.}\par
4513 {\cf17 template} <{\cf17 typename} T = std::{\cf18 string}>\par
4514 PolymorphicMatcher<internal::HasSubstrMatcher<std::string>> HasSubstr(\par
4515     {\cf17 const} internal::StringLike<T>& substring) \{\par
4516   {\cf19 return} MakePolymorphicMatcher(\par
4517       internal::HasSubstrMatcher<std::string>(std::string(substring)));\par
4518 \}\par
4519 \par
4520 {\cf20 // Matches a string that starts with 'prefix' (case-sensitive).}\par
4521 {\cf17 template} <{\cf17 typename} T = std::{\cf18 string}>\par
4522 PolymorphicMatcher<internal::StartsWithMatcher<std::string>> StartsWith(\par
4523     {\cf17 const} internal::StringLike<T>& prefix) \{\par
4524   {\cf19 return} MakePolymorphicMatcher(\par
4525       internal::StartsWithMatcher<std::string>(std::string(prefix)));\par
4526 \}\par
4527 \par
4528 {\cf20 // Matches a string that ends with 'suffix' (case-sensitive).}\par
4529 {\cf17 template} <{\cf17 typename} T = std::{\cf18 string}>\par
4530 PolymorphicMatcher<internal::EndsWithMatcher<std::string>> EndsWith(\par
4531     {\cf17 const} internal::StringLike<T>& suffix) \{\par
4532   {\cf19 return} MakePolymorphicMatcher(\par
4533       internal::EndsWithMatcher<std::string>(std::string(suffix)));\par
4534 \}\par
4535 \par
4536 {\cf21 #if GTEST_HAS_STD_WSTRING}\par
4537 {\cf20 // Wide string matchers.}\par
4538 \par
4539 {\cf20 // Matches a string equal to str.}\par
4540 {\cf17 inline} PolymorphicMatcher<internal::StrEqualityMatcher<std::wstring>> StrEq(\par
4541     {\cf17 const} std::wstring& str) \{\par
4542   {\cf19 return} MakePolymorphicMatcher(\par
4543       internal::StrEqualityMatcher<std::wstring>(str, {\cf17 true}, {\cf17 true}));\par
4544 \}\par
4545 \par
4546 {\cf20 // Matches a string not equal to str.}\par
4547 {\cf17 inline} PolymorphicMatcher<internal::StrEqualityMatcher<std::wstring>> StrNe(\par
4548     {\cf17 const} std::wstring& str) \{\par
4549   {\cf19 return} MakePolymorphicMatcher(\par
4550       internal::StrEqualityMatcher<std::wstring>(str, {\cf17 false}, {\cf17 true}));\par
4551 \}\par
4552 \par
4553 {\cf20 // Matches a string equal to str, ignoring case.}\par
4554 {\cf17 inline} PolymorphicMatcher<internal::StrEqualityMatcher<std::wstring>> StrCaseEq(\par
4555     {\cf17 const} std::wstring& str) \{\par
4556   {\cf19 return} MakePolymorphicMatcher(\par
4557       internal::StrEqualityMatcher<std::wstring>(str, {\cf17 true}, {\cf17 false}));\par
4558 \}\par
4559 \par
4560 {\cf20 // Matches a string not equal to str, ignoring case.}\par
4561 {\cf17 inline} PolymorphicMatcher<internal::StrEqualityMatcher<std::wstring>> StrCaseNe(\par
4562     {\cf17 const} std::wstring& str) \{\par
4563   {\cf19 return} MakePolymorphicMatcher(\par
4564       internal::StrEqualityMatcher<std::wstring>(str, {\cf17 false}, {\cf17 false}));\par
4565 \}\par
4566 \par
4567 {\cf20 // Creates a matcher that matches any ::wstring, std::wstring, or C wide string}\par
4568 {\cf20 // that contains the given substring.}\par
4569 {\cf17 inline} PolymorphicMatcher<internal::HasSubstrMatcher<std::wstring>> HasSubstr(\par
4570     {\cf17 const} std::wstring& substring) \{\par
4571   {\cf19 return} MakePolymorphicMatcher(\par
4572       internal::HasSubstrMatcher<std::wstring>(substring));\par
4573 \}\par
4574 \par
4575 {\cf20 // Matches a string that starts with 'prefix' (case-sensitive).}\par
4576 {\cf17 inline} PolymorphicMatcher<internal::StartsWithMatcher<std::wstring>> StartsWith(\par
4577     {\cf17 const} std::wstring& prefix) \{\par
4578   {\cf19 return} MakePolymorphicMatcher(\par
4579       internal::StartsWithMatcher<std::wstring>(prefix));\par
4580 \}\par
4581 \par
4582 {\cf20 // Matches a string that ends with 'suffix' (case-sensitive).}\par
4583 {\cf17 inline} PolymorphicMatcher<internal::EndsWithMatcher<std::wstring>> EndsWith(\par
4584     {\cf17 const} std::wstring& suffix) \{\par
4585   {\cf19 return} MakePolymorphicMatcher(\par
4586       internal::EndsWithMatcher<std::wstring>(suffix));\par
4587 \}\par
4588 \par
4589 {\cf21 #endif  }{\cf20 // GTEST_HAS_STD_WSTRING}\par
4590 \par
4591 {\cf20 // Creates a polymorphic matcher that matches a 2-tuple where the}\par
4592 {\cf20 // first field == the second field.}\par
4593 {\cf17 inline} internal::Eq2Matcher Eq() \{ {\cf19 return} internal::Eq2Matcher(); \}\par
4594 \par
4595 {\cf20 // Creates a polymorphic matcher that matches a 2-tuple where the}\par
4596 {\cf20 // first field >= the second field.}\par
4597 {\cf17 inline} internal::Ge2Matcher Ge() \{ {\cf19 return} internal::Ge2Matcher(); \}\par
4598 \par
4599 {\cf20 // Creates a polymorphic matcher that matches a 2-tuple where the}\par
4600 {\cf20 // first field > the second field.}\par
4601 {\cf17 inline} internal::Gt2Matcher Gt() \{ {\cf19 return} internal::Gt2Matcher(); \}\par
4602 \par
4603 {\cf20 // Creates a polymorphic matcher that matches a 2-tuple where the}\par
4604 {\cf20 // first field <= the second field.}\par
4605 {\cf17 inline} internal::Le2Matcher Le() \{ {\cf19 return} internal::Le2Matcher(); \}\par
4606 \par
4607 {\cf20 // Creates a polymorphic matcher that matches a 2-tuple where the}\par
4608 {\cf20 // first field < the second field.}\par
4609 {\cf17 inline} internal::Lt2Matcher Lt() \{ {\cf19 return} internal::Lt2Matcher(); \}\par
4610 \par
4611 {\cf20 // Creates a polymorphic matcher that matches a 2-tuple where the}\par
4612 {\cf20 // first field != the second field.}\par
4613 {\cf17 inline} internal::Ne2Matcher Ne() \{ {\cf19 return} internal::Ne2Matcher(); \}\par
4614 \par
4615 {\cf20 // Creates a polymorphic matcher that matches a 2-tuple where}\par
4616 {\cf20 // FloatEq(first field) matches the second field.}\par
4617 {\cf17 inline} internal::FloatingEq2Matcher<float> FloatEq() \{\par
4618   {\cf19 return} internal::FloatingEq2Matcher<float>();\par
4619 \}\par
4620 \par
4621 {\cf20 // Creates a polymorphic matcher that matches a 2-tuple where}\par
4622 {\cf20 // DoubleEq(first field) matches the second field.}\par
4623 {\cf17 inline} internal::FloatingEq2Matcher<double> DoubleEq() \{\par
4624   {\cf19 return} internal::FloatingEq2Matcher<double>();\par
4625 \}\par
4626 \par
4627 {\cf20 // Creates a polymorphic matcher that matches a 2-tuple where}\par
4628 {\cf20 // FloatEq(first field) matches the second field with NaN equality.}\par
4629 {\cf17 inline} internal::FloatingEq2Matcher<float> NanSensitiveFloatEq() \{\par
4630   {\cf19 return} internal::FloatingEq2Matcher<float>({\cf17 true});\par
4631 \}\par
4632 \par
4633 {\cf20 // Creates a polymorphic matcher that matches a 2-tuple where}\par
4634 {\cf20 // DoubleEq(first field) matches the second field with NaN equality.}\par
4635 {\cf17 inline} internal::FloatingEq2Matcher<double> NanSensitiveDoubleEq() \{\par
4636   {\cf19 return} internal::FloatingEq2Matcher<double>({\cf17 true});\par
4637 \}\par
4638 \par
4639 {\cf20 // Creates a polymorphic matcher that matches a 2-tuple where}\par
4640 {\cf20 // FloatNear(first field, max_abs_error) matches the second field.}\par
4641 {\cf17 inline} internal::FloatingEq2Matcher<float> FloatNear({\cf18 float} max_abs_error) \{\par
4642   {\cf19 return} internal::FloatingEq2Matcher<float>(max_abs_error);\par
4643 \}\par
4644 \par
4645 {\cf20 // Creates a polymorphic matcher that matches a 2-tuple where}\par
4646 {\cf20 // DoubleNear(first field, max_abs_error) matches the second field.}\par
4647 {\cf17 inline} internal::FloatingEq2Matcher<double> DoubleNear({\cf18 double} max_abs_error) \{\par
4648   {\cf19 return} internal::FloatingEq2Matcher<double>(max_abs_error);\par
4649 \}\par
4650 \par
4651 {\cf20 // Creates a polymorphic matcher that matches a 2-tuple where}\par
4652 {\cf20 // FloatNear(first field, max_abs_error) matches the second field with NaN}\par
4653 {\cf20 // equality.}\par
4654 {\cf17 inline} internal::FloatingEq2Matcher<float> NanSensitiveFloatNear(\par
4655     {\cf18 float} max_abs_error) \{\par
4656   {\cf19 return} internal::FloatingEq2Matcher<float>(max_abs_error, {\cf17 true});\par
4657 \}\par
4658 \par
4659 {\cf20 // Creates a polymorphic matcher that matches a 2-tuple where}\par
4660 {\cf20 // DoubleNear(first field, max_abs_error) matches the second field with NaN}\par
4661 {\cf20 // equality.}\par
4662 {\cf17 inline} internal::FloatingEq2Matcher<double> NanSensitiveDoubleNear(\par
4663     {\cf18 double} max_abs_error) \{\par
4664   {\cf19 return} internal::FloatingEq2Matcher<double>(max_abs_error, {\cf17 true});\par
4665 \}\par
4666 \par
4667 {\cf20 // Creates a matcher that matches any value of type T that m doesn't}\par
4668 {\cf20 // match.}\par
4669 {\cf17 template} <{\cf17 typename} InnerMatcher>\par
4670 {\cf17 inline} internal::NotMatcher<InnerMatcher> Not(InnerMatcher m) \{\par
4671   {\cf19 return} internal::NotMatcher<InnerMatcher>(m);\par
4672 \}\par
4673 \par
4674 {\cf20 // Returns a matcher that matches anything that satisfies the given}\par
4675 {\cf20 // predicate.  The predicate can be any unary function or functor}\par
4676 {\cf20 // whose return type can be implicitly converted to bool.}\par
4677 {\cf17 template} <{\cf17 typename} Predicate>\par
4678 {\cf17 inline} PolymorphicMatcher<internal::TrulyMatcher<Predicate>> Truly(\par
4679     Predicate pred) \{\par
4680   {\cf19 return} MakePolymorphicMatcher(internal::TrulyMatcher<Predicate>(pred));\par
4681 \}\par
4682 \par
4683 {\cf20 // Returns a matcher that matches the container size. The container must}\par
4684 {\cf20 // support both size() and size_type which all STL-like containers provide.}\par
4685 {\cf20 // Note that the parameter 'size' can be a value of type size_type as well as}\par
4686 {\cf20 // matcher. For instance:}\par
4687 {\cf20 //   EXPECT_THAT(container, SizeIs(2));     // Checks container has 2 elements.}\par
4688 {\cf20 //   EXPECT_THAT(container, SizeIs(Le(2));  // Checks container has at most 2.}\par
4689 {\cf17 template} <{\cf17 typename} SizeMatcher>\par
4690 {\cf17 inline} internal::SizeIsMatcher<SizeMatcher> SizeIs(\par
4691     {\cf17 const} SizeMatcher& size_matcher) \{\par
4692   {\cf19 return} internal::SizeIsMatcher<SizeMatcher>(size_matcher);\par
4693 \}\par
4694 \par
4695 {\cf20 // Returns a matcher that matches the distance between the container's begin()}\par
4696 {\cf20 // iterator and its end() iterator, i.e. the size of the container. This matcher}\par
4697 {\cf20 // can be used instead of SizeIs with containers such as std::forward_list which}\par
4698 {\cf20 // do not implement size(). The container must provide const_iterator (with}\par
4699 {\cf20 // valid iterator_traits), begin() and end().}\par
4700 {\cf17 template} <{\cf17 typename} DistanceMatcher>\par
4701 {\cf17 inline} internal::BeginEndDistanceIsMatcher<DistanceMatcher> BeginEndDistanceIs(\par
4702     {\cf17 const} DistanceMatcher& distance_matcher) \{\par
4703   {\cf19 return} internal::BeginEndDistanceIsMatcher<DistanceMatcher>(distance_matcher);\par
4704 \}\par
4705 \par
4706 {\cf20 // Returns a matcher that matches an equal container.}\par
4707 {\cf20 // This matcher behaves like Eq(), but in the event of mismatch lists the}\par
4708 {\cf20 // values that are included in one container but not the other. (Duplicate}\par
4709 {\cf20 // values and order differences are not explained.)}\par
4710 {\cf17 template} <{\cf17 typename} Container>\par
4711 {\cf17 inline} PolymorphicMatcher<\par
4712     internal::ContainerEqMatcher<typename std::remove_const<Container>::type>>\par
4713 ContainerEq({\cf17 const} Container& rhs) \{\par
4714   {\cf19 return} MakePolymorphicMatcher(internal::ContainerEqMatcher<Container>(rhs));\par
4715 \}\par
4716 \par
4717 {\cf20 // Returns a matcher that matches a container that, when sorted using}\par
4718 {\cf20 // the given comparator, matches container_matcher.}\par
4719 {\cf17 template} <{\cf17 typename} Comparator, {\cf17 typename} ContainerMatcher>\par
4720 {\cf17 inline} internal::WhenSortedByMatcher<Comparator, ContainerMatcher> WhenSortedBy(\par
4721     {\cf17 const} Comparator& comparator, {\cf17 const} ContainerMatcher& container_matcher) \{\par
4722   {\cf19 return} internal::WhenSortedByMatcher<Comparator, ContainerMatcher>(\par
4723       comparator, container_matcher);\par
4724 \}\par
4725 \par
4726 {\cf20 // Returns a matcher that matches a container that, when sorted using}\par
4727 {\cf20 // the < operator, matches container_matcher.}\par
4728 {\cf17 template} <{\cf17 typename} ContainerMatcher>\par
4729 {\cf17 inline} internal::WhenSortedByMatcher<internal::LessComparator, ContainerMatcher>\par
4730 WhenSorted({\cf17 const} ContainerMatcher& container_matcher) \{\par
4731   {\cf19 return} internal::WhenSortedByMatcher<internal::LessComparator,\par
4732                                        ContainerMatcher>(\par
4733       internal::LessComparator(), container_matcher);\par
4734 \}\par
4735 \par
4736 {\cf20 // Matches an STL-style container or a native array that contains the}\par
4737 {\cf20 // same number of elements as in rhs, where its i-th element and rhs's}\par
4738 {\cf20 // i-th element (as a pair) satisfy the given pair matcher, for all i.}\par
4739 {\cf20 // TupleMatcher must be able to be safely cast to Matcher<std::tuple<const}\par
4740 {\cf20 // T1&, const T2&> >, where T1 and T2 are the types of elements in the}\par
4741 {\cf20 // LHS container and the RHS container respectively.}\par
4742 {\cf17 template} <{\cf17 typename} TupleMatcher, {\cf17 typename} Container>\par
4743 {\cf17 inline} internal::PointwiseMatcher<TupleMatcher,\par
4744                                   {\cf17 typename} std::remove_const<Container>::type>\par
4745 Pointwise({\cf17 const} TupleMatcher& tuple_matcher, {\cf17 const} Container& rhs) \{\par
4746   {\cf19 return} internal::PointwiseMatcher<TupleMatcher, Container>(tuple_matcher,\par
4747                                                              rhs);\par
4748 \}\par
4749 \par
4750 {\cf20 // Supports the Pointwise(m, \{a, b, c\}) syntax.}\par
4751 {\cf17 template} <{\cf17 typename} TupleMatcher, {\cf17 typename} T>\par
4752 {\cf17 inline} internal::PointwiseMatcher<TupleMatcher, std::vector<T>> Pointwise(\par
4753     {\cf17 const} TupleMatcher& tuple_matcher, std::initializer_list<T> rhs) \{\par
4754   {\cf19 return} Pointwise(tuple_matcher, std::vector<T>(rhs));\par
4755 \}\par
4756 \par
4757 {\cf20 // UnorderedPointwise(pair_matcher, rhs) matches an STL-style}\par
4758 {\cf20 // container or a native array that contains the same number of}\par
4759 {\cf20 // elements as in rhs, where in some permutation of the container, its}\par
4760 {\cf20 // i-th element and rhs's i-th element (as a pair) satisfy the given}\par
4761 {\cf20 // pair matcher, for all i.  Tuple2Matcher must be able to be safely}\par
4762 {\cf20 // cast to Matcher<std::tuple<const T1&, const T2&> >, where T1 and T2 are}\par
4763 {\cf20 // the types of elements in the LHS container and the RHS container}\par
4764 {\cf20 // respectively.}\par
4765 {\cf20 //}\par
4766 {\cf20 // This is like Pointwise(pair_matcher, rhs), except that the element}\par
4767 {\cf20 // order doesn't matter.}\par
4768 {\cf17 template} <{\cf17 typename} Tuple2Matcher, {\cf17 typename} RhsContainer>\par
4769 {\cf17 inline} internal::UnorderedElementsAreArrayMatcher<\par
4770     {\cf17 typename} internal::BoundSecondMatcher<\par
4771         Tuple2Matcher,\par
4772         {\cf17 typename} internal::StlContainerView<\par
4773             {\cf17 typename} std::remove_const<RhsContainer>::type>::type::value_type>>\par
4774 UnorderedPointwise({\cf17 const} Tuple2Matcher& tuple2_matcher,\par
4775                    {\cf17 const} RhsContainer& rhs_container) \{\par
4776   {\cf20 // RhsView allows the same code to handle RhsContainer being a}\par
4777   {\cf20 // STL-style container and it being a native C-style array.}\par
4778   {\cf17 typedef} {\cf17 typename} internal::StlContainerView<RhsContainer> RhsView;\par
4779   {\cf17 typedef} {\cf17 typename} RhsView::type RhsStlContainer;\par
4780   {\cf17 typedef} {\cf17 typename} RhsStlContainer::value_type Second;\par
4781   {\cf17 const} RhsStlContainer& rhs_stl_container =\par
4782       RhsView::ConstReference(rhs_container);\par
4783 \par
4784   {\cf20 // Create a matcher for each element in rhs_container.}\par
4785   ::std::vector<internal::BoundSecondMatcher<Tuple2Matcher, Second>> matchers;\par
4786   {\cf19 for} ({\cf17 auto} it = rhs_stl_container.begin(); it != rhs_stl_container.end();\par
4787        ++it) \{\par
4788     matchers.push_back(internal::MatcherBindSecond(tuple2_matcher, *it));\par
4789   \}\par
4790 \par
4791   {\cf20 // Delegate the work to UnorderedElementsAreArray().}\par
4792   {\cf19 return} UnorderedElementsAreArray(matchers);\par
4793 \}\par
4794 \par
4795 {\cf20 // Supports the UnorderedPointwise(m, \{a, b, c\}) syntax.}\par
4796 {\cf17 template} <{\cf17 typename} Tuple2Matcher, {\cf17 typename} T>\par
4797 {\cf17 inline} internal::UnorderedElementsAreArrayMatcher<\par
4798     {\cf17 typename} internal::BoundSecondMatcher<Tuple2Matcher, T>>\par
4799 UnorderedPointwise({\cf17 const} Tuple2Matcher& tuple2_matcher,\par
4800                    std::initializer_list<T> rhs) \{\par
4801   {\cf19 return} UnorderedPointwise(tuple2_matcher, std::vector<T>(rhs));\par
4802 \}\par
4803 \par
4804 {\cf20 // Matches an STL-style container or a native array that contains at}\par
4805 {\cf20 // least one element matching the given value or matcher.}\par
4806 {\cf20 //}\par
4807 {\cf20 // Examples:}\par
4808 {\cf20 //   ::std::set<int> page_ids;}\par
4809 {\cf20 //   page_ids.insert(3);}\par
4810 {\cf20 //   page_ids.insert(1);}\par
4811 {\cf20 //   EXPECT_THAT(page_ids, Contains(1));}\par
4812 {\cf20 //   EXPECT_THAT(page_ids, Contains(Gt(2)));}\par
4813 {\cf20 //   EXPECT_THAT(page_ids, Not(Contains(4)));  // See below for Times(0)}\par
4814 {\cf20 //}\par
4815 {\cf20 //   ::std::map<int, size_t> page_lengths;}\par
4816 {\cf20 //   page_lengths[1] = 100;}\par
4817 {\cf20 //   EXPECT_THAT(page_lengths,}\par
4818 {\cf20 //               Contains(::std::pair<const int, size_t>(1, 100)));}\par
4819 {\cf20 //}\par
4820 {\cf20 //   const char* user_ids[] = \{ "joe", "mike", "tom" \};}\par
4821 {\cf20 //   EXPECT_THAT(user_ids, Contains(Eq(::std::string("tom"))));}\par
4822 {\cf20 //}\par
4823 {\cf20 // The matcher supports a modifier `Times` that allows to check for arbitrary}\par
4824 {\cf20 // occurrences including testing for absence with Times(0).}\par
4825 {\cf20 //}\par
4826 {\cf20 // Examples:}\par
4827 {\cf20 //   ::std::vector<int> ids;}\par
4828 {\cf20 //   ids.insert(1);}\par
4829 {\cf20 //   ids.insert(1);}\par
4830 {\cf20 //   ids.insert(3);}\par
4831 {\cf20 //   EXPECT_THAT(ids, Contains(1).Times(2));      // 1 occurs 2 times}\par
4832 {\cf20 //   EXPECT_THAT(ids, Contains(2).Times(0));      // 2 is not present}\par
4833 {\cf20 //   EXPECT_THAT(ids, Contains(3).Times(Ge(1)));  // 3 occurs at least once}\par
4834 \par
4835 {\cf17 template} <{\cf17 typename} M>\par
4836 {\cf17 inline} internal::ContainsMatcher<M> Contains(M matcher) \{\par
4837   {\cf19 return} internal::ContainsMatcher<M>(matcher);\par
4838 \}\par
4839 \par
4840 {\cf20 // IsSupersetOf(iterator_first, iterator_last)}\par
4841 {\cf20 // IsSupersetOf(pointer, count)}\par
4842 {\cf20 // IsSupersetOf(array)}\par
4843 {\cf20 // IsSupersetOf(container)}\par
4844 {\cf20 // IsSupersetOf(\{e1, e2, ..., en\})}\par
4845 {\cf20 //}\par
4846 {\cf20 // IsSupersetOf() verifies that a surjective partial mapping onto a collection}\par
4847 {\cf20 // of matchers exists. In other words, a container matches}\par
4848 {\cf20 // IsSupersetOf(\{e1, ..., en\}) if and only if there is a permutation}\par
4849 {\cf20 // \{y1, ..., yn\} of some of the container's elements where y1 matches e1,}\par
4850 {\cf20 // ..., and yn matches en. Obviously, the size of the container must be >= n}\par
4851 {\cf20 // in order to have a match. Examples:}\par
4852 {\cf20 //}\par
4853 {\cf20 // - \{1, 2, 3\} matches IsSupersetOf(\{Ge(3), Ne(0)\}), as 3 matches Ge(3) and}\par
4854 {\cf20 //   1 matches Ne(0).}\par
4855 {\cf20 // - \{1, 2\} doesn't match IsSupersetOf(\{Eq(1), Lt(2)\}), even though 1 matches}\par
4856 {\cf20 //   both Eq(1) and Lt(2). The reason is that different matchers must be used}\par
4857 {\cf20 //   for elements in different slots of the container.}\par
4858 {\cf20 // - \{1, 1, 2\} matches IsSupersetOf(\{Eq(1), Lt(2)\}), as (the first) 1 matches}\par
4859 {\cf20 //   Eq(1) and (the second) 1 matches Lt(2).}\par
4860 {\cf20 // - \{1, 2, 3\} matches IsSupersetOf(Gt(1), Gt(1)), as 2 matches (the first)}\par
4861 {\cf20 //   Gt(1) and 3 matches (the second) Gt(1).}\par
4862 {\cf20 //}\par
4863 {\cf20 // The matchers can be specified as an array, a pointer and count, a container,}\par
4864 {\cf20 // an initializer list, or an STL iterator range. In each of these cases, the}\par
4865 {\cf20 // underlying matchers can be either values or matchers.}\par
4866 \par
4867 {\cf17 template} <{\cf17 typename} Iter>\par
4868 {\cf17 inline} internal::UnorderedElementsAreArrayMatcher<\par
4869     typename ::std::iterator_traits<Iter>::value_type>\par
4870 IsSupersetOf(Iter first, Iter last) \{\par
4871   {\cf17 typedef} typename ::std::iterator_traits<Iter>::value_type T;\par
4872   {\cf19 return} internal::UnorderedElementsAreArrayMatcher<T>(\par
4873       internal::UnorderedMatcherRequire::Superset, first, last);\par
4874 \}\par
4875 \par
4876 {\cf17 template} <{\cf17 typename} T>\par
4877 {\cf17 inline} internal::UnorderedElementsAreArrayMatcher<T> IsSupersetOf(\par
4878     {\cf17 const} T* pointer, {\cf18 size_t} count) \{\par
4879   {\cf19 return} IsSupersetOf(pointer, pointer + count);\par
4880 \}\par
4881 \par
4882 {\cf17 template} <{\cf17 typename} T, {\cf18 size_t} N>\par
4883 {\cf17 inline} internal::UnorderedElementsAreArrayMatcher<T> IsSupersetOf(\par
4884     {\cf17 const} T (&array)[N]) \{\par
4885   {\cf19 return} IsSupersetOf(array, N);\par
4886 \}\par
4887 \par
4888 {\cf17 template} <{\cf17 typename} Container>\par
4889 {\cf17 inline} internal::UnorderedElementsAreArrayMatcher<\par
4890     {\cf17 typename} Container::value_type>\par
4891 IsSupersetOf({\cf17 const} Container& container) \{\par
4892   {\cf19 return} IsSupersetOf(container.begin(), container.end());\par
4893 \}\par
4894 \par
4895 {\cf17 template} <{\cf17 typename} T>\par
4896 {\cf17 inline} internal::UnorderedElementsAreArrayMatcher<T> IsSupersetOf(\par
4897     ::std::initializer_list<T> xs) \{\par
4898   {\cf19 return} IsSupersetOf(xs.begin(), xs.end());\par
4899 \}\par
4900 \par
4901 {\cf20 // IsSubsetOf(iterator_first, iterator_last)}\par
4902 {\cf20 // IsSubsetOf(pointer, count)}\par
4903 {\cf20 // IsSubsetOf(array)}\par
4904 {\cf20 // IsSubsetOf(container)}\par
4905 {\cf20 // IsSubsetOf(\{e1, e2, ..., en\})}\par
4906 {\cf20 //}\par
4907 {\cf20 // IsSubsetOf() verifies that an injective mapping onto a collection of matchers}\par
4908 {\cf20 // exists.  In other words, a container matches IsSubsetOf(\{e1, ..., en\}) if and}\par
4909 {\cf20 // only if there is a subset of matchers \{m1, ..., mk\} which would match the}\par
4910 {\cf20 // container using UnorderedElementsAre.  Obviously, the size of the container}\par
4911 {\cf20 // must be <= n in order to have a match. Examples:}\par
4912 {\cf20 //}\par
4913 {\cf20 // - \{1\} matches IsSubsetOf(\{Gt(0), Lt(0)\}), as 1 matches Gt(0).}\par
4914 {\cf20 // - \{1, -1\} matches IsSubsetOf(\{Lt(0), Gt(0)\}), as 1 matches Gt(0) and -1}\par
4915 {\cf20 //   matches Lt(0).}\par
4916 {\cf20 // - \{1, 2\} doesn't matches IsSubsetOf(\{Gt(0), Lt(0)\}), even though 1 and 2 both}\par
4917 {\cf20 //   match Gt(0). The reason is that different matchers must be used for}\par
4918 {\cf20 //   elements in different slots of the container.}\par
4919 {\cf20 //}\par
4920 {\cf20 // The matchers can be specified as an array, a pointer and count, a container,}\par
4921 {\cf20 // an initializer list, or an STL iterator range. In each of these cases, the}\par
4922 {\cf20 // underlying matchers can be either values or matchers.}\par
4923 \par
4924 {\cf17 template} <{\cf17 typename} Iter>\par
4925 {\cf17 inline} internal::UnorderedElementsAreArrayMatcher<\par
4926     typename ::std::iterator_traits<Iter>::value_type>\par
4927 IsSubsetOf(Iter first, Iter last) \{\par
4928   {\cf17 typedef} typename ::std::iterator_traits<Iter>::value_type T;\par
4929   {\cf19 return} internal::UnorderedElementsAreArrayMatcher<T>(\par
4930       internal::UnorderedMatcherRequire::Subset, first, last);\par
4931 \}\par
4932 \par
4933 {\cf17 template} <{\cf17 typename} T>\par
4934 {\cf17 inline} internal::UnorderedElementsAreArrayMatcher<T> IsSubsetOf(\par
4935     {\cf17 const} T* pointer, {\cf18 size_t} count) \{\par
4936   {\cf19 return} IsSubsetOf(pointer, pointer + count);\par
4937 \}\par
4938 \par
4939 {\cf17 template} <{\cf17 typename} T, {\cf18 size_t} N>\par
4940 {\cf17 inline} internal::UnorderedElementsAreArrayMatcher<T> IsSubsetOf(\par
4941     {\cf17 const} T (&array)[N]) \{\par
4942   {\cf19 return} IsSubsetOf(array, N);\par
4943 \}\par
4944 \par
4945 {\cf17 template} <{\cf17 typename} Container>\par
4946 {\cf17 inline} internal::UnorderedElementsAreArrayMatcher<\par
4947     {\cf17 typename} Container::value_type>\par
4948 IsSubsetOf({\cf17 const} Container& container) \{\par
4949   {\cf19 return} IsSubsetOf(container.begin(), container.end());\par
4950 \}\par
4951 \par
4952 {\cf17 template} <{\cf17 typename} T>\par
4953 {\cf17 inline} internal::UnorderedElementsAreArrayMatcher<T> IsSubsetOf(\par
4954     ::std::initializer_list<T> xs) \{\par
4955   {\cf19 return} IsSubsetOf(xs.begin(), xs.end());\par
4956 \}\par
4957 \par
4958 {\cf20 // Matches an STL-style container or a native array that contains only}\par
4959 {\cf20 // elements matching the given value or matcher.}\par
4960 {\cf20 //}\par
4961 {\cf20 // Each(m) is semantically equivalent to `Not(Contains(Not(m)))`. Only}\par
4962 {\cf20 // the messages are different.}\par
4963 {\cf20 //}\par
4964 {\cf20 // Examples:}\par
4965 {\cf20 //   ::std::set<int> page_ids;}\par
4966 {\cf20 //   // Each(m) matches an empty container, regardless of what m is.}\par
4967 {\cf20 //   EXPECT_THAT(page_ids, Each(Eq(1)));}\par
4968 {\cf20 //   EXPECT_THAT(page_ids, Each(Eq(77)));}\par
4969 {\cf20 //}\par
4970 {\cf20 //   page_ids.insert(3);}\par
4971 {\cf20 //   EXPECT_THAT(page_ids, Each(Gt(0)));}\par
4972 {\cf20 //   EXPECT_THAT(page_ids, Not(Each(Gt(4))));}\par
4973 {\cf20 //   page_ids.insert(1);}\par
4974 {\cf20 //   EXPECT_THAT(page_ids, Not(Each(Lt(2))));}\par
4975 {\cf20 //}\par
4976 {\cf20 //   ::std::map<int, size_t> page_lengths;}\par
4977 {\cf20 //   page_lengths[1] = 100;}\par
4978 {\cf20 //   page_lengths[2] = 200;}\par
4979 {\cf20 //   page_lengths[3] = 300;}\par
4980 {\cf20 //   EXPECT_THAT(page_lengths, Not(Each(Pair(1, 100))));}\par
4981 {\cf20 //   EXPECT_THAT(page_lengths, Each(Key(Le(3))));}\par
4982 {\cf20 //}\par
4983 {\cf20 //   const char* user_ids[] = \{ "joe", "mike", "tom" \};}\par
4984 {\cf20 //   EXPECT_THAT(user_ids, Not(Each(Eq(::std::string("tom")))));}\par
4985 {\cf17 template} <{\cf17 typename} M>\par
4986 {\cf17 inline} internal::EachMatcher<M> Each(M matcher) \{\par
4987   {\cf19 return} internal::EachMatcher<M>(matcher);\par
4988 \}\par
4989 \par
4990 {\cf20 // Key(inner_matcher) matches an std::pair whose 'first' field matches}\par
4991 {\cf20 // inner_matcher.  For example, Contains(Key(Ge(5))) can be used to match an}\par
4992 {\cf20 // std::map that contains at least one element whose key is >= 5.}\par
4993 {\cf17 template} <{\cf17 typename} M>\par
4994 {\cf17 inline} internal::KeyMatcher<M> Key(M inner_matcher) \{\par
4995   {\cf19 return} internal::KeyMatcher<M>(inner_matcher);\par
4996 \}\par
4997 \par
4998 {\cf20 // Pair(first_matcher, second_matcher) matches a std::pair whose 'first' field}\par
4999 {\cf20 // matches first_matcher and whose 'second' field matches second_matcher.  For}\par
5000 {\cf20 // example, EXPECT_THAT(map_type, ElementsAre(Pair(Ge(5), "foo"))) can be used}\par
5001 {\cf20 // to match a std::map<int, string> that contains exactly one element whose key}\par
5002 {\cf20 // is >= 5 and whose value equals "foo".}\par
5003 {\cf17 template} <{\cf17 typename} FirstMatcher, {\cf17 typename} SecondMatcher>\par
5004 {\cf17 inline} internal::PairMatcher<FirstMatcher, SecondMatcher> Pair(\par
5005     FirstMatcher first_matcher, SecondMatcher second_matcher) \{\par
5006   {\cf19 return} internal::PairMatcher<FirstMatcher, SecondMatcher>(first_matcher,\par
5007                                                             second_matcher);\par
5008 \}\par
5009 \par
5010 {\cf17 namespace }no_adl \{\par
5011 {\cf20 // Conditional() creates a matcher that conditionally uses either the first or}\par
5012 {\cf20 // second matcher provided. For example, we could create an `equal if, and only}\par
5013 {\cf20 // if' matcher using the Conditional wrapper as follows:}\par
5014 {\cf20 //}\par
5015 {\cf20 //   EXPECT_THAT(result, Conditional(condition, Eq(expected), Ne(expected)));}\par
5016 {\cf17 template} <{\cf17 typename} MatcherTrue, {\cf17 typename} MatcherFalse>\par
5017 internal::ConditionalMatcher<MatcherTrue, MatcherFalse> Conditional(\par
5018     {\cf18 bool} condition, MatcherTrue matcher_true, MatcherFalse matcher_false) \{\par
5019   {\cf19 return} internal::ConditionalMatcher<MatcherTrue, MatcherFalse>(\par
5020       condition, std::move(matcher_true), std::move(matcher_false));\par
5021 \}\par
5022 \par
5023 {\cf20 // FieldsAre(matchers...) matches piecewise the fields of compatible structs.}\par
5024 {\cf20 // These include those that support `get<I>(obj)`, and when structured bindings}\par
5025 {\cf20 // are enabled any class that supports them.}\par
5026 {\cf20 // In particular, `std::tuple`, `std::pair`, `std::array` and aggregate types.}\par
5027 {\cf17 template} <{\cf17 typename}... M>\par
5028 internal::FieldsAreMatcher<typename std::decay<M>::type...> FieldsAre(\par
5029     M&&... matchers) \{\par
5030   {\cf19 return} internal::FieldsAreMatcher<typename std::decay<M>::type...>(\par
5031       std::forward<M>(matchers)...);\par
5032 \}\par
5033 \par
5034 {\cf20 // Creates a matcher that matches a pointer (raw or smart) that matches}\par
5035 {\cf20 // inner_matcher.}\par
5036 {\cf17 template} <{\cf17 typename} InnerMatcher>\par
5037 {\cf17 inline} internal::PointerMatcher<InnerMatcher> Pointer(\par
5038     {\cf17 const} InnerMatcher& inner_matcher) \{\par
5039   {\cf19 return} internal::PointerMatcher<InnerMatcher>(inner_matcher);\par
5040 \}\par
5041 \par
5042 {\cf20 // Creates a matcher that matches an object that has an address that matches}\par
5043 {\cf20 // inner_matcher.}\par
5044 {\cf17 template} <{\cf17 typename} InnerMatcher>\par
5045 {\cf17 inline} internal::AddressMatcher<InnerMatcher> Address(\par
5046     {\cf17 const} InnerMatcher& inner_matcher) \{\par
5047   {\cf19 return} internal::AddressMatcher<InnerMatcher>(inner_matcher);\par
5048 \}\par
5049 \par
5050 {\cf20 // Matches a base64 escaped string, when the unescaped string matches the}\par
5051 {\cf20 // internal matcher.}\par
5052 {\cf17 template} <{\cf17 typename} MatcherType>\par
5053 internal::WhenBase64UnescapedMatcher WhenBase64Unescaped(\par
5054     {\cf17 const} MatcherType& internal_matcher) \{\par
5055   {\cf19 return} internal::WhenBase64UnescapedMatcher(internal_matcher);\par
5056 \}\par
5057 \}  {\cf20 // namespace no_adl}\par
5058 \par
5059 {\cf20 // Returns a predicate that is satisfied by anything that matches the}\par
5060 {\cf20 // given matcher.}\par
5061 {\cf17 template} <{\cf17 typename} M>\par
5062 {\cf17 inline} internal::MatcherAsPredicate<M> Matches(M matcher) \{\par
5063   {\cf19 return} internal::MatcherAsPredicate<M>(matcher);\par
5064 \}\par
5065 \par
5066 {\cf20 // Returns true if and only if the value matches the matcher.}\par
5067 {\cf17 template} <{\cf17 typename} T, {\cf17 typename} M>\par
5068 {\cf17 inline} {\cf18 bool} Value({\cf17 const} T& value, M matcher) \{\par
5069   {\cf19 return} testing::Matches(matcher)(value);\par
5070 \}\par
5071 \par
5072 {\cf20 // Matches the value against the given matcher and explains the match}\par
5073 {\cf20 // result to listener.}\par
5074 {\cf17 template} <{\cf17 typename} T, {\cf17 typename} M>\par
5075 {\cf17 inline} {\cf18 bool} ExplainMatchResult(M matcher, {\cf17 const} T& value,\par
5076                                MatchResultListener* listener) \{\par
5077   {\cf19 return} SafeMatcherCast<const T&>(matcher).MatchAndExplain(value, listener);\par
5078 \}\par
5079 \par
5080 {\cf20 // Returns a string representation of the given matcher.  Useful for description}\par
5081 {\cf20 // strings of matchers defined using MATCHER_P* macros that accept matchers as}\par
5082 {\cf20 // their arguments.  For example:}\par
5083 {\cf20 //}\par
5084 {\cf20 // MATCHER_P(XAndYThat, matcher,}\par
5085 {\cf20 //           "X that " + DescribeMatcher<int>(matcher, negation) +}\par
5086 {\cf20 //               (negation ? " or" : " and") + " Y that " +}\par
5087 {\cf20 //               DescribeMatcher<double>(matcher, negation)) \{}\par
5088 {\cf20 //   return ExplainMatchResult(matcher, arg.x(), result_listener) &&}\par
5089 {\cf20 //          ExplainMatchResult(matcher, arg.y(), result_listener);}\par
5090 {\cf20 // \}}\par
5091 {\cf17 template} <{\cf17 typename} T, {\cf17 typename} M>\par
5092 std::string DescribeMatcher({\cf17 const} M& matcher, {\cf18 bool} negation = {\cf17 false}) \{\par
5093   ::std::stringstream ss;\par
5094   Matcher<T> monomorphic_matcher = SafeMatcherCast<T>(matcher);\par
5095   {\cf19 if} (negation) \{\par
5096     monomorphic_matcher.DescribeNegationTo(&ss);\par
5097   \} {\cf19 else} \{\par
5098     monomorphic_matcher.DescribeTo(&ss);\par
5099   \}\par
5100   {\cf19 return} ss.str();\par
5101 \}\par
5102 \par
5103 {\cf17 template} <{\cf17 typename}... Args>\par
5104 internal::ElementsAreMatcher<\par
5105     std::tuple<typename std::decay<const Args&>::type...>>\par
5106 ElementsAre({\cf17 const} Args&... matchers) \{\par
5107   {\cf19 return} internal::ElementsAreMatcher<\par
5108       std::tuple<typename std::decay<const Args&>::type...>>(\par
5109       std::make_tuple(matchers...));\par
5110 \}\par
5111 \par
5112 {\cf17 template} <{\cf17 typename}... Args>\par
5113 internal::UnorderedElementsAreMatcher<\par
5114     std::tuple<typename std::decay<const Args&>::type...>>\par
5115 UnorderedElementsAre({\cf17 const} Args&... matchers) \{\par
5116   {\cf19 return} internal::UnorderedElementsAreMatcher<\par
5117       std::tuple<typename std::decay<const Args&>::type...>>(\par
5118       std::make_tuple(matchers...));\par
5119 \}\par
5120 \par
5121 {\cf20 // Define variadic matcher versions.}\par
5122 {\cf17 template} <{\cf17 typename}... Args>\par
5123 internal::AllOfMatcher<typename std::decay<const Args&>::type...> AllOf(\par
5124     {\cf17 const} Args&... matchers) \{\par
5125   {\cf19 return} internal::AllOfMatcher<typename std::decay<const Args&>::type...>(\par
5126       matchers...);\par
5127 \}\par
5128 \par
5129 {\cf17 template} <{\cf17 typename}... Args>\par
5130 internal::AnyOfMatcher<typename std::decay<const Args&>::type...> AnyOf(\par
5131     {\cf17 const} Args&... matchers) \{\par
5132   {\cf19 return} internal::AnyOfMatcher<typename std::decay<const Args&>::type...>(\par
5133       matchers...);\par
5134 \}\par
5135 \par
5136 {\cf20 // AnyOfArray(array)}\par
5137 {\cf20 // AnyOfArray(pointer, count)}\par
5138 {\cf20 // AnyOfArray(container)}\par
5139 {\cf20 // AnyOfArray(\{ e1, e2, ..., en \})}\par
5140 {\cf20 // AnyOfArray(iterator_first, iterator_last)}\par
5141 {\cf20 //}\par
5142 {\cf20 // AnyOfArray() verifies whether a given value matches any member of a}\par
5143 {\cf20 // collection of matchers.}\par
5144 {\cf20 //}\par
5145 {\cf20 // AllOfArray(array)}\par
5146 {\cf20 // AllOfArray(pointer, count)}\par
5147 {\cf20 // AllOfArray(container)}\par
5148 {\cf20 // AllOfArray(\{ e1, e2, ..., en \})}\par
5149 {\cf20 // AllOfArray(iterator_first, iterator_last)}\par
5150 {\cf20 //}\par
5151 {\cf20 // AllOfArray() verifies whether a given value matches all members of a}\par
5152 {\cf20 // collection of matchers.}\par
5153 {\cf20 //}\par
5154 {\cf20 // The matchers can be specified as an array, a pointer and count, a container,}\par
5155 {\cf20 // an initializer list, or an STL iterator range. In each of these cases, the}\par
5156 {\cf20 // underlying matchers can be either values or matchers.}\par
5157 \par
5158 {\cf17 template} <{\cf17 typename} Iter>\par
5159 {\cf17 inline} internal::AnyOfArrayMatcher<\par
5160     typename ::std::iterator_traits<Iter>::value_type>\par
5161 AnyOfArray(Iter first, Iter last) \{\par
5162   {\cf19 return} internal::AnyOfArrayMatcher<\par
5163       typename ::std::iterator_traits<Iter>::value_type>(first, last);\par
5164 \}\par
5165 \par
5166 {\cf17 template} <{\cf17 typename} Iter>\par
5167 {\cf17 inline} internal::AllOfArrayMatcher<\par
5168     typename ::std::iterator_traits<Iter>::value_type>\par
5169 AllOfArray(Iter first, Iter last) \{\par
5170   {\cf19 return} internal::AllOfArrayMatcher<\par
5171       typename ::std::iterator_traits<Iter>::value_type>(first, last);\par
5172 \}\par
5173 \par
5174 {\cf17 template} <{\cf17 typename} T>\par
5175 {\cf17 inline} internal::AnyOfArrayMatcher<T> AnyOfArray({\cf17 const} T* ptr, {\cf18 size_t} count) \{\par
5176   {\cf19 return} AnyOfArray(ptr, ptr + count);\par
5177 \}\par
5178 \par
5179 {\cf17 template} <{\cf17 typename} T>\par
5180 {\cf17 inline} internal::AllOfArrayMatcher<T> AllOfArray({\cf17 const} T* ptr, {\cf18 size_t} count) \{\par
5181   {\cf19 return} AllOfArray(ptr, ptr + count);\par
5182 \}\par
5183 \par
5184 {\cf17 template} <{\cf17 typename} T, {\cf18 size_t} N>\par
5185 {\cf17 inline} internal::AnyOfArrayMatcher<T> AnyOfArray({\cf17 const} T (&array)[N]) \{\par
5186   {\cf19 return} AnyOfArray(array, N);\par
5187 \}\par
5188 \par
5189 {\cf17 template} <{\cf17 typename} T, {\cf18 size_t} N>\par
5190 {\cf17 inline} internal::AllOfArrayMatcher<T> AllOfArray({\cf17 const} T (&array)[N]) \{\par
5191   {\cf19 return} AllOfArray(array, N);\par
5192 \}\par
5193 \par
5194 {\cf17 template} <{\cf17 typename} Container>\par
5195 {\cf17 inline} internal::AnyOfArrayMatcher<typename Container::value_type> AnyOfArray(\par
5196     {\cf17 const} Container& container) \{\par
5197   {\cf19 return} AnyOfArray(container.begin(), container.end());\par
5198 \}\par
5199 \par
5200 {\cf17 template} <{\cf17 typename} Container>\par
5201 {\cf17 inline} internal::AllOfArrayMatcher<typename Container::value_type> AllOfArray(\par
5202     {\cf17 const} Container& container) \{\par
5203   {\cf19 return} AllOfArray(container.begin(), container.end());\par
5204 \}\par
5205 \par
5206 {\cf17 template} <{\cf17 typename} T>\par
5207 {\cf17 inline} internal::AnyOfArrayMatcher<T> AnyOfArray(\par
5208     ::std::initializer_list<T> xs) \{\par
5209   {\cf19 return} AnyOfArray(xs.begin(), xs.end());\par
5210 \}\par
5211 \par
5212 {\cf17 template} <{\cf17 typename} T>\par
5213 {\cf17 inline} internal::AllOfArrayMatcher<T> AllOfArray(\par
5214     ::std::initializer_list<T> xs) \{\par
5215   {\cf19 return} AllOfArray(xs.begin(), xs.end());\par
5216 \}\par
5217 \par
5218 {\cf20 // Args<N1, N2, ..., Nk>(a_matcher) matches a tuple if the selected}\par
5219 {\cf20 // fields of it matches a_matcher.  C++ doesn't support default}\par
5220 {\cf20 // arguments for function templates, so we have to overload it.}\par
5221 {\cf17 template} <{\cf18 size_t}... k, {\cf17 typename} InnerMatcher>\par
5222 internal::ArgsMatcher<typename std::decay<InnerMatcher>::type, k...> Args(\par
5223     InnerMatcher&& matcher) \{\par
5224   {\cf19 return} internal::ArgsMatcher<typename std::decay<InnerMatcher>::type, k...>(\par
5225       std::forward<InnerMatcher>(matcher));\par
5226 \}\par
5227 \par
5228 {\cf20 // AllArgs(m) is a synonym of m.  This is useful in}\par
5229 {\cf20 //}\par
5230 {\cf20 //   EXPECT_CALL(foo, Bar(_, _)).With(AllArgs(Eq()));}\par
5231 {\cf20 //}\par
5232 {\cf20 // which is easier to read than}\par
5233 {\cf20 //}\par
5234 {\cf20 //   EXPECT_CALL(foo, Bar(_, _)).With(Eq());}\par
5235 {\cf17 template} <{\cf17 typename} InnerMatcher>\par
5236 {\cf17 inline} InnerMatcher AllArgs({\cf17 const} InnerMatcher& matcher) \{\par
5237   {\cf19 return} matcher;\par
5238 \}\par
5239 \par
5240 {\cf20 // Returns a matcher that matches the value of an optional<> type variable.}\par
5241 {\cf20 // The matcher implementation only uses '!arg' and requires that the optional<>}\par
5242 {\cf20 // type has a 'value_type' member type and that '*arg' is of type 'value_type'}\par
5243 {\cf20 // and is printable using 'PrintToString'. It is compatible with}\par
5244 {\cf20 // std::optional/std::experimental::optional.}\par
5245 {\cf20 // Note that to compare an optional type variable against nullopt you should}\par
5246 {\cf20 // use Eq(nullopt) and not Eq(Optional(nullopt)). The latter implies that the}\par
5247 {\cf20 // optional value contains an optional itself.}\par
5248 {\cf17 template} <{\cf17 typename} ValueMatcher>\par
5249 {\cf17 inline} internal::OptionalMatcher<ValueMatcher> Optional(\par
5250     {\cf17 const} ValueMatcher& value_matcher) \{\par
5251   {\cf19 return} internal::OptionalMatcher<ValueMatcher>(value_matcher);\par
5252 \}\par
5253 \par
5254 {\cf20 // Returns a matcher that matches the value of a absl::any type variable.}\par
5255 {\cf17 template} <{\cf17 typename} T>\par
5256 PolymorphicMatcher<internal::any_cast_matcher::AnyCastMatcher<T>> AnyWith(\par
5257     {\cf17 const} Matcher<const T&>& matcher) \{\par
5258   {\cf19 return} MakePolymorphicMatcher(\par
5259       internal::any_cast_matcher::AnyCastMatcher<T>(matcher));\par
5260 \}\par
5261 \par
5262 {\cf20 // Returns a matcher that matches the value of a variant<> type variable.}\par
5263 {\cf20 // The matcher implementation uses ADL to find the holds_alternative and get}\par
5264 {\cf20 // functions.}\par
5265 {\cf20 // It is compatible with std::variant.}\par
5266 {\cf17 template} <{\cf17 typename} T>\par
5267 PolymorphicMatcher<internal::variant_matcher::VariantMatcher<T>> VariantWith(\par
5268     {\cf17 const} Matcher<const T&>& matcher) \{\par
5269   {\cf19 return} MakePolymorphicMatcher(\par
5270       internal::variant_matcher::VariantMatcher<T>(matcher));\par
5271 \}\par
5272 \par
5273 {\cf21 #if GTEST_HAS_EXCEPTIONS}\par
5274 \par
5275 {\cf20 // Anything inside the `internal` namespace is internal to the implementation}\par
5276 {\cf20 // and must not be used in user code!}\par
5277 {\cf17 namespace }internal \{\par
5278 \par
5279 {\cf17 class }WithWhatMatcherImpl \{\par
5280  {\cf17 public}:\par
5281   WithWhatMatcherImpl(Matcher<std::string> matcher)\par
5282       : matcher_(std::move(matcher)) \{\}\par
5283 \par
5284   {\cf18 void} DescribeTo(std::ostream* os){\cf17  const }\{\par
5285     *os << {\cf22 "contains .what() that "};\par
5286     matcher_.DescribeTo(os);\par
5287   \}\par
5288 \par
5289   {\cf18 void} DescribeNegationTo(std::ostream* os){\cf17  const }\{\par
5290     *os << {\cf22 "contains .what() that does not "};\par
5291     matcher_.DescribeTo(os);\par
5292   \}\par
5293 \par
5294   {\cf17 template} <{\cf17 typename} Err>\par
5295   {\cf18 bool} MatchAndExplain({\cf17 const} Err& err, MatchResultListener* listener){\cf17  const }\{\par
5296     *listener << {\cf22 "which contains .what() (of value = "} << err.what()\par
5297               << {\cf22 ") that "};\par
5298     {\cf19 return} matcher_.MatchAndExplain(err.what(), listener);\par
5299   \}\par
5300 \par
5301  {\cf17 private}:\par
5302   {\cf17 const} Matcher<std::string> matcher_;\par
5303 \};\par
5304 \par
5305 {\cf17 inline} PolymorphicMatcher<WithWhatMatcherImpl> WithWhat(\par
5306     Matcher<std::string> m) \{\par
5307   {\cf19 return} MakePolymorphicMatcher(WithWhatMatcherImpl(std::move(m)));\par
5308 \}\par
5309 \par
5310 {\cf17 template} <{\cf17 typename} Err>\par
5311 {\cf17 class }ExceptionMatcherImpl \{\par
5312   {\cf17 class }NeverThrown \{\par
5313    {\cf17 public}:\par
5314     {\cf17 const} {\cf18 char}* what() const noexcept \{\par
5315       {\cf19 return} {\cf22 "this exception should never be thrown"};\par
5316     \}\par
5317   \};\par
5318 \par
5319   {\cf20 // If the matchee raises an exception of a wrong type, we'd like to}\par
5320   {\cf20 // catch it and print its message and type. To do that, we add an additional}\par
5321   {\cf20 // catch clause:}\par
5322   {\cf20 //}\par
5323   {\cf20 //     try \{ ... \}}\par
5324   {\cf20 //     catch (const Err&) \{ /* an expected exception */ \}}\par
5325   {\cf20 //     catch (const std::exception&) \{ /* exception of a wrong type */ \}}\par
5326   {\cf20 //}\par
5327   {\cf20 // However, if the `Err` itself is `std::exception`, we'd end up with two}\par
5328   {\cf20 // identical `catch` clauses:}\par
5329   {\cf20 //}\par
5330   {\cf20 //     try \{ ... \}}\par
5331   {\cf20 //     catch (const std::exception&) \{ /* an expected exception */ \}}\par
5332   {\cf20 //     catch (const std::exception&) \{ /* exception of a wrong type */ \}}\par
5333   {\cf20 //}\par
5334   {\cf20 // This can cause a warning or an error in some compilers. To resolve}\par
5335   {\cf20 // the issue, we use a fake error type whenever `Err` is `std::exception`:}\par
5336   {\cf20 //}\par
5337   {\cf20 //     try \{ ... \}}\par
5338   {\cf20 //     catch (const std::exception&) \{ /* an expected exception */ \}}\par
5339   {\cf20 //     catch (const NeverThrown&) \{ /* exception of a wrong type */ \}}\par
5340   {\cf17 using }DefaultExceptionType = {\cf17 typename} std::conditional<\par
5341       std::is_same<{\cf17 typename} std::remove_cv<\par
5342                        {\cf17 typename} std::remove_reference<Err>::type>::type,\par
5343                    std::exception>::value,\par
5344       {\cf17 const} NeverThrown&, {\cf17 const} std::exception&>::type;\par
5345 \par
5346  {\cf17 public}:\par
5347   ExceptionMatcherImpl(Matcher<const Err&> matcher)\par
5348       : matcher_(std::move(matcher)) \{\}\par
5349 \par
5350   {\cf18 void} DescribeTo(std::ostream* os){\cf17  const }\{\par
5351     *os << {\cf22 "throws an exception which is a "} << GetTypeName<Err>();\par
5352     *os << {\cf22 " which "};\par
5353     matcher_.DescribeTo(os);\par
5354   \}\par
5355 \par
5356   {\cf18 void} DescribeNegationTo(std::ostream* os){\cf17  const }\{\par
5357     *os << {\cf22 "throws an exception which is not a "} << GetTypeName<Err>();\par
5358     *os << {\cf22 " which "};\par
5359     matcher_.DescribeNegationTo(os);\par
5360   \}\par
5361 \par
5362   {\cf17 template} <{\cf17 typename} T>\par
5363   {\cf18 bool} MatchAndExplain(T&& x, MatchResultListener* listener){\cf17  const }\{\par
5364     {\cf19 try} \{\par
5365       (void)(std::forward<T>(x)());\par
5366     \} {\cf19 catch} ({\cf17 const} Err& err) \{\par
5367       *listener << {\cf22 "throws an exception which is a "} << GetTypeName<Err>();\par
5368       *listener << {\cf22 " "};\par
5369       {\cf19 return} matcher_.MatchAndExplain(err, listener);\par
5370     \} {\cf19 catch} (DefaultExceptionType err) \{\par
5371 {\cf21 #if GTEST_HAS_RTTI}\par
5372       *listener << {\cf22 "throws an exception of type "} << GetTypeName({\cf17 typeid}(err));\par
5373       *listener << {\cf22 " "};\par
5374 {\cf21 #else}\par
5375       *listener << {\cf22 "throws an std::exception-derived type "};\par
5376 {\cf21 #endif}\par
5377       *listener << {\cf22 "with description \\""} << err.what() << {\cf22 "\\""};\par
5378       {\cf19 return} {\cf17 false};\par
5379     \} {\cf19 catch} (...) \{\par
5380       *listener << {\cf22 "throws an exception of an unknown type"};\par
5381       {\cf19 return} {\cf17 false};\par
5382     \}\par
5383 \par
5384     *listener << {\cf22 "does not throw any exception"};\par
5385     {\cf19 return} {\cf17 false};\par
5386   \}\par
5387 \par
5388  {\cf17 private}:\par
5389   {\cf17 const} Matcher<const Err&> matcher_;\par
5390 \};\par
5391 \par
5392 \}  {\cf20 // namespace internal}\par
5393 \par
5394 {\cf20 // Throws()}\par
5395 {\cf20 // Throws(exceptionMatcher)}\par
5396 {\cf20 // ThrowsMessage(messageMatcher)}\par
5397 {\cf20 //}\par
5398 {\cf20 // This matcher accepts a callable and verifies that when invoked, it throws}\par
5399 {\cf20 // an exception with the given type and properties.}\par
5400 {\cf20 //}\par
5401 {\cf20 // Examples:}\par
5402 {\cf20 //}\par
5403 {\cf20 //   EXPECT_THAT(}\par
5404 {\cf20 //       []() \{ throw std::runtime_error("message"); \},}\par
5405 {\cf20 //       Throws<std::runtime_error>());}\par
5406 {\cf20 //}\par
5407 {\cf20 //   EXPECT_THAT(}\par
5408 {\cf20 //       []() \{ throw std::runtime_error("message"); \},}\par
5409 {\cf20 //       ThrowsMessage<std::runtime_error>(HasSubstr("message")));}\par
5410 {\cf20 //}\par
5411 {\cf20 //   EXPECT_THAT(}\par
5412 {\cf20 //       []() \{ throw std::runtime_error("message"); \},}\par
5413 {\cf20 //       Throws<std::runtime_error>(}\par
5414 {\cf20 //           Property(&std::runtime_error::what, HasSubstr("message"))));}\par
5415 \par
5416 {\cf17 template} <{\cf17 typename} Err>\par
5417 PolymorphicMatcher<internal::ExceptionMatcherImpl<Err>> Throws() \{\par
5418   {\cf19 return} MakePolymorphicMatcher(\par
5419       internal::ExceptionMatcherImpl<Err>(A<const Err&>()));\par
5420 \}\par
5421 \par
5422 {\cf17 template} <{\cf17 typename} Err, {\cf17 typename} ExceptionMatcher>\par
5423 PolymorphicMatcher<internal::ExceptionMatcherImpl<Err>> Throws(\par
5424     {\cf17 const} ExceptionMatcher& exception_matcher) \{\par
5425   {\cf20 // Using matcher cast allows users to pass a matcher of a more broad type.}\par
5426   {\cf20 // For example user may want to pass Matcher<std::exception>}\par
5427   {\cf20 // to Throws<std::runtime_error>, or Matcher<int64> to Throws<int32>.}\par
5428   {\cf19 return} MakePolymorphicMatcher(internal::ExceptionMatcherImpl<Err>(\par
5429       SafeMatcherCast<const Err&>(exception_matcher)));\par
5430 \}\par
5431 \par
5432 {\cf17 template} <{\cf17 typename} Err, {\cf17 typename} MessageMatcher>\par
5433 PolymorphicMatcher<internal::ExceptionMatcherImpl<Err>> ThrowsMessage(\par
5434     MessageMatcher&& message_matcher) \{\par
5435   {\cf17 static_assert}(std::is_base_of<std::exception, Err>::value,\par
5436                 {\cf22 "expected an std::exception-derived type"});\par
5437   {\cf19 return} Throws<Err>(internal::WithWhat(\par
5438       MatcherCast<std::string>(std::forward<MessageMatcher>(message_matcher))));\par
5439 \}\par
5440 \par
5441 {\cf21 #endif  }{\cf20 // GTEST_HAS_EXCEPTIONS}\par
5442 \par
5443 {\cf20 // These macros allow using matchers to check values in Google Test}\par
5444 {\cf20 // tests.  ASSERT_THAT(value, matcher) and EXPECT_THAT(value, matcher)}\par
5445 {\cf20 // succeed if and only if the value matches the matcher.  If the assertion}\par
5446 {\cf20 // fails, the value and the description of the matcher will be printed.}\par
5447 {\cf21 #define ASSERT_THAT(value, matcher) \\}\par
5448 {\cf21   ASSERT_PRED_FORMAT1(              \\}\par
5449 {\cf21       ::testing::internal::MakePredicateFormatterFromMatcher(matcher), value)}\par
5450 {\cf21 #define EXPECT_THAT(value, matcher) \\}\par
5451 {\cf21   EXPECT_PRED_FORMAT1(              \\}\par
5452 {\cf21       ::testing::internal::MakePredicateFormatterFromMatcher(matcher), value)}\par
5453 \par
5454 {\cf20 // MATCHER* macros itself are listed below.}\par
5455 {\cf21 #define MATCHER(name, description)                                             \\}\par
5456 {\cf21   class name##Matcher                                                          \\}\par
5457 {\cf21       : public ::testing::internal::MatcherBaseImpl<name##Matcher> \{           \\}\par
5458 {\cf21    public:                                                                     \\}\par
5459 {\cf21     template <typename arg_type>                                               \\}\par
5460 {\cf21     class gmock_Impl : public ::testing::MatcherInterface<const arg_type&> \{   \\}\par
5461 {\cf21      public:                                                                   \\}\par
5462 {\cf21       gmock_Impl() \{\}                                                          \\}\par
5463 {\cf21       bool MatchAndExplain(                                                    \\}\par
5464 {\cf21           const arg_type& arg,                                                 \\}\par
5465 {\cf21           ::testing::MatchResultListener* result_listener) const override;     \\}\par
5466 {\cf21       void DescribeTo(::std::ostream* gmock_os) const override \{               \\}\par
5467 {\cf21         *gmock_os << FormatDescription(false);                                 \\}\par
5468 {\cf21       \}                                                                        \\}\par
5469 {\cf21       void DescribeNegationTo(::std::ostream* gmock_os) const override \{       \\}\par
5470 {\cf21         *gmock_os << FormatDescription(true);                                  \\}\par
5471 {\cf21       \}                                                                        \\}\par
5472 {\cf21                                                                                \\}\par
5473 {\cf21      private:                                                                  \\}\par
5474 {\cf21       ::std::string FormatDescription(bool negation) const \{                   \\}\par
5475 {\cf21         }{\cf20 /* NOLINTNEXTLINE readability-redundant-string-init */}{\cf21                  \\}\par
5476 {\cf21         ::std::string gmock_description = (description);                       \\}\par
5477 {\cf21         if (!gmock_description.empty()) \{                                      \\}\par
5478 {\cf21           return gmock_description;                                            \\}\par
5479 {\cf21         \}                                                                      \\}\par
5480 {\cf21         return ::testing::internal::FormatMatcherDescription(negation, #name,  \\}\par
5481 {\cf21                                                              \{\}, \{\});          \\}\par
5482 {\cf21       \}                                                                        \\}\par
5483 {\cf21     \};                                                                         \\}\par
5484 {\cf21   \};                                                                           \\}\par
5485 {\cf21   GTEST_ATTRIBUTE_UNUSED_ inline name##Matcher name() \{ return \{\}; \}           \\}\par
5486 {\cf21   template <typename arg_type>                                                 \\}\par
5487 {\cf21   bool name##Matcher::gmock_Impl<arg_type>::MatchAndExplain(                   \\}\par
5488 {\cf21       const arg_type& arg,                                                     \\}\par
5489 {\cf21       ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_) \\}\par
5490 {\cf21       const}\par
5491 \par
5492 {\cf21 #define MATCHER_P(name, p0, description) \\}\par
5493 {\cf21   GMOCK_INTERNAL_MATCHER(name, name##MatcherP, description, (#p0), (p0))}\par
5494 {\cf21 #define MATCHER_P2(name, p0, p1, description)                            \\}\par
5495 {\cf21   GMOCK_INTERNAL_MATCHER(name, name##MatcherP2, description, (#p0, #p1), \\}\par
5496 {\cf21                          (p0, p1))}\par
5497 {\cf21 #define MATCHER_P3(name, p0, p1, p2, description)                             \\}\par
5498 {\cf21   GMOCK_INTERNAL_MATCHER(name, name##MatcherP3, description, (#p0, #p1, #p2), \\}\par
5499 {\cf21                          (p0, p1, p2))}\par
5500 {\cf21 #define MATCHER_P4(name, p0, p1, p2, p3, description)        \\}\par
5501 {\cf21   GMOCK_INTERNAL_MATCHER(name, name##MatcherP4, description, \\}\par
5502 {\cf21                          (#p0, #p1, #p2, #p3), (p0, p1, p2, p3))}\par
5503 {\cf21 #define MATCHER_P5(name, p0, p1, p2, p3, p4, description)    \\}\par
5504 {\cf21   GMOCK_INTERNAL_MATCHER(name, name##MatcherP5, description, \\}\par
5505 {\cf21                          (#p0, #p1, #p2, #p3, #p4), (p0, p1, p2, p3, p4))}\par
5506 {\cf21 #define MATCHER_P6(name, p0, p1, p2, p3, p4, p5, description) \\}\par
5507 {\cf21   GMOCK_INTERNAL_MATCHER(name, name##MatcherP6, description,  \\}\par
5508 {\cf21                          (#p0, #p1, #p2, #p3, #p4, #p5),      \\}\par
5509 {\cf21                          (p0, p1, p2, p3, p4, p5))}\par
5510 {\cf21 #define MATCHER_P7(name, p0, p1, p2, p3, p4, p5, p6, description) \\}\par
5511 {\cf21   GMOCK_INTERNAL_MATCHER(name, name##MatcherP7, description,      \\}\par
5512 {\cf21                          (#p0, #p1, #p2, #p3, #p4, #p5, #p6),     \\}\par
5513 {\cf21                          (p0, p1, p2, p3, p4, p5, p6))}\par
5514 {\cf21 #define MATCHER_P8(name, p0, p1, p2, p3, p4, p5, p6, p7, description) \\}\par
5515 {\cf21   GMOCK_INTERNAL_MATCHER(name, name##MatcherP8, description,          \\}\par
5516 {\cf21                          (#p0, #p1, #p2, #p3, #p4, #p5, #p6, #p7),    \\}\par
5517 {\cf21                          (p0, p1, p2, p3, p4, p5, p6, p7))}\par
5518 {\cf21 #define MATCHER_P9(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, description) \\}\par
5519 {\cf21   GMOCK_INTERNAL_MATCHER(name, name##MatcherP9, description,              \\}\par
5520 {\cf21                          (#p0, #p1, #p2, #p3, #p4, #p5, #p6, #p7, #p8),   \\}\par
5521 {\cf21                          (p0, p1, p2, p3, p4, p5, p6, p7, p8))}\par
5522 {\cf21 #define MATCHER_P10(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, description) \\}\par
5523 {\cf21   GMOCK_INTERNAL_MATCHER(name, name##MatcherP10, description,                  \\}\par
5524 {\cf21                          (#p0, #p1, #p2, #p3, #p4, #p5, #p6, #p7, #p8, #p9),   \\}\par
5525 {\cf21                          (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9))}\par
5526 \par
5527 {\cf21 #define GMOCK_INTERNAL_MATCHER(name, full_name, description, arg_names, args)  \\}\par
5528 {\cf21   template <GMOCK_INTERNAL_MATCHER_TEMPLATE_PARAMS(args)>                      \\}\par
5529 {\cf21   class full_name : public ::testing::internal::MatcherBaseImpl<               \\}\par
5530 {\cf21                         full_name<GMOCK_INTERNAL_MATCHER_TYPE_PARAMS(args)>> \{ \\}\par
5531 {\cf21    public:                                                                     \\}\par
5532 {\cf21     using full_name::MatcherBaseImpl::MatcherBaseImpl;                         \\}\par
5533 {\cf21     template <typename arg_type>                                               \\}\par
5534 {\cf21     class gmock_Impl : public ::testing::MatcherInterface<const arg_type&> \{   \\}\par
5535 {\cf21      public:                                                                   \\}\par
5536 {\cf21       explicit gmock_Impl(GMOCK_INTERNAL_MATCHER_FUNCTION_ARGS(args))          \\}\par
5537 {\cf21           : GMOCK_INTERNAL_MATCHER_FORWARD_ARGS(args) \{\}                       \\}\par
5538 {\cf21       bool MatchAndExplain(                                                    \\}\par
5539 {\cf21           const arg_type& arg,                                                 \\}\par
5540 {\cf21           ::testing::MatchResultListener* result_listener) const override;     \\}\par
5541 {\cf21       void DescribeTo(::std::ostream* gmock_os) const override \{               \\}\par
5542 {\cf21         *gmock_os << FormatDescription(false);                                 \\}\par
5543 {\cf21       \}                                                                        \\}\par
5544 {\cf21       void DescribeNegationTo(::std::ostream* gmock_os) const override \{       \\}\par
5545 {\cf21         *gmock_os << FormatDescription(true);                                  \\}\par
5546 {\cf21       \}                                                                        \\}\par
5547 {\cf21       GMOCK_INTERNAL_MATCHER_MEMBERS(args)                                     \\}\par
5548 {\cf21                                                                                \\}\par
5549 {\cf21      private:                                                                  \\}\par
5550 {\cf21       ::std::string FormatDescription(bool negation) const \{                   \\}\par
5551 {\cf21         ::std::string gmock_description = (description);                       \\}\par
5552 {\cf21         if (!gmock_description.empty()) \{                                      \\}\par
5553 {\cf21           return gmock_description;                                            \\}\par
5554 {\cf21         \}                                                                      \\}\par
5555 {\cf21         return ::testing::internal::FormatMatcherDescription(                  \\}\par
5556 {\cf21             negation, #name, \{GMOCK_PP_REMOVE_PARENS(arg_names)\},              \\}\par
5557 {\cf21             ::testing::internal::UniversalTersePrintTupleFieldsToStrings(      \\}\par
5558 {\cf21                 ::std::tuple<GMOCK_INTERNAL_MATCHER_TYPE_PARAMS(args)>(        \\}\par
5559 {\cf21                     GMOCK_INTERNAL_MATCHER_MEMBERS_USAGE(args))));             \\}\par
5560 {\cf21       \}                                                                        \\}\par
5561 {\cf21     \};                                                                         \\}\par
5562 {\cf21   \};                                                                           \\}\par
5563 {\cf21   template <GMOCK_INTERNAL_MATCHER_TEMPLATE_PARAMS(args)>                      \\}\par
5564 {\cf21   inline full_name<GMOCK_INTERNAL_MATCHER_TYPE_PARAMS(args)> name(             \\}\par
5565 {\cf21       GMOCK_INTERNAL_MATCHER_FUNCTION_ARGS(args)) \{                            \\}\par
5566 {\cf21     return full_name<GMOCK_INTERNAL_MATCHER_TYPE_PARAMS(args)>(                \\}\par
5567 {\cf21         GMOCK_INTERNAL_MATCHER_ARGS_USAGE(args));                              \\}\par
5568 {\cf21   \}                                                                            \\}\par
5569 {\cf21   template <GMOCK_INTERNAL_MATCHER_TEMPLATE_PARAMS(args)>                      \\}\par
5570 {\cf21   template <typename arg_type>                                                 \\}\par
5571 {\cf21   bool full_name<GMOCK_INTERNAL_MATCHER_TYPE_PARAMS(args)>::gmock_Impl<        \\}\par
5572 {\cf21       arg_type>::MatchAndExplain(const arg_type& arg,                          \\}\par
5573 {\cf21                                  ::testing::MatchResultListener*               \\}\par
5574 {\cf21                                      result_listener GTEST_ATTRIBUTE_UNUSED_)  \\}\par
5575 {\cf21       const}\par
5576 \par
5577 {\cf21 #define GMOCK_INTERNAL_MATCHER_TEMPLATE_PARAMS(args) \\}\par
5578 {\cf21   GMOCK_PP_TAIL(                                     \\}\par
5579 {\cf21       GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_MATCHER_TEMPLATE_PARAM, , args))}\par
5580 {\cf21 #define GMOCK_INTERNAL_MATCHER_TEMPLATE_PARAM(i_unused, data_unused, arg) \\}\par
5581 {\cf21   , typename arg##_type}\par
5582 \par
5583 {\cf21 #define GMOCK_INTERNAL_MATCHER_TYPE_PARAMS(args) \\}\par
5584 {\cf21   GMOCK_PP_TAIL(GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_MATCHER_TYPE_PARAM, , args))}\par
5585 {\cf21 #define GMOCK_INTERNAL_MATCHER_TYPE_PARAM(i_unused, data_unused, arg) \\}\par
5586 {\cf21   , arg##_type}\par
5587 \par
5588 {\cf21 #define GMOCK_INTERNAL_MATCHER_FUNCTION_ARGS(args) \\}\par
5589 {\cf21   GMOCK_PP_TAIL(dummy_first GMOCK_PP_FOR_EACH(     \\}\par
5590 {\cf21       GMOCK_INTERNAL_MATCHER_FUNCTION_ARG, , args))}\par
5591 {\cf21 #define GMOCK_INTERNAL_MATCHER_FUNCTION_ARG(i, data_unused, arg) \\}\par
5592 {\cf21   , arg##_type gmock_p##i}\par
5593 \par
5594 {\cf21 #define GMOCK_INTERNAL_MATCHER_FORWARD_ARGS(args) \\}\par
5595 {\cf21   GMOCK_PP_TAIL(GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_MATCHER_FORWARD_ARG, , args))}\par
5596 {\cf21 #define GMOCK_INTERNAL_MATCHER_FORWARD_ARG(i, data_unused, arg) \\}\par
5597 {\cf21   , arg(::std::forward<arg##_type>(gmock_p##i))}\par
5598 \par
5599 {\cf21 #define GMOCK_INTERNAL_MATCHER_MEMBERS(args) \\}\par
5600 {\cf21   GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_MATCHER_MEMBER, , args)}\par
5601 {\cf21 #define GMOCK_INTERNAL_MATCHER_MEMBER(i_unused, data_unused, arg) \\}\par
5602 {\cf21   const arg##_type arg;}\par
5603 \par
5604 {\cf21 #define GMOCK_INTERNAL_MATCHER_MEMBERS_USAGE(args) \\}\par
5605 {\cf21   GMOCK_PP_TAIL(GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_MATCHER_MEMBER_USAGE, , args))}\par
5606 {\cf21 #define GMOCK_INTERNAL_MATCHER_MEMBER_USAGE(i_unused, data_unused, arg) , arg}\par
5607 \par
5608 {\cf21 #define GMOCK_INTERNAL_MATCHER_ARGS_USAGE(args) \\}\par
5609 {\cf21   GMOCK_PP_TAIL(GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_MATCHER_ARG_USAGE, , args))}\par
5610 {\cf21 #define GMOCK_INTERNAL_MATCHER_ARG_USAGE(i, data_unused, arg_unused) \\}\par
5611 {\cf21   , gmock_p##i}\par
5612 \par
5613 {\cf20 // To prevent ADL on certain functions we put them on a separate namespace.}\par
5614 {\cf17 using namespace }no_adl;  {\cf20 // NOLINT}\par
5615 \par
5616 \}  {\cf20 // namespace testing}\par
5617 \par
5618 GTEST_DISABLE_MSC_WARNINGS_POP_()  {\cf20 //  4251 5046}\par
5619 \par
5620 {\cf20 // Include any custom callback matchers added by the local installation.}\par
5621 {\cf20 // We must include this header at the end to make sure it can use the}\par
5622 {\cf20 // declarations from this file.}\par
5623 {\cf21 #include "gmock/internal/custom/gmock-matchers.h"}\par
5624 \par
5625 {\cf21 #endif  }{\cf20 // GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_MATCHERS_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gmock-matchers.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googlemock/include/gmock/internal/custom/gmock-matchers.h}
{\xe \v lib/googletest-main/googlemock/include/gmock/internal/custom/gmock-matchers.h}
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2015, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // Injection point for custom user configurations. See README for details}\par
31 \par
32 {\cf20 // IWYU pragma: private, include "gmock/gmock.h"}\par
33 {\cf20 // IWYU pragma: friend gmock/.*}\par
34 \par
35 {\cf21 #ifndef GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_CUSTOM_GMOCK_MATCHERS_H_}\par
36 {\cf21 #define GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_CUSTOM_GMOCK_MATCHERS_H_}\par
37 {\cf21 #endif  }{\cf20 // GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_CUSTOM_GMOCK_MATCHERS_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gmock-more-actions.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googlemock/include/gmock/gmock-more-actions.h}
{\xe \v lib/googletest-main/googlemock/include/gmock/gmock-more-actions.h}
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2007, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // Google Mock - a framework for writing C++ mock classes.}\par
31 {\cf20 //}\par
32 {\cf20 // This file implements some commonly used variadic actions.}\par
33 \par
34 {\cf20 // IWYU pragma: private, include "gmock/gmock.h"}\par
35 {\cf20 // IWYU pragma: friend gmock/.*}\par
36 \par
37 {\cf21 #ifndef GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_MORE_ACTIONS_H_}\par
38 {\cf21 #define GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_MORE_ACTIONS_H_}\par
39 \par
40 {\cf21 #include <memory>}\par
41 {\cf21 #include <utility>}\par
42 \par
43 {\cf21 #include "gmock/gmock-actions.h"}\par
44 {\cf21 #include "gmock/internal/gmock-port.h"}\par
45 \par
46 {\cf20 // Include any custom callback actions added by the local installation.}\par
47 {\cf21 #include "gmock/internal/custom/gmock-generated-actions.h"}\par
48 \par
49 {\cf20 // Sometimes you want to give an action explicit template parameters}\par
50 {\cf20 // that cannot be inferred from its value parameters.  ACTION() and}\par
51 {\cf20 // ACTION_P*() don't support that.  ACTION_TEMPLATE() remedies that}\par
52 {\cf20 // and can be viewed as an extension to ACTION() and ACTION_P*().}\par
53 {\cf20 //}\par
54 {\cf20 // The syntax:}\par
55 {\cf20 //}\par
56 {\cf20 //   ACTION_TEMPLATE(ActionName,}\par
57 {\cf20 //                   HAS_m_TEMPLATE_PARAMS(kind1, name1, ..., kind_m, name_m),}\par
58 {\cf20 //                   AND_n_VALUE_PARAMS(p1, ..., p_n)) \{ statements; \}}\par
59 {\cf20 //}\par
60 {\cf20 // defines an action template that takes m explicit template}\par
61 {\cf20 // parameters and n value parameters.  name_i is the name of the i-th}\par
62 {\cf20 // template parameter, and kind_i specifies whether it's a typename,}\par
63 {\cf20 // an integral constant, or a template.  p_i is the name of the i-th}\par
64 {\cf20 // value parameter.}\par
65 {\cf20 //}\par
66 {\cf20 // Example:}\par
67 {\cf20 //}\par
68 {\cf20 //   // DuplicateArg<k, T>(output) converts the k-th argument of the mock}\par
69 {\cf20 //   // function to type T and copies it to *output.}\par
70 {\cf20 //   ACTION_TEMPLATE(DuplicateArg,}\par
71 {\cf20 //                   HAS_2_TEMPLATE_PARAMS(int, k, typename, T),}\par
72 {\cf20 //                   AND_1_VALUE_PARAMS(output)) \{}\par
73 {\cf20 //     *output = T(::std::get<k>(args));}\par
74 {\cf20 //   \}}\par
75 {\cf20 //   ...}\par
76 {\cf20 //     int n;}\par
77 {\cf20 //     EXPECT_CALL(mock, Foo(_, _))}\par
78 {\cf20 //         .WillOnce(DuplicateArg<1, unsigned char>(&n));}\par
79 {\cf20 //}\par
80 {\cf20 // To create an instance of an action template, write:}\par
81 {\cf20 //}\par
82 {\cf20 //   ActionName<t1, ..., t_m>(v1, ..., v_n)}\par
83 {\cf20 //}\par
84 {\cf20 // where the ts are the template arguments and the vs are the value}\par
85 {\cf20 // arguments.  The value argument types are inferred by the compiler.}\par
86 {\cf20 // If you want to explicitly specify the value argument types, you can}\par
87 {\cf20 // provide additional template arguments:}\par
88 {\cf20 //}\par
89 {\cf20 //   ActionName<t1, ..., t_m, u1, ..., u_k>(v1, ..., v_n)}\par
90 {\cf20 //}\par
91 {\cf20 // where u_i is the desired type of v_i.}\par
92 {\cf20 //}\par
93 {\cf20 // ACTION_TEMPLATE and ACTION/ACTION_P* can be overloaded on the}\par
94 {\cf20 // number of value parameters, but not on the number of template}\par
95 {\cf20 // parameters.  Without the restriction, the meaning of the following}\par
96 {\cf20 // is unclear:}\par
97 {\cf20 //}\par
98 {\cf20 //   OverloadedAction<int, bool>(x);}\par
99 {\cf20 //}\par
100 {\cf20 // Are we using a single-template-parameter action where 'bool' refers}\par
101 {\cf20 // to the type of x, or are we using a two-template-parameter action}\par
102 {\cf20 // where the compiler is asked to infer the type of x?}\par
103 {\cf20 //}\par
104 {\cf20 // Implementation notes:}\par
105 {\cf20 //}\par
106 {\cf20 // GMOCK_INTERNAL_*_HAS_m_TEMPLATE_PARAMS and}\par
107 {\cf20 // GMOCK_INTERNAL_*_AND_n_VALUE_PARAMS are internal macros for}\par
108 {\cf20 // implementing ACTION_TEMPLATE.  The main trick we use is to create}\par
109 {\cf20 // new macro invocations when expanding a macro.  For example, we have}\par
110 {\cf20 //}\par
111 {\cf20 //   #define ACTION_TEMPLATE(name, template_params, value_params)}\par
112 {\cf20 //       ... GMOCK_INTERNAL_DECL_##template_params ...}\par
113 {\cf20 //}\par
114 {\cf20 // which causes ACTION_TEMPLATE(..., HAS_1_TEMPLATE_PARAMS(typename, T), ...)}\par
115 {\cf20 // to expand to}\par
116 {\cf20 //}\par
117 {\cf20 //       ... GMOCK_INTERNAL_DECL_HAS_1_TEMPLATE_PARAMS(typename, T) ...}\par
118 {\cf20 //}\par
119 {\cf20 // Since GMOCK_INTERNAL_DECL_HAS_1_TEMPLATE_PARAMS is a macro, the}\par
120 {\cf20 // preprocessor will continue to expand it to}\par
121 {\cf20 //}\par
122 {\cf20 //       ... typename T ...}\par
123 {\cf20 //}\par
124 {\cf20 // This technique conforms to the C++ standard and is portable.  It}\par
125 {\cf20 // allows us to implement action templates using O(N) code, where N is}\par
126 {\cf20 // the maximum number of template/value parameters supported.  Without}\par
127 {\cf20 // using it, we'd have to devote O(N^2) amount of code to implement all}\par
128 {\cf20 // combinations of m and n.}\par
129 \par
130 {\cf20 // Declares the template parameters.}\par
131 {\cf21 #define GMOCK_INTERNAL_DECL_HAS_1_TEMPLATE_PARAMS(kind0, name0) kind0 name0}\par
132 {\cf21 #define GMOCK_INTERNAL_DECL_HAS_2_TEMPLATE_PARAMS(kind0, name0, kind1, name1) \\}\par
133 {\cf21   kind0 name0, kind1 name1}\par
134 {\cf21 #define GMOCK_INTERNAL_DECL_HAS_3_TEMPLATE_PARAMS(kind0, name0, kind1, name1, \\}\par
135 {\cf21                                                   kind2, name2)               \\}\par
136 {\cf21   kind0 name0, kind1 name1, kind2 name2}\par
137 {\cf21 #define GMOCK_INTERNAL_DECL_HAS_4_TEMPLATE_PARAMS(kind0, name0, kind1, name1, \\}\par
138 {\cf21                                                   kind2, name2, kind3, name3) \\}\par
139 {\cf21   kind0 name0, kind1 name1, kind2 name2, kind3 name3}\par
140 {\cf21 #define GMOCK_INTERNAL_DECL_HAS_5_TEMPLATE_PARAMS(                        \\}\par
141 {\cf21     kind0, name0, kind1, name1, kind2, name2, kind3, name3, kind4, name4) \\}\par
142 {\cf21   kind0 name0, kind1 name1, kind2 name2, kind3 name3, kind4 name4}\par
143 {\cf21 #define GMOCK_INTERNAL_DECL_HAS_6_TEMPLATE_PARAMS(kind0, name0, kind1, name1, \\}\par
144 {\cf21                                                   kind2, name2, kind3, name3, \\}\par
145 {\cf21                                                   kind4, name4, kind5, name5) \\}\par
146 {\cf21   kind0 name0, kind1 name1, kind2 name2, kind3 name3, kind4 name4, kind5 name5}\par
147 {\cf21 #define GMOCK_INTERNAL_DECL_HAS_7_TEMPLATE_PARAMS(                        \\}\par
148 {\cf21     kind0, name0, kind1, name1, kind2, name2, kind3, name3, kind4, name4, \\}\par
149 {\cf21     kind5, name5, kind6, name6)                                           \\}\par
150 {\cf21   kind0 name0, kind1 name1, kind2 name2, kind3 name3, kind4 name4,        \\}\par
151 {\cf21       kind5 name5, kind6 name6}\par
152 {\cf21 #define GMOCK_INTERNAL_DECL_HAS_8_TEMPLATE_PARAMS(                        \\}\par
153 {\cf21     kind0, name0, kind1, name1, kind2, name2, kind3, name3, kind4, name4, \\}\par
154 {\cf21     kind5, name5, kind6, name6, kind7, name7)                             \\}\par
155 {\cf21   kind0 name0, kind1 name1, kind2 name2, kind3 name3, kind4 name4,        \\}\par
156 {\cf21       kind5 name5, kind6 name6, kind7 name7}\par
157 {\cf21 #define GMOCK_INTERNAL_DECL_HAS_9_TEMPLATE_PARAMS(                        \\}\par
158 {\cf21     kind0, name0, kind1, name1, kind2, name2, kind3, name3, kind4, name4, \\}\par
159 {\cf21     kind5, name5, kind6, name6, kind7, name7, kind8, name8)               \\}\par
160 {\cf21   kind0 name0, kind1 name1, kind2 name2, kind3 name3, kind4 name4,        \\}\par
161 {\cf21       kind5 name5, kind6 name6, kind7 name7, kind8 name8}\par
162 {\cf21 #define GMOCK_INTERNAL_DECL_HAS_10_TEMPLATE_PARAMS(                       \\}\par
163 {\cf21     kind0, name0, kind1, name1, kind2, name2, kind3, name3, kind4, name4, \\}\par
164 {\cf21     kind5, name5, kind6, name6, kind7, name7, kind8, name8, kind9, name9) \\}\par
165 {\cf21   kind0 name0, kind1 name1, kind2 name2, kind3 name3, kind4 name4,        \\}\par
166 {\cf21       kind5 name5, kind6 name6, kind7 name7, kind8 name8, kind9 name9}\par
167 \par
168 {\cf20 // Lists the template parameters.}\par
169 {\cf21 #define GMOCK_INTERNAL_LIST_HAS_1_TEMPLATE_PARAMS(kind0, name0) name0}\par
170 {\cf21 #define GMOCK_INTERNAL_LIST_HAS_2_TEMPLATE_PARAMS(kind0, name0, kind1, name1) \\}\par
171 {\cf21   name0, name1}\par
172 {\cf21 #define GMOCK_INTERNAL_LIST_HAS_3_TEMPLATE_PARAMS(kind0, name0, kind1, name1, \\}\par
173 {\cf21                                                   kind2, name2)               \\}\par
174 {\cf21   name0, name1, name2}\par
175 {\cf21 #define GMOCK_INTERNAL_LIST_HAS_4_TEMPLATE_PARAMS(kind0, name0, kind1, name1, \\}\par
176 {\cf21                                                   kind2, name2, kind3, name3) \\}\par
177 {\cf21   name0, name1, name2, name3}\par
178 {\cf21 #define GMOCK_INTERNAL_LIST_HAS_5_TEMPLATE_PARAMS(                        \\}\par
179 {\cf21     kind0, name0, kind1, name1, kind2, name2, kind3, name3, kind4, name4) \\}\par
180 {\cf21   name0, name1, name2, name3, name4}\par
181 {\cf21 #define GMOCK_INTERNAL_LIST_HAS_6_TEMPLATE_PARAMS(kind0, name0, kind1, name1, \\}\par
182 {\cf21                                                   kind2, name2, kind3, name3, \\}\par
183 {\cf21                                                   kind4, name4, kind5, name5) \\}\par
184 {\cf21   name0, name1, name2, name3, name4, name5}\par
185 {\cf21 #define GMOCK_INTERNAL_LIST_HAS_7_TEMPLATE_PARAMS(                        \\}\par
186 {\cf21     kind0, name0, kind1, name1, kind2, name2, kind3, name3, kind4, name4, \\}\par
187 {\cf21     kind5, name5, kind6, name6)                                           \\}\par
188 {\cf21   name0, name1, name2, name3, name4, name5, name6}\par
189 {\cf21 #define GMOCK_INTERNAL_LIST_HAS_8_TEMPLATE_PARAMS(                        \\}\par
190 {\cf21     kind0, name0, kind1, name1, kind2, name2, kind3, name3, kind4, name4, \\}\par
191 {\cf21     kind5, name5, kind6, name6, kind7, name7)                             \\}\par
192 {\cf21   name0, name1, name2, name3, name4, name5, name6, name7}\par
193 {\cf21 #define GMOCK_INTERNAL_LIST_HAS_9_TEMPLATE_PARAMS(                        \\}\par
194 {\cf21     kind0, name0, kind1, name1, kind2, name2, kind3, name3, kind4, name4, \\}\par
195 {\cf21     kind5, name5, kind6, name6, kind7, name7, kind8, name8)               \\}\par
196 {\cf21   name0, name1, name2, name3, name4, name5, name6, name7, name8}\par
197 {\cf21 #define GMOCK_INTERNAL_LIST_HAS_10_TEMPLATE_PARAMS(                       \\}\par
198 {\cf21     kind0, name0, kind1, name1, kind2, name2, kind3, name3, kind4, name4, \\}\par
199 {\cf21     kind5, name5, kind6, name6, kind7, name7, kind8, name8, kind9, name9) \\}\par
200 {\cf21   name0, name1, name2, name3, name4, name5, name6, name7, name8, name9}\par
201 \par
202 {\cf20 // Declares the types of value parameters.}\par
203 {\cf21 #define GMOCK_INTERNAL_DECL_TYPE_AND_0_VALUE_PARAMS()}\par
204 {\cf21 #define GMOCK_INTERNAL_DECL_TYPE_AND_1_VALUE_PARAMS(p0) , typename p0##_type}\par
205 {\cf21 #define GMOCK_INTERNAL_DECL_TYPE_AND_2_VALUE_PARAMS(p0, p1) \\}\par
206 {\cf21   , typename p0##_type, typename p1##_type}\par
207 {\cf21 #define GMOCK_INTERNAL_DECL_TYPE_AND_3_VALUE_PARAMS(p0, p1, p2) \\}\par
208 {\cf21   , typename p0##_type, typename p1##_type, typename p2##_type}\par
209 {\cf21 #define GMOCK_INTERNAL_DECL_TYPE_AND_4_VALUE_PARAMS(p0, p1, p2, p3) \\}\par
210 {\cf21   , typename p0##_type, typename p1##_type, typename p2##_type,     \\}\par
211 {\cf21       typename p3##_type}\par
212 {\cf21 #define GMOCK_INTERNAL_DECL_TYPE_AND_5_VALUE_PARAMS(p0, p1, p2, p3, p4) \\}\par
213 {\cf21   , typename p0##_type, typename p1##_type, typename p2##_type,         \\}\par
214 {\cf21       typename p3##_type, typename p4##_type}\par
215 {\cf21 #define GMOCK_INTERNAL_DECL_TYPE_AND_6_VALUE_PARAMS(p0, p1, p2, p3, p4, p5) \\}\par
216 {\cf21   , typename p0##_type, typename p1##_type, typename p2##_type,             \\}\par
217 {\cf21       typename p3##_type, typename p4##_type, typename p5##_type}\par
218 {\cf21 #define GMOCK_INTERNAL_DECL_TYPE_AND_7_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, \\}\par
219 {\cf21                                                     p6)                     \\}\par
220 {\cf21   , typename p0##_type, typename p1##_type, typename p2##_type,             \\}\par
221 {\cf21       typename p3##_type, typename p4##_type, typename p5##_type,           \\}\par
222 {\cf21       typename p6##_type}\par
223 {\cf21 #define GMOCK_INTERNAL_DECL_TYPE_AND_8_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, \\}\par
224 {\cf21                                                     p6, p7)                 \\}\par
225 {\cf21   , typename p0##_type, typename p1##_type, typename p2##_type,             \\}\par
226 {\cf21       typename p3##_type, typename p4##_type, typename p5##_type,           \\}\par
227 {\cf21       typename p6##_type, typename p7##_type}\par
228 {\cf21 #define GMOCK_INTERNAL_DECL_TYPE_AND_9_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, \\}\par
229 {\cf21                                                     p6, p7, p8)             \\}\par
230 {\cf21   , typename p0##_type, typename p1##_type, typename p2##_type,             \\}\par
231 {\cf21       typename p3##_type, typename p4##_type, typename p5##_type,           \\}\par
232 {\cf21       typename p6##_type, typename p7##_type, typename p8##_type}\par
233 {\cf21 #define GMOCK_INTERNAL_DECL_TYPE_AND_10_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, \\}\par
234 {\cf21                                                      p6, p7, p8, p9)         \\}\par
235 {\cf21   , typename p0##_type, typename p1##_type, typename p2##_type,              \\}\par
236 {\cf21       typename p3##_type, typename p4##_type, typename p5##_type,            \\}\par
237 {\cf21       typename p6##_type, typename p7##_type, typename p8##_type,            \\}\par
238 {\cf21       typename p9##_type}\par
239 \par
240 {\cf20 // Initializes the value parameters.}\par
241 {\cf21 #define GMOCK_INTERNAL_INIT_AND_0_VALUE_PARAMS() ()}\par
242 {\cf21 #define GMOCK_INTERNAL_INIT_AND_1_VALUE_PARAMS(p0) \\}\par
243 {\cf21   (p0##_type gmock_p0) : p0(::std::move(gmock_p0))}\par
244 {\cf21 #define GMOCK_INTERNAL_INIT_AND_2_VALUE_PARAMS(p0, p1) \\}\par
245 {\cf21   (p0##_type gmock_p0, p1##_type gmock_p1)             \\}\par
246 {\cf21       : p0(::std::move(gmock_p0)), p1(::std::move(gmock_p1))}\par
247 {\cf21 #define GMOCK_INTERNAL_INIT_AND_3_VALUE_PARAMS(p0, p1, p2)     \\}\par
248 {\cf21   (p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2) \\}\par
249 {\cf21       : p0(::std::move(gmock_p0)),                             \\}\par
250 {\cf21         p1(::std::move(gmock_p1)),                             \\}\par
251 {\cf21         p2(::std::move(gmock_p2))}\par
252 {\cf21 #define GMOCK_INTERNAL_INIT_AND_4_VALUE_PARAMS(p0, p1, p2, p3) \\}\par
253 {\cf21   (p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \\}\par
254 {\cf21    p3##_type gmock_p3)                                         \\}\par
255 {\cf21       : p0(::std::move(gmock_p0)),                             \\}\par
256 {\cf21         p1(::std::move(gmock_p1)),                             \\}\par
257 {\cf21         p2(::std::move(gmock_p2)),                             \\}\par
258 {\cf21         p3(::std::move(gmock_p3))}\par
259 {\cf21 #define GMOCK_INTERNAL_INIT_AND_5_VALUE_PARAMS(p0, p1, p2, p3, p4) \\}\par
260 {\cf21   (p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2,     \\}\par
261 {\cf21    p3##_type gmock_p3, p4##_type gmock_p4)                         \\}\par
262 {\cf21       : p0(::std::move(gmock_p0)),                                 \\}\par
263 {\cf21         p1(::std::move(gmock_p1)),                                 \\}\par
264 {\cf21         p2(::std::move(gmock_p2)),                                 \\}\par
265 {\cf21         p3(::std::move(gmock_p3)),                                 \\}\par
266 {\cf21         p4(::std::move(gmock_p4))}\par
267 {\cf21 #define GMOCK_INTERNAL_INIT_AND_6_VALUE_PARAMS(p0, p1, p2, p3, p4, p5) \\}\par
268 {\cf21   (p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2,         \\}\par
269 {\cf21    p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5)         \\}\par
270 {\cf21       : p0(::std::move(gmock_p0)),                                     \\}\par
271 {\cf21         p1(::std::move(gmock_p1)),                                     \\}\par
272 {\cf21         p2(::std::move(gmock_p2)),                                     \\}\par
273 {\cf21         p3(::std::move(gmock_p3)),                                     \\}\par
274 {\cf21         p4(::std::move(gmock_p4)),                                     \\}\par
275 {\cf21         p5(::std::move(gmock_p5))}\par
276 {\cf21 #define GMOCK_INTERNAL_INIT_AND_7_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6) \\}\par
277 {\cf21   (p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2,             \\}\par
278 {\cf21    p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5,             \\}\par
279 {\cf21    p6##_type gmock_p6)                                                     \\}\par
280 {\cf21       : p0(::std::move(gmock_p0)),                                         \\}\par
281 {\cf21         p1(::std::move(gmock_p1)),                                         \\}\par
282 {\cf21         p2(::std::move(gmock_p2)),                                         \\}\par
283 {\cf21         p3(::std::move(gmock_p3)),                                         \\}\par
284 {\cf21         p4(::std::move(gmock_p4)),                                         \\}\par
285 {\cf21         p5(::std::move(gmock_p5)),                                         \\}\par
286 {\cf21         p6(::std::move(gmock_p6))}\par
287 {\cf21 #define GMOCK_INTERNAL_INIT_AND_8_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7) \\}\par
288 {\cf21   (p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2,                 \\}\par
289 {\cf21    p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5,                 \\}\par
290 {\cf21    p6##_type gmock_p6, p7##_type gmock_p7)                                     \\}\par
291 {\cf21       : p0(::std::move(gmock_p0)),                                             \\}\par
292 {\cf21         p1(::std::move(gmock_p1)),                                             \\}\par
293 {\cf21         p2(::std::move(gmock_p2)),                                             \\}\par
294 {\cf21         p3(::std::move(gmock_p3)),                                             \\}\par
295 {\cf21         p4(::std::move(gmock_p4)),                                             \\}\par
296 {\cf21         p5(::std::move(gmock_p5)),                                             \\}\par
297 {\cf21         p6(::std::move(gmock_p6)),                                             \\}\par
298 {\cf21         p7(::std::move(gmock_p7))}\par
299 {\cf21 #define GMOCK_INTERNAL_INIT_AND_9_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7, \\}\par
300 {\cf21                                                p8)                             \\}\par
301 {\cf21   (p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2,                 \\}\par
302 {\cf21    p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5,                 \\}\par
303 {\cf21    p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8)                 \\}\par
304 {\cf21       : p0(::std::move(gmock_p0)),                                             \\}\par
305 {\cf21         p1(::std::move(gmock_p1)),                                             \\}\par
306 {\cf21         p2(::std::move(gmock_p2)),                                             \\}\par
307 {\cf21         p3(::std::move(gmock_p3)),                                             \\}\par
308 {\cf21         p4(::std::move(gmock_p4)),                                             \\}\par
309 {\cf21         p5(::std::move(gmock_p5)),                                             \\}\par
310 {\cf21         p6(::std::move(gmock_p6)),                                             \\}\par
311 {\cf21         p7(::std::move(gmock_p7)),                                             \\}\par
312 {\cf21         p8(::std::move(gmock_p8))}\par
313 {\cf21 #define GMOCK_INTERNAL_INIT_AND_10_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, \\}\par
314 {\cf21                                                 p7, p8, p9)                 \\}\par
315 {\cf21   (p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2,              \\}\par
316 {\cf21    p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5,              \\}\par
317 {\cf21    p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8,              \\}\par
318 {\cf21    p9##_type gmock_p9)                                                      \\}\par
319 {\cf21       : p0(::std::move(gmock_p0)),                                          \\}\par
320 {\cf21         p1(::std::move(gmock_p1)),                                          \\}\par
321 {\cf21         p2(::std::move(gmock_p2)),                                          \\}\par
322 {\cf21         p3(::std::move(gmock_p3)),                                          \\}\par
323 {\cf21         p4(::std::move(gmock_p4)),                                          \\}\par
324 {\cf21         p5(::std::move(gmock_p5)),                                          \\}\par
325 {\cf21         p6(::std::move(gmock_p6)),                                          \\}\par
326 {\cf21         p7(::std::move(gmock_p7)),                                          \\}\par
327 {\cf21         p8(::std::move(gmock_p8)),                                          \\}\par
328 {\cf21         p9(::std::move(gmock_p9))}\par
329 \par
330 {\cf20 // Defines the copy constructor}\par
331 {\cf21 #define GMOCK_INTERNAL_DEFN_COPY_AND_0_VALUE_PARAMS() \\}\par
332 {\cf21   \{\}  }{\cf20 // Avoid https://gcc.gnu.org/bugzilla/show_bug.cgi?id=82134}\par
333 {\cf21 #define GMOCK_INTERNAL_DEFN_COPY_AND_1_VALUE_PARAMS(...) = default;}\par
334 {\cf21 #define GMOCK_INTERNAL_DEFN_COPY_AND_2_VALUE_PARAMS(...) = default;}\par
335 {\cf21 #define GMOCK_INTERNAL_DEFN_COPY_AND_3_VALUE_PARAMS(...) = default;}\par
336 {\cf21 #define GMOCK_INTERNAL_DEFN_COPY_AND_4_VALUE_PARAMS(...) = default;}\par
337 {\cf21 #define GMOCK_INTERNAL_DEFN_COPY_AND_5_VALUE_PARAMS(...) = default;}\par
338 {\cf21 #define GMOCK_INTERNAL_DEFN_COPY_AND_6_VALUE_PARAMS(...) = default;}\par
339 {\cf21 #define GMOCK_INTERNAL_DEFN_COPY_AND_7_VALUE_PARAMS(...) = default;}\par
340 {\cf21 #define GMOCK_INTERNAL_DEFN_COPY_AND_8_VALUE_PARAMS(...) = default;}\par
341 {\cf21 #define GMOCK_INTERNAL_DEFN_COPY_AND_9_VALUE_PARAMS(...) = default;}\par
342 {\cf21 #define GMOCK_INTERNAL_DEFN_COPY_AND_10_VALUE_PARAMS(...) = default;}\par
343 \par
344 {\cf20 // Declares the fields for storing the value parameters.}\par
345 {\cf21 #define GMOCK_INTERNAL_DEFN_AND_0_VALUE_PARAMS()}\par
346 {\cf21 #define GMOCK_INTERNAL_DEFN_AND_1_VALUE_PARAMS(p0) p0##_type p0;}\par
347 {\cf21 #define GMOCK_INTERNAL_DEFN_AND_2_VALUE_PARAMS(p0, p1) \\}\par
348 {\cf21   p0##_type p0;                                        \\}\par
349 {\cf21   p1##_type p1;}\par
350 {\cf21 #define GMOCK_INTERNAL_DEFN_AND_3_VALUE_PARAMS(p0, p1, p2) \\}\par
351 {\cf21   p0##_type p0;                                            \\}\par
352 {\cf21   p1##_type p1;                                            \\}\par
353 {\cf21   p2##_type p2;}\par
354 {\cf21 #define GMOCK_INTERNAL_DEFN_AND_4_VALUE_PARAMS(p0, p1, p2, p3) \\}\par
355 {\cf21   p0##_type p0;                                                \\}\par
356 {\cf21   p1##_type p1;                                                \\}\par
357 {\cf21   p2##_type p2;                                                \\}\par
358 {\cf21   p3##_type p3;}\par
359 {\cf21 #define GMOCK_INTERNAL_DEFN_AND_5_VALUE_PARAMS(p0, p1, p2, p3, p4) \\}\par
360 {\cf21   p0##_type p0;                                                    \\}\par
361 {\cf21   p1##_type p1;                                                    \\}\par
362 {\cf21   p2##_type p2;                                                    \\}\par
363 {\cf21   p3##_type p3;                                                    \\}\par
364 {\cf21   p4##_type p4;}\par
365 {\cf21 #define GMOCK_INTERNAL_DEFN_AND_6_VALUE_PARAMS(p0, p1, p2, p3, p4, p5) \\}\par
366 {\cf21   p0##_type p0;                                                        \\}\par
367 {\cf21   p1##_type p1;                                                        \\}\par
368 {\cf21   p2##_type p2;                                                        \\}\par
369 {\cf21   p3##_type p3;                                                        \\}\par
370 {\cf21   p4##_type p4;                                                        \\}\par
371 {\cf21   p5##_type p5;}\par
372 {\cf21 #define GMOCK_INTERNAL_DEFN_AND_7_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6) \\}\par
373 {\cf21   p0##_type p0;                                                            \\}\par
374 {\cf21   p1##_type p1;                                                            \\}\par
375 {\cf21   p2##_type p2;                                                            \\}\par
376 {\cf21   p3##_type p3;                                                            \\}\par
377 {\cf21   p4##_type p4;                                                            \\}\par
378 {\cf21   p5##_type p5;                                                            \\}\par
379 {\cf21   p6##_type p6;}\par
380 {\cf21 #define GMOCK_INTERNAL_DEFN_AND_8_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7) \\}\par
381 {\cf21   p0##_type p0;                                                                \\}\par
382 {\cf21   p1##_type p1;                                                                \\}\par
383 {\cf21   p2##_type p2;                                                                \\}\par
384 {\cf21   p3##_type p3;                                                                \\}\par
385 {\cf21   p4##_type p4;                                                                \\}\par
386 {\cf21   p5##_type p5;                                                                \\}\par
387 {\cf21   p6##_type p6;                                                                \\}\par
388 {\cf21   p7##_type p7;}\par
389 {\cf21 #define GMOCK_INTERNAL_DEFN_AND_9_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7, \\}\par
390 {\cf21                                                p8)                             \\}\par
391 {\cf21   p0##_type p0;                                                                \\}\par
392 {\cf21   p1##_type p1;                                                                \\}\par
393 {\cf21   p2##_type p2;                                                                \\}\par
394 {\cf21   p3##_type p3;                                                                \\}\par
395 {\cf21   p4##_type p4;                                                                \\}\par
396 {\cf21   p5##_type p5;                                                                \\}\par
397 {\cf21   p6##_type p6;                                                                \\}\par
398 {\cf21   p7##_type p7;                                                                \\}\par
399 {\cf21   p8##_type p8;}\par
400 {\cf21 #define GMOCK_INTERNAL_DEFN_AND_10_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, \\}\par
401 {\cf21                                                 p7, p8, p9)                 \\}\par
402 {\cf21   p0##_type p0;                                                             \\}\par
403 {\cf21   p1##_type p1;                                                             \\}\par
404 {\cf21   p2##_type p2;                                                             \\}\par
405 {\cf21   p3##_type p3;                                                             \\}\par
406 {\cf21   p4##_type p4;                                                             \\}\par
407 {\cf21   p5##_type p5;                                                             \\}\par
408 {\cf21   p6##_type p6;                                                             \\}\par
409 {\cf21   p7##_type p7;                                                             \\}\par
410 {\cf21   p8##_type p8;                                                             \\}\par
411 {\cf21   p9##_type p9;}\par
412 \par
413 {\cf20 // Lists the value parameters.}\par
414 {\cf21 #define GMOCK_INTERNAL_LIST_AND_0_VALUE_PARAMS()}\par
415 {\cf21 #define GMOCK_INTERNAL_LIST_AND_1_VALUE_PARAMS(p0) p0}\par
416 {\cf21 #define GMOCK_INTERNAL_LIST_AND_2_VALUE_PARAMS(p0, p1) p0, p1}\par
417 {\cf21 #define GMOCK_INTERNAL_LIST_AND_3_VALUE_PARAMS(p0, p1, p2) p0, p1, p2}\par
418 {\cf21 #define GMOCK_INTERNAL_LIST_AND_4_VALUE_PARAMS(p0, p1, p2, p3) p0, p1, p2, p3}\par
419 {\cf21 #define GMOCK_INTERNAL_LIST_AND_5_VALUE_PARAMS(p0, p1, p2, p3, p4) \\}\par
420 {\cf21   p0, p1, p2, p3, p4}\par
421 {\cf21 #define GMOCK_INTERNAL_LIST_AND_6_VALUE_PARAMS(p0, p1, p2, p3, p4, p5) \\}\par
422 {\cf21   p0, p1, p2, p3, p4, p5}\par
423 {\cf21 #define GMOCK_INTERNAL_LIST_AND_7_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6) \\}\par
424 {\cf21   p0, p1, p2, p3, p4, p5, p6}\par
425 {\cf21 #define GMOCK_INTERNAL_LIST_AND_8_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7) \\}\par
426 {\cf21   p0, p1, p2, p3, p4, p5, p6, p7}\par
427 {\cf21 #define GMOCK_INTERNAL_LIST_AND_9_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7, \\}\par
428 {\cf21                                                p8)                             \\}\par
429 {\cf21   p0, p1, p2, p3, p4, p5, p6, p7, p8}\par
430 {\cf21 #define GMOCK_INTERNAL_LIST_AND_10_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, \\}\par
431 {\cf21                                                 p7, p8, p9)                 \\}\par
432 {\cf21   p0, p1, p2, p3, p4, p5, p6, p7, p8, p9}\par
433 \par
434 {\cf20 // Lists the value parameter types.}\par
435 {\cf21 #define GMOCK_INTERNAL_LIST_TYPE_AND_0_VALUE_PARAMS()}\par
436 {\cf21 #define GMOCK_INTERNAL_LIST_TYPE_AND_1_VALUE_PARAMS(p0) , p0##_type}\par
437 {\cf21 #define GMOCK_INTERNAL_LIST_TYPE_AND_2_VALUE_PARAMS(p0, p1) \\}\par
438 {\cf21   , p0##_type, p1##_type}\par
439 {\cf21 #define GMOCK_INTERNAL_LIST_TYPE_AND_3_VALUE_PARAMS(p0, p1, p2) \\}\par
440 {\cf21   , p0##_type, p1##_type, p2##_type}\par
441 {\cf21 #define GMOCK_INTERNAL_LIST_TYPE_AND_4_VALUE_PARAMS(p0, p1, p2, p3) \\}\par
442 {\cf21   , p0##_type, p1##_type, p2##_type, p3##_type}\par
443 {\cf21 #define GMOCK_INTERNAL_LIST_TYPE_AND_5_VALUE_PARAMS(p0, p1, p2, p3, p4) \\}\par
444 {\cf21   , p0##_type, p1##_type, p2##_type, p3##_type, p4##_type}\par
445 {\cf21 #define GMOCK_INTERNAL_LIST_TYPE_AND_6_VALUE_PARAMS(p0, p1, p2, p3, p4, p5) \\}\par
446 {\cf21   , p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, p5##_type}\par
447 {\cf21 #define GMOCK_INTERNAL_LIST_TYPE_AND_7_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, \\}\par
448 {\cf21                                                     p6)                     \\}\par
449 {\cf21   , p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, p5##_type, p6##_type}\par
450 {\cf21 #define GMOCK_INTERNAL_LIST_TYPE_AND_8_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, \\}\par
451 {\cf21                                                     p6, p7)                 \\}\par
452 {\cf21   , p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, p5##_type,       \\}\par
453 {\cf21       p6##_type, p7##_type}\par
454 {\cf21 #define GMOCK_INTERNAL_LIST_TYPE_AND_9_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, \\}\par
455 {\cf21                                                     p6, p7, p8)             \\}\par
456 {\cf21   , p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, p5##_type,       \\}\par
457 {\cf21       p6##_type, p7##_type, p8##_type}\par
458 {\cf21 #define GMOCK_INTERNAL_LIST_TYPE_AND_10_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, \\}\par
459 {\cf21                                                      p6, p7, p8, p9)         \\}\par
460 {\cf21   , p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, p5##_type,        \\}\par
461 {\cf21       p6##_type, p7##_type, p8##_type, p9##_type}\par
462 \par
463 {\cf20 // Declares the value parameters.}\par
464 {\cf21 #define GMOCK_INTERNAL_DECL_AND_0_VALUE_PARAMS()}\par
465 {\cf21 #define GMOCK_INTERNAL_DECL_AND_1_VALUE_PARAMS(p0) p0##_type p0}\par
466 {\cf21 #define GMOCK_INTERNAL_DECL_AND_2_VALUE_PARAMS(p0, p1) \\}\par
467 {\cf21   p0##_type p0, p1##_type p1}\par
468 {\cf21 #define GMOCK_INTERNAL_DECL_AND_3_VALUE_PARAMS(p0, p1, p2) \\}\par
469 {\cf21   p0##_type p0, p1##_type p1, p2##_type p2}\par
470 {\cf21 #define GMOCK_INTERNAL_DECL_AND_4_VALUE_PARAMS(p0, p1, p2, p3) \\}\par
471 {\cf21   p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3}\par
472 {\cf21 #define GMOCK_INTERNAL_DECL_AND_5_VALUE_PARAMS(p0, p1, p2, p3, p4) \\}\par
473 {\cf21   p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4}\par
474 {\cf21 #define GMOCK_INTERNAL_DECL_AND_6_VALUE_PARAMS(p0, p1, p2, p3, p4, p5)  \\}\par
475 {\cf21   p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4, \\}\par
476 {\cf21       p5##_type p5}\par
477 {\cf21 #define GMOCK_INTERNAL_DECL_AND_7_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6) \\}\par
478 {\cf21   p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4,    \\}\par
479 {\cf21       p5##_type p5, p6##_type p6}\par
480 {\cf21 #define GMOCK_INTERNAL_DECL_AND_8_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7) \\}\par
481 {\cf21   p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4,        \\}\par
482 {\cf21       p5##_type p5, p6##_type p6, p7##_type p7}\par
483 {\cf21 #define GMOCK_INTERNAL_DECL_AND_9_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7, \\}\par
484 {\cf21                                                p8)                             \\}\par
485 {\cf21   p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4,        \\}\par
486 {\cf21       p5##_type p5, p6##_type p6, p7##_type p7, p8##_type p8}\par
487 {\cf21 #define GMOCK_INTERNAL_DECL_AND_10_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, \\}\par
488 {\cf21                                                 p7, p8, p9)                 \\}\par
489 {\cf21   p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4,     \\}\par
490 {\cf21       p5##_type p5, p6##_type p6, p7##_type p7, p8##_type p8, p9##_type p9}\par
491 \par
492 {\cf20 // The suffix of the class template implementing the action template.}\par
493 {\cf21 #define GMOCK_INTERNAL_COUNT_AND_0_VALUE_PARAMS()}\par
494 {\cf21 #define GMOCK_INTERNAL_COUNT_AND_1_VALUE_PARAMS(p0) P}\par
495 {\cf21 #define GMOCK_INTERNAL_COUNT_AND_2_VALUE_PARAMS(p0, p1) P2}\par
496 {\cf21 #define GMOCK_INTERNAL_COUNT_AND_3_VALUE_PARAMS(p0, p1, p2) P3}\par
497 {\cf21 #define GMOCK_INTERNAL_COUNT_AND_4_VALUE_PARAMS(p0, p1, p2, p3) P4}\par
498 {\cf21 #define GMOCK_INTERNAL_COUNT_AND_5_VALUE_PARAMS(p0, p1, p2, p3, p4) P5}\par
499 {\cf21 #define GMOCK_INTERNAL_COUNT_AND_6_VALUE_PARAMS(p0, p1, p2, p3, p4, p5) P6}\par
500 {\cf21 #define GMOCK_INTERNAL_COUNT_AND_7_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6) P7}\par
501 {\cf21 #define GMOCK_INTERNAL_COUNT_AND_8_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, \\}\par
502 {\cf21                                                 p7)                         \\}\par
503 {\cf21   P8}\par
504 {\cf21 #define GMOCK_INTERNAL_COUNT_AND_9_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, \\}\par
505 {\cf21                                                 p7, p8)                     \\}\par
506 {\cf21   P9}\par
507 {\cf21 #define GMOCK_INTERNAL_COUNT_AND_10_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, \\}\par
508 {\cf21                                                  p7, p8, p9)                 \\}\par
509 {\cf21   P10}\par
510 \par
511 {\cf20 // The name of the class template implementing the action template.}\par
512 {\cf21 #define GMOCK_ACTION_CLASS_(name, value_params) \\}\par
513 {\cf21   GTEST_CONCAT_TOKEN_(name##Action, GMOCK_INTERNAL_COUNT_##value_params)}\par
514 \par
515 {\cf21 #define ACTION_TEMPLATE(name, template_params, value_params)                   \\}\par
516 {\cf21   template <GMOCK_INTERNAL_DECL_##template_params                              \\}\par
517 {\cf21                 GMOCK_INTERNAL_DECL_TYPE_##value_params>                       \\}\par
518 {\cf21   class GMOCK_ACTION_CLASS_(name, value_params) \{                              \\}\par
519 {\cf21    public:                                                                     \\}\par
520 {\cf21     explicit GMOCK_ACTION_CLASS_(name, value_params)(                          \\}\par
521 {\cf21         GMOCK_INTERNAL_DECL_##value_params)                                    \\}\par
522 {\cf21         GMOCK_PP_IF(GMOCK_PP_IS_EMPTY(GMOCK_INTERNAL_COUNT_##value_params),    \\}\par
523 {\cf21                     = default;                                                 \\}\par
524 {\cf21                     ,                                                          \\}\par
525 {\cf21                     : impl_(std::make_shared<gmock_Impl>(                      \\}\par
526 {\cf21                         GMOCK_INTERNAL_LIST_##value_params))\{\})                \\}\par
527 {\cf21             GMOCK_ACTION_CLASS_(name, value_params)(const GMOCK_ACTION_CLASS_( \\}\par
528 {\cf21                 name, value_params) &) noexcept GMOCK_INTERNAL_DEFN_COPY_      \\}\par
529 {\cf21         ##value_params GMOCK_ACTION_CLASS_(name, value_params)(                \\}\par
530 {\cf21             GMOCK_ACTION_CLASS_(name, value_params) &&) noexcept               \\}\par
531 {\cf21         GMOCK_INTERNAL_DEFN_COPY_##value_params template <typename F>          \\}\par
532 {\cf21         operator ::testing::Action<F>() const \{                                \\}\par
533 {\cf21       return GMOCK_PP_IF(                                                      \\}\par
534 {\cf21           GMOCK_PP_IS_EMPTY(GMOCK_INTERNAL_COUNT_##value_params),              \\}\par
535 {\cf21           (::testing::internal::MakeAction<F, gmock_Impl>()),                  \\}\par
536 {\cf21           (::testing::internal::MakeAction<F>(impl_)));                        \\}\par
537 {\cf21     \}                                                                          \\}\par
538 {\cf21                                                                                \\}\par
539 {\cf21    private:                                                                    \\}\par
540 {\cf21     class gmock_Impl \{                                                         \\}\par
541 {\cf21      public:                                                                   \\}\par
542 {\cf21       explicit gmock_Impl GMOCK_INTERNAL_INIT_##value_params \{\}                \\}\par
543 {\cf21       template <typename function_type, typename return_type,                  \\}\par
544 {\cf21                 typename args_type, GMOCK_ACTION_TEMPLATE_ARGS_NAMES_>         \\}\par
545 {\cf21       return_type gmock_PerformImpl(GMOCK_ACTION_ARG_TYPES_AND_NAMES_) const;  \\}\par
546 {\cf21       GMOCK_INTERNAL_DEFN_##value_params                                       \\}\par
547 {\cf21     \};                                                                         \\}\par
548 {\cf21     GMOCK_PP_IF(GMOCK_PP_IS_EMPTY(GMOCK_INTERNAL_COUNT_##value_params), ,      \\}\par
549 {\cf21                 std::shared_ptr<const gmock_Impl> impl_;)                      \\}\par
550 {\cf21   \};                                                                           \\}\par
551 {\cf21   template <GMOCK_INTERNAL_DECL_##template_params                              \\}\par
552 {\cf21                 GMOCK_INTERNAL_DECL_TYPE_##value_params>                       \\}\par
553 {\cf21   GMOCK_ACTION_CLASS_(                                                         \\}\par
554 {\cf21       name, value_params)<GMOCK_INTERNAL_LIST_##template_params                \\}\par
555 {\cf21                               GMOCK_INTERNAL_LIST_TYPE_##value_params>         \\}\par
556 {\cf21       name(GMOCK_INTERNAL_DECL_##value_params) GTEST_MUST_USE_RESULT_;         \\}\par
557 {\cf21   template <GMOCK_INTERNAL_DECL_##template_params                              \\}\par
558 {\cf21                 GMOCK_INTERNAL_DECL_TYPE_##value_params>                       \\}\par
559 {\cf21   inline GMOCK_ACTION_CLASS_(                                                  \\}\par
560 {\cf21       name, value_params)<GMOCK_INTERNAL_LIST_##template_params                \\}\par
561 {\cf21                               GMOCK_INTERNAL_LIST_TYPE_##value_params>         \\}\par
562 {\cf21   name(GMOCK_INTERNAL_DECL_##value_params) \{                                   \\}\par
563 {\cf21     return GMOCK_ACTION_CLASS_(                                                \\}\par
564 {\cf21         name, value_params)<GMOCK_INTERNAL_LIST_##template_params              \\}\par
565 {\cf21                                 GMOCK_INTERNAL_LIST_TYPE_##value_params>(      \\}\par
566 {\cf21         GMOCK_INTERNAL_LIST_##value_params);                                   \\}\par
567 {\cf21   \}                                                                            \\}\par
568 {\cf21   template <GMOCK_INTERNAL_DECL_##template_params                              \\}\par
569 {\cf21                 GMOCK_INTERNAL_DECL_TYPE_##value_params>                       \\}\par
570 {\cf21   template <typename function_type, typename return_type, typename args_type,  \\}\par
571 {\cf21             GMOCK_ACTION_TEMPLATE_ARGS_NAMES_>                                 \\}\par
572 {\cf21   return_type GMOCK_ACTION_CLASS_(                                             \\}\par
573 {\cf21       name, value_params)<GMOCK_INTERNAL_LIST_##template_params                \\}\par
574 {\cf21                               GMOCK_INTERNAL_LIST_TYPE_##value_params>::       \\}\par
575 {\cf21       gmock_Impl::gmock_PerformImpl(GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_)  \\}\par
576 {\cf21           const}\par
577 \par
578 {\cf17 namespace }testing \{\par
579 \par
580 {\cf20 // The ACTION*() macros trigger warning C4100 (unreferenced formal}\par
581 {\cf20 // parameter) in MSVC with -W4.  Unfortunately they cannot be fixed in}\par
582 {\cf20 // the macro definition, as the warnings are generated when the macro}\par
583 {\cf20 // is expanded and macro expansion cannot contain #pragma.  Therefore}\par
584 {\cf20 // we suppress them here.}\par
585 {\cf21 #ifdef _MSC_VER}\par
586 {\cf21 #pragma warning(push)}\par
587 {\cf21 #pragma warning(disable : 4100)}\par
588 {\cf21 #endif}\par
589 \par
590 {\cf17 namespace }internal \{\par
591 \par
592 {\cf20 // internal::InvokeArgument - a helper for InvokeArgument action.}\par
593 {\cf20 // The basic overloads are provided here for generic functors.}\par
594 {\cf20 // Overloads for other custom-callables are provided in the}\par
595 {\cf20 // internal/custom/gmock-generated-actions.h header.}\par
596 {\cf17 template} <{\cf17 typename} F, {\cf17 typename}... Args>\par
597 {\cf17 auto} InvokeArgument(F f, Args... args) -> {\cf17 decltype}(f(args...)) \{\par
598   {\cf19 return} f(args...);\par
599 \}\par
600 \par
601 {\cf17 template} <std::size_t index, {\cf17 typename}... Params>\par
602 {\cf17 struct }InvokeArgumentAction \{\par
603   {\cf17 template} <{\cf17 typename}... Args,\par
604             {\cf17 typename} = {\cf17 typename} std::enable_if<(index < {\cf17 sizeof}...(Args))>::type>\par
605   {\cf17 auto} operator()(Args&&... args) {\cf17 const} -> {\cf17 decltype}(internal::InvokeArgument(\par
606       std::get<index>(std::forward_as_tuple(std::forward<Args>(args)...)),\par
607       std::declval<const Params&>()...)) \{\par
608     internal::FlatTuple<Args&&...> args_tuple(FlatTupleConstructTag\{\},\par
609                                               std::forward<Args>(args)...);\par
610     {\cf19 return} params.Apply([&]({\cf17 const} Params&... unpacked_params) \{\par
611       {\cf17 auto}&& callable = args_tuple.template Get<index>();\par
612       {\cf19 return} internal::InvokeArgument(\par
613           std::forward<{\cf17 decltype}(callable)>(callable), unpacked_params...);\par
614     \});\par
615   \}\par
616 \par
617   internal::FlatTuple<Params...> params;\par
618 \};\par
619 \par
620 \}  {\cf20 // namespace internal}\par
621 \par
622 {\cf20 // The InvokeArgument<N>(a1, a2, ..., a_k) action invokes the N-th}\par
623 {\cf20 // (0-based) argument, which must be a k-ary callable, of the mock}\par
624 {\cf20 // function, with arguments a1, a2, ..., a_k.}\par
625 {\cf20 //}\par
626 {\cf20 // Notes:}\par
627 {\cf20 //}\par
628 {\cf20 //   1. The arguments are passed by value by default.  If you need to}\par
629 {\cf20 //   pass an argument by reference, wrap it inside std::ref().  For}\par
630 {\cf20 //   example,}\par
631 {\cf20 //}\par
632 {\cf20 //     InvokeArgument<1>(5, string("Hello"), std::ref(foo))}\par
633 {\cf20 //}\par
634 {\cf20 //   passes 5 and string("Hello") by value, and passes foo by}\par
635 {\cf20 //   reference.}\par
636 {\cf20 //}\par
637 {\cf20 //   2. If the callable takes an argument by reference but std::ref() is}\par
638 {\cf20 //   not used, it will receive the reference to a copy of the value,}\par
639 {\cf20 //   instead of the original value.  For example, when the 0-th}\par
640 {\cf20 //   argument of the mock function takes a const string&, the action}\par
641 {\cf20 //}\par
642 {\cf20 //     InvokeArgument<0>(string("Hello"))}\par
643 {\cf20 //}\par
644 {\cf20 //   makes a copy of the temporary string("Hello") object and passes a}\par
645 {\cf20 //   reference of the copy, instead of the original temporary object,}\par
646 {\cf20 //   to the callable.  This makes it easy for a user to define an}\par
647 {\cf20 //   InvokeArgument action from temporary values and have it performed}\par
648 {\cf20 //   later.}\par
649 {\cf17 template} <std::size_t index, {\cf17 typename}... Params>\par
650 internal::InvokeArgumentAction<index, typename std::decay<Params>::type...>\par
651 InvokeArgument(Params&&... params) \{\par
652   {\cf19 return} \{internal::FlatTuple<typename std::decay<Params>::type...>(\par
653       internal::FlatTupleConstructTag\{\}, std::forward<Params>(params)...)\};\par
654 \}\par
655 \par
656 {\cf21 #ifdef _MSC_VER}\par
657 {\cf21 #pragma warning(pop)}\par
658 {\cf21 #endif}\par
659 \par
660 \}  {\cf20 // namespace testing}\par
661 \par
662 {\cf21 #endif  }{\cf20 // GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_MORE_ACTIONS_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gmock-more-matchers.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googlemock/include/gmock/gmock-more-matchers.h}
{\xe \v lib/googletest-main/googlemock/include/gmock/gmock-more-matchers.h}
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2013, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // Google Mock - a framework for writing C++ mock classes.}\par
31 {\cf20 //}\par
32 {\cf20 // This file implements some matchers that depend on gmock-matchers.h.}\par
33 {\cf20 //}\par
34 {\cf20 // Note that tests are implemented in gmock-matchers_test.cc rather than}\par
35 {\cf20 // gmock-more-matchers-test.cc.}\par
36 \par
37 {\cf20 // IWYU pragma: private, include "gmock/gmock.h"}\par
38 {\cf20 // IWYU pragma: friend gmock/.*}\par
39 \par
40 {\cf21 #ifndef GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_MORE_MATCHERS_H_}\par
41 {\cf21 #define GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_MORE_MATCHERS_H_}\par
42 \par
43 {\cf21 #include <ostream>}\par
44 {\cf21 #include <string>}\par
45 \par
46 {\cf21 #include "gmock/gmock-matchers.h"}\par
47 \par
48 {\cf17 namespace }testing \{\par
49 \par
50 {\cf20 // Silence C4100 (unreferenced formal}\par
51 {\cf20 // parameter) for MSVC}\par
52 {\cf21 #ifdef _MSC_VER}\par
53 {\cf21 #pragma warning(push)}\par
54 {\cf21 #pragma warning(disable : 4100)}\par
55 {\cf21 #if (_MSC_VER == 1900)}\par
56 {\cf20 // and silence C4800 (C4800: 'int *const ': forcing value}\par
57 {\cf20 // to bool 'true' or 'false') for MSVC 14}\par
58 {\cf21 #pragma warning(disable : 4800)}\par
59 {\cf21 #endif}\par
60 {\cf21 #endif}\par
61 \par
62 {\cf17 namespace }internal \{\par
63 \par
64 {\cf20 // Implements the polymorphic IsEmpty matcher, which}\par
65 {\cf20 // can be used as a Matcher<T> as long as T is either a container that defines}\par
66 {\cf20 // empty() and size() (e.g. std::vector or std::string), or a C-style string.}\par
67 {\cf17 class }IsEmptyMatcher \{\par
68  {\cf17 public}:\par
69   {\cf20 // Matches anything that defines empty() and size().}\par
70   {\cf17 template} <{\cf17 typename} MatcheeContainerType>\par
71   {\cf18 bool} MatchAndExplain({\cf17 const} MatcheeContainerType& c,\par
72                        MatchResultListener* listener){\cf17  const }\{\par
73     {\cf19 if} (c.empty()) \{\par
74       {\cf19 return} {\cf17 true};\par
75     \}\par
76     *listener << {\cf22 "whose size is "} << c.size();\par
77     {\cf19 return} {\cf17 false};\par
78   \}\par
79 \par
80   {\cf20 // Matches C-style strings.}\par
81   {\cf18 bool} MatchAndExplain({\cf17 const} {\cf18 char}* s, MatchResultListener* listener){\cf17  const }\{\par
82     {\cf19 return} MatchAndExplain(std::string(s), listener);\par
83   \}\par
84 \par
85   {\cf20 // Describes what this matcher matches.}\par
86   {\cf18 void} DescribeTo(std::ostream* os){\cf17  const }\{ *os << {\cf22 "is empty"}; \}\par
87 \par
88   {\cf18 void} DescribeNegationTo(std::ostream* os){\cf17  const }\{ *os << {\cf22 "isn't empty"}; \}\par
89 \};\par
90 \par
91 \}  {\cf20 // namespace internal}\par
92 \par
93 {\cf20 // Creates a polymorphic matcher that matches an empty container or C-style}\par
94 {\cf20 // string. The container must support both size() and empty(), which all}\par
95 {\cf20 // STL-like containers provide.}\par
96 {\cf17 inline} PolymorphicMatcher<internal::IsEmptyMatcher> IsEmpty() \{\par
97   {\cf19 return} MakePolymorphicMatcher(internal::IsEmptyMatcher());\par
98 \}\par
99 \par
100 {\cf20 // Define a matcher that matches a value that evaluates in boolean}\par
101 {\cf20 // context to true.  Useful for types that define "explicit operator}\par
102 {\cf20 // bool" operators and so can't be compared for equality with true}\par
103 {\cf20 // and false.}\par
104 MATCHER(IsTrue, negation ? {\cf22 "is false"} : {\cf22 "is true"}) \{\par
105   {\cf19 return} {\cf17 static_cast<}{\cf18 bool}{\cf17 >}(arg);\par
106 \}\par
107 \par
108 {\cf20 // Define a matcher that matches a value that evaluates in boolean}\par
109 {\cf20 // context to false.  Useful for types that define "explicit operator}\par
110 {\cf20 // bool" operators and so can't be compared for equality with true}\par
111 {\cf20 // and false.}\par
112 MATCHER(IsFalse, negation ? {\cf22 "is true"} : {\cf22 "is false"}) \{\par
113   {\cf19 return} !{\cf17 static_cast<}{\cf18 bool}{\cf17 >}(arg);\par
114 \}\par
115 \par
116 {\cf21 #ifdef _MSC_VER}\par
117 {\cf21 #pragma warning(pop)}\par
118 {\cf21 #endif}\par
119 \par
120 \}  {\cf20 // namespace testing}\par
121 \par
122 {\cf21 #endif  }{\cf20 // GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_MORE_MATCHERS_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gmock-nice-strict.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googlemock/include/gmock/gmock-nice-strict.h}
{\xe \v lib/googletest-main/googlemock/include/gmock/gmock-nice-strict.h}
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2008, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // Implements class templates NiceMock, NaggyMock, and StrictMock.}\par
31 {\cf20 //}\par
32 {\cf20 // Given a mock class MockFoo that is created using Google Mock,}\par
33 {\cf20 // NiceMock<MockFoo> is a subclass of MockFoo that allows}\par
34 {\cf20 // uninteresting calls (i.e. calls to mock methods that have no}\par
35 {\cf20 // EXPECT_CALL specs), NaggyMock<MockFoo> is a subclass of MockFoo}\par
36 {\cf20 // that prints a warning when an uninteresting call occurs, and}\par
37 {\cf20 // StrictMock<MockFoo> is a subclass of MockFoo that treats all}\par
38 {\cf20 // uninteresting calls as errors.}\par
39 {\cf20 //}\par
40 {\cf20 // Currently a mock is naggy by default, so MockFoo and}\par
41 {\cf20 // NaggyMock<MockFoo> behave like the same.  However, we will soon}\par
42 {\cf20 // switch the default behavior of mocks to be nice, as that in general}\par
43 {\cf20 // leads to more maintainable tests.  When that happens, MockFoo will}\par
44 {\cf20 // stop behaving like NaggyMock<MockFoo> and start behaving like}\par
45 {\cf20 // NiceMock<MockFoo>.}\par
46 {\cf20 //}\par
47 {\cf20 // NiceMock, NaggyMock, and StrictMock "inherit" the constructors of}\par
48 {\cf20 // their respective base class.  Therefore you can write}\par
49 {\cf20 // NiceMock<MockFoo>(5, "a") to construct a nice mock where MockFoo}\par
50 {\cf20 // has a constructor that accepts (int, const char*), for example.}\par
51 {\cf20 //}\par
52 {\cf20 // A known limitation is that NiceMock<MockFoo>, NaggyMock<MockFoo>,}\par
53 {\cf20 // and StrictMock<MockFoo> only works for mock methods defined using}\par
54 {\cf20 // the MOCK_METHOD* family of macros DIRECTLY in the MockFoo class.}\par
55 {\cf20 // If a mock method is defined in a base class of MockFoo, the "nice"}\par
56 {\cf20 // or "strict" modifier may not affect it, depending on the compiler.}\par
57 {\cf20 // In particular, nesting NiceMock, NaggyMock, and StrictMock is NOT}\par
58 {\cf20 // supported.}\par
59 \par
60 {\cf20 // IWYU pragma: private, include "gmock/gmock.h"}\par
61 {\cf20 // IWYU pragma: friend gmock/.*}\par
62 \par
63 {\cf21 #ifndef GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_NICE_STRICT_H_}\par
64 {\cf21 #define GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_NICE_STRICT_H_}\par
65 \par
66 {\cf21 #include <cstdint>}\par
67 {\cf21 #include <type_traits>}\par
68 \par
69 {\cf21 #include "gmock/gmock-spec-builders.h"}\par
70 {\cf21 #include "gmock/internal/gmock-port.h"}\par
71 \par
72 {\cf17 namespace }testing \{\par
73 {\cf17 template} <{\cf17 class} MockClass>\par
74 {\cf17 class }NiceMock;\par
75 {\cf17 template} <{\cf17 class} MockClass>\par
76 {\cf17 class }NaggyMock;\par
77 {\cf17 template} <{\cf17 class} MockClass>\par
78 {\cf17 class }StrictMock;\par
79 \par
80 {\cf17 namespace }internal \{\par
81 {\cf17 template} <{\cf17 typename} T>\par
82 std::true_type StrictnessModifierProbe({\cf17 const} NiceMock<T>&);\par
83 {\cf17 template} <{\cf17 typename} T>\par
84 std::true_type StrictnessModifierProbe({\cf17 const} NaggyMock<T>&);\par
85 {\cf17 template} <{\cf17 typename} T>\par
86 std::true_type StrictnessModifierProbe({\cf17 const} StrictMock<T>&);\par
87 std::false_type StrictnessModifierProbe(...);\par
88 \par
89 {\cf17 template} <{\cf17 typename} T>\par
90 {\cf17 constexpr} {\cf18 bool} HasStrictnessModifier() \{\par
91   {\cf19 return} {\cf17 decltype}(StrictnessModifierProbe(std::declval<const T&>()))::value;\par
92 \}\par
93 \par
94 {\cf20 // Base classes that register and deregister with testing::Mock to alter the}\par
95 {\cf20 // default behavior around uninteresting calls. Inheriting from one of these}\par
96 {\cf20 // classes first and then MockClass ensures the MockClass constructor is run}\par
97 {\cf20 // after registration, and that the MockClass destructor runs before}\par
98 {\cf20 // deregistration. This guarantees that MockClass's constructor and destructor}\par
99 {\cf20 // run with the same level of strictness as its instance methods.}\par
100 \par
101 {\cf21 #if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MINGW && \\}\par
102 {\cf21     (defined(_MSC_VER) || defined(__clang__))}\par
103 {\cf20 // We need to mark these classes with this declspec to ensure that}\par
104 {\cf20 // the empty base class optimization is performed.}\par
105 {\cf21 #define GTEST_INTERNAL_EMPTY_BASE_CLASS __declspec(empty_bases)}\par
106 {\cf21 #else}\par
107 {\cf21 #define GTEST_INTERNAL_EMPTY_BASE_CLASS}\par
108 {\cf21 #endif}\par
109 \par
110 {\cf17 template} <{\cf17 typename} Base>\par
111 {\cf17 class }NiceMockImpl \{\par
112  {\cf17 public}:\par
113   NiceMockImpl() \{\par
114     ::testing::Mock::AllowUninterestingCalls({\cf17 reinterpret_cast<}uintptr_t{\cf17 >}({\cf17 this}));\par
115   \}\par
116 \par
117   ~NiceMockImpl() \{\par
118     ::testing::Mock::UnregisterCallReaction({\cf17 reinterpret_cast<}uintptr_t{\cf17 >}({\cf17 this}));\par
119   \}\par
120 \};\par
121 \par
122 {\cf17 template} <{\cf17 typename} Base>\par
123 {\cf17 class }NaggyMockImpl \{\par
124  {\cf17 public}:\par
125   NaggyMockImpl() \{\par
126     ::testing::Mock::WarnUninterestingCalls({\cf17 reinterpret_cast<}uintptr_t{\cf17 >}({\cf17 this}));\par
127   \}\par
128 \par
129   ~NaggyMockImpl() \{\par
130     ::testing::Mock::UnregisterCallReaction({\cf17 reinterpret_cast<}uintptr_t{\cf17 >}({\cf17 this}));\par
131   \}\par
132 \};\par
133 \par
134 {\cf17 template} <{\cf17 typename} Base>\par
135 {\cf17 class }StrictMockImpl \{\par
136  {\cf17 public}:\par
137   StrictMockImpl() \{\par
138     ::testing::Mock::FailUninterestingCalls({\cf17 reinterpret_cast<}uintptr_t{\cf17 >}({\cf17 this}));\par
139   \}\par
140 \par
141   ~StrictMockImpl() \{\par
142     ::testing::Mock::UnregisterCallReaction({\cf17 reinterpret_cast<}uintptr_t{\cf17 >}({\cf17 this}));\par
143   \}\par
144 \};\par
145 \par
146 \}  {\cf20 // namespace internal}\par
147 \par
148 {\cf17 template} <{\cf17 class} MockClass>\par
149 {\cf17 class }GTEST_INTERNAL_EMPTY_BASE_CLASS NiceMock\par
150     : {\cf17 private} internal::NiceMockImpl<MockClass>,\par
151       {\cf17 public} MockClass \{\par
152  {\cf17 public}:\par
153   {\cf17 static_assert}(!internal::HasStrictnessModifier<MockClass>(),\par
154                 {\cf22 "Can't apply NiceMock to a class hierarchy that already has a "}\par
155                 {\cf22 "strictness modifier. See "}\par
156                 {\cf22 "https://google.github.io/googletest/"}\par
157                 {\cf22 "gmock_cook_book.html#NiceStrictNaggy"});\par
158   NiceMock() : MockClass() \{\par
159     {\cf17 static_assert}({\cf17 sizeof}(*this) == {\cf17 sizeof}(MockClass),\par
160                   {\cf22 "The impl subclass shouldn't introduce any padding"});\par
161   \}\par
162 \par
163   {\cf20 // Ideally, we would inherit base class's constructors through a using}\par
164   {\cf20 // declaration, which would preserve their visibility. However, many existing}\par
165   {\cf20 // tests rely on the fact that current implementation reexports protected}\par
166   {\cf20 // constructors as public. These tests would need to be cleaned up first.}\par
167 \par
168   {\cf20 // Single argument constructor is special-cased so that it can be}\par
169   {\cf20 // made explicit.}\par
170   {\cf17 template} <{\cf17 typename} A>\par
171   {\cf17 explicit} NiceMock(A&& arg) : MockClass(std::forward<A>(arg)) \{\par
172     {\cf17 static_assert}({\cf17 sizeof}(*this) == {\cf17 sizeof}(MockClass),\par
173                   {\cf22 "The impl subclass shouldn't introduce any padding"});\par
174   \}\par
175 \par
176   {\cf17 template} <{\cf17 typename} TArg1, {\cf17 typename} TArg2, {\cf17 typename}... An>\par
177   NiceMock(TArg1&& arg1, TArg2&& arg2, An&&... args)\par
178       : MockClass(std::forward<TArg1>(arg1), std::forward<TArg2>(arg2),\par
179                   std::forward<An>(args)...) \{\par
180     {\cf17 static_assert}({\cf17 sizeof}(*this) == {\cf17 sizeof}(MockClass),\par
181                   {\cf22 "The impl subclass shouldn't introduce any padding"});\par
182   \}\par
183 \par
184  {\cf17 private}:\par
185   NiceMock({\cf17 const} NiceMock&) = {\cf17 delete};\par
186   NiceMock& operator=({\cf17 const} NiceMock&) = {\cf17 delete};\par
187 \};\par
188 \par
189 {\cf17 template} <{\cf17 class} MockClass>\par
190 {\cf17 class }GTEST_INTERNAL_EMPTY_BASE_CLASS NaggyMock\par
191     : {\cf17 private} internal::NaggyMockImpl<MockClass>,\par
192       {\cf17 public} MockClass \{\par
193   {\cf17 static_assert}(!internal::HasStrictnessModifier<MockClass>(),\par
194                 {\cf22 "Can't apply NaggyMock to a class hierarchy that already has a "}\par
195                 {\cf22 "strictness modifier. See "}\par
196                 {\cf22 "https://google.github.io/googletest/"}\par
197                 {\cf22 "gmock_cook_book.html#NiceStrictNaggy"});\par
198 \par
199  {\cf17 public}:\par
200   NaggyMock() : MockClass() \{\par
201     {\cf17 static_assert}({\cf17 sizeof}(*this) == {\cf17 sizeof}(MockClass),\par
202                   {\cf22 "The impl subclass shouldn't introduce any padding"});\par
203   \}\par
204 \par
205   {\cf20 // Ideally, we would inherit base class's constructors through a using}\par
206   {\cf20 // declaration, which would preserve their visibility. However, many existing}\par
207   {\cf20 // tests rely on the fact that current implementation reexports protected}\par
208   {\cf20 // constructors as public. These tests would need to be cleaned up first.}\par
209 \par
210   {\cf20 // Single argument constructor is special-cased so that it can be}\par
211   {\cf20 // made explicit.}\par
212   {\cf17 template} <{\cf17 typename} A>\par
213   {\cf17 explicit} NaggyMock(A&& arg) : MockClass(std::forward<A>(arg)) \{\par
214     {\cf17 static_assert}({\cf17 sizeof}(*this) == {\cf17 sizeof}(MockClass),\par
215                   {\cf22 "The impl subclass shouldn't introduce any padding"});\par
216   \}\par
217 \par
218   {\cf17 template} <{\cf17 typename} TArg1, {\cf17 typename} TArg2, {\cf17 typename}... An>\par
219   NaggyMock(TArg1&& arg1, TArg2&& arg2, An&&... args)\par
220       : MockClass(std::forward<TArg1>(arg1), std::forward<TArg2>(arg2),\par
221                   std::forward<An>(args)...) \{\par
222     {\cf17 static_assert}({\cf17 sizeof}(*this) == {\cf17 sizeof}(MockClass),\par
223                   {\cf22 "The impl subclass shouldn't introduce any padding"});\par
224   \}\par
225 \par
226  {\cf17 private}:\par
227   NaggyMock({\cf17 const} NaggyMock&) = {\cf17 delete};\par
228   NaggyMock& operator=({\cf17 const} NaggyMock&) = {\cf17 delete};\par
229 \};\par
230 \par
231 {\cf17 template} <{\cf17 class} MockClass>\par
232 {\cf17 class }GTEST_INTERNAL_EMPTY_BASE_CLASS StrictMock\par
233     : {\cf17 private} internal::StrictMockImpl<MockClass>,\par
234       {\cf17 public} MockClass \{\par
235  {\cf17 public}:\par
236   {\cf17 static_assert}(\par
237       !internal::HasStrictnessModifier<MockClass>(),\par
238       {\cf22 "Can't apply StrictMock to a class hierarchy that already has a "}\par
239       {\cf22 "strictness modifier. See "}\par
240       {\cf22 "https://google.github.io/googletest/"}\par
241       {\cf22 "gmock_cook_book.html#NiceStrictNaggy"});\par
242   StrictMock() : MockClass() \{\par
243     {\cf17 static_assert}({\cf17 sizeof}(*this) == {\cf17 sizeof}(MockClass),\par
244                   {\cf22 "The impl subclass shouldn't introduce any padding"});\par
245   \}\par
246 \par
247   {\cf20 // Ideally, we would inherit base class's constructors through a using}\par
248   {\cf20 // declaration, which would preserve their visibility. However, many existing}\par
249   {\cf20 // tests rely on the fact that current implementation reexports protected}\par
250   {\cf20 // constructors as public. These tests would need to be cleaned up first.}\par
251 \par
252   {\cf20 // Single argument constructor is special-cased so that it can be}\par
253   {\cf20 // made explicit.}\par
254   {\cf17 template} <{\cf17 typename} A>\par
255   {\cf17 explicit} StrictMock(A&& arg) : MockClass(std::forward<A>(arg)) \{\par
256     {\cf17 static_assert}({\cf17 sizeof}(*this) == {\cf17 sizeof}(MockClass),\par
257                   {\cf22 "The impl subclass shouldn't introduce any padding"});\par
258   \}\par
259 \par
260   {\cf17 template} <{\cf17 typename} TArg1, {\cf17 typename} TArg2, {\cf17 typename}... An>\par
261   StrictMock(TArg1&& arg1, TArg2&& arg2, An&&... args)\par
262       : MockClass(std::forward<TArg1>(arg1), std::forward<TArg2>(arg2),\par
263                   std::forward<An>(args)...) \{\par
264     {\cf17 static_assert}({\cf17 sizeof}(*this) == {\cf17 sizeof}(MockClass),\par
265                   {\cf22 "The impl subclass shouldn't introduce any padding"});\par
266   \}\par
267 \par
268  {\cf17 private}:\par
269   StrictMock({\cf17 const} StrictMock&) = {\cf17 delete};\par
270   StrictMock& operator=({\cf17 const} StrictMock&) = {\cf17 delete};\par
271 \};\par
272 \par
273 {\cf21 #undef GTEST_INTERNAL_EMPTY_BASE_CLASS}\par
274 \par
275 \}  {\cf20 // namespace testing}\par
276 \par
277 {\cf21 #endif  }{\cf20 // GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_NICE_STRICT_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gmock-spec-builders.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googlemock/include/gmock/gmock-spec-builders.h}
{\xe \v lib/googletest-main/googlemock/include/gmock/gmock-spec-builders.h}
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2007, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // Google Mock - a framework for writing C++ mock classes.}\par
31 {\cf20 //}\par
32 {\cf20 // This file implements the ON_CALL() and EXPECT_CALL() macros.}\par
33 {\cf20 //}\par
34 {\cf20 // A user can use the ON_CALL() macro to specify the default action of}\par
35 {\cf20 // a mock method.  The syntax is:}\par
36 {\cf20 //}\par
37 {\cf20 //   ON_CALL(mock_object, Method(argument-matchers))}\par
38 {\cf20 //       .With(multi-argument-matcher)}\par
39 {\cf20 //       .WillByDefault(action);}\par
40 {\cf20 //}\par
41 {\cf20 //  where the .With() clause is optional.}\par
42 {\cf20 //}\par
43 {\cf20 // A user can use the EXPECT_CALL() macro to specify an expectation on}\par
44 {\cf20 // a mock method.  The syntax is:}\par
45 {\cf20 //}\par
46 {\cf20 //   EXPECT_CALL(mock_object, Method(argument-matchers))}\par
47 {\cf20 //       .With(multi-argument-matchers)}\par
48 {\cf20 //       .Times(cardinality)}\par
49 {\cf20 //       .InSequence(sequences)}\par
50 {\cf20 //       .After(expectations)}\par
51 {\cf20 //       .WillOnce(action)}\par
52 {\cf20 //       .WillRepeatedly(action)}\par
53 {\cf20 //       .RetiresOnSaturation();}\par
54 {\cf20 //}\par
55 {\cf20 // where all clauses are optional, and .InSequence()/.After()/}\par
56 {\cf20 // .WillOnce() can appear any number of times.}\par
57 \par
58 {\cf20 // IWYU pragma: private, include "gmock/gmock.h"}\par
59 {\cf20 // IWYU pragma: friend gmock/.*}\par
60 \par
61 {\cf21 #ifndef GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_SPEC_BUILDERS_H_}\par
62 {\cf21 #define GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_SPEC_BUILDERS_H_}\par
63 \par
64 {\cf21 #include <cstdint>}\par
65 {\cf21 #include <functional>}\par
66 {\cf21 #include <map>}\par
67 {\cf21 #include <memory>}\par
68 {\cf21 #include <set>}\par
69 {\cf21 #include <sstream>}\par
70 {\cf21 #include <string>}\par
71 {\cf21 #include <type_traits>}\par
72 {\cf21 #include <utility>}\par
73 {\cf21 #include <vector>}\par
74 \par
75 {\cf21 #include "gmock/gmock-actions.h"}\par
76 {\cf21 #include "gmock/gmock-cardinalities.h"}\par
77 {\cf21 #include "gmock/gmock-matchers.h"}\par
78 {\cf21 #include "gmock/internal/gmock-internal-utils.h"}\par
79 {\cf21 #include "gmock/internal/gmock-port.h"}\par
80 {\cf21 #include "gtest/gtest.h"}\par
81 \par
82 {\cf21 #if GTEST_HAS_EXCEPTIONS}\par
83 {\cf21 #include <stdexcept>}  {\cf20 // NOLINT}\par
84 {\cf21 #endif}\par
85 \par
86 GTEST_DISABLE_MSC_WARNINGS_PUSH_(4251 \\\par
87 {\cf20 /* class A needs to have dll-interface to be used by clients of class B */})\par
88 \par
89 namespace testing \{\par
90 \par
91 {\cf20 // An abstract handle of an expectation.}\par
92 {\cf17 class }Expectation;\par
93 \par
94 {\cf20 // A set of expectation handles.}\par
95 {\cf17 class }ExpectationSet;\par
96 \par
97 {\cf20 // Anything inside the 'internal' namespace IS INTERNAL IMPLEMENTATION}\par
98 {\cf20 // and MUST NOT BE USED IN USER CODE!!!}\par
99 {\cf17 namespace }internal \{\par
100 \par
101 {\cf20 // Implements a mock function.}\par
102 {\cf17 template} <{\cf17 typename} F>\par
103 {\cf17 class }FunctionMocker;\par
104 \par
105 {\cf20 // Base class for expectations.}\par
106 {\cf17 class }ExpectationBase;\par
107 \par
108 {\cf20 // Implements an expectation.}\par
109 {\cf17 template} <{\cf17 typename} F>\par
110 {\cf17 class }TypedExpectation;\par
111 \par
112 {\cf20 // Helper class for testing the Expectation class template.}\par
113 {\cf17 class }ExpectationTester;\par
114 \par
115 {\cf20 // Helper classes for implementing NiceMock, StrictMock, and NaggyMock.}\par
116 {\cf17 template} <{\cf17 typename} MockClass>\par
117 {\cf17 class }NiceMockImpl;\par
118 {\cf17 template} <{\cf17 typename} MockClass>\par
119 {\cf17 class }StrictMockImpl;\par
120 {\cf17 template} <{\cf17 typename} MockClass>\par
121 {\cf17 class }NaggyMockImpl;\par
122 \par
123 {\cf20 // Protects the mock object registry (in class Mock), all function}\par
124 {\cf20 // mockers, and all expectations.}\par
125 {\cf20 //}\par
126 {\cf20 // The reason we don't use more fine-grained protection is: when a}\par
127 {\cf20 // mock function Foo() is called, it needs to consult its expectations}\par
128 {\cf20 // to see which one should be picked.  If another thread is allowed to}\par
129 {\cf20 // call a mock function (either Foo() or a different one) at the same}\par
130 {\cf20 // time, it could affect the "retired" attributes of Foo()'s}\par
131 {\cf20 // expectations when InSequence() is used, and thus affect which}\par
132 {\cf20 // expectation gets picked.  Therefore, we sequence all mock function}\par
133 {\cf20 // calls to ensure the integrity of the mock objects' states.}\par
134 GTEST_API_ GTEST_DECLARE_STATIC_MUTEX_(g_gmock_mutex);\par
135 \par
136 {\cf20 // Abstract base class of FunctionMocker.  This is the}\par
137 {\cf20 // type-agnostic part of the function mocker interface.  Its pure}\par
138 {\cf20 // virtual methods are implemented by FunctionMocker.}\par
139 {\cf17 class }GTEST_API_ UntypedFunctionMockerBase \{\par
140  {\cf17 public}:\par
141   UntypedFunctionMockerBase();\par
142   {\cf17 virtual} ~UntypedFunctionMockerBase();\par
143 \par
144   {\cf20 // Verifies that all expectations on this mock function have been}\par
145   {\cf20 // satisfied.  Reports one or more Google Test non-fatal failures}\par
146   {\cf20 // and returns false if not.}\par
147   {\cf18 bool} VerifyAndClearExpectationsLocked()\par
148       GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex);\par
149 \par
150   {\cf20 // Clears the ON_CALL()s set on this mock function.}\par
151   virtual {\cf18 void} ClearDefaultActionsLocked()\par
152       GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex) = 0;\par
153 \par
154   {\cf20 // In all of the following Untyped* functions, it's the caller's}\par
155   {\cf20 // responsibility to guarantee the correctness of the arguments'}\par
156   {\cf20 // types.}\par
157 \par
158   {\cf20 // Writes a message that the call is uninteresting (i.e. neither}\par
159   {\cf20 // explicitly expected nor explicitly unexpected) to the given}\par
160   {\cf20 // ostream.}\par
161   virtual {\cf18 void} UntypedDescribeUninterestingCall(const {\cf18 void}* untyped_args,\par
162                                                 ::std::ostream* os) const\par
163       GTEST_LOCK_EXCLUDED_(g_gmock_mutex) = 0;\par
164 \par
165   {\cf20 // Returns the expectation that matches the given function arguments}\par
166   {\cf20 // (or NULL is there's no match); when a match is found,}\par
167   {\cf20 // untyped_action is set to point to the action that should be}\par
168   {\cf20 // performed (or NULL if the action is "do default"), and}\par
169   {\cf20 // is_excessive is modified to indicate whether the call exceeds the}\par
170   {\cf20 // expected number.}\par
171   virtual const ExpectationBase* UntypedFindMatchingExpectation(\par
172       const {\cf18 void}* untyped_args, const {\cf18 void}** untyped_action, {\cf18 bool}* is_excessive,\par
173       ::std::ostream* what, ::std::ostream* why)\par
174       GTEST_LOCK_EXCLUDED_(g_gmock_mutex) = 0;\par
175 \par
176   {\cf20 // Prints the given function arguments to the ostream.}\par
177   virtual {\cf18 void} UntypedPrintArgs(const {\cf18 void}* untyped_args,\par
178                                 ::std::ostream* os) const = 0;\par
179 \par
180   {\cf20 // Sets the mock object this mock method belongs to, and registers}\par
181   {\cf20 // this information in the global mock registry.  Will be called}\par
182   {\cf20 // whenever an EXPECT_CALL() or ON_CALL() is executed on this mock}\par
183   {\cf20 // method.}\par
184   {\cf18 void} RegisterOwner(const {\cf18 void}* mock_obj) GTEST_LOCK_EXCLUDED_(g_gmock_mutex);\par
185 \par
186   {\cf20 // Sets the mock object this mock method belongs to, and sets the}\par
187   {\cf20 // name of the mock function.  Will be called upon each invocation}\par
188   {\cf20 // of this mock function.}\par
189   {\cf18 void} SetOwnerAndName(const {\cf18 void}* mock_obj, const {\cf18 char}* name)\par
190       GTEST_LOCK_EXCLUDED_(g_gmock_mutex);\par
191 \par
192   {\cf20 // Returns the mock object this mock method belongs to.  Must be}\par
193   {\cf20 // called after RegisterOwner() or SetOwnerAndName() has been}\par
194   {\cf20 // called.}\par
195   const {\cf18 void}* MockObject() const GTEST_LOCK_EXCLUDED_(g_gmock_mutex);\par
196 \par
197   {\cf20 // Returns the name of this mock method.  Must be called after}\par
198   {\cf20 // SetOwnerAndName() has been called.}\par
199   const {\cf18 char}* Name() const GTEST_LOCK_EXCLUDED_(g_gmock_mutex);\par
200 \par
201  protected:\par
202   typedef std::vector<const {\cf18 void}*> UntypedOnCallSpecs;\par
203 \par
204   using UntypedExpectations = std::vector<std::shared_ptr<ExpectationBase>>;\par
205 \par
206   {\cf20 // Returns an Expectation object that references and co-owns exp,}\par
207   {\cf20 // which must be an expectation on this mock function.}\par
208   Expectation GetHandleOf(ExpectationBase* exp);\par
209 \par
210   {\cf20 // Address of the mock object this mock method belongs to.  Only}\par
211   {\cf20 // valid after this mock method has been called or}\par
212   {\cf20 // ON_CALL/EXPECT_CALL has been invoked on it.}\par
213   const {\cf18 void}* mock_obj_;  {\cf20 // Protected by g_gmock_mutex.}\par
214 \par
215   {\cf20 // Name of the function being mocked.  Only valid after this mock}\par
216   {\cf20 // method has been called.}\par
217   const {\cf18 char}* name_;  {\cf20 // Protected by g_gmock_mutex.}\par
218 \par
219   {\cf20 // All default action specs for this function mocker.}\par
220   UntypedOnCallSpecs untyped_on_call_specs_;\par
221 \par
222   {\cf20 // All expectations for this function mocker.}\par
223   {\cf20 //}\par
224   {\cf20 // It's undefined behavior to interleave expectations (EXPECT_CALLs}\par
225   {\cf20 // or ON_CALLs) and mock function calls.  Also, the order of}\par
226   {\cf20 // expectations is important.  Therefore it's a logic race condition}\par
227   {\cf20 // to read/write untyped_expectations_ concurrently.  In order for}\par
228   {\cf20 // tools like tsan to catch concurrent read/write accesses to}\par
229   {\cf20 // untyped_expectations, we deliberately leave accesses to it}\par
230   {\cf20 // unprotected.}\par
231   UntypedExpectations untyped_expectations_;\par
232 \};  {\cf20 // class UntypedFunctionMockerBase}\par
233 \par
234 {\cf20 // Untyped base class for OnCallSpec<F>.}\par
235 class UntypedOnCallSpecBase \{\par
236  {\cf17 public}:\par
237   {\cf20 // The arguments are the location of the ON_CALL() statement.}\par
238   UntypedOnCallSpecBase({\cf17 const} {\cf18 char}* a_file, {\cf18 int} a_line)\par
239       : file_(a_file), line_(a_line), last_clause_(kNone) \{\}\par
240 \par
241   {\cf20 // Where in the source file was the default action spec defined?}\par
242   {\cf17 const} {\cf18 char}* file(){\cf17  const }\{ {\cf19 return} file_; \}\par
243   {\cf18 int} line(){\cf17  const }\{ {\cf19 return} line_; \}\par
244 \par
245  {\cf17 protected}:\par
246   {\cf20 // Gives each clause in the ON_CALL() statement a name.}\par
247   {\cf17 enum} Clause \{\par
248     {\cf20 // Do not change the order of the enum members!  The run-time}\par
249     {\cf20 // syntax checking relies on it.}\par
250     kNone,\par
251     kWith,\par
252     kWillByDefault\par
253   \};\par
254 \par
255   {\cf20 // Asserts that the ON_CALL() statement has a certain property.}\par
256   {\cf18 void} AssertSpecProperty({\cf18 bool} property,\par
257                           {\cf17 const} std::string& failure_message){\cf17  const }\{\par
258     Assert(property, file_, line_, failure_message);\par
259   \}\par
260 \par
261   {\cf20 // Expects that the ON_CALL() statement has a certain property.}\par
262   {\cf18 void} ExpectSpecProperty({\cf18 bool} property,\par
263                           {\cf17 const} std::string& failure_message){\cf17  const }\{\par
264     Expect(property, file_, line_, failure_message);\par
265   \}\par
266 \par
267   {\cf17 const} {\cf18 char}* file_;\par
268   {\cf18 int} line_;\par
269 \par
270   {\cf20 // The last clause in the ON_CALL() statement as seen so far.}\par
271   {\cf20 // Initially kNone and changes as the statement is parsed.}\par
272   Clause last_clause_;\par
273 \};  {\cf20 // class UntypedOnCallSpecBase}\par
274 \par
275 {\cf20 // This template class implements an ON_CALL spec.}\par
276 {\cf17 template} <{\cf17 typename} F>\par
277 {\cf17 class }OnCallSpec : {\cf17 public} UntypedOnCallSpecBase \{\par
278  {\cf17 public}:\par
279   {\cf17 typedef} {\cf17 typename} Function<F>::ArgumentTuple ArgumentTuple;\par
280   {\cf17 typedef} {\cf17 typename} Function<F>::ArgumentMatcherTuple ArgumentMatcherTuple;\par
281 \par
282   {\cf20 // Constructs an OnCallSpec object from the information inside}\par
283   {\cf20 // the parenthesis of an ON_CALL() statement.}\par
284   OnCallSpec({\cf17 const} {\cf18 char}* a_file, {\cf18 int} a_line,\par
285              {\cf17 const} ArgumentMatcherTuple& matchers)\par
286       : UntypedOnCallSpecBase(a_file, a_line),\par
287         matchers_(matchers),\par
288         {\cf20 // By default, extra_matcher_ should match anything.  However,}\par
289         {\cf20 // we cannot initialize it with _ as that causes ambiguity between}\par
290         {\cf20 // Matcher's copy and move constructor for some argument types.}\par
291         extra_matcher_(A<const ArgumentTuple&>()) \{\}\par
292 \par
293   {\cf20 // Implements the .With() clause.}\par
294   OnCallSpec& With({\cf17 const} Matcher<const ArgumentTuple&>& m) \{\par
295     {\cf20 // Makes sure this is called at most once.}\par
296     ExpectSpecProperty(last_clause_ < kWith,\par
297                        {\cf22 ".With() cannot appear "}\par
298                        {\cf22 "more than once in an ON_CALL()."});\par
299     last_clause_ = kWith;\par
300 \par
301     extra_matcher_ = m;\par
302     {\cf19 return} *{\cf17 this};\par
303   \}\par
304 \par
305   {\cf20 // Implements the .WillByDefault() clause.}\par
306   OnCallSpec& WillByDefault({\cf17 const} Action<F>& action) \{\par
307     ExpectSpecProperty(last_clause_ < kWillByDefault,\par
308                        {\cf22 ".WillByDefault() must appear "}\par
309                        {\cf22 "exactly once in an ON_CALL()."});\par
310     last_clause_ = kWillByDefault;\par
311 \par
312     ExpectSpecProperty(!action.IsDoDefault(),\par
313                        {\cf22 "DoDefault() cannot be used in ON_CALL()."});\par
314     action_ = action;\par
315     {\cf19 return} *{\cf17 this};\par
316   \}\par
317 \par
318   {\cf20 // Returns true if and only if the given arguments match the matchers.}\par
319   {\cf18 bool} Matches({\cf17 const} ArgumentTuple& args){\cf17  const }\{\par
320     {\cf19 return} TupleMatches(matchers_, args) && extra_matcher_.Matches(args);\par
321   \}\par
322 \par
323   {\cf20 // Returns the action specified by the user.}\par
324   {\cf17 const} Action<F>& GetAction(){\cf17  const }\{\par
325     AssertSpecProperty(last_clause_ == kWillByDefault,\par
326                        {\cf22 ".WillByDefault() must appear exactly "}\par
327                        {\cf22 "once in an ON_CALL()."});\par
328     {\cf19 return} action_;\par
329   \}\par
330 \par
331  {\cf17 private}:\par
332   {\cf20 // The information in statement}\par
333   {\cf20 //}\par
334   {\cf20 //   ON_CALL(mock_object, Method(matchers))}\par
335   {\cf20 //       .With(multi-argument-matcher)}\par
336   {\cf20 //       .WillByDefault(action);}\par
337   {\cf20 //}\par
338   {\cf20 // is recorded in the data members like this:}\par
339   {\cf20 //}\par
340   {\cf20 //   source file that contains the statement => file_}\par
341   {\cf20 //   line number of the statement            => line_}\par
342   {\cf20 //   matchers                                => matchers_}\par
343   {\cf20 //   multi-argument-matcher                  => extra_matcher_}\par
344   {\cf20 //   action                                  => action_}\par
345   ArgumentMatcherTuple matchers_;\par
346   Matcher<const ArgumentTuple&> extra_matcher_;\par
347   Action<F> action_;\par
348 \};  {\cf20 // class OnCallSpec}\par
349 \par
350 {\cf20 // Possible reactions on uninteresting calls.}\par
351 {\cf17 enum} CallReaction \{\par
352   kAllow,\par
353   kWarn,\par
354   kFail,\par
355 \};\par
356 \par
357 \}  {\cf20 // namespace internal}\par
358 \par
359 {\cf20 // Utilities for manipulating mock objects.}\par
360 {\cf17 class }GTEST_API_ Mock \{\par
361  {\cf17 public}:\par
362   {\cf20 // The following public methods can be called concurrently.}\par
363 \par
364   {\cf20 // Tells Google Mock to ignore mock_obj when checking for leaked}\par
365   {\cf20 // mock objects.}\par
366   {\cf17 static} {\cf18 void} AllowLeak({\cf17 const} {\cf18 void}* mock_obj)\par
367       GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);\par
368 \par
369   {\cf20 // Verifies and clears all expectations on the given mock object.}\par
370   {\cf20 // If the expectations aren't satisfied, generates one or more}\par
371   {\cf20 // Google Test non-fatal failures and returns false.}\par
372   {\cf17 static} {\cf18 bool} VerifyAndClearExpectations({\cf18 void}* mock_obj)\par
373       GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);\par
374 \par
375   {\cf20 // Verifies all expectations on the given mock object and clears its}\par
376   {\cf20 // default actions and expectations.  Returns true if and only if the}\par
377   {\cf20 // verification was successful.}\par
378   {\cf17 static} {\cf18 bool} VerifyAndClear({\cf18 void}* mock_obj)\par
379       GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);\par
380 \par
381   {\cf20 // Returns whether the mock was created as a naggy mock (default)}\par
382   {\cf17 static} {\cf18 bool} IsNaggy({\cf18 void}* mock_obj)\par
383       GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);\par
384   {\cf20 // Returns whether the mock was created as a nice mock}\par
385   {\cf17 static} {\cf18 bool} IsNice({\cf18 void}* mock_obj)\par
386       GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);\par
387   {\cf20 // Returns whether the mock was created as a strict mock}\par
388   {\cf17 static} {\cf18 bool} IsStrict({\cf18 void}* mock_obj)\par
389       GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);\par
390 \par
391  {\cf17 private}:\par
392   {\cf17 friend} {\cf17 class }internal::UntypedFunctionMockerBase;\par
393 \par
394   {\cf20 // Needed for a function mocker to register itself (so that we know}\par
395   {\cf20 // how to clear a mock object).}\par
396   {\cf17 template} <{\cf17 typename} F>\par
397   {\cf17 friend} {\cf17 class }internal::FunctionMocker;\par
398 \par
399   {\cf17 template} <{\cf17 typename} MockClass>\par
400   {\cf17 friend} {\cf17 class }internal::NiceMockImpl;\par
401   {\cf17 template} <{\cf17 typename} MockClass>\par
402   {\cf17 friend} {\cf17 class }internal::NaggyMockImpl;\par
403   {\cf17 template} <{\cf17 typename} MockClass>\par
404   {\cf17 friend} {\cf17 class }internal::StrictMockImpl;\par
405 \par
406   {\cf20 // Tells Google Mock to allow uninteresting calls on the given mock}\par
407   {\cf20 // object.}\par
408   {\cf17 static} {\cf18 void} AllowUninterestingCalls(uintptr_t mock_obj)\par
409       GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);\par
410 \par
411   {\cf20 // Tells Google Mock to warn the user about uninteresting calls on}\par
412   {\cf20 // the given mock object.}\par
413   {\cf17 static} {\cf18 void} WarnUninterestingCalls(uintptr_t mock_obj)\par
414       GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);\par
415 \par
416   {\cf20 // Tells Google Mock to fail uninteresting calls on the given mock}\par
417   {\cf20 // object.}\par
418   {\cf17 static} {\cf18 void} FailUninterestingCalls(uintptr_t mock_obj)\par
419       GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);\par
420 \par
421   {\cf20 // Tells Google Mock the given mock object is being destroyed and}\par
422   {\cf20 // its entry in the call-reaction table should be removed.}\par
423   {\cf17 static} {\cf18 void} UnregisterCallReaction(uintptr_t mock_obj)\par
424       GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);\par
425 \par
426   {\cf20 // Returns the reaction Google Mock will have on uninteresting calls}\par
427   {\cf20 // made on the given mock object.}\par
428   {\cf17 static} internal::CallReaction GetReactionOnUninterestingCalls(\par
429       {\cf17 const} {\cf18 void}* mock_obj) GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);\par
430 \par
431   {\cf20 // Verifies that all expectations on the given mock object have been}\par
432   {\cf20 // satisfied.  Reports one or more Google Test non-fatal failures}\par
433   {\cf20 // and returns false if not.}\par
434   {\cf17 static} {\cf18 bool} VerifyAndClearExpectationsLocked({\cf18 void}* mock_obj)\par
435       GTEST_EXCLUSIVE_LOCK_REQUIRED_(internal::g_gmock_mutex);\par
436 \par
437   {\cf20 // Clears all ON_CALL()s set on the given mock object.}\par
438   {\cf17 static} {\cf18 void} ClearDefaultActionsLocked({\cf18 void}* mock_obj)\par
439       GTEST_EXCLUSIVE_LOCK_REQUIRED_(internal::g_gmock_mutex);\par
440 \par
441   {\cf20 // Registers a mock object and a mock method it owns.}\par
442   {\cf17 static} {\cf18 void} Register({\cf17 const} {\cf18 void}* mock_obj,\par
443                        internal::UntypedFunctionMockerBase* mocker)\par
444       GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);\par
445 \par
446   {\cf20 // Tells Google Mock where in the source code mock_obj is used in an}\par
447   {\cf20 // ON_CALL or EXPECT_CALL.  In case mock_obj is leaked, this}\par
448   {\cf20 // information helps the user identify which object it is.}\par
449   {\cf17 static} {\cf18 void} RegisterUseByOnCallOrExpectCall({\cf17 const} {\cf18 void}* mock_obj,\par
450                                               {\cf17 const} {\cf18 char}* file, {\cf18 int} line)\par
451       GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);\par
452 \par
453   {\cf20 // Unregisters a mock method; removes the owning mock object from}\par
454   {\cf20 // the registry when the last mock method associated with it has}\par
455   {\cf20 // been unregistered.  This is called only in the destructor of}\par
456   {\cf20 // FunctionMocker.}\par
457   {\cf17 static} {\cf18 void} UnregisterLocked(internal::UntypedFunctionMockerBase* mocker)\par
458       GTEST_EXCLUSIVE_LOCK_REQUIRED_(internal::g_gmock_mutex);\par
459 \};  {\cf20 // class Mock}\par
460 \par
461 {\cf20 // An abstract handle of an expectation.  Useful in the .After()}\par
462 {\cf20 // clause of EXPECT_CALL() for setting the (partial) order of}\par
463 {\cf20 // expectations.  The syntax:}\par
464 {\cf20 //}\par
465 {\cf20 //   Expectation e1 = EXPECT_CALL(...)...;}\par
466 {\cf20 //   EXPECT_CALL(...).After(e1)...;}\par
467 {\cf20 //}\par
468 {\cf20 // sets two expectations where the latter can only be matched after}\par
469 {\cf20 // the former has been satisfied.}\par
470 {\cf20 //}\par
471 {\cf20 // Notes:}\par
472 {\cf20 //   - This class is copyable and has value semantics.}\par
473 {\cf20 //   - Constness is shallow: a const Expectation object itself cannot}\par
474 {\cf20 //     be modified, but the mutable methods of the ExpectationBase}\par
475 {\cf20 //     object it references can be called via expectation_base().}\par
476 \par
477 {\cf17 class }GTEST_API_ Expectation \{\par
478  {\cf17 public}:\par
479   {\cf20 // Constructs a null object that doesn't reference any expectation.}\par
480   Expectation();\par
481   Expectation(Expectation&&) = {\cf19 default};\par
482   Expectation({\cf17 const} Expectation&) = {\cf19 default};\par
483   Expectation& operator=(Expectation&&) = {\cf19 default};\par
484   Expectation& operator=({\cf17 const} Expectation&) = {\cf19 default};\par
485   ~Expectation();\par
486 \par
487   {\cf20 // This single-argument ctor must not be explicit, in order to support the}\par
488   {\cf20 //   Expectation e = EXPECT_CALL(...);}\par
489   {\cf20 // syntax.}\par
490   {\cf20 //}\par
491   {\cf20 // A TypedExpectation object stores its pre-requisites as}\par
492   {\cf20 // Expectation objects, and needs to call the non-const Retire()}\par
493   {\cf20 // method on the ExpectationBase objects they reference.  Therefore}\par
494   {\cf20 // Expectation must receive a *non-const* reference to the}\par
495   {\cf20 // ExpectationBase object.}\par
496   Expectation(internal::ExpectationBase& exp);  {\cf20 // NOLINT}\par
497 \par
498   {\cf20 // The compiler-generated copy ctor and operator= work exactly as}\par
499   {\cf20 // intended, so we don't need to define our own.}\par
500 \par
501   {\cf20 // Returns true if and only if rhs references the same expectation as this}\par
502   {\cf20 // object does.}\par
503   {\cf18 bool} operator==({\cf17 const} Expectation& rhs){\cf17  const }\{\par
504     {\cf19 return} expectation_base_ == rhs.expectation_base_;\par
505   \}\par
506 \par
507   {\cf18 bool} operator!=({\cf17 const} Expectation& rhs){\cf17  const }\{ {\cf19 return} !(*{\cf17 this} == rhs); \}\par
508 \par
509  {\cf17 private}:\par
510   {\cf17 friend} {\cf17 class }ExpectationSet;\par
511   {\cf17 friend} {\cf17 class }Sequence;\par
512   {\cf17 friend} class ::testing::internal::ExpectationBase;\par
513   {\cf17 friend} class ::testing::internal::UntypedFunctionMockerBase;\par
514 \par
515   {\cf17 template} <{\cf17 typename} F>\par
516   {\cf17 friend} class ::testing::internal::FunctionMocker;\par
517 \par
518   {\cf17 template} <{\cf17 typename} F>\par
519   {\cf17 friend} class ::testing::internal::TypedExpectation;\par
520 \par
521   {\cf20 // This comparator is needed for putting Expectation objects into a set.}\par
522   {\cf17 class }Less \{\par
523    {\cf17 public}:\par
524     {\cf18 bool} operator()({\cf17 const} Expectation& lhs, {\cf17 const} Expectation& rhs){\cf17  const }\{\par
525       {\cf19 return} lhs.expectation_base_.get() < rhs.expectation_base_.get();\par
526     \}\par
527   \};\par
528 \par
529   typedef ::std::set<Expectation, Less> Set;\par
530 \par
531   Expectation(\par
532       {\cf17 const} std::shared_ptr<internal::ExpectationBase>& expectation_base);\par
533 \par
534   {\cf20 // Returns the expectation this object references.}\par
535   {\cf17 const} std::shared_ptr<internal::ExpectationBase>& expectation_base(){\cf17  const }\{\par
536     {\cf19 return} expectation_base_;\par
537   \}\par
538 \par
539   {\cf20 // A shared_ptr that co-owns the expectation this handle references.}\par
540   std::shared_ptr<internal::ExpectationBase> expectation_base_;\par
541 \};\par
542 \par
543 {\cf20 // A set of expectation handles.  Useful in the .After() clause of}\par
544 {\cf20 // EXPECT_CALL() for setting the (partial) order of expectations.  The}\par
545 {\cf20 // syntax:}\par
546 {\cf20 //}\par
547 {\cf20 //   ExpectationSet es;}\par
548 {\cf20 //   es += EXPECT_CALL(...)...;}\par
549 {\cf20 //   es += EXPECT_CALL(...)...;}\par
550 {\cf20 //   EXPECT_CALL(...).After(es)...;}\par
551 {\cf20 //}\par
552 {\cf20 // sets three expectations where the last one can only be matched}\par
553 {\cf20 // after the first two have both been satisfied.}\par
554 {\cf20 //}\par
555 {\cf20 // This class is copyable and has value semantics.}\par
556 {\cf17 class }ExpectationSet \{\par
557  {\cf17 public}:\par
558   {\cf20 // A bidirectional iterator that can read a const element in the set.}\par
559   {\cf17 typedef} Expectation::Set::const_iterator const_iterator;\par
560 \par
561   {\cf20 // An object stored in the set.  This is an alias of Expectation.}\par
562   {\cf17 typedef} Expectation::Set::value_type value_type;\par
563 \par
564   {\cf20 // Constructs an empty set.}\par
565   ExpectationSet() \{\}\par
566 \par
567   {\cf20 // This single-argument ctor must not be explicit, in order to support the}\par
568   {\cf20 //   ExpectationSet es = EXPECT_CALL(...);}\par
569   {\cf20 // syntax.}\par
570   ExpectationSet(internal::ExpectationBase& exp) \{  {\cf20 // NOLINT}\par
571     *{\cf17 this} += Expectation(exp);\par
572   \}\par
573 \par
574   {\cf20 // This single-argument ctor implements implicit conversion from}\par
575   {\cf20 // Expectation and thus must not be explicit.  This allows either an}\par
576   {\cf20 // Expectation or an ExpectationSet to be used in .After().}\par
577   ExpectationSet({\cf17 const} Expectation& e) \{  {\cf20 // NOLINT}\par
578     *{\cf17 this} += e;\par
579   \}\par
580 \par
581   {\cf20 // The compiler-generator ctor and operator= works exactly as}\par
582   {\cf20 // intended, so we don't need to define our own.}\par
583 \par
584   {\cf20 // Returns true if and only if rhs contains the same set of Expectation}\par
585   {\cf20 // objects as this does.}\par
586   {\cf18 bool} operator==({\cf17 const} ExpectationSet& rhs){\cf17  const }\{\par
587     {\cf19 return} expectations_ == rhs.expectations_;\par
588   \}\par
589 \par
590   {\cf18 bool} operator!=({\cf17 const} ExpectationSet& rhs){\cf17  const }\{ {\cf19 return} !(*{\cf17 this} == rhs); \}\par
591 \par
592   {\cf20 // Implements the syntax}\par
593   {\cf20 //   expectation_set += EXPECT_CALL(...);}\par
594   ExpectationSet& operator+=({\cf17 const} Expectation& e) \{\par
595     expectations_.insert(e);\par
596     {\cf19 return} *{\cf17 this};\par
597   \}\par
598 \par
599   {\cf18 int} size(){\cf17  const }\{ {\cf19 return} {\cf17 static_cast<}{\cf18 int}{\cf17 >}(expectations_.size()); \}\par
600 \par
601   const_iterator begin(){\cf17  const }\{ {\cf19 return} expectations_.begin(); \}\par
602   const_iterator end(){\cf17  const }\{ {\cf19 return} expectations_.end(); \}\par
603 \par
604  {\cf17 private}:\par
605   Expectation::Set expectations_;\par
606 \};\par
607 \par
608 {\cf20 // Sequence objects are used by a user to specify the relative order}\par
609 {\cf20 // in which the expectations should match.  They are copyable (we rely}\par
610 {\cf20 // on the compiler-defined copy constructor and assignment operator).}\par
611 {\cf17 class }GTEST_API_ Sequence \{\par
612  {\cf17 public}:\par
613   {\cf20 // Constructs an empty sequence.}\par
614   Sequence() : last_expectation_(new Expectation) \{\}\par
615 \par
616   {\cf20 // Adds an expectation to this sequence.  The caller must ensure}\par
617   {\cf20 // that no other thread is accessing this Sequence object.}\par
618   {\cf18 void} AddExpectation({\cf17 const} Expectation& expectation) {\cf17 const};\par
619 \par
620  {\cf17 private}:\par
621   {\cf20 // The last expectation in this sequence.}\par
622   std::shared_ptr<Expectation> last_expectation_;\par
623 \};  {\cf20 // class Sequence}\par
624 \par
625 {\cf20 // An object of this type causes all EXPECT_CALL() statements}\par
626 {\cf20 // encountered in its scope to be put in an anonymous sequence.  The}\par
627 {\cf20 // work is done in the constructor and destructor.  You should only}\par
628 {\cf20 // create an InSequence object on the stack.}\par
629 {\cf20 //}\par
630 {\cf20 // The sole purpose for this class is to support easy definition of}\par
631 {\cf20 // sequential expectations, e.g.}\par
632 {\cf20 //}\par
633 {\cf20 //   \{}\par
634 {\cf20 //     InSequence dummy;  // The name of the object doesn't matter.}\par
635 {\cf20 //}\par
636 {\cf20 //     // The following expectations must match in the order they appear.}\par
637 {\cf20 //     EXPECT_CALL(a, Bar())...;}\par
638 {\cf20 //     EXPECT_CALL(a, Baz())...;}\par
639 {\cf20 //     ...}\par
640 {\cf20 //     EXPECT_CALL(b, Xyz())...;}\par
641 {\cf20 //   \}}\par
642 {\cf20 //}\par
643 {\cf20 // You can create InSequence objects in multiple threads, as long as}\par
644 {\cf20 // they are used to affect different mock objects.  The idea is that}\par
645 {\cf20 // each thread can create and set up its own mocks as if it's the only}\par
646 {\cf20 // thread.  However, for clarity of your tests we recommend you to set}\par
647 {\cf20 // up mocks in the main thread unless you have a good reason not to do}\par
648 {\cf20 // so.}\par
649 {\cf17 class }GTEST_API_ InSequence \{\par
650  {\cf17 public}:\par
651   InSequence();\par
652   ~InSequence();\par
653 \par
654  {\cf17 private}:\par
655   {\cf18 bool} sequence_created_;\par
656 \par
657   InSequence({\cf17 const} InSequence&) = {\cf17 delete};\par
658   InSequence& operator=({\cf17 const} InSequence&) = {\cf17 delete};\par
659 \} GTEST_ATTRIBUTE_UNUSED_;\par
660 \par
661 {\cf17 namespace }internal \{\par
662 \par
663 {\cf20 // Points to the implicit sequence introduced by a living InSequence}\par
664 {\cf20 // object (if any) in the current thread or NULL.}\par
665 GTEST_API_ {\cf17 extern} ThreadLocal<Sequence*> g_gmock_implicit_sequence;\par
666 \par
667 {\cf20 // Base class for implementing expectations.}\par
668 {\cf20 //}\par
669 {\cf20 // There are two reasons for having a type-agnostic base class for}\par
670 {\cf20 // Expectation:}\par
671 {\cf20 //}\par
672 {\cf20 //   1. We need to store collections of expectations of different}\par
673 {\cf20 //   types (e.g. all pre-requisites of a particular expectation, all}\par
674 {\cf20 //   expectations in a sequence).  Therefore these expectation objects}\par
675 {\cf20 //   must share a common base class.}\par
676 {\cf20 //}\par
677 {\cf20 //   2. We can avoid binary code bloat by moving methods not depending}\par
678 {\cf20 //   on the template argument of Expectation to the base class.}\par
679 {\cf20 //}\par
680 {\cf20 // This class is internal and mustn't be used by user code directly.}\par
681 {\cf17 class }GTEST_API_ ExpectationBase \{\par
682  {\cf17 public}:\par
683   {\cf20 // source_text is the EXPECT_CALL(...) source that created this Expectation.}\par
684   ExpectationBase({\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\cf17 const} std::string& source_text);\par
685 \par
686   {\cf17 virtual} ~ExpectationBase();\par
687 \par
688   {\cf20 // Where in the source file was the expectation spec defined?}\par
689   {\cf17 const} {\cf18 char}* file(){\cf17  const }\{ {\cf19 return} file_; \}\par
690   {\cf18 int} line(){\cf17  const }\{ {\cf19 return} line_; \}\par
691   {\cf17 const} {\cf18 char}* source_text(){\cf17  const }\{ {\cf19 return} source_text_.c_str(); \}\par
692   {\cf20 // Returns the cardinality specified in the expectation spec.}\par
693   {\cf17 const} Cardinality& cardinality(){\cf17  const }\{ {\cf19 return} cardinality_; \}\par
694 \par
695   {\cf20 // Describes the source file location of this expectation.}\par
696   {\cf18 void} DescribeLocationTo(::std::ostream* os){\cf17  const }\{\par
697     *os << FormatFileLocation(file(), line()) << {\cf22 " "};\par
698   \}\par
699 \par
700   {\cf20 // Describes how many times a function call matching this}\par
701   {\cf20 // expectation has occurred.}\par
702   {\cf18 void} DescribeCallCountTo(::std::ostream* os) {\cf17 const}\par
703       GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex);\par
704 \par
705   {\cf20 // If this mock method has an extra matcher (i.e. .With(matcher)),}\par
706   {\cf20 // describes it to the ostream.}\par
707   {\cf17 virtual} {\cf18 void} MaybeDescribeExtraMatcherTo(::std::ostream* os) = 0;\par
708 \par
709  {\cf17 protected}:\par
710   {\cf17 friend} class ::testing::Expectation;\par
711   {\cf17 friend} {\cf17 class }UntypedFunctionMockerBase;\par
712 \par
713   {\cf17 enum} Clause \{\par
714     {\cf20 // Don't change the order of the enum members!}\par
715     kNone,\par
716     kWith,\par
717     kTimes,\par
718     kInSequence,\par
719     kAfter,\par
720     kWillOnce,\par
721     kWillRepeatedly,\par
722     kRetiresOnSaturation\par
723   \};\par
724 \par
725   {\cf17 typedef} std::vector<const void*> UntypedActions;\par
726 \par
727   {\cf20 // Returns an Expectation object that references and co-owns this}\par
728   {\cf20 // expectation.}\par
729   {\cf17 virtual} Expectation GetHandle() = 0;\par
730 \par
731   {\cf20 // Asserts that the EXPECT_CALL() statement has the given property.}\par
732   {\cf18 void} AssertSpecProperty({\cf18 bool} property,\par
733                           {\cf17 const} std::string& failure_message){\cf17  const }\{\par
734     Assert(property, file_, line_, failure_message);\par
735   \}\par
736 \par
737   {\cf20 // Expects that the EXPECT_CALL() statement has the given property.}\par
738   {\cf18 void} ExpectSpecProperty({\cf18 bool} property,\par
739                           {\cf17 const} std::string& failure_message){\cf17  const }\{\par
740     Expect(property, file_, line_, failure_message);\par
741   \}\par
742 \par
743   {\cf20 // Explicitly specifies the cardinality of this expectation.  Used}\par
744   {\cf20 // by the subclasses to implement the .Times() clause.}\par
745   {\cf18 void} SpecifyCardinality({\cf17 const} Cardinality& cardinality);\par
746 \par
747   {\cf20 // Returns true if and only if the user specified the cardinality}\par
748   {\cf20 // explicitly using a .Times().}\par
749   {\cf18 bool} cardinality_specified(){\cf17  const }\{ {\cf19 return} cardinality_specified_; \}\par
750 \par
751   {\cf20 // Sets the cardinality of this expectation spec.}\par
752   {\cf18 void} set_cardinality({\cf17 const} Cardinality& a_cardinality) \{\par
753     cardinality_ = a_cardinality;\par
754   \}\par
755 \par
756   {\cf20 // The following group of methods should only be called after the}\par
757   {\cf20 // EXPECT_CALL() statement, and only when g_gmock_mutex is held by}\par
758   {\cf20 // the current thread.}\par
759 \par
760   {\cf20 // Retires all pre-requisites of this expectation.}\par
761   {\cf18 void} RetireAllPreRequisites() GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex);\par
762 \par
763   {\cf20 // Returns true if and only if this expectation is retired.}\par
764   {\cf18 bool} is_retired() const GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex) \{\par
765     g_gmock_mutex.AssertHeld();\par
766     {\cf19 return} retired_;\par
767   \}\par
768 \par
769   {\cf20 // Retires this expectation.}\par
770   {\cf18 void} Retire() GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex) \{\par
771     g_gmock_mutex.AssertHeld();\par
772     retired_ = {\cf17 true};\par
773   \}\par
774 \par
775   {\cf20 // Returns true if and only if this expectation is satisfied.}\par
776   {\cf18 bool} IsSatisfied() const GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex) \{\par
777     g_gmock_mutex.AssertHeld();\par
778     {\cf19 return} cardinality().IsSatisfiedByCallCount(call_count_);\par
779   \}\par
780 \par
781   {\cf20 // Returns true if and only if this expectation is saturated.}\par
782   {\cf18 bool} IsSaturated() const GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex) \{\par
783     g_gmock_mutex.AssertHeld();\par
784     {\cf19 return} cardinality().IsSaturatedByCallCount(call_count_);\par
785   \}\par
786 \par
787   {\cf20 // Returns true if and only if this expectation is over-saturated.}\par
788   {\cf18 bool} IsOverSaturated() const GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex) \{\par
789     g_gmock_mutex.AssertHeld();\par
790     {\cf19 return} cardinality().IsOverSaturatedByCallCount(call_count_);\par
791   \}\par
792 \par
793   {\cf20 // Returns true if and only if all pre-requisites of this expectation are}\par
794   {\cf20 // satisfied.}\par
795   {\cf18 bool} AllPrerequisitesAreSatisfied() const\par
796       GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex);\par
797 \par
798   {\cf20 // Adds unsatisfied pre-requisites of this expectation to 'result'.}\par
799   {\cf18 void} FindUnsatisfiedPrerequisites(ExpectationSet* result) const\par
800       GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex);\par
801 \par
802   {\cf20 // Returns the number this expectation has been invoked.}\par
803   {\cf18 int} call_count() const GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex) \{\par
804     g_gmock_mutex.AssertHeld();\par
805     {\cf19 return} call_count_;\par
806   \}\par
807 \par
808   {\cf20 // Increments the number this expectation has been invoked.}\par
809   {\cf18 void} IncrementCallCount() GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex) \{\par
810     g_gmock_mutex.AssertHeld();\par
811     call_count_++;\par
812   \}\par
813 \par
814   {\cf20 // Checks the action count (i.e. the number of WillOnce() and}\par
815   {\cf20 // WillRepeatedly() clauses) against the cardinality if this hasn't}\par
816   {\cf20 // been done before.  Prints a warning if there are too many or too}\par
817   {\cf20 // few actions.}\par
818   {\cf18 void} CheckActionCountIfNotDone() const GTEST_LOCK_EXCLUDED_(mutex_);\par
819 \par
820   friend class ::testing::Sequence;\par
821   friend class ::testing::internal::ExpectationTester;\par
822 \par
823   template <typename Function>\par
824   friend class TypedExpectation;\par
825 \par
826   {\cf20 // Implements the .Times() clause.}\par
827   {\cf18 void} UntypedTimes(const Cardinality& a_cardinality);\par
828 \par
829   {\cf20 // This group of fields are part of the spec and won't change after}\par
830   {\cf20 // an EXPECT_CALL() statement finishes.}\par
831   const {\cf18 char}* file_;               {\cf20 // The file that contains the expectation.}\par
832   {\cf18 int} line_;                       {\cf20 // The line number of the expectation.}\par
833   const std::{\cf18 string} source_text_;  {\cf20 // The EXPECT_CALL(...) source text.}\par
834   {\cf20 // True if and only if the cardinality is specified explicitly.}\par
835   {\cf18 bool} cardinality_specified_;\par
836   Cardinality cardinality_;  {\cf20 // The cardinality of the expectation.}\par
837   {\cf20 // The immediate pre-requisites (i.e. expectations that must be}\par
838   {\cf20 // satisfied before this expectation can be matched) of this}\par
839   {\cf20 // expectation.  We use std::shared_ptr in the set because we want an}\par
840   {\cf20 // Expectation object to be co-owned by its FunctionMocker and its}\par
841   {\cf20 // successors.  This allows multiple mock objects to be deleted at}\par
842   {\cf20 // different times.}\par
843   ExpectationSet immediate_prerequisites_;\par
844 \par
845   {\cf20 // This group of fields are the current state of the expectation,}\par
846   {\cf20 // and can change as the mock function is called.}\par
847   {\cf18 int} call_count_;  {\cf20 // How many times this expectation has been invoked.}\par
848   {\cf18 bool} retired_;    {\cf20 // True if and only if this expectation has retired.}\par
849   UntypedActions untyped_actions_;\par
850   {\cf18 bool} extra_matcher_specified_;\par
851   {\cf18 bool} repeated_action_specified_;  {\cf20 // True if a WillRepeatedly() was specified.}\par
852   {\cf18 bool} retires_on_saturation_;\par
853   Clause last_clause_;\par
854   mutable {\cf18 bool} action_count_checked_;  {\cf20 // Under mutex_.}\par
855   mutable Mutex mutex_;                {\cf20 // Protects action_count_checked_.}\par
856 \};                                     {\cf20 // class ExpectationBase}\par
857 \par
858 template <typename F>\par
859 class TypedExpectation;\par
860 \par
861 {\cf20 // Implements an expectation for the given function type.}\par
862 template <typename R, typename... Args>\par
863 class TypedExpectation<R(Args...)> : public ExpectationBase \{\par
864  {\cf17 private}:\par
865   {\cf17 using }F = R(Args...);\par
866 \par
867  {\cf17 public}:\par
868   {\cf17 typedef} {\cf17 typename} Function<F>::ArgumentTuple ArgumentTuple;\par
869   {\cf17 typedef} {\cf17 typename} Function<F>::ArgumentMatcherTuple ArgumentMatcherTuple;\par
870   {\cf17 typedef} {\cf17 typename} Function<F>::Result Result;\par
871 \par
872   TypedExpectation(FunctionMocker<F>* owner, {\cf17 const} {\cf18 char}* a_file, {\cf18 int} a_line,\par
873                    {\cf17 const} std::string& a_source_text,\par
874                    {\cf17 const} ArgumentMatcherTuple& m)\par
875       : ExpectationBase(a_file, a_line, a_source_text),\par
876         owner_(owner),\par
877         matchers_(m),\par
878         {\cf20 // By default, extra_matcher_ should match anything.  However,}\par
879         {\cf20 // we cannot initialize it with _ as that causes ambiguity between}\par
880         {\cf20 // Matcher's copy and move constructor for some argument types.}\par
881         extra_matcher_(A<const ArgumentTuple&>()),\par
882         repeated_action_(DoDefault()) \{\}\par
883 \par
884   ~TypedExpectation(){\cf17  override }\{\par
885     {\cf20 // Check the validity of the action count if it hasn't been done}\par
886     {\cf20 // yet (for example, if the expectation was never used).}\par
887     CheckActionCountIfNotDone();\par
888     {\cf19 for} (UntypedActions::const_iterator it = untyped_actions_.begin();\par
889          it != untyped_actions_.end(); ++it) \{\par
890       {\cf17 delete} {\cf17 static_cast<}{\cf17 const }Action<F>*{\cf17 >}(*it);\par
891     \}\par
892   \}\par
893 \par
894   {\cf20 // Implements the .With() clause.}\par
895   TypedExpectation& With({\cf17 const} Matcher<const ArgumentTuple&>& m) \{\par
896     {\cf19 if} (last_clause_ == kWith) \{\par
897       ExpectSpecProperty({\cf17 false},\par
898                          {\cf22 ".With() cannot appear "}\par
899                          {\cf22 "more than once in an EXPECT_CALL()."});\par
900     \} {\cf19 else} \{\par
901       ExpectSpecProperty(last_clause_ < kWith,\par
902                          {\cf22 ".With() must be the first "}\par
903                          {\cf22 "clause in an EXPECT_CALL()."});\par
904     \}\par
905     last_clause_ = kWith;\par
906 \par
907     extra_matcher_ = m;\par
908     extra_matcher_specified_ = {\cf17 true};\par
909     {\cf19 return} *{\cf17 this};\par
910   \}\par
911 \par
912   {\cf20 // Implements the .Times() clause.}\par
913   TypedExpectation& Times({\cf17 const} Cardinality& a_cardinality) \{\par
914     ExpectationBase::UntypedTimes(a_cardinality);\par
915     {\cf19 return} *{\cf17 this};\par
916   \}\par
917 \par
918   {\cf20 // Implements the .Times() clause.}\par
919   TypedExpectation& Times({\cf18 int} n) \{ {\cf19 return} Times(Exactly(n)); \}\par
920 \par
921   {\cf20 // Implements the .InSequence() clause.}\par
922   TypedExpectation& InSequence({\cf17 const} Sequence& s) \{\par
923     ExpectSpecProperty(last_clause_ <= kInSequence,\par
924                        {\cf22 ".InSequence() cannot appear after .After(),"}\par
925                        {\cf22 " .WillOnce(), .WillRepeatedly(), or "}\par
926                        {\cf22 ".RetiresOnSaturation()."});\par
927     last_clause_ = kInSequence;\par
928 \par
929     s.AddExpectation(GetHandle());\par
930     {\cf19 return} *{\cf17 this};\par
931   \}\par
932   TypedExpectation& InSequence({\cf17 const} Sequence& s1, {\cf17 const} Sequence& s2) \{\par
933     {\cf19 return} InSequence(s1).InSequence(s2);\par
934   \}\par
935   TypedExpectation& InSequence({\cf17 const} Sequence& s1, {\cf17 const} Sequence& s2,\par
936                                {\cf17 const} Sequence& s3) \{\par
937     {\cf19 return} InSequence(s1, s2).InSequence(s3);\par
938   \}\par
939   TypedExpectation& InSequence({\cf17 const} Sequence& s1, {\cf17 const} Sequence& s2,\par
940                                {\cf17 const} Sequence& s3, {\cf17 const} Sequence& s4) \{\par
941     {\cf19 return} InSequence(s1, s2, s3).InSequence(s4);\par
942   \}\par
943   TypedExpectation& InSequence({\cf17 const} Sequence& s1, {\cf17 const} Sequence& s2,\par
944                                {\cf17 const} Sequence& s3, {\cf17 const} Sequence& s4,\par
945                                {\cf17 const} Sequence& s5) \{\par
946     {\cf19 return} InSequence(s1, s2, s3, s4).InSequence(s5);\par
947   \}\par
948 \par
949   {\cf20 // Implements that .After() clause.}\par
950   TypedExpectation& After({\cf17 const} ExpectationSet& s) \{\par
951     ExpectSpecProperty(last_clause_ <= kAfter,\par
952                        {\cf22 ".After() cannot appear after .WillOnce(),"}\par
953                        {\cf22 " .WillRepeatedly(), or "}\par
954                        {\cf22 ".RetiresOnSaturation()."});\par
955     last_clause_ = kAfter;\par
956 \par
957     {\cf19 for} (ExpectationSet::const_iterator it = s.begin(); it != s.end(); ++it) \{\par
958       immediate_prerequisites_ += *it;\par
959     \}\par
960     {\cf19 return} *{\cf17 this};\par
961   \}\par
962   TypedExpectation& After({\cf17 const} ExpectationSet& s1, {\cf17 const} ExpectationSet& s2) \{\par
963     {\cf19 return} After(s1).After(s2);\par
964   \}\par
965   TypedExpectation& After({\cf17 const} ExpectationSet& s1, {\cf17 const} ExpectationSet& s2,\par
966                           {\cf17 const} ExpectationSet& s3) \{\par
967     {\cf19 return} After(s1, s2).After(s3);\par
968   \}\par
969   TypedExpectation& After({\cf17 const} ExpectationSet& s1, {\cf17 const} ExpectationSet& s2,\par
970                           {\cf17 const} ExpectationSet& s3, {\cf17 const} ExpectationSet& s4) \{\par
971     {\cf19 return} After(s1, s2, s3).After(s4);\par
972   \}\par
973   TypedExpectation& After({\cf17 const} ExpectationSet& s1, {\cf17 const} ExpectationSet& s2,\par
974                           {\cf17 const} ExpectationSet& s3, {\cf17 const} ExpectationSet& s4,\par
975                           {\cf17 const} ExpectationSet& s5) \{\par
976     {\cf19 return} After(s1, s2, s3, s4).After(s5);\par
977   \}\par
978 \par
979   {\cf20 // Preferred, type-safe overload: consume anything that can be directly}\par
980   {\cf20 // converted to a OnceAction, except for Action<F> objects themselves.}\par
981   TypedExpectation& WillOnce(OnceAction<F> once_action) \{\par
982     {\cf20 // Call the overload below, smuggling the OnceAction as a copyable callable.}\par
983     {\cf20 // We know this is safe because a WillOnce action will not be called more}\par
984     {\cf20 // than once.}\par
985     {\cf19 return} WillOnce(Action<F>(ActionAdaptor\{\par
986         std::make_shared<OnceAction<F>>(std::move(once_action)),\par
987     \}));\par
988   \}\par
989 \par
990   {\cf20 // Fallback overload: accept Action<F> objects and those actions that define}\par
991   {\cf20 // `operator Action<F>` but not `operator OnceAction<F>`.}\par
992   {\cf20 //}\par
993   {\cf20 // This is templated in order to cause the overload above to be preferred}\par
994   {\cf20 // when the input is convertible to either type.}\par
995   {\cf17 template} <{\cf18 int}&... ExplicitArgumentBarrier, {\cf17 typename} = {\cf18 void}>\par
996   TypedExpectation& WillOnce(Action<F> action) \{\par
997     ExpectSpecProperty(last_clause_ <= kWillOnce,\par
998                        {\cf22 ".WillOnce() cannot appear after "}\par
999                        {\cf22 ".WillRepeatedly() or .RetiresOnSaturation()."});\par
1000     last_clause_ = kWillOnce;\par
1001 \par
1002     untyped_actions_.push_back({\cf17 new} Action<F>(std::move(action)));\par
1003 \par
1004     {\cf19 if} (!cardinality_specified()) \{\par
1005       set_cardinality(Exactly({\cf17 static_cast<}{\cf18 int}{\cf17 >}(untyped_actions_.size())));\par
1006     \}\par
1007     {\cf19 return} *{\cf17 this};\par
1008   \}\par
1009 \par
1010   {\cf20 // Implements the .WillRepeatedly() clause.}\par
1011   TypedExpectation& WillRepeatedly({\cf17 const} Action<F>& action) \{\par
1012     {\cf19 if} (last_clause_ == kWillRepeatedly) \{\par
1013       ExpectSpecProperty({\cf17 false},\par
1014                          {\cf22 ".WillRepeatedly() cannot appear "}\par
1015                          {\cf22 "more than once in an EXPECT_CALL()."});\par
1016     \} {\cf19 else} \{\par
1017       ExpectSpecProperty(last_clause_ < kWillRepeatedly,\par
1018                          {\cf22 ".WillRepeatedly() cannot appear "}\par
1019                          {\cf22 "after .RetiresOnSaturation()."});\par
1020     \}\par
1021     last_clause_ = kWillRepeatedly;\par
1022     repeated_action_specified_ = {\cf17 true};\par
1023 \par
1024     repeated_action_ = action;\par
1025     {\cf19 if} (!cardinality_specified()) \{\par
1026       set_cardinality(AtLeast({\cf17 static_cast<}{\cf18 int}{\cf17 >}(untyped_actions_.size())));\par
1027     \}\par
1028 \par
1029     {\cf20 // Now that no more action clauses can be specified, we check}\par
1030     {\cf20 // whether their count makes sense.}\par
1031     CheckActionCountIfNotDone();\par
1032     {\cf19 return} *{\cf17 this};\par
1033   \}\par
1034 \par
1035   {\cf20 // Implements the .RetiresOnSaturation() clause.}\par
1036   TypedExpectation& RetiresOnSaturation() \{\par
1037     ExpectSpecProperty(last_clause_ < kRetiresOnSaturation,\par
1038                        {\cf22 ".RetiresOnSaturation() cannot appear "}\par
1039                        {\cf22 "more than once."});\par
1040     last_clause_ = kRetiresOnSaturation;\par
1041     retires_on_saturation_ = {\cf17 true};\par
1042 \par
1043     {\cf20 // Now that no more action clauses can be specified, we check}\par
1044     {\cf20 // whether their count makes sense.}\par
1045     CheckActionCountIfNotDone();\par
1046     {\cf19 return} *{\cf17 this};\par
1047   \}\par
1048 \par
1049   {\cf20 // Returns the matchers for the arguments as specified inside the}\par
1050   {\cf20 // EXPECT_CALL() macro.}\par
1051   {\cf17 const} ArgumentMatcherTuple& matchers(){\cf17  const }\{ {\cf19 return} matchers_; \}\par
1052 \par
1053   {\cf20 // Returns the matcher specified by the .With() clause.}\par
1054   {\cf17 const} Matcher<const ArgumentTuple&>& extra_matcher(){\cf17  const }\{\par
1055     {\cf19 return} extra_matcher_;\par
1056   \}\par
1057 \par
1058   {\cf20 // Returns the action specified by the .WillRepeatedly() clause.}\par
1059   {\cf17 const} Action<F>& repeated_action(){\cf17  const }\{ {\cf19 return} repeated_action_; \}\par
1060 \par
1061   {\cf20 // If this mock method has an extra matcher (i.e. .With(matcher)),}\par
1062   {\cf20 // describes it to the ostream.}\par
1063   {\cf18 void} MaybeDescribeExtraMatcherTo(::std::ostream* os){\cf17  override }\{\par
1064     {\cf19 if} (extra_matcher_specified_) \{\par
1065       *os << {\cf22 "    Expected args: "};\par
1066       extra_matcher_.DescribeTo(os);\par
1067       *os << {\cf22 "\\n"};\par
1068     \}\par
1069   \}\par
1070 \par
1071  {\cf17 private}:\par
1072   {\cf17 template} <{\cf17 typename} Function>\par
1073   {\cf17 friend} {\cf17 class }FunctionMocker;\par
1074 \par
1075   {\cf20 // An adaptor that turns a OneAction<F> into something compatible with}\par
1076   {\cf20 // Action<F>. Must be called at most once.}\par
1077   {\cf17 struct }ActionAdaptor \{\par
1078     std::shared_ptr<OnceAction<R(Args...)>> once_action;\par
1079 \par
1080     R operator()(Args&&... args){\cf17  const }\{\par
1081       {\cf19 return} std::move(*once_action).Call(std::forward<Args>(args)...);\par
1082     \}\par
1083   \};\par
1084 \par
1085   {\cf20 // Returns an Expectation object that references and co-owns this}\par
1086   {\cf20 // expectation.}\par
1087   Expectation GetHandle(){\cf17  override }\{ {\cf19 return} owner_->GetHandleOf({\cf17 this}); \}\par
1088 \par
1089   {\cf20 // The following methods will be called only after the EXPECT_CALL()}\par
1090   {\cf20 // statement finishes and when the current thread holds}\par
1091   {\cf20 // g_gmock_mutex.}\par
1092 \par
1093   {\cf20 // Returns true if and only if this expectation matches the given arguments.}\par
1094   {\cf18 bool} Matches({\cf17 const} ArgumentTuple& args) {\cf17 const}\par
1095       GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex) \{\par
1096     g_gmock_mutex.AssertHeld();\par
1097     {\cf19 return} TupleMatches(matchers_, args) && extra_matcher_.Matches(args);\par
1098   \}\par
1099 \par
1100   {\cf20 // Returns true if and only if this expectation should handle the given}\par
1101   {\cf20 // arguments.}\par
1102   {\cf18 bool} ShouldHandleArguments({\cf17 const} ArgumentTuple& args) {\cf17 const}\par
1103       GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex) \{\par
1104     g_gmock_mutex.AssertHeld();\par
1105 \par
1106     {\cf20 // In case the action count wasn't checked when the expectation}\par
1107     {\cf20 // was defined (e.g. if this expectation has no WillRepeatedly()}\par
1108     {\cf20 // or RetiresOnSaturation() clause), we check it when the}\par
1109     {\cf20 // expectation is used for the first time.}\par
1110     CheckActionCountIfNotDone();\par
1111     {\cf19 return} !is_retired() && AllPrerequisitesAreSatisfied() && Matches(args);\par
1112   \}\par
1113 \par
1114   {\cf20 // Describes the result of matching the arguments against this}\par
1115   {\cf20 // expectation to the given ostream.}\par
1116   {\cf18 void} ExplainMatchResultTo({\cf17 const} ArgumentTuple& args, ::std::ostream* os) {\cf17 const}\par
1117       GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex) \{\par
1118     g_gmock_mutex.AssertHeld();\par
1119 \par
1120     {\cf19 if} (is_retired()) \{\par
1121       *os << {\cf22 "         Expected: the expectation is active\\n"}\par
1122           << {\cf22 "           Actual: it is retired\\n"};\par
1123     \} {\cf19 else} {\cf19 if} (!Matches(args)) \{\par
1124       {\cf19 if} (!TupleMatches(matchers_, args)) \{\par
1125         ExplainMatchFailureTupleTo(matchers_, args, os);\par
1126       \}\par
1127       StringMatchResultListener listener;\par
1128       {\cf19 if} (!extra_matcher_.MatchAndExplain(args, &listener)) \{\par
1129         *os << {\cf22 "    Expected args: "};\par
1130         extra_matcher_.DescribeTo(os);\par
1131         *os << {\cf22 "\\n           Actual: don't match"};\par
1132 \par
1133         internal::PrintIfNotEmpty(listener.str(), os);\par
1134         *os << {\cf22 "\\n"};\par
1135       \}\par
1136     \} {\cf19 else} {\cf19 if} (!AllPrerequisitesAreSatisfied()) \{\par
1137       *os << {\cf22 "         Expected: all pre-requisites are satisfied\\n"}\par
1138           << {\cf22 "           Actual: the following immediate pre-requisites "}\par
1139           << {\cf22 "are not satisfied:\\n"};\par
1140       ExpectationSet unsatisfied_prereqs;\par
1141       FindUnsatisfiedPrerequisites(&unsatisfied_prereqs);\par
1142       {\cf18 int} i = 0;\par
1143       {\cf19 for} (ExpectationSet::const_iterator it = unsatisfied_prereqs.begin();\par
1144            it != unsatisfied_prereqs.end(); ++it) \{\par
1145         it->expectation_base()->DescribeLocationTo(os);\par
1146         *os << {\cf22 "pre-requisite #"} << i++ << {\cf22 "\\n"};\par
1147       \}\par
1148       *os << {\cf22 "                   (end of pre-requisites)\\n"};\par
1149     \} {\cf19 else} \{\par
1150       {\cf20 // This line is here just for completeness' sake.  It will never}\par
1151       {\cf20 // be executed as currently the ExplainMatchResultTo() function}\par
1152       {\cf20 // is called only when the mock function call does NOT match the}\par
1153       {\cf20 // expectation.}\par
1154       *os << {\cf22 "The call matches the expectation.\\n"};\par
1155     \}\par
1156   \}\par
1157 \par
1158   {\cf20 // Returns the action that should be taken for the current invocation.}\par
1159   {\cf17 const} Action<F>& GetCurrentAction({\cf17 const} FunctionMocker<F>* mocker,\par
1160                                     {\cf17 const} ArgumentTuple& args) {\cf17 const}\par
1161       GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex) \{\par
1162     g_gmock_mutex.AssertHeld();\par
1163     {\cf17 const} {\cf18 int} count = call_count();\par
1164     Assert(count >= 1, __FILE__, __LINE__,\par
1165            {\cf22 "call_count() is <= 0 when GetCurrentAction() is "}\par
1166            {\cf22 "called - this should never happen."});\par
1167 \par
1168     {\cf17 const} {\cf18 int} action_count = {\cf17 static_cast<}{\cf18 int}{\cf17 >}(untyped_actions_.size());\par
1169     {\cf19 if} (action_count > 0 && !repeated_action_specified_ &&\par
1170         count > action_count) \{\par
1171       {\cf20 // If there is at least one WillOnce() and no WillRepeatedly(),}\par
1172       {\cf20 // we warn the user when the WillOnce() clauses ran out.}\par
1173       ::std::stringstream ss;\par
1174       DescribeLocationTo(&ss);\par
1175       ss << {\cf22 "Actions ran out in "} << source_text() << {\cf22 "...\\n"}\par
1176          << {\cf22 "Called "} << count << {\cf22 " times, but only "} << action_count\par
1177          << {\cf22 " WillOnce()"} << (action_count == 1 ? {\cf22 " is"} : {\cf22 "s are"})\par
1178          << {\cf22 " specified - "};\par
1179       mocker->DescribeDefaultActionTo(args, &ss);\par
1180       Log(kWarning, ss.str(), 1);\par
1181     \}\par
1182 \par
1183     {\cf19 return} count <= action_count\par
1184                ? *{\cf17 static_cast<}{\cf17 const }Action<F>*{\cf17 >}(\par
1185                      untyped_actions_[{\cf17 static_cast<}{\cf18 size_t}{\cf17 >}(count - 1)])\par
1186                : repeated_action();\par
1187   \}\par
1188 \par
1189   {\cf20 // Given the arguments of a mock function call, if the call will}\par
1190   {\cf20 // over-saturate this expectation, returns the default action;}\par
1191   {\cf20 // otherwise, returns the next action in this expectation.  Also}\par
1192   {\cf20 // describes *what* happened to 'what', and explains *why* Google}\par
1193   {\cf20 // Mock does it to 'why'.  This method is not const as it calls}\par
1194   {\cf20 // IncrementCallCount().  A return value of NULL means the default}\par
1195   {\cf20 // action.}\par
1196   {\cf17 const} Action<F>* GetActionForArguments({\cf17 const} FunctionMocker<F>* mocker,\par
1197                                          {\cf17 const} ArgumentTuple& args,\par
1198                                          ::std::ostream* what,\par
1199                                          ::std::ostream* why)\par
1200       GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex) \{\par
1201     g_gmock_mutex.AssertHeld();\par
1202     {\cf19 if} (IsSaturated()) \{\par
1203       {\cf20 // We have an excessive call.}\par
1204       IncrementCallCount();\par
1205       *what << {\cf22 "Mock function called more times than expected - "};\par
1206       mocker->DescribeDefaultActionTo(args, what);\par
1207       DescribeCallCountTo(why);\par
1208 \par
1209       {\cf19 return} {\cf17 nullptr};\par
1210     \}\par
1211 \par
1212     IncrementCallCount();\par
1213     RetireAllPreRequisites();\par
1214 \par
1215     {\cf19 if} (retires_on_saturation_ && IsSaturated()) \{\par
1216       Retire();\par
1217     \}\par
1218 \par
1219     {\cf20 // Must be done after IncrementCount()!}\par
1220     *what << {\cf22 "Mock function call matches "} << source_text() << {\cf22 "...\\n"};\par
1221     {\cf19 return} &(GetCurrentAction(mocker, args));\par
1222   \}\par
1223 \par
1224   {\cf20 // All the fields below won't change once the EXPECT_CALL()}\par
1225   {\cf20 // statement finishes.}\par
1226   FunctionMocker<F>* {\cf17 const} owner_;\par
1227   ArgumentMatcherTuple matchers_;\par
1228   Matcher<const ArgumentTuple&> extra_matcher_;\par
1229   Action<F> repeated_action_;\par
1230 \par
1231   TypedExpectation({\cf17 const} TypedExpectation&) = {\cf17 delete};\par
1232   TypedExpectation& operator=({\cf17 const} TypedExpectation&) = {\cf17 delete};\par
1233 \};  {\cf20 // class TypedExpectation}\par
1234 \par
1235 {\cf20 // A MockSpec object is used by ON_CALL() or EXPECT_CALL() for}\par
1236 {\cf20 // specifying the default behavior of, or expectation on, a mock}\par
1237 {\cf20 // function.}\par
1238 \par
1239 {\cf20 // Note: class MockSpec really belongs to the ::testing namespace.}\par
1240 {\cf20 // However if we define it in ::testing, MSVC will complain when}\par
1241 {\cf20 // classes in ::testing::internal declare it as a friend class}\par
1242 {\cf20 // template.  To workaround this compiler bug, we define MockSpec in}\par
1243 {\cf20 // ::testing::internal and import it into ::testing.}\par
1244 \par
1245 {\cf20 // Logs a message including file and line number information.}\par
1246 GTEST_API_ {\cf18 void} LogWithLocation(testing::internal::LogSeverity severity,\par
1247                                 {\cf17 const} {\cf18 char}* file, {\cf18 int} line,\par
1248                                 {\cf17 const} std::string& message);\par
1249 \par
1250 {\cf17 template} <{\cf17 typename} F>\par
1251 {\cf17 class }MockSpec \{\par
1252  {\cf17 public}:\par
1253   {\cf17 typedef} {\cf17 typename} internal::Function<F>::ArgumentTuple ArgumentTuple;\par
1254   {\cf17 typedef}\par
1255       {\cf17 typename} internal::Function<F>::ArgumentMatcherTuple ArgumentMatcherTuple;\par
1256 \par
1257   {\cf20 // Constructs a MockSpec object, given the function mocker object}\par
1258   {\cf20 // that the spec is associated with.}\par
1259   MockSpec(internal::FunctionMocker<F>* function_mocker,\par
1260            {\cf17 const} ArgumentMatcherTuple& matchers)\par
1261       : function_mocker_(function_mocker), matchers_(matchers) \{\}\par
1262 \par
1263   {\cf20 // Adds a new default action spec to the function mocker and returns}\par
1264   {\cf20 // the newly created spec.}\par
1265   internal::OnCallSpec<F>& InternalDefaultActionSetAt({\cf17 const} {\cf18 char}* file,\par
1266                                                       {\cf18 int} line, {\cf17 const} {\cf18 char}* obj,\par
1267                                                       {\cf17 const} {\cf18 char}* call) \{\par
1268     LogWithLocation(internal::kInfo, file, line,\par
1269                     std::string({\cf22 "ON_CALL("}) + obj + {\cf22 ", "} + call + {\cf22 ") invoked"});\par
1270     {\cf19 return} function_mocker_->AddNewOnCallSpec(file, line, matchers_);\par
1271   \}\par
1272 \par
1273   {\cf20 // Adds a new expectation spec to the function mocker and returns}\par
1274   {\cf20 // the newly created spec.}\par
1275   internal::TypedExpectation<F>& InternalExpectedAt({\cf17 const} {\cf18 char}* file, {\cf18 int} line,\par
1276                                                     {\cf17 const} {\cf18 char}* obj,\par
1277                                                     {\cf17 const} {\cf18 char}* call) \{\par
1278     {\cf17 const} std::string source_text(std::string({\cf22 "EXPECT_CALL("}) + obj + {\cf22 ", "} +\par
1279                                   call + {\cf22 ")"});\par
1280     LogWithLocation(internal::kInfo, file, line, source_text + {\cf22 " invoked"});\par
1281     {\cf19 return} function_mocker_->AddNewExpectation(file, line, source_text,\par
1282                                                matchers_);\par
1283   \}\par
1284 \par
1285   {\cf20 // This operator overload is used to swallow the superfluous parameter list}\par
1286   {\cf20 // introduced by the ON/EXPECT_CALL macros. See the macro comments for more}\par
1287   {\cf20 // explanation.}\par
1288   MockSpec<F>& operator()({\cf17 const} internal::WithoutMatchers&, {\cf18 void}* {\cf17 const}) \{\par
1289     {\cf19 return} *{\cf17 this};\par
1290   \}\par
1291 \par
1292  {\cf17 private}:\par
1293   {\cf17 template} <{\cf17 typename} Function>\par
1294   {\cf17 friend} {\cf17 class }internal::FunctionMocker;\par
1295 \par
1296   {\cf20 // The function mocker that owns this spec.}\par
1297   internal::FunctionMocker<F>* {\cf17 const} function_mocker_;\par
1298   {\cf20 // The argument matchers specified in the spec.}\par
1299   ArgumentMatcherTuple matchers_;\par
1300 \};  {\cf20 // class MockSpec}\par
1301 \par
1302 {\cf20 // Wrapper type for generically holding an ordinary value or lvalue reference.}\par
1303 {\cf20 // If T is not a reference type, it must be copyable or movable.}\par
1304 {\cf20 // ReferenceOrValueWrapper<T> is movable, and will also be copyable unless}\par
1305 {\cf20 // T is a move-only value type (which means that it will always be copyable}\par
1306 {\cf20 // if the current platform does not support move semantics).}\par
1307 {\cf20 //}\par
1308 {\cf20 // The primary template defines handling for values, but function header}\par
1309 {\cf20 // comments describe the contract for the whole template (including}\par
1310 {\cf20 // specializations).}\par
1311 {\cf17 template} <{\cf17 typename} T>\par
1312 {\cf17 class }ReferenceOrValueWrapper \{\par
1313  {\cf17 public}:\par
1314   {\cf20 // Constructs a wrapper from the given value/reference.}\par
1315   {\cf17 explicit} ReferenceOrValueWrapper(T value) : value_(std::move(value)) \{\}\par
1316 \par
1317   {\cf20 // Unwraps and returns the underlying value/reference, exactly as}\par
1318   {\cf20 // originally passed. The behavior of calling this more than once on}\par
1319   {\cf20 // the same object is unspecified.}\par
1320   T Unwrap() \{ {\cf19 return} std::move(value_); \}\par
1321 \par
1322   {\cf20 // Provides nondestructive access to the underlying value/reference.}\par
1323   {\cf20 // Always returns a const reference (more precisely,}\par
1324   {\cf20 // const std::add_lvalue_reference<T>::type). The behavior of calling this}\par
1325   {\cf20 // after calling Unwrap on the same object is unspecified.}\par
1326   {\cf17 const} T& Peek(){\cf17  const }\{ {\cf19 return} value_; \}\par
1327 \par
1328  {\cf17 private}:\par
1329   T value_;\par
1330 \};\par
1331 \par
1332 {\cf20 // Specialization for lvalue reference types. See primary template}\par
1333 {\cf20 // for documentation.}\par
1334 {\cf17 template} <{\cf17 typename} T>\par
1335 {\cf17 class }ReferenceOrValueWrapper<T&> \{\par
1336  {\cf17 public}:\par
1337   {\cf20 // Workaround for debatable pass-by-reference lint warning (c-library-team}\par
1338   {\cf20 // policy precludes NOLINT in this context)}\par
1339   {\cf17 typedef} T& reference;\par
1340   {\cf17 explicit} ReferenceOrValueWrapper(reference ref) : value_ptr_(&ref) \{\}\par
1341   T& Unwrap() \{ {\cf19 return} *value_ptr_; \}\par
1342   {\cf17 const} T& Peek(){\cf17  const }\{ {\cf19 return} *value_ptr_; \}\par
1343 \par
1344  {\cf17 private}:\par
1345   T* value_ptr_;\par
1346 \};\par
1347 \par
1348 {\cf20 // Prints the held value as an action's result to os.}\par
1349 {\cf17 template} <{\cf17 typename} T>\par
1350 {\cf18 void} PrintAsActionResult({\cf17 const} T& result, std::ostream& os) \{\par
1351   os << {\cf22 "\\n          Returns: "};\par
1352   {\cf20 // T may be a reference type, so we don't use UniversalPrint().}\par
1353   UniversalPrinter<T>::Print(result, &os);\par
1354 \}\par
1355 \par
1356 {\cf20 // Reports an uninteresting call (whose description is in msg) in the}\par
1357 {\cf20 // manner specified by 'reaction'.}\par
1358 GTEST_API_ {\cf18 void} ReportUninterestingCall(CallReaction reaction,\par
1359                                         {\cf17 const} std::string& msg);\par
1360 \par
1361 {\cf20 // A generic RAII type that runs a user-provided function in its destructor.}\par
1362 {\cf17 class }Cleanup final \{\par
1363  {\cf17 public}:\par
1364   {\cf17 explicit} Cleanup(std::function<{\cf18 void}()> f) : f_(std::move(f)) \{\}\par
1365   ~Cleanup() \{ f_(); \}\par
1366 \par
1367  {\cf17 private}:\par
1368   std::function<void()> f_;\par
1369 \};\par
1370 \par
1371 {\cf17 template} <{\cf17 typename} F>\par
1372 {\cf17 class }FunctionMocker;\par
1373 \par
1374 {\cf17 template} <{\cf17 typename} R, {\cf17 typename}... Args>\par
1375 {\cf17 class }FunctionMocker<R(Args...)> final : {\cf17 public} UntypedFunctionMockerBase \{\par
1376   {\cf17 using }F = R(Args...);\par
1377 \par
1378  {\cf17 public}:\par
1379   {\cf17 using }Result = R;\par
1380   {\cf17 using }ArgumentTuple = std::tuple<Args...>;\par
1381   {\cf17 using }ArgumentMatcherTuple = std::tuple<Matcher<Args>...>;\par
1382 \par
1383   FunctionMocker() \{\}\par
1384 \par
1385   {\cf20 // There is no generally useful and implementable semantics of}\par
1386   {\cf20 // copying a mock object, so copying a mock is usually a user error.}\par
1387   {\cf20 // Thus we disallow copying function mockers.  If the user really}\par
1388   {\cf20 // wants to copy a mock object, they should implement their own copy}\par
1389   {\cf20 // operation, for example:}\par
1390   {\cf20 //}\par
1391   {\cf20 //   class MockFoo : public Foo \{}\par
1392   {\cf20 //    public:}\par
1393   {\cf20 //     // Defines a copy constructor explicitly.}\par
1394   {\cf20 //     MockFoo(const MockFoo& src) \{\}}\par
1395   {\cf20 //     ...}\par
1396   {\cf20 //   \};}\par
1397   FunctionMocker({\cf17 const} FunctionMocker&) = {\cf17 delete};\par
1398   FunctionMocker& operator=({\cf17 const} FunctionMocker&) = {\cf17 delete};\par
1399 \par
1400   {\cf20 // The destructor verifies that all expectations on this mock}\par
1401   {\cf20 // function have been satisfied.  If not, it will report Google Test}\par
1402   {\cf20 // non-fatal failures for the violations.}\par
1403   ~FunctionMocker() override GTEST_LOCK_EXCLUDED_(g_gmock_mutex) \{\par
1404     MutexLock l(&g_gmock_mutex);\par
1405     VerifyAndClearExpectationsLocked();\par
1406     Mock::UnregisterLocked({\cf17 this});\par
1407     ClearDefaultActionsLocked();\par
1408   \}\par
1409 \par
1410   {\cf20 // Returns the ON_CALL spec that matches this mock function with the}\par
1411   {\cf20 // given arguments; returns NULL if no matching ON_CALL is found.}\par
1412   {\cf20 // L = *}\par
1413   {\cf17 const} OnCallSpec<F>* FindOnCallSpec({\cf17 const} ArgumentTuple& args){\cf17  const }\{\par
1414     {\cf19 for} (UntypedOnCallSpecs::const_reverse_iterator it =\par
1415              untyped_on_call_specs_.rbegin();\par
1416          it != untyped_on_call_specs_.rend(); ++it) \{\par
1417       {\cf17 const} OnCallSpec<F>* spec = {\cf17 static_cast<}{\cf17 const }OnCallSpec<F>*{\cf17 >}(*it);\par
1418       {\cf19 if} (spec->Matches(args)) {\cf19 return} spec;\par
1419     \}\par
1420 \par
1421     {\cf19 return} {\cf17 nullptr};\par
1422   \}\par
1423 \par
1424   {\cf20 // Performs the default action of this mock function on the given}\par
1425   {\cf20 // arguments and returns the result. Asserts (or throws if}\par
1426   {\cf20 // exceptions are enabled) with a helpful call description if there}\par
1427   {\cf20 // is no valid return value. This method doesn't depend on the}\par
1428   {\cf20 // mutable state of this object, and thus can be called concurrently}\par
1429   {\cf20 // without locking.}\par
1430   {\cf20 // L = *}\par
1431   Result PerformDefaultAction(ArgumentTuple&& args,\par
1432                               {\cf17 const} std::string& call_description){\cf17  const }\{\par
1433     {\cf17 const} OnCallSpec<F>* {\cf17 const} spec = this->FindOnCallSpec(args);\par
1434     {\cf19 if} (spec != {\cf17 nullptr}) \{\par
1435       {\cf19 return} spec->GetAction().Perform(std::move(args));\par
1436     \}\par
1437     {\cf17 const} std::string message =\par
1438         call_description +\par
1439         {\cf22 "\\n    The mock function has no default action "}\par
1440         {\cf22 "set, and its return type has no default value set."};\par
1441 {\cf21 #if GTEST_HAS_EXCEPTIONS}\par
1442     {\cf19 if} (!DefaultValue<Result>::Exists()) \{\par
1443       {\cf19 throw} std::runtime_error(message);\par
1444     \}\par
1445 {\cf21 #else}\par
1446     Assert(DefaultValue<Result>::Exists(), {\cf22 ""}, -1, message);\par
1447 {\cf21 #endif}\par
1448     {\cf19 return} DefaultValue<Result>::Get();\par
1449   \}\par
1450 \par
1451   {\cf20 // Implements UntypedFunctionMockerBase::ClearDefaultActionsLocked():}\par
1452   {\cf20 // clears the ON_CALL()s set on this mock function.}\par
1453   {\cf18 void} ClearDefaultActionsLocked() override\par
1454       GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex) \{\par
1455     g_gmock_mutex.AssertHeld();\par
1456 \par
1457     {\cf20 // Deleting our default actions may trigger other mock objects to be}\par
1458     {\cf20 // deleted, for example if an action contains a reference counted smart}\par
1459     {\cf20 // pointer to that mock object, and that is the last reference. So if we}\par
1460     {\cf20 // delete our actions within the context of the global mutex we may deadlock}\par
1461     {\cf20 // when this method is called again. Instead, make a copy of the set of}\par
1462     {\cf20 // actions to delete, clear our set within the mutex, and then delete the}\par
1463     {\cf20 // actions outside of the mutex.}\par
1464     UntypedOnCallSpecs specs_to_delete;\par
1465     untyped_on_call_specs_.swap(specs_to_delete);\par
1466 \par
1467     g_gmock_mutex.Unlock();\par
1468     {\cf19 for} (UntypedOnCallSpecs::const_iterator it = specs_to_delete.begin();\par
1469          it != specs_to_delete.end(); ++it) \{\par
1470       {\cf17 delete} {\cf17 static_cast<}{\cf17 const }OnCallSpec<F>*{\cf17 >}(*it);\par
1471     \}\par
1472 \par
1473     {\cf20 // Lock the mutex again, since the caller expects it to be locked when we}\par
1474     {\cf20 // return.}\par
1475     g_gmock_mutex.Lock();\par
1476   \}\par
1477 \par
1478   {\cf20 // Returns the result of invoking this mock function with the given}\par
1479   {\cf20 // arguments.  This function can be safely called from multiple}\par
1480   {\cf20 // threads concurrently.}\par
1481   Result Invoke(Args... args) GTEST_LOCK_EXCLUDED_(g_gmock_mutex) \{\par
1482     {\cf19 return} InvokeWith(ArgumentTuple(std::forward<Args>(args)...));\par
1483   \}\par
1484 \par
1485   MockSpec<F> With(Matcher<Args>... m) \{\par
1486     {\cf19 return} MockSpec<F>({\cf17 this}, ::std::make_tuple(std::move(m)...));\par
1487   \}\par
1488 \par
1489  {\cf17 protected}:\par
1490   {\cf17 template} <{\cf17 typename} Function>\par
1491   {\cf17 friend} {\cf17 class }MockSpec;\par
1492 \par
1493   {\cf20 // Adds and returns a default action spec for this mock function.}\par
1494   OnCallSpec<F>& AddNewOnCallSpec({\cf17 const} {\cf18 char}* file, {\cf18 int} line,\par
1495                                   {\cf17 const} ArgumentMatcherTuple& m)\par
1496       GTEST_LOCK_EXCLUDED_(g_gmock_mutex) \{\par
1497     Mock::RegisterUseByOnCallOrExpectCall(MockObject(), file, line);\par
1498     OnCallSpec<F>* {\cf17 const} on_call_spec = {\cf17 new} OnCallSpec<F>(file, line, m);\par
1499     untyped_on_call_specs_.push_back(on_call_spec);\par
1500     {\cf19 return} *on_call_spec;\par
1501   \}\par
1502 \par
1503   {\cf20 // Adds and returns an expectation spec for this mock function.}\par
1504   TypedExpectation<F>& AddNewExpectation({\cf17 const} {\cf18 char}* file, {\cf18 int} line,\par
1505                                          {\cf17 const} std::string& source_text,\par
1506                                          {\cf17 const} ArgumentMatcherTuple& m)\par
1507       GTEST_LOCK_EXCLUDED_(g_gmock_mutex) \{\par
1508     Mock::RegisterUseByOnCallOrExpectCall(MockObject(), file, line);\par
1509     TypedExpectation<F>* {\cf17 const} expectation =\par
1510         {\cf17 new} TypedExpectation<F>({\cf17 this}, file, line, source_text, m);\par
1511     {\cf17 const} std::shared_ptr<ExpectationBase> untyped_expectation(expectation);\par
1512     {\cf20 // See the definition of untyped_expectations_ for why access to}\par
1513     {\cf20 // it is unprotected here.}\par
1514     untyped_expectations_.push_back(untyped_expectation);\par
1515 \par
1516     {\cf20 // Adds this expectation into the implicit sequence if there is one.}\par
1517     Sequence* {\cf17 const} implicit_sequence = g_gmock_implicit_sequence.get();\par
1518     {\cf19 if} (implicit_sequence != {\cf17 nullptr}) \{\par
1519       implicit_sequence->AddExpectation(Expectation(untyped_expectation));\par
1520     \}\par
1521 \par
1522     {\cf19 return} *expectation;\par
1523   \}\par
1524 \par
1525  {\cf17 private}:\par
1526   {\cf17 template} <{\cf17 typename} Func>\par
1527   {\cf17 friend} {\cf17 class }TypedExpectation;\par
1528 \par
1529   {\cf20 // Some utilities needed for implementing UntypedInvokeWith().}\par
1530 \par
1531   {\cf20 // Describes what default action will be performed for the given}\par
1532   {\cf20 // arguments.}\par
1533   {\cf20 // L = *}\par
1534   {\cf18 void} DescribeDefaultActionTo({\cf17 const} ArgumentTuple& args,\par
1535                                ::std::ostream* os){\cf17  const }\{\par
1536     {\cf17 const} OnCallSpec<F>* {\cf17 const} spec = FindOnCallSpec(args);\par
1537 \par
1538     {\cf19 if} (spec == {\cf17 nullptr}) \{\par
1539       *os << (std::is_void<Result>::value ? {\cf22 "returning directly.\\n"}\par
1540                                           : {\cf22 "returning default value.\\n"});\par
1541     \} {\cf19 else} \{\par
1542       *os << {\cf22 "taking default action specified at:\\n"}\par
1543           << FormatFileLocation(spec->file(), spec->line()) << {\cf22 "\\n"};\par
1544     \}\par
1545   \}\par
1546 \par
1547   {\cf20 // Writes a message that the call is uninteresting (i.e. neither}\par
1548   {\cf20 // explicitly expected nor explicitly unexpected) to the given}\par
1549   {\cf20 // ostream.}\par
1550   {\cf18 void} UntypedDescribeUninterestingCall({\cf17 const} {\cf18 void}* untyped_args,\par
1551                                         ::std::ostream* os) {\cf17 const} {\cf17 override}\par
1552       GTEST_LOCK_EXCLUDED_(g_gmock_mutex) \{\par
1553     {\cf17 const} ArgumentTuple& args =\par
1554         *{\cf17 static_cast<}{\cf17 const }ArgumentTuple*{\cf17 >}(untyped_args);\par
1555     *os << {\cf22 "Uninteresting mock function call - "};\par
1556     DescribeDefaultActionTo(args, os);\par
1557     *os << {\cf22 "    Function call: "} << Name();\par
1558     UniversalPrint(args, os);\par
1559   \}\par
1560 \par
1561   {\cf20 // Returns the expectation that matches the given function arguments}\par
1562   {\cf20 // (or NULL is there's no match); when a match is found,}\par
1563   {\cf20 // untyped_action is set to point to the action that should be}\par
1564   {\cf20 // performed (or NULL if the action is "do default"), and}\par
1565   {\cf20 // is_excessive is modified to indicate whether the call exceeds the}\par
1566   {\cf20 // expected number.}\par
1567   {\cf20 //}\par
1568   {\cf20 // Critical section: We must find the matching expectation and the}\par
1569   {\cf20 // corresponding action that needs to be taken in an ATOMIC}\par
1570   {\cf20 // transaction.  Otherwise another thread may call this mock}\par
1571   {\cf20 // method in the middle and mess up the state.}\par
1572   {\cf20 //}\par
1573   {\cf20 // However, performing the action has to be left out of the critical}\par
1574   {\cf20 // section.  The reason is that we have no control on what the}\par
1575   {\cf20 // action does (it can invoke an arbitrary user function or even a}\par
1576   {\cf20 // mock function) and excessive locking could cause a dead lock.}\par
1577   {\cf17 const} ExpectationBase* UntypedFindMatchingExpectation(\par
1578       {\cf17 const} {\cf18 void}* untyped_args, {\cf17 const} {\cf18 void}** untyped_action, {\cf18 bool}* is_excessive,\par
1579       ::std::ostream* what, ::std::ostream* why) {\cf17 override}\par
1580       GTEST_LOCK_EXCLUDED_(g_gmock_mutex) \{\par
1581     {\cf17 const} ArgumentTuple& args =\par
1582         *{\cf17 static_cast<}{\cf17 const }ArgumentTuple*{\cf17 >}(untyped_args);\par
1583     MutexLock l(&g_gmock_mutex);\par
1584     TypedExpectation<F>* exp = this->FindMatchingExpectationLocked(args);\par
1585     {\cf19 if} (exp == {\cf17 nullptr}) \{  {\cf20 // A match wasn't found.}\par
1586       this->FormatUnexpectedCallMessageLocked(args, what, why);\par
1587       {\cf19 return} {\cf17 nullptr};\par
1588     \}\par
1589 \par
1590     {\cf20 // This line must be done before calling GetActionForArguments(),}\par
1591     {\cf20 // which will increment the call count for *exp and thus affect}\par
1592     {\cf20 // its saturation status.}\par
1593     *is_excessive = exp->IsSaturated();\par
1594     {\cf17 const} Action<F>* action = exp->GetActionForArguments({\cf17 this}, args, what, why);\par
1595     {\cf19 if} (action != {\cf17 nullptr} && action->IsDoDefault())\par
1596       action = {\cf17 nullptr};  {\cf20 // Normalize "do default" to NULL.}\par
1597     *untyped_action = action;\par
1598     {\cf19 return} exp;\par
1599   \}\par
1600 \par
1601   {\cf20 // Prints the given function arguments to the ostream.}\par
1602   {\cf18 void} UntypedPrintArgs({\cf17 const} {\cf18 void}* untyped_args,\par
1603                         ::std::ostream* os){\cf17  const override }\{\par
1604     {\cf17 const} ArgumentTuple& args =\par
1605         *{\cf17 static_cast<}{\cf17 const }ArgumentTuple*{\cf17 >}(untyped_args);\par
1606     UniversalPrint(args, os);\par
1607   \}\par
1608 \par
1609   {\cf20 // Returns the expectation that matches the arguments, or NULL if no}\par
1610   {\cf20 // expectation matches them.}\par
1611   TypedExpectation<F>* FindMatchingExpectationLocked({\cf17 const} ArgumentTuple& args)\par
1612       {\cf17 const} GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex) \{\par
1613     g_gmock_mutex.AssertHeld();\par
1614     {\cf20 // See the definition of untyped_expectations_ for why access to}\par
1615     {\cf20 // it is unprotected here.}\par
1616     {\cf19 for} ({\cf17 typename} UntypedExpectations::const_reverse_iterator it =\par
1617              untyped_expectations_.rbegin();\par
1618          it != untyped_expectations_.rend(); ++it) \{\par
1619       TypedExpectation<F>* {\cf17 const} exp =\par
1620           {\cf17 static_cast<}TypedExpectation<F>*{\cf17 >}(it->get());\par
1621       {\cf19 if} (exp->ShouldHandleArguments(args)) \{\par
1622         {\cf19 return} exp;\par
1623       \}\par
1624     \}\par
1625     {\cf19 return} {\cf17 nullptr};\par
1626   \}\par
1627 \par
1628   {\cf20 // Returns a message that the arguments don't match any expectation.}\par
1629   {\cf18 void} FormatUnexpectedCallMessageLocked({\cf17 const} ArgumentTuple& args,\par
1630                                          ::std::ostream* os,\par
1631                                          ::std::ostream* why) {\cf17 const}\par
1632       GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex) \{\par
1633     g_gmock_mutex.AssertHeld();\par
1634     *os << {\cf22 "\\nUnexpected mock function call - "};\par
1635     DescribeDefaultActionTo(args, os);\par
1636     PrintTriedExpectationsLocked(args, why);\par
1637   \}\par
1638 \par
1639   {\cf20 // Prints a list of expectations that have been tried against the}\par
1640   {\cf20 // current mock function call.}\par
1641   {\cf18 void} PrintTriedExpectationsLocked({\cf17 const} ArgumentTuple& args,\par
1642                                     ::std::ostream* why) {\cf17 const}\par
1643       GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex) \{\par
1644     g_gmock_mutex.AssertHeld();\par
1645     {\cf17 const} {\cf18 size_t} count = untyped_expectations_.size();\par
1646     *why << {\cf22 "Google Mock tried the following "} << count << {\cf22 " "}\par
1647          << (count == 1 ? {\cf22 "expectation, but it didn't match"}\par
1648                         : {\cf22 "expectations, but none matched"})\par
1649          << {\cf22 ":\\n"};\par
1650     {\cf19 for} ({\cf18 size_t} i = 0; i < count; i++) \{\par
1651       TypedExpectation<F>* {\cf17 const} expectation =\par
1652           {\cf17 static_cast<}TypedExpectation<F>*{\cf17 >}(untyped_expectations_[i].get());\par
1653       *why << {\cf22 "\\n"};\par
1654       expectation->DescribeLocationTo(why);\par
1655       {\cf19 if} (count > 1) \{\par
1656         *why << {\cf22 "tried expectation #"} << i << {\cf22 ": "};\par
1657       \}\par
1658       *why << expectation->source_text() << {\cf22 "...\\n"};\par
1659       expectation->ExplainMatchResultTo(args, why);\par
1660       expectation->DescribeCallCountTo(why);\par
1661     \}\par
1662   \}\par
1663 \par
1664   {\cf20 // Performs the given action (or the default if it's null) with the given}\par
1665   {\cf20 // arguments and returns the action's result.}\par
1666   {\cf20 // L = *}\par
1667   R PerformAction({\cf17 const} {\cf18 void}* untyped_action, ArgumentTuple&& args,\par
1668                   {\cf17 const} std::string& call_description){\cf17  const }\{\par
1669     {\cf19 if} (untyped_action == {\cf17 nullptr}) \{\par
1670       {\cf19 return} PerformDefaultAction(std::move(args), call_description);\par
1671     \}\par
1672 \par
1673     {\cf20 // Make a copy of the action before performing it, in case the}\par
1674     {\cf20 // action deletes the mock object (and thus deletes itself).}\par
1675     {\cf17 const} Action<F> action = *{\cf17 static_cast<}{\cf17 const }Action<F>*{\cf17 >}(untyped_action);\par
1676     {\cf19 return} action.Perform(std::move(args));\par
1677   \}\par
1678 \par
1679   {\cf20 // Is it possible to store an object of the supplied type in a local variable}\par
1680   {\cf20 // for the sake of printing it, then return it on to the caller?}\par
1681   {\cf17 template} <{\cf17 typename} T>\par
1682   {\cf17 using }can_print_result = internal::conjunction<\par
1683       {\cf20 // void can't be stored as an object (and we also don't need to print it).}\par
1684       internal::negation<std::is_void<T>>,\par
1685       {\cf20 // Non-moveable types can't be returned on to the user, so there's no way}\par
1686       {\cf20 // for us to intercept and print them.}\par
1687       std::is_move_constructible<T>>;\par
1688 \par
1689   {\cf20 // Perform the supplied action, printing the result to os.}\par
1690   {\cf17 template} <{\cf17 typename} T = R,\par
1691             {\cf17 typename} std::enable_if<can_print_result<T>::value, {\cf18 int}>::type = 0>\par
1692   R PerformActionAndPrintResult({\cf17 const} {\cf18 void}* {\cf17 const} untyped_action,\par
1693                                 ArgumentTuple&& args,\par
1694                                 {\cf17 const} std::string& call_description,\par
1695                                 std::ostream& os) \{\par
1696     R result = PerformAction(untyped_action, std::move(args), call_description);\par
1697 \par
1698     PrintAsActionResult(result, os);\par
1699     {\cf19 return} std::forward<R>(result);\par
1700   \}\par
1701 \par
1702   {\cf20 // An overload for when it's not possible to print the result. In this case we}\par
1703   {\cf20 // simply perform the action.}\par
1704   {\cf17 template} <{\cf17 typename} T = R,\par
1705             {\cf17 typename} std::enable_if<\par
1706                 internal::negation<can_print_result<T>>::value, {\cf18 int}>::type = 0>\par
1707   R PerformActionAndPrintResult({\cf17 const} {\cf18 void}* {\cf17 const} untyped_action,\par
1708                                 ArgumentTuple&& args,\par
1709                                 {\cf17 const} std::string& call_description,\par
1710                                 std::ostream&) \{\par
1711     {\cf19 return} PerformAction(untyped_action, std::move(args), call_description);\par
1712   \}\par
1713 \par
1714   {\cf20 // Returns the result of invoking this mock function with the given}\par
1715   {\cf20 // arguments. This function can be safely called from multiple}\par
1716   {\cf20 // threads concurrently.}\par
1717   R InvokeWith(ArgumentTuple&& args) GTEST_LOCK_EXCLUDED_(g_gmock_mutex);\par
1718 \};  {\cf20 // class FunctionMocker}\par
1719 \par
1720 {\cf20 // Calculates the result of invoking this mock function with the given}\par
1721 {\cf20 // arguments, prints it, and returns it.}\par
1722 {\cf17 template} <{\cf17 typename} R, {\cf17 typename}... Args>\par
1723 R FunctionMocker<R(Args...)>::InvokeWith(ArgumentTuple&& args)\par
1724     GTEST_LOCK_EXCLUDED_(g_gmock_mutex) \{\par
1725   {\cf20 // See the definition of untyped_expectations_ for why access to it}\par
1726   {\cf20 // is unprotected here.}\par
1727   {\cf19 if} (untyped_expectations_.size() == 0) \{\par
1728     {\cf20 // No expectation is set on this mock method - we have an}\par
1729     {\cf20 // uninteresting call.}\par
1730 \par
1731     {\cf20 // We must get Google Mock's reaction on uninteresting calls}\par
1732     {\cf20 // made on this mock object BEFORE performing the action,}\par
1733     {\cf20 // because the action may DELETE the mock object and make the}\par
1734     {\cf20 // following expression meaningless.}\par
1735     {\cf17 const} CallReaction reaction =\par
1736         Mock::GetReactionOnUninterestingCalls(MockObject());\par
1737 \par
1738     {\cf20 // True if and only if we need to print this call's arguments and return}\par
1739     {\cf20 // value.  This definition must be kept in sync with}\par
1740     {\cf20 // the behavior of ReportUninterestingCall().}\par
1741     {\cf17 const} {\cf18 bool} need_to_report_uninteresting_call =\par
1742         {\cf20 // If the user allows this uninteresting call, we print it}\par
1743         {\cf20 // only when they want informational messages.}\par
1744         reaction == kAllow ? LogIsVisible(kInfo) :\par
1745                            {\cf20 // If the user wants this to be a warning, we print}\par
1746                            {\cf20 // it only when they want to see warnings.}\par
1747             reaction == kWarn\par
1748             ? LogIsVisible(kWarning)\par
1749             :\par
1750             {\cf20 // Otherwise, the user wants this to be an error, and we}\par
1751             {\cf20 // should always print detailed information in the error.}\par
1752             true;\par
1753 \par
1754     {\cf19 if} (!need_to_report_uninteresting_call) \{\par
1755       {\cf20 // Perform the action without printing the call information.}\par
1756       {\cf19 return} this->PerformDefaultAction(\par
1757           std::move(args), {\cf22 "Function call: "} + std::string(Name()));\par
1758     \}\par
1759 \par
1760     {\cf20 // Warns about the uninteresting call.}\par
1761     ::std::stringstream ss;\par
1762     this->UntypedDescribeUninterestingCall(&args, &ss);\par
1763 \par
1764     {\cf20 // Perform the action, print the result, and then report the uninteresting}\par
1765     {\cf20 // call.}\par
1766     {\cf20 //}\par
1767     {\cf20 // We use RAII to do the latter in case R is void or a non-moveable type. In}\par
1768     {\cf20 // either case we can't assign it to a local variable.}\par
1769     {\cf17 const} Cleanup report_uninteresting_call(\par
1770         [&] \{ ReportUninterestingCall(reaction, ss.str()); \});\par
1771 \par
1772     {\cf19 return} PerformActionAndPrintResult({\cf17 nullptr}, std::move(args), ss.str(), ss);\par
1773   \}\par
1774 \par
1775   {\cf18 bool} is_excessive = {\cf17 false};\par
1776   ::std::stringstream ss;\par
1777   ::std::stringstream why;\par
1778   ::std::stringstream loc;\par
1779   {\cf17 const} {\cf18 void}* untyped_action = {\cf17 nullptr};\par
1780 \par
1781   {\cf20 // The UntypedFindMatchingExpectation() function acquires and}\par
1782   {\cf20 // releases g_gmock_mutex.}\par
1783 \par
1784   {\cf17 const} ExpectationBase* {\cf17 const} untyped_expectation =\par
1785       this->UntypedFindMatchingExpectation(&args, &untyped_action,\par
1786                                            &is_excessive, &ss, &why);\par
1787   {\cf17 const} {\cf18 bool} found = untyped_expectation != {\cf17 nullptr};\par
1788 \par
1789   {\cf20 // True if and only if we need to print the call's arguments}\par
1790   {\cf20 // and return value.}\par
1791   {\cf20 // This definition must be kept in sync with the uses of Expect()}\par
1792   {\cf20 // and Log() in this function.}\par
1793   {\cf17 const} {\cf18 bool} need_to_report_call =\par
1794       !found || is_excessive || LogIsVisible(kInfo);\par
1795   {\cf19 if} (!need_to_report_call) \{\par
1796     {\cf20 // Perform the action without printing the call information.}\par
1797     {\cf19 return} PerformAction(untyped_action, std::move(args), {\cf22 ""});\par
1798   \}\par
1799 \par
1800   ss << {\cf22 "    Function call: "} << Name();\par
1801   this->UntypedPrintArgs(&args, &ss);\par
1802 \par
1803   {\cf20 // In case the action deletes a piece of the expectation, we}\par
1804   {\cf20 // generate the message beforehand.}\par
1805   {\cf19 if} (found && !is_excessive) \{\par
1806     untyped_expectation->DescribeLocationTo(&loc);\par
1807   \}\par
1808 \par
1809   {\cf20 // Perform the action, print the result, and then fail or log in whatever way}\par
1810   {\cf20 // is appropriate.}\par
1811   {\cf20 //}\par
1812   {\cf20 // We use RAII to do the latter in case R is void or a non-moveable type. In}\par
1813   {\cf20 // either case we can't assign it to a local variable.}\par
1814   {\cf17 const} Cleanup handle_failures([&] \{\par
1815     ss << {\cf22 "\\n"} << why.str();\par
1816 \par
1817     {\cf19 if} (!found) \{\par
1818       {\cf20 // No expectation matches this call - reports a failure.}\par
1819       Expect({\cf17 false}, {\cf17 nullptr}, -1, ss.str());\par
1820     \} {\cf19 else} {\cf19 if} (is_excessive) \{\par
1821       {\cf20 // We had an upper-bound violation and the failure message is in ss.}\par
1822       Expect({\cf17 false}, untyped_expectation->file(), untyped_expectation->line(),\par
1823              ss.str());\par
1824     \} {\cf19 else} \{\par
1825       {\cf20 // We had an expected call and the matching expectation is}\par
1826       {\cf20 // described in ss.}\par
1827       Log(kInfo, loc.str() + ss.str(), 2);\par
1828     \}\par
1829   \});\par
1830 \par
1831   {\cf19 return} PerformActionAndPrintResult(untyped_action, std::move(args), ss.str(),\par
1832                                      ss);\par
1833 \}\par
1834 \par
1835 \}  {\cf20 // namespace internal}\par
1836 \par
1837 {\cf17 namespace }internal \{\par
1838 \par
1839 {\cf17 template} <{\cf17 typename} F>\par
1840 {\cf17 class }MockFunction;\par
1841 \par
1842 {\cf17 template} <{\cf17 typename} R, {\cf17 typename}... Args>\par
1843 {\cf17 class }MockFunction<R(Args...)> \{\par
1844  {\cf17 public}:\par
1845   MockFunction({\cf17 const} MockFunction&) = {\cf17 delete};\par
1846   MockFunction& operator=({\cf17 const} MockFunction&) = {\cf17 delete};\par
1847 \par
1848   std::function<R(Args...)> AsStdFunction() \{\par
1849     {\cf19 return} [{\cf17 this}](Args... args) -> R \{\par
1850       {\cf19 return} this->Call(std::forward<Args>(args)...);\par
1851     \};\par
1852   \}\par
1853 \par
1854   {\cf20 // Implementation detail: the expansion of the MOCK_METHOD macro.}\par
1855   R Call(Args... args) \{\par
1856     mock_.SetOwnerAndName({\cf17 this}, {\cf22 "Call"});\par
1857     {\cf19 return} mock_.Invoke(std::forward<Args>(args)...);\par
1858   \}\par
1859 \par
1860   MockSpec<R(Args...)> gmock_Call(Matcher<Args>... m) \{\par
1861     mock_.RegisterOwner({\cf17 this});\par
1862     {\cf19 return} mock_.With(std::move(m)...);\par
1863   \}\par
1864 \par
1865   MockSpec<R(Args...)> gmock_Call({\cf17 const} WithoutMatchers&, R (*)(Args...)) \{\par
1866     {\cf19 return} this->gmock_Call(::testing::A<Args>()...);\par
1867   \}\par
1868 \par
1869  {\cf17 protected}:\par
1870   MockFunction() = {\cf19 default};\par
1871   ~MockFunction() = {\cf19 default};\par
1872 \par
1873  {\cf17 private}:\par
1874   FunctionMocker<R(Args...)> mock_;\par
1875 \};\par
1876 \par
1877 {\cf20 /*}\par
1878 {\cf20 The SignatureOf<F> struct is a meta-function returning function signature}\par
1879 {\cf20 corresponding to the provided F argument.}\par
1880 {\cf20 }\par
1881 {\cf20 It makes use of MockFunction easier by allowing it to accept more F arguments}\par
1882 {\cf20 than just function signatures.}\par
1883 {\cf20 }\par
1884 {\cf20 Specializations provided here cover a signature type itself and any template}\par
1885 {\cf20 that can be parameterized with a signature, including std::function and}\par
1886 {\cf20 boost::function.}\par
1887 {\cf20 */}\par
1888 \par
1889 {\cf17 template} <{\cf17 typename} F, {\cf17 typename} = {\cf18 void}>\par
1890 {\cf17 struct }SignatureOf;\par
1891 \par
1892 {\cf17 template} <{\cf17 typename} R, {\cf17 typename}... Args>\par
1893 {\cf17 struct }SignatureOf<R(Args...)> \{\par
1894   {\cf17 using }type = R(Args...);\par
1895 \};\par
1896 \par
1897 {\cf17 template} <{\cf17 template} <{\cf17 typename}> {\cf17 class }C, {\cf17 typename} F>\par
1898 {\cf17 struct }SignatureOf<C<F>,\par
1899                    typename std::enable_if<std::is_function<F>::value>::type>\par
1900     : SignatureOf<F> \{\};\par
1901 \par
1902 {\cf17 template} <{\cf17 typename} F>\par
1903 {\cf17 using }SignatureOfT = {\cf17 typename} SignatureOf<F>::type;\par
1904 \par
1905 \}  {\cf20 // namespace internal}\par
1906 \par
1907 {\cf20 // A MockFunction<F> type has one mock method whose type is}\par
1908 {\cf20 // internal::SignatureOfT<F>.  It is useful when you just want your}\par
1909 {\cf20 // test code to emit some messages and have Google Mock verify the}\par
1910 {\cf20 // right messages are sent (and perhaps at the right times).  For}\par
1911 {\cf20 // example, if you are exercising code:}\par
1912 {\cf20 //}\par
1913 {\cf20 //   Foo(1);}\par
1914 {\cf20 //   Foo(2);}\par
1915 {\cf20 //   Foo(3);}\par
1916 {\cf20 //}\par
1917 {\cf20 // and want to verify that Foo(1) and Foo(3) both invoke}\par
1918 {\cf20 // mock.Bar("a"), but Foo(2) doesn't invoke anything, you can write:}\par
1919 {\cf20 //}\par
1920 {\cf20 // TEST(FooTest, InvokesBarCorrectly) \{}\par
1921 {\cf20 //   MyMock mock;}\par
1922 {\cf20 //   MockFunction<void(string check_point_name)> check;}\par
1923 {\cf20 //   \{}\par
1924 {\cf20 //     InSequence s;}\par
1925 {\cf20 //}\par
1926 {\cf20 //     EXPECT_CALL(mock, Bar("a"));}\par
1927 {\cf20 //     EXPECT_CALL(check, Call("1"));}\par
1928 {\cf20 //     EXPECT_CALL(check, Call("2"));}\par
1929 {\cf20 //     EXPECT_CALL(mock, Bar("a"));}\par
1930 {\cf20 //   \}}\par
1931 {\cf20 //   Foo(1);}\par
1932 {\cf20 //   check.Call("1");}\par
1933 {\cf20 //   Foo(2);}\par
1934 {\cf20 //   check.Call("2");}\par
1935 {\cf20 //   Foo(3);}\par
1936 {\cf20 // \}}\par
1937 {\cf20 //}\par
1938 {\cf20 // The expectation spec says that the first Bar("a") must happen}\par
1939 {\cf20 // before check point "1", the second Bar("a") must happen after check}\par
1940 {\cf20 // point "2", and nothing should happen between the two check}\par
1941 {\cf20 // points. The explicit check points make it easy to tell which}\par
1942 {\cf20 // Bar("a") is called by which call to Foo().}\par
1943 {\cf20 //}\par
1944 {\cf20 // MockFunction<F> can also be used to exercise code that accepts}\par
1945 {\cf20 // std::function<internal::SignatureOfT<F>> callbacks. To do so, use}\par
1946 {\cf20 // AsStdFunction() method to create std::function proxy forwarding to}\par
1947 {\cf20 // original object's Call. Example:}\par
1948 {\cf20 //}\par
1949 {\cf20 // TEST(FooTest, RunsCallbackWithBarArgument) \{}\par
1950 {\cf20 //   MockFunction<int(string)> callback;}\par
1951 {\cf20 //   EXPECT_CALL(callback, Call("bar")).WillOnce(Return(1));}\par
1952 {\cf20 //   Foo(callback.AsStdFunction());}\par
1953 {\cf20 // \}}\par
1954 {\cf20 //}\par
1955 {\cf20 // The internal::SignatureOfT<F> indirection allows to use other types}\par
1956 {\cf20 // than just function signature type. This is typically useful when}\par
1957 {\cf20 // providing a mock for a predefined std::function type. Example:}\par
1958 {\cf20 //}\par
1959 {\cf20 // using FilterPredicate = std::function<bool(string)>;}\par
1960 {\cf20 // void MyFilterAlgorithm(FilterPredicate predicate);}\par
1961 {\cf20 //}\par
1962 {\cf20 // TEST(FooTest, FilterPredicateAlwaysAccepts) \{}\par
1963 {\cf20 //   MockFunction<FilterPredicate> predicateMock;}\par
1964 {\cf20 //   EXPECT_CALL(predicateMock, Call(_)).WillRepeatedly(Return(true));}\par
1965 {\cf20 //   MyFilterAlgorithm(predicateMock.AsStdFunction());}\par
1966 {\cf20 // \}}\par
1967 {\cf17 template} <{\cf17 typename} F>\par
1968 {\cf17 class }MockFunction : {\cf17 public} internal::MockFunction<internal::SignatureOfT<F>> \{\par
1969   {\cf17 using }Base = internal::MockFunction<internal::SignatureOfT<F>>;\par
1970 \par
1971  {\cf17 public}:\par
1972   {\cf17 using }Base::Base;\par
1973 \};\par
1974 \par
1975 {\cf20 // The style guide prohibits "using" statements in a namespace scope}\par
1976 {\cf20 // inside a header file.  However, the MockSpec class template is}\par
1977 {\cf20 // meant to be defined in the ::testing namespace.  The following line}\par
1978 {\cf20 // is just a trick for working around a bug in MSVC 8.0, which cannot}\par
1979 {\cf20 // handle it if we define MockSpec in ::testing.}\par
1980 {\cf17 using }internal::MockSpec;\par
1981 \par
1982 {\cf20 // Const(x) is a convenient function for obtaining a const reference}\par
1983 {\cf20 // to x.  This is useful for setting expectations on an overloaded}\par
1984 {\cf20 // const mock method, e.g.}\par
1985 {\cf20 //}\par
1986 {\cf20 //   class MockFoo : public FooInterface \{}\par
1987 {\cf20 //    public:}\par
1988 {\cf20 //     MOCK_METHOD0(Bar, int());}\par
1989 {\cf20 //     MOCK_CONST_METHOD0(Bar, int&());}\par
1990 {\cf20 //   \};}\par
1991 {\cf20 //}\par
1992 {\cf20 //   MockFoo foo;}\par
1993 {\cf20 //   // Expects a call to non-const MockFoo::Bar().}\par
1994 {\cf20 //   EXPECT_CALL(foo, Bar());}\par
1995 {\cf20 //   // Expects a call to const MockFoo::Bar().}\par
1996 {\cf20 //   EXPECT_CALL(Const(foo), Bar());}\par
1997 {\cf17 template} <{\cf17 typename} T>\par
1998 {\cf17 inline} {\cf17 const} T& Const({\cf17 const} T& x) \{\par
1999   {\cf19 return} x;\par
2000 \}\par
2001 \par
2002 {\cf20 // Constructs an Expectation object that references and co-owns exp.}\par
2003 {\cf17 inline} Expectation::Expectation(internal::ExpectationBase& exp)  {\cf20 // NOLINT}\par
2004     : expectation_base_(exp.GetHandle().expectation_base()) \{\}\par
2005 \par
2006 \}  {\cf20 // namespace testing}\par
2007 \par
2008 GTEST_DISABLE_MSC_WARNINGS_POP_()  {\cf20 //  4251}\par
2009 \par
2010 {\cf20 // Implementation for ON_CALL and EXPECT_CALL macros. A separate macro is}\par
2011 {\cf20 // required to avoid compile errors when the name of the method used in call is}\par
2012 {\cf20 // a result of macro expansion. See CompilesWithMethodNameExpandedFromMacro}\par
2013 {\cf20 // tests in internal/gmock-spec-builders_test.cc for more details.}\par
2014 {\cf20 //}\par
2015 {\cf20 // This macro supports statements both with and without parameter matchers. If}\par
2016 {\cf20 // the parameter list is omitted, gMock will accept any parameters, which allows}\par
2017 {\cf20 // tests to be written that don't need to encode the number of method}\par
2018 {\cf20 // parameter. This technique may only be used for non-overloaded methods.}\par
2019 {\cf20 //}\par
2020 {\cf20 //   // These are the same:}\par
2021 {\cf20 //   ON_CALL(mock, NoArgsMethod()).WillByDefault(...);}\par
2022 {\cf20 //   ON_CALL(mock, NoArgsMethod).WillByDefault(...);}\par
2023 {\cf20 //}\par
2024 {\cf20 //   // As are these:}\par
2025 {\cf20 //   ON_CALL(mock, TwoArgsMethod(_, _)).WillByDefault(...);}\par
2026 {\cf20 //   ON_CALL(mock, TwoArgsMethod).WillByDefault(...);}\par
2027 {\cf20 //}\par
2028 {\cf20 //   // Can also specify args if you want, of course:}\par
2029 {\cf20 //   ON_CALL(mock, TwoArgsMethod(_, 45)).WillByDefault(...);}\par
2030 {\cf20 //}\par
2031 {\cf20 //   // Overloads work as long as you specify parameters:}\par
2032 {\cf20 //   ON_CALL(mock, OverloadedMethod(_)).WillByDefault(...);}\par
2033 {\cf20 //   ON_CALL(mock, OverloadedMethod(_, _)).WillByDefault(...);}\par
2034 {\cf20 //}\par
2035 {\cf20 //   // Oops! Which overload did you want?}\par
2036 {\cf20 //   ON_CALL(mock, OverloadedMethod).WillByDefault(...);}\par
2037 {\cf20 //     => ERROR: call to member function 'gmock_OverloadedMethod' is ambiguous}\par
2038 {\cf20 //}\par
2039 {\cf20 // How this works: The mock class uses two overloads of the gmock_Method}\par
2040 {\cf20 // expectation setter method plus an operator() overload on the MockSpec object.}\par
2041 {\cf20 // In the matcher list form, the macro expands to:}\par
2042 {\cf20 //}\par
2043 {\cf20 //   // This statement:}\par
2044 {\cf20 //   ON_CALL(mock, TwoArgsMethod(_, 45))...}\par
2045 {\cf20 //}\par
2046 {\cf20 //   // ...expands to:}\par
2047 {\cf20 //   mock.gmock_TwoArgsMethod(_, 45)(WithoutMatchers(), nullptr)...}\par
2048 {\cf20 //   |-------------v---------------||------------v-------------|}\par
2049 {\cf20 //       invokes first overload        swallowed by operator()}\par
2050 {\cf20 //}\par
2051 {\cf20 //   // ...which is essentially:}\par
2052 {\cf20 //   mock.gmock_TwoArgsMethod(_, 45)...}\par
2053 {\cf20 //}\par
2054 {\cf20 // Whereas the form without a matcher list:}\par
2055 {\cf20 //}\par
2056 {\cf20 //   // This statement:}\par
2057 {\cf20 //   ON_CALL(mock, TwoArgsMethod)...}\par
2058 {\cf20 //}\par
2059 {\cf20 //   // ...expands to:}\par
2060 {\cf20 //   mock.gmock_TwoArgsMethod(WithoutMatchers(), nullptr)...}\par
2061 {\cf20 //   |-----------------------v--------------------------|}\par
2062 {\cf20 //                 invokes second overload}\par
2063 {\cf20 //}\par
2064 {\cf20 //   // ...which is essentially:}\par
2065 {\cf20 //   mock.gmock_TwoArgsMethod(_, _)...}\par
2066 {\cf20 //}\par
2067 {\cf20 // The WithoutMatchers() argument is used to disambiguate overloads and to}\par
2068 {\cf20 // block the caller from accidentally invoking the second overload directly. The}\par
2069 {\cf20 // second argument is an internal type derived from the method signature. The}\par
2070 {\cf20 // failure to disambiguate two overloads of this method in the ON_CALL statement}\par
2071 {\cf20 // is how we block callers from setting expectations on overloaded methods.}\par
2072 {\cf21 #define GMOCK_ON_CALL_IMPL_(mock_expr, Setter, call)                    \\}\par
2073 {\cf21   ((mock_expr).gmock_##call)(::testing::internal::GetWithoutMatchers(), \\}\par
2074 {\cf21                              nullptr)                                   \\}\par
2075 {\cf21       .Setter(__FILE__, __LINE__, #mock_expr, #call)}\par
2076 \par
2077 {\cf21 #define ON_CALL(obj, call) \\}\par
2078 {\cf21   GMOCK_ON_CALL_IMPL_(obj, InternalDefaultActionSetAt, call)}\par
2079 \par
2080 {\cf21 #define EXPECT_CALL(obj, call) \\}\par
2081 {\cf21   GMOCK_ON_CALL_IMPL_(obj, InternalExpectedAt, call)}\par
2082 \par
2083 {\cf21 #endif  }{\cf20 // GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_SPEC_BUILDERS_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gmock.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googlemock/include/gmock/gmock.h}
{\xe \v lib/googletest-main/googlemock/include/gmock/gmock.h}
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2007, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // Google Mock - a framework for writing C++ mock classes.}\par
31 {\cf20 //}\par
32 {\cf20 // This is the main header file a user should include.}\par
33 \par
34 {\cf21 #ifndef GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_H_}\par
35 {\cf21 #define GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_H_}\par
36 \par
37 {\cf20 // This file implements the following syntax:}\par
38 {\cf20 //}\par
39 {\cf20 //   ON_CALL(mock_object, Method(...))}\par
40 {\cf20 //     .With(...) ?}\par
41 {\cf20 //     .WillByDefault(...);}\par
42 {\cf20 //}\par
43 {\cf20 // where With() is optional and WillByDefault() must appear exactly}\par
44 {\cf20 // once.}\par
45 {\cf20 //}\par
46 {\cf20 //   EXPECT_CALL(mock_object, Method(...))}\par
47 {\cf20 //     .With(...) ?}\par
48 {\cf20 //     .Times(...) ?}\par
49 {\cf20 //     .InSequence(...) *}\par
50 {\cf20 //     .WillOnce(...) *}\par
51 {\cf20 //     .WillRepeatedly(...) ?}\par
52 {\cf20 //     .RetiresOnSaturation() ? ;}\par
53 {\cf20 //}\par
54 {\cf20 // where all clauses are optional and WillOnce() can be repeated.}\par
55 \par
56 {\cf21 #include "gmock/gmock-actions.h"}\par
57 {\cf21 #include "gmock/gmock-cardinalities.h"}\par
58 {\cf21 #include "gmock/gmock-function-mocker.h"}\par
59 {\cf21 #include "gmock/gmock-matchers.h"}\par
60 {\cf21 #include "gmock/gmock-more-actions.h"}\par
61 {\cf21 #include "gmock/gmock-more-matchers.h"}\par
62 {\cf21 #include "gmock/gmock-nice-strict.h"}\par
63 {\cf21 #include "gmock/internal/gmock-internal-utils.h"}\par
64 {\cf21 #include "gmock/internal/gmock-port.h"}\par
65 \par
66 {\cf20 // Declares Google Mock flags that we want a user to use programmatically.}\par
67 GMOCK_DECLARE_bool_(catch_leaked_mocks);\par
68 GMOCK_DECLARE_string_(verbose);\par
69 GMOCK_DECLARE_int32_(default_mock_behavior);\par
70 \par
71 {\cf17 namespace }testing \{\par
72 \par
73 {\cf20 // Initializes Google Mock.  This must be called before running the}\par
74 {\cf20 // tests.  In particular, it parses the command line for the flags}\par
75 {\cf20 // that Google Mock recognizes.  Whenever a Google Mock flag is seen,}\par
76 {\cf20 // it is removed from argv, and *argc is decremented.}\par
77 {\cf20 //}\par
78 {\cf20 // No value is returned.  Instead, the Google Mock flag variables are}\par
79 {\cf20 // updated.}\par
80 {\cf20 //}\par
81 {\cf20 // Since Google Test is needed for Google Mock to work, this function}\par
82 {\cf20 // also initializes Google Test and parses its flags, if that hasn't}\par
83 {\cf20 // been done.}\par
84 GTEST_API_ {\cf18 void} InitGoogleMock({\cf18 int}* argc, {\cf18 char}** argv);\par
85 \par
86 {\cf20 // This overloaded version can be used in Windows programs compiled in}\par
87 {\cf20 // UNICODE mode.}\par
88 GTEST_API_ {\cf18 void} InitGoogleMock({\cf18 int}* argc, {\cf18 wchar_t}** argv);\par
89 \par
90 {\cf20 // This overloaded version can be used on Arduino/embedded platforms where}\par
91 {\cf20 // there is no argc/argv.}\par
92 GTEST_API_ {\cf18 void} InitGoogleMock();\par
93 \par
94 \}  {\cf20 // namespace testing}\par
95 \par
96 {\cf21 #endif  }{\cf20 // GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gmock-generated-actions.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googlemock/include/gmock/internal/custom/gmock-generated-actions.h}
{\xe \v lib/googletest-main/googlemock/include/gmock/internal/custom/gmock-generated-actions.h}
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // IWYU pragma: private, include "gmock/gmock.h"}\par
2 {\cf20 // IWYU pragma: friend gmock/.*}\par
3 \par
4 {\cf21 #ifndef GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_CUSTOM_GMOCK_GENERATED_ACTIONS_H_}\par
5 {\cf21 #define GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_CUSTOM_GMOCK_GENERATED_ACTIONS_H_}\par
6 \par
7 {\cf21 #endif  }{\cf20 // GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_CUSTOM_GMOCK_GENERATED_ACTIONS_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gmock-port.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googlemock/include/gmock/internal/custom/gmock-port.h}
{\xe \v lib/googletest-main/googlemock/include/gmock/internal/custom/gmock-port.h}
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2015, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // Injection point for custom user configurations. See README for details}\par
31 {\cf20 //}\par
32 {\cf20 // ** Custom implementation starts here **}\par
33 \par
34 {\cf20 // IWYU pragma: private, include "gmock/gmock.h"}\par
35 {\cf20 // IWYU pragma: friend gmock/.*}\par
36 \par
37 {\cf21 #ifndef GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_CUSTOM_GMOCK_PORT_H_}\par
38 {\cf21 #define GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_CUSTOM_GMOCK_PORT_H_}\par
39 \par
40 {\cf21 #endif  }{\cf20 // GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_CUSTOM_GMOCK_PORT_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gmock-port.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googlemock/include/gmock/internal/gmock-port.h}
{\xe \v lib/googletest-main/googlemock/include/gmock/internal/gmock-port.h}
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2008, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // Low-level types and utilities for porting Google Mock to various}\par
31 {\cf20 // platforms.  All macros ending with _ and symbols defined in an}\par
32 {\cf20 // internal namespace are subject to change without notice.  Code}\par
33 {\cf20 // outside Google Mock MUST NOT USE THEM DIRECTLY.  Macros that don't}\par
34 {\cf20 // end with _ are part of Google Mock's public API and can be used by}\par
35 {\cf20 // code outside Google Mock.}\par
36 \par
37 {\cf20 // IWYU pragma: private, include "gmock/gmock.h"}\par
38 {\cf20 // IWYU pragma: friend gmock/.*}\par
39 \par
40 {\cf21 #ifndef GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_PORT_H_}\par
41 {\cf21 #define GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_PORT_H_}\par
42 \par
43 {\cf21 #include <assert.h>}\par
44 {\cf21 #include <stdlib.h>}\par
45 {\cf21 #include <cstdint>}\par
46 {\cf21 #include <iostream>}\par
47 \par
48 {\cf20 // Most of the utilities needed for porting Google Mock are also}\par
49 {\cf20 // required for Google Test and are defined in gtest-port.h.}\par
50 {\cf20 //}\par
51 {\cf20 // Note to maintainers: to reduce code duplication, prefer adding}\par
52 {\cf20 // portability utilities to Google Test's gtest-port.h instead of}\par
53 {\cf20 // here, as Google Mock depends on Google Test.  Only add a utility}\par
54 {\cf20 // here if it's truly specific to Google Mock.}\par
55 \par
56 {\cf21 #include "gmock/internal/custom/gmock-port.h"}\par
57 {\cf21 #include "gtest/internal/gtest-port.h"}\par
58 \par
59 {\cf21 #if GTEST_HAS_ABSL}\par
60 {\cf21 #include "absl/flags/declare.h"}\par
61 {\cf21 #include "absl/flags/flag.h"}\par
62 {\cf21 #endif}\par
63 \par
64 {\cf20 // For MS Visual C++, check the compiler version. At least VS 2015 is}\par
65 {\cf20 // required to compile Google Mock.}\par
66 {\cf21 #if defined(_MSC_VER) && _MSC_VER < 1900}\par
67 {\cf21 #error "At least Visual C++ 2015 (14.0) is required to compile Google Mock."}\par
68 {\cf21 #endif}\par
69 \par
70 {\cf20 // Macro for referencing flags.  This is public as we want the user to}\par
71 {\cf20 // use this syntax to reference Google Mock flags.}\par
72 {\cf21 #define GMOCK_FLAG_NAME_(name) gmock_##name}\par
73 {\cf21 #define GMOCK_FLAG(name) FLAGS_gmock_##name}\par
74 \par
75 {\cf20 // Pick a command line flags implementation.}\par
76 {\cf21 #if GTEST_HAS_ABSL}\par
77 \par
78 {\cf20 // Macros for defining flags.}\par
79 {\cf21 #define GMOCK_DEFINE_bool_(name, default_val, doc) \\}\par
80 {\cf21   ABSL_FLAG(bool, GMOCK_FLAG_NAME_(name), default_val, doc)}\par
81 {\cf21 #define GMOCK_DEFINE_int32_(name, default_val, doc) \\}\par
82 {\cf21   ABSL_FLAG(int32_t, GMOCK_FLAG_NAME_(name), default_val, doc)}\par
83 {\cf21 #define GMOCK_DEFINE_string_(name, default_val, doc) \\}\par
84 {\cf21   ABSL_FLAG(std::string, GMOCK_FLAG_NAME_(name), default_val, doc)}\par
85 \par
86 {\cf20 // Macros for declaring flags.}\par
87 {\cf21 #define GMOCK_DECLARE_bool_(name) \\}\par
88 {\cf21   ABSL_DECLARE_FLAG(bool, GMOCK_FLAG_NAME_(name))}\par
89 {\cf21 #define GMOCK_DECLARE_int32_(name) \\}\par
90 {\cf21   ABSL_DECLARE_FLAG(int32_t, GMOCK_FLAG_NAME_(name))}\par
91 {\cf21 #define GMOCK_DECLARE_string_(name) \\}\par
92 {\cf21   ABSL_DECLARE_FLAG(std::string, GMOCK_FLAG_NAME_(name))}\par
93 \par
94 {\cf21 #define GMOCK_FLAG_GET(name) ::absl::GetFlag(GMOCK_FLAG(name))}\par
95 {\cf21 #define GMOCK_FLAG_SET(name, value) \\}\par
96 {\cf21   (void)(::absl::SetFlag(&GMOCK_FLAG(name), value))}\par
97 \par
98 {\cf21 #else  }{\cf20 // GTEST_HAS_ABSL}\par
99 \par
100 {\cf20 // Macros for defining flags.}\par
101 {\cf21 #define GMOCK_DEFINE_bool_(name, default_val, doc)  \\}\par
102 {\cf21   namespace testing \{                               \\}\par
103 {\cf21   GTEST_API_ bool GMOCK_FLAG(name) = (default_val); \\}\par
104 {\cf21   \}                                                 \\}\par
105 {\cf21   static_assert(true, "no-op to require trailing semicolon"})\par
106 {\cf21 #define GMOCK_DEFINE_int32_(name, default_val, doc)    \\}\par
107 {\cf21   namespace testing \{                                  \\}\par
108 {\cf21   GTEST_API_ int32_t GMOCK_FLAG(name) = (default_val); \\}\par
109 {\cf21   \}                                                    \\}\par
110 {\cf21   static_assert(true, "no-op to require trailing semicolon"})\par
111 {\cf21 #define GMOCK_DEFINE_string_(name, default_val, doc)         \\}\par
112 {\cf21   namespace testing \{                                        \\}\par
113 {\cf21   GTEST_API_ ::std::string GMOCK_FLAG(name) = (default_val); \\}\par
114 {\cf21   \}                                                          \\}\par
115 {\cf21   static_assert(true, "no-op to require trailing semicolon"})\par
116 \par
117 {\cf20 // Macros for declaring flags.}\par
118 {\cf21 #define GMOCK_DECLARE_bool_(name)          \\}\par
119 {\cf21   namespace testing \{                      \\}\par
120 {\cf21   GTEST_API_ extern bool GMOCK_FLAG(name); \\}\par
121 {\cf21   \}                                        \\}\par
122 {\cf21   static_assert(true, "no-op to require trailing semicolon"})\par
123 {\cf21 #define GMOCK_DECLARE_int32_(name)            \\}\par
124 {\cf21   namespace testing \{                         \\}\par
125 {\cf21   GTEST_API_ extern int32_t GMOCK_FLAG(name); \\}\par
126 {\cf21   \}                                           \\}\par
127 {\cf21   static_assert(true, "no-op to require trailing semicolon"})\par
128 {\cf21 #define GMOCK_DECLARE_string_(name)                 \\}\par
129 {\cf21   namespace testing \{                               \\}\par
130 {\cf21   GTEST_API_ extern ::std::string GMOCK_FLAG(name); \\}\par
131 {\cf21   \}                                                 \\}\par
132 {\cf21   static_assert(true, "no-op to require trailing semicolon"})\par
133 \par
134 {\cf21 #define GMOCK_FLAG_GET(name) ::testing::GMOCK_FLAG(name)}\par
135 {\cf21 #define GMOCK_FLAG_SET(name, value) (void)(::testing::GMOCK_FLAG(name) = value)}\par
136 \par
137 {\cf21 #endif  }{\cf20 // GTEST_HAS_ABSL}\par
138 \par
139 {\cf21 #endif  }{\cf20 // GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_PORT_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gmock-internal-utils.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googlemock/include/gmock/internal/gmock-internal-utils.h}
{\xe \v lib/googletest-main/googlemock/include/gmock/internal/gmock-internal-utils.h}
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2007, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // Google Mock - a framework for writing C++ mock classes.}\par
31 {\cf20 //}\par
32 {\cf20 // This file defines some utilities useful for implementing Google}\par
33 {\cf20 // Mock.  They are subject to change without notice, so please DO NOT}\par
34 {\cf20 // USE THEM IN USER CODE.}\par
35 \par
36 {\cf20 // IWYU pragma: private, include "gmock/gmock.h"}\par
37 {\cf20 // IWYU pragma: friend gmock/.*}\par
38 \par
39 {\cf21 #ifndef GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_INTERNAL_UTILS_H_}\par
40 {\cf21 #define GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_INTERNAL_UTILS_H_}\par
41 \par
42 {\cf21 #include <stdio.h>}\par
43 \par
44 {\cf21 #include <ostream>}  {\cf20 // NOLINT}\par
45 {\cf21 #include <string>}\par
46 {\cf21 #include <type_traits>}\par
47 {\cf21 #include <vector>}\par
48 \par
49 {\cf21 #include "gmock/internal/gmock-port.h"}\par
50 {\cf21 #include "gtest/gtest.h"}\par
51 \par
52 {\cf17 namespace }testing \{\par
53 \par
54 {\cf17 template} <{\cf17 typename}>\par
55 {\cf17 class }Matcher;\par
56 \par
57 {\cf17 namespace }internal \{\par
58 \par
59 {\cf20 // Silence MSVC C4100 (unreferenced formal parameter) and}\par
60 {\cf20 // C4805('==': unsafe mix of type 'const int' and type 'const bool')}\par
61 {\cf21 #ifdef _MSC_VER}\par
62 {\cf21 #pragma warning(push)}\par
63 {\cf21 #pragma warning(disable : 4100)}\par
64 {\cf21 #pragma warning(disable : 4805)}\par
65 {\cf21 #endif}\par
66 \par
67 {\cf20 // Joins a vector of strings as if they are fields of a tuple; returns}\par
68 {\cf20 // the joined string.}\par
69 GTEST_API_ std::string JoinAsKeyValueTuple(\par
70     {\cf17 const} std::vector<const char*>& names, {\cf17 const} Strings& values);\par
71 \par
72 {\cf20 // Converts an identifier name to a space-separated list of lower-case}\par
73 {\cf20 // words.  Each maximum substring of the form [A-Za-z][a-z]*|\\d+ is}\par
74 {\cf20 // treated as one word.  For example, both "FooBar123" and}\par
75 {\cf20 // "foo_bar_123" are converted to "foo bar 123".}\par
76 GTEST_API_ std::string ConvertIdentifierNameToWords({\cf17 const} {\cf18 char}* id_name);\par
77 \par
78 {\cf20 // GetRawPointer(p) returns the raw pointer underlying p when p is a}\par
79 {\cf20 // smart pointer, or returns p itself when p is already a raw pointer.}\par
80 {\cf20 // The following default implementation is for the smart pointer case.}\par
81 {\cf17 template} <{\cf17 typename} Po{\cf18 int}er>\par
82 {\cf17 inline} {\cf17 const} {\cf17 typename} Pointer::element_type* GetRawPointer({\cf17 const} Pointer& p) \{\par
83   {\cf19 return} p.get();\par
84 \}\par
85 {\cf20 // This overload version is for std::reference_wrapper, which does not work with}\par
86 {\cf20 // the overload above, as it does not have an `element_type`.}\par
87 {\cf17 template} <{\cf17 typename} Element>\par
88 {\cf17 inline} {\cf17 const} Element* GetRawPointer({\cf17 const} std::reference_wrapper<Element>& r) \{\par
89   {\cf19 return} &r.get();\par
90 \}\par
91 \par
92 {\cf20 // This overloaded version is for the raw pointer case.}\par
93 {\cf17 template} <{\cf17 typename} Element>\par
94 {\cf17 inline} Element* GetRawPointer(Element* p) \{\par
95   {\cf19 return} p;\par
96 \}\par
97 \par
98 {\cf20 // MSVC treats wchar_t as a native type usually, but treats it as the}\par
99 {\cf20 // same as unsigned short when the compiler option /Zc:wchar_t- is}\par
100 {\cf20 // specified.  It defines _NATIVE_WCHAR_T_DEFINED symbol when wchar_t}\par
101 {\cf20 // is a native type.}\par
102 {\cf21 #if defined(_MSC_VER) && !defined(_NATIVE_WCHAR_T_DEFINED)}\par
103 {\cf20 // wchar_t is a typedef.}\par
104 {\cf21 #else}\par
105 {\cf21 #define GMOCK_WCHAR_T_IS_NATIVE_ 1}\par
106 {\cf21 #endif}\par
107 \par
108 {\cf20 // In what follows, we use the term "kind" to indicate whether a type}\par
109 {\cf20 // is bool, an integer type (excluding bool), a floating-point type,}\par
110 {\cf20 // or none of them.  This categorization is useful for determining}\par
111 {\cf20 // when a matcher argument type can be safely converted to another}\par
112 {\cf20 // type in the implementation of SafeMatcherCast.}\par
113 {\cf17 enum} TypeKind \{ kBool, kInteger, kFloatingPoint, kOther \};\par
114 \par
115 {\cf20 // KindOf<T>::value is the kind of type T.}\par
116 {\cf17 template} <{\cf17 typename} T>\par
117 {\cf17 struct }KindOf \{\par
118   {\cf17 enum} \{ value = kOther \};  {\cf20 // The default kind.}\par
119 \};\par
120 \par
121 {\cf20 // This macro declares that the kind of 'type' is 'kind'.}\par
122 {\cf21 #define GMOCK_DECLARE_KIND_(type, kind) \\}\par
123 {\cf21   template <>                           \\}\par
124 {\cf21   struct KindOf<type> \{                 \\}\par
125 {\cf21     enum \{ value = kind \};              \\}\par
126 {\cf21   \}}\par
127 \par
128 GMOCK_DECLARE_KIND_({\cf18 bool}, kBool);\par
129 \par
130 {\cf20 // All standard integer types.}\par
131 GMOCK_DECLARE_KIND_({\cf18 char}, kInteger);\par
132 GMOCK_DECLARE_KIND_({\cf18 signed} {\cf18 char}, kInteger);\par
133 GMOCK_DECLARE_KIND_({\cf18 unsigned} {\cf18 char}, kInteger);\par
134 GMOCK_DECLARE_KIND_({\cf18 short}, kInteger);           {\cf20 // NOLINT}\par
135 GMOCK_DECLARE_KIND_({\cf18 unsigned} {\cf18 short}, kInteger);  {\cf20 // NOLINT}\par
136 GMOCK_DECLARE_KIND_({\cf18 int}, kInteger);\par
137 GMOCK_DECLARE_KIND_({\cf18 unsigned} {\cf18 int}, kInteger);\par
138 GMOCK_DECLARE_KIND_({\cf18 long}, kInteger);                {\cf20 // NOLINT}\par
139 GMOCK_DECLARE_KIND_({\cf18 unsigned} {\cf18 long}, kInteger);       {\cf20 // NOLINT}\par
140 GMOCK_DECLARE_KIND_({\cf18 long} {\cf18 long}, kInteger);           {\cf20 // NOLINT}\par
141 GMOCK_DECLARE_KIND_({\cf18 unsigned} {\cf18 long} {\cf18 long}, kInteger);  {\cf20 // NOLINT}\par
142 \par
143 {\cf21 #if GMOCK_WCHAR_T_IS_NATIVE_}\par
144 GMOCK_DECLARE_KIND_({\cf18 wchar_t}, kInteger);\par
145 {\cf21 #endif}\par
146 \par
147 {\cf20 // All standard floating-point types.}\par
148 GMOCK_DECLARE_KIND_({\cf18 float}, kFloatingPoint);\par
149 GMOCK_DECLARE_KIND_({\cf18 double}, kFloatingPoint);\par
150 GMOCK_DECLARE_KIND_({\cf18 long} {\cf18 double}, kFloatingPoint);\par
151 \par
152 {\cf21 #undef GMOCK_DECLARE_KIND_}\par
153 \par
154 {\cf20 // Evaluates to the kind of 'type'.}\par
155 {\cf21 #define GMOCK_KIND_OF_(type)                   \\}\par
156 {\cf21   static_cast< ::testing::internal::TypeKind>( \\}\par
157 {\cf21       ::testing::internal::KindOf<type>::value)}\par
158 \par
159 {\cf20 // LosslessArithmeticConvertibleImpl<kFromKind, From, kToKind, To>::value}\par
160 {\cf20 // is true if and only if arithmetic type From can be losslessly converted to}\par
161 {\cf20 // arithmetic type To.}\par
162 {\cf20 //}\par
163 {\cf20 // It's the user's responsibility to ensure that both From and To are}\par
164 {\cf20 // raw (i.e. has no CV modifier, is not a pointer, and is not a}\par
165 {\cf20 // reference) built-in arithmetic types, kFromKind is the kind of}\par
166 {\cf20 // From, and kToKind is the kind of To; the value is}\par
167 {\cf20 // implementation-defined when the above pre-condition is violated.}\par
168 {\cf17 template} <TypeKind kFromKind, {\cf17 typename} From, TypeKind kToKind, {\cf17 typename} To>\par
169 {\cf17 using }LosslessArithmeticConvertibleImpl = std::integral_constant<\par
170     bool,\par
171     {\cf20 // clang-format off}\par
172       {\cf20 // Converting from bool is always lossless}\par
173       (kFromKind == kBool) ? {\cf17 true}\par
174       {\cf20 // Converting between any other type kinds will be lossy if the type}\par
175       {\cf20 // kinds are not the same.}\par
176     : (kFromKind != kToKind) ? false\par
177     : (kFromKind == kInteger &&\par
178        {\cf20 // Converting between integers of different widths is allowed so long}\par
179        {\cf20 // as the conversion does not go from signed to unsigned.}\par
180       ((({\cf17 sizeof}(From) < {\cf17 sizeof}(To)) &&\par
181         !(std::is_signed<From>::value && !std::is_signed<To>::value)) ||\par
182        {\cf20 // Converting between integers of the same width only requires the}\par
183        {\cf20 // two types to have the same signedness.}\par
184        (({\cf17 sizeof}(From) == {\cf17 sizeof}(To)) &&\par
185         (std::is_signed<From>::value == std::is_signed<To>::value)))\par
186        ) ? {\cf17 true}\par
187       {\cf20 // Floating point conversions are lossless if and only if `To` is at least}\par
188       {\cf20 // as wide as `From`.}\par
189     : (kFromKind == kFloatingPoint && ({\cf17 sizeof}(From) <= {\cf17 sizeof}(To))) ? true\par
190     : {\cf17 false}\par
191     {\cf20 // clang-format on}\par
192     >;\par
193 \par
194 {\cf20 // LosslessArithmeticConvertible<From, To>::value is true if and only if}\par
195 {\cf20 // arithmetic type From can be losslessly converted to arithmetic type To.}\par
196 {\cf20 //}\par
197 {\cf20 // It's the user's responsibility to ensure that both From and To are}\par
198 {\cf20 // raw (i.e. has no CV modifier, is not a pointer, and is not a}\par
199 {\cf20 // reference) built-in arithmetic types; the value is}\par
200 {\cf20 // implementation-defined when the above pre-condition is violated.}\par
201 {\cf17 template} <{\cf17 typename} From, {\cf17 typename} To>\par
202 {\cf17 using }LosslessArithmeticConvertible =\par
203     LosslessArithmeticConvertibleImpl<GMOCK_KIND_OF_(From), From,\par
204                                       GMOCK_KIND_OF_(To), To>;\par
205 \par
206 {\cf20 // This interface knows how to report a Google Mock failure (either}\par
207 {\cf20 // non-fatal or fatal).}\par
208 {\cf17 class }FailureReporterInterface \{\par
209  {\cf17 public}:\par
210   {\cf20 // The type of a failure (either non-fatal or fatal).}\par
211   {\cf17 enum} FailureType \{ kNonfatal, kFatal \};\par
212 \par
213   {\cf17 virtual} ~FailureReporterInterface() \{\}\par
214 \par
215   {\cf20 // Reports a failure that occurred at the given source file location.}\par
216   {\cf17 virtual} {\cf18 void} ReportFailure(FailureType type, {\cf17 const} {\cf18 char}* file, {\cf18 int} line,\par
217                              {\cf17 const} std::string& message) = 0;\par
218 \};\par
219 \par
220 {\cf20 // Returns the failure reporter used by Google Mock.}\par
221 GTEST_API_ FailureReporterInterface* GetFailureReporter();\par
222 \par
223 {\cf20 // Asserts that condition is true; aborts the process with the given}\par
224 {\cf20 // message if condition is false.  We cannot use LOG(FATAL) or CHECK()}\par
225 {\cf20 // as Google Mock might be used to mock the log sink itself.  We}\par
226 {\cf20 // inline this function to prevent it from showing up in the stack}\par
227 {\cf20 // trace.}\par
228 {\cf17 inline} {\cf18 void} Assert({\cf18 bool} condition, {\cf17 const} {\cf18 char}* file, {\cf18 int} line,\par
229                    {\cf17 const} std::string& msg) \{\par
230   {\cf19 if} (!condition) \{\par
231     GetFailureReporter()->ReportFailure(FailureReporterInterface::kFatal, file,\par
232                                         line, msg);\par
233   \}\par
234 \}\par
235 {\cf17 inline} {\cf18 void} Assert({\cf18 bool} condition, {\cf17 const} {\cf18 char}* file, {\cf18 int} line) \{\par
236   Assert(condition, file, line, {\cf22 "Assertion failed."});\par
237 \}\par
238 \par
239 {\cf20 // Verifies that condition is true; generates a non-fatal failure if}\par
240 {\cf20 // condition is false.}\par
241 {\cf17 inline} {\cf18 void} Expect({\cf18 bool} condition, {\cf17 const} {\cf18 char}* file, {\cf18 int} line,\par
242                    {\cf17 const} std::string& msg) \{\par
243   {\cf19 if} (!condition) \{\par
244     GetFailureReporter()->ReportFailure(FailureReporterInterface::kNonfatal,\par
245                                         file, line, msg);\par
246   \}\par
247 \}\par
248 {\cf17 inline} {\cf18 void} Expect({\cf18 bool} condition, {\cf17 const} {\cf18 char}* file, {\cf18 int} line) \{\par
249   Expect(condition, file, line, {\cf22 "Expectation failed."});\par
250 \}\par
251 \par
252 {\cf20 // Severity level of a log.}\par
253 {\cf17 enum} LogSeverity \{ kInfo = 0, kWarning = 1 \};\par
254 \par
255 {\cf20 // Valid values for the --gmock_verbose flag.}\par
256 \par
257 {\cf20 // All logs (informational and warnings) are printed.}\par
258 {\cf17 const} {\cf18 char} kInfoVerbosity[] = {\cf22 "info"};\par
259 {\cf20 // Only warnings are printed.}\par
260 {\cf17 const} {\cf18 char} kWarningVerbosity[] = {\cf22 "warning"};\par
261 {\cf20 // No logs are printed.}\par
262 {\cf17 const} {\cf18 char} kErrorVerbosity[] = {\cf22 "error"};\par
263 \par
264 {\cf20 // Returns true if and only if a log with the given severity is visible}\par
265 {\cf20 // according to the --gmock_verbose flag.}\par
266 GTEST_API_ {\cf18 bool} LogIsVisible(LogSeverity severity);\par
267 \par
268 {\cf20 // Prints the given message to stdout if and only if 'severity' >= the level}\par
269 {\cf20 // specified by the --gmock_verbose flag.  If stack_frames_to_skip >=}\par
270 {\cf20 // 0, also prints the stack trace excluding the top}\par
271 {\cf20 // stack_frames_to_skip frames.  In opt mode, any positive}\par
272 {\cf20 // stack_frames_to_skip is treated as 0, since we don't know which}\par
273 {\cf20 // function calls will be inlined by the compiler and need to be}\par
274 {\cf20 // conservative.}\par
275 GTEST_API_ {\cf18 void} Log(LogSeverity severity, {\cf17 const} std::string& message,\par
276                     {\cf18 int} stack_frames_to_skip);\par
277 \par
278 {\cf20 // A marker class that is used to resolve parameterless expectations to the}\par
279 {\cf20 // correct overload. This must not be instantiable, to prevent client code from}\par
280 {\cf20 // accidentally resolving to the overload; for example:}\par
281 {\cf20 //}\par
282 {\cf20 //    ON_CALL(mock, Method(\{\}, nullptr))...}\par
283 {\cf20 //}\par
284 {\cf17 class }WithoutMatchers \{\par
285  {\cf17 private}:\par
286   WithoutMatchers() \{\}\par
287   {\cf17 friend} GTEST_API_ WithoutMatchers GetWithoutMatchers();\par
288 \};\par
289 \par
290 {\cf20 // Internal use only: access the singleton instance of WithoutMatchers.}\par
291 GTEST_API_ WithoutMatchers GetWithoutMatchers();\par
292 \par
293 {\cf20 // Invalid<T>() is usable as an expression of type T, but will terminate}\par
294 {\cf20 // the program with an assertion failure if actually run.  This is useful}\par
295 {\cf20 // when a value of type T is needed for compilation, but the statement}\par
296 {\cf20 // will not really be executed (or we don't care if the statement}\par
297 {\cf20 // crashes).}\par
298 {\cf17 template} <{\cf17 typename} T>\par
299 {\cf17 inline} T Invalid() \{\par
300   Assert({\cf17 false}, {\cf22 ""}, -1, {\cf22 "Internal error: attempt to return invalid value"});\par
301 {\cf21 #if defined(__GNUC__) || defined(__clang__)}\par
302   __builtin_unreachable();\par
303 {\cf21 #elif defined(_MSC_VER)}\par
304   __assume(0);\par
305 {\cf21 #else}\par
306   {\cf19 return} Invalid<T>();\par
307 {\cf21 #endif}\par
308 \}\par
309 \par
310 {\cf20 // Given a raw type (i.e. having no top-level reference or const}\par
311 {\cf20 // modifier) RawContainer that's either an STL-style container or a}\par
312 {\cf20 // native array, class StlContainerView<RawContainer> has the}\par
313 {\cf20 // following members:}\par
314 {\cf20 //}\par
315 {\cf20 //   - type is a type that provides an STL-style container view to}\par
316 {\cf20 //     (i.e. implements the STL container concept for) RawContainer;}\par
317 {\cf20 //   - const_reference is a type that provides a reference to a const}\par
318 {\cf20 //     RawContainer;}\par
319 {\cf20 //   - ConstReference(raw_container) returns a const reference to an STL-style}\par
320 {\cf20 //     container view to raw_container, which is a RawContainer.}\par
321 {\cf20 //   - Copy(raw_container) returns an STL-style container view of a}\par
322 {\cf20 //     copy of raw_container, which is a RawContainer.}\par
323 {\cf20 //}\par
324 {\cf20 // This generic version is used when RawContainer itself is already an}\par
325 {\cf20 // STL-style container.}\par
326 {\cf17 template} <{\cf17 class} RawContainer>\par
327 {\cf17 class }StlContainerView \{\par
328  {\cf17 public}:\par
329   {\cf17 typedef} RawContainer type;\par
330   {\cf17 typedef} {\cf17 const} type& const_reference;\par
331 \par
332   {\cf17 static} const_reference ConstReference({\cf17 const} RawContainer& container) \{\par
333     {\cf17 static_assert}(!std::is_const<RawContainer>::value,\par
334                   {\cf22 "RawContainer type must not be const"});\par
335     {\cf19 return} container;\par
336   \}\par
337   {\cf17 static} type Copy({\cf17 const} RawContainer& container) \{ {\cf19 return} container; \}\par
338 \};\par
339 \par
340 {\cf20 // This specialization is used when RawContainer is a native array type.}\par
341 {\cf17 template} <{\cf17 typename} Element, {\cf18 size_t} N>\par
342 {\cf17 class }StlContainerView<Element[N]> \{\par
343  {\cf17 public}:\par
344   {\cf17 typedef} {\cf17 typename} std::remove_const<Element>::type RawElement;\par
345   {\cf17 typedef} internal::NativeArray<RawElement> type;\par
346   {\cf20 // NativeArray<T> can represent a native array either by value or by}\par
347   {\cf20 // reference (selected by a constructor argument), so 'const type'}\par
348   {\cf20 // can be used to reference a const native array.  We cannot}\par
349   {\cf20 // 'typedef const type& const_reference' here, as that would mean}\par
350   {\cf20 // ConstReference() has to return a reference to a local variable.}\par
351   {\cf17 typedef} {\cf17 const} type const_reference;\par
352 \par
353   {\cf17 static} const_reference ConstReference({\cf17 const} Element (&array)[N]) \{\par
354     {\cf17 static_assert}(std::is_same<Element, RawElement>::value,\par
355                   {\cf22 "Element type must not be const"});\par
356     {\cf19 return} type(array, N, RelationToSourceReference());\par
357   \}\par
358   {\cf17 static} type Copy({\cf17 const} Element (&array)[N]) \{\par
359     {\cf19 return} type(array, N, RelationToSourceCopy());\par
360   \}\par
361 \};\par
362 \par
363 {\cf20 // This specialization is used when RawContainer is a native array}\par
364 {\cf20 // represented as a (pointer, size) tuple.}\par
365 {\cf17 template} <{\cf17 typename} ElementPo{\cf18 int}er, {\cf17 typename} Size>\par
366 {\cf17 class }StlContainerView< ::std::tuple<ElementPointer, Size> > \{\par
367  {\cf17 public}:\par
368   {\cf17 typedef} {\cf17 typename} std::remove_const<\par
369       {\cf17 typename} std::pointer_traits<ElementPointer>::element_type>::type\par
370       RawElement;\par
371   {\cf17 typedef} internal::NativeArray<RawElement> type;\par
372   {\cf17 typedef} {\cf17 const} type const_reference;\par
373 \par
374   {\cf17 static} const_reference ConstReference(\par
375       const ::std::tuple<ElementPointer, Size>& array) \{\par
376     {\cf19 return} type(std::get<0>(array), std::get<1>(array),\par
377                 RelationToSourceReference());\par
378   \}\par
379   {\cf17 static} type Copy(const ::std::tuple<ElementPointer, Size>& array) \{\par
380     {\cf19 return} type(std::get<0>(array), std::get<1>(array), RelationToSourceCopy());\par
381   \}\par
382 \};\par
383 \par
384 {\cf20 // The following specialization prevents the user from instantiating}\par
385 {\cf20 // StlContainer with a reference type.}\par
386 {\cf17 template} <{\cf17 typename} T>\par
387 {\cf17 class }StlContainerView<T&>;\par
388 \par
389 {\cf20 // A type transform to remove constness from the first part of a pair.}\par
390 {\cf20 // Pairs like that are used as the value_type of associative containers,}\par
391 {\cf20 // and this transform produces a similar but assignable pair.}\par
392 {\cf17 template} <{\cf17 typename} T>\par
393 {\cf17 struct }RemoveConstFromKey \{\par
394   {\cf17 typedef} T type;\par
395 \};\par
396 \par
397 {\cf20 // Partially specialized to remove constness from std::pair<const K, V>.}\par
398 {\cf17 template} <{\cf17 typename} K, {\cf17 typename} V>\par
399 {\cf17 struct }RemoveConstFromKey<std::pair<const K, V> > \{\par
400   {\cf17 typedef} std::pair<K, V> type;\par
401 \};\par
402 \par
403 {\cf20 // Emit an assertion failure due to incorrect DoDefault() usage. Out-of-lined to}\par
404 {\cf20 // reduce code size.}\par
405 GTEST_API_ {\cf18 void} IllegalDoDefault({\cf17 const} {\cf18 char}* file, {\cf18 int} line);\par
406 \par
407 {\cf17 template} <{\cf17 typename} F, {\cf17 typename} Tuple, {\cf18 size_t}... Idx>\par
408 {\cf17 auto} ApplyImpl(F&& f, Tuple&& args, IndexSequence<Idx...>)\par
409     -> {\cf17 decltype}(std::forward<F>(f)(\par
410         std::get<Idx>(std::forward<Tuple>(args))...)) \{\par
411   {\cf19 return} std::forward<F>(f)(std::get<Idx>(std::forward<Tuple>(args))...);\par
412 \}\par
413 \par
414 {\cf20 // Apply the function to a tuple of arguments.}\par
415 {\cf17 template} <{\cf17 typename} F, {\cf17 typename} Tuple>\par
416 {\cf17 auto} Apply(F&& f, Tuple&& args) -> {\cf17 decltype}(ApplyImpl(\par
417     std::forward<F>(f), std::forward<Tuple>(args),\par
418     MakeIndexSequence<std::tuple_size<\par
419         {\cf17 typename} std::remove_reference<Tuple>::type>::value>())) \{\par
420   {\cf19 return} ApplyImpl(std::forward<F>(f), std::forward<Tuple>(args),\par
421                    MakeIndexSequence<std::tuple_size<\par
422                        {\cf17 typename} std::remove_reference<Tuple>::type>::value>());\par
423 \}\par
424 \par
425 {\cf20 // Template struct Function<F>, where F must be a function type, contains}\par
426 {\cf20 // the following typedefs:}\par
427 {\cf20 //}\par
428 {\cf20 //   Result:               the function's return type.}\par
429 {\cf20 //   Arg<N>:               the type of the N-th argument, where N starts with 0.}\par
430 {\cf20 //   ArgumentTuple:        the tuple type consisting of all parameters of F.}\par
431 {\cf20 //   ArgumentMatcherTuple: the tuple type consisting of Matchers for all}\par
432 {\cf20 //                         parameters of F.}\par
433 {\cf20 //   MakeResultVoid:       the function type obtained by substituting void}\par
434 {\cf20 //                         for the return type of F.}\par
435 {\cf20 //   MakeResultIgnoredValue:}\par
436 {\cf20 //                         the function type obtained by substituting Something}\par
437 {\cf20 //                         for the return type of F.}\par
438 {\cf17 template} <{\cf17 typename} T>\par
439 {\cf17 struct }Function;\par
440 \par
441 {\cf17 template} <{\cf17 typename} R, {\cf17 typename}... Args>\par
442 {\cf17 struct }Function<R(Args...)> \{\par
443   {\cf17 using }Result = R;\par
444   {\cf17 static} {\cf17 constexpr} {\cf18 size_t} ArgumentCount = {\cf17 sizeof}...(Args);\par
445   {\cf17 template} <{\cf18 size_t} I>\par
446   {\cf17 using }Arg = ElemFromList<I, Args...>;\par
447   {\cf17 using }ArgumentTuple = std::tuple<Args...>;\par
448   {\cf17 using }ArgumentMatcherTuple = std::tuple<Matcher<Args>...>;\par
449   {\cf17 using }MakeResultVoid = void(Args...);\par
450   {\cf17 using }MakeResultIgnoredValue = IgnoredValue(Args...);\par
451 \};\par
452 \par
453 {\cf17 template} <{\cf17 typename} R, {\cf17 typename}... Args>\par
454 {\cf17 constexpr} {\cf18 size_t} Function<R(Args...)>::ArgumentCount;\par
455 \par
456 {\cf18 bool} Base64Unescape({\cf17 const} std::string& encoded, std::string* decoded);\par
457 \par
458 {\cf21 #ifdef _MSC_VER}\par
459 {\cf21 #pragma warning(pop)}\par
460 {\cf21 #endif}\par
461 \par
462 \}  {\cf20 // namespace internal}\par
463 \}  {\cf20 // namespace testing}\par
464 \par
465 {\cf21 #endif  }{\cf20 // GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_INTERNAL_UTILS_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gmock-pp.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googlemock/include/gmock/internal/gmock-pp.h}
{\xe \v lib/googletest-main/googlemock/include/gmock/internal/gmock-pp.h}
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #ifndef GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_PP_H_}\par
2 {\cf21 #define GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_PP_H_}\par
3 \par
4 {\cf20 // Expands and concatenates the arguments. Constructed macros reevaluate.}\par
5 {\cf21 #define GMOCK_PP_CAT(_1, _2) GMOCK_PP_INTERNAL_CAT(_1, _2)}\par
6 \par
7 {\cf20 // Expands and stringifies the only argument.}\par
8 {\cf21 #define GMOCK_PP_STRINGIZE(...) GMOCK_PP_INTERNAL_STRINGIZE(__VA_ARGS__)}\par
9 \par
10 {\cf20 // Returns empty. Given a variadic number of arguments.}\par
11 {\cf21 #define GMOCK_PP_EMPTY(...)}\par
12 \par
13 {\cf20 // Returns a comma. Given a variadic number of arguments.}\par
14 {\cf21 #define GMOCK_PP_COMMA(...) ,}\par
15 \par
16 {\cf20 // Returns the only argument.}\par
17 {\cf21 #define GMOCK_PP_IDENTITY(_1) _1}\par
18 \par
19 {\cf20 // Evaluates to the number of arguments after expansion.}\par
20 {\cf20 //}\par
21 {\cf20 //   #define PAIR x, y}\par
22 {\cf20 //}\par
23 {\cf20 //   GMOCK_PP_NARG() => 1}\par
24 {\cf20 //   GMOCK_PP_NARG(x) => 1}\par
25 {\cf20 //   GMOCK_PP_NARG(x, y) => 2}\par
26 {\cf20 //   GMOCK_PP_NARG(PAIR) => 2}\par
27 {\cf20 //}\par
28 {\cf20 // Requires: the number of arguments after expansion is at most 15.}\par
29 {\cf21 #define GMOCK_PP_NARG(...) \\}\par
30 {\cf21   GMOCK_PP_INTERNAL_16TH(  \\}\par
31 {\cf21       (__VA_ARGS__, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0))}\par
32 \par
33 {\cf20 // Returns 1 if the expansion of arguments has an unprotected comma. Otherwise}\par
34 {\cf20 // returns 0. Requires no more than 15 unprotected commas.}\par
35 {\cf21 #define GMOCK_PP_HAS_COMMA(...) \\}\par
36 {\cf21   GMOCK_PP_INTERNAL_16TH(       \\}\par
37 {\cf21       (__VA_ARGS__, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0))}\par
38 \par
39 {\cf20 // Returns the first argument.}\par
40 {\cf21 #define GMOCK_PP_HEAD(...) GMOCK_PP_INTERNAL_HEAD((__VA_ARGS__, unusedArg))}\par
41 \par
42 {\cf20 // Returns the tail. A variadic list of all arguments minus the first. Requires}\par
43 {\cf20 // at least one argument.}\par
44 {\cf21 #define GMOCK_PP_TAIL(...) GMOCK_PP_INTERNAL_TAIL((__VA_ARGS__))}\par
45 \par
46 {\cf20 // Calls CAT(_Macro, NARG(__VA_ARGS__))(__VA_ARGS__)}\par
47 {\cf21 #define GMOCK_PP_VARIADIC_CALL(_Macro, ...) \\}\par
48 {\cf21   GMOCK_PP_IDENTITY(                        \\}\par
49 {\cf21       GMOCK_PP_CAT(_Macro, GMOCK_PP_NARG(__VA_ARGS__))(__VA_ARGS__))}\par
50 \par
51 {\cf20 // If the arguments after expansion have no tokens, evaluates to `1`. Otherwise}\par
52 {\cf20 // evaluates to `0`.}\par
53 {\cf20 //}\par
54 {\cf20 // Requires: * the number of arguments after expansion is at most 15.}\par
55 {\cf20 //           * If the argument is a macro, it must be able to be called with one}\par
56 {\cf20 //             argument.}\par
57 {\cf20 //}\par
58 {\cf20 // Implementation details:}\par
59 {\cf20 //}\par
60 {\cf20 // There is one case when it generates a compile error: if the argument is macro}\par
61 {\cf20 // that cannot be called with one argument.}\par
62 {\cf20 //}\par
63 {\cf20 //   #define M(a, b)  // it doesn't matter what it expands to}\par
64 {\cf20 //}\par
65 {\cf20 //   // Expected: expands to `0`.}\par
66 {\cf20 //   // Actual: compile error.}\par
67 {\cf20 //   GMOCK_PP_IS_EMPTY(M)}\par
68 {\cf20 //}\par
69 {\cf20 // There are 4 cases tested:}\par
70 {\cf20 //}\par
71 {\cf20 // * __VA_ARGS__ possible expansion has no unparen'd commas. Expected 0.}\par
72 {\cf20 // * __VA_ARGS__ possible expansion is not enclosed in parenthesis. Expected 0.}\par
73 {\cf20 // * __VA_ARGS__ possible expansion is not a macro that ()-evaluates to a comma.}\par
74 {\cf20 //   Expected 0}\par
75 {\cf20 // * __VA_ARGS__ is empty, or has unparen'd commas, or is enclosed in}\par
76 {\cf20 //   parenthesis, or is a macro that ()-evaluates to comma. Expected 1.}\par
77 {\cf20 //}\par
78 {\cf20 // We trigger detection on '0001', i.e. on empty.}\par
79 {\cf21 #define GMOCK_PP_IS_EMPTY(...)                                               \\}\par
80 {\cf21   GMOCK_PP_INTERNAL_IS_EMPTY(GMOCK_PP_HAS_COMMA(__VA_ARGS__),                \\}\par
81 {\cf21                              GMOCK_PP_HAS_COMMA(GMOCK_PP_COMMA __VA_ARGS__), \\}\par
82 {\cf21                              GMOCK_PP_HAS_COMMA(__VA_ARGS__()),              \\}\par
83 {\cf21                              GMOCK_PP_HAS_COMMA(GMOCK_PP_COMMA __VA_ARGS__()))}\par
84 \par
85 {\cf20 // Evaluates to _Then if _Cond is 1 and _Else if _Cond is 0.}\par
86 {\cf21 #define GMOCK_PP_IF(_Cond, _Then, _Else) \\}\par
87 {\cf21   GMOCK_PP_CAT(GMOCK_PP_INTERNAL_IF_, _Cond)(_Then, _Else)}\par
88 \par
89 {\cf20 // Similar to GMOCK_PP_IF but takes _Then and _Else in parentheses.}\par
90 {\cf20 //}\par
91 {\cf20 // GMOCK_PP_GENERIC_IF(1, (a, b, c), (d, e, f)) => a, b, c}\par
92 {\cf20 // GMOCK_PP_GENERIC_IF(0, (a, b, c), (d, e, f)) => d, e, f}\par
93 {\cf20 //}\par
94 {\cf21 #define GMOCK_PP_GENERIC_IF(_Cond, _Then, _Else) \\}\par
95 {\cf21   GMOCK_PP_REMOVE_PARENS(GMOCK_PP_IF(_Cond, _Then, _Else))}\par
96 \par
97 {\cf20 // Evaluates to the number of arguments after expansion. Identifies 'empty' as}\par
98 {\cf20 // 0.}\par
99 {\cf20 //}\par
100 {\cf20 //   #define PAIR x, y}\par
101 {\cf20 //}\par
102 {\cf20 //   GMOCK_PP_NARG0() => 0}\par
103 {\cf20 //   GMOCK_PP_NARG0(x) => 1}\par
104 {\cf20 //   GMOCK_PP_NARG0(x, y) => 2}\par
105 {\cf20 //   GMOCK_PP_NARG0(PAIR) => 2}\par
106 {\cf20 //}\par
107 {\cf20 // Requires: * the number of arguments after expansion is at most 15.}\par
108 {\cf20 //           * If the argument is a macro, it must be able to be called with one}\par
109 {\cf20 //             argument.}\par
110 {\cf21 #define GMOCK_PP_NARG0(...) \\}\par
111 {\cf21   GMOCK_PP_IF(GMOCK_PP_IS_EMPTY(__VA_ARGS__), 0, GMOCK_PP_NARG(__VA_ARGS__))}\par
112 \par
113 {\cf20 // Expands to 1 if the first argument starts with something in parentheses,}\par
114 {\cf20 // otherwise to 0.}\par
115 {\cf21 #define GMOCK_PP_IS_BEGIN_PARENS(...)                              \\}\par
116 {\cf21   GMOCK_PP_HEAD(GMOCK_PP_CAT(GMOCK_PP_INTERNAL_IBP_IS_VARIADIC_R_, \\}\par
117 {\cf21                              GMOCK_PP_INTERNAL_IBP_IS_VARIADIC_C __VA_ARGS__))}\par
118 \par
119 {\cf20 // Expands to 1 is there is only one argument and it is enclosed in parentheses.}\par
120 {\cf21 #define GMOCK_PP_IS_ENCLOSED_PARENS(...)             \\}\par
121 {\cf21   GMOCK_PP_IF(GMOCK_PP_IS_BEGIN_PARENS(__VA_ARGS__), \\}\par
122 {\cf21               GMOCK_PP_IS_EMPTY(GMOCK_PP_EMPTY __VA_ARGS__), 0)}\par
123 \par
124 {\cf20 // Remove the parens, requires GMOCK_PP_IS_ENCLOSED_PARENS(args) => 1.}\par
125 {\cf21 #define GMOCK_PP_REMOVE_PARENS(...) GMOCK_PP_INTERNAL_REMOVE_PARENS __VA_ARGS__}\par
126 \par
127 {\cf20 // Expands to _Macro(0, _Data, e1) _Macro(1, _Data, e2) ... _Macro(K -1, _Data,}\par
128 {\cf20 // eK) as many of GMOCK_INTERNAL_NARG0 _Tuple.}\par
129 {\cf20 // Requires: * |_Macro| can be called with 3 arguments.}\par
130 {\cf20 //           * |_Tuple| expansion has no more than 15 elements.}\par
131 {\cf21 #define GMOCK_PP_FOR_EACH(_Macro, _Data, _Tuple)                        \\}\par
132 {\cf21   GMOCK_PP_CAT(GMOCK_PP_INTERNAL_FOR_EACH_IMPL_, GMOCK_PP_NARG0 _Tuple) \\}\par
133 {\cf21   (0, _Macro, _Data, _Tuple)}\par
134 \par
135 {\cf20 // Expands to _Macro(0, _Data, ) _Macro(1, _Data, ) ... _Macro(K - 1, _Data, )}\par
136 {\cf20 // Empty if _K = 0.}\par
137 {\cf20 // Requires: * |_Macro| can be called with 3 arguments.}\par
138 {\cf20 //           * |_K| literal between 0 and 15}\par
139 {\cf21 #define GMOCK_PP_REPEAT(_Macro, _Data, _N)           \\}\par
140 {\cf21   GMOCK_PP_CAT(GMOCK_PP_INTERNAL_FOR_EACH_IMPL_, _N) \\}\par
141 {\cf21   (0, _Macro, _Data, GMOCK_PP_INTENRAL_EMPTY_TUPLE)}\par
142 \par
143 {\cf20 // Increments the argument, requires the argument to be between 0 and 15.}\par
144 {\cf21 #define GMOCK_PP_INC(_i) GMOCK_PP_CAT(GMOCK_PP_INTERNAL_INC_, _i)}\par
145 \par
146 {\cf20 // Returns comma if _i != 0. Requires _i to be between 0 and 15.}\par
147 {\cf21 #define GMOCK_PP_COMMA_IF(_i) GMOCK_PP_CAT(GMOCK_PP_INTERNAL_COMMA_IF_, _i)}\par
148 \par
149 {\cf20 // Internal details follow. Do not use any of these symbols outside of this}\par
150 {\cf20 // file or we will break your code.}\par
151 {\cf21 #define GMOCK_PP_INTENRAL_EMPTY_TUPLE (, , , , , , , , , , , , , , , )}\par
152 {\cf21 #define GMOCK_PP_INTERNAL_CAT(_1, _2) _1##_2}\par
153 {\cf21 #define GMOCK_PP_INTERNAL_STRINGIZE(...) #__VA_ARGS__}\par
154 {\cf21 #define GMOCK_PP_INTERNAL_CAT_5(_1, _2, _3, _4, _5) _1##_2##_3##_4##_5}\par
155 {\cf21 #define GMOCK_PP_INTERNAL_IS_EMPTY(_1, _2, _3, _4)                             \\}\par
156 {\cf21   GMOCK_PP_HAS_COMMA(GMOCK_PP_INTERNAL_CAT_5(GMOCK_PP_INTERNAL_IS_EMPTY_CASE_, \\}\par
157 {\cf21                                              _1, _2, _3, _4))}\par
158 {\cf21 #define GMOCK_PP_INTERNAL_IS_EMPTY_CASE_0001 ,}\par
159 {\cf21 #define GMOCK_PP_INTERNAL_IF_1(_Then, _Else) _Then}\par
160 {\cf21 #define GMOCK_PP_INTERNAL_IF_0(_Then, _Else) _Else}\par
161 \par
162 {\cf20 // Because of MSVC treating a token with a comma in it as a single token when}\par
163 {\cf20 // passed to another macro, we need to force it to evaluate it as multiple}\par
164 {\cf20 // tokens. We do that by using a "IDENTITY(MACRO PARENTHESIZED_ARGS)" macro. We}\par
165 {\cf20 // define one per possible macro that relies on this behavior. Note "_Args" must}\par
166 {\cf20 // be parenthesized.}\par
167 {\cf21 #define GMOCK_PP_INTERNAL_INTERNAL_16TH(_1, _2, _3, _4, _5, _6, _7, _8, _9, \\}\par
168 {\cf21                                         _10, _11, _12, _13, _14, _15, _16,  \\}\par
169 {\cf21                                         ...)                                \\}\par
170 {\cf21   _16}\par
171 {\cf21 #define GMOCK_PP_INTERNAL_16TH(_Args) \\}\par
172 {\cf21   GMOCK_PP_IDENTITY(GMOCK_PP_INTERNAL_INTERNAL_16TH _Args)}\par
173 {\cf21 #define GMOCK_PP_INTERNAL_INTERNAL_HEAD(_1, ...) _1}\par
174 {\cf21 #define GMOCK_PP_INTERNAL_HEAD(_Args) \\}\par
175 {\cf21   GMOCK_PP_IDENTITY(GMOCK_PP_INTERNAL_INTERNAL_HEAD _Args)}\par
176 {\cf21 #define GMOCK_PP_INTERNAL_INTERNAL_TAIL(_1, ...) __VA_ARGS__}\par
177 {\cf21 #define GMOCK_PP_INTERNAL_TAIL(_Args) \\}\par
178 {\cf21   GMOCK_PP_IDENTITY(GMOCK_PP_INTERNAL_INTERNAL_TAIL _Args)}\par
179 \par
180 {\cf21 #define GMOCK_PP_INTERNAL_IBP_IS_VARIADIC_C(...) 1 _}\par
181 {\cf21 #define GMOCK_PP_INTERNAL_IBP_IS_VARIADIC_R_1 1,}\par
182 {\cf21 #define GMOCK_PP_INTERNAL_IBP_IS_VARIADIC_R_GMOCK_PP_INTERNAL_IBP_IS_VARIADIC_C \\}\par
183 {\cf21   0,}\par
184 {\cf21 #define GMOCK_PP_INTERNAL_REMOVE_PARENS(...) __VA_ARGS__}\par
185 {\cf21 #define GMOCK_PP_INTERNAL_INC_0 1}\par
186 {\cf21 #define GMOCK_PP_INTERNAL_INC_1 2}\par
187 {\cf21 #define GMOCK_PP_INTERNAL_INC_2 3}\par
188 {\cf21 #define GMOCK_PP_INTERNAL_INC_3 4}\par
189 {\cf21 #define GMOCK_PP_INTERNAL_INC_4 5}\par
190 {\cf21 #define GMOCK_PP_INTERNAL_INC_5 6}\par
191 {\cf21 #define GMOCK_PP_INTERNAL_INC_6 7}\par
192 {\cf21 #define GMOCK_PP_INTERNAL_INC_7 8}\par
193 {\cf21 #define GMOCK_PP_INTERNAL_INC_8 9}\par
194 {\cf21 #define GMOCK_PP_INTERNAL_INC_9 10}\par
195 {\cf21 #define GMOCK_PP_INTERNAL_INC_10 11}\par
196 {\cf21 #define GMOCK_PP_INTERNAL_INC_11 12}\par
197 {\cf21 #define GMOCK_PP_INTERNAL_INC_12 13}\par
198 {\cf21 #define GMOCK_PP_INTERNAL_INC_13 14}\par
199 {\cf21 #define GMOCK_PP_INTERNAL_INC_14 15}\par
200 {\cf21 #define GMOCK_PP_INTERNAL_INC_15 16}\par
201 {\cf21 #define GMOCK_PP_INTERNAL_COMMA_IF_0}\par
202 {\cf21 #define GMOCK_PP_INTERNAL_COMMA_IF_1 ,}\par
203 {\cf21 #define GMOCK_PP_INTERNAL_COMMA_IF_2 ,}\par
204 {\cf21 #define GMOCK_PP_INTERNAL_COMMA_IF_3 ,}\par
205 {\cf21 #define GMOCK_PP_INTERNAL_COMMA_IF_4 ,}\par
206 {\cf21 #define GMOCK_PP_INTERNAL_COMMA_IF_5 ,}\par
207 {\cf21 #define GMOCK_PP_INTERNAL_COMMA_IF_6 ,}\par
208 {\cf21 #define GMOCK_PP_INTERNAL_COMMA_IF_7 ,}\par
209 {\cf21 #define GMOCK_PP_INTERNAL_COMMA_IF_8 ,}\par
210 {\cf21 #define GMOCK_PP_INTERNAL_COMMA_IF_9 ,}\par
211 {\cf21 #define GMOCK_PP_INTERNAL_COMMA_IF_10 ,}\par
212 {\cf21 #define GMOCK_PP_INTERNAL_COMMA_IF_11 ,}\par
213 {\cf21 #define GMOCK_PP_INTERNAL_COMMA_IF_12 ,}\par
214 {\cf21 #define GMOCK_PP_INTERNAL_COMMA_IF_13 ,}\par
215 {\cf21 #define GMOCK_PP_INTERNAL_COMMA_IF_14 ,}\par
216 {\cf21 #define GMOCK_PP_INTERNAL_COMMA_IF_15 ,}\par
217 {\cf21 #define GMOCK_PP_INTERNAL_CALL_MACRO(_Macro, _i, _Data, _element) \\}\par
218 {\cf21   _Macro(_i, _Data, _element)}\par
219 {\cf21 #define GMOCK_PP_INTERNAL_FOR_EACH_IMPL_0(_i, _Macro, _Data, _Tuple)}\par
220 {\cf21 #define GMOCK_PP_INTERNAL_FOR_EACH_IMPL_1(_i, _Macro, _Data, _Tuple) \\}\par
221 {\cf21   GMOCK_PP_INTERNAL_CALL_MACRO(_Macro, _i, _Data, GMOCK_PP_HEAD _Tuple)}\par
222 {\cf21 #define GMOCK_PP_INTERNAL_FOR_EACH_IMPL_2(_i, _Macro, _Data, _Tuple)    \\}\par
223 {\cf21   GMOCK_PP_INTERNAL_CALL_MACRO(_Macro, _i, _Data, GMOCK_PP_HEAD _Tuple) \\}\par
224 {\cf21   GMOCK_PP_INTERNAL_FOR_EACH_IMPL_1(GMOCK_PP_INC(_i), _Macro, _Data,    \\}\par
225 {\cf21                                     (GMOCK_PP_TAIL _Tuple))}\par
226 {\cf21 #define GMOCK_PP_INTERNAL_FOR_EACH_IMPL_3(_i, _Macro, _Data, _Tuple)    \\}\par
227 {\cf21   GMOCK_PP_INTERNAL_CALL_MACRO(_Macro, _i, _Data, GMOCK_PP_HEAD _Tuple) \\}\par
228 {\cf21   GMOCK_PP_INTERNAL_FOR_EACH_IMPL_2(GMOCK_PP_INC(_i), _Macro, _Data,    \\}\par
229 {\cf21                                     (GMOCK_PP_TAIL _Tuple))}\par
230 {\cf21 #define GMOCK_PP_INTERNAL_FOR_EACH_IMPL_4(_i, _Macro, _Data, _Tuple)    \\}\par
231 {\cf21   GMOCK_PP_INTERNAL_CALL_MACRO(_Macro, _i, _Data, GMOCK_PP_HEAD _Tuple) \\}\par
232 {\cf21   GMOCK_PP_INTERNAL_FOR_EACH_IMPL_3(GMOCK_PP_INC(_i), _Macro, _Data,    \\}\par
233 {\cf21                                     (GMOCK_PP_TAIL _Tuple))}\par
234 {\cf21 #define GMOCK_PP_INTERNAL_FOR_EACH_IMPL_5(_i, _Macro, _Data, _Tuple)    \\}\par
235 {\cf21   GMOCK_PP_INTERNAL_CALL_MACRO(_Macro, _i, _Data, GMOCK_PP_HEAD _Tuple) \\}\par
236 {\cf21   GMOCK_PP_INTERNAL_FOR_EACH_IMPL_4(GMOCK_PP_INC(_i), _Macro, _Data,    \\}\par
237 {\cf21                                     (GMOCK_PP_TAIL _Tuple))}\par
238 {\cf21 #define GMOCK_PP_INTERNAL_FOR_EACH_IMPL_6(_i, _Macro, _Data, _Tuple)    \\}\par
239 {\cf21   GMOCK_PP_INTERNAL_CALL_MACRO(_Macro, _i, _Data, GMOCK_PP_HEAD _Tuple) \\}\par
240 {\cf21   GMOCK_PP_INTERNAL_FOR_EACH_IMPL_5(GMOCK_PP_INC(_i), _Macro, _Data,    \\}\par
241 {\cf21                                     (GMOCK_PP_TAIL _Tuple))}\par
242 {\cf21 #define GMOCK_PP_INTERNAL_FOR_EACH_IMPL_7(_i, _Macro, _Data, _Tuple)    \\}\par
243 {\cf21   GMOCK_PP_INTERNAL_CALL_MACRO(_Macro, _i, _Data, GMOCK_PP_HEAD _Tuple) \\}\par
244 {\cf21   GMOCK_PP_INTERNAL_FOR_EACH_IMPL_6(GMOCK_PP_INC(_i), _Macro, _Data,    \\}\par
245 {\cf21                                     (GMOCK_PP_TAIL _Tuple))}\par
246 {\cf21 #define GMOCK_PP_INTERNAL_FOR_EACH_IMPL_8(_i, _Macro, _Data, _Tuple)    \\}\par
247 {\cf21   GMOCK_PP_INTERNAL_CALL_MACRO(_Macro, _i, _Data, GMOCK_PP_HEAD _Tuple) \\}\par
248 {\cf21   GMOCK_PP_INTERNAL_FOR_EACH_IMPL_7(GMOCK_PP_INC(_i), _Macro, _Data,    \\}\par
249 {\cf21                                     (GMOCK_PP_TAIL _Tuple))}\par
250 {\cf21 #define GMOCK_PP_INTERNAL_FOR_EACH_IMPL_9(_i, _Macro, _Data, _Tuple)    \\}\par
251 {\cf21   GMOCK_PP_INTERNAL_CALL_MACRO(_Macro, _i, _Data, GMOCK_PP_HEAD _Tuple) \\}\par
252 {\cf21   GMOCK_PP_INTERNAL_FOR_EACH_IMPL_8(GMOCK_PP_INC(_i), _Macro, _Data,    \\}\par
253 {\cf21                                     (GMOCK_PP_TAIL _Tuple))}\par
254 {\cf21 #define GMOCK_PP_INTERNAL_FOR_EACH_IMPL_10(_i, _Macro, _Data, _Tuple)   \\}\par
255 {\cf21   GMOCK_PP_INTERNAL_CALL_MACRO(_Macro, _i, _Data, GMOCK_PP_HEAD _Tuple) \\}\par
256 {\cf21   GMOCK_PP_INTERNAL_FOR_EACH_IMPL_9(GMOCK_PP_INC(_i), _Macro, _Data,    \\}\par
257 {\cf21                                     (GMOCK_PP_TAIL _Tuple))}\par
258 {\cf21 #define GMOCK_PP_INTERNAL_FOR_EACH_IMPL_11(_i, _Macro, _Data, _Tuple)   \\}\par
259 {\cf21   GMOCK_PP_INTERNAL_CALL_MACRO(_Macro, _i, _Data, GMOCK_PP_HEAD _Tuple) \\}\par
260 {\cf21   GMOCK_PP_INTERNAL_FOR_EACH_IMPL_10(GMOCK_PP_INC(_i), _Macro, _Data,   \\}\par
261 {\cf21                                      (GMOCK_PP_TAIL _Tuple))}\par
262 {\cf21 #define GMOCK_PP_INTERNAL_FOR_EACH_IMPL_12(_i, _Macro, _Data, _Tuple)   \\}\par
263 {\cf21   GMOCK_PP_INTERNAL_CALL_MACRO(_Macro, _i, _Data, GMOCK_PP_HEAD _Tuple) \\}\par
264 {\cf21   GMOCK_PP_INTERNAL_FOR_EACH_IMPL_11(GMOCK_PP_INC(_i), _Macro, _Data,   \\}\par
265 {\cf21                                      (GMOCK_PP_TAIL _Tuple))}\par
266 {\cf21 #define GMOCK_PP_INTERNAL_FOR_EACH_IMPL_13(_i, _Macro, _Data, _Tuple)   \\}\par
267 {\cf21   GMOCK_PP_INTERNAL_CALL_MACRO(_Macro, _i, _Data, GMOCK_PP_HEAD _Tuple) \\}\par
268 {\cf21   GMOCK_PP_INTERNAL_FOR_EACH_IMPL_12(GMOCK_PP_INC(_i), _Macro, _Data,   \\}\par
269 {\cf21                                      (GMOCK_PP_TAIL _Tuple))}\par
270 {\cf21 #define GMOCK_PP_INTERNAL_FOR_EACH_IMPL_14(_i, _Macro, _Data, _Tuple)   \\}\par
271 {\cf21   GMOCK_PP_INTERNAL_CALL_MACRO(_Macro, _i, _Data, GMOCK_PP_HEAD _Tuple) \\}\par
272 {\cf21   GMOCK_PP_INTERNAL_FOR_EACH_IMPL_13(GMOCK_PP_INC(_i), _Macro, _Data,   \\}\par
273 {\cf21                                      (GMOCK_PP_TAIL _Tuple))}\par
274 {\cf21 #define GMOCK_PP_INTERNAL_FOR_EACH_IMPL_15(_i, _Macro, _Data, _Tuple)   \\}\par
275 {\cf21   GMOCK_PP_INTERNAL_CALL_MACRO(_Macro, _i, _Data, GMOCK_PP_HEAD _Tuple) \\}\par
276 {\cf21   GMOCK_PP_INTERNAL_FOR_EACH_IMPL_14(GMOCK_PP_INC(_i), _Macro, _Data,   \\}\par
277 {\cf21                                      (GMOCK_PP_TAIL _Tuple))}\par
278 \par
279 {\cf21 #endif  }{\cf20 // GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_PP_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gmock-matchers_test.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googlemock/test/gmock-matchers_test.h}
{\xe \v lib/googletest-main/googlemock/test/gmock-matchers_test.h}
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2007, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // Google Mock - a framework for writing C++ mock classes.}\par
31 {\cf20 //}\par
32 {\cf20 // This file tests some commonly used argument matchers.}\par
33 \par
34 {\cf21 #ifndef GOOGLEMOCK_TEST_GMOCK_MATCHERS_TEST_H_}\par
35 {\cf21 #define GOOGLEMOCK_TEST_GMOCK_MATCHERS_TEST_H_}\par
36 \par
37 {\cf21 #include <string.h>}\par
38 {\cf21 #include <time.h>}\par
39 \par
40 {\cf21 #include <array>}\par
41 {\cf21 #include <cstdint>}\par
42 {\cf21 #include <deque>}\par
43 {\cf21 #include <forward_list>}\par
44 {\cf21 #include <functional>}\par
45 {\cf21 #include <iostream>}\par
46 {\cf21 #include <iterator>}\par
47 {\cf21 #include <limits>}\par
48 {\cf21 #include <list>}\par
49 {\cf21 #include <map>}\par
50 {\cf21 #include <memory>}\par
51 {\cf21 #include <set>}\par
52 {\cf21 #include <sstream>}\par
53 {\cf21 #include <string>}\par
54 {\cf21 #include <type_traits>}\par
55 {\cf21 #include <unordered_map>}\par
56 {\cf21 #include <unordered_set>}\par
57 {\cf21 #include <utility>}\par
58 {\cf21 #include <vector>}\par
59 \par
60 {\cf21 #include "gmock/gmock-matchers.h"}\par
61 {\cf21 #include "gmock/gmock-more-matchers.h"}\par
62 {\cf21 #include "gmock/gmock.h"}\par
63 {\cf21 #include "gtest/gtest-spi.h"}\par
64 {\cf21 #include "gtest/gtest.h"}\par
65 \par
66 {\cf17 namespace }testing \{\par
67 {\cf17 namespace }gmock_matchers_test \{\par
68 \par
69 {\cf17 using }std::greater;\par
70 {\cf17 using }std::less;\par
71 {\cf17 using }std::list;\par
72 {\cf17 using }std::make_pair;\par
73 {\cf17 using }std::map;\par
74 {\cf17 using }std::multimap;\par
75 {\cf17 using }std::multiset;\par
76 {\cf17 using }std::ostream;\par
77 {\cf17 using }std::pair;\par
78 {\cf17 using }std::set;\par
79 {\cf17 using }std::stringstream;\par
80 {\cf17 using }std::vector;\par
81 {\cf17 using }testing::internal::DummyMatchResultListener;\par
82 {\cf17 using }testing::internal::ElementMatcherPair;\par
83 {\cf17 using }testing::internal::ElementMatcherPairs;\par
84 {\cf17 using }testing::internal::ElementsAreArrayMatcher;\par
85 {\cf17 using }testing::internal::ExplainMatchFailureTupleTo;\par
86 {\cf17 using }testing::internal::FloatingEqMatcher;\par
87 {\cf17 using }testing::internal::FormatMatcherDescription;\par
88 {\cf17 using }testing::internal::IsReadableTypeName;\par
89 {\cf17 using }testing::internal::MatchMatrix;\par
90 {\cf17 using }testing::internal::PredicateFormatterFromMatcher;\par
91 {\cf17 using }testing::internal::RE;\par
92 {\cf17 using }testing::internal::StreamMatchResultListener;\par
93 {\cf17 using }testing::internal::Strings;\par
94 \par
95 {\cf20 // Helper for testing container-valued matchers in mock method context. It is}\par
96 {\cf20 // important to test matchers in this context, since it requires additional type}\par
97 {\cf20 // deduction beyond what EXPECT_THAT does, thus making it more restrictive.}\par
98 {\cf17 struct }ContainerHelper \{\par
99   MOCK_METHOD1(Call, {\cf18 void}(std::vector<std::unique_ptr<int>>));\par
100 \};\par
101 \par
102 {\cf20 // For testing ExplainMatchResultTo().}\par
103 {\cf17 template} <{\cf17 typename} T>\par
104 {\cf17 struct }GtestGreaterThanMatcher \{\par
105   {\cf17 using }is_gtest_matcher = void;\par
106 \par
107   {\cf18 void} DescribeTo(ostream* os){\cf17  const }\{ *os << {\cf22 "is > "} << rhs; \}\par
108   {\cf18 void} DescribeNegationTo(ostream* os){\cf17  const }\{ *os << {\cf22 "is <= "} << rhs; \}\par
109 \par
110   {\cf18 bool} MatchAndExplain(T lhs, MatchResultListener* listener){\cf17  const }\{\par
111     {\cf19 if} (lhs > rhs) \{\par
112       *listener << {\cf22 "which is "} << (lhs - rhs) << {\cf22 " more than "} << rhs;\par
113     \} {\cf19 else} {\cf19 if} (lhs == rhs) \{\par
114       *listener << {\cf22 "which is the same as "} << rhs;\par
115     \} {\cf19 else} \{\par
116       *listener << {\cf22 "which is "} << (rhs - lhs) << {\cf22 " less than "} << rhs;\par
117     \}\par
118 \par
119     {\cf19 return} lhs > rhs;\par
120   \}\par
121 \par
122   T rhs;\par
123 \};\par
124 \par
125 {\cf17 template} <{\cf17 typename} T>\par
126 GtestGreaterThanMatcher<typename std::decay<T>::type> GtestGreaterThan(\par
127     T&& rhs) \{\par
128   {\cf19 return} \{rhs\};\par
129 \}\par
130 \par
131 {\cf20 // As the matcher above, but using the base class with virtual functions.}\par
132 {\cf17 template} <{\cf17 typename} T>\par
133 {\cf17 class }GreaterThanMatcher : {\cf17 public} MatcherInterface<T> \{\par
134  {\cf17 public}:\par
135   {\cf17 explicit} GreaterThanMatcher(T rhs) : impl_\{rhs\} \{\}\par
136 \par
137   {\cf18 void} DescribeTo(ostream* os){\cf17  const override }\{ impl_.DescribeTo(os); \}\par
138   {\cf18 void} DescribeNegationTo(ostream* os){\cf17  const override }\{\par
139     impl_.DescribeNegationTo(os);\par
140   \}\par
141 \par
142   {\cf18 bool} MatchAndExplain(T lhs, MatchResultListener* listener){\cf17  const override }\{\par
143     {\cf19 return} impl_.MatchAndExplain(lhs, listener);\par
144   \}\par
145 \par
146  {\cf17 private}:\par
147   {\cf17 const} GtestGreaterThanMatcher<T> impl_;\par
148 \};\par
149 \par
150 {\cf20 // Names and instantiates a new instance of GTestMatcherTestP.}\par
151 {\cf21 #define INSTANTIATE_GTEST_MATCHER_TEST_P(TestSuite)                         \\}\par
152 {\cf21   using TestSuite##P = GTestMatcherTestP;                                   \\}\par
153 {\cf21   INSTANTIATE_TEST_SUITE_P(MatcherInterface, TestSuite##P, Values(false));  \\}\par
154 {\cf21   INSTANTIATE_TEST_SUITE_P(GtestMatcher, TestSuite##P, Values(true))}\par
155 \par
156 {\cf17 class }GTestMatcherTestP : {\cf17 public} testing::TestWithParam<bool> \{\par
157  {\cf17 public}:\par
158   {\cf17 template} <{\cf17 typename} T>\par
159   Matcher<T> GreaterThan(T n) \{\par
160     {\cf19 if} (use_gtest_matcher_) \{\par
161       {\cf19 return} GtestGreaterThan(n);\par
162     \} {\cf19 else} \{\par
163       {\cf19 return} MakeMatcher({\cf17 new} GreaterThanMatcher<T>(n));\par
164     \}\par
165   \}\par
166   {\cf17 const} {\cf18 bool} use_gtest_matcher_ = GetParam();\par
167 \};\par
168 \par
169 {\cf20 // Returns the description of the given matcher.}\par
170 {\cf17 template} <{\cf17 typename} T>\par
171 std::string Describe({\cf17 const} Matcher<T>& m) \{\par
172   {\cf19 return} DescribeMatcher<T>(m);\par
173 \}\par
174 \par
175 {\cf20 // Returns the description of the negation of the given matcher.}\par
176 {\cf17 template} <{\cf17 typename} T>\par
177 std::string DescribeNegation({\cf17 const} Matcher<T>& m) \{\par
178   {\cf19 return} DescribeMatcher<T>(m, {\cf17 true});\par
179 \}\par
180 \par
181 {\cf20 // Returns the reason why x matches, or doesn't match, m.}\par
182 {\cf17 template} <{\cf17 typename} MatcherType, {\cf17 typename} Value>\par
183 std::string Explain({\cf17 const} MatcherType& m, {\cf17 const} Value& x) \{\par
184   StringMatchResultListener listener;\par
185   ExplainMatchResult(m, x, &listener);\par
186   {\cf19 return} listener.str();\par
187 \}\par
188 \par
189 \}  {\cf20 // namespace gmock_matchers_test}\par
190 \}  {\cf20 // namespace testing}\par
191 \par
192 {\cf21 #endif  }{\cf20 // GOOGLEMOCK_TEST_GMOCK_MATCHERS_TEST_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gmock_link_test.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googlemock/test/gmock_link_test.h}
{\xe \v lib/googletest-main/googlemock/test/gmock_link_test.h}
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2009, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // Google Mock - a framework for writing C++ mock classes.}\par
31 {\cf20 //}\par
32 {\cf20 // This file tests that:}\par
33 {\cf20 // a. A header file defining a mock class can be included in multiple}\par
34 {\cf20 //    translation units without causing a link error.}\par
35 {\cf20 // b. Actions and matchers can be instantiated with identical template}\par
36 {\cf20 //    arguments in different translation units without causing link}\par
37 {\cf20 //    errors.}\par
38 {\cf20 //    The following constructs are currently tested:}\par
39 {\cf20 //    Actions:}\par
40 {\cf20 //      Return()}\par
41 {\cf20 //      Return(value)}\par
42 {\cf20 //      ReturnNull}\par
43 {\cf20 //      ReturnRef}\par
44 {\cf20 //      Assign}\par
45 {\cf20 //      SetArgPointee}\par
46 {\cf20 //      SetArrayArgument}\par
47 {\cf20 //      SetErrnoAndReturn}\par
48 {\cf20 //      Invoke(function)}\par
49 {\cf20 //      Invoke(object, method)}\par
50 {\cf20 //      InvokeWithoutArgs(function)}\par
51 {\cf20 //      InvokeWithoutArgs(object, method)}\par
52 {\cf20 //      InvokeArgument}\par
53 {\cf20 //      WithArg}\par
54 {\cf20 //      WithArgs}\par
55 {\cf20 //      WithoutArgs}\par
56 {\cf20 //      DoAll}\par
57 {\cf20 //      DoDefault}\par
58 {\cf20 //      IgnoreResult}\par
59 {\cf20 //      Throw}\par
60 {\cf20 //      ACTION()-generated}\par
61 {\cf20 //      ACTION_P()-generated}\par
62 {\cf20 //      ACTION_P2()-generated}\par
63 {\cf20 //    Matchers:}\par
64 {\cf20 //      _}\par
65 {\cf20 //      A}\par
66 {\cf20 //      An}\par
67 {\cf20 //      Eq}\par
68 {\cf20 //      Gt, Lt, Ge, Le, Ne}\par
69 {\cf20 //      NotNull}\par
70 {\cf20 //      Ref}\par
71 {\cf20 //      TypedEq}\par
72 {\cf20 //      DoubleEq}\par
73 {\cf20 //      FloatEq}\par
74 {\cf20 //      NanSensitiveDoubleEq}\par
75 {\cf20 //      NanSensitiveFloatEq}\par
76 {\cf20 //      ContainsRegex}\par
77 {\cf20 //      MatchesRegex}\par
78 {\cf20 //      EndsWith}\par
79 {\cf20 //      HasSubstr}\par
80 {\cf20 //      StartsWith}\par
81 {\cf20 //      StrCaseEq}\par
82 {\cf20 //      StrCaseNe}\par
83 {\cf20 //      StrEq}\par
84 {\cf20 //      StrNe}\par
85 {\cf20 //      ElementsAre}\par
86 {\cf20 //      ElementsAreArray}\par
87 {\cf20 //      ContainerEq}\par
88 {\cf20 //      Field}\par
89 {\cf20 //      Property}\par
90 {\cf20 //      ResultOf(function)}\par
91 {\cf20 //      ResultOf(callback)}\par
92 {\cf20 //      Pointee}\par
93 {\cf20 //      Truly(predicate)}\par
94 {\cf20 //      AddressSatisfies}\par
95 {\cf20 //      AllOf}\par
96 {\cf20 //      AnyOf}\par
97 {\cf20 //      Not}\par
98 {\cf20 //      MatcherCast<T>}\par
99 {\cf20 //}\par
100 {\cf20 //  Please note: this test does not verify the functioning of these}\par
101 {\cf20 //  constructs, only that the programs using them will link successfully.}\par
102 {\cf20 //}\par
103 {\cf20 // Implementation note:}\par
104 {\cf20 // This test requires identical definitions of Interface and Mock to be}\par
105 {\cf20 // included in different translation units.  We achieve this by writing}\par
106 {\cf20 // them in this header and #including it in gmock_link_test.cc and}\par
107 {\cf20 // gmock_link2_test.cc.  Because the symbols generated by the compiler for}\par
108 {\cf20 // those constructs must be identical in both translation units,}\par
109 {\cf20 // definitions of Interface and Mock tests MUST be kept in the SAME}\par
110 {\cf20 // NON-ANONYMOUS namespace in this file.  The test fixture class LinkTest}\par
111 {\cf20 // is defined as LinkTest1 in gmock_link_test.cc and as LinkTest2 in}\par
112 {\cf20 // gmock_link2_test.cc to avoid producing linker errors.}\par
113 \par
114 {\cf21 #ifndef GOOGLEMOCK_TEST_GMOCK_LINK_TEST_H_}\par
115 {\cf21 #define GOOGLEMOCK_TEST_GMOCK_LINK_TEST_H_}\par
116 \par
117 {\cf21 #include "gmock/gmock.h"}\par
118 \par
119 {\cf21 #if !GTEST_OS_WINDOWS_MOBILE}\par
120 {\cf21 #include <errno.h>}\par
121 {\cf21 #endif}\par
122 \par
123 {\cf21 #include <iostream>}\par
124 {\cf21 #include <vector>}\par
125 \par
126 {\cf21 #include "gtest/gtest.h"}\par
127 {\cf21 #include "gtest/internal/gtest-port.h"}\par
128 \par
129 {\cf17 using }testing::_;\par
130 {\cf17 using }testing::A;\par
131 {\cf17 using }testing::Action;\par
132 {\cf17 using }testing::AllOf;\par
133 {\cf17 using }testing::AnyOf;\par
134 {\cf17 using }testing::Assign;\par
135 {\cf17 using }testing::ContainerEq;\par
136 {\cf17 using }testing::DoAll;\par
137 {\cf17 using }testing::DoDefault;\par
138 {\cf17 using }testing::DoubleEq;\par
139 {\cf17 using }testing::ElementsAre;\par
140 {\cf17 using }testing::ElementsAreArray;\par
141 {\cf17 using }testing::EndsWith;\par
142 {\cf17 using }testing::Eq;\par
143 {\cf17 using }testing::Field;\par
144 {\cf17 using }testing::FloatEq;\par
145 {\cf17 using }testing::Ge;\par
146 {\cf17 using }testing::Gt;\par
147 {\cf17 using }testing::HasSubstr;\par
148 {\cf17 using }testing::IgnoreResult;\par
149 {\cf17 using }testing::Invoke;\par
150 {\cf17 using }testing::InvokeArgument;\par
151 {\cf17 using }testing::InvokeWithoutArgs;\par
152 {\cf17 using }testing::IsNull;\par
153 {\cf17 using }testing::IsSubsetOf;\par
154 {\cf17 using }testing::IsSupersetOf;\par
155 {\cf17 using }testing::Le;\par
156 {\cf17 using }testing::Lt;\par
157 {\cf17 using }testing::Matcher;\par
158 {\cf17 using }testing::MatcherCast;\par
159 {\cf17 using }testing::NanSensitiveDoubleEq;\par
160 {\cf17 using }testing::NanSensitiveFloatEq;\par
161 {\cf17 using }testing::Ne;\par
162 {\cf17 using }testing::Not;\par
163 {\cf17 using }testing::NotNull;\par
164 {\cf17 using }testing::Pointee;\par
165 {\cf17 using }testing::Property;\par
166 {\cf17 using }testing::Ref;\par
167 {\cf17 using }testing::ResultOf;\par
168 {\cf17 using }testing::Return;\par
169 {\cf17 using }testing::ReturnNull;\par
170 {\cf17 using }testing::ReturnRef;\par
171 {\cf17 using }testing::SetArgPointee;\par
172 {\cf17 using }testing::SetArrayArgument;\par
173 {\cf17 using }testing::StartsWith;\par
174 {\cf17 using }testing::StrCaseEq;\par
175 {\cf17 using }testing::StrCaseNe;\par
176 {\cf17 using }testing::StrEq;\par
177 {\cf17 using }testing::StrNe;\par
178 {\cf17 using }testing::Truly;\par
179 {\cf17 using }testing::TypedEq;\par
180 {\cf17 using }testing::WithArg;\par
181 {\cf17 using }testing::WithArgs;\par
182 {\cf17 using }testing::WithoutArgs;\par
183 \par
184 {\cf21 #if !GTEST_OS_WINDOWS_MOBILE}\par
185 {\cf17 using }testing::SetErrnoAndReturn;\par
186 {\cf21 #endif}\par
187 \par
188 {\cf21 #if GTEST_HAS_EXCEPTIONS}\par
189 {\cf17 using }testing::Throw;\par
190 {\cf21 #endif}\par
191 \par
192 {\cf17 using }testing::ContainsRegex;\par
193 {\cf17 using }testing::MatchesRegex;\par
194 \par
195 {\cf17 class }Interface \{\par
196  {\cf17 public}:\par
197   {\cf17 virtual} ~Interface() \{\}\par
198   {\cf17 virtual} {\cf18 void} VoidFromString({\cf18 char}* str) = 0;\par
199   {\cf17 virtual} {\cf18 char}* StringFromString({\cf18 char}* str) = 0;\par
200   {\cf17 virtual} {\cf18 int} IntFromString({\cf18 char}* str) = 0;\par
201   {\cf17 virtual} {\cf18 int}& IntRefFromString({\cf18 char}* str) = 0;\par
202   {\cf17 virtual} {\cf18 void} VoidFromFunc({\cf18 void} (*func)({\cf18 char}* str)) = 0;\par
203   {\cf17 virtual} {\cf18 void} VoidFromIntRef({\cf18 int}& n) = 0;  {\cf20 // NOLINT}\par
204   {\cf17 virtual} {\cf18 void} VoidFromFloat({\cf18 float} n) = 0;\par
205   {\cf17 virtual} {\cf18 void} VoidFromDouble({\cf18 double} n) = 0;\par
206   {\cf17 virtual} {\cf18 void} VoidFromVector({\cf17 const} std::vector<int>& v) = 0;\par
207 \};\par
208 \par
209 {\cf17 class }Mock : {\cf17 public} Interface \{\par
210  {\cf17 public}:\par
211   Mock() \{\}\par
212 \par
213   MOCK_METHOD1(VoidFromString, {\cf18 void}({\cf18 char}* str));\par
214   MOCK_METHOD1(StringFromString, {\cf18 char}*({\cf18 char}* str));\par
215   MOCK_METHOD1(IntFromString, {\cf18 int}({\cf18 char}* str));\par
216   MOCK_METHOD1(IntRefFromString, {\cf18 int}&({\cf18 char}* str));\par
217   MOCK_METHOD1(VoidFromFunc, {\cf18 void}({\cf18 void} (*func)({\cf18 char}* str)));\par
218   MOCK_METHOD1(VoidFromIntRef, {\cf18 void}({\cf18 int}& n));  {\cf20 // NOLINT}\par
219   MOCK_METHOD1(VoidFromFloat, {\cf18 void}({\cf18 float} n));\par
220   MOCK_METHOD1(VoidFromDouble, {\cf18 void}({\cf18 double} n));\par
221   MOCK_METHOD1(VoidFromVector, {\cf18 void}({\cf17 const} std::vector<int>& v));\par
222 \par
223  {\cf17 private}:\par
224   Mock({\cf17 const} Mock&) = {\cf17 delete};\par
225   Mock& operator=({\cf17 const} Mock&) = {\cf17 delete};\par
226 \};\par
227 \par
228 {\cf17 class }InvokeHelper \{\par
229  {\cf17 public}:\par
230   {\cf17 static} {\cf18 void} StaticVoidFromVoid() \{\}\par
231   {\cf18 void} VoidFromVoid() \{\}\par
232   {\cf17 static} {\cf18 void} StaticVoidFromString({\cf18 char}* {\cf20 /* str */}) \{\}\par
233   {\cf18 void} VoidFromString({\cf18 char}* {\cf20 /* str */}) \{\}\par
234   {\cf17 static} {\cf18 int} StaticIntFromString({\cf18 char}* {\cf20 /* str */}) \{ {\cf19 return} 1; \}\par
235   {\cf17 static} {\cf18 bool} StaticBoolFromString({\cf17 const} {\cf18 char}* {\cf20 /* str */}) \{ {\cf19 return} {\cf17 true}; \}\par
236 \};\par
237 \par
238 {\cf17 class }FieldHelper \{\par
239  {\cf17 public}:\par
240   {\cf17 explicit} FieldHelper({\cf18 int} a_field) : field_(a_field) \{\}\par
241   {\cf18 int} field(){\cf17  const }\{ {\cf19 return} field_; \}\par
242   {\cf18 int} field_;  {\cf20 // NOLINT -- need external access to field_ to test}\par
243                {\cf20 //           the Field matcher.}\par
244 \};\par
245 \par
246 {\cf20 // Tests the linkage of the ReturnVoid action.}\par
247 TEST(LinkTest, TestReturnVoid) \{\par
248   Mock mock;\par
249 \par
250   EXPECT_CALL(mock, VoidFromString(_)).WillOnce(Return());\par
251   mock.VoidFromString({\cf17 nullptr});\par
252 \}\par
253 \par
254 {\cf20 // Tests the linkage of the Return action.}\par
255 TEST(LinkTest, TestReturn) \{\par
256   Mock mock;\par
257   {\cf18 char} ch = {\cf23 'x'};\par
258 \par
259   EXPECT_CALL(mock, StringFromString(_)).WillOnce(Return(&ch));\par
260   mock.StringFromString({\cf17 nullptr});\par
261 \}\par
262 \par
263 {\cf20 // Tests the linkage of the ReturnNull action.}\par
264 TEST(LinkTest, TestReturnNull) \{\par
265   Mock mock;\par
266 \par
267   EXPECT_CALL(mock, VoidFromString(_)).WillOnce(Return());\par
268   mock.VoidFromString({\cf17 nullptr});\par
269 \}\par
270 \par
271 {\cf20 // Tests the linkage of the ReturnRef action.}\par
272 TEST(LinkTest, TestReturnRef) \{\par
273   Mock mock;\par
274   {\cf18 int} n = 42;\par
275 \par
276   EXPECT_CALL(mock, IntRefFromString(_)).WillOnce(ReturnRef(n));\par
277   mock.IntRefFromString({\cf17 nullptr});\par
278 \}\par
279 \par
280 {\cf20 // Tests the linkage of the Assign action.}\par
281 TEST(LinkTest, TestAssign) \{\par
282   Mock mock;\par
283   {\cf18 char} ch = {\cf23 'x'};\par
284 \par
285   EXPECT_CALL(mock, VoidFromString(_)).WillOnce(Assign(&ch, {\cf23 'y'}));\par
286   mock.VoidFromString({\cf17 nullptr});\par
287 \}\par
288 \par
289 {\cf20 // Tests the linkage of the SetArgPointee action.}\par
290 TEST(LinkTest, TestSetArgPointee) \{\par
291   Mock mock;\par
292   {\cf18 char} ch = {\cf23 'x'};\par
293 \par
294   EXPECT_CALL(mock, VoidFromString(_)).WillOnce(SetArgPointee<0>({\cf23 'y'}));\par
295   mock.VoidFromString(&ch);\par
296 \}\par
297 \par
298 {\cf20 // Tests the linkage of the SetArrayArgument action.}\par
299 TEST(LinkTest, TestSetArrayArgument) \{\par
300   Mock mock;\par
301   {\cf18 char} ch = {\cf23 'x'};\par
302   {\cf18 char} ch2 = {\cf23 'y'};\par
303 \par
304   EXPECT_CALL(mock, VoidFromString(_))\par
305       .WillOnce(SetArrayArgument<0>(&ch2, &ch2 + 1));\par
306   mock.VoidFromString(&ch);\par
307 \}\par
308 \par
309 {\cf21 #if !GTEST_OS_WINDOWS_MOBILE}\par
310 \par
311 {\cf20 // Tests the linkage of the SetErrnoAndReturn action.}\par
312 TEST(LinkTest, TestSetErrnoAndReturn) \{\par
313   Mock mock;\par
314 \par
315   {\cf18 int} saved_errno = errno;\par
316   EXPECT_CALL(mock, IntFromString(_)).WillOnce(SetErrnoAndReturn(1, -1));\par
317   mock.IntFromString({\cf17 nullptr});\par
318   errno = saved_errno;\par
319 \}\par
320 \par
321 {\cf21 #endif  }{\cf20 // !GTEST_OS_WINDOWS_MOBILE}\par
322 \par
323 {\cf20 // Tests the linkage of the Invoke(function) and Invoke(object, method) actions.}\par
324 TEST(LinkTest, TestInvoke) \{\par
325   Mock mock;\par
326   InvokeHelper test_invoke_helper;\par
327 \par
328   EXPECT_CALL(mock, VoidFromString(_))\par
329       .WillOnce(Invoke(&InvokeHelper::StaticVoidFromString))\par
330       .WillOnce(Invoke(&test_invoke_helper, &InvokeHelper::VoidFromString));\par
331   mock.VoidFromString({\cf17 nullptr});\par
332   mock.VoidFromString({\cf17 nullptr});\par
333 \}\par
334 \par
335 {\cf20 // Tests the linkage of the InvokeWithoutArgs action.}\par
336 TEST(LinkTest, TestInvokeWithoutArgs) \{\par
337   Mock mock;\par
338   InvokeHelper test_invoke_helper;\par
339 \par
340   EXPECT_CALL(mock, VoidFromString(_))\par
341       .WillOnce(InvokeWithoutArgs(&InvokeHelper::StaticVoidFromVoid))\par
342       .WillOnce(\par
343           InvokeWithoutArgs(&test_invoke_helper, &InvokeHelper::VoidFromVoid));\par
344   mock.VoidFromString({\cf17 nullptr});\par
345   mock.VoidFromString({\cf17 nullptr});\par
346 \}\par
347 \par
348 {\cf20 // Tests the linkage of the InvokeArgument action.}\par
349 TEST(LinkTest, TestInvokeArgument) \{\par
350   Mock mock;\par
351   {\cf18 char} ch = {\cf23 'x'};\par
352 \par
353   EXPECT_CALL(mock, VoidFromFunc(_)).WillOnce(InvokeArgument<0>(&ch));\par
354   mock.VoidFromFunc(InvokeHelper::StaticVoidFromString);\par
355 \}\par
356 \par
357 {\cf20 // Tests the linkage of the WithArg action.}\par
358 TEST(LinkTest, TestWithArg) \{\par
359   Mock mock;\par
360 \par
361   EXPECT_CALL(mock, VoidFromString(_))\par
362       .WillOnce(WithArg<0>(Invoke(&InvokeHelper::StaticVoidFromString)));\par
363   mock.VoidFromString({\cf17 nullptr});\par
364 \}\par
365 \par
366 {\cf20 // Tests the linkage of the WithArgs action.}\par
367 TEST(LinkTest, TestWithArgs) \{\par
368   Mock mock;\par
369 \par
370   EXPECT_CALL(mock, VoidFromString(_))\par
371       .WillOnce(WithArgs<0>(Invoke(&InvokeHelper::StaticVoidFromString)));\par
372   mock.VoidFromString({\cf17 nullptr});\par
373 \}\par
374 \par
375 {\cf20 // Tests the linkage of the WithoutArgs action.}\par
376 TEST(LinkTest, TestWithoutArgs) \{\par
377   Mock mock;\par
378 \par
379   EXPECT_CALL(mock, VoidFromString(_)).WillOnce(WithoutArgs(Return()));\par
380   mock.VoidFromString({\cf17 nullptr});\par
381 \}\par
382 \par
383 {\cf20 // Tests the linkage of the DoAll action.}\par
384 TEST(LinkTest, TestDoAll) \{\par
385   Mock mock;\par
386   {\cf18 char} ch = {\cf23 'x'};\par
387 \par
388   EXPECT_CALL(mock, VoidFromString(_))\par
389       .WillOnce(DoAll(SetArgPointee<0>({\cf23 'y'}), Return()));\par
390   mock.VoidFromString(&ch);\par
391 \}\par
392 \par
393 {\cf20 // Tests the linkage of the DoDefault action.}\par
394 TEST(LinkTest, TestDoDefault) \{\par
395   Mock mock;\par
396   {\cf18 char} ch = {\cf23 'x'};\par
397 \par
398   ON_CALL(mock, VoidFromString(_)).WillByDefault(Return());\par
399   EXPECT_CALL(mock, VoidFromString(_)).WillOnce(DoDefault());\par
400   mock.VoidFromString(&ch);\par
401 \}\par
402 \par
403 {\cf20 // Tests the linkage of the IgnoreResult action.}\par
404 TEST(LinkTest, TestIgnoreResult) \{\par
405   Mock mock;\par
406 \par
407   EXPECT_CALL(mock, VoidFromString(_)).WillOnce(IgnoreResult(Return(42)));\par
408   mock.VoidFromString({\cf17 nullptr});\par
409 \}\par
410 \par
411 {\cf21 #if GTEST_HAS_EXCEPTIONS}\par
412 {\cf20 // Tests the linkage of the Throw action.}\par
413 TEST(LinkTest, TestThrow) \{\par
414   Mock mock;\par
415 \par
416   EXPECT_CALL(mock, VoidFromString(_)).WillOnce(Throw(42));\par
417   EXPECT_THROW(mock.VoidFromString({\cf17 nullptr}), {\cf18 int});\par
418 \}\par
419 {\cf21 #endif  }{\cf20 // GTEST_HAS_EXCEPTIONS}\par
420 \par
421 {\cf20 // The ACTION*() macros trigger warning C4100 (unreferenced formal}\par
422 {\cf20 // parameter) in MSVC with -W4.  Unfortunately they cannot be fixed in}\par
423 {\cf20 // the macro definition, as the warnings are generated when the macro}\par
424 {\cf20 // is expanded and macro expansion cannot contain #pragma.  Therefore}\par
425 {\cf20 // we suppress them here.}\par
426 {\cf21 #ifdef _MSC_VER}\par
427 {\cf21 #pragma warning(push)}\par
428 {\cf21 #pragma warning(disable : 4100)}\par
429 {\cf21 #endif}\par
430 \par
431 {\cf20 // Tests the linkage of actions created using ACTION macro.}\par
432 {\cf17 namespace }\{\par
433 ACTION(Return1) \{ {\cf19 return} 1; \}\par
434 \}  {\cf20 // namespace}\par
435 \par
436 TEST(LinkTest, TestActionMacro) \{\par
437   Mock mock;\par
438 \par
439   EXPECT_CALL(mock, IntFromString(_)).WillOnce(Return1());\par
440   mock.IntFromString({\cf17 nullptr});\par
441 \}\par
442 \par
443 {\cf20 // Tests the linkage of actions created using ACTION_P macro.}\par
444 {\cf17 namespace }\{\par
445 ACTION_P(ReturnArgument, ret_value) \{ {\cf19 return} ret_value; \}\par
446 \}  {\cf20 // namespace}\par
447 \par
448 TEST(LinkTest, TestActionPMacro) \{\par
449   Mock mock;\par
450 \par
451   EXPECT_CALL(mock, IntFromString(_)).WillOnce(ReturnArgument(42));\par
452   mock.IntFromString({\cf17 nullptr});\par
453 \}\par
454 \par
455 {\cf20 // Tests the linkage of actions created using ACTION_P2 macro.}\par
456 {\cf17 namespace }\{\par
457 ACTION_P2(ReturnEqualsEitherOf, first, second) \{\par
458   {\cf19 return} arg0 == first || arg0 == second;\par
459 \}\par
460 \}  {\cf20 // namespace}\par
461 \par
462 {\cf21 #ifdef _MSC_VER}\par
463 {\cf21 #pragma warning(pop)}\par
464 {\cf21 #endif}\par
465 \par
466 TEST(LinkTest, TestActionP2Macro) \{\par
467   Mock mock;\par
468   {\cf18 char} ch = {\cf23 'x'};\par
469 \par
470   EXPECT_CALL(mock, IntFromString(_))\par
471       .WillOnce(ReturnEqualsEitherOf({\cf22 "one"}, {\cf22 "two"}));\par
472   mock.IntFromString(&ch);\par
473 \}\par
474 \par
475 {\cf20 // Tests the linkage of the "_" matcher.}\par
476 TEST(LinkTest, TestMatcherAnything) \{\par
477   Mock mock;\par
478 \par
479   ON_CALL(mock, VoidFromString(_)).WillByDefault(Return());\par
480 \}\par
481 \par
482 {\cf20 // Tests the linkage of the A matcher.}\par
483 TEST(LinkTest, TestMatcherA) \{\par
484   Mock mock;\par
485 \par
486   ON_CALL(mock, VoidFromString(A<char*>())).WillByDefault(Return());\par
487 \}\par
488 \par
489 {\cf20 // Tests the linkage of the Eq and the "bare value" matcher.}\par
490 TEST(LinkTest, TestMatchersEq) \{\par
491   Mock mock;\par
492   {\cf17 const} {\cf18 char}* p = {\cf22 "x"};\par
493 \par
494   ON_CALL(mock, VoidFromString(Eq(p))).WillByDefault(Return());\par
495   ON_CALL(mock, VoidFromString({\cf17 const_cast<}{\cf18 char}*{\cf17 >}({\cf22 "y"}))).WillByDefault(Return());\par
496 \}\par
497 \par
498 {\cf20 // Tests the linkage of the Lt, Gt, Le, Ge, and Ne matchers.}\par
499 TEST(LinkTest, TestMatchersRelations) \{\par
500   Mock mock;\par
501 \par
502   ON_CALL(mock, VoidFromFloat(Lt(1.0f))).WillByDefault(Return());\par
503   ON_CALL(mock, VoidFromFloat(Gt(1.0f))).WillByDefault(Return());\par
504   ON_CALL(mock, VoidFromFloat(Le(1.0f))).WillByDefault(Return());\par
505   ON_CALL(mock, VoidFromFloat(Ge(1.0f))).WillByDefault(Return());\par
506   ON_CALL(mock, VoidFromFloat(Ne(1.0f))).WillByDefault(Return());\par
507 \}\par
508 \par
509 {\cf20 // Tests the linkage of the NotNull matcher.}\par
510 TEST(LinkTest, TestMatcherNotNull) \{\par
511   Mock mock;\par
512 \par
513   ON_CALL(mock, VoidFromString(NotNull())).WillByDefault(Return());\par
514 \}\par
515 \par
516 {\cf20 // Tests the linkage of the IsNull matcher.}\par
517 TEST(LinkTest, TestMatcherIsNull) \{\par
518   Mock mock;\par
519 \par
520   ON_CALL(mock, VoidFromString(IsNull())).WillByDefault(Return());\par
521 \}\par
522 \par
523 {\cf20 // Tests the linkage of the Ref matcher.}\par
524 TEST(LinkTest, TestMatcherRef) \{\par
525   Mock mock;\par
526   {\cf18 int} a = 0;\par
527 \par
528   ON_CALL(mock, VoidFromIntRef(Ref(a))).WillByDefault(Return());\par
529 \}\par
530 \par
531 {\cf20 // Tests the linkage of the TypedEq matcher.}\par
532 TEST(LinkTest, TestMatcherTypedEq) \{\par
533   Mock mock;\par
534   {\cf18 long} a = 0;\par
535 \par
536   ON_CALL(mock, VoidFromIntRef(TypedEq<int&>(a))).WillByDefault(Return());\par
537 \}\par
538 \par
539 {\cf20 // Tests the linkage of the FloatEq, DoubleEq, NanSensitiveFloatEq and}\par
540 {\cf20 // NanSensitiveDoubleEq matchers.}\par
541 TEST(LinkTest, TestMatchersFloatingPoint) \{\par
542   Mock mock;\par
543   {\cf18 float} a = 0;\par
544 \par
545   ON_CALL(mock, VoidFromFloat(FloatEq(a))).WillByDefault(Return());\par
546   ON_CALL(mock, VoidFromDouble(DoubleEq(a))).WillByDefault(Return());\par
547   ON_CALL(mock, VoidFromFloat(NanSensitiveFloatEq(a))).WillByDefault(Return());\par
548   ON_CALL(mock, VoidFromDouble(NanSensitiveDoubleEq(a)))\par
549       .WillByDefault(Return());\par
550 \}\par
551 \par
552 {\cf20 // Tests the linkage of the ContainsRegex matcher.}\par
553 TEST(LinkTest, TestMatcherContainsRegex) \{\par
554   Mock mock;\par
555 \par
556   ON_CALL(mock, VoidFromString(ContainsRegex({\cf22 ".*"}))).WillByDefault(Return());\par
557 \}\par
558 \par
559 {\cf20 // Tests the linkage of the MatchesRegex matcher.}\par
560 TEST(LinkTest, TestMatcherMatchesRegex) \{\par
561   Mock mock;\par
562 \par
563   ON_CALL(mock, VoidFromString(MatchesRegex({\cf22 ".*"}))).WillByDefault(Return());\par
564 \}\par
565 \par
566 {\cf20 // Tests the linkage of the StartsWith, EndsWith, and HasSubstr matchers.}\par
567 TEST(LinkTest, TestMatchersSubstrings) \{\par
568   Mock mock;\par
569 \par
570   ON_CALL(mock, VoidFromString(StartsWith({\cf22 "a"}))).WillByDefault(Return());\par
571   ON_CALL(mock, VoidFromString(EndsWith({\cf22 "c"}))).WillByDefault(Return());\par
572   ON_CALL(mock, VoidFromString(HasSubstr({\cf22 "b"}))).WillByDefault(Return());\par
573 \}\par
574 \par
575 {\cf20 // Tests the linkage of the StrEq, StrNe, StrCaseEq, and StrCaseNe matchers.}\par
576 TEST(LinkTest, TestMatchersStringEquality) \{\par
577   Mock mock;\par
578   ON_CALL(mock, VoidFromString(StrEq({\cf22 "a"}))).WillByDefault(Return());\par
579   ON_CALL(mock, VoidFromString(StrNe({\cf22 "a"}))).WillByDefault(Return());\par
580   ON_CALL(mock, VoidFromString(StrCaseEq({\cf22 "a"}))).WillByDefault(Return());\par
581   ON_CALL(mock, VoidFromString(StrCaseNe({\cf22 "a"}))).WillByDefault(Return());\par
582 \}\par
583 \par
584 {\cf20 // Tests the linkage of the ElementsAre matcher.}\par
585 TEST(LinkTest, TestMatcherElementsAre) \{\par
586   Mock mock;\par
587 \par
588   ON_CALL(mock, VoidFromVector(ElementsAre({\cf23 'a'}, _))).WillByDefault(Return());\par
589 \}\par
590 \par
591 {\cf20 // Tests the linkage of the ElementsAreArray matcher.}\par
592 TEST(LinkTest, TestMatcherElementsAreArray) \{\par
593   Mock mock;\par
594   {\cf18 char} arr[] = \{{\cf23 'a'}, {\cf23 'b'}\};\par
595 \par
596   ON_CALL(mock, VoidFromVector(ElementsAreArray(arr))).WillByDefault(Return());\par
597 \}\par
598 \par
599 {\cf20 // Tests the linkage of the IsSubsetOf matcher.}\par
600 TEST(LinkTest, TestMatcherIsSubsetOf) \{\par
601   Mock mock;\par
602   {\cf18 char} arr[] = \{{\cf23 'a'}, {\cf23 'b'}\};\par
603 \par
604   ON_CALL(mock, VoidFromVector(IsSubsetOf(arr))).WillByDefault(Return());\par
605 \}\par
606 \par
607 {\cf20 // Tests the linkage of the IsSupersetOf matcher.}\par
608 TEST(LinkTest, TestMatcherIsSupersetOf) \{\par
609   Mock mock;\par
610   {\cf18 char} arr[] = \{{\cf23 'a'}, {\cf23 'b'}\};\par
611 \par
612   ON_CALL(mock, VoidFromVector(IsSupersetOf(arr))).WillByDefault(Return());\par
613 \}\par
614 \par
615 {\cf20 // Tests the linkage of the ContainerEq matcher.}\par
616 TEST(LinkTest, TestMatcherContainerEq) \{\par
617   Mock mock;\par
618   std::vector<int> v;\par
619 \par
620   ON_CALL(mock, VoidFromVector(ContainerEq(v))).WillByDefault(Return());\par
621 \}\par
622 \par
623 {\cf20 // Tests the linkage of the Field matcher.}\par
624 TEST(LinkTest, TestMatcherField) \{\par
625   FieldHelper helper(0);\par
626 \par
627   Matcher<const FieldHelper&> m = Field(&FieldHelper::field_, Eq(0));\par
628   EXPECT_TRUE(m.Matches(helper));\par
629 \par
630   Matcher<const FieldHelper*> m2 = Field(&FieldHelper::field_, Eq(0));\par
631   EXPECT_TRUE(m2.Matches(&helper));\par
632 \}\par
633 \par
634 {\cf20 // Tests the linkage of the Property matcher.}\par
635 TEST(LinkTest, TestMatcherProperty) \{\par
636   FieldHelper helper(0);\par
637 \par
638   Matcher<const FieldHelper&> m = Property(&FieldHelper::field, Eq(0));\par
639   EXPECT_TRUE(m.Matches(helper));\par
640 \par
641   Matcher<const FieldHelper*> m2 = Property(&FieldHelper::field, Eq(0));\par
642   EXPECT_TRUE(m2.Matches(&helper));\par
643 \}\par
644 \par
645 {\cf20 // Tests the linkage of the ResultOf matcher.}\par
646 TEST(LinkTest, TestMatcherResultOf) \{\par
647   Matcher<char*> m = ResultOf(&InvokeHelper::StaticIntFromString, Eq(1));\par
648   EXPECT_TRUE(m.Matches({\cf17 nullptr}));\par
649 \}\par
650 \par
651 {\cf20 // Tests the linkage of the ResultOf matcher.}\par
652 TEST(LinkTest, TestMatcherPointee) \{\par
653   {\cf18 int} n = 1;\par
654 \par
655   Matcher<int*> m = Pointee(Eq(1));\par
656   EXPECT_TRUE(m.Matches(&n));\par
657 \}\par
658 \par
659 {\cf20 // Tests the linkage of the Truly matcher.}\par
660 TEST(LinkTest, TestMatcherTruly) \{\par
661   Matcher<const char*> m = Truly(&InvokeHelper::StaticBoolFromString);\par
662   EXPECT_TRUE(m.Matches({\cf17 nullptr}));\par
663 \}\par
664 \par
665 {\cf20 // Tests the linkage of the AllOf matcher.}\par
666 TEST(LinkTest, TestMatcherAllOf) \{\par
667   Matcher<int> m = AllOf(_, Eq(1));\par
668   EXPECT_TRUE(m.Matches(1));\par
669 \}\par
670 \par
671 {\cf20 // Tests the linkage of the AnyOf matcher.}\par
672 TEST(LinkTest, TestMatcherAnyOf) \{\par
673   Matcher<int> m = AnyOf(_, Eq(1));\par
674   EXPECT_TRUE(m.Matches(1));\par
675 \}\par
676 \par
677 {\cf20 // Tests the linkage of the Not matcher.}\par
678 TEST(LinkTest, TestMatcherNot) \{\par
679   Matcher<int> m = Not(_);\par
680   EXPECT_FALSE(m.Matches(1));\par
681 \}\par
682 \par
683 {\cf20 // Tests the linkage of the MatcherCast<T>() function.}\par
684 TEST(LinkTest, TestMatcherCast) \{\par
685   Matcher<const char*> m = MatcherCast<const char*>(_);\par
686   EXPECT_TRUE(m.Matches({\cf17 nullptr}));\par
687 \}\par
688 \par
689 {\cf21 #endif  }{\cf20 // GOOGLEMOCK_TEST_GMOCK_LINK_TEST_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest-assertion-result.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googletest/include/gtest/gtest-assertion-result.h}
{\xe \v lib/googletest-main/googletest/include/gtest/gtest-assertion-result.h}
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2005, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // The Google C++ Testing and Mocking Framework (Google Test)}\par
31 {\cf20 //}\par
32 {\cf20 // This file implements the AssertionResult type.}\par
33 \par
34 {\cf20 // IWYU pragma: private, include "gtest/gtest.h"}\par
35 {\cf20 // IWYU pragma: friend gtest/.*}\par
36 {\cf20 // IWYU pragma: friend gmock/.*}\par
37 \par
38 {\cf21 #ifndef GOOGLETEST_INCLUDE_GTEST_GTEST_ASSERTION_RESULT_H_}\par
39 {\cf21 #define GOOGLETEST_INCLUDE_GTEST_GTEST_ASSERTION_RESULT_H_}\par
40 \par
41 {\cf21 #include <memory>}\par
42 {\cf21 #include <ostream>}\par
43 {\cf21 #include <string>}\par
44 {\cf21 #include <type_traits>}\par
45 \par
46 {\cf21 #include "gtest/gtest-message.h"}\par
47 {\cf21 #include "gtest/internal/gtest-port.h"}\par
48 \par
49 GTEST_DISABLE_MSC_WARNINGS_PUSH_(4251                                   \\\par
50 {\cf20 /* class A needs to have dll-interface to be used by clients of class B */})\par
51 \par
52 namespace testing \{\par
53 \par
54 {\cf20 // A class for indicating whether an assertion was successful.  When}\par
55 {\cf20 // the assertion wasn't successful, the AssertionResult object}\par
56 {\cf20 // remembers a non-empty message that describes how it failed.}\par
57 {\cf20 //}\par
58 {\cf20 // To create an instance of this class, use one of the factory functions}\par
59 {\cf20 // (AssertionSuccess() and AssertionFailure()).}\par
60 {\cf20 //}\par
61 {\cf20 // This class is useful for two purposes:}\par
62 {\cf20 //   1. Defining predicate functions to be used with Boolean test assertions}\par
63 {\cf20 //      EXPECT_TRUE/EXPECT_FALSE and their ASSERT_ counterparts}\par
64 {\cf20 //   2. Defining predicate-format functions to be}\par
65 {\cf20 //      used with predicate assertions (ASSERT_PRED_FORMAT*, etc).}\par
66 {\cf20 //}\par
67 {\cf20 // For example, if you define IsEven predicate:}\par
68 {\cf20 //}\par
69 {\cf20 //   testing::AssertionResult IsEven(int n) \{}\par
70 {\cf20 //     if ((n % 2) == 0)}\par
71 {\cf20 //       return testing::AssertionSuccess();}\par
72 {\cf20 //     else}\par
73 {\cf20 //       return testing::AssertionFailure() << n << " is odd";}\par
74 {\cf20 //   \}}\par
75 {\cf20 //}\par
76 {\cf20 // Then the failed expectation EXPECT_TRUE(IsEven(Fib(5)))}\par
77 {\cf20 // will print the message}\par
78 {\cf20 //}\par
79 {\cf20 //   Value of: IsEven(Fib(5))}\par
80 {\cf20 //     Actual: false (5 is odd)}\par
81 {\cf20 //   Expected: true}\par
82 {\cf20 //}\par
83 {\cf20 // instead of a more opaque}\par
84 {\cf20 //}\par
85 {\cf20 //   Value of: IsEven(Fib(5))}\par
86 {\cf20 //     Actual: false}\par
87 {\cf20 //   Expected: true}\par
88 {\cf20 //}\par
89 {\cf20 // in case IsEven is a simple Boolean predicate.}\par
90 {\cf20 //}\par
91 {\cf20 // If you expect your predicate to be reused and want to support informative}\par
92 {\cf20 // messages in EXPECT_FALSE and ASSERT_FALSE (negative assertions show up}\par
93 {\cf20 // about half as often as positive ones in our tests), supply messages for}\par
94 {\cf20 // both success and failure cases:}\par
95 {\cf20 //}\par
96 {\cf20 //   testing::AssertionResult IsEven(int n) \{}\par
97 {\cf20 //     if ((n % 2) == 0)}\par
98 {\cf20 //       return testing::AssertionSuccess() << n << " is even";}\par
99 {\cf20 //     else}\par
100 {\cf20 //       return testing::AssertionFailure() << n << " is odd";}\par
101 {\cf20 //   \}}\par
102 {\cf20 //}\par
103 {\cf20 // Then a statement EXPECT_FALSE(IsEven(Fib(6))) will print}\par
104 {\cf20 //}\par
105 {\cf20 //   Value of: IsEven(Fib(6))}\par
106 {\cf20 //     Actual: true (8 is even)}\par
107 {\cf20 //   Expected: false}\par
108 {\cf20 //}\par
109 {\cf20 // NB: Predicates that support negative Boolean assertions have reduced}\par
110 {\cf20 // performance in positive ones so be careful not to use them in tests}\par
111 {\cf20 // that have lots (tens of thousands) of positive Boolean assertions.}\par
112 {\cf20 //}\par
113 {\cf20 // To use this class with EXPECT_PRED_FORMAT assertions such as:}\par
114 {\cf20 //}\par
115 {\cf20 //   // Verifies that Foo() returns an even number.}\par
116 {\cf20 //   EXPECT_PRED_FORMAT1(IsEven, Foo());}\par
117 {\cf20 //}\par
118 {\cf20 // you need to define:}\par
119 {\cf20 //}\par
120 {\cf20 //   testing::AssertionResult IsEven(const char* expr, int n) \{}\par
121 {\cf20 //     if ((n % 2) == 0)}\par
122 {\cf20 //       return testing::AssertionSuccess();}\par
123 {\cf20 //     else}\par
124 {\cf20 //       return testing::AssertionFailure()}\par
125 {\cf20 //         << "Expected: " << expr << " is even\\n  Actual: it's " << n;}\par
126 {\cf20 //   \}}\par
127 {\cf20 //}\par
128 {\cf20 // If Foo() returns 5, you will see the following message:}\par
129 {\cf20 //}\par
130 {\cf20 //   Expected: Foo() is even}\par
131 {\cf20 //     Actual: it's 5}\par
132 {\cf20 //}\par
133 {\cf17 class }GTEST_API_ AssertionResult \{\par
134  {\cf17 public}:\par
135   {\cf20 // Copy constructor.}\par
136   {\cf20 // Used in EXPECT_TRUE/FALSE(assertion_result).}\par
137   AssertionResult({\cf17 const} AssertionResult& other);\par
138 \par
139 {\cf20 // C4800 is a level 3 warning in Visual Studio 2015 and earlier.}\par
140 {\cf20 // This warning is not emitted in Visual Studio 2017.}\par
141 {\cf20 // This warning is off by default starting in Visual Studio 2019 but can be}\par
142 {\cf20 // enabled with command-line options.}\par
143 {\cf21 #if defined(_MSC_VER) && (_MSC_VER < 1910 || _MSC_VER >= 1920)}\par
144   GTEST_DISABLE_MSC_WARNINGS_PUSH_(4800 {\cf20 /* forcing value to bool */})\par
145 {\cf21 #endif}\par
146 \par
147   {\cf20 // Used in the EXPECT_TRUE/FALSE(bool_expression).}\par
148   {\cf20 //}\par
149   {\cf20 // T must be contextually convertible to bool.}\par
150   {\cf20 //}\par
151   {\cf20 // The second parameter prevents this overload from being considered if}\par
152   {\cf20 // the argument is implicitly convertible to AssertionResult. In that case}\par
153   {\cf20 // we want AssertionResult's copy constructor to be used.}\par
154   {\cf17 template} <{\cf17 typename} T>\par
155   {\cf17 explicit} AssertionResult(\par
156       {\cf17 const} T& success,\par
157       {\cf17 typename} std::enable_if<\par
158           !std::is_convertible<T, AssertionResult>::value>::type*\par
159       {\cf20 /*enabler*/}\par
160       = {\cf17 nullptr})\par
161       : success_(success) \{\}\par
162 \par
163 {\cf21 #if defined(_MSC_VER) && (_MSC_VER < 1910 || _MSC_VER >= 1920)}\par
164   GTEST_DISABLE_MSC_WARNINGS_POP_()\par
165 {\cf21 #endif}\par
166 \par
167   {\cf20 // Assignment operator.}\par
168   AssertionResult& operator=(AssertionResult other) \{\par
169     swap(other);\par
170     {\cf19 return} *{\cf17 this};\par
171   \}\par
172 \par
173   {\cf20 // Returns true if and only if the assertion succeeded.}\par
174   {\cf17 operator} bool(){\cf17  const }\{ {\cf19 return} success_; \}  {\cf20 // NOLINT}\par
175 \par
176   {\cf20 // Returns the assertion's negation. Used with EXPECT/ASSERT_FALSE.}\par
177   AssertionResult operator!() {\cf17 const};\par
178 \par
179   {\cf20 // Returns the text streamed into this AssertionResult. Test assertions}\par
180   {\cf20 // use it when they fail (i.e., the predicate's outcome doesn't match the}\par
181   {\cf20 // assertion's expectation). When nothing has been streamed into the}\par
182   {\cf20 // object, returns an empty string.}\par
183   {\cf17 const} {\cf18 char}* message(){\cf17  const }\{\par
184     {\cf19 return} message_.get() != {\cf17 nullptr} ? message_->c_str() : {\cf22 ""};\par
185   \}\par
186   {\cf20 // Deprecated; please use message() instead.}\par
187   {\cf17 const} {\cf18 char}* failure_message(){\cf17  const }\{ {\cf19 return} message(); \}\par
188 \par
189   {\cf20 // Streams a custom failure message into this object.}\par
190   {\cf17 template} <{\cf17 typename} T>\par
191   AssertionResult& operator<<({\cf17 const} T& value) \{\par
192     AppendMessage(Message() << value);\par
193     {\cf19 return} *{\cf17 this};\par
194   \}\par
195 \par
196   {\cf20 // Allows streaming basic output manipulators such as endl or flush into}\par
197   {\cf20 // this object.}\par
198   AssertionResult& operator<<(\par
199       ::std::ostream& (*basic_manipulator)(::std::ostream& stream)) \{\par
200     AppendMessage(Message() << basic_manipulator);\par
201     {\cf19 return} *{\cf17 this};\par
202   \}\par
203 \par
204  {\cf17 private}:\par
205   {\cf20 // Appends the contents of message to message_.}\par
206   {\cf18 void} AppendMessage({\cf17 const} Message& a_message) \{\par
207     {\cf19 if} (message_.get() == {\cf17 nullptr}) message_.reset(new ::std::string);\par
208     message_->append(a_message.GetString().c_str());\par
209   \}\par
210 \par
211   {\cf20 // Swap the contents of this AssertionResult with other.}\par
212   {\cf18 void} swap(AssertionResult& other);\par
213 \par
214   {\cf20 // Stores result of the assertion predicate.}\par
215   {\cf18 bool} success_;\par
216   {\cf20 // Stores the message describing the condition in case the expectation}\par
217   {\cf20 // construct is not satisfied with the predicate's outcome.}\par
218   {\cf20 // Referenced via a pointer to avoid taking too much stack frame space}\par
219   {\cf20 // with test assertions.}\par
220   std::unique_ptr< ::std::string> message_;\par
221 \};\par
222 \par
223 {\cf20 // Makes a successful assertion result.}\par
224 GTEST_API_ AssertionResult AssertionSuccess();\par
225 \par
226 {\cf20 // Makes a failed assertion result.}\par
227 GTEST_API_ AssertionResult AssertionFailure();\par
228 \par
229 {\cf20 // Makes a failed assertion result with the given failure message.}\par
230 {\cf20 // Deprecated; use AssertionFailure() << msg.}\par
231 GTEST_API_ AssertionResult AssertionFailure({\cf17 const} Message& msg);\par
232 \par
233 \}  {\cf20 // namespace testing}\par
234 \par
235 GTEST_DISABLE_MSC_WARNINGS_POP_()  {\cf20 // 4251}\par
236 \par
237 {\cf21 #endif  }{\cf20 // GOOGLETEST_INCLUDE_GTEST_GTEST_ASSERTION_RESULT_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest-death-test.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googletest/include/gtest/gtest-death-test.h}
{\xe \v lib/googletest-main/googletest/include/gtest/gtest-death-test.h}
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2005, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // The Google C++ Testing and Mocking Framework (Google Test)}\par
31 {\cf20 //}\par
32 {\cf20 // This header file defines the public API for death tests.  It is}\par
33 {\cf20 // #included by gtest.h so a user doesn't need to include this}\par
34 {\cf20 // directly.}\par
35 \par
36 {\cf20 // IWYU pragma: private, include "gtest/gtest.h"}\par
37 {\cf20 // IWYU pragma: friend gtest/.*}\par
38 {\cf20 // IWYU pragma: friend gmock/.*}\par
39 \par
40 {\cf21 #ifndef GOOGLETEST_INCLUDE_GTEST_GTEST_DEATH_TEST_H_}\par
41 {\cf21 #define GOOGLETEST_INCLUDE_GTEST_GTEST_DEATH_TEST_H_}\par
42 \par
43 {\cf21 #include "gtest/internal/gtest-death-test-internal.h"}\par
44 \par
45 {\cf20 // This flag controls the style of death tests.  Valid values are "threadsafe",}\par
46 {\cf20 // meaning that the death test child process will re-execute the test binary}\par
47 {\cf20 // from the start, running only a single death test, or "fast",}\par
48 {\cf20 // meaning that the child process will execute the test logic immediately}\par
49 {\cf20 // after forking.}\par
50 GTEST_DECLARE_string_(death_test_style);\par
51 \par
52 {\cf17 namespace }testing \{\par
53 \par
54 {\cf21 #if GTEST_HAS_DEATH_TEST}\par
55 \par
56 {\cf17 namespace }internal \{\par
57 \par
58 {\cf20 // Returns a Boolean value indicating whether the caller is currently}\par
59 {\cf20 // executing in the context of the death test child process.  Tools such as}\par
60 {\cf20 // Valgrind heap checkers may need this to modify their behavior in death}\par
61 {\cf20 // tests.  IMPORTANT: This is an internal utility.  Using it may break the}\par
62 {\cf20 // implementation of death tests.  User code MUST NOT use it.}\par
63 GTEST_API_ {\cf18 bool} InDeathTestChild();\par
64 \par
65 \}  {\cf20 // namespace internal}\par
66 \par
67 {\cf20 // The following macros are useful for writing death tests.}\par
68 \par
69 {\cf20 // Here's what happens when an ASSERT_DEATH* or EXPECT_DEATH* is}\par
70 {\cf20 // executed:}\par
71 {\cf20 //}\par
72 {\cf20 //   1. It generates a warning if there is more than one active}\par
73 {\cf20 //   thread.  This is because it's safe to fork() or clone() only}\par
74 {\cf20 //   when there is a single thread.}\par
75 {\cf20 //}\par
76 {\cf20 //   2. The parent process clone()s a sub-process and runs the death}\par
77 {\cf20 //   test in it; the sub-process exits with code 0 at the end of the}\par
78 {\cf20 //   death test, if it hasn't exited already.}\par
79 {\cf20 //}\par
80 {\cf20 //   3. The parent process waits for the sub-process to terminate.}\par
81 {\cf20 //}\par
82 {\cf20 //   4. The parent process checks the exit code and error message of}\par
83 {\cf20 //   the sub-process.}\par
84 {\cf20 //}\par
85 {\cf20 // Examples:}\par
86 {\cf20 //}\par
87 {\cf20 //   ASSERT_DEATH(server.SendMessage(56, "Hello"), "Invalid port number");}\par
88 {\cf20 //   for (int i = 0; i < 5; i++) \{}\par
89 {\cf20 //     EXPECT_DEATH(server.ProcessRequest(i),}\par
90 {\cf20 //                  "Invalid request .* in ProcessRequest()")}\par
91 {\cf20 //                  << "Failed to die on request " << i;}\par
92 {\cf20 //   \}}\par
93 {\cf20 //}\par
94 {\cf20 //   ASSERT_EXIT(server.ExitNow(), ::testing::ExitedWithCode(0), "Exiting");}\par
95 {\cf20 //}\par
96 {\cf20 //   bool KilledBySIGHUP(int exit_code) \{}\par
97 {\cf20 //     return WIFSIGNALED(exit_code) && WTERMSIG(exit_code) == SIGHUP;}\par
98 {\cf20 //   \}}\par
99 {\cf20 //}\par
100 {\cf20 //   ASSERT_EXIT(client.HangUpServer(), KilledBySIGHUP, "Hanging up!");}\par
101 {\cf20 //}\par
102 {\cf20 // The final parameter to each of these macros is a matcher applied to any data}\par
103 {\cf20 // the sub-process wrote to stderr.  For compatibility with existing tests, a}\par
104 {\cf20 // bare string is interpreted as a regular expression matcher.}\par
105 {\cf20 //}\par
106 {\cf20 // On the regular expressions used in death tests:}\par
107 {\cf20 //}\par
108 {\cf20 //   On POSIX-compliant systems (*nix), we use the <regex.h> library,}\par
109 {\cf20 //   which uses the POSIX extended regex syntax.}\par
110 {\cf20 //}\par
111 {\cf20 //   On other platforms (e.g. Windows or Mac), we only support a simple regex}\par
112 {\cf20 //   syntax implemented as part of Google Test.  This limited}\par
113 {\cf20 //   implementation should be enough most of the time when writing}\par
114 {\cf20 //   death tests; though it lacks many features you can find in PCRE}\par
115 {\cf20 //   or POSIX extended regex syntax.  For example, we don't support}\par
116 {\cf20 //   union ("x|y"), grouping ("(xy)"), brackets ("[xy]"), and}\par
117 {\cf20 //   repetition count ("x\{5,7\}"), among others.}\par
118 {\cf20 //}\par
119 {\cf20 //   Below is the syntax that we do support.  We chose it to be a}\par
120 {\cf20 //   subset of both PCRE and POSIX extended regex, so it's easy to}\par
121 {\cf20 //   learn wherever you come from.  In the following: 'A' denotes a}\par
122 {\cf20 //   literal character, period (.), or a single \\\\ escape sequence;}\par
123 {\cf20 //   'x' and 'y' denote regular expressions; 'm' and 'n' are for}\par
124 {\cf20 //   natural numbers.}\par
125 {\cf20 //}\par
126 {\cf20 //     c     matches any literal character c}\par
127 {\cf20 //     \\\\d   matches any decimal digit}\par
128 {\cf20 //     \\\\D   matches any character that's not a decimal digit}\par
129 {\cf20 //     \\\\f   matches \\f}\par
130 {\cf20 //     \\\\n   matches \\n}\par
131 {\cf20 //     \\\\r   matches \\r}\par
132 {\cf20 //     \\\\s   matches any ASCII whitespace, including \\n}\par
133 {\cf20 //     \\\\S   matches any character that's not a whitespace}\par
134 {\cf20 //     \\\\t   matches \\t}\par
135 {\cf20 //     \\\\v   matches \\v}\par
136 {\cf20 //     \\\\w   matches any letter, _, or decimal digit}\par
137 {\cf20 //     \\\\W   matches any character that \\\\w doesn't match}\par
138 {\cf20 //     \\\\c   matches any literal character c, which must be a punctuation}\par
139 {\cf20 //     .     matches any single character except \\n}\par
140 {\cf20 //     A?    matches 0 or 1 occurrences of A}\par
141 {\cf20 //     A*    matches 0 or many occurrences of A}\par
142 {\cf20 //     A+    matches 1 or many occurrences of A}\par
143 {\cf20 //     ^     matches the beginning of a string (not that of each line)}\par
144 {\cf20 //     $     matches the end of a string (not that of each line)}\par
145 {\cf20 //     xy    matches x followed by y}\par
146 {\cf20 //}\par
147 {\cf20 //   If you accidentally use PCRE or POSIX extended regex features}\par
148 {\cf20 //   not implemented by us, you will get a run-time failure.  In that}\par
149 {\cf20 //   case, please try to rewrite your regular expression within the}\par
150 {\cf20 //   above syntax.}\par
151 {\cf20 //}\par
152 {\cf20 //   This implementation is *not* meant to be as highly tuned or robust}\par
153 {\cf20 //   as a compiled regex library, but should perform well enough for a}\par
154 {\cf20 //   death test, which already incurs significant overhead by launching}\par
155 {\cf20 //   a child process.}\par
156 {\cf20 //}\par
157 {\cf20 // Known caveats:}\par
158 {\cf20 //}\par
159 {\cf20 //   A "threadsafe" style death test obtains the path to the test}\par
160 {\cf20 //   program from argv[0] and re-executes it in the sub-process.  For}\par
161 {\cf20 //   simplicity, the current implementation doesn't search the PATH}\par
162 {\cf20 //   when launching the sub-process.  This means that the user must}\par
163 {\cf20 //   invoke the test program via a path that contains at least one}\par
164 {\cf20 //   path separator (e.g. path/to/foo_test and}\par
165 {\cf20 //   /absolute/path/to/bar_test are fine, but foo_test is not).  This}\par
166 {\cf20 //   is rarely a problem as people usually don't put the test binary}\par
167 {\cf20 //   directory in PATH.}\par
168 {\cf20 //}\par
169 \par
170 {\cf20 // Asserts that a given `statement` causes the program to exit, with an}\par
171 {\cf20 // integer exit status that satisfies `predicate`, and emitting error output}\par
172 {\cf20 // that matches `matcher`.}\par
173 {\cf21 #define ASSERT_EXIT(statement, predicate, matcher) \\}\par
174 {\cf21   GTEST_DEATH_TEST_(statement, predicate, matcher, GTEST_FATAL_FAILURE_)}\par
175 \par
176 {\cf20 // Like `ASSERT_EXIT`, but continues on to successive tests in the}\par
177 {\cf20 // test suite, if any:}\par
178 {\cf21 #define EXPECT_EXIT(statement, predicate, matcher) \\}\par
179 {\cf21   GTEST_DEATH_TEST_(statement, predicate, matcher, GTEST_NONFATAL_FAILURE_)}\par
180 \par
181 {\cf20 // Asserts that a given `statement` causes the program to exit, either by}\par
182 {\cf20 // explicitly exiting with a nonzero exit code or being killed by a}\par
183 {\cf20 // signal, and emitting error output that matches `matcher`.}\par
184 {\cf21 #define ASSERT_DEATH(statement, matcher) \\}\par
185 {\cf21   ASSERT_EXIT(statement, ::testing::internal::ExitedUnsuccessfully, matcher)}\par
186 \par
187 {\cf20 // Like `ASSERT_DEATH`, but continues on to successive tests in the}\par
188 {\cf20 // test suite, if any:}\par
189 {\cf21 #define EXPECT_DEATH(statement, matcher) \\}\par
190 {\cf21   EXPECT_EXIT(statement, ::testing::internal::ExitedUnsuccessfully, matcher)}\par
191 \par
192 {\cf20 // Two predicate classes that can be used in \{ASSERT,EXPECT\}_EXIT*:}\par
193 \par
194 {\cf20 // Tests that an exit code describes a normal exit with a given exit code.}\par
195 {\cf17 class }GTEST_API_ ExitedWithCode \{\par
196  {\cf17 public}:\par
197   {\cf17 explicit} ExitedWithCode({\cf18 int} exit_code);\par
198   ExitedWithCode({\cf17 const} ExitedWithCode&) = {\cf19 default};\par
199   {\cf18 void} operator=({\cf17 const} ExitedWithCode& other) = {\cf17 delete};\par
200   {\cf18 bool} operator()({\cf18 int} exit_status) {\cf17 const};\par
201 \par
202  {\cf17 private}:\par
203   {\cf17 const} {\cf18 int} exit_code_;\par
204 \};\par
205 \par
206 {\cf21 #if !GTEST_OS_WINDOWS && !GTEST_OS_FUCHSIA}\par
207 {\cf20 // Tests that an exit code describes an exit due to termination by a}\par
208 {\cf20 // given signal.}\par
209 {\cf17 class }GTEST_API_ KilledBySignal \{\par
210  {\cf17 public}:\par
211   {\cf17 explicit} KilledBySignal({\cf18 int} signum);\par
212   {\cf18 bool} operator()({\cf18 int} exit_status) {\cf17 const};\par
213 \par
214  {\cf17 private}:\par
215   {\cf17 const} {\cf18 int} signum_;\par
216 \};\par
217 {\cf21 #endif  }{\cf20 // !GTEST_OS_WINDOWS}\par
218 \par
219 {\cf20 // EXPECT_DEBUG_DEATH asserts that the given statements die in debug mode.}\par
220 {\cf20 // The death testing framework causes this to have interesting semantics,}\par
221 {\cf20 // since the sideeffects of the call are only visible in opt mode, and not}\par
222 {\cf20 // in debug mode.}\par
223 {\cf20 //}\par
224 {\cf20 // In practice, this can be used to test functions that utilize the}\par
225 {\cf20 // LOG(DFATAL) macro using the following style:}\par
226 {\cf20 //}\par
227 {\cf20 // int DieInDebugOr12(int* sideeffect) \{}\par
228 {\cf20 //   if (sideeffect) \{}\par
229 {\cf20 //     *sideeffect = 12;}\par
230 {\cf20 //   \}}\par
231 {\cf20 //   LOG(DFATAL) << "death";}\par
232 {\cf20 //   return 12;}\par
233 {\cf20 // \}}\par
234 {\cf20 //}\par
235 {\cf20 // TEST(TestSuite, TestDieOr12WorksInDgbAndOpt) \{}\par
236 {\cf20 //   int sideeffect = 0;}\par
237 {\cf20 //   // Only asserts in dbg.}\par
238 {\cf20 //   EXPECT_DEBUG_DEATH(DieInDebugOr12(&sideeffect), "death");}\par
239 {\cf20 //}\par
240 {\cf20 // #ifdef NDEBUG}\par
241 {\cf20 //   // opt-mode has sideeffect visible.}\par
242 {\cf20 //   EXPECT_EQ(12, sideeffect);}\par
243 {\cf20 // #else}\par
244 {\cf20 //   // dbg-mode no visible sideeffect.}\par
245 {\cf20 //   EXPECT_EQ(0, sideeffect);}\par
246 {\cf20 // #endif}\par
247 {\cf20 // \}}\par
248 {\cf20 //}\par
249 {\cf20 // This will assert that DieInDebugReturn12InOpt() crashes in debug}\par
250 {\cf20 // mode, usually due to a DCHECK or LOG(DFATAL), but returns the}\par
251 {\cf20 // appropriate fallback value (12 in this case) in opt mode. If you}\par
252 {\cf20 // need to test that a function has appropriate side-effects in opt}\par
253 {\cf20 // mode, include assertions against the side-effects.  A general}\par
254 {\cf20 // pattern for this is:}\par
255 {\cf20 //}\par
256 {\cf20 // EXPECT_DEBUG_DEATH(\{}\par
257 {\cf20 //   // Side-effects here will have an effect after this statement in}\par
258 {\cf20 //   // opt mode, but none in debug mode.}\par
259 {\cf20 //   EXPECT_EQ(12, DieInDebugOr12(&sideeffect));}\par
260 {\cf20 // \}, "death");}\par
261 {\cf20 //}\par
262 {\cf21 #ifdef NDEBUG}\par
263 \par
264 {\cf21 #define EXPECT_DEBUG_DEATH(statement, regex) \\}\par
265 {\cf21   GTEST_EXECUTE_STATEMENT_(statement, regex)}\par
266 \par
267 {\cf21 #define ASSERT_DEBUG_DEATH(statement, regex) \\}\par
268 {\cf21   GTEST_EXECUTE_STATEMENT_(statement, regex)}\par
269 \par
270 {\cf21 #else}\par
271 \par
272 {\cf21 #define EXPECT_DEBUG_DEATH(statement, regex) EXPECT_DEATH(statement, regex)}\par
273 \par
274 {\cf21 #define ASSERT_DEBUG_DEATH(statement, regex) ASSERT_DEATH(statement, regex)}\par
275 \par
276 {\cf21 #endif  }{\cf20 // NDEBUG for EXPECT_DEBUG_DEATH}\par
277 {\cf21 #endif  }{\cf20 // GTEST_HAS_DEATH_TEST}\par
278 \par
279 {\cf20 // This macro is used for implementing macros such as}\par
280 {\cf20 // EXPECT_DEATH_IF_SUPPORTED and ASSERT_DEATH_IF_SUPPORTED on systems where}\par
281 {\cf20 // death tests are not supported. Those macros must compile on such systems}\par
282 {\cf20 // if and only if EXPECT_DEATH and ASSERT_DEATH compile with the same parameters}\par
283 {\cf20 // on systems that support death tests. This allows one to write such a macro on}\par
284 {\cf20 // a system that does not support death tests and be sure that it will compile}\par
285 {\cf20 // on a death-test supporting system. It is exposed publicly so that systems}\par
286 {\cf20 // that have death-tests with stricter requirements than GTEST_HAS_DEATH_TEST}\par
287 {\cf20 // can write their own equivalent of EXPECT_DEATH_IF_SUPPORTED and}\par
288 {\cf20 // ASSERT_DEATH_IF_SUPPORTED.}\par
289 {\cf20 //}\par
290 {\cf20 // Parameters:}\par
291 {\cf20 //   statement -  A statement that a macro such as EXPECT_DEATH would test}\par
292 {\cf20 //                for program termination. This macro has to make sure this}\par
293 {\cf20 //                statement is compiled but not executed, to ensure that}\par
294 {\cf20 //                EXPECT_DEATH_IF_SUPPORTED compiles with a certain}\par
295 {\cf20 //                parameter if and only if EXPECT_DEATH compiles with it.}\par
296 {\cf20 //   regex     -  A regex that a macro such as EXPECT_DEATH would use to test}\par
297 {\cf20 //                the output of statement.  This parameter has to be}\par
298 {\cf20 //                compiled but not evaluated by this macro, to ensure that}\par
299 {\cf20 //                this macro only accepts expressions that a macro such as}\par
300 {\cf20 //                EXPECT_DEATH would accept.}\par
301 {\cf20 //   terminator - Must be an empty statement for EXPECT_DEATH_IF_SUPPORTED}\par
302 {\cf20 //                and a return statement for ASSERT_DEATH_IF_SUPPORTED.}\par
303 {\cf20 //                This ensures that ASSERT_DEATH_IF_SUPPORTED will not}\par
304 {\cf20 //                compile inside functions where ASSERT_DEATH doesn't}\par
305 {\cf20 //                compile.}\par
306 {\cf20 //}\par
307 {\cf20 //  The branch that has an always false condition is used to ensure that}\par
308 {\cf20 //  statement and regex are compiled (and thus syntactically correct) but}\par
309 {\cf20 //  never executed. The unreachable code macro protects the terminator}\par
310 {\cf20 //  statement from generating an 'unreachable code' warning in case}\par
311 {\cf20 //  statement unconditionally returns or throws. The Message constructor at}\par
312 {\cf20 //  the end allows the syntax of streaming additional messages into the}\par
313 {\cf20 //  macro, for compilational compatibility with EXPECT_DEATH/ASSERT_DEATH.}\par
314 {\cf21 #define GTEST_UNSUPPORTED_DEATH_TEST(statement, regex, terminator)             \\}\par
315 {\cf21   GTEST_AMBIGUOUS_ELSE_BLOCKER_                                                \\}\par
316 {\cf21   if (::testing::internal::AlwaysTrue()) \{                                     \\}\par
317 {\cf21     GTEST_LOG_(WARNING) << "Death tests are not supported on this platform.\\n"} \\\par
318                         << "Statement '" #statement "' cannot be verified.";   \\\par
319   \} else if (::testing::internal::AlwaysFalse()) \{                             \\\par
320     ::testing::internal::RE::PartialMatch(".*", (regex));                      \\\par
321     GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement);                 \\\par
322     terminator;                                                                \\\par
323   \} else                                                                       \\\par
324     ::testing::Message()\par
325 \par
326 {\cf20 // EXPECT_DEATH_IF_SUPPORTED(statement, regex) and}\par
327 {\cf20 // ASSERT_DEATH_IF_SUPPORTED(statement, regex) expand to real death tests if}\par
328 {\cf20 // death tests are supported; otherwise they just issue a warning.  This is}\par
329 {\cf20 // useful when you are combining death test assertions with normal test}\par
330 {\cf20 // assertions in one test.}\par
331 {\cf21 #if GTEST_HAS_DEATH_TEST}\par
332 {\cf21 #define EXPECT_DEATH_IF_SUPPORTED(statement, regex) \\}\par
333 {\cf21   EXPECT_DEATH(statement, regex)}\par
334 {\cf21 #define ASSERT_DEATH_IF_SUPPORTED(statement, regex) \\}\par
335 {\cf21   ASSERT_DEATH(statement, regex)}\par
336 {\cf21 #else}\par
337 {\cf21 #define EXPECT_DEATH_IF_SUPPORTED(statement, regex) \\}\par
338 {\cf21   GTEST_UNSUPPORTED_DEATH_TEST(statement, regex, )}\par
339 {\cf21 #define ASSERT_DEATH_IF_SUPPORTED(statement, regex) \\}\par
340 {\cf21   GTEST_UNSUPPORTED_DEATH_TEST(statement, regex, return)}\par
341 {\cf21 #endif}\par
342 \par
343 \}  {\cf20 // namespace testing}\par
344 \par
345 {\cf21 #endif  }{\cf20 // GOOGLETEST_INCLUDE_GTEST_GTEST_DEATH_TEST_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest-matchers.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googletest/include/gtest/gtest-matchers.h}
{\xe \v lib/googletest-main/googletest/include/gtest/gtest-matchers.h}
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2007, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // The Google C++ Testing and Mocking Framework (Google Test)}\par
31 {\cf20 //}\par
32 {\cf20 // This file implements just enough of the matcher interface to allow}\par
33 {\cf20 // EXPECT_DEATH and friends to accept a matcher argument.}\par
34 \par
35 {\cf20 // IWYU pragma: private, include "gtest/gtest.h"}\par
36 {\cf20 // IWYU pragma: friend gtest/.*}\par
37 {\cf20 // IWYU pragma: friend gmock/.*}\par
38 \par
39 {\cf21 #ifndef GOOGLETEST_INCLUDE_GTEST_GTEST_MATCHERS_H_}\par
40 {\cf21 #define GOOGLETEST_INCLUDE_GTEST_GTEST_MATCHERS_H_}\par
41 \par
42 {\cf21 #include <atomic>}\par
43 {\cf21 #include <memory>}\par
44 {\cf21 #include <ostream>}\par
45 {\cf21 #include <string>}\par
46 {\cf21 #include <type_traits>}\par
47 \par
48 {\cf21 #include "gtest/gtest-printers.h"}\par
49 {\cf21 #include "gtest/internal/gtest-internal.h"}\par
50 {\cf21 #include "gtest/internal/gtest-port.h"}\par
51 \par
52 {\cf20 // MSVC warning C5046 is new as of VS2017 version 15.8.}\par
53 {\cf21 #if defined(_MSC_VER) && _MSC_VER >= 1915}\par
54 {\cf21 #define GTEST_MAYBE_5046_ 5046}\par
55 {\cf21 #else}\par
56 {\cf21 #define GTEST_MAYBE_5046_}\par
57 {\cf21 #endif}\par
58 \par
59 GTEST_DISABLE_MSC_WARNINGS_PUSH_(\par
60     4251 GTEST_MAYBE_5046_ {\cf20 /* class A needs to have dll-interface to be used by}\par
61 {\cf20                               clients of class B */}\par
62     {\cf20 /* Symbol involving type with internal linkage not defined */})\par
63 \par
64 {\cf17 namespace }testing \{\par
65 \par
66 {\cf20 // To implement a matcher Foo for type T, define:}\par
67 {\cf20 //   1. a class FooMatcherMatcher that implements the matcher interface:}\par
68 {\cf20 //     using is_gtest_matcher = void;}\par
69 {\cf20 //     bool MatchAndExplain(const T&, std::ostream*);}\par
70 {\cf20 //       (MatchResultListener* can also be used instead of std::ostream*)}\par
71 {\cf20 //     void DescribeTo(std::ostream*);}\par
72 {\cf20 //     void DescribeNegationTo(std::ostream*);}\par
73 {\cf20 //}\par
74 {\cf20 //   2. a factory function that creates a Matcher<T> object from a}\par
75 {\cf20 //      FooMatcherMatcher.}\par
76 \par
77 {\cf17 class }MatchResultListener \{\par
78  {\cf17 public}:\par
79   {\cf20 // Creates a listener object with the given underlying ostream.  The}\par
80   {\cf20 // listener does not own the ostream, and does not dereference it}\par
81   {\cf20 // in the constructor or destructor.}\par
82   {\cf17 explicit} MatchResultListener(::std::ostream* os) : stream_(os) \{\}\par
83   {\cf17 virtual} ~MatchResultListener() = 0;  {\cf20 // Makes this class abstract.}\par
84 \par
85   {\cf20 // Streams x to the underlying ostream; does nothing if the ostream}\par
86   {\cf20 // is NULL.}\par
87   {\cf17 template} <{\cf17 typename} T>\par
88   MatchResultListener& operator<<({\cf17 const} T& x) \{\par
89     {\cf19 if} (stream_ != {\cf17 nullptr}) *stream_ << x;\par
90     {\cf19 return} *{\cf17 this};\par
91   \}\par
92 \par
93   {\cf20 // Returns the underlying ostream.}\par
94   ::std::ostream* stream() \{ {\cf19 return} stream_; \}\par
95 \par
96   {\cf20 // Returns true if and only if the listener is interested in an explanation}\par
97   {\cf20 // of the match result.  A matcher's MatchAndExplain() method can use}\par
98   {\cf20 // this information to avoid generating the explanation when no one}\par
99   {\cf20 // intends to hear it.}\par
100   {\cf18 bool} IsInterested(){\cf17  const }\{ {\cf19 return} stream_ != {\cf17 nullptr}; \}\par
101 \par
102  {\cf17 private}:\par
103   ::std::ostream* {\cf17 const} stream_;\par
104 \par
105   MatchResultListener({\cf17 const} MatchResultListener&) = {\cf17 delete};\par
106   MatchResultListener& operator=({\cf17 const} MatchResultListener&) = {\cf17 delete};\par
107 \};\par
108 \par
109 {\cf17 inline} MatchResultListener::~MatchResultListener() \{\}\par
110 \par
111 {\cf20 // An instance of a subclass of this knows how to describe itself as a}\par
112 {\cf20 // matcher.}\par
113 {\cf17 class }GTEST_API_ MatcherDescriberInterface \{\par
114  {\cf17 public}:\par
115   {\cf17 virtual} ~MatcherDescriberInterface() \{\}\par
116 \par
117   {\cf20 // Describes this matcher to an ostream.  The function should print}\par
118   {\cf20 // a verb phrase that describes the property a value matching this}\par
119   {\cf20 // matcher should have.  The subject of the verb phrase is the value}\par
120   {\cf20 // being matched.  For example, the DescribeTo() method of the Gt(7)}\par
121   {\cf20 // matcher prints "is greater than 7".}\par
122   {\cf17 virtual} {\cf18 void} DescribeTo(::std::ostream* os) {\cf17 const} = 0;\par
123 \par
124   {\cf20 // Describes the negation of this matcher to an ostream.  For}\par
125   {\cf20 // example, if the description of this matcher is "is greater than}\par
126   {\cf20 // 7", the negated description could be "is not greater than 7".}\par
127   {\cf20 // You are not required to override this when implementing}\par
128   {\cf20 // MatcherInterface, but it is highly advised so that your matcher}\par
129   {\cf20 // can produce good error messages.}\par
130   {\cf17 virtual} {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const }\{\par
131     *os << {\cf22 "not ("};\par
132     DescribeTo(os);\par
133     *os << {\cf22 ")"};\par
134   \}\par
135 \};\par
136 \par
137 {\cf20 // The implementation of a matcher.}\par
138 {\cf17 template} <{\cf17 typename} T>\par
139 {\cf17 class }MatcherInterface : {\cf17 public} MatcherDescriberInterface \{\par
140  {\cf17 public}:\par
141   {\cf20 // Returns true if and only if the matcher matches x; also explains the}\par
142   {\cf20 // match result to 'listener' if necessary (see the next paragraph), in}\par
143   {\cf20 // the form of a non-restrictive relative clause ("which ...",}\par
144   {\cf20 // "whose ...", etc) that describes x.  For example, the}\par
145   {\cf20 // MatchAndExplain() method of the Pointee(...) matcher should}\par
146   {\cf20 // generate an explanation like "which points to ...".}\par
147   {\cf20 //}\par
148   {\cf20 // Implementations of MatchAndExplain() should add an explanation of}\par
149   {\cf20 // the match result *if and only if* they can provide additional}\par
150   {\cf20 // information that's not already present (or not obvious) in the}\par
151   {\cf20 // print-out of x and the matcher's description.  Whether the match}\par
152   {\cf20 // succeeds is not a factor in deciding whether an explanation is}\par
153   {\cf20 // needed, as sometimes the caller needs to print a failure message}\par
154   {\cf20 // when the match succeeds (e.g. when the matcher is used inside}\par
155   {\cf20 // Not()).}\par
156   {\cf20 //}\par
157   {\cf20 // For example, a "has at least 10 elements" matcher should explain}\par
158   {\cf20 // what the actual element count is, regardless of the match result,}\par
159   {\cf20 // as it is useful information to the reader; on the other hand, an}\par
160   {\cf20 // "is empty" matcher probably only needs to explain what the actual}\par
161   {\cf20 // size is when the match fails, as it's redundant to say that the}\par
162   {\cf20 // size is 0 when the value is already known to be empty.}\par
163   {\cf20 //}\par
164   {\cf20 // You should override this method when defining a new matcher.}\par
165   {\cf20 //}\par
166   {\cf20 // It's the responsibility of the caller (Google Test) to guarantee}\par
167   {\cf20 // that 'listener' is not NULL.  This helps to simplify a matcher's}\par
168   {\cf20 // implementation when it doesn't care about the performance, as it}\par
169   {\cf20 // can talk to 'listener' without checking its validity first.}\par
170   {\cf20 // However, in order to implement dummy listeners efficiently,}\par
171   {\cf20 // listener->stream() may be NULL.}\par
172   {\cf17 virtual} {\cf18 bool} MatchAndExplain(T x, MatchResultListener* listener) {\cf17 const} = 0;\par
173 \par
174   {\cf20 // Inherits these methods from MatcherDescriberInterface:}\par
175   {\cf20 //   virtual void DescribeTo(::std::ostream* os) const = 0;}\par
176   {\cf20 //   virtual void DescribeNegationTo(::std::ostream* os) const;}\par
177 \};\par
178 \par
179 {\cf17 namespace }internal \{\par
180 \par
181 {\cf17 struct }AnyEq \{\par
182   {\cf17 template} <{\cf17 typename} A, {\cf17 typename} B>\par
183   {\cf18 bool} operator()({\cf17 const} A& a, {\cf17 const} B& b){\cf17  const }\{\par
184     {\cf19 return} a == b;\par
185   \}\par
186 \};\par
187 {\cf17 struct }AnyNe \{\par
188   {\cf17 template} <{\cf17 typename} A, {\cf17 typename} B>\par
189   {\cf18 bool} operator()({\cf17 const} A& a, {\cf17 const} B& b){\cf17  const }\{\par
190     {\cf19 return} a != b;\par
191   \}\par
192 \};\par
193 {\cf17 struct }AnyLt \{\par
194   {\cf17 template} <{\cf17 typename} A, {\cf17 typename} B>\par
195   {\cf18 bool} operator()({\cf17 const} A& a, {\cf17 const} B& b){\cf17  const }\{\par
196     {\cf19 return} a < b;\par
197   \}\par
198 \};\par
199 {\cf17 struct }AnyGt \{\par
200   {\cf17 template} <{\cf17 typename} A, {\cf17 typename} B>\par
201   {\cf18 bool} operator()({\cf17 const} A& a, {\cf17 const} B& b){\cf17  const }\{\par
202     {\cf19 return} a > b;\par
203   \}\par
204 \};\par
205 {\cf17 struct }AnyLe \{\par
206   {\cf17 template} <{\cf17 typename} A, {\cf17 typename} B>\par
207   {\cf18 bool} operator()({\cf17 const} A& a, {\cf17 const} B& b){\cf17  const }\{\par
208     {\cf19 return} a <= b;\par
209   \}\par
210 \};\par
211 {\cf17 struct }AnyGe \{\par
212   {\cf17 template} <{\cf17 typename} A, {\cf17 typename} B>\par
213   {\cf18 bool} operator()({\cf17 const} A& a, {\cf17 const} B& b){\cf17  const }\{\par
214     {\cf19 return} a >= b;\par
215   \}\par
216 \};\par
217 \par
218 {\cf20 // A match result listener that ignores the explanation.}\par
219 {\cf17 class }DummyMatchResultListener : {\cf17 public} MatchResultListener \{\par
220  {\cf17 public}:\par
221   DummyMatchResultListener() : MatchResultListener(nullptr) \{\}\par
222 \par
223  {\cf17 private}:\par
224   DummyMatchResultListener({\cf17 const} DummyMatchResultListener&) = {\cf17 delete};\par
225   DummyMatchResultListener& operator=({\cf17 const} DummyMatchResultListener&) = {\cf17 delete};\par
226 \};\par
227 \par
228 {\cf20 // A match result listener that forwards the explanation to a given}\par
229 {\cf20 // ostream.  The difference between this and MatchResultListener is}\par
230 {\cf20 // that the former is concrete.}\par
231 {\cf17 class }StreamMatchResultListener : {\cf17 public} MatchResultListener \{\par
232  {\cf17 public}:\par
233   {\cf17 explicit} StreamMatchResultListener(::std::ostream* os)\par
234       : MatchResultListener(os) \{\}\par
235 \par
236  {\cf17 private}:\par
237   StreamMatchResultListener({\cf17 const} StreamMatchResultListener&) = {\cf17 delete};\par
238   StreamMatchResultListener& operator=({\cf17 const} StreamMatchResultListener&) =\par
239       {\cf17 delete};\par
240 \};\par
241 \par
242 {\cf17 struct }SharedPayloadBase \{\par
243   std::atomic<int> ref\{1\};\par
244   {\cf18 void} Ref() \{ ref.fetch_add(1, std::memory_order_relaxed); \}\par
245   {\cf18 bool} Unref() \{ {\cf19 return} ref.fetch_sub(1, std::memory_order_acq_rel) == 1; \}\par
246 \};\par
247 \par
248 {\cf17 template} <{\cf17 typename} T>\par
249 {\cf17 struct }SharedPayload : SharedPayloadBase \{\par
250   {\cf17 explicit} SharedPayload({\cf17 const} T& v) : value(v) \{\}\par
251   {\cf17 explicit} SharedPayload(T&& v) : value(std::move(v)) \{\}\par
252 \par
253   {\cf17 static} {\cf18 void} Destroy(SharedPayloadBase* shared) \{\par
254     {\cf17 delete} {\cf17 static_cast<}SharedPayload*{\cf17 >}(shared);\par
255   \}\par
256 \par
257   T value;\par
258 \};\par
259 \par
260 {\cf20 // An internal class for implementing Matcher<T>, which will derive}\par
261 {\cf20 // from it.  We put functionalities common to all Matcher<T>}\par
262 {\cf20 // specializations here to avoid code duplication.}\par
263 {\cf17 template} <{\cf17 typename} T>\par
264 {\cf17 class }MatcherBase : {\cf17 private} MatcherDescriberInterface \{\par
265  {\cf17 public}:\par
266   {\cf20 // Returns true if and only if the matcher matches x; also explains the}\par
267   {\cf20 // match result to 'listener'.}\par
268   {\cf18 bool} MatchAndExplain({\cf17 const} T& x, MatchResultListener* listener){\cf17  const }\{\par
269     GTEST_CHECK_(vtable_ != {\cf17 nullptr});\par
270     {\cf19 return} vtable_->match_and_explain(*{\cf17 this}, x, listener);\par
271   \}\par
272 \par
273   {\cf20 // Returns true if and only if this matcher matches x.}\par
274   {\cf18 bool} Matches({\cf17 const} T& x){\cf17  const }\{\par
275     DummyMatchResultListener dummy;\par
276     {\cf19 return} MatchAndExplain(x, &dummy);\par
277   \}\par
278 \par
279   {\cf20 // Describes this matcher to an ostream.}\par
280   {\cf18 void} DescribeTo(::std::ostream* os) {\cf17 const} {\cf17 final} \{\par
281     GTEST_CHECK_(vtable_ != {\cf17 nullptr});\par
282     vtable_->describe(*{\cf17 this}, os, {\cf17 false});\par
283   \}\par
284 \par
285   {\cf20 // Describes the negation of this matcher to an ostream.}\par
286   {\cf18 void} DescribeNegationTo(::std::ostream* os) {\cf17 const} {\cf17 final} \{\par
287     GTEST_CHECK_(vtable_ != {\cf17 nullptr});\par
288     vtable_->describe(*{\cf17 this}, os, {\cf17 true});\par
289   \}\par
290 \par
291   {\cf20 // Explains why x matches, or doesn't match, the matcher.}\par
292   {\cf18 void} ExplainMatchResultTo({\cf17 const} T& x, ::std::ostream* os){\cf17  const }\{\par
293     StreamMatchResultListener listener(os);\par
294     MatchAndExplain(x, &listener);\par
295   \}\par
296 \par
297   {\cf20 // Returns the describer for this matcher object; retains ownership}\par
298   {\cf20 // of the describer, which is only guaranteed to be alive when}\par
299   {\cf20 // this matcher object is alive.}\par
300   {\cf17 const} MatcherDescriberInterface* GetDescriber(){\cf17  const }\{\par
301     {\cf19 if} (vtable_ == {\cf17 nullptr}) {\cf19 return} {\cf17 nullptr};\par
302     {\cf19 return} vtable_->get_describer(*{\cf17 this});\par
303   \}\par
304 \par
305  {\cf17 protected}:\par
306   MatcherBase() : vtable_(nullptr), buffer_() \{\}\par
307 \par
308   {\cf20 // Constructs a matcher from its implementation.}\par
309   {\cf17 template} <{\cf17 typename} U>\par
310   {\cf17 explicit} MatcherBase({\cf17 const} MatcherInterface<U>* impl)\par
311       : vtable_(nullptr), buffer_() \{\par
312     Init(impl);\par
313   \}\par
314 \par
315   {\cf17 template} <{\cf17 typename} M, {\cf17 typename} = {\cf17 typename} std::remove_reference<\par
316                             M>::type::is_gtest_matcher>\par
317   MatcherBase(M&& m) : vtable_(nullptr), buffer_() \{  {\cf20 // NOLINT}\par
318     Init(std::forward<M>(m));\par
319   \}\par
320 \par
321   MatcherBase({\cf17 const} MatcherBase& other)\par
322       : vtable_(other.vtable_), buffer_(other.buffer_) \{\par
323     {\cf19 if} (IsShared()) buffer_.shared->Ref();\par
324   \}\par
325 \par
326   MatcherBase& operator=({\cf17 const} MatcherBase& other) \{\par
327     {\cf19 if} ({\cf17 this} == &other) {\cf19 return} *{\cf17 this};\par
328     Destroy();\par
329     vtable_ = other.vtable_;\par
330     buffer_ = other.buffer_;\par
331     {\cf19 if} (IsShared()) buffer_.shared->Ref();\par
332     {\cf19 return} *{\cf17 this};\par
333   \}\par
334 \par
335   MatcherBase(MatcherBase&& other)\par
336       : vtable_(other.vtable_), buffer_(other.buffer_) \{\par
337     other.vtable_ = {\cf17 nullptr};\par
338   \}\par
339 \par
340   MatcherBase& operator=(MatcherBase&& other) \{\par
341     {\cf19 if} ({\cf17 this} == &other) {\cf19 return} *{\cf17 this};\par
342     Destroy();\par
343     vtable_ = other.vtable_;\par
344     buffer_ = other.buffer_;\par
345     other.vtable_ = {\cf17 nullptr};\par
346     {\cf19 return} *{\cf17 this};\par
347   \}\par
348 \par
349   ~MatcherBase(){\cf17  override }\{ Destroy(); \}\par
350 \par
351  {\cf17 private}:\par
352   {\cf17 struct }VTable \{\par
353     bool (*match_and_explain)({\cf17 const} MatcherBase&, {\cf17 const} T&,\par
354                               MatchResultListener*);\par
355     void (*describe)({\cf17 const} MatcherBase&, std::ostream*, {\cf18 bool} negation);\par
356     {\cf20 // Returns the captured object if it implements the interface, otherwise}\par
357     {\cf20 // returns the MatcherBase itself.}\par
358     {\cf17 const} MatcherDescriberInterface* (*get_describer)({\cf17 const} MatcherBase&);\par
359     {\cf20 // Called on shared instances when the reference count reaches 0.}\par
360     void (*shared_destroy)(SharedPayloadBase*);\par
361   \};\par
362 \par
363   {\cf18 bool} IsShared(){\cf17  const }\{\par
364     {\cf19 return} vtable_ != {\cf17 nullptr} && vtable_->shared_destroy != {\cf17 nullptr};\par
365   \}\par
366 \par
367   {\cf20 // If the implementation uses a listener, call that.}\par
368   {\cf17 template} <{\cf17 typename} P>\par
369   {\cf17 static} {\cf17 auto} MatchAndExplainImpl({\cf17 const} MatcherBase& m, {\cf17 const} T& value,\par
370                                   MatchResultListener* listener)\par
371       -> {\cf17 decltype}(P::Get(m).MatchAndExplain(value, listener->stream())) \{\par
372     {\cf19 return} P::Get(m).MatchAndExplain(value, listener->stream());\par
373   \}\par
374 \par
375   {\cf17 template} <{\cf17 typename} P>\par
376   {\cf17 static} {\cf17 auto} MatchAndExplainImpl({\cf17 const} MatcherBase& m, {\cf17 const} T& value,\par
377                                   MatchResultListener* listener)\par
378       -> {\cf17 decltype}(P::Get(m).MatchAndExplain(value, listener)) \{\par
379     {\cf19 return} P::Get(m).MatchAndExplain(value, listener);\par
380   \}\par
381 \par
382   {\cf17 template} <{\cf17 typename} P>\par
383   {\cf17 static} {\cf18 void} DescribeImpl({\cf17 const} MatcherBase& m, std::ostream* os,\par
384                            {\cf18 bool} negation) \{\par
385     {\cf19 if} (negation) \{\par
386       P::Get(m).DescribeNegationTo(os);\par
387     \} {\cf19 else} \{\par
388       P::Get(m).DescribeTo(os);\par
389     \}\par
390   \}\par
391 \par
392   {\cf17 template} <{\cf17 typename} P>\par
393   {\cf17 static} {\cf17 const} MatcherDescriberInterface* GetDescriberImpl(\par
394       {\cf17 const} MatcherBase& m) \{\par
395     {\cf20 // If the impl is a MatcherDescriberInterface, then return it.}\par
396     {\cf20 // Otherwise use MatcherBase itself.}\par
397     {\cf20 // This allows us to implement the GetDescriber() function without support}\par
398     {\cf20 // from the impl, but some users really want to get their impl back when}\par
399     {\cf20 // they call GetDescriber().}\par
400     {\cf20 // We use std::get on a tuple as a workaround of not having `if constexpr`.}\par
401     {\cf19 return} std::get<(\par
402         std::is_convertible<{\cf17 decltype}(&P::Get(m)),\par
403                             {\cf17 const} MatcherDescriberInterface*>::value\par
404             ? 1\par
405             : 0)>(std::make_tuple(&m, &P::Get(m)));\par
406   \}\par
407 \par
408   {\cf17 template} <{\cf17 typename} P>\par
409   {\cf17 const} VTable* GetVTable() \{\par
410     {\cf17 static} {\cf17 constexpr} VTable kVTable = \{&MatchAndExplainImpl<P>,\par
411                                        &DescribeImpl<P>, &GetDescriberImpl<P>,\par
412                                        P::shared_destroy\};\par
413     {\cf19 return} &kVTable;\par
414   \}\par
415 \par
416   {\cf17 union }Buffer \{\par
417     {\cf20 // Add some types to give Buffer some common alignment/size use cases.}\par
418     {\cf18 void}* ptr;\par
419     {\cf18 double} d;\par
420     int64_t i;\par
421     {\cf20 // And add one for the out-of-line cases.}\par
422     SharedPayloadBase* shared;\par
423   \};\par
424 \par
425   {\cf18 void} Destroy() \{\par
426     {\cf19 if} (IsShared() && buffer_.shared->Unref()) \{\par
427       vtable_->shared_destroy(buffer_.shared);\par
428     \}\par
429   \}\par
430 \par
431   {\cf17 template} <{\cf17 typename} M>\par
432   {\cf17 static} {\cf17 constexpr} {\cf18 bool} IsInlined() \{\par
433     {\cf19 return} {\cf17 sizeof}(M) <= {\cf17 sizeof}(Buffer) && {\cf17 alignof}(M) <= {\cf17 alignof}(Buffer) &&\par
434            std::is_trivially_copy_constructible<M>::value &&\par
435            std::is_trivially_destructible<M>::value;\par
436   \}\par
437 \par
438   template <typename M, bool = MatcherBase::IsInlined<M>()>\par
439   {\cf17 struct }ValuePolicy \{\par
440     {\cf17 static} {\cf17 const} M& Get({\cf17 const} MatcherBase& m) \{\par
441       {\cf20 // When inlined along with Init, need to be explicit to avoid violating}\par
442       {\cf20 // strict aliasing rules.}\par
443       {\cf17 const} M* ptr =\par
444           {\cf17 static_cast<}{\cf17 const }M*{\cf17 >}({\cf17 static_cast<}{\cf17 const }{\cf18 void}*{\cf17 >}(&m.buffer_));\par
445       {\cf19 return} *ptr;\par
446     \}\par
447     {\cf17 static} {\cf18 void} Init(MatcherBase& m, M impl) \{\par
448       ::new ({\cf17 static_cast<}{\cf18 void}*{\cf17 >}(&m.buffer_)) M(impl);\par
449     \}\par
450     static constexpr auto shared_destroy = {\cf18 nullptr};\par
451   \};\par
452 \par
453   template <typename M>\par
454   struct ValuePolicy<M, false> \{\par
455     {\cf17 using }Shared = SharedPayload<M>;\par
456     {\cf17 static} {\cf17 const} M& Get({\cf17 const} MatcherBase& m) \{\par
457       {\cf19 return} {\cf17 static_cast<}Shared*{\cf17 >}(m.buffer_.shared)->value;\par
458     \}\par
459     {\cf17 template} <{\cf17 typename} Arg>\par
460     {\cf17 static} {\cf18 void} Init(MatcherBase& m, Arg&& arg) \{\par
461       m.buffer_.shared = {\cf17 new} Shared(std::forward<Arg>(arg));\par
462     \}\par
463     {\cf17 static} {\cf17 constexpr} {\cf17 auto} shared_destroy = &Shared::Destroy;\par
464   \};\par
465 \par
466   {\cf17 template} <{\cf17 typename} U, {\cf18 bool} B>\par
467   {\cf17 struct }ValuePolicy<const MatcherInterface<U>*, B> \{\par
468     {\cf17 using }M = {\cf17 const} MatcherInterface<U>;\par
469     {\cf17 using }Shared = SharedPayload<std::unique_ptr<M>>;\par
470     {\cf17 static} {\cf17 const} M& Get({\cf17 const} MatcherBase& m) \{\par
471       {\cf19 return} *{\cf17 static_cast<}Shared*{\cf17 >}(m.buffer_.shared)->value;\par
472     \}\par
473     {\cf17 static} {\cf18 void} Init(MatcherBase& m, M* impl) \{\par
474       m.buffer_.shared = {\cf17 new} Shared(std::unique_ptr<M>(impl));\par
475     \}\par
476 \par
477     {\cf17 static} {\cf17 constexpr} {\cf17 auto} shared_destroy = &Shared::Destroy;\par
478   \};\par
479 \par
480   {\cf17 template} <{\cf17 typename} M>\par
481   {\cf18 void} Init(M&& m) \{\par
482     {\cf17 using }MM = {\cf17 typename} std::decay<M>::type;\par
483     {\cf17 using }Policy = ValuePolicy<MM>;\par
484     vtable_ = GetVTable<Policy>();\par
485     Policy::Init(*{\cf17 this}, std::forward<M>(m));\par
486   \}\par
487 \par
488   {\cf17 const} VTable* vtable_;\par
489   Buffer buffer_;\par
490 \};\par
491 \par
492 \}  {\cf20 // namespace internal}\par
493 \par
494 {\cf20 // A Matcher<T> is a copyable and IMMUTABLE (except by assignment)}\par
495 {\cf20 // object that can check whether a value of type T matches.  The}\par
496 {\cf20 // implementation of Matcher<T> is just a std::shared_ptr to const}\par
497 {\cf20 // MatcherInterface<T>.  Don't inherit from Matcher!}\par
498 {\cf17 template} <{\cf17 typename} T>\par
499 {\cf17 class }Matcher : {\cf17 public} internal::MatcherBase<T> \{\par
500  {\cf17 public}:\par
501   {\cf20 // Constructs a null matcher.  Needed for storing Matcher objects in STL}\par
502   {\cf20 // containers.  A default-constructed matcher is not yet initialized.  You}\par
503   {\cf20 // cannot use it until a valid value has been assigned to it.}\par
504   {\cf17 explicit} Matcher() \{\}  {\cf20 // NOLINT}\par
505 \par
506   {\cf20 // Constructs a matcher from its implementation.}\par
507   {\cf17 explicit} Matcher({\cf17 const} MatcherInterface<const T&>* impl)\par
508       : internal::MatcherBase<T>(impl) \{\}\par
509 \par
510   {\cf17 template} <{\cf17 typename} U>\par
511   {\cf17 explicit} Matcher(\par
512       {\cf17 const} MatcherInterface<U>* impl,\par
513       {\cf17 typename} std::enable_if<!std::is_same<U, const U&>::value>::type* =\par
514           {\cf17 nullptr})\par
515       : internal::MatcherBase<T>(impl) \{\}\par
516 \par
517   {\cf17 template} <{\cf17 typename} M, {\cf17 typename} = {\cf17 typename} std::remove_reference<\par
518                             M>::type::is_gtest_matcher>\par
519   Matcher(M&& m) : internal::MatcherBase<T>(std::forward<M>(m)) \{\}  {\cf20 // NOLINT}\par
520 \par
521   {\cf20 // Implicit constructor here allows people to write}\par
522   {\cf20 // EXPECT_CALL(foo, Bar(5)) instead of EXPECT_CALL(foo, Bar(Eq(5))) sometimes}\par
523   Matcher(T value);  {\cf20 // NOLINT}\par
524 \};\par
525 \par
526 {\cf20 // The following two specializations allow the user to write str}\par
527 {\cf20 // instead of Eq(str) and "foo" instead of Eq("foo") when a std::string}\par
528 {\cf20 // matcher is expected.}\par
529 {\cf17 template} <>\par
530 {\cf17 class }GTEST_API_ Matcher<const std::string&>\par
531     : {\cf17 public} internal::MatcherBase<const std::string&> \{\par
532  {\cf17 public}:\par
533   Matcher() \{\}\par
534 \par
535   {\cf17 explicit} Matcher({\cf17 const} MatcherInterface<const std::string&>* impl)\par
536       : internal::MatcherBase<const std::string&>(impl) \{\}\par
537 \par
538   {\cf17 template} <{\cf17 typename} M, {\cf17 typename} = {\cf17 typename} std::remove_reference<\par
539                             M>::type::is_gtest_matcher>\par
540   Matcher(M&& m)  {\cf20 // NOLINT}\par
541       : internal::MatcherBase<const std::string&>(std::forward<M>(m)) \{\}\par
542 \par
543   {\cf20 // Allows the user to write str instead of Eq(str) sometimes, where}\par
544   {\cf20 // str is a std::string object.}\par
545   Matcher({\cf17 const} std::string& s);  {\cf20 // NOLINT}\par
546 \par
547   {\cf20 // Allows the user to write "foo" instead of Eq("foo") sometimes.}\par
548   Matcher({\cf17 const} {\cf18 char}* s);  {\cf20 // NOLINT}\par
549 \};\par
550 \par
551 {\cf17 template} <>\par
552 {\cf17 class }GTEST_API_ Matcher<std::string>\par
553     : {\cf17 public} internal::MatcherBase<std::string> \{\par
554  {\cf17 public}:\par
555   Matcher() \{\}\par
556 \par
557   {\cf17 explicit} Matcher({\cf17 const} MatcherInterface<const std::string&>* impl)\par
558       : internal::MatcherBase<std::string>(impl) \{\}\par
559   {\cf17 explicit} Matcher({\cf17 const} MatcherInterface<std::string>* impl)\par
560       : internal::MatcherBase<std::string>(impl) \{\}\par
561 \par
562   {\cf17 template} <{\cf17 typename} M, {\cf17 typename} = {\cf17 typename} std::remove_reference<\par
563                             M>::type::is_gtest_matcher>\par
564   Matcher(M&& m)  {\cf20 // NOLINT}\par
565       : internal::MatcherBase<std::string>(std::forward<M>(m)) \{\}\par
566 \par
567   {\cf20 // Allows the user to write str instead of Eq(str) sometimes, where}\par
568   {\cf20 // str is a string object.}\par
569   Matcher({\cf17 const} std::string& s);  {\cf20 // NOLINT}\par
570 \par
571   {\cf20 // Allows the user to write "foo" instead of Eq("foo") sometimes.}\par
572   Matcher({\cf17 const} {\cf18 char}* s);  {\cf20 // NOLINT}\par
573 \};\par
574 \par
575 {\cf21 #if GTEST_INTERNAL_HAS_STRING_VIEW}\par
576 {\cf20 // The following two specializations allow the user to write str}\par
577 {\cf20 // instead of Eq(str) and "foo" instead of Eq("foo") when a absl::string_view}\par
578 {\cf20 // matcher is expected.}\par
579 {\cf17 template} <>\par
580 {\cf17 class }GTEST_API_ Matcher<const internal::StringView&>\par
581     : {\cf17 public} internal::MatcherBase<const internal::StringView&> \{\par
582  {\cf17 public}:\par
583   Matcher() \{\}\par
584 \par
585   {\cf17 explicit} Matcher({\cf17 const} MatcherInterface<const internal::StringView&>* impl)\par
586       : internal::MatcherBase<const internal::StringView&>(impl) \{\}\par
587 \par
588   {\cf17 template} <{\cf17 typename} M, {\cf17 typename} = {\cf17 typename} std::remove_reference<\par
589                             M>::type::is_gtest_matcher>\par
590   Matcher(M&& m)  {\cf20 // NOLINT}\par
591       : internal::MatcherBase<const internal::StringView&>(std::forward<M>(m)) \{\par
592   \}\par
593 \par
594   {\cf20 // Allows the user to write str instead of Eq(str) sometimes, where}\par
595   {\cf20 // str is a std::string object.}\par
596   Matcher({\cf17 const} std::string& s);  {\cf20 // NOLINT}\par
597 \par
598   {\cf20 // Allows the user to write "foo" instead of Eq("foo") sometimes.}\par
599   Matcher({\cf17 const} {\cf18 char}* s);  {\cf20 // NOLINT}\par
600 \par
601   {\cf20 // Allows the user to pass absl::string_views or std::string_views directly.}\par
602   Matcher(internal::StringView s);  {\cf20 // NOLINT}\par
603 \};\par
604 \par
605 {\cf17 template} <>\par
606 {\cf17 class }GTEST_API_ Matcher<internal::StringView>\par
607     : {\cf17 public} internal::MatcherBase<internal::StringView> \{\par
608  {\cf17 public}:\par
609   Matcher() \{\}\par
610 \par
611   {\cf17 explicit} Matcher({\cf17 const} MatcherInterface<const internal::StringView&>* impl)\par
612       : internal::MatcherBase<internal::StringView>(impl) \{\}\par
613   {\cf17 explicit} Matcher({\cf17 const} MatcherInterface<internal::StringView>* impl)\par
614       : internal::MatcherBase<internal::StringView>(impl) \{\}\par
615 \par
616   {\cf17 template} <{\cf17 typename} M, {\cf17 typename} = {\cf17 typename} std::remove_reference<\par
617                             M>::type::is_gtest_matcher>\par
618   Matcher(M&& m)  {\cf20 // NOLINT}\par
619       : internal::MatcherBase<internal::StringView>(std::forward<M>(m)) \{\}\par
620 \par
621   {\cf20 // Allows the user to write str instead of Eq(str) sometimes, where}\par
622   {\cf20 // str is a std::string object.}\par
623   Matcher({\cf17 const} std::string& s);  {\cf20 // NOLINT}\par
624 \par
625   {\cf20 // Allows the user to write "foo" instead of Eq("foo") sometimes.}\par
626   Matcher({\cf17 const} {\cf18 char}* s);  {\cf20 // NOLINT}\par
627 \par
628   {\cf20 // Allows the user to pass absl::string_views or std::string_views directly.}\par
629   Matcher(internal::StringView s);  {\cf20 // NOLINT}\par
630 \};\par
631 {\cf21 #endif  }{\cf20 // GTEST_INTERNAL_HAS_STRING_VIEW}\par
632 \par
633 {\cf20 // Prints a matcher in a human-readable format.}\par
634 {\cf17 template} <{\cf17 typename} T>\par
635 std::ostream& operator<<(std::ostream& os, {\cf17 const} Matcher<T>& matcher) \{\par
636   matcher.DescribeTo(&os);\par
637   {\cf19 return} os;\par
638 \}\par
639 \par
640 {\cf20 // The PolymorphicMatcher class template makes it easy to implement a}\par
641 {\cf20 // polymorphic matcher (i.e. a matcher that can match values of more}\par
642 {\cf20 // than one type, e.g. Eq(n) and NotNull()).}\par
643 {\cf20 //}\par
644 {\cf20 // To define a polymorphic matcher, a user should provide an Impl}\par
645 {\cf20 // class that has a DescribeTo() method and a DescribeNegationTo()}\par
646 {\cf20 // method, and define a member function (or member function template)}\par
647 {\cf20 //}\par
648 {\cf20 //   bool MatchAndExplain(const Value& value,}\par
649 {\cf20 //                        MatchResultListener* listener) const;}\par
650 {\cf20 //}\par
651 {\cf20 // See the definition of NotNull() for a complete example.}\par
652 {\cf17 template} <{\cf17 class} Impl>\par
653 {\cf17 class }PolymorphicMatcher \{\par
654  {\cf17 public}:\par
655   {\cf17 explicit} PolymorphicMatcher({\cf17 const} Impl& an_impl) : impl_(an_impl) \{\}\par
656 \par
657   {\cf20 // Returns a mutable reference to the underlying matcher}\par
658   {\cf20 // implementation object.}\par
659   Impl& mutable_impl() \{ {\cf19 return} impl_; \}\par
660 \par
661   {\cf20 // Returns an immutable reference to the underlying matcher}\par
662   {\cf20 // implementation object.}\par
663   {\cf17 const} Impl& impl(){\cf17  const }\{ {\cf19 return} impl_; \}\par
664 \par
665   {\cf17 template} <{\cf17 typename} T>\par
666   {\cf17 operator} Matcher<T>(){\cf17  const }\{\par
667     {\cf19 return} Matcher<T>({\cf17 new} MonomorphicImpl<const T&>(impl_));\par
668   \}\par
669 \par
670  {\cf17 private}:\par
671   {\cf17 template} <{\cf17 typename} T>\par
672   {\cf17 class }MonomorphicImpl : {\cf17 public} MatcherInterface<T> \{\par
673    {\cf17 public}:\par
674     {\cf17 explicit} MonomorphicImpl({\cf17 const} Impl& impl) : impl_(impl) \{\}\par
675 \par
676     {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const override }\{ impl_.DescribeTo(os); \}\par
677 \par
678     {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const override }\{\par
679       impl_.DescribeNegationTo(os);\par
680     \}\par
681 \par
682     {\cf18 bool} MatchAndExplain(T x, MatchResultListener* listener){\cf17  const override }\{\par
683       {\cf19 return} impl_.MatchAndExplain(x, listener);\par
684     \}\par
685 \par
686    {\cf17 private}:\par
687     {\cf17 const} Impl impl_;\par
688   \};\par
689 \par
690   Impl impl_;\par
691 \};\par
692 \par
693 {\cf20 // Creates a matcher from its implementation.}\par
694 {\cf20 // DEPRECATED: Especially in the generic code, prefer:}\par
695 {\cf20 //   Matcher<T>(new MyMatcherImpl<const T&>(...));}\par
696 {\cf20 //}\par
697 {\cf20 // MakeMatcher may create a Matcher that accepts its argument by value, which}\par
698 {\cf20 // leads to unnecessary copies & lack of support for non-copyable types.}\par
699 {\cf17 template} <{\cf17 typename} T>\par
700 {\cf17 inline} Matcher<T> MakeMatcher({\cf17 const} MatcherInterface<T>* impl) \{\par
701   {\cf19 return} Matcher<T>(impl);\par
702 \}\par
703 \par
704 {\cf20 // Creates a polymorphic matcher from its implementation.  This is}\par
705 {\cf20 // easier to use than the PolymorphicMatcher<Impl> constructor as it}\par
706 {\cf20 // doesn't require you to explicitly write the template argument, e.g.}\par
707 {\cf20 //}\par
708 {\cf20 //   MakePolymorphicMatcher(foo);}\par
709 {\cf20 // vs}\par
710 {\cf20 //   PolymorphicMatcher<TypeOfFoo>(foo);}\par
711 {\cf17 template} <{\cf17 class} Impl>\par
712 {\cf17 inline} PolymorphicMatcher<Impl> MakePolymorphicMatcher({\cf17 const} Impl& impl) \{\par
713   {\cf19 return} PolymorphicMatcher<Impl>(impl);\par
714 \}\par
715 \par
716 {\cf17 namespace }internal \{\par
717 {\cf20 // Implements a matcher that compares a given value with a}\par
718 {\cf20 // pre-supplied value using one of the ==, <=, <, etc, operators.  The}\par
719 {\cf20 // two values being compared don't have to have the same type.}\par
720 {\cf20 //}\par
721 {\cf20 // The matcher defined here is polymorphic (for example, Eq(5) can be}\par
722 {\cf20 // used to match an int, a short, a double, etc).  Therefore we use}\par
723 {\cf20 // a template type conversion operator in the implementation.}\par
724 {\cf20 //}\par
725 {\cf20 // The following template definition assumes that the Rhs parameter is}\par
726 {\cf20 // a "bare" type (i.e. neither 'const T' nor 'T&').}\par
727 {\cf17 template} <{\cf17 typename} D, {\cf17 typename} Rhs, {\cf17 typename} Op>\par
728 {\cf17 class }ComparisonBase \{\par
729  {\cf17 public}:\par
730   {\cf17 explicit} ComparisonBase({\cf17 const} Rhs& rhs) : rhs_(rhs) \{\}\par
731 \par
732   {\cf17 using }is_gtest_matcher = void;\par
733 \par
734   {\cf17 template} <{\cf17 typename} Lhs>\par
735   {\cf18 bool} MatchAndExplain({\cf17 const} Lhs& lhs, std::ostream*){\cf17  const }\{\par
736     {\cf19 return} Op()(lhs, Unwrap(rhs_));\par
737   \}\par
738   {\cf18 void} DescribeTo(std::ostream* os){\cf17  const }\{\par
739     *os << D::Desc() << {\cf22 " "};\par
740     UniversalPrint(Unwrap(rhs_), os);\par
741   \}\par
742   {\cf18 void} DescribeNegationTo(std::ostream* os){\cf17  const }\{\par
743     *os << D::NegatedDesc() << {\cf22 " "};\par
744     UniversalPrint(Unwrap(rhs_), os);\par
745   \}\par
746 \par
747  {\cf17 private}:\par
748   {\cf17 template} <{\cf17 typename} T>\par
749   {\cf17 static} {\cf17 const} T& Unwrap({\cf17 const} T& v) \{\par
750     {\cf19 return} v;\par
751   \}\par
752   {\cf17 template} <{\cf17 typename} T>\par
753   {\cf17 static} {\cf17 const} T& Unwrap(std::reference_wrapper<T> v) \{\par
754     {\cf19 return} v;\par
755   \}\par
756 \par
757   Rhs rhs_;\par
758 \};\par
759 \par
760 {\cf17 template} <{\cf17 typename} Rhs>\par
761 {\cf17 class }EqMatcher : {\cf17 public} ComparisonBase<EqMatcher<Rhs>, Rhs, AnyEq> \{\par
762  {\cf17 public}:\par
763   {\cf17 explicit} EqMatcher({\cf17 const} Rhs& rhs)\par
764       : ComparisonBase<EqMatcher<Rhs>, Rhs, AnyEq>(rhs) \{\}\par
765   {\cf17 static} {\cf17 const} {\cf18 char}* Desc() \{ {\cf19 return} {\cf22 "is equal to"}; \}\par
766   {\cf17 static} {\cf17 const} {\cf18 char}* NegatedDesc() \{ {\cf19 return} {\cf22 "isn't equal to"}; \}\par
767 \};\par
768 {\cf17 template} <{\cf17 typename} Rhs>\par
769 {\cf17 class }NeMatcher : {\cf17 public} ComparisonBase<NeMatcher<Rhs>, Rhs, AnyNe> \{\par
770  {\cf17 public}:\par
771   {\cf17 explicit} NeMatcher({\cf17 const} Rhs& rhs)\par
772       : ComparisonBase<NeMatcher<Rhs>, Rhs, AnyNe>(rhs) \{\}\par
773   {\cf17 static} {\cf17 const} {\cf18 char}* Desc() \{ {\cf19 return} {\cf22 "isn't equal to"}; \}\par
774   {\cf17 static} {\cf17 const} {\cf18 char}* NegatedDesc() \{ {\cf19 return} {\cf22 "is equal to"}; \}\par
775 \};\par
776 {\cf17 template} <{\cf17 typename} Rhs>\par
777 {\cf17 class }LtMatcher : {\cf17 public} ComparisonBase<LtMatcher<Rhs>, Rhs, AnyLt> \{\par
778  {\cf17 public}:\par
779   {\cf17 explicit} LtMatcher({\cf17 const} Rhs& rhs)\par
780       : ComparisonBase<LtMatcher<Rhs>, Rhs, AnyLt>(rhs) \{\}\par
781   {\cf17 static} {\cf17 const} {\cf18 char}* Desc() \{ {\cf19 return} {\cf22 "is <"}; \}\par
782   {\cf17 static} {\cf17 const} {\cf18 char}* NegatedDesc() \{ {\cf19 return} {\cf22 "isn't <"}; \}\par
783 \};\par
784 {\cf17 template} <{\cf17 typename} Rhs>\par
785 {\cf17 class }GtMatcher : {\cf17 public} ComparisonBase<GtMatcher<Rhs>, Rhs, AnyGt> \{\par
786  {\cf17 public}:\par
787   {\cf17 explicit} GtMatcher({\cf17 const} Rhs& rhs)\par
788       : ComparisonBase<GtMatcher<Rhs>, Rhs, AnyGt>(rhs) \{\}\par
789   {\cf17 static} {\cf17 const} {\cf18 char}* Desc() \{ {\cf19 return} {\cf22 "is >"}; \}\par
790   {\cf17 static} {\cf17 const} {\cf18 char}* NegatedDesc() \{ {\cf19 return} {\cf22 "isn't >"}; \}\par
791 \};\par
792 {\cf17 template} <{\cf17 typename} Rhs>\par
793 {\cf17 class }LeMatcher : {\cf17 public} ComparisonBase<LeMatcher<Rhs>, Rhs, AnyLe> \{\par
794  {\cf17 public}:\par
795   {\cf17 explicit} LeMatcher({\cf17 const} Rhs& rhs)\par
796       : ComparisonBase<LeMatcher<Rhs>, Rhs, AnyLe>(rhs) \{\}\par
797   {\cf17 static} {\cf17 const} {\cf18 char}* Desc() \{ {\cf19 return} {\cf22 "is <="}; \}\par
798   {\cf17 static} {\cf17 const} {\cf18 char}* NegatedDesc() \{ {\cf19 return} {\cf22 "isn't <="}; \}\par
799 \};\par
800 {\cf17 template} <{\cf17 typename} Rhs>\par
801 {\cf17 class }GeMatcher : {\cf17 public} ComparisonBase<GeMatcher<Rhs>, Rhs, AnyGe> \{\par
802  {\cf17 public}:\par
803   {\cf17 explicit} GeMatcher({\cf17 const} Rhs& rhs)\par
804       : ComparisonBase<GeMatcher<Rhs>, Rhs, AnyGe>(rhs) \{\}\par
805   {\cf17 static} {\cf17 const} {\cf18 char}* Desc() \{ {\cf19 return} {\cf22 "is >="}; \}\par
806   {\cf17 static} {\cf17 const} {\cf18 char}* NegatedDesc() \{ {\cf19 return} {\cf22 "isn't >="}; \}\par
807 \};\par
808 \par
809 {\cf17 template} <{\cf17 typename} T, {\cf17 typename} = {\cf17 typename} std::enable_if<\par
810                           std::is_constructible<std::string, T>::value>::type>\par
811 {\cf17 using }StringLike = T;\par
812 \par
813 {\cf20 // Implements polymorphic matchers MatchesRegex(regex) and}\par
814 {\cf20 // ContainsRegex(regex), which can be used as a Matcher<T> as long as}\par
815 {\cf20 // T can be converted to a string.}\par
816 {\cf17 class }MatchesRegexMatcher \{\par
817  {\cf17 public}:\par
818   MatchesRegexMatcher({\cf17 const} RE* regex, {\cf18 bool} full_match)\par
819       : regex_(regex), full_match_(full_match) \{\}\par
820 \par
821 {\cf21 #if GTEST_INTERNAL_HAS_STRING_VIEW}\par
822   {\cf18 bool} MatchAndExplain({\cf17 const} internal::StringView& s,\par
823                        MatchResultListener* listener){\cf17  const }\{\par
824     {\cf19 return} MatchAndExplain(std::string(s), listener);\par
825   \}\par
826 {\cf21 #endif  }{\cf20 // GTEST_INTERNAL_HAS_STRING_VIEW}\par
827 \par
828   {\cf20 // Accepts pointer types, particularly:}\par
829   {\cf20 //   const char*}\par
830   {\cf20 //   char*}\par
831   {\cf20 //   const wchar_t*}\par
832   {\cf20 //   wchar_t*}\par
833   {\cf17 template} <{\cf17 typename} CharType>\par
834   {\cf18 bool} MatchAndExplain(CharType* s, MatchResultListener* listener){\cf17  const }\{\par
835     {\cf19 return} s != {\cf17 nullptr} && MatchAndExplain(std::string(s), listener);\par
836   \}\par
837 \par
838   {\cf20 // Matches anything that can convert to std::string.}\par
839   {\cf20 //}\par
840   {\cf20 // This is a template, not just a plain function with const std::string&,}\par
841   {\cf20 // because absl::string_view has some interfering non-explicit constructors.}\par
842   {\cf17 template} <{\cf17 class} MatcheeStringType>\par
843   {\cf18 bool} MatchAndExplain({\cf17 const} MatcheeStringType& s,\par
844                        MatchResultListener* {\cf20 /* listener */}){\cf17  const }\{\par
845     {\cf17 const} std::string s2(s);\par
846     {\cf19 return} full_match_ ? RE::FullMatch(s2, *regex_)\par
847                        : RE::PartialMatch(s2, *regex_);\par
848   \}\par
849 \par
850   {\cf18 void} DescribeTo(::std::ostream* os){\cf17  const }\{\par
851     *os << (full_match_ ? {\cf22 "matches"} : {\cf22 "contains"}) << {\cf22 " regular expression "};\par
852     UniversalPrinter<std::string>::Print(regex_->pattern(), os);\par
853   \}\par
854 \par
855   {\cf18 void} DescribeNegationTo(::std::ostream* os){\cf17  const }\{\par
856     *os << {\cf22 "doesn't "} << (full_match_ ? {\cf22 "match"} : {\cf22 "contain"})\par
857         << {\cf22 " regular expression "};\par
858     UniversalPrinter<std::string>::Print(regex_->pattern(), os);\par
859   \}\par
860 \par
861  {\cf17 private}:\par
862   {\cf17 const} std::shared_ptr<const RE> regex_;\par
863   {\cf17 const} {\cf18 bool} full_match_;\par
864 \};\par
865 \}  {\cf20 // namespace internal}\par
866 \par
867 {\cf20 // Matches a string that fully matches regular expression 'regex'.}\par
868 {\cf20 // The matcher takes ownership of 'regex'.}\par
869 {\cf17 inline} PolymorphicMatcher<internal::MatchesRegexMatcher> MatchesRegex(\par
870     {\cf17 const} internal::RE* regex) \{\par
871   {\cf19 return} MakePolymorphicMatcher(internal::MatchesRegexMatcher(regex, {\cf17 true}));\par
872 \}\par
873 {\cf17 template} <{\cf17 typename} T = std::{\cf18 string}>\par
874 PolymorphicMatcher<internal::MatchesRegexMatcher> MatchesRegex(\par
875     {\cf17 const} internal::StringLike<T>& regex) \{\par
876   {\cf19 return} MatchesRegex({\cf17 new} internal::RE(std::string(regex)));\par
877 \}\par
878 \par
879 {\cf20 // Matches a string that contains regular expression 'regex'.}\par
880 {\cf20 // The matcher takes ownership of 'regex'.}\par
881 {\cf17 inline} PolymorphicMatcher<internal::MatchesRegexMatcher> ContainsRegex(\par
882     {\cf17 const} internal::RE* regex) \{\par
883   {\cf19 return} MakePolymorphicMatcher(internal::MatchesRegexMatcher(regex, {\cf17 false}));\par
884 \}\par
885 {\cf17 template} <{\cf17 typename} T = std::{\cf18 string}>\par
886 PolymorphicMatcher<internal::MatchesRegexMatcher> ContainsRegex(\par
887     {\cf17 const} internal::StringLike<T>& regex) \{\par
888   {\cf19 return} ContainsRegex({\cf17 new} internal::RE(std::string(regex)));\par
889 \}\par
890 \par
891 {\cf20 // Creates a polymorphic matcher that matches anything equal to x.}\par
892 {\cf20 // Note: if the parameter of Eq() were declared as const T&, Eq("foo")}\par
893 {\cf20 // wouldn't compile.}\par
894 {\cf17 template} <{\cf17 typename} T>\par
895 {\cf17 inline} internal::EqMatcher<T> Eq(T x) \{\par
896   {\cf19 return} internal::EqMatcher<T>(x);\par
897 \}\par
898 \par
899 {\cf20 // Constructs a Matcher<T> from a 'value' of type T.  The constructed}\par
900 {\cf20 // matcher matches any value that's equal to 'value'.}\par
901 {\cf17 template} <{\cf17 typename} T>\par
902 Matcher<T>::Matcher(T value) \{\par
903   *{\cf17 this} = Eq(value);\par
904 \}\par
905 \par
906 {\cf20 // Creates a monomorphic matcher that matches anything with type Lhs}\par
907 {\cf20 // and equal to rhs.  A user may need to use this instead of Eq(...)}\par
908 {\cf20 // in order to resolve an overloading ambiguity.}\par
909 {\cf20 //}\par
910 {\cf20 // TypedEq<T>(x) is just a convenient short-hand for Matcher<T>(Eq(x))}\par
911 {\cf20 // or Matcher<T>(x), but more readable than the latter.}\par
912 {\cf20 //}\par
913 {\cf20 // We could define similar monomorphic matchers for other comparison}\par
914 {\cf20 // operations (e.g. TypedLt, TypedGe, and etc), but decided not to do}\par
915 {\cf20 // it yet as those are used much less than Eq() in practice.  A user}\par
916 {\cf20 // can always write Matcher<T>(Lt(5)) to be explicit about the type,}\par
917 {\cf20 // for example.}\par
918 {\cf17 template} <{\cf17 typename} Lhs, {\cf17 typename} Rhs>\par
919 {\cf17 inline} Matcher<Lhs> TypedEq({\cf17 const} Rhs& rhs) \{\par
920   {\cf19 return} Eq(rhs);\par
921 \}\par
922 \par
923 {\cf20 // Creates a polymorphic matcher that matches anything >= x.}\par
924 {\cf17 template} <{\cf17 typename} Rhs>\par
925 {\cf17 inline} internal::GeMatcher<Rhs> Ge(Rhs x) \{\par
926   {\cf19 return} internal::GeMatcher<Rhs>(x);\par
927 \}\par
928 \par
929 {\cf20 // Creates a polymorphic matcher that matches anything > x.}\par
930 {\cf17 template} <{\cf17 typename} Rhs>\par
931 {\cf17 inline} internal::GtMatcher<Rhs> Gt(Rhs x) \{\par
932   {\cf19 return} internal::GtMatcher<Rhs>(x);\par
933 \}\par
934 \par
935 {\cf20 // Creates a polymorphic matcher that matches anything <= x.}\par
936 {\cf17 template} <{\cf17 typename} Rhs>\par
937 {\cf17 inline} internal::LeMatcher<Rhs> Le(Rhs x) \{\par
938   {\cf19 return} internal::LeMatcher<Rhs>(x);\par
939 \}\par
940 \par
941 {\cf20 // Creates a polymorphic matcher that matches anything < x.}\par
942 {\cf17 template} <{\cf17 typename} Rhs>\par
943 {\cf17 inline} internal::LtMatcher<Rhs> Lt(Rhs x) \{\par
944   {\cf19 return} internal::LtMatcher<Rhs>(x);\par
945 \}\par
946 \par
947 {\cf20 // Creates a polymorphic matcher that matches anything != x.}\par
948 {\cf17 template} <{\cf17 typename} Rhs>\par
949 {\cf17 inline} internal::NeMatcher<Rhs> Ne(Rhs x) \{\par
950   {\cf19 return} internal::NeMatcher<Rhs>(x);\par
951 \}\par
952 \}  {\cf20 // namespace testing}\par
953 \par
954 GTEST_DISABLE_MSC_WARNINGS_POP_()  {\cf20 //  4251 5046}\par
955 \par
956 {\cf21 #endif  }{\cf20 // GOOGLETEST_INCLUDE_GTEST_GTEST_MATCHERS_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest-message.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googletest/include/gtest/gtest-message.h}
{\xe \v lib/googletest-main/googletest/include/gtest/gtest-message.h}
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2005, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // The Google C++ Testing and Mocking Framework (Google Test)}\par
31 {\cf20 //}\par
32 {\cf20 // This header file defines the Message class.}\par
33 {\cf20 //}\par
34 {\cf20 // IMPORTANT NOTE: Due to limitation of the C++ language, we have to}\par
35 {\cf20 // leave some internal implementation details in this header file.}\par
36 {\cf20 // They are clearly marked by comments like this:}\par
37 {\cf20 //}\par
38 {\cf20 //   // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.}\par
39 {\cf20 //}\par
40 {\cf20 // Such code is NOT meant to be used by a user directly, and is subject}\par
41 {\cf20 // to CHANGE WITHOUT NOTICE.  Therefore DO NOT DEPEND ON IT in a user}\par
42 {\cf20 // program!}\par
43 \par
44 {\cf20 // IWYU pragma: private, include "gtest/gtest.h"}\par
45 {\cf20 // IWYU pragma: friend gtest/.*}\par
46 {\cf20 // IWYU pragma: friend gmock/.*}\par
47 \par
48 {\cf21 #ifndef GOOGLETEST_INCLUDE_GTEST_GTEST_MESSAGE_H_}\par
49 {\cf21 #define GOOGLETEST_INCLUDE_GTEST_GTEST_MESSAGE_H_}\par
50 \par
51 {\cf21 #include <limits>}\par
52 {\cf21 #include <memory>}\par
53 {\cf21 #include <sstream>}\par
54 \par
55 {\cf21 #include "gtest/internal/gtest-port.h"}\par
56 \par
57 GTEST_DISABLE_MSC_WARNINGS_PUSH_(4251 \\\par
58 {\cf20 /* class A needs to have dll-interface to be used by clients of class B */})\par
59 \par
60 {\cf20 // Ensures that there is at least one operator<< in the global namespace.}\par
61 {\cf20 // See Message& operator<<(...) below for why.}\par
62 void operator<<(const testing::internal::Secret&, {\cf18 int});\par
63 \par
64 namespace testing \{\par
65 \par
66 {\cf20 // The Message class works like an ostream repeater.}\par
67 {\cf20 //}\par
68 {\cf20 // Typical usage:}\par
69 {\cf20 //}\par
70 {\cf20 //   1. You stream a bunch of values to a Message object.}\par
71 {\cf20 //      It will remember the text in a stringstream.}\par
72 {\cf20 //   2. Then you stream the Message object to an ostream.}\par
73 {\cf20 //      This causes the text in the Message to be streamed}\par
74 {\cf20 //      to the ostream.}\par
75 {\cf20 //}\par
76 {\cf20 // For example;}\par
77 {\cf20 //}\par
78 {\cf20 //   testing::Message foo;}\par
79 {\cf20 //   foo << 1 << " != " << 2;}\par
80 {\cf20 //   std::cout << foo;}\par
81 {\cf20 //}\par
82 {\cf20 // will print "1 != 2".}\par
83 {\cf20 //}\par
84 {\cf20 // Message is not intended to be inherited from.  In particular, its}\par
85 {\cf20 // destructor is not virtual.}\par
86 {\cf20 //}\par
87 {\cf20 // Note that stringstream behaves differently in gcc and in MSVC.  You}\par
88 {\cf20 // can stream a NULL char pointer to it in the former, but not in the}\par
89 {\cf20 // latter (it causes an access violation if you do).  The Message}\par
90 {\cf20 // class hides this difference by treating a NULL char pointer as}\par
91 {\cf20 // "(null)".}\par
92 {\cf17 class }GTEST_API_ Message \{\par
93  {\cf17 private}:\par
94   {\cf20 // The type of basic IO manipulators (endl, ends, and flush) for}\par
95   {\cf20 // narrow streams.}\par
96   {\cf17 typedef} std::ostream& (*BasicNarrowIoManip)(std::ostream&);\par
97 \par
98  {\cf17 public}:\par
99   {\cf20 // Constructs an empty Message.}\par
100   Message();\par
101 \par
102   {\cf20 // Copy constructor.}\par
103   Message({\cf17 const} Message& msg) : ss_(new ::std::stringstream) \{  {\cf20 // NOLINT}\par
104     *ss_ << msg.GetString();\par
105   \}\par
106 \par
107   {\cf20 // Constructs a Message from a C-string.}\par
108   {\cf17 explicit} Message({\cf17 const} {\cf18 char}* str) : ss_(new ::std::stringstream) \{\par
109     *ss_ << str;\par
110   \}\par
111 \par
112   {\cf20 // Streams a non-pointer value to this object.}\par
113   {\cf17 template} <{\cf17 typename} T>\par
114   {\cf17 inline} Message& operator<<({\cf17 const} T& val) \{\par
115         {\cf20 // Some libraries overload << for STL containers.  These}\par
116     {\cf20 // overloads are defined in the global namespace instead of ::std.}\par
117     {\cf20 //}\par
118     {\cf20 // C++'s symbol lookup rule (i.e. Koenig lookup) says that these}\par
119     {\cf20 // overloads are visible in either the std namespace or the global}\par
120     {\cf20 // namespace, but not other namespaces, including the testing}\par
121     {\cf20 // namespace which Google Test's Message class is in.}\par
122     {\cf20 //}\par
123     {\cf20 // To allow STL containers (and other types that has a << operator}\par
124     {\cf20 // defined in the global namespace) to be used in Google Test}\par
125     {\cf20 // assertions, testing::Message must access the custom << operator}\par
126     {\cf20 // from the global namespace.  With this using declaration,}\par
127     {\cf20 // overloads of << defined in the global namespace and those}\par
128     {\cf20 // visible via Koenig lookup are both exposed in this function.}\par
129     using ::operator<<;\par
130     *ss_ << val;\par
131     {\cf19 return} *{\cf17 this};\par
132   \}\par
133 \par
134   {\cf20 // Streams a pointer value to this object.}\par
135   {\cf20 //}\par
136   {\cf20 // This function is an overload of the previous one.  When you}\par
137   {\cf20 // stream a pointer to a Message, this definition will be used as it}\par
138   {\cf20 // is more specialized.  (The C++ Standard, section}\par
139   {\cf20 // [temp.func.order].)  If you stream a non-pointer, then the}\par
140   {\cf20 // previous definition will be used.}\par
141   {\cf20 //}\par
142   {\cf20 // The reason for this overload is that streaming a NULL pointer to}\par
143   {\cf20 // ostream is undefined behavior.  Depending on the compiler, you}\par
144   {\cf20 // may get "0", "(nil)", "(null)", or an access violation.  To}\par
145   {\cf20 // ensure consistent result across compilers, we always treat NULL}\par
146   {\cf20 // as "(null)".}\par
147   {\cf17 template} <{\cf17 typename} T>\par
148   {\cf17 inline} Message& operator<<(T* {\cf17 const}& pointer) \{  {\cf20 // NOLINT}\par
149     {\cf19 if} (pointer == {\cf17 nullptr}) \{\par
150       *ss_ << {\cf22 "(null)"};\par
151     \} {\cf19 else} \{\par
152       *ss_ << pointer;\par
153     \}\par
154     {\cf19 return} *{\cf17 this};\par
155   \}\par
156 \par
157   {\cf20 // Since the basic IO manipulators are overloaded for both narrow}\par
158   {\cf20 // and wide streams, we have to provide this specialized definition}\par
159   {\cf20 // of operator <<, even though its body is the same as the}\par
160   {\cf20 // templatized version above.  Without this definition, streaming}\par
161   {\cf20 // endl or other basic IO manipulators to Message will confuse the}\par
162   {\cf20 // compiler.}\par
163   Message& operator<<(BasicNarrowIoManip val) \{\par
164     *ss_ << val;\par
165     {\cf19 return} *{\cf17 this};\par
166   \}\par
167 \par
168   {\cf20 // Instead of 1/0, we want to see true/false for bool values.}\par
169   Message& operator<<({\cf18 bool} b) \{ {\cf19 return} *{\cf17 this} << (b ? {\cf22 "true"} : {\cf22 "false"}); \}\par
170 \par
171   {\cf20 // These two overloads allow streaming a wide C string to a Message}\par
172   {\cf20 // using the UTF-8 encoding.}\par
173   Message& operator<<({\cf17 const} {\cf18 wchar_t}* wide_c_str);\par
174   Message& operator<<({\cf18 wchar_t}* wide_c_str);\par
175 \par
176 {\cf21 #if GTEST_HAS_STD_WSTRING}\par
177   {\cf20 // Converts the given wide string to a narrow string using the UTF-8}\par
178   {\cf20 // encoding, and streams the result to this Message object.}\par
179   Message& operator<<(const ::std::wstring& wstr);\par
180 {\cf21 #endif  }{\cf20 // GTEST_HAS_STD_WSTRING}\par
181 \par
182   {\cf20 // Gets the text streamed to this object so far as an std::string.}\par
183   {\cf20 // Each '\\0' character in the buffer is replaced with "\\\\0".}\par
184   {\cf20 //}\par
185   {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.}\par
186   std::string GetString() {\cf17 const};\par
187 \par
188  {\cf17 private}:\par
189   {\cf20 // We'll hold the text streamed to this object here.}\par
190   {\cf17 const} std::unique_ptr< ::std::stringstream> ss_;\par
191 \par
192   {\cf20 // We declare (but don't implement) this to prevent the compiler}\par
193   {\cf20 // from implementing the assignment operator.}\par
194   {\cf18 void} operator=({\cf17 const} Message&);\par
195 \};\par
196 \par
197 {\cf20 // Streams a Message to an ostream.}\par
198 {\cf17 inline} std::ostream& operator<<(std::ostream& os, {\cf17 const} Message& sb) \{\par
199   {\cf19 return} os << sb.GetString();\par
200 \}\par
201 \par
202 {\cf17 namespace }internal \{\par
203 \par
204 {\cf20 // Converts a streamable value to an std::string.  A NULL pointer is}\par
205 {\cf20 // converted to "(null)".  When the input value is a ::string,}\par
206 {\cf20 // ::std::string, ::wstring, or ::std::wstring object, each NUL}\par
207 {\cf20 // character in it is replaced with "\\\\0".}\par
208 {\cf17 template} <{\cf17 typename} T>\par
209 std::string StreamableToString({\cf17 const} T& streamable) \{\par
210   {\cf19 return} (Message() << streamable).GetString();\par
211 \}\par
212 \par
213 \}  {\cf20 // namespace internal}\par
214 \}  {\cf20 // namespace testing}\par
215 \par
216 GTEST_DISABLE_MSC_WARNINGS_POP_()  {\cf20 //  4251}\par
217 \par
218 {\cf21 #endif  }{\cf20 // GOOGLETEST_INCLUDE_GTEST_GTEST_MESSAGE_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest-param-test.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googletest/include/gtest/gtest-param-test.h}
{\xe \v lib/googletest-main/googletest/include/gtest/gtest-param-test.h}
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2008, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // Macros and functions for implementing parameterized tests}\par
31 {\cf20 // in Google C++ Testing and Mocking Framework (Google Test)}\par
32 \par
33 {\cf20 // IWYU pragma: private, include "gtest/gtest.h"}\par
34 {\cf20 // IWYU pragma: friend gtest/.*}\par
35 {\cf20 // IWYU pragma: friend gmock/.*}\par
36 \par
37 {\cf21 #ifndef GOOGLETEST_INCLUDE_GTEST_GTEST_PARAM_TEST_H_}\par
38 {\cf21 #define GOOGLETEST_INCLUDE_GTEST_GTEST_PARAM_TEST_H_}\par
39 \par
40 {\cf20 // Value-parameterized tests allow you to test your code with different}\par
41 {\cf20 // parameters without writing multiple copies of the same test.}\par
42 {\cf20 //}\par
43 {\cf20 // Here is how you use value-parameterized tests:}\par
44 \par
45 {\cf21 #if 0}\par
46 \par
47 {\cf20 // To write value-parameterized tests, first you should define a fixture}\par
48 {\cf20 // class. It is usually derived from testing::TestWithParam<T> (see below for}\par
49 {\cf20 // another inheritance scheme that's sometimes useful in more complicated}\par
50 {\cf20 // class hierarchies), where the type of your parameter values.}\par
51 {\cf20 // TestWithParam<T> is itself derived from testing::Test. T can be any}\par
52 {\cf20 // copyable type. If it's a raw pointer, you are responsible for managing the}\par
53 {\cf20 // lifespan of the pointed values.}\par
54 \par
55 {\cf17 class }FooTest : {\cf17 public} ::testing::TestWithParam<const char*> \{\par
56   {\cf20 // You can implement all the usual class fixture members here.}\par
57 \};\par
58 \par
59 {\cf20 // Then, use the TEST_P macro to define as many parameterized tests}\par
60 {\cf20 // for this fixture as you want. The _P suffix is for "parameterized"}\par
61 {\cf20 // or "pattern", whichever you prefer to think.}\par
62 \par
63 TEST_P(FooTest, DoesBlah) \{\par
64   {\cf20 // Inside a test, access the test parameter with the GetParam() method}\par
65   {\cf20 // of the TestWithParam<T> class:}\par
66   EXPECT_TRUE(foo.Blah(GetParam()));\par
67   ...\par
68 \}\par
69 \par
70 TEST_P(FooTest, HasBlahBlah) \{\par
71   ...\par
72 \}\par
73 \par
74 {\cf20 // Finally, you can use INSTANTIATE_TEST_SUITE_P to instantiate the test}\par
75 {\cf20 // case with any set of parameters you want. Google Test defines a number}\par
76 {\cf20 // of functions for generating test parameters. They return what we call}\par
77 {\cf20 // (surprise!) parameter generators. Here is a summary of them, which}\par
78 {\cf20 // are all in the testing namespace:}\par
79 {\cf20 //}\par
80 {\cf20 //}\par
81 {\cf20 //  Range(begin, end [, step]) - Yields values \{begin, begin+step,}\par
82 {\cf20 //                               begin+step+step, ...\}. The values do not}\par
83 {\cf20 //                               include end. step defaults to 1.}\par
84 {\cf20 //  Values(v1, v2, ..., vN)    - Yields values \{v1, v2, ..., vN\}.}\par
85 {\cf20 //  ValuesIn(container)        - Yields values from a C-style array, an STL}\par
86 {\cf20 //  ValuesIn(begin,end)          container, or an iterator range [begin, end).}\par
87 {\cf20 //  Bool()                     - Yields sequence \{false, true\}.}\par
88 {\cf20 //  Combine(g1, g2, ..., gN)   - Yields all combinations (the Cartesian product}\par
89 {\cf20 //                               for the math savvy) of the values generated}\par
90 {\cf20 //                               by the N generators.}\par
91 {\cf20 //}\par
92 {\cf20 // For more details, see comments at the definitions of these functions below}\par
93 {\cf20 // in this file.}\par
94 {\cf20 //}\par
95 {\cf20 // The following statement will instantiate tests from the FooTest test suite}\par
96 {\cf20 // each with parameter values "meeny", "miny", and "moe".}\par
97 \par
98 INSTANTIATE_TEST_SUITE_P(InstantiationName,\par
99                          FooTest,\par
100                          Values({\cf22 "meeny"}, {\cf22 "miny"}, {\cf22 "moe"}));\par
101 \par
102 {\cf20 // To distinguish different instances of the pattern, (yes, you}\par
103 {\cf20 // can instantiate it more than once) the first argument to the}\par
104 {\cf20 // INSTANTIATE_TEST_SUITE_P macro is a prefix that will be added to the}\par
105 {\cf20 // actual test suite name. Remember to pick unique prefixes for different}\par
106 {\cf20 // instantiations. The tests from the instantiation above will have}\par
107 {\cf20 // these names:}\par
108 {\cf20 //}\par
109 {\cf20 //    * InstantiationName/FooTest.DoesBlah/0 for "meeny"}\par
110 {\cf20 //    * InstantiationName/FooTest.DoesBlah/1 for "miny"}\par
111 {\cf20 //    * InstantiationName/FooTest.DoesBlah/2 for "moe"}\par
112 {\cf20 //    * InstantiationName/FooTest.HasBlahBlah/0 for "meeny"}\par
113 {\cf20 //    * InstantiationName/FooTest.HasBlahBlah/1 for "miny"}\par
114 {\cf20 //    * InstantiationName/FooTest.HasBlahBlah/2 for "moe"}\par
115 {\cf20 //}\par
116 {\cf20 // You can use these names in --gtest_filter.}\par
117 {\cf20 //}\par
118 {\cf20 // This statement will instantiate all tests from FooTest again, each}\par
119 {\cf20 // with parameter values "cat" and "dog":}\par
120 \par
121 {\cf17 const} {\cf18 char}* pets[] = \{{\cf22 "cat"}, {\cf22 "dog"}\};\par
122 INSTANTIATE_TEST_SUITE_P(AnotherInstantiationName, FooTest, ValuesIn(pets));\par
123 \par
124 {\cf20 // The tests from the instantiation above will have these names:}\par
125 {\cf20 //}\par
126 {\cf20 //    * AnotherInstantiationName/FooTest.DoesBlah/0 for "cat"}\par
127 {\cf20 //    * AnotherInstantiationName/FooTest.DoesBlah/1 for "dog"}\par
128 {\cf20 //    * AnotherInstantiationName/FooTest.HasBlahBlah/0 for "cat"}\par
129 {\cf20 //    * AnotherInstantiationName/FooTest.HasBlahBlah/1 for "dog"}\par
130 {\cf20 //}\par
131 {\cf20 // Please note that INSTANTIATE_TEST_SUITE_P will instantiate all tests}\par
132 {\cf20 // in the given test suite, whether their definitions come before or}\par
133 {\cf20 // AFTER the INSTANTIATE_TEST_SUITE_P statement.}\par
134 {\cf20 //}\par
135 {\cf20 // Please also note that generator expressions (including parameters to the}\par
136 {\cf20 // generators) are evaluated in InitGoogleTest(), after main() has started.}\par
137 {\cf20 // This allows the user on one hand, to adjust generator parameters in order}\par
138 {\cf20 // to dynamically determine a set of tests to run and on the other hand,}\par
139 {\cf20 // give the user a chance to inspect the generated tests with Google Test}\par
140 {\cf20 // reflection API before RUN_ALL_TESTS() is executed.}\par
141 {\cf20 //}\par
142 {\cf20 // You can see samples/sample7_unittest.cc and samples/sample8_unittest.cc}\par
143 {\cf20 // for more examples.}\par
144 {\cf20 //}\par
145 {\cf20 // In the future, we plan to publish the API for defining new parameter}\par
146 {\cf20 // generators. But for now this interface remains part of the internal}\par
147 {\cf20 // implementation and is subject to change.}\par
148 {\cf20 //}\par
149 {\cf20 //}\par
150 {\cf20 // A parameterized test fixture must be derived from testing::Test and from}\par
151 {\cf20 // testing::WithParamInterface<T>, where T is the type of the parameter}\par
152 {\cf20 // values. Inheriting from TestWithParam<T> satisfies that requirement because}\par
153 {\cf20 // TestWithParam<T> inherits from both Test and WithParamInterface. In more}\par
154 {\cf20 // complicated hierarchies, however, it is occasionally useful to inherit}\par
155 {\cf20 // separately from Test and WithParamInterface. For example:}\par
156 \par
157 {\cf17 class }BaseTest : {\cf17 public} ::testing::Test \{\par
158   {\cf20 // You can inherit all the usual members for a non-parameterized test}\par
159   {\cf20 // fixture here.}\par
160 \};\par
161 \par
162 {\cf17 class }DerivedTest : {\cf17 public} BaseTest, {\cf17 public} ::testing::WithParamInterface<int> \{\par
163   {\cf20 // The usual test fixture members go here too.}\par
164 \};\par
165 \par
166 TEST_F(BaseTest, HasFoo) \{\par
167   {\cf20 // This is an ordinary non-parameterized test.}\par
168 \}\par
169 \par
170 TEST_P(DerivedTest, DoesBlah) \{\par
171   {\cf20 // GetParam works just the same here as if you inherit from TestWithParam.}\par
172   EXPECT_TRUE(foo.Blah(GetParam()));\par
173 \}\par
174 \par
175 {\cf21 #endif  }{\cf20 // 0}\par
176 \par
177 {\cf21 #include <iterator>}\par
178 {\cf21 #include <utility>}\par
179 \par
180 {\cf21 #include "gtest/internal/gtest-internal.h"}\par
181 {\cf21 #include "gtest/internal/gtest-param-util.h"}\par
182 {\cf21 #include "gtest/internal/gtest-port.h"}\par
183 \par
184 {\cf17 namespace }testing \{\par
185 \par
186 {\cf20 // Functions producing parameter generators.}\par
187 {\cf20 //}\par
188 {\cf20 // Google Test uses these generators to produce parameters for value-}\par
189 {\cf20 // parameterized tests. When a parameterized test suite is instantiated}\par
190 {\cf20 // with a particular generator, Google Test creates and runs tests}\par
191 {\cf20 // for each element in the sequence produced by the generator.}\par
192 {\cf20 //}\par
193 {\cf20 // In the following sample, tests from test suite FooTest are instantiated}\par
194 {\cf20 // each three times with parameter values 3, 5, and 8:}\par
195 {\cf20 //}\par
196 {\cf20 // class FooTest : public TestWithParam<int> \{ ... \};}\par
197 {\cf20 //}\par
198 {\cf20 // TEST_P(FooTest, TestThis) \{}\par
199 {\cf20 // \}}\par
200 {\cf20 // TEST_P(FooTest, TestThat) \{}\par
201 {\cf20 // \}}\par
202 {\cf20 // INSTANTIATE_TEST_SUITE_P(TestSequence, FooTest, Values(3, 5, 8));}\par
203 {\cf20 //}\par
204 \par
205 {\cf20 // Range() returns generators providing sequences of values in a range.}\par
206 {\cf20 //}\par
207 {\cf20 // Synopsis:}\par
208 {\cf20 // Range(start, end)}\par
209 {\cf20 //   - returns a generator producing a sequence of values \{start, start+1,}\par
210 {\cf20 //     start+2, ..., \}.}\par
211 {\cf20 // Range(start, end, step)}\par
212 {\cf20 //   - returns a generator producing a sequence of values \{start, start+step,}\par
213 {\cf20 //     start+step+step, ..., \}.}\par
214 {\cf20 // Notes:}\par
215 {\cf20 //   * The generated sequences never include end. For example, Range(1, 5)}\par
216 {\cf20 //     returns a generator producing a sequence \{1, 2, 3, 4\}. Range(1, 9, 2)}\par
217 {\cf20 //     returns a generator producing \{1, 3, 5, 7\}.}\par
218 {\cf20 //   * start and end must have the same type. That type may be any integral or}\par
219 {\cf20 //     floating-point type or a user defined type satisfying these conditions:}\par
220 {\cf20 //     * It must be assignable (have operator=() defined).}\par
221 {\cf20 //     * It must have operator+() (operator+(int-compatible type) for}\par
222 {\cf20 //       two-operand version).}\par
223 {\cf20 //     * It must have operator<() defined.}\par
224 {\cf20 //     Elements in the resulting sequences will also have that type.}\par
225 {\cf20 //   * Condition start < end must be satisfied in order for resulting sequences}\par
226 {\cf20 //     to contain any elements.}\par
227 {\cf20 //}\par
228 {\cf17 template} <{\cf17 typename} T, {\cf17 typename} IncrementT>\par
229 internal::ParamGenerator<T> Range(T start, T end, IncrementT step) \{\par
230   {\cf19 return} internal::ParamGenerator<T>(\par
231       {\cf17 new} internal::RangeGenerator<T, IncrementT>(start, end, step));\par
232 \}\par
233 \par
234 {\cf17 template} <{\cf17 typename} T>\par
235 internal::ParamGenerator<T> Range(T start, T end) \{\par
236   {\cf19 return} Range(start, end, 1);\par
237 \}\par
238 \par
239 {\cf20 // ValuesIn() function allows generation of tests with parameters coming from}\par
240 {\cf20 // a container.}\par
241 {\cf20 //}\par
242 {\cf20 // Synopsis:}\par
243 {\cf20 // ValuesIn(const T (&array)[N])}\par
244 {\cf20 //   - returns a generator producing sequences with elements from}\par
245 {\cf20 //     a C-style array.}\par
246 {\cf20 // ValuesIn(const Container& container)}\par
247 {\cf20 //   - returns a generator producing sequences with elements from}\par
248 {\cf20 //     an STL-style container.}\par
249 {\cf20 // ValuesIn(Iterator begin, Iterator end)}\par
250 {\cf20 //   - returns a generator producing sequences with elements from}\par
251 {\cf20 //     a range [begin, end) defined by a pair of STL-style iterators. These}\par
252 {\cf20 //     iterators can also be plain C pointers.}\par
253 {\cf20 //}\par
254 {\cf20 // Please note that ValuesIn copies the values from the containers}\par
255 {\cf20 // passed in and keeps them to generate tests in RUN_ALL_TESTS().}\par
256 {\cf20 //}\par
257 {\cf20 // Examples:}\par
258 {\cf20 //}\par
259 {\cf20 // This instantiates tests from test suite StringTest}\par
260 {\cf20 // each with C-string values of "foo", "bar", and "baz":}\par
261 {\cf20 //}\par
262 {\cf20 // const char* strings[] = \{"foo", "bar", "baz"\};}\par
263 {\cf20 // INSTANTIATE_TEST_SUITE_P(StringSequence, StringTest, ValuesIn(strings));}\par
264 {\cf20 //}\par
265 {\cf20 // This instantiates tests from test suite StlStringTest}\par
266 {\cf20 // each with STL strings with values "a" and "b":}\par
267 {\cf20 //}\par
268 {\cf20 // ::std::vector< ::std::string> GetParameterStrings() \{}\par
269 {\cf20 //   ::std::vector< ::std::string> v;}\par
270 {\cf20 //   v.push_back("a");}\par
271 {\cf20 //   v.push_back("b");}\par
272 {\cf20 //   return v;}\par
273 {\cf20 // \}}\par
274 {\cf20 //}\par
275 {\cf20 // INSTANTIATE_TEST_SUITE_P(CharSequence,}\par
276 {\cf20 //                          StlStringTest,}\par
277 {\cf20 //                          ValuesIn(GetParameterStrings()));}\par
278 {\cf20 //}\par
279 {\cf20 //}\par
280 {\cf20 // This will also instantiate tests from CharTest}\par
281 {\cf20 // each with parameter values 'a' and 'b':}\par
282 {\cf20 //}\par
283 {\cf20 // ::std::list<char> GetParameterChars() \{}\par
284 {\cf20 //   ::std::list<char> list;}\par
285 {\cf20 //   list.push_back('a');}\par
286 {\cf20 //   list.push_back('b');}\par
287 {\cf20 //   return list;}\par
288 {\cf20 // \}}\par
289 {\cf20 // ::std::list<char> l = GetParameterChars();}\par
290 {\cf20 // INSTANTIATE_TEST_SUITE_P(CharSequence2,}\par
291 {\cf20 //                          CharTest,}\par
292 {\cf20 //                          ValuesIn(l.begin(), l.end()));}\par
293 {\cf20 //}\par
294 {\cf17 template} <{\cf17 typename} ForwardIterator>\par
295 internal::ParamGenerator<\par
296     {\cf17 typename} std::iterator_traits<ForwardIterator>::value_type>\par
297 ValuesIn(ForwardIterator begin, ForwardIterator end) \{\par
298   {\cf17 typedef} {\cf17 typename} std::iterator_traits<ForwardIterator>::value_type ParamType;\par
299   {\cf19 return} internal::ParamGenerator<ParamType>(\par
300       {\cf17 new} internal::ValuesInIteratorRangeGenerator<ParamType>(begin, end));\par
301 \}\par
302 \par
303 {\cf17 template} <{\cf17 typename} T, {\cf18 size_t} N>\par
304 internal::ParamGenerator<T> ValuesIn({\cf17 const} T (&array)[N]) \{\par
305   {\cf19 return} ValuesIn(array, array + N);\par
306 \}\par
307 \par
308 {\cf17 template} <{\cf17 class} Container>\par
309 internal::ParamGenerator<typename Container::value_type> ValuesIn(\par
310     {\cf17 const} Container& container) \{\par
311   {\cf19 return} ValuesIn(container.begin(), container.end());\par
312 \}\par
313 \par
314 {\cf20 // Values() allows generating tests from explicitly specified list of}\par
315 {\cf20 // parameters.}\par
316 {\cf20 //}\par
317 {\cf20 // Synopsis:}\par
318 {\cf20 // Values(T v1, T v2, ..., T vN)}\par
319 {\cf20 //   - returns a generator producing sequences with elements v1, v2, ..., vN.}\par
320 {\cf20 //}\par
321 {\cf20 // For example, this instantiates tests from test suite BarTest each}\par
322 {\cf20 // with values "one", "two", and "three":}\par
323 {\cf20 //}\par
324 {\cf20 // INSTANTIATE_TEST_SUITE_P(NumSequence,}\par
325 {\cf20 //                          BarTest,}\par
326 {\cf20 //                          Values("one", "two", "three"));}\par
327 {\cf20 //}\par
328 {\cf20 // This instantiates tests from test suite BazTest each with values 1, 2, 3.5.}\par
329 {\cf20 // The exact type of values will depend on the type of parameter in BazTest.}\par
330 {\cf20 //}\par
331 {\cf20 // INSTANTIATE_TEST_SUITE_P(FloatingNumbers, BazTest, Values(1, 2, 3.5));}\par
332 {\cf20 //}\par
333 {\cf20 //}\par
334 {\cf17 template} <{\cf17 typename}... T>\par
335 internal::ValueArray<T...> Values(T... v) \{\par
336   {\cf19 return} internal::ValueArray<T...>(std::move(v)...);\par
337 \}\par
338 \par
339 {\cf20 // Bool() allows generating tests with parameters in a set of (false, true).}\par
340 {\cf20 //}\par
341 {\cf20 // Synopsis:}\par
342 {\cf20 // Bool()}\par
343 {\cf20 //   - returns a generator producing sequences with elements \{false, true\}.}\par
344 {\cf20 //}\par
345 {\cf20 // It is useful when testing code that depends on Boolean flags. Combinations}\par
346 {\cf20 // of multiple flags can be tested when several Bool()'s are combined using}\par
347 {\cf20 // Combine() function.}\par
348 {\cf20 //}\par
349 {\cf20 // In the following example all tests in the test suite FlagDependentTest}\par
350 {\cf20 // will be instantiated twice with parameters false and true.}\par
351 {\cf20 //}\par
352 {\cf20 // class FlagDependentTest : public testing::TestWithParam<bool> \{}\par
353 {\cf20 //   virtual void SetUp() \{}\par
354 {\cf20 //     external_flag = GetParam();}\par
355 {\cf20 //   \}}\par
356 {\cf20 // \}}\par
357 {\cf20 // INSTANTIATE_TEST_SUITE_P(BoolSequence, FlagDependentTest, Bool());}\par
358 {\cf20 //}\par
359 {\cf17 inline} internal::ParamGenerator<bool> Bool() \{ {\cf19 return} Values({\cf17 false}, {\cf17 true}); \}\par
360 \par
361 {\cf20 // Combine() allows the user to combine two or more sequences to produce}\par
362 {\cf20 // values of a Cartesian product of those sequences' elements.}\par
363 {\cf20 //}\par
364 {\cf20 // Synopsis:}\par
365 {\cf20 // Combine(gen1, gen2, ..., genN)}\par
366 {\cf20 //   - returns a generator producing sequences with elements coming from}\par
367 {\cf20 //     the Cartesian product of elements from the sequences generated by}\par
368 {\cf20 //     gen1, gen2, ..., genN. The sequence elements will have a type of}\par
369 {\cf20 //     std::tuple<T1, T2, ..., TN> where T1, T2, ..., TN are the types}\par
370 {\cf20 //     of elements from sequences produces by gen1, gen2, ..., genN.}\par
371 {\cf20 //}\par
372 {\cf20 // Example:}\par
373 {\cf20 //}\par
374 {\cf20 // This will instantiate tests in test suite AnimalTest each one with}\par
375 {\cf20 // the parameter values tuple("cat", BLACK), tuple("cat", WHITE),}\par
376 {\cf20 // tuple("dog", BLACK), and tuple("dog", WHITE):}\par
377 {\cf20 //}\par
378 {\cf20 // enum Color \{ BLACK, GRAY, WHITE \};}\par
379 {\cf20 // class AnimalTest}\par
380 {\cf20 //     : public testing::TestWithParam<std::tuple<const char*, Color> > \{...\};}\par
381 {\cf20 //}\par
382 {\cf20 // TEST_P(AnimalTest, AnimalLooksNice) \{...\}}\par
383 {\cf20 //}\par
384 {\cf20 // INSTANTIATE_TEST_SUITE_P(AnimalVariations, AnimalTest,}\par
385 {\cf20 //                          Combine(Values("cat", "dog"),}\par
386 {\cf20 //                                  Values(BLACK, WHITE)));}\par
387 {\cf20 //}\par
388 {\cf20 // This will instantiate tests in FlagDependentTest with all variations of two}\par
389 {\cf20 // Boolean flags:}\par
390 {\cf20 //}\par
391 {\cf20 // class FlagDependentTest}\par
392 {\cf20 //     : public testing::TestWithParam<std::tuple<bool, bool> > \{}\par
393 {\cf20 //   virtual void SetUp() \{}\par
394 {\cf20 //     // Assigns external_flag_1 and external_flag_2 values from the tuple.}\par
395 {\cf20 //     std::tie(external_flag_1, external_flag_2) = GetParam();}\par
396 {\cf20 //   \}}\par
397 {\cf20 // \};}\par
398 {\cf20 //}\par
399 {\cf20 // TEST_P(FlagDependentTest, TestFeature1) \{}\par
400 {\cf20 //   // Test your code using external_flag_1 and external_flag_2 here.}\par
401 {\cf20 // \}}\par
402 {\cf20 // INSTANTIATE_TEST_SUITE_P(TwoBoolSequence, FlagDependentTest,}\par
403 {\cf20 //                          Combine(Bool(), Bool()));}\par
404 {\cf20 //}\par
405 {\cf17 template} <{\cf17 typename}... Generator>\par
406 internal::CartesianProductHolder<Generator...> Combine({\cf17 const} Generator&... g) \{\par
407   {\cf19 return} internal::CartesianProductHolder<Generator...>(g...);\par
408 \}\par
409 \par
410 {\cf20 // ConvertGenerator() wraps a parameter generator in order to cast each prduced}\par
411 {\cf20 // value through a known type before supplying it to the test suite}\par
412 {\cf20 //}\par
413 {\cf20 // Synopsis:}\par
414 {\cf20 // ConvertGenerator<T>(gen)}\par
415 {\cf20 //   - returns a generator producing the same elements as generated by gen, but}\par
416 {\cf20 //     each element is static_cast to type T before being returned}\par
417 {\cf20 //}\par
418 {\cf20 // It is useful when using the Combine() function to get the generated}\par
419 {\cf20 // parameters in a custom type instead of std::tuple}\par
420 {\cf20 //}\par
421 {\cf20 // Example:}\par
422 {\cf20 //}\par
423 {\cf20 // This will instantiate tests in test suite AnimalTest each one with}\par
424 {\cf20 // the parameter values tuple("cat", BLACK), tuple("cat", WHITE),}\par
425 {\cf20 // tuple("dog", BLACK), and tuple("dog", WHITE):}\par
426 {\cf20 //}\par
427 {\cf20 // enum Color \{ BLACK, GRAY, WHITE \};}\par
428 {\cf20 // struct ParamType \{}\par
429 {\cf20 //   using TupleT = std::tuple<const char*, Color>;}\par
430 {\cf20 //   std::string animal;}\par
431 {\cf20 //   Color color;}\par
432 {\cf20 //   ParamType(TupleT t) : animal(std::get<0>(t)), color(std::get<1>(t)) \{\}}\par
433 {\cf20 // \};}\par
434 {\cf20 // class AnimalTest}\par
435 {\cf20 //     : public testing::TestWithParam<ParamType> \{...\};}\par
436 {\cf20 //}\par
437 {\cf20 // TEST_P(AnimalTest, AnimalLooksNice) \{...\}}\par
438 {\cf20 //}\par
439 {\cf20 // INSTANTIATE_TEST_SUITE_P(AnimalVariations, AnimalTest,}\par
440 {\cf20 //                          ConvertGenerator<ParamType::TupleT>(}\par
441 {\cf20 //                              Combine(Values("cat", "dog"),}\par
442 {\cf20 //                                      Values(BLACK, WHITE))));}\par
443 {\cf20 //}\par
444 {\cf17 template} <{\cf17 typename} T>\par
445 internal::ParamConverterGenerator<T> ConvertGenerator(\par
446     internal::ParamGenerator<T> gen) \{\par
447   {\cf19 return} internal::ParamConverterGenerator<T>(gen);\par
448 \}\par
449 \par
450 {\cf21 #define TEST_P(test_suite_name, test_name)                                     \\}\par
451 {\cf21   class GTEST_TEST_CLASS_NAME_(test_suite_name, test_name)                     \\}\par
452 {\cf21       : public test_suite_name, private ::testing::internal::GTestNonCopyable \{\\}\par
453 {\cf21    public:                                                                     \\}\par
454 {\cf21     GTEST_TEST_CLASS_NAME_(test_suite_name, test_name)() \{\}                    \\}\par
455 {\cf21     void TestBody() override;                                                  \\}\par
456 {\cf21                                                                                \\}\par
457 {\cf21    private:                                                                    \\}\par
458 {\cf21     static int AddToRegistry() \{                                               \\}\par
459 {\cf21       ::testing::UnitTest::GetInstance()                                       \\}\par
460 {\cf21           ->parameterized_test_registry()                                      \\}\par
461 {\cf21           .GetTestSuitePatternHolder<test_suite_name>(                         \\}\par
462 {\cf21               GTEST_STRINGIFY_(test_suite_name),                               \\}\par
463 {\cf21               ::testing::internal::CodeLocation(__FILE__, __LINE__))           \\}\par
464 {\cf21           ->AddTestPattern(                                                    \\}\par
465 {\cf21               GTEST_STRINGIFY_(test_suite_name), GTEST_STRINGIFY_(test_name),  \\}\par
466 {\cf21               new ::testing::internal::TestMetaFactory<GTEST_TEST_CLASS_NAME_( \\}\par
467 {\cf21                   test_suite_name, test_name)>(),                              \\}\par
468 {\cf21               ::testing::internal::CodeLocation(__FILE__, __LINE__));          \\}\par
469 {\cf21       return 0;                                                                \\}\par
470 {\cf21     \}                                                                          \\}\par
471 {\cf21     static int gtest_registering_dummy_ GTEST_ATTRIBUTE_UNUSED_;               \\}\par
472 {\cf21   \};                                                                           \\}\par
473 {\cf21   int GTEST_TEST_CLASS_NAME_(test_suite_name,                                  \\}\par
474 {\cf21                              test_name)::gtest_registering_dummy_ =            \\}\par
475 {\cf21       GTEST_TEST_CLASS_NAME_(test_suite_name, test_name)::AddToRegistry();     \\}\par
476 {\cf21   void GTEST_TEST_CLASS_NAME_(test_suite_name, test_name)::TestBody()}\par
477 \par
478 {\cf20 // The last argument to INSTANTIATE_TEST_SUITE_P allows the user to specify}\par
479 {\cf20 // generator and an optional function or functor that generates custom test name}\par
480 {\cf20 // suffixes based on the test parameters. Such a function or functor should}\par
481 {\cf20 // accept one argument of type testing::TestParamInfo<class ParamType>, and}\par
482 {\cf20 // return std::string.}\par
483 {\cf20 //}\par
484 {\cf20 // testing::PrintToStringParamName is a builtin test suffix generator that}\par
485 {\cf20 // returns the value of testing::PrintToString(GetParam()).}\par
486 {\cf20 //}\par
487 {\cf20 // Note: test names must be non-empty, unique, and may only contain ASCII}\par
488 {\cf20 // alphanumeric characters or underscore. Because PrintToString adds quotes}\par
489 {\cf20 // to std::string and C strings, it won't work for these types.}\par
490 \par
491 {\cf21 #define GTEST_EXPAND_(arg) arg}\par
492 {\cf21 #define GTEST_GET_FIRST_(first, ...) first}\par
493 {\cf21 #define GTEST_GET_SECOND_(first, second, ...) second}\par
494 \par
495 {\cf21 #define INSTANTIATE_TEST_SUITE_P(prefix, test_suite_name, ...)               \\}\par
496 {\cf21   static ::testing::internal::ParamGenerator<test_suite_name::ParamType>     \\}\par
497 {\cf21       gtest_##prefix##test_suite_name##_EvalGenerator_() \{                   \\}\par
498 {\cf21     return GTEST_EXPAND_(GTEST_GET_FIRST_(__VA_ARGS__, DUMMY_PARAM_));       \\}\par
499 {\cf21   \}                                                                          \\}\par
500 {\cf21   static ::std::string gtest_##prefix##test_suite_name##_EvalGenerateName_(  \\}\par
501 {\cf21       const ::testing::TestParamInfo<test_suite_name::ParamType>& info) \{    \\}\par
502 {\cf21     if (::testing::internal::AlwaysFalse()) \{                                \\}\par
503 {\cf21       ::testing::internal::TestNotEmpty(GTEST_EXPAND_(GTEST_GET_SECOND_(     \\}\par
504 {\cf21           __VA_ARGS__,                                                       \\}\par
505 {\cf21           ::testing::internal::DefaultParamName<test_suite_name::ParamType>, \\}\par
506 {\cf21           DUMMY_PARAM_)));                                                   \\}\par
507 {\cf21       auto t = std::make_tuple(__VA_ARGS__);                                 \\}\par
508 {\cf21       static_assert(std::tuple_size<decltype(t)>::value <= 2,                \\}\par
509 {\cf21                     "Too Many Args!"});                                       \\\par
510     \}                                                                        \\\par
511     return ((GTEST_EXPAND_(GTEST_GET_SECOND_(                                \\\par
512         __VA_ARGS__,                                                         \\\par
513         ::testing::internal::DefaultParamName<test_suite_name::ParamType>,   \\\par
514         DUMMY_PARAM_))))(info);                                              \\\par
515   \}                                                                          \\\par
516   static int gtest_##prefix##test_suite_name##_dummy_                        \\\par
517       GTEST_ATTRIBUTE_UNUSED_ =                                              \\\par
518           ::testing::UnitTest::GetInstance()                                 \\\par
519               ->parameterized_test_registry()                                \\\par
520               .GetTestSuitePatternHolder<test_suite_name>(                   \\\par
521                   GTEST_STRINGIFY_(test_suite_name),                         \\\par
522                   ::testing::internal::CodeLocation(__FILE__, __LINE__))     \\\par
523               ->AddTestSuiteInstantiation(                                   \\\par
524                   GTEST_STRINGIFY_(prefix),                                  \\\par
525                   &gtest_##prefix##test_suite_name##_EvalGenerator_,         \\\par
526                   &gtest_##prefix##test_suite_name##_EvalGenerateName_,      \\\par
527                   __FILE__, __LINE__)\par
528 \par
529 {\cf20 // Allow Marking a Parameterized test class as not needing to be instantiated.}\par
530 {\cf21 #define GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(T)                  \\}\par
531 {\cf21   namespace gtest_do_not_use_outside_namespace_scope \{\}                   \\}\par
532 {\cf21   static const ::testing::internal::MarkAsIgnored gtest_allow_ignore_##T( \\}\par
533 {\cf21       GTEST_STRINGIFY_(T))}\par
534 \par
535 {\cf20 // Legacy API is deprecated but still available}\par
536 {\cf21 #ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
537 {\cf21 #define INSTANTIATE_TEST_CASE_P                                            \\}\par
538 {\cf21   static_assert(::testing::internal::InstantiateTestCase_P_IsDeprecated(), \\}\par
539 {\cf21                 ""});                                                       \\\par
540   INSTANTIATE_TEST_SUITE_P\par
541 {\cf21 #endif  }{\cf20 // GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
542 \par
543 \}  {\cf20 // namespace testing}\par
544 \par
545 {\cf21 #endif  }{\cf20 // GOOGLETEST_INCLUDE_GTEST_GTEST_PARAM_TEST_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest-printers.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googletest/include/gtest/gtest-printers.h}
{\xe \v lib/googletest-main/googletest/include/gtest/gtest-printers.h}
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2007, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // Google Test - The Google C++ Testing and Mocking Framework}\par
31 {\cf20 //}\par
32 {\cf20 // This file implements a universal value printer that can print a}\par
33 {\cf20 // value of any type T:}\par
34 {\cf20 //}\par
35 {\cf20 //   void ::testing::internal::UniversalPrinter<T>::Print(value, ostream_ptr);}\par
36 {\cf20 //}\par
37 {\cf20 // A user can teach this function how to print a class type T by}\par
38 {\cf20 // defining either operator<<() or PrintTo() in the namespace that}\par
39 {\cf20 // defines T.  More specifically, the FIRST defined function in the}\par
40 {\cf20 // following list will be used (assuming T is defined in namespace}\par
41 {\cf20 // foo):}\par
42 {\cf20 //}\par
43 {\cf20 //   1. foo::PrintTo(const T&, ostream*)}\par
44 {\cf20 //   2. operator<<(ostream&, const T&) defined in either foo or the}\par
45 {\cf20 //      global namespace.}\par
46 {\cf20 //}\par
47 {\cf20 // However if T is an STL-style container then it is printed element-wise}\par
48 {\cf20 // unless foo::PrintTo(const T&, ostream*) is defined. Note that}\par
49 {\cf20 // operator<<() is ignored for container types.}\par
50 {\cf20 //}\par
51 {\cf20 // If none of the above is defined, it will print the debug string of}\par
52 {\cf20 // the value if it is a protocol buffer, or print the raw bytes in the}\par
53 {\cf20 // value otherwise.}\par
54 {\cf20 //}\par
55 {\cf20 // To aid debugging: when T is a reference type, the address of the}\par
56 {\cf20 // value is also printed; when T is a (const) char pointer, both the}\par
57 {\cf20 // pointer value and the NUL-terminated string it points to are}\par
58 {\cf20 // printed.}\par
59 {\cf20 //}\par
60 {\cf20 // We also provide some convenient wrappers:}\par
61 {\cf20 //}\par
62 {\cf20 //   // Prints a value to a string.  For a (const or not) char}\par
63 {\cf20 //   // pointer, the NUL-terminated string (but not the pointer) is}\par
64 {\cf20 //   // printed.}\par
65 {\cf20 //   std::string ::testing::PrintToString(const T& value);}\par
66 {\cf20 //}\par
67 {\cf20 //   // Prints a value tersely: for a reference type, the referenced}\par
68 {\cf20 //   // value (but not the address) is printed; for a (const or not) char}\par
69 {\cf20 //   // pointer, the NUL-terminated string (but not the pointer) is}\par
70 {\cf20 //   // printed.}\par
71 {\cf20 //   void ::testing::internal::UniversalTersePrint(const T& value, ostream*);}\par
72 {\cf20 //}\par
73 {\cf20 //   // Prints value using the type inferred by the compiler.  The difference}\par
74 {\cf20 //   // from UniversalTersePrint() is that this function prints both the}\par
75 {\cf20 //   // pointer and the NUL-terminated string for a (const or not) char pointer.}\par
76 {\cf20 //   void ::testing::internal::UniversalPrint(const T& value, ostream*);}\par
77 {\cf20 //}\par
78 {\cf20 //   // Prints the fields of a tuple tersely to a string vector, one}\par
79 {\cf20 //   // element for each field. Tuple support must be enabled in}\par
80 {\cf20 //   // gtest-port.h.}\par
81 {\cf20 //   std::vector<string> UniversalTersePrintTupleFieldsToStrings(}\par
82 {\cf20 //       const Tuple& value);}\par
83 {\cf20 //}\par
84 {\cf20 // Known limitation:}\par
85 {\cf20 //}\par
86 {\cf20 // The print primitives print the elements of an STL-style container}\par
87 {\cf20 // using the compiler-inferred type of *iter where iter is a}\par
88 {\cf20 // const_iterator of the container.  When const_iterator is an input}\par
89 {\cf20 // iterator but not a forward iterator, this inferred type may not}\par
90 {\cf20 // match value_type, and the print output may be incorrect.  In}\par
91 {\cf20 // practice, this is rarely a problem as for most containers}\par
92 {\cf20 // const_iterator is a forward iterator.  We'll fix this if there's an}\par
93 {\cf20 // actual need for it.  Note that this fix cannot rely on value_type}\par
94 {\cf20 // being defined as many user-defined container types don't have}\par
95 {\cf20 // value_type.}\par
96 \par
97 {\cf20 // IWYU pragma: private, include "gtest/gtest.h"}\par
98 {\cf20 // IWYU pragma: friend gtest/.*}\par
99 {\cf20 // IWYU pragma: friend gmock/.*}\par
100 \par
101 {\cf21 #ifndef GOOGLETEST_INCLUDE_GTEST_GTEST_PRINTERS_H_}\par
102 {\cf21 #define GOOGLETEST_INCLUDE_GTEST_GTEST_PRINTERS_H_}\par
103 \par
104 {\cf21 #include <functional>}\par
105 {\cf21 #include <memory>}\par
106 {\cf21 #include <ostream>}  {\cf20 // NOLINT}\par
107 {\cf21 #include <sstream>}\par
108 {\cf21 #include <string>}\par
109 {\cf21 #include <tuple>}\par
110 {\cf21 #include <type_traits>}\par
111 {\cf21 #include <utility>}\par
112 {\cf21 #include <vector>}\par
113 \par
114 {\cf21 #include "gtest/internal/gtest-internal.h"}\par
115 {\cf21 #include "gtest/internal/gtest-port.h"}\par
116 \par
117 {\cf17 namespace }testing \{\par
118 \par
119 {\cf20 // Definitions in the internal* namespaces are subject to change without notice.}\par
120 {\cf20 // DO NOT USE THEM IN USER CODE!}\par
121 {\cf17 namespace }internal \{\par
122 \par
123 {\cf17 template} <{\cf17 typename} T>\par
124 {\cf18 void} UniversalPrint({\cf17 const} T& value, ::std::ostream* os);\par
125 \par
126 {\cf20 // Used to print an STL-style container when the user doesn't define}\par
127 {\cf20 // a PrintTo() for it.}\par
128 {\cf17 struct }ContainerPrinter \{\par
129   {\cf17 template} <{\cf17 typename} T,\par
130             {\cf17 typename} = {\cf17 typename} std::enable_if<\par
131                 ({\cf17 sizeof}(IsContainerTest<T>(0)) == {\cf17 sizeof}(IsContainer)) &&\par
132                 !IsRecursiveContainer<T>::value>::type>\par
133   {\cf17 static} {\cf18 void} PrintValue({\cf17 const} T& container, std::ostream* os) \{\par
134     {\cf17 const} {\cf18 size_t} kMaxCount = 32;  {\cf20 // The maximum number of elements to print.}\par
135     *os << {\cf23 '\{'};\par
136     {\cf18 size_t} count = 0;\par
137     {\cf19 for} ({\cf17 auto}&& elem : container) \{\par
138       {\cf19 if} (count > 0) \{\par
139         *os << {\cf23 ','};\par
140         {\cf19 if} (count == kMaxCount) \{  {\cf20 // Enough has been printed.}\par
141           *os << {\cf22 " ..."};\par
142           {\cf19 break};\par
143         \}\par
144       \}\par
145       *os << {\cf23 ' '};\par
146       {\cf20 // We cannot call PrintTo(elem, os) here as PrintTo() doesn't}\par
147       {\cf20 // handle `elem` being a native array.}\par
148       internal::UniversalPrint(elem, os);\par
149       ++count;\par
150     \}\par
151 \par
152     {\cf19 if} (count > 0) \{\par
153       *os << {\cf23 ' '};\par
154     \}\par
155     *os << {\cf23 '\}'};\par
156   \}\par
157 \};\par
158 \par
159 {\cf20 // Used to print a pointer that is neither a char pointer nor a member}\par
160 {\cf20 // pointer, when the user doesn't define PrintTo() for it.  (A member}\par
161 {\cf20 // variable pointer or member function pointer doesn't really point to}\par
162 {\cf20 // a location in the address space.  Their representation is}\par
163 {\cf20 // implementation-defined.  Therefore they will be printed as raw}\par
164 {\cf20 // bytes.)}\par
165 {\cf17 struct }FunctionPointerPrinter \{\par
166   {\cf17 template} <{\cf17 typename} T, {\cf17 typename} = {\cf17 typename} std::enable_if<\par
167                             std::is_function<T>::value>::type>\par
168   {\cf17 static} {\cf18 void} PrintValue(T* p, ::std::ostream* os) \{\par
169     {\cf19 if} (p == {\cf17 nullptr}) \{\par
170       *os << {\cf22 "NULL"};\par
171     \} {\cf19 else} \{\par
172       {\cf20 // T is a function type, so '*os << p' doesn't do what we want}\par
173       {\cf20 // (it just prints p as bool).  We want to print p as a const}\par
174       {\cf20 // void*.}\par
175       *os << reinterpret_cast<const void*>(p);\par
176     \}\par
177   \}\par
178 \};\par
179 \par
180 {\cf17 struct }PointerPrinter \{\par
181   {\cf17 template} <{\cf17 typename} T>\par
182   {\cf17 static} {\cf18 void} PrintValue(T* p, ::std::ostream* os) \{\par
183     {\cf19 if} (p == {\cf17 nullptr}) \{\par
184       *os << {\cf22 "NULL"};\par
185     \} {\cf19 else} \{\par
186       {\cf20 // T is not a function type.  We just call << to print p,}\par
187       {\cf20 // relying on ADL to pick up user-defined << for their pointer}\par
188       {\cf20 // types, if any.}\par
189       *os << p;\par
190     \}\par
191   \}\par
192 \};\par
193 \par
194 {\cf17 namespace }internal_stream_operator_without_lexical_name_lookup \{\par
195 \par
196 {\cf20 // The presence of an operator<< here will terminate lexical scope lookup}\par
197 {\cf20 // straight away (even though it cannot be a match because of its argument}\par
198 {\cf20 // types). Thus, the two operator<< calls in StreamPrinter will find only ADL}\par
199 {\cf20 // candidates.}\par
200 {\cf17 struct }LookupBlocker \{\};\par
201 {\cf18 void} operator<<(LookupBlocker, LookupBlocker);\par
202 \par
203 {\cf17 struct }StreamPrinter \{\par
204   {\cf17 template} <{\cf17 typename} T,\par
205             {\cf20 // Don't accept member pointers here. We'd print them via implicit}\par
206             {\cf20 // conversion to bool, which isn't useful.}\par
207             {\cf17 typename} = {\cf17 typename} std::enable_if<\par
208                 !std::is_member_pointer<T>::value>::type,\par
209             {\cf20 // Only accept types for which we can find a streaming operator via}\par
210             {\cf20 // ADL (possibly involving implicit conversions).}\par
211             {\cf17 typename} = {\cf17 decltype}(std::declval<std::ostream&>()\par
212                                 << std::declval<const T&>())>\par
213   {\cf17 static} {\cf18 void} PrintValue({\cf17 const} T& value, ::std::ostream* os) \{\par
214     {\cf20 // Call streaming operator found by ADL, possibly with implicit conversions}\par
215     {\cf20 // of the arguments.}\par
216     *os << value;\par
217   \}\par
218 \};\par
219 \par
220 \}  {\cf20 // namespace internal_stream_operator_without_lexical_name_lookup}\par
221 \par
222 {\cf17 struct }ProtobufPrinter \{\par
223   {\cf20 // We print a protobuf using its ShortDebugString() when the string}\par
224   {\cf20 // doesn't exceed this many characters; otherwise we print it using}\par
225   {\cf20 // DebugString() for better readability.}\par
226   {\cf17 static} {\cf17 const} {\cf18 size_t} kProtobufOneLinerMaxLength = 50;\par
227 \par
228   {\cf17 template} <{\cf17 typename} T,\par
229             {\cf17 typename} = {\cf17 typename} std::enable_if<\par
230                 internal::HasDebugStringAndShortDebugString<T>::value>::type>\par
231   {\cf17 static} {\cf18 void} PrintValue({\cf17 const} T& value, ::std::ostream* os) \{\par
232     std::string pretty_str = value.ShortDebugString();\par
233     {\cf19 if} (pretty_str.length() > kProtobufOneLinerMaxLength) \{\par
234       pretty_str = {\cf22 "\\n"} + value.DebugString();\par
235     \}\par
236     *os << ({\cf22 "<"} + pretty_str + {\cf22 ">"});\par
237   \}\par
238 \};\par
239 \par
240 {\cf17 struct }ConvertibleToIntegerPrinter \{\par
241   {\cf20 // Since T has no << operator or PrintTo() but can be implicitly}\par
242   {\cf20 // converted to BiggestInt, we print it as a BiggestInt.}\par
243   {\cf20 //}\par
244   {\cf20 // Most likely T is an enum type (either named or unnamed), in which}\par
245   {\cf20 // case printing it as an integer is the desired behavior.  In case}\par
246   {\cf20 // T is not an enum, printing it as an integer is the best we can do}\par
247   {\cf20 // given that it has no user-defined printer.}\par
248   {\cf17 static} {\cf18 void} PrintValue(internal::BiggestInt value, ::std::ostream* os) \{\par
249     *os << value;\par
250   \}\par
251 \};\par
252 \par
253 {\cf17 struct }ConvertibleToStringViewPrinter \{\par
254 {\cf21 #if GTEST_INTERNAL_HAS_STRING_VIEW}\par
255   {\cf17 static} {\cf18 void} PrintValue(internal::StringView value, ::std::ostream* os) \{\par
256     internal::UniversalPrint(value, os);\par
257   \}\par
258 {\cf21 #endif}\par
259 \};\par
260 \par
261 {\cf20 // Prints the given number of bytes in the given object to the given}\par
262 {\cf20 // ostream.}\par
263 GTEST_API_ {\cf18 void} PrintBytesInObjectTo({\cf17 const} {\cf18 unsigned} {\cf18 char}* obj_bytes,\par
264                                      {\cf18 size_t} count, ::std::ostream* os);\par
265 {\cf17 struct }RawBytesPrinter \{\par
266   {\cf20 // SFINAE on `sizeof` to make sure we have a complete type.}\par
267   {\cf17 template} <{\cf17 typename} T, {\cf18 size_t} = sizeof(T)>\par
268   {\cf17 static} {\cf18 void} PrintValue({\cf17 const} T& value, ::std::ostream* os) \{\par
269     PrintBytesInObjectTo(\par
270         {\cf17 static_cast<}{\cf17 const }{\cf18 unsigned} {\cf18 char}*{\cf17 >}(\par
271             {\cf20 // Load bearing cast to void* to support iOS}\par
272             {\cf17 reinterpret_cast<}{\cf17 const }{\cf18 void}*{\cf17 >}(std::addressof(value))),\par
273         {\cf17 sizeof}(value), os);\par
274   \}\par
275 \};\par
276 \par
277 {\cf17 struct }FallbackPrinter \{\par
278   {\cf17 template} <{\cf17 typename} T>\par
279   {\cf17 static} {\cf18 void} PrintValue({\cf17 const} T&, ::std::ostream* os) \{\par
280     *os << {\cf22 "(incomplete type)"};\par
281   \}\par
282 \};\par
283 \par
284 {\cf20 // Try every printer in order and return the first one that works.}\par
285 {\cf17 template} <{\cf17 typename} T, {\cf17 typename} E, {\cf17 typename} Printer, {\cf17 typename}... Printers>\par
286 {\cf17 struct }FindFirstPrinter : FindFirstPrinter<T, E, Printers...> \{\};\par
287 \par
288 {\cf17 template} <{\cf17 typename} T, {\cf17 typename} Printer, {\cf17 typename}... Printers>\par
289 {\cf17 struct }FindFirstPrinter<\par
290     T, decltype(Printer::PrintValue(std::declval<const T&>(), nullptr)),\par
291     Printer, Printers...> \{\par
292   {\cf17 using }type = Printer;\par
293 \};\par
294 \par
295 {\cf20 // Select the best printer in the following order:}\par
296 {\cf20 //  - Print containers (they have begin/end/etc).}\par
297 {\cf20 //  - Print function pointers.}\par
298 {\cf20 //  - Print object pointers.}\par
299 {\cf20 //  - Use the stream operator, if available.}\par
300 {\cf20 //  - Print protocol buffers.}\par
301 {\cf20 //  - Print types convertible to BiggestInt.}\par
302 {\cf20 //  - Print types convertible to StringView, if available.}\par
303 {\cf20 //  - Fallback to printing the raw bytes of the object.}\par
304 {\cf17 template} <{\cf17 typename} T>\par
305 {\cf18 void} PrintWithFallback({\cf17 const} T& value, ::std::ostream* os) \{\par
306   {\cf17 using }Printer = {\cf17 typename} FindFirstPrinter<\par
307       T, void, ContainerPrinter, FunctionPointerPrinter, PointerPrinter,\par
308       internal_stream_operator_without_lexical_name_lookup::StreamPrinter,\par
309       ProtobufPrinter, ConvertibleToIntegerPrinter,\par
310       ConvertibleToStringViewPrinter, RawBytesPrinter, FallbackPrinter>::type;\par
311   Printer::PrintValue(value, os);\par
312 \}\par
313 \par
314 {\cf20 // FormatForComparison<ToPrint, OtherOperand>::Format(value) formats a}\par
315 {\cf20 // value of type ToPrint that is an operand of a comparison assertion}\par
316 {\cf20 // (e.g. ASSERT_EQ).  OtherOperand is the type of the other operand in}\par
317 {\cf20 // the comparison, and is used to help determine the best way to}\par
318 {\cf20 // format the value.  In particular, when the value is a C string}\par
319 {\cf20 // (char pointer) and the other operand is an STL string object, we}\par
320 {\cf20 // want to format the C string as a string, since we know it is}\par
321 {\cf20 // compared by value with the string object.  If the value is a char}\par
322 {\cf20 // pointer but the other operand is not an STL string object, we don't}\par
323 {\cf20 // know whether the pointer is supposed to point to a NUL-terminated}\par
324 {\cf20 // string, and thus want to print it as a pointer to be safe.}\par
325 {\cf20 //}\par
326 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.}\par
327 \par
328 {\cf20 // The default case.}\par
329 {\cf17 template} <{\cf17 typename} ToPr{\cf18 int}, {\cf17 typename} OtherOperand>\par
330 {\cf17 class }FormatForComparison \{\par
331  {\cf17 public}:\par
332   static ::std::string Format({\cf17 const} ToPrint& value) \{\par
333     return ::testing::PrintToString(value);\par
334   \}\par
335 \};\par
336 \par
337 {\cf20 // Array.}\par
338 {\cf17 template} <{\cf17 typename} ToPr{\cf18 int}, {\cf18 size_t} N, {\cf17 typename} OtherOperand>\par
339 {\cf17 class }FormatForComparison<ToPrint[N], OtherOperand> \{\par
340  {\cf17 public}:\par
341   static ::std::string Format({\cf17 const} ToPrint* value) \{\par
342     {\cf19 return} FormatForComparison<const ToPrint*, OtherOperand>::Format(value);\par
343   \}\par
344 \};\par
345 \par
346 {\cf20 // By default, print C string as pointers to be safe, as we don't know}\par
347 {\cf20 // whether they actually point to a NUL-terminated string.}\par
348 \par
349 {\cf21 #define GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_(CharType)                \\}\par
350 {\cf21   template <typename OtherOperand>                                      \\}\par
351 {\cf21   class FormatForComparison<CharType*, OtherOperand> \{                  \\}\par
352 {\cf21    public:                                                              \\}\par
353 {\cf21     static ::std::string Format(CharType* value) \{                      \\}\par
354 {\cf21       return ::testing::PrintToString(static_cast<const void*>(value)); \\}\par
355 {\cf21     \}                                                                   \\}\par
356 {\cf21   \}}\par
357 \par
358 GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_({\cf18 char});\par
359 GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_({\cf17 const} {\cf18 char});\par
360 GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_({\cf18 wchar_t});\par
361 GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_({\cf17 const} {\cf18 wchar_t});\par
362 {\cf21 #ifdef __cpp_lib_char8_t}\par
363 GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_({\cf18 char8_t});\par
364 GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_({\cf17 const} {\cf18 char8_t});\par
365 {\cf21 #endif}\par
366 GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_({\cf18 char16_t});\par
367 GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_({\cf17 const} {\cf18 char16_t});\par
368 GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_({\cf18 char32_t});\par
369 GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_({\cf17 const} {\cf18 char32_t});\par
370 \par
371 {\cf21 #undef GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_}\par
372 \par
373 {\cf20 // If a C string is compared with an STL string object, we know it's meant}\par
374 {\cf20 // to point to a NUL-terminated string, and thus can print it as a string.}\par
375 \par
376 {\cf21 #define GTEST_IMPL_FORMAT_C_STRING_AS_STRING_(CharType, OtherStringType) \\}\par
377 {\cf21   template <>                                                            \\}\par
378 {\cf21   class FormatForComparison<CharType*, OtherStringType> \{                \\}\par
379 {\cf21    public:                                                               \\}\par
380 {\cf21     static ::std::string Format(CharType* value) \{                       \\}\par
381 {\cf21       return ::testing::PrintToString(value);                            \\}\par
382 {\cf21     \}                                                                    \\}\par
383 {\cf21   \}}\par
384 \par
385 GTEST_IMPL_FORMAT_C_STRING_AS_STRING_({\cf18 char}, ::std::string);\par
386 GTEST_IMPL_FORMAT_C_STRING_AS_STRING_({\cf17 const} {\cf18 char}, ::std::string);\par
387 {\cf21 #ifdef __cpp_lib_char8_t}\par
388 GTEST_IMPL_FORMAT_C_STRING_AS_STRING_({\cf18 char8_t}, ::std::u8string);\par
389 GTEST_IMPL_FORMAT_C_STRING_AS_STRING_({\cf17 const} {\cf18 char8_t}, ::std::u8string);\par
390 {\cf21 #endif}\par
391 GTEST_IMPL_FORMAT_C_STRING_AS_STRING_({\cf18 char16_t}, ::std::u16string);\par
392 GTEST_IMPL_FORMAT_C_STRING_AS_STRING_({\cf17 const} {\cf18 char16_t}, ::std::u16string);\par
393 GTEST_IMPL_FORMAT_C_STRING_AS_STRING_({\cf18 char32_t}, ::std::u32string);\par
394 GTEST_IMPL_FORMAT_C_STRING_AS_STRING_({\cf17 const} {\cf18 char32_t}, ::std::u32string);\par
395 \par
396 {\cf21 #if GTEST_HAS_STD_WSTRING}\par
397 GTEST_IMPL_FORMAT_C_STRING_AS_STRING_({\cf18 wchar_t}, ::std::wstring);\par
398 GTEST_IMPL_FORMAT_C_STRING_AS_STRING_({\cf17 const} {\cf18 wchar_t}, ::std::wstring);\par
399 {\cf21 #endif}\par
400 \par
401 {\cf21 #undef GTEST_IMPL_FORMAT_C_STRING_AS_STRING_}\par
402 \par
403 {\cf20 // Formats a comparison assertion (e.g. ASSERT_EQ, EXPECT_LT, and etc)}\par
404 {\cf20 // operand to be used in a failure message.  The type (but not value)}\par
405 {\cf20 // of the other operand may affect the format.  This allows us to}\par
406 {\cf20 // print a char* as a raw pointer when it is compared against another}\par
407 {\cf20 // char* or void*, and print it as a C string when it is compared}\par
408 {\cf20 // against an std::string object, for example.}\par
409 {\cf20 //}\par
410 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.}\par
411 {\cf17 template} <{\cf17 typename} T1, {\cf17 typename} T2>\par
412 std::string FormatForComparisonFailureMessage({\cf17 const} T1& value,\par
413                                               {\cf17 const} T2& {\cf20 /* other_operand */}) \{\par
414   {\cf19 return} FormatForComparison<T1, T2>::Format(value);\par
415 \}\par
416 \par
417 {\cf20 // UniversalPrinter<T>::Print(value, ostream_ptr) prints the given}\par
418 {\cf20 // value to the given ostream.  The caller must ensure that}\par
419 {\cf20 // 'ostream_ptr' is not NULL, or the behavior is undefined.}\par
420 {\cf20 //}\par
421 {\cf20 // We define UniversalPrinter as a class template (as opposed to a}\par
422 {\cf20 // function template), as we need to partially specialize it for}\par
423 {\cf20 // reference types, which cannot be done with function templates.}\par
424 {\cf17 template} <{\cf17 typename} T>\par
425 {\cf17 class }UniversalPrinter;\par
426 \par
427 {\cf20 // Prints the given value using the << operator if it has one;}\par
428 {\cf20 // otherwise prints the bytes in it.  This is what}\par
429 {\cf20 // UniversalPrinter<T>::Print() does when PrintTo() is not specialized}\par
430 {\cf20 // or overloaded for type T.}\par
431 {\cf20 //}\par
432 {\cf20 // A user can override this behavior for a class type Foo by defining}\par
433 {\cf20 // an overload of PrintTo() in the namespace where Foo is defined.  We}\par
434 {\cf20 // give the user this option as sometimes defining a << operator for}\par
435 {\cf20 // Foo is not desirable (e.g. the coding style may prevent doing it,}\par
436 {\cf20 // or there is already a << operator but it doesn't do what the user}\par
437 {\cf20 // wants).}\par
438 {\cf17 template} <{\cf17 typename} T>\par
439 {\cf18 void} PrintTo({\cf17 const} T& value, ::std::ostream* os) \{\par
440   internal::PrintWithFallback(value, os);\par
441 \}\par
442 \par
443 {\cf20 // The following list of PrintTo() overloads tells}\par
444 {\cf20 // UniversalPrinter<T>::Print() how to print standard types (built-in}\par
445 {\cf20 // types, strings, plain arrays, and pointers).}\par
446 \par
447 {\cf20 // Overloads for various char types.}\par
448 GTEST_API_ {\cf18 void} PrintTo({\cf18 unsigned} {\cf18 char} c, ::std::ostream* os);\par
449 GTEST_API_ {\cf18 void} PrintTo({\cf18 signed} {\cf18 char} c, ::std::ostream* os);\par
450 {\cf17 inline} {\cf18 void} PrintTo({\cf18 char} c, ::std::ostream* os) \{\par
451   {\cf20 // When printing a plain char, we always treat it as unsigned.  This}\par
452   {\cf20 // way, the output won't be affected by whether the compiler thinks}\par
453   {\cf20 // char is signed or not.}\par
454   PrintTo({\cf17 static_cast<}{\cf18 unsigned} {\cf18 char}{\cf17 >}(c), os);\par
455 \}\par
456 \par
457 {\cf20 // Overloads for other simple built-in types.}\par
458 {\cf17 inline} {\cf18 void} PrintTo({\cf18 bool} x, ::std::ostream* os) \{\par
459   *os << (x ? {\cf22 "true"} : {\cf22 "false"});\par
460 \}\par
461 \par
462 {\cf20 // Overload for wchar_t type.}\par
463 {\cf20 // Prints a wchar_t as a symbol if it is printable or as its internal}\par
464 {\cf20 // code otherwise and also as its decimal code (except for L'\\0').}\par
465 {\cf20 // The L'\\0' char is printed as "L'\\\\0'". The decimal code is printed}\par
466 {\cf20 // as signed integer when wchar_t is implemented by the compiler}\par
467 {\cf20 // as a signed type and is printed as an unsigned integer when wchar_t}\par
468 {\cf20 // is implemented as an unsigned type.}\par
469 GTEST_API_ {\cf18 void} PrintTo({\cf18 wchar_t} wc, ::std::ostream* os);\par
470 \par
471 GTEST_API_ {\cf18 void} PrintTo({\cf18 char32_t} c, ::std::ostream* os);\par
472 {\cf17 inline} {\cf18 void} PrintTo({\cf18 char16_t} c, ::std::ostream* os) \{\par
473   PrintTo(ImplicitCast_<char32_t>(c), os);\par
474 \}\par
475 {\cf21 #ifdef __cpp_char8_t}\par
476 {\cf17 inline} {\cf18 void} PrintTo({\cf18 char8_t} c, ::std::ostream* os) \{\par
477   PrintTo(ImplicitCast_<char32_t>(c), os);\par
478 \}\par
479 {\cf21 #endif}\par
480 \par
481 {\cf20 // gcc/clang __\{u,\}int128_t}\par
482 {\cf21 #if defined(__SIZEOF_INT128__)}\par
483 GTEST_API_ {\cf18 void} PrintTo(__uint128_t v, ::std::ostream* os);\par
484 GTEST_API_ {\cf18 void} PrintTo(__int128_t v, ::std::ostream* os);\par
485 {\cf21 #endif  }{\cf20 // __SIZEOF_INT128__}\par
486 \par
487 {\cf20 // Overloads for C strings.}\par
488 GTEST_API_ {\cf18 void} PrintTo({\cf17 const} {\cf18 char}* s, ::std::ostream* os);\par
489 {\cf17 inline} {\cf18 void} PrintTo({\cf18 char}* s, ::std::ostream* os) \{\par
490   PrintTo(ImplicitCast_<const char*>(s), os);\par
491 \}\par
492 \par
493 {\cf20 // signed/unsigned char is often used for representing binary data, so}\par
494 {\cf20 // we print pointers to it as void* to be safe.}\par
495 {\cf17 inline} {\cf18 void} PrintTo({\cf17 const} {\cf18 signed} {\cf18 char}* s, ::std::ostream* os) \{\par
496   PrintTo(ImplicitCast_<const void*>(s), os);\par
497 \}\par
498 {\cf17 inline} {\cf18 void} PrintTo({\cf18 signed} {\cf18 char}* s, ::std::ostream* os) \{\par
499   PrintTo(ImplicitCast_<const void*>(s), os);\par
500 \}\par
501 {\cf17 inline} {\cf18 void} PrintTo({\cf17 const} {\cf18 unsigned} {\cf18 char}* s, ::std::ostream* os) \{\par
502   PrintTo(ImplicitCast_<const void*>(s), os);\par
503 \}\par
504 {\cf17 inline} {\cf18 void} PrintTo({\cf18 unsigned} {\cf18 char}* s, ::std::ostream* os) \{\par
505   PrintTo(ImplicitCast_<const void*>(s), os);\par
506 \}\par
507 {\cf21 #ifdef __cpp_char8_t}\par
508 {\cf20 // Overloads for u8 strings.}\par
509 GTEST_API_ {\cf18 void} PrintTo({\cf17 const} {\cf18 char8_t}* s, ::std::ostream* os);\par
510 {\cf17 inline} {\cf18 void} PrintTo({\cf18 char8_t}* s, ::std::ostream* os) \{\par
511   PrintTo(ImplicitCast_<const char8_t*>(s), os);\par
512 \}\par
513 {\cf21 #endif}\par
514 {\cf20 // Overloads for u16 strings.}\par
515 GTEST_API_ {\cf18 void} PrintTo({\cf17 const} {\cf18 char16_t}* s, ::std::ostream* os);\par
516 {\cf17 inline} {\cf18 void} PrintTo({\cf18 char16_t}* s, ::std::ostream* os) \{\par
517   PrintTo(ImplicitCast_<const char16_t*>(s), os);\par
518 \}\par
519 {\cf20 // Overloads for u32 strings.}\par
520 GTEST_API_ {\cf18 void} PrintTo({\cf17 const} {\cf18 char32_t}* s, ::std::ostream* os);\par
521 {\cf17 inline} {\cf18 void} PrintTo({\cf18 char32_t}* s, ::std::ostream* os) \{\par
522   PrintTo(ImplicitCast_<const char32_t*>(s), os);\par
523 \}\par
524 \par
525 {\cf20 // MSVC can be configured to define wchar_t as a typedef of unsigned}\par
526 {\cf20 // short.  It defines _NATIVE_WCHAR_T_DEFINED when wchar_t is a native}\par
527 {\cf20 // type.  When wchar_t is a typedef, defining an overload for const}\par
528 {\cf20 // wchar_t* would cause unsigned short* be printed as a wide string,}\par
529 {\cf20 // possibly causing invalid memory accesses.}\par
530 {\cf21 #if !defined(_MSC_VER) || defined(_NATIVE_WCHAR_T_DEFINED)}\par
531 {\cf20 // Overloads for wide C strings}\par
532 GTEST_API_ {\cf18 void} PrintTo({\cf17 const} {\cf18 wchar_t}* s, ::std::ostream* os);\par
533 {\cf17 inline} {\cf18 void} PrintTo({\cf18 wchar_t}* s, ::std::ostream* os) \{\par
534   PrintTo(ImplicitCast_<const wchar_t*>(s), os);\par
535 \}\par
536 {\cf21 #endif}\par
537 \par
538 {\cf20 // Overload for C arrays.  Multi-dimensional arrays are printed}\par
539 {\cf20 // properly.}\par
540 \par
541 {\cf20 // Prints the given number of elements in an array, without printing}\par
542 {\cf20 // the curly braces.}\par
543 {\cf17 template} <{\cf17 typename} T>\par
544 {\cf18 void} PrintRawArrayTo({\cf17 const} T a[], {\cf18 size_t} count, ::std::ostream* os) \{\par
545   UniversalPrint(a[0], os);\par
546   {\cf19 for} ({\cf18 size_t} i = 1; i != count; i++) \{\par
547     *os << {\cf22 ", "};\par
548     UniversalPrint(a[i], os);\par
549   \}\par
550 \}\par
551 \par
552 {\cf20 // Overloads for ::std::string.}\par
553 GTEST_API_ {\cf18 void} PrintStringTo(const ::std::string& s, ::std::ostream* os);\par
554 {\cf17 inline} {\cf18 void} PrintTo(const ::std::string& s, ::std::ostream* os) \{\par
555   PrintStringTo(s, os);\par
556 \}\par
557 \par
558 {\cf20 // Overloads for ::std::u8string}\par
559 {\cf21 #ifdef __cpp_lib_char8_t}\par
560 GTEST_API_ {\cf18 void} PrintU8StringTo(const ::std::u8string& s, ::std::ostream* os);\par
561 {\cf17 inline} {\cf18 void} PrintTo(const ::std::u8string& s, ::std::ostream* os) \{\par
562   PrintU8StringTo(s, os);\par
563 \}\par
564 {\cf21 #endif}\par
565 \par
566 {\cf20 // Overloads for ::std::u16string}\par
567 GTEST_API_ {\cf18 void} PrintU16StringTo(const ::std::u16string& s, ::std::ostream* os);\par
568 {\cf17 inline} {\cf18 void} PrintTo(const ::std::u16string& s, ::std::ostream* os) \{\par
569   PrintU16StringTo(s, os);\par
570 \}\par
571 \par
572 {\cf20 // Overloads for ::std::u32string}\par
573 GTEST_API_ {\cf18 void} PrintU32StringTo(const ::std::u32string& s, ::std::ostream* os);\par
574 {\cf17 inline} {\cf18 void} PrintTo(const ::std::u32string& s, ::std::ostream* os) \{\par
575   PrintU32StringTo(s, os);\par
576 \}\par
577 \par
578 {\cf20 // Overloads for ::std::wstring.}\par
579 {\cf21 #if GTEST_HAS_STD_WSTRING}\par
580 GTEST_API_ {\cf18 void} PrintWideStringTo(const ::std::wstring& s, ::std::ostream* os);\par
581 {\cf17 inline} {\cf18 void} PrintTo(const ::std::wstring& s, ::std::ostream* os) \{\par
582   PrintWideStringTo(s, os);\par
583 \}\par
584 {\cf21 #endif  }{\cf20 // GTEST_HAS_STD_WSTRING}\par
585 \par
586 {\cf21 #if GTEST_INTERNAL_HAS_STRING_VIEW}\par
587 {\cf20 // Overload for internal::StringView.}\par
588 {\cf17 inline} {\cf18 void} PrintTo(internal::StringView sp, ::std::ostream* os) \{\par
589   PrintTo(::std::string(sp), os);\par
590 \}\par
591 {\cf21 #endif  }{\cf20 // GTEST_INTERNAL_HAS_STRING_VIEW}\par
592 \par
593 {\cf17 inline} {\cf18 void} PrintTo(std::nullptr_t, ::std::ostream* os) \{ *os << {\cf22 "(nullptr)"}; \}\par
594 \par
595 {\cf21 #if GTEST_HAS_RTTI}\par
596 {\cf17 inline} {\cf18 void} PrintTo({\cf17 const} std::type_info& info, std::ostream* os) \{\par
597   *os << internal::GetTypeName(info);\par
598 \}\par
599 {\cf21 #endif  }{\cf20 // GTEST_HAS_RTTI}\par
600 \par
601 {\cf17 template} <{\cf17 typename} T>\par
602 {\cf18 void} PrintTo(std::reference_wrapper<T> ref, ::std::ostream* os) \{\par
603   UniversalPrinter<T&>::Print(ref.get(), os);\par
604 \}\par
605 \par
606 {\cf17 inline} {\cf17 const} {\cf18 void}* VoidifyPointer({\cf17 const} {\cf18 void}* p) \{ {\cf19 return} p; \}\par
607 {\cf17 inline} {\cf17 const} {\cf18 void}* VoidifyPointer({\cf17 volatile} {\cf17 const} {\cf18 void}* p) \{\par
608   {\cf19 return} {\cf17 const_cast<}{\cf17 const }{\cf18 void}*{\cf17 >}(p);\par
609 \}\par
610 \par
611 {\cf17 template} <{\cf17 typename} T, {\cf17 typename} Ptr>\par
612 {\cf18 void} PrintSmartPointer({\cf17 const} Ptr& ptr, std::ostream* os, {\cf18 char}) \{\par
613   {\cf19 if} (ptr == {\cf17 nullptr}) \{\par
614     *os << {\cf22 "(nullptr)"};\par
615   \} {\cf19 else} \{\par
616     {\cf20 // We can't print the value. Just print the pointer..}\par
617     *os << {\cf22 "("} << (VoidifyPointer)(ptr.get()) << {\cf22 ")"};\par
618   \}\par
619 \}\par
620 {\cf17 template} <{\cf17 typename} T, {\cf17 typename} Ptr,\par
621           {\cf17 typename} = {\cf17 typename} std::enable_if<!std::is_void<T>::value &&\par
622                                              !std::is_array<T>::value>::type>\par
623 {\cf18 void} PrintSmartPointer({\cf17 const} Ptr& ptr, std::ostream* os, {\cf18 int}) \{\par
624   {\cf19 if} (ptr == {\cf17 nullptr}) \{\par
625     *os << {\cf22 "(nullptr)"};\par
626   \} {\cf19 else} \{\par
627     *os << {\cf22 "(ptr = "} << (VoidifyPointer)(ptr.get()) << {\cf22 ", value = "};\par
628     UniversalPrinter<T>::Print(*ptr, os);\par
629     *os << {\cf22 ")"};\par
630   \}\par
631 \}\par
632 \par
633 {\cf17 template} <{\cf17 typename} T, {\cf17 typename} D>\par
634 {\cf18 void} PrintTo({\cf17 const} std::unique_ptr<T, D>& ptr, std::ostream* os) \{\par
635   (PrintSmartPointer<T>)(ptr, os, 0);\par
636 \}\par
637 \par
638 {\cf17 template} <{\cf17 typename} T>\par
639 {\cf18 void} PrintTo({\cf17 const} std::shared_ptr<T>& ptr, std::ostream* os) \{\par
640   (PrintSmartPointer<T>)(ptr, os, 0);\par
641 \}\par
642 \par
643 {\cf20 // Helper function for printing a tuple.  T must be instantiated with}\par
644 {\cf20 // a tuple type.}\par
645 {\cf17 template} <{\cf17 typename} T>\par
646 {\cf18 void} PrintTupleTo({\cf17 const} T&, std::integral_constant<size_t, 0>,\par
647                   ::std::ostream*) \{\}\par
648 \par
649 {\cf17 template} <{\cf17 typename} T, {\cf18 size_t} I>\par
650 {\cf18 void} PrintTupleTo({\cf17 const} T& t, std::integral_constant<size_t, I>,\par
651                   ::std::ostream* os) \{\par
652   PrintTupleTo(t, std::integral_constant<size_t, I - 1>(), os);\par
653   GTEST_INTENTIONAL_CONST_COND_PUSH_()\par
654   if (I > 1) \{\par
655     GTEST_INTENTIONAL_CONST_COND_POP_()\par
656     *os << {\cf22 ", "};\par
657   \}\par
658   UniversalPrinter<{\cf17 typename} std::tuple_element<I - 1, T>::type>::Print(\par
659       std::get<I - 1>(t), os);\par
660 \}\par
661 \par
662 {\cf17 template} <{\cf17 typename}... Types>\par
663 {\cf18 void} PrintTo(const ::std::tuple<Types...>& t, ::std::ostream* os) \{\par
664   *os << {\cf22 "("};\par
665   PrintTupleTo(t, std::integral_constant<{\cf18 size_t}, {\cf17 sizeof}...(Types)>(), os);\par
666   *os << {\cf22 ")"};\par
667 \}\par
668 \par
669 {\cf20 // Overload for std::pair.}\par
670 {\cf17 template} <{\cf17 typename} T1, {\cf17 typename} T2>\par
671 {\cf18 void} PrintTo(const ::std::pair<T1, T2>& value, ::std::ostream* os) \{\par
672   *os << {\cf23 '('};\par
673   {\cf20 // We cannot use UniversalPrint(value.first, os) here, as T1 may be}\par
674   {\cf20 // a reference type.  The same for printing value.second.}\par
675   UniversalPrinter<T1>::Print(value.first, os);\par
676   *os << {\cf22 ", "};\par
677   UniversalPrinter<T2>::Print(value.second, os);\par
678   *os << {\cf23 ')'};\par
679 \}\par
680 \par
681 {\cf20 // Implements printing a non-reference type T by letting the compiler}\par
682 {\cf20 // pick the right overload of PrintTo() for T.}\par
683 {\cf17 template} <{\cf17 typename} T>\par
684 {\cf17 class }UniversalPrinter \{\par
685  {\cf17 public}:\par
686   {\cf20 // MSVC warns about adding const to a function type, so we want to}\par
687   {\cf20 // disable the warning.}\par
688   GTEST_DISABLE_MSC_WARNINGS_PUSH_(4180)\par
689 \par
690   {\cf20 // Note: we deliberately don't call this PrintTo(), as that name}\par
691   {\cf20 // conflicts with ::testing::internal::PrintTo in the body of the}\par
692   {\cf20 // function.}\par
693   {\cf17 static} {\cf18 void} Print({\cf17 const} T& value, ::std::ostream* os) \{\par
694     {\cf20 // By default, ::testing::internal::PrintTo() is used for printing}\par
695     {\cf20 // the value.}\par
696     {\cf20 //}\par
697     {\cf20 // Thanks to Koenig look-up, if T is a class and has its own}\par
698     {\cf20 // PrintTo() function defined in its namespace, that function will}\par
699     {\cf20 // be visible here.  Since it is more specific than the generic ones}\par
700     {\cf20 // in ::testing::internal, it will be picked by the compiler in the}\par
701     {\cf20 // following statement - exactly what we want.}\par
702     PrintTo(value, os);\par
703   \}\par
704 \par
705   GTEST_DISABLE_MSC_WARNINGS_POP_()\par
706 \};\par
707 \par
708 {\cf20 // Remove any const-qualifiers before passing a type to UniversalPrinter.}\par
709 {\cf17 template} <{\cf17 typename} T>\par
710 {\cf17 class }UniversalPrinter<const T> : {\cf17 public} UniversalPrinter<T> \{\};\par
711 \par
712 {\cf21 #if GTEST_INTERNAL_HAS_ANY}\par
713 \par
714 {\cf20 // Printer for std::any / absl::any}\par
715 \par
716 {\cf17 template} <>\par
717 {\cf17 class }UniversalPrinter<Any> \{\par
718  {\cf17 public}:\par
719   {\cf17 static} {\cf18 void} Print({\cf17 const} Any& value, ::std::ostream* os) \{\par
720     {\cf19 if} (value.has_value()) \{\par
721       *os << {\cf22 "value of type "} << GetTypeName(value);\par
722     \} {\cf19 else} \{\par
723       *os << {\cf22 "no value"};\par
724     \}\par
725   \}\par
726 \par
727  {\cf17 private}:\par
728   {\cf17 static} std::string GetTypeName({\cf17 const} Any& value) \{\par
729 {\cf21 #if GTEST_HAS_RTTI}\par
730     {\cf19 return} internal::GetTypeName(value.type());\par
731 {\cf21 #else}\par
732     {\cf17 static_cast<}{\cf18 void}{\cf17 >}(value);  {\cf20 // possibly unused}\par
733     {\cf19 return} {\cf22 "<unknown_type>"};\par
734 {\cf21 #endif  }{\cf20 // GTEST_HAS_RTTI}\par
735   \}\par
736 \};\par
737 \par
738 {\cf21 #endif  }{\cf20 // GTEST_INTERNAL_HAS_ANY}\par
739 \par
740 {\cf21 #if GTEST_INTERNAL_HAS_OPTIONAL}\par
741 \par
742 {\cf20 // Printer for std::optional / absl::optional}\par
743 \par
744 {\cf17 template} <{\cf17 typename} T>\par
745 {\cf17 class }UniversalPrinter<Optional<T>> \{\par
746  {\cf17 public}:\par
747   {\cf17 static} {\cf18 void} Print({\cf17 const} Optional<T>& value, ::std::ostream* os) \{\par
748     *os << {\cf23 '('};\par
749     {\cf19 if} (!value) \{\par
750       *os << {\cf22 "nullopt"};\par
751     \} {\cf19 else} \{\par
752       UniversalPrint(*value, os);\par
753     \}\par
754     *os << {\cf23 ')'};\par
755   \}\par
756 \};\par
757 \par
758 {\cf17 template} <>\par
759 {\cf17 class }UniversalPrinter<decltype(Nullopt())> \{\par
760  {\cf17 public}:\par
761   {\cf17 static} {\cf18 void} Print({\cf17 decltype}(Nullopt()), ::std::ostream* os) \{\par
762     *os << {\cf22 "(nullopt)"};\par
763   \}\par
764 \};\par
765 \par
766 {\cf21 #endif  }{\cf20 // GTEST_INTERNAL_HAS_OPTIONAL}\par
767 \par
768 {\cf21 #if GTEST_INTERNAL_HAS_VARIANT}\par
769 \par
770 {\cf20 // Printer for std::variant / absl::variant}\par
771 \par
772 {\cf17 template} <{\cf17 typename}... T>\par
773 {\cf17 class }UniversalPrinter<Variant<T...>> \{\par
774  {\cf17 public}:\par
775   {\cf17 static} {\cf18 void} Print({\cf17 const} Variant<T...>& value, ::std::ostream* os) \{\par
776     *os << {\cf23 '('};\par
777 {\cf21 #if GTEST_HAS_ABSL}\par
778     absl::visit(Visitor\{os, value.index()\}, value);\par
779 {\cf21 #else}\par
780     std::visit(Visitor\{os, value.index()\}, value);\par
781 {\cf21 #endif  }{\cf20 // GTEST_HAS_ABSL}\par
782     *os << {\cf23 ')'};\par
783   \}\par
784 \par
785  {\cf17 private}:\par
786   {\cf17 struct }Visitor \{\par
787     {\cf17 template} <{\cf17 typename} U>\par
788     {\cf18 void} operator()({\cf17 const} U& u){\cf17  const }\{\par
789       *os << {\cf22 "'"} << GetTypeName<U>() << {\cf22 "(index = "} << index\par
790           << {\cf22 ")' with value "};\par
791       UniversalPrint(u, os);\par
792     \}\par
793     ::std::ostream* os;\par
794     std::size_t index;\par
795   \};\par
796 \};\par
797 \par
798 {\cf21 #endif  }{\cf20 // GTEST_INTERNAL_HAS_VARIANT}\par
799 \par
800 {\cf20 // UniversalPrintArray(begin, len, os) prints an array of 'len'}\par
801 {\cf20 // elements, starting at address 'begin'.}\par
802 {\cf17 template} <{\cf17 typename} T>\par
803 {\cf18 void} UniversalPrintArray({\cf17 const} T* begin, {\cf18 size_t} len, ::std::ostream* os) \{\par
804   {\cf19 if} (len == 0) \{\par
805     *os << {\cf22 "\{\}"};\par
806   \} {\cf19 else} \{\par
807     *os << {\cf22 "\{ "};\par
808     {\cf17 const} {\cf18 size_t} kThreshold = 18;\par
809     {\cf17 const} {\cf18 size_t} kChunkSize = 8;\par
810     {\cf20 // If the array has more than kThreshold elements, we'll have to}\par
811     {\cf20 // omit some details by printing only the first and the last}\par
812     {\cf20 // kChunkSize elements.}\par
813     {\cf19 if} (len <= kThreshold) \{\par
814       PrintRawArrayTo(begin, len, os);\par
815     \} {\cf19 else} \{\par
816       PrintRawArrayTo(begin, kChunkSize, os);\par
817       *os << {\cf22 ", ..., "};\par
818       PrintRawArrayTo(begin + len - kChunkSize, kChunkSize, os);\par
819     \}\par
820     *os << {\cf22 " \}"};\par
821   \}\par
822 \}\par
823 {\cf20 // This overload prints a (const) char array compactly.}\par
824 GTEST_API_ {\cf18 void} UniversalPrintArray({\cf17 const} {\cf18 char}* begin, {\cf18 size_t} len,\par
825                                     ::std::ostream* os);\par
826 \par
827 {\cf21 #ifdef __cpp_char8_t}\par
828 {\cf20 // This overload prints a (const) char8_t array compactly.}\par
829 GTEST_API_ {\cf18 void} UniversalPrintArray({\cf17 const} {\cf18 char8_t}* begin, {\cf18 size_t} len,\par
830                                     ::std::ostream* os);\par
831 {\cf21 #endif}\par
832 \par
833 {\cf20 // This overload prints a (const) char16_t array compactly.}\par
834 GTEST_API_ {\cf18 void} UniversalPrintArray({\cf17 const} {\cf18 char16_t}* begin, {\cf18 size_t} len,\par
835                                     ::std::ostream* os);\par
836 \par
837 {\cf20 // This overload prints a (const) char32_t array compactly.}\par
838 GTEST_API_ {\cf18 void} UniversalPrintArray({\cf17 const} {\cf18 char32_t}* begin, {\cf18 size_t} len,\par
839                                     ::std::ostream* os);\par
840 \par
841 {\cf20 // This overload prints a (const) wchar_t array compactly.}\par
842 GTEST_API_ {\cf18 void} UniversalPrintArray({\cf17 const} {\cf18 wchar_t}* begin, {\cf18 size_t} len,\par
843                                     ::std::ostream* os);\par
844 \par
845 {\cf20 // Implements printing an array type T[N].}\par
846 {\cf17 template} <{\cf17 typename} T, {\cf18 size_t} N>\par
847 {\cf17 class }UniversalPrinter<T[N]> \{\par
848  {\cf17 public}:\par
849   {\cf20 // Prints the given array, omitting some elements when there are too}\par
850   {\cf20 // many.}\par
851   {\cf17 static} {\cf18 void} Print({\cf17 const} T (&a)[N], ::std::ostream* os) \{\par
852     UniversalPrintArray(a, N, os);\par
853   \}\par
854 \};\par
855 \par
856 {\cf20 // Implements printing a reference type T&.}\par
857 {\cf17 template} <{\cf17 typename} T>\par
858 {\cf17 class }UniversalPrinter<T&> \{\par
859  {\cf17 public}:\par
860   {\cf20 // MSVC warns about adding const to a function type, so we want to}\par
861   {\cf20 // disable the warning.}\par
862   GTEST_DISABLE_MSC_WARNINGS_PUSH_(4180)\par
863 \par
864   {\cf17 static} {\cf18 void} Print({\cf17 const} T& value, ::std::ostream* os) \{\par
865     {\cf20 // Prints the address of the value.  We use reinterpret_cast here}\par
866     {\cf20 // as static_cast doesn't compile when T is a function type.}\par
867     *os << {\cf22 "@"} << {\cf17 reinterpret_cast<}{\cf17 const }{\cf18 void}*{\cf17 >}(&value) << {\cf22 " "};\par
868 \par
869     {\cf20 // Then prints the value itself.}\par
870     UniversalPrint(value, os);\par
871   \}\par
872 \par
873   GTEST_DISABLE_MSC_WARNINGS_POP_()\par
874 \};\par
875 \par
876 {\cf20 // Prints a value tersely: for a reference type, the referenced value}\par
877 {\cf20 // (but not the address) is printed; for a (const) char pointer, the}\par
878 {\cf20 // NUL-terminated string (but not the pointer) is printed.}\par
879 \par
880 {\cf17 template} <{\cf17 typename} T>\par
881 {\cf17 class }UniversalTersePrinter \{\par
882  {\cf17 public}:\par
883   {\cf17 static} {\cf18 void} Print({\cf17 const} T& value, ::std::ostream* os) \{\par
884     UniversalPrint(value, os);\par
885   \}\par
886 \};\par
887 {\cf17 template} <{\cf17 typename} T>\par
888 {\cf17 class }UniversalTersePrinter<T&> \{\par
889  {\cf17 public}:\par
890   {\cf17 static} {\cf18 void} Print({\cf17 const} T& value, ::std::ostream* os) \{\par
891     UniversalPrint(value, os);\par
892   \}\par
893 \};\par
894 {\cf17 template} <{\cf17 typename} T, {\cf18 size_t} N>\par
895 {\cf17 class }UniversalTersePrinter<T[N]> \{\par
896  {\cf17 public}:\par
897   {\cf17 static} {\cf18 void} Print({\cf17 const} T (&value)[N], ::std::ostream* os) \{\par
898     UniversalPrinter<T[N]>::Print(value, os);\par
899   \}\par
900 \};\par
901 {\cf17 template} <>\par
902 {\cf17 class }UniversalTersePrinter<const char*> \{\par
903  {\cf17 public}:\par
904   {\cf17 static} {\cf18 void} Print({\cf17 const} {\cf18 char}* str, ::std::ostream* os) \{\par
905     {\cf19 if} (str == {\cf17 nullptr}) \{\par
906       *os << {\cf22 "NULL"};\par
907     \} {\cf19 else} \{\par
908       UniversalPrint(std::string(str), os);\par
909     \}\par
910   \}\par
911 \};\par
912 {\cf17 template} <>\par
913 {\cf17 class }UniversalTersePrinter<char*> : {\cf17 public} UniversalTersePrinter<const char*> \{\par
914 \};\par
915 \par
916 {\cf21 #ifdef __cpp_char8_t}\par
917 {\cf17 template} <>\par
918 {\cf17 class }UniversalTersePrinter<const char8_t*> \{\par
919  {\cf17 public}:\par
920   {\cf17 static} {\cf18 void} Print({\cf17 const} {\cf18 char8_t}* str, ::std::ostream* os) \{\par
921     {\cf19 if} (str == {\cf17 nullptr}) \{\par
922       *os << {\cf22 "NULL"};\par
923     \} {\cf19 else} \{\par
924       UniversalPrint(::std::u8string(str), os);\par
925     \}\par
926   \}\par
927 \};\par
928 {\cf17 template} <>\par
929 {\cf17 class }UniversalTersePrinter<char8_t*>\par
930     : {\cf17 public} UniversalTersePrinter<const char8_t*> \{\};\par
931 {\cf21 #endif}\par
932 \par
933 {\cf17 template} <>\par
934 {\cf17 class }UniversalTersePrinter<const char16_t*> \{\par
935  {\cf17 public}:\par
936   {\cf17 static} {\cf18 void} Print({\cf17 const} {\cf18 char16_t}* str, ::std::ostream* os) \{\par
937     {\cf19 if} (str == {\cf17 nullptr}) \{\par
938       *os << {\cf22 "NULL"};\par
939     \} {\cf19 else} \{\par
940       UniversalPrint(::std::u16string(str), os);\par
941     \}\par
942   \}\par
943 \};\par
944 {\cf17 template} <>\par
945 {\cf17 class }UniversalTersePrinter<char16_t*>\par
946     : {\cf17 public} UniversalTersePrinter<const char16_t*> \{\};\par
947 \par
948 {\cf17 template} <>\par
949 {\cf17 class }UniversalTersePrinter<const char32_t*> \{\par
950  {\cf17 public}:\par
951   {\cf17 static} {\cf18 void} Print({\cf17 const} {\cf18 char32_t}* str, ::std::ostream* os) \{\par
952     {\cf19 if} (str == {\cf17 nullptr}) \{\par
953       *os << {\cf22 "NULL"};\par
954     \} {\cf19 else} \{\par
955       UniversalPrint(::std::u32string(str), os);\par
956     \}\par
957   \}\par
958 \};\par
959 {\cf17 template} <>\par
960 {\cf17 class }UniversalTersePrinter<char32_t*>\par
961     : {\cf17 public} UniversalTersePrinter<const char32_t*> \{\};\par
962 \par
963 {\cf21 #if GTEST_HAS_STD_WSTRING}\par
964 {\cf17 template} <>\par
965 {\cf17 class }UniversalTersePrinter<const wchar_t*> \{\par
966  {\cf17 public}:\par
967   {\cf17 static} {\cf18 void} Print({\cf17 const} {\cf18 wchar_t}* str, ::std::ostream* os) \{\par
968     {\cf19 if} (str == {\cf17 nullptr}) \{\par
969       *os << {\cf22 "NULL"};\par
970     \} {\cf19 else} \{\par
971       UniversalPrint(::std::wstring(str), os);\par
972     \}\par
973   \}\par
974 \};\par
975 {\cf21 #endif}\par
976 \par
977 {\cf17 template} <>\par
978 {\cf17 class }UniversalTersePrinter<wchar_t*> \{\par
979  {\cf17 public}:\par
980   {\cf17 static} {\cf18 void} Print({\cf18 wchar_t}* str, ::std::ostream* os) \{\par
981     UniversalTersePrinter<const wchar_t*>::Print(str, os);\par
982   \}\par
983 \};\par
984 \par
985 {\cf17 template} <{\cf17 typename} T>\par
986 {\cf18 void} UniversalTersePrint({\cf17 const} T& value, ::std::ostream* os) \{\par
987   UniversalTersePrinter<T>::Print(value, os);\par
988 \}\par
989 \par
990 {\cf20 // Prints a value using the type inferred by the compiler.  The}\par
991 {\cf20 // difference between this and UniversalTersePrint() is that for a}\par
992 {\cf20 // (const) char pointer, this prints both the pointer and the}\par
993 {\cf20 // NUL-terminated string.}\par
994 {\cf17 template} <{\cf17 typename} T>\par
995 {\cf18 void} UniversalPrint({\cf17 const} T& value, ::std::ostream* os) \{\par
996   {\cf20 // A workarond for the bug in VC++ 7.1 that prevents us from instantiating}\par
997   {\cf20 // UniversalPrinter with T directly.}\par
998   {\cf17 typedef} T T1;\par
999   UniversalPrinter<T1>::Print(value, os);\par
1000 \}\par
1001 \par
1002 typedef ::std::vector<::std::string> Strings;\par
1003 \par
1004 {\cf20 // Tersely prints the first N fields of a tuple to a string vector,}\par
1005 {\cf20 // one element for each field.}\par
1006 {\cf17 template} <{\cf17 typename} Tuple>\par
1007 {\cf18 void} TersePrintPrefixToStrings({\cf17 const} Tuple&, std::integral_constant<size_t, 0>,\par
1008                                Strings*) \{\}\par
1009 {\cf17 template} <{\cf17 typename} Tuple, {\cf18 size_t} I>\par
1010 {\cf18 void} TersePrintPrefixToStrings({\cf17 const} Tuple& t,\par
1011                                std::integral_constant<size_t, I>,\par
1012                                Strings* strings) \{\par
1013   TersePrintPrefixToStrings(t, std::integral_constant<size_t, I - 1>(),\par
1014                             strings);\par
1015   ::std::stringstream ss;\par
1016   UniversalTersePrint(std::get<I - 1>(t), &ss);\par
1017   strings->push_back(ss.str());\par
1018 \}\par
1019 \par
1020 {\cf20 // Prints the fields of a tuple tersely to a string vector, one}\par
1021 {\cf20 // element for each field.  See the comment before}\par
1022 {\cf20 // UniversalTersePrint() for how we define "tersely".}\par
1023 {\cf17 template} <{\cf17 typename} Tuple>\par
1024 Strings UniversalTersePrintTupleFieldsToStrings({\cf17 const} Tuple& value) \{\par
1025   Strings result;\par
1026   TersePrintPrefixToStrings(\par
1027       value, std::integral_constant<{\cf18 size_t}, std::tuple_size<Tuple>::value>(),\par
1028       &result);\par
1029   {\cf19 return} result;\par
1030 \}\par
1031 \par
1032 \}  {\cf20 // namespace internal}\par
1033 \par
1034 {\cf17 template} <{\cf17 typename} T>\par
1035 ::std::string PrintToString({\cf17 const} T& value) \{\par
1036   ::std::stringstream ss;\par
1037   internal::UniversalTersePrinter<T>::Print(value, &ss);\par
1038   {\cf19 return} ss.str();\par
1039 \}\par
1040 \par
1041 \}  {\cf20 // namespace testing}\par
1042 \par
1043 {\cf20 // Include any custom printer added by the local installation.}\par
1044 {\cf20 // We must include this header at the end to make sure it can use the}\par
1045 {\cf20 // declarations from this file.}\par
1046 {\cf21 #include "gtest/internal/custom/gtest-printers.h"}\par
1047 \par
1048 {\cf21 #endif  }{\cf20 // GOOGLETEST_INCLUDE_GTEST_GTEST_PRINTERS_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest-printers.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googletest/include/gtest/internal/custom/gtest-printers.h}
{\xe \v lib/googletest-main/googletest/include/gtest/internal/custom/gtest-printers.h}
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2015, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 {\cf20 //}\par
30 {\cf20 // This file provides an injection point for custom printers in a local}\par
31 {\cf20 // installation of gTest.}\par
32 {\cf20 // It will be included from gtest-printers.h and the overrides in this file}\par
33 {\cf20 // will be visible to everyone.}\par
34 {\cf20 //}\par
35 {\cf20 // Injection point for custom user configurations. See README for details}\par
36 {\cf20 //}\par
37 {\cf20 // ** Custom implementation starts here **}\par
38 \par
39 {\cf21 #ifndef GOOGLETEST_INCLUDE_GTEST_INTERNAL_CUSTOM_GTEST_PRINTERS_H_}\par
40 {\cf21 #define GOOGLETEST_INCLUDE_GTEST_INTERNAL_CUSTOM_GTEST_PRINTERS_H_}\par
41 \par
42 {\cf21 #endif  }{\cf20 // GOOGLETEST_INCLUDE_GTEST_INTERNAL_CUSTOM_GTEST_PRINTERS_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest-spi.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googletest/include/gtest/gtest-spi.h}
{\xe \v lib/googletest-main/googletest/include/gtest/gtest-spi.h}
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2007, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // Utilities for testing Google Test itself and code that uses Google Test}\par
31 {\cf20 // (e.g. frameworks built on top of Google Test).}\par
32 \par
33 {\cf21 #ifndef GOOGLETEST_INCLUDE_GTEST_GTEST_SPI_H_}\par
34 {\cf21 #define GOOGLETEST_INCLUDE_GTEST_GTEST_SPI_H_}\par
35 \par
36 {\cf21 #include "gtest/gtest.h"}\par
37 \par
38 GTEST_DISABLE_MSC_WARNINGS_PUSH_(4251 \\\par
39 {\cf20 /* class A needs to have dll-interface to be used by clients of class B */})\par
40 \par
41 namespace testing \{\par
42 \par
43 {\cf20 // This helper class can be used to mock out Google Test failure reporting}\par
44 {\cf20 // so that we can test Google Test or code that builds on Google Test.}\par
45 {\cf20 //}\par
46 {\cf20 // An object of this class appends a TestPartResult object to the}\par
47 {\cf20 // TestPartResultArray object given in the constructor whenever a Google Test}\par
48 {\cf20 // failure is reported. It can either intercept only failures that are}\par
49 {\cf20 // generated in the same thread that created this object or it can intercept}\par
50 {\cf20 // all generated failures. The scope of this mock object can be controlled with}\par
51 {\cf20 // the second argument to the two arguments constructor.}\par
52 {\cf17 class }GTEST_API_ ScopedFakeTestPartResultReporter\par
53     : {\cf17 public} TestPartResultReporterInterface \{\par
54  {\cf17 public}:\par
55   {\cf20 // The two possible mocking modes of this object.}\par
56   {\cf17 enum} InterceptMode \{\par
57     INTERCEPT_ONLY_CURRENT_THREAD,  {\cf20 // Intercepts only thread local failures.}\par
58     INTERCEPT_ALL_THREADS           {\cf20 // Intercepts all failures.}\par
59   \};\par
60 \par
61   {\cf20 // The c'tor sets this object as the test part result reporter used}\par
62   {\cf20 // by Google Test.  The 'result' parameter specifies where to report the}\par
63   {\cf20 // results. This reporter will only catch failures generated in the current}\par
64   {\cf20 // thread. DEPRECATED}\par
65   {\cf17 explicit} ScopedFakeTestPartResultReporter(TestPartResultArray* result);\par
66 \par
67   {\cf20 // Same as above, but you can choose the interception scope of this object.}\par
68   ScopedFakeTestPartResultReporter(InterceptMode intercept_mode,\par
69                                    TestPartResultArray* result);\par
70 \par
71   {\cf20 // The d'tor restores the previous test part result reporter.}\par
72   ~ScopedFakeTestPartResultReporter() {\cf17 override};\par
73 \par
74   {\cf20 // Appends the TestPartResult object to the TestPartResultArray}\par
75   {\cf20 // received in the constructor.}\par
76   {\cf20 //}\par
77   {\cf20 // This method is from the TestPartResultReporterInterface}\par
78   {\cf20 // interface.}\par
79   {\cf18 void} ReportTestPartResult({\cf17 const} TestPartResult& result) {\cf17 override};\par
80 \par
81  {\cf17 private}:\par
82   {\cf18 void} Init();\par
83 \par
84   {\cf17 const} InterceptMode intercept_mode_;\par
85   TestPartResultReporterInterface* old_reporter_;\par
86   TestPartResultArray* {\cf17 const} result_;\par
87 \par
88   ScopedFakeTestPartResultReporter({\cf17 const} ScopedFakeTestPartResultReporter&) =\par
89       {\cf17 delete};\par
90   ScopedFakeTestPartResultReporter& operator=(\par
91       {\cf17 const} ScopedFakeTestPartResultReporter&) = {\cf17 delete};\par
92 \};\par
93 \par
94 {\cf17 namespace }internal \{\par
95 \par
96 {\cf20 // A helper class for implementing EXPECT_FATAL_FAILURE() and}\par
97 {\cf20 // EXPECT_NONFATAL_FAILURE().  Its destructor verifies that the given}\par
98 {\cf20 // TestPartResultArray contains exactly one failure that has the given}\par
99 {\cf20 // type and contains the given substring.  If that's not the case, a}\par
100 {\cf20 // non-fatal failure will be generated.}\par
101 {\cf17 class }GTEST_API_ SingleFailureChecker \{\par
102  {\cf17 public}:\par
103   {\cf20 // The constructor remembers the arguments.}\par
104   SingleFailureChecker({\cf17 const} TestPartResultArray* results,\par
105                        TestPartResult::Type type, {\cf17 const} std::string& substr);\par
106   ~SingleFailureChecker();\par
107 \par
108  {\cf17 private}:\par
109   {\cf17 const} TestPartResultArray* {\cf17 const} results_;\par
110   {\cf17 const} TestPartResult::Type type_;\par
111   {\cf17 const} std::string substr_;\par
112 \par
113   SingleFailureChecker({\cf17 const} SingleFailureChecker&) = {\cf17 delete};\par
114   SingleFailureChecker& operator=({\cf17 const} SingleFailureChecker&) = {\cf17 delete};\par
115 \};\par
116 \par
117 \}  {\cf20 // namespace internal}\par
118 \par
119 \}  {\cf20 // namespace testing}\par
120 \par
121 GTEST_DISABLE_MSC_WARNINGS_POP_()  {\cf20 //  4251}\par
122 \par
123 {\cf20 // A set of macros for testing Google Test assertions or code that's expected}\par
124 {\cf20 // to generate Google Test fatal failures (e.g. a failure from an ASSERT_EQ, but}\par
125 {\cf20 // not a non-fatal failure, as from EXPECT_EQ).  It verifies that the given}\par
126 {\cf20 // statement will cause exactly one fatal Google Test failure with 'substr'}\par
127 {\cf20 // being part of the failure message.}\par
128 {\cf20 //}\par
129 {\cf20 // There are two different versions of this macro. EXPECT_FATAL_FAILURE only}\par
130 {\cf20 // affects and considers failures generated in the current thread and}\par
131 {\cf20 // EXPECT_FATAL_FAILURE_ON_ALL_THREADS does the same but for all threads.}\par
132 {\cf20 //}\par
133 {\cf20 // The verification of the assertion is done correctly even when the statement}\par
134 {\cf20 // throws an exception or aborts the current function.}\par
135 {\cf20 //}\par
136 {\cf20 // Known restrictions:}\par
137 {\cf20 //   - 'statement' cannot reference local non-static variables or}\par
138 {\cf20 //     non-static members of the current object.}\par
139 {\cf20 //   - 'statement' cannot return a value.}\par
140 {\cf20 //   - You cannot stream a failure message to this macro.}\par
141 {\cf20 //}\par
142 {\cf20 // Note that even though the implementations of the following two}\par
143 {\cf20 // macros are much alike, we cannot refactor them to use a common}\par
144 {\cf20 // helper macro, due to some peculiarity in how the preprocessor}\par
145 {\cf20 // works.  The AcceptsMacroThatExpandsToUnprotectedComma test in}\par
146 {\cf20 // gtest_unittest.cc will fail to compile if we do that.}\par
147 {\cf21 #define EXPECT_FATAL_FAILURE(statement, substr)                               \\}\par
148 {\cf21   do \{                                                                        \\}\par
149 {\cf21     class GTestExpectFatalFailureHelper \{                                     \\}\par
150 {\cf21      public:                                                                  \\}\par
151 {\cf21       static void Execute() \{ statement; \}                                    \\}\par
152 {\cf21     \};                                                                        \\}\par
153 {\cf21     ::testing::TestPartResultArray gtest_failures;                            \\}\par
154 {\cf21     ::testing::internal::SingleFailureChecker gtest_checker(                  \\}\par
155 {\cf21         &gtest_failures, ::testing::TestPartResult::kFatalFailure, (substr)); \\}\par
156 {\cf21     \{                                                                         \\}\par
157 {\cf21       ::testing::ScopedFakeTestPartResultReporter gtest_reporter(             \\}\par
158 {\cf21           ::testing::ScopedFakeTestPartResultReporter::                       \\}\par
159 {\cf21               INTERCEPT_ONLY_CURRENT_THREAD,                                  \\}\par
160 {\cf21           &gtest_failures);                                                   \\}\par
161 {\cf21       GTestExpectFatalFailureHelper::Execute();                               \\}\par
162 {\cf21     \}                                                                         \\}\par
163 {\cf21   \} while (::testing::internal::AlwaysFalse())}\par
164 \par
165 {\cf21 #define EXPECT_FATAL_FAILURE_ON_ALL_THREADS(statement, substr)                \\}\par
166 {\cf21   do \{                                                                        \\}\par
167 {\cf21     class GTestExpectFatalFailureHelper \{                                     \\}\par
168 {\cf21      public:                                                                  \\}\par
169 {\cf21       static void Execute() \{ statement; \}                                    \\}\par
170 {\cf21     \};                                                                        \\}\par
171 {\cf21     ::testing::TestPartResultArray gtest_failures;                            \\}\par
172 {\cf21     ::testing::internal::SingleFailureChecker gtest_checker(                  \\}\par
173 {\cf21         &gtest_failures, ::testing::TestPartResult::kFatalFailure, (substr)); \\}\par
174 {\cf21     \{                                                                         \\}\par
175 {\cf21       ::testing::ScopedFakeTestPartResultReporter gtest_reporter(             \\}\par
176 {\cf21           ::testing::ScopedFakeTestPartResultReporter::INTERCEPT_ALL_THREADS, \\}\par
177 {\cf21           &gtest_failures);                                                   \\}\par
178 {\cf21       GTestExpectFatalFailureHelper::Execute();                               \\}\par
179 {\cf21     \}                                                                         \\}\par
180 {\cf21   \} while (::testing::internal::AlwaysFalse())}\par
181 \par
182 {\cf20 // A macro for testing Google Test assertions or code that's expected to}\par
183 {\cf20 // generate Google Test non-fatal failures (e.g. a failure from an EXPECT_EQ,}\par
184 {\cf20 // but not from an ASSERT_EQ). It asserts that the given statement will cause}\par
185 {\cf20 // exactly one non-fatal Google Test failure with 'substr' being part of the}\par
186 {\cf20 // failure message.}\par
187 {\cf20 //}\par
188 {\cf20 // There are two different versions of this macro. EXPECT_NONFATAL_FAILURE only}\par
189 {\cf20 // affects and considers failures generated in the current thread and}\par
190 {\cf20 // EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS does the same but for all threads.}\par
191 {\cf20 //}\par
192 {\cf20 // 'statement' is allowed to reference local variables and members of}\par
193 {\cf20 // the current object.}\par
194 {\cf20 //}\par
195 {\cf20 // The verification of the assertion is done correctly even when the statement}\par
196 {\cf20 // throws an exception or aborts the current function.}\par
197 {\cf20 //}\par
198 {\cf20 // Known restrictions:}\par
199 {\cf20 //   - You cannot stream a failure message to this macro.}\par
200 {\cf20 //}\par
201 {\cf20 // Note that even though the implementations of the following two}\par
202 {\cf20 // macros are much alike, we cannot refactor them to use a common}\par
203 {\cf20 // helper macro, due to some peculiarity in how the preprocessor}\par
204 {\cf20 // works.  If we do that, the code won't compile when the user gives}\par
205 {\cf20 // EXPECT_NONFATAL_FAILURE() a statement that contains a macro that}\par
206 {\cf20 // expands to code containing an unprotected comma.  The}\par
207 {\cf20 // AcceptsMacroThatExpandsToUnprotectedComma test in gtest_unittest.cc}\par
208 {\cf20 // catches that.}\par
209 {\cf20 //}\par
210 {\cf20 // For the same reason, we have to write}\par
211 {\cf20 //   if (::testing::internal::AlwaysTrue()) \{ statement; \}}\par
212 {\cf20 // instead of}\par
213 {\cf20 //   GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement)}\par
214 {\cf20 // to avoid an MSVC warning on unreachable code.}\par
215 {\cf21 #define EXPECT_NONFATAL_FAILURE(statement, substr)                    \\}\par
216 {\cf21   do \{                                                                \\}\par
217 {\cf21     ::testing::TestPartResultArray gtest_failures;                    \\}\par
218 {\cf21     ::testing::internal::SingleFailureChecker gtest_checker(          \\}\par
219 {\cf21         &gtest_failures, ::testing::TestPartResult::kNonFatalFailure, \\}\par
220 {\cf21         (substr));                                                    \\}\par
221 {\cf21     \{                                                                 \\}\par
222 {\cf21       ::testing::ScopedFakeTestPartResultReporter gtest_reporter(     \\}\par
223 {\cf21           ::testing::ScopedFakeTestPartResultReporter::               \\}\par
224 {\cf21               INTERCEPT_ONLY_CURRENT_THREAD,                          \\}\par
225 {\cf21           &gtest_failures);                                           \\}\par
226 {\cf21       if (::testing::internal::AlwaysTrue()) \{                        \\}\par
227 {\cf21         statement;                                                    \\}\par
228 {\cf21       \}                                                               \\}\par
229 {\cf21     \}                                                                 \\}\par
230 {\cf21   \} while (::testing::internal::AlwaysFalse())}\par
231 \par
232 {\cf21 #define EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS(statement, substr)             \\}\par
233 {\cf21   do \{                                                                        \\}\par
234 {\cf21     ::testing::TestPartResultArray gtest_failures;                            \\}\par
235 {\cf21     ::testing::internal::SingleFailureChecker gtest_checker(                  \\}\par
236 {\cf21         &gtest_failures, ::testing::TestPartResult::kNonFatalFailure,         \\}\par
237 {\cf21         (substr));                                                            \\}\par
238 {\cf21     \{                                                                         \\}\par
239 {\cf21       ::testing::ScopedFakeTestPartResultReporter gtest_reporter(             \\}\par
240 {\cf21           ::testing::ScopedFakeTestPartResultReporter::INTERCEPT_ALL_THREADS, \\}\par
241 {\cf21           &gtest_failures);                                                   \\}\par
242 {\cf21       if (::testing::internal::AlwaysTrue()) \{                                \\}\par
243 {\cf21         statement;                                                            \\}\par
244 {\cf21       \}                                                                       \\}\par
245 {\cf21     \}                                                                         \\}\par
246 {\cf21   \} while (::testing::internal::AlwaysFalse())}\par
247 \par
248 {\cf21 #endif  }{\cf20 // GOOGLETEST_INCLUDE_GTEST_GTEST_SPI_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest-test-part.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googletest/include/gtest/gtest-test-part.h}
{\xe \v lib/googletest-main/googletest/include/gtest/gtest-test-part.h}
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2008, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // IWYU pragma: private, include "gtest/gtest.h"}\par
31 {\cf20 // IWYU pragma: friend gtest/.*}\par
32 {\cf20 // IWYU pragma: friend gmock/.*}\par
33 \par
34 {\cf21 #ifndef GOOGLETEST_INCLUDE_GTEST_GTEST_TEST_PART_H_}\par
35 {\cf21 #define GOOGLETEST_INCLUDE_GTEST_GTEST_TEST_PART_H_}\par
36 \par
37 {\cf21 #include <iosfwd>}\par
38 {\cf21 #include <vector>}\par
39 \par
40 {\cf21 #include "gtest/internal/gtest-internal.h"}\par
41 {\cf21 #include "gtest/internal/gtest-string.h"}\par
42 \par
43 GTEST_DISABLE_MSC_WARNINGS_PUSH_(4251 \\\par
44 {\cf20 /* class A needs to have dll-interface to be used by clients of class B */})\par
45 \par
46 namespace testing \{\par
47 \par
48 {\cf20 // A copyable object representing the result of a test part (i.e. an}\par
49 {\cf20 // assertion or an explicit FAIL(), ADD_FAILURE(), or SUCCESS()).}\par
50 {\cf20 //}\par
51 {\cf20 // Don't inherit from TestPartResult as its destructor is not virtual.}\par
52 {\cf17 class }GTEST_API_ TestPartResult \{\par
53  {\cf17 public}:\par
54   {\cf20 // The possible outcomes of a test part (i.e. an assertion or an}\par
55   {\cf20 // explicit SUCCEED(), FAIL(), or ADD_FAILURE()).}\par
56   {\cf17 enum} Type \{\par
57     kSuccess,          {\cf20 // Succeeded.}\par
58     kNonFatalFailure,  {\cf20 // Failed but the test can continue.}\par
59     kFatalFailure,     {\cf20 // Failed and the test should be terminated.}\par
60     kSkip              {\cf20 // Skipped.}\par
61   \};\par
62 \par
63   {\cf20 // C'tor.  TestPartResult does NOT have a default constructor.}\par
64   {\cf20 // Always use this constructor (with parameters) to create a}\par
65   {\cf20 // TestPartResult object.}\par
66   TestPartResult(Type a_type, {\cf17 const} {\cf18 char}* a_file_name, {\cf18 int} a_line_number,\par
67                  {\cf17 const} {\cf18 char}* a_message)\par
68       : type_(a_type),\par
69         file_name_(a_file_name == nullptr ? {\cf22 ""} : a_file_name),\par
70         line_number_(a_line_number),\par
71         summary_(ExtractSummary(a_message)),\par
72         message_(a_message) \{\}\par
73 \par
74   {\cf20 // Gets the outcome of the test part.}\par
75   Type type(){\cf17  const }\{ {\cf19 return} type_; \}\par
76 \par
77   {\cf20 // Gets the name of the source file where the test part took place, or}\par
78   {\cf20 // NULL if it's unknown.}\par
79   {\cf17 const} {\cf18 char}* file_name(){\cf17  const }\{\par
80     {\cf19 return} file_name_.empty() ? nullptr : file_name_.c_str();\par
81   \}\par
82 \par
83   {\cf20 // Gets the line in the source file where the test part took place,}\par
84   {\cf20 // or -1 if it's unknown.}\par
85   {\cf18 int} line_number(){\cf17  const }\{ {\cf19 return} line_number_; \}\par
86 \par
87   {\cf20 // Gets the summary of the failure message.}\par
88   {\cf17 const} {\cf18 char}* summary(){\cf17  const }\{ {\cf19 return} summary_.c_str(); \}\par
89 \par
90   {\cf20 // Gets the message associated with the test part.}\par
91   {\cf17 const} {\cf18 char}* message(){\cf17  const }\{ {\cf19 return} message_.c_str(); \}\par
92 \par
93   {\cf20 // Returns true if and only if the test part was skipped.}\par
94   {\cf18 bool} skipped(){\cf17  const }\{ {\cf19 return} type_ == kSkip; \}\par
95 \par
96   {\cf20 // Returns true if and only if the test part passed.}\par
97   {\cf18 bool} passed(){\cf17  const }\{ {\cf19 return} type_ == kSuccess; \}\par
98 \par
99   {\cf20 // Returns true if and only if the test part non-fatally failed.}\par
100   {\cf18 bool} nonfatally_failed(){\cf17  const }\{ {\cf19 return} type_ == kNonFatalFailure; \}\par
101 \par
102   {\cf20 // Returns true if and only if the test part fatally failed.}\par
103   {\cf18 bool} fatally_failed(){\cf17  const }\{ {\cf19 return} type_ == kFatalFailure; \}\par
104 \par
105   {\cf20 // Returns true if and only if the test part failed.}\par
106   {\cf18 bool} failed(){\cf17  const }\{ {\cf19 return} fatally_failed() || nonfatally_failed(); \}\par
107 \par
108  {\cf17 private}:\par
109   Type type_;\par
110 \par
111   {\cf20 // Gets the summary of the failure message by omitting the stack}\par
112   {\cf20 // trace in it.}\par
113   {\cf17 static} std::string ExtractSummary({\cf17 const} {\cf18 char}* message);\par
114 \par
115   {\cf20 // The name of the source file where the test part took place, or}\par
116   {\cf20 // "" if the source file is unknown.}\par
117   std::string file_name_;\par
118   {\cf20 // The line in the source file where the test part took place, or -1}\par
119   {\cf20 // if the line number is unknown.}\par
120   {\cf18 int} line_number_;\par
121   std::string summary_;  {\cf20 // The test failure summary.}\par
122   std::string message_;  {\cf20 // The test failure message.}\par
123 \};\par
124 \par
125 {\cf20 // Prints a TestPartResult object.}\par
126 std::ostream& operator<<(std::ostream& os, {\cf17 const} TestPartResult& result);\par
127 \par
128 {\cf20 // An array of TestPartResult objects.}\par
129 {\cf20 //}\par
130 {\cf20 // Don't inherit from TestPartResultArray as its destructor is not}\par
131 {\cf20 // virtual.}\par
132 {\cf17 class }GTEST_API_ TestPartResultArray \{\par
133  {\cf17 public}:\par
134   TestPartResultArray() \{\}\par
135 \par
136   {\cf20 // Appends the given TestPartResult to the array.}\par
137   {\cf18 void} Append({\cf17 const} TestPartResult& result);\par
138 \par
139   {\cf20 // Returns the TestPartResult at the given index (0-based).}\par
140   {\cf17 const} TestPartResult& GetTestPartResult({\cf18 int} index) {\cf17 const};\par
141 \par
142   {\cf20 // Returns the number of TestPartResult objects in the array.}\par
143   {\cf18 int} size() {\cf17 const};\par
144 \par
145  {\cf17 private}:\par
146   std::vector<TestPartResult> array_;\par
147 \par
148   TestPartResultArray({\cf17 const} TestPartResultArray&) = {\cf17 delete};\par
149   TestPartResultArray& operator=({\cf17 const} TestPartResultArray&) = {\cf17 delete};\par
150 \};\par
151 \par
152 {\cf20 // This interface knows how to report a test part result.}\par
153 {\cf17 class }GTEST_API_ TestPartResultReporterInterface \{\par
154  {\cf17 public}:\par
155   {\cf17 virtual} ~TestPartResultReporterInterface() \{\}\par
156 \par
157   {\cf17 virtual} {\cf18 void} ReportTestPartResult({\cf17 const} TestPartResult& result) = 0;\par
158 \};\par
159 \par
160 {\cf17 namespace }internal \{\par
161 \par
162 {\cf20 // This helper class is used by \{ASSERT|EXPECT\}_NO_FATAL_FAILURE to check if a}\par
163 {\cf20 // statement generates new fatal failures. To do so it registers itself as the}\par
164 {\cf20 // current test part result reporter. Besides checking if fatal failures were}\par
165 {\cf20 // reported, it only delegates the reporting to the former result reporter.}\par
166 {\cf20 // The original result reporter is restored in the destructor.}\par
167 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.}\par
168 {\cf17 class }GTEST_API_ HasNewFatalFailureHelper\par
169     : {\cf17 public} TestPartResultReporterInterface \{\par
170  {\cf17 public}:\par
171   HasNewFatalFailureHelper();\par
172   ~HasNewFatalFailureHelper() {\cf17 override};\par
173   {\cf18 void} ReportTestPartResult({\cf17 const} TestPartResult& result) {\cf17 override};\par
174   {\cf18 bool} has_new_fatal_failure(){\cf17  const }\{ {\cf19 return} has_new_fatal_failure_; \}\par
175 \par
176  {\cf17 private}:\par
177   {\cf18 bool} has_new_fatal_failure_;\par
178   TestPartResultReporterInterface* original_reporter_;\par
179 \par
180   HasNewFatalFailureHelper({\cf17 const} HasNewFatalFailureHelper&) = {\cf17 delete};\par
181   HasNewFatalFailureHelper& operator=({\cf17 const} HasNewFatalFailureHelper&) = {\cf17 delete};\par
182 \};\par
183 \par
184 \}  {\cf20 // namespace internal}\par
185 \par
186 \}  {\cf20 // namespace testing}\par
187 \par
188 GTEST_DISABLE_MSC_WARNINGS_POP_()  {\cf20 //  4251}\par
189 \par
190 {\cf21 #endif  }{\cf20 // GOOGLETEST_INCLUDE_GTEST_GTEST_TEST_PART_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest-typed-test.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googletest/include/gtest/gtest-typed-test.h}
{\xe \v lib/googletest-main/googletest/include/gtest/gtest-typed-test.h}
{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2008 Google Inc.}\par
2 {\cf20 // All Rights Reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // IWYU pragma: private, include "gtest/gtest.h"}\par
31 {\cf20 // IWYU pragma: friend gtest/.*}\par
32 {\cf20 // IWYU pragma: friend gmock/.*}\par
33 \par
34 {\cf21 #ifndef GOOGLETEST_INCLUDE_GTEST_GTEST_TYPED_TEST_H_}\par
35 {\cf21 #define GOOGLETEST_INCLUDE_GTEST_GTEST_TYPED_TEST_H_}\par
36 \par
37 {\cf20 // This header implements typed tests and type-parameterized tests.}\par
38 \par
39 {\cf20 // Typed (aka type-driven) tests repeat the same test for types in a}\par
40 {\cf20 // list.  You must know which types you want to test with when writing}\par
41 {\cf20 // typed tests. Here's how you do it:}\par
42 \par
43 {\cf21 #if 0}\par
44 \par
45 {\cf20 // First, define a fixture class template.  It should be parameterized}\par
46 {\cf20 // by a type.  Remember to derive it from testing::Test.}\par
47 {\cf17 template} <{\cf17 typename} T>\par
48 {\cf17 class }FooTest : {\cf17 public} testing::Test \{\par
49  {\cf17 public}:\par
50   ...\par
51   {\cf17 typedef} std::list<T> List;\par
52   {\cf17 static} T shared_;\par
53   T value_;\par
54 \};\par
55 \par
56 {\cf20 // Next, associate a list of types with the test suite, which will be}\par
57 {\cf20 // repeated for each type in the list.  The typedef is necessary for}\par
58 {\cf20 // the macro to parse correctly.}\par
59 {\cf17 typedef} testing::Types<char, int, unsigned int> MyTypes;\par
60 TYPED_TEST_SUITE(FooTest, MyTypes);\par
61 \par
62 {\cf20 // If the type list contains only one type, you can write that type}\par
63 {\cf20 // directly without Types<...>:}\par
64 {\cf20 //   TYPED_TEST_SUITE(FooTest, int);}\par
65 \par
66 {\cf20 // Then, use TYPED_TEST() instead of TEST_F() to define as many typed}\par
67 {\cf20 // tests for this test suite as you want.}\par
68 TYPED_TEST(FooTest, DoesBlah) \{\par
69   {\cf20 // Inside a test, refer to the special name TypeParam to get the type}\par
70   {\cf20 // parameter.  Since we are inside a derived class template, C++ requires}\par
71   {\cf20 // us to visit the members of FooTest via 'this'.}\par
72   TypeParam n = this->value_;\par
73 \par
74   {\cf20 // To visit static members of the fixture, add the TestFixture::}\par
75   {\cf20 // prefix.}\par
76   n += TestFixture::shared_;\par
77 \par
78   {\cf20 // To refer to typedefs in the fixture, add the "typename}\par
79   {\cf20 // TestFixture::" prefix.}\par
80   {\cf17 typename} TestFixture::List values;\par
81   values.push_back(n);\par
82   ...\par
83 \}\par
84 \par
85 TYPED_TEST(FooTest, HasPropertyA) \{ ... \}\par
86 \par
87 {\cf20 // TYPED_TEST_SUITE takes an optional third argument which allows to specify a}\par
88 {\cf20 // class that generates custom test name suffixes based on the type. This should}\par
89 {\cf20 // be a class which has a static template function GetName(int index) returning}\par
90 {\cf20 // a string for each type. The provided integer index equals the index of the}\par
91 {\cf20 // type in the provided type list. In many cases the index can be ignored.}\par
92 {\cf20 //}\par
93 {\cf20 // For example:}\par
94 {\cf20 //   class MyTypeNames \{}\par
95 {\cf20 //    public:}\par
96 {\cf20 //     template <typename T>}\par
97 {\cf20 //     static std::string GetName(int) \{}\par
98 {\cf20 //       if (std::is_same<T, char>()) return "char";}\par
99 {\cf20 //       if (std::is_same<T, int>()) return "int";}\par
100 {\cf20 //       if (std::is_same<T, unsigned int>()) return "unsignedInt";}\par
101 {\cf20 //     \}}\par
102 {\cf20 //   \};}\par
103 {\cf20 //   TYPED_TEST_SUITE(FooTest, MyTypes, MyTypeNames);}\par
104 \par
105 {\cf21 #endif  }{\cf20 // 0}\par
106 \par
107 {\cf20 // Type-parameterized tests are abstract test patterns parameterized}\par
108 {\cf20 // by a type.  Compared with typed tests, type-parameterized tests}\par
109 {\cf20 // allow you to define the test pattern without knowing what the type}\par
110 {\cf20 // parameters are.  The defined pattern can be instantiated with}\par
111 {\cf20 // different types any number of times, in any number of translation}\par
112 {\cf20 // units.}\par
113 {\cf20 //}\par
114 {\cf20 // If you are designing an interface or concept, you can define a}\par
115 {\cf20 // suite of type-parameterized tests to verify properties that any}\par
116 {\cf20 // valid implementation of the interface/concept should have.  Then,}\par
117 {\cf20 // each implementation can easily instantiate the test suite to verify}\par
118 {\cf20 // that it conforms to the requirements, without having to write}\par
119 {\cf20 // similar tests repeatedly.  Here's an example:}\par
120 \par
121 {\cf21 #if 0}\par
122 \par
123 {\cf20 // First, define a fixture class template.  It should be parameterized}\par
124 {\cf20 // by a type.  Remember to derive it from testing::Test.}\par
125 {\cf17 template} <{\cf17 typename} T>\par
126 {\cf17 class }FooTest : {\cf17 public} testing::Test \{\par
127   ...\par
128 \};\par
129 \par
130 {\cf20 // Next, declare that you will define a type-parameterized test suite}\par
131 {\cf20 // (the _P suffix is for "parameterized" or "pattern", whichever you}\par
132 {\cf20 // prefer):}\par
133 TYPED_TEST_SUITE_P(FooTest);\par
134 \par
135 {\cf20 // Then, use TYPED_TEST_P() to define as many type-parameterized tests}\par
136 {\cf20 // for this type-parameterized test suite as you want.}\par
137 TYPED_TEST_P(FooTest, DoesBlah) \{\par
138   {\cf20 // Inside a test, refer to TypeParam to get the type parameter.}\par
139   TypeParam n = 0;\par
140   ...\par
141 \}\par
142 \par
143 TYPED_TEST_P(FooTest, HasPropertyA) \{ ... \}\par
144 \par
145 {\cf20 // Now the tricky part: you need to register all test patterns before}\par
146 {\cf20 // you can instantiate them.  The first argument of the macro is the}\par
147 {\cf20 // test suite name; the rest are the names of the tests in this test}\par
148 {\cf20 // case.}\par
149 REGISTER_TYPED_TEST_SUITE_P(FooTest,\par
150                             DoesBlah, HasPropertyA);\par
151 \par
152 {\cf20 // Finally, you are free to instantiate the pattern with the types you}\par
153 {\cf20 // want.  If you put the above code in a header file, you can #include}\par
154 {\cf20 // it in multiple C++ source files and instantiate it multiple times.}\par
155 {\cf20 //}\par
156 {\cf20 // To distinguish different instances of the pattern, the first}\par
157 {\cf20 // argument to the INSTANTIATE_* macro is a prefix that will be added}\par
158 {\cf20 // to the actual test suite name.  Remember to pick unique prefixes for}\par
159 {\cf20 // different instances.}\par
160 {\cf17 typedef} testing::Types<char, int, unsigned int> MyTypes;\par
161 INSTANTIATE_TYPED_TEST_SUITE_P(My, FooTest, MyTypes);\par
162 \par
163 {\cf20 // If the type list contains only one type, you can write that type}\par
164 {\cf20 // directly without Types<...>:}\par
165 {\cf20 //   INSTANTIATE_TYPED_TEST_SUITE_P(My, FooTest, int);}\par
166 {\cf20 //}\par
167 {\cf20 // Similar to the optional argument of TYPED_TEST_SUITE above,}\par
168 {\cf20 // INSTANTIATE_TEST_SUITE_P takes an optional fourth argument which allows to}\par
169 {\cf20 // generate custom names.}\par
170 {\cf20 //   INSTANTIATE_TYPED_TEST_SUITE_P(My, FooTest, MyTypes, MyTypeNames);}\par
171 \par
172 {\cf21 #endif  }{\cf20 // 0}\par
173 \par
174 {\cf21 #include "gtest/internal/gtest-internal.h"}\par
175 {\cf21 #include "gtest/internal/gtest-port.h"}\par
176 {\cf21 #include "gtest/internal/gtest-type-util.h"}\par
177 \par
178 {\cf20 // Implements typed tests.}\par
179 \par
180 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.}\par
181 {\cf20 //}\par
182 {\cf20 // Expands to the name of the typedef for the type parameters of the}\par
183 {\cf20 // given test suite.}\par
184 {\cf21 #define GTEST_TYPE_PARAMS_(TestSuiteName) gtest_type_params_##TestSuiteName##_}\par
185 \par
186 {\cf20 // Expands to the name of the typedef for the NameGenerator, responsible for}\par
187 {\cf20 // creating the suffixes of the name.}\par
188 {\cf21 #define GTEST_NAME_GENERATOR_(TestSuiteName) \\}\par
189 {\cf21   gtest_type_params_##TestSuiteName##_NameGenerator}\par
190 \par
191 {\cf21 #define TYPED_TEST_SUITE(CaseName, Types, ...)                          \\}\par
192 {\cf21   typedef ::testing::internal::GenerateTypeList<Types>::type            \\}\par
193 {\cf21       GTEST_TYPE_PARAMS_(CaseName);                                     \\}\par
194 {\cf21   typedef ::testing::internal::NameGeneratorSelector<__VA_ARGS__>::type \\}\par
195 {\cf21   GTEST_NAME_GENERATOR_(CaseName)}\par
196 \par
197 {\cf21 #define TYPED_TEST(CaseName, TestName)                                        \\}\par
198 {\cf21   static_assert(sizeof(GTEST_STRINGIFY_(TestName)) > 1,                       \\}\par
199 {\cf21                 "test-name must not be empty"});                               \\\par
200   template <typename gtest_TypeParam_>                                        \\\par
201   class GTEST_TEST_CLASS_NAME_(CaseName, TestName)                            \\\par
202       : public CaseName<gtest_TypeParam_> \{                                   \\\par
203    private:                                                                   \\\par
204     typedef CaseName<gtest_TypeParam_> TestFixture;                           \\\par
205     typedef gtest_TypeParam_ TypeParam;                                       \\\par
206     void TestBody() override;                                                 \\\par
207   \};                                                                          \\\par
208   static bool gtest_##CaseName##_##TestName##_registered_                     \\\par
209       GTEST_ATTRIBUTE_UNUSED_ = ::testing::internal::TypeParameterizedTest<   \\\par
210           CaseName,                                                           \\\par
211           ::testing::internal::TemplateSel<GTEST_TEST_CLASS_NAME_(CaseName,   \\\par
212                                                                   TestName)>, \\\par
213           GTEST_TYPE_PARAMS_(                                                 \\\par
214               CaseName)>::Register("",                                        \\\par
215                                    ::testing::internal::CodeLocation(         \\\par
216                                        __FILE__, __LINE__),                   \\\par
217                                    GTEST_STRINGIFY_(CaseName),                \\\par
218                                    GTEST_STRINGIFY_(TestName), 0,             \\\par
219                                    ::testing::internal::GenerateNames<        \\\par
220                                        GTEST_NAME_GENERATOR_(CaseName),       \\\par
221                                        GTEST_TYPE_PARAMS_(CaseName)>());      \\\par
222   template <typename gtest_TypeParam_>                                        \\\par
223   void GTEST_TEST_CLASS_NAME_(CaseName,                                       \\\par
224                               TestName)<gtest_TypeParam_>::TestBody()\par
225 \par
226 {\cf20 // Legacy API is deprecated but still available}\par
227 {\cf21 #ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
228 {\cf21 #define TYPED_TEST_CASE                                                \\}\par
229 {\cf21   static_assert(::testing::internal::TypedTestCaseIsDeprecated(), ""}); \\\par
230   TYPED_TEST_SUITE\par
231 {\cf21 #endif  }{\cf20 // GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
232 \par
233 {\cf20 // Implements type-parameterized tests.}\par
234 \par
235 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.}\par
236 {\cf20 //}\par
237 {\cf20 // Expands to the namespace name that the type-parameterized tests for}\par
238 {\cf20 // the given type-parameterized test suite are defined in.  The exact}\par
239 {\cf20 // name of the namespace is subject to change without notice.}\par
240 {\cf21 #define GTEST_SUITE_NAMESPACE_(TestSuiteName) gtest_suite_##TestSuiteName##_}\par
241 \par
242 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.}\par
243 {\cf20 //}\par
244 {\cf20 // Expands to the name of the variable used to remember the names of}\par
245 {\cf20 // the defined tests in the given test suite.}\par
246 {\cf21 #define GTEST_TYPED_TEST_SUITE_P_STATE_(TestSuiteName) \\}\par
247 {\cf21   gtest_typed_test_suite_p_state_##TestSuiteName##_}\par
248 \par
249 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE DIRECTLY.}\par
250 {\cf20 //}\par
251 {\cf20 // Expands to the name of the variable used to remember the names of}\par
252 {\cf20 // the registered tests in the given test suite.}\par
253 {\cf21 #define GTEST_REGISTERED_TEST_NAMES_(TestSuiteName) \\}\par
254 {\cf21   gtest_registered_test_names_##TestSuiteName##_}\par
255 \par
256 {\cf20 // The variables defined in the type-parameterized test macros are}\par
257 {\cf20 // static as typically these macros are used in a .h file that can be}\par
258 {\cf20 // #included in multiple translation units linked together.}\par
259 {\cf21 #define TYPED_TEST_SUITE_P(SuiteName)              \\}\par
260 {\cf21   static ::testing::internal::TypedTestSuitePState \\}\par
261 {\cf21   GTEST_TYPED_TEST_SUITE_P_STATE_(SuiteName)}\par
262 \par
263 {\cf20 // Legacy API is deprecated but still available}\par
264 {\cf21 #ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
265 {\cf21 #define TYPED_TEST_CASE_P                                                 \\}\par
266 {\cf21   static_assert(::testing::internal::TypedTestCase_P_IsDeprecated(), ""}); \\\par
267   TYPED_TEST_SUITE_P\par
268 {\cf21 #endif  }{\cf20 // GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
269 \par
270 {\cf21 #define TYPED_TEST_P(SuiteName, TestName)                             \\}\par
271 {\cf21   namespace GTEST_SUITE_NAMESPACE_(SuiteName) \{                       \\}\par
272 {\cf21     template <typename gtest_TypeParam_>                              \\}\par
273 {\cf21     class TestName : public SuiteName<gtest_TypeParam_> \{             \\}\par
274 {\cf21      private:                                                         \\}\par
275 {\cf21       typedef SuiteName<gtest_TypeParam_> TestFixture;                \\}\par
276 {\cf21       typedef gtest_TypeParam_ TypeParam;                             \\}\par
277 {\cf21       void TestBody() override;                                       \\}\par
278 {\cf21     \};                                                                \\}\par
279 {\cf21     static bool gtest_##TestName##_defined_ GTEST_ATTRIBUTE_UNUSED_ = \\}\par
280 {\cf21         GTEST_TYPED_TEST_SUITE_P_STATE_(SuiteName).AddTestName(       \\}\par
281 {\cf21             __FILE__, __LINE__, GTEST_STRINGIFY_(SuiteName),          \\}\par
282 {\cf21             GTEST_STRINGIFY_(TestName));                              \\}\par
283 {\cf21   \}                                                                   \\}\par
284 {\cf21   template <typename gtest_TypeParam_>                                \\}\par
285 {\cf21   void GTEST_SUITE_NAMESPACE_(                                        \\}\par
286 {\cf21       SuiteName)::TestName<gtest_TypeParam_>::TestBody()}\par
287 \par
288 {\cf20 // Note: this won't work correctly if the trailing arguments are macros.}\par
289 {\cf21 #define REGISTER_TYPED_TEST_SUITE_P(SuiteName, ...)                         \\}\par
290 {\cf21   namespace GTEST_SUITE_NAMESPACE_(SuiteName) \{                             \\}\par
291 {\cf21     typedef ::testing::internal::Templates<__VA_ARGS__> gtest_AllTests_;    \\}\par
292 {\cf21   \}                                                                         \\}\par
293 {\cf21   static const char* const GTEST_REGISTERED_TEST_NAMES_(                    \\}\par
294 {\cf21       SuiteName) GTEST_ATTRIBUTE_UNUSED_ =                                  \\}\par
295 {\cf21       GTEST_TYPED_TEST_SUITE_P_STATE_(SuiteName).VerifyRegisteredTestNames( \\}\par
296 {\cf21           GTEST_STRINGIFY_(SuiteName), __FILE__, __LINE__, #__VA_ARGS__)}\par
297 \par
298 {\cf20 // Legacy API is deprecated but still available}\par
299 {\cf21 #ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
300 {\cf21 #define REGISTER_TYPED_TEST_CASE_P                                           \\}\par
301 {\cf21   static_assert(::testing::internal::RegisterTypedTestCase_P_IsDeprecated(), \\}\par
302 {\cf21                 ""});                                                         \\\par
303   REGISTER_TYPED_TEST_SUITE_P\par
304 {\cf21 #endif  }{\cf20 // GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
305 \par
306 {\cf21 #define INSTANTIATE_TYPED_TEST_SUITE_P(Prefix, SuiteName, Types, ...)     \\}\par
307 {\cf21   static_assert(sizeof(GTEST_STRINGIFY_(Prefix)) > 1,                     \\}\par
308 {\cf21                 "test-suit-prefix must not be empty"});                    \\\par
309   static bool gtest_##Prefix##_##SuiteName GTEST_ATTRIBUTE_UNUSED_ =      \\\par
310       ::testing::internal::TypeParameterizedTestSuite<                    \\\par
311           SuiteName, GTEST_SUITE_NAMESPACE_(SuiteName)::gtest_AllTests_,  \\\par
312           ::testing::internal::GenerateTypeList<Types>::type>::           \\\par
313           Register(GTEST_STRINGIFY_(Prefix),                              \\\par
314                    ::testing::internal::CodeLocation(__FILE__, __LINE__), \\\par
315                    &GTEST_TYPED_TEST_SUITE_P_STATE_(SuiteName),           \\\par
316                    GTEST_STRINGIFY_(SuiteName),                           \\\par
317                    GTEST_REGISTERED_TEST_NAMES_(SuiteName),               \\\par
318                    ::testing::internal::GenerateNames<                    \\\par
319                        ::testing::internal::NameGeneratorSelector<        \\\par
320                            __VA_ARGS__>::type,                            \\\par
321                        ::testing::internal::GenerateTypeList<Types>::type>())\par
322 \par
323 {\cf20 // Legacy API is deprecated but still available}\par
324 {\cf21 #ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
325 {\cf21 #define INSTANTIATE_TYPED_TEST_CASE_P                                      \\}\par
326 {\cf21   static_assert(                                                           \\}\par
327 {\cf21       ::testing::internal::InstantiateTypedTestCase_P_IsDeprecated(), ""}); \\\par
328   INSTANTIATE_TYPED_TEST_SUITE_P\par
329 {\cf21 #endif  }{\cf20 // GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
330 \par
331 {\cf21 #endif  }{\cf20 // GOOGLETEST_INCLUDE_GTEST_GTEST_TYPED_TEST_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googletest/include/gtest/gtest.h}
{\xe \v lib/googletest-main/googletest/include/gtest/gtest.h}
{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2005, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // The Google C++ Testing and Mocking Framework (Google Test)}\par
31 {\cf20 //}\par
32 {\cf20 // This header file defines the public API for Google Test.  It should be}\par
33 {\cf20 // included by any test program that uses Google Test.}\par
34 {\cf20 //}\par
35 {\cf20 // IMPORTANT NOTE: Due to limitation of the C++ language, we have to}\par
36 {\cf20 // leave some internal implementation details in this header file.}\par
37 {\cf20 // They are clearly marked by comments like this:}\par
38 {\cf20 //}\par
39 {\cf20 //   // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.}\par
40 {\cf20 //}\par
41 {\cf20 // Such code is NOT meant to be used by a user directly, and is subject}\par
42 {\cf20 // to CHANGE WITHOUT NOTICE.  Therefore DO NOT DEPEND ON IT in a user}\par
43 {\cf20 // program!}\par
44 {\cf20 //}\par
45 {\cf20 // Acknowledgment: Google Test borrowed the idea of automatic test}\par
46 {\cf20 // registration from Barthelemy Dagenais' (barthelemy@prologique.com)}\par
47 {\cf20 // easyUnit framework.}\par
48 \par
49 {\cf21 #ifndef GOOGLETEST_INCLUDE_GTEST_GTEST_H_}\par
50 {\cf21 #define GOOGLETEST_INCLUDE_GTEST_GTEST_H_}\par
51 \par
52 {\cf21 #include <cstddef>}\par
53 {\cf21 #include <limits>}\par
54 {\cf21 #include <memory>}\par
55 {\cf21 #include <ostream>}\par
56 {\cf21 #include <type_traits>}\par
57 {\cf21 #include <vector>}\par
58 \par
59 {\cf21 #include "gtest/gtest-assertion-result.h"}\par
60 {\cf21 #include "gtest/gtest-death-test.h"}\par
61 {\cf21 #include "gtest/gtest-matchers.h"}\par
62 {\cf21 #include "gtest/gtest-message.h"}\par
63 {\cf21 #include "gtest/gtest-param-test.h"}\par
64 {\cf21 #include "gtest/gtest-printers.h"}\par
65 {\cf21 #include "gtest/gtest-test-part.h"}\par
66 {\cf21 #include "gtest/gtest-typed-test.h"}\par
67 {\cf21 #include "gtest/gtest_pred_impl.h"}\par
68 {\cf21 #include "gtest/gtest_prod.h"}\par
69 {\cf21 #include "gtest/internal/gtest-internal.h"}\par
70 {\cf21 #include "gtest/internal/gtest-string.h"}\par
71 \par
72 GTEST_DISABLE_MSC_WARNINGS_PUSH_(4251 \\\par
73 {\cf20 /* class A needs to have dll-interface to be used by clients of class B */})\par
74 \par
75 {\cf20 // Declares the flags.}\par
76 \par
77 {\cf20 // This flag temporary enables the disabled tests.}\par
78 GTEST_DECLARE_bool_(also_run_disabled_tests);\par
79 \par
80 {\cf20 // This flag brings the debugger on an assertion failure.}\par
81 GTEST_DECLARE_bool_(break_on_failure);\par
82 \par
83 {\cf20 // This flag controls whether Google Test catches all test-thrown exceptions}\par
84 {\cf20 // and logs them as failures.}\par
85 GTEST_DECLARE_bool_(catch_exceptions);\par
86 \par
87 {\cf20 // This flag enables using colors in terminal output. Available values are}\par
88 {\cf20 // "yes" to enable colors, "no" (disable colors), or "auto" (the default)}\par
89 {\cf20 // to let Google Test decide.}\par
90 GTEST_DECLARE_string_(color);\par
91 \par
92 {\cf20 // This flag controls whether the test runner should continue execution past}\par
93 {\cf20 // first failure.}\par
94 GTEST_DECLARE_bool_(fail_fast);\par
95 \par
96 {\cf20 // This flag sets up the filter to select by name using a glob pattern}\par
97 {\cf20 // the tests to run. If the filter is not given all tests are executed.}\par
98 GTEST_DECLARE_string_(filter);\par
99 \par
100 {\cf20 // This flag controls whether Google Test installs a signal handler that dumps}\par
101 {\cf20 // debugging information when fatal signals are raised.}\par
102 GTEST_DECLARE_bool_(install_failure_signal_handler);\par
103 \par
104 {\cf20 // This flag causes the Google Test to list tests. None of the tests listed}\par
105 {\cf20 // are actually run if the flag is provided.}\par
106 GTEST_DECLARE_bool_(list_tests);\par
107 \par
108 {\cf20 // This flag controls whether Google Test emits a detailed XML report to a file}\par
109 {\cf20 // in addition to its normal textual output.}\par
110 GTEST_DECLARE_string_(output);\par
111 \par
112 {\cf20 // This flags control whether Google Test prints only test failures.}\par
113 GTEST_DECLARE_bool_(brief);\par
114 \par
115 {\cf20 // This flags control whether Google Test prints the elapsed time for each}\par
116 {\cf20 // test.}\par
117 GTEST_DECLARE_bool_(print_time);\par
118 \par
119 {\cf20 // This flags control whether Google Test prints UTF8 characters as text.}\par
120 GTEST_DECLARE_bool_(print_utf8);\par
121 \par
122 {\cf20 // This flag specifies the random number seed.}\par
123 GTEST_DECLARE_int32_(random_seed);\par
124 \par
125 {\cf20 // This flag sets how many times the tests are repeated. The default value}\par
126 {\cf20 // is 1. If the value is -1 the tests are repeating forever.}\par
127 GTEST_DECLARE_int32_(repeat);\par
128 \par
129 {\cf20 // This flag controls whether Google Test Environments are recreated for each}\par
130 {\cf20 // repeat of the tests. The default value is true. If set to false the global}\par
131 {\cf20 // test Environment objects are only set up once, for the first iteration, and}\par
132 {\cf20 // only torn down once, for the last.}\par
133 GTEST_DECLARE_bool_(recreate_environments_when_repeating);\par
134 \par
135 {\cf20 // This flag controls whether Google Test includes Google Test internal}\par
136 {\cf20 // stack frames in failure stack traces.}\par
137 GTEST_DECLARE_bool_(show_internal_stack_frames);\par
138 \par
139 {\cf20 // When this flag is specified, tests' order is randomized on every iteration.}\par
140 GTEST_DECLARE_bool_(shuffle);\par
141 \par
142 {\cf20 // This flag specifies the maximum number of stack frames to be}\par
143 {\cf20 // printed in a failure message.}\par
144 GTEST_DECLARE_int32_(stack_trace_depth);\par
145 \par
146 {\cf20 // When this flag is specified, a failed assertion will throw an}\par
147 {\cf20 // exception if exceptions are enabled, or exit the program with a}\par
148 {\cf20 // non-zero code otherwise. For use with an external test framework.}\par
149 GTEST_DECLARE_bool_(throw_on_failure);\par
150 \par
151 {\cf20 // When this flag is set with a "host:port" string, on supported}\par
152 {\cf20 // platforms test results are streamed to the specified port on}\par
153 {\cf20 // the specified host machine.}\par
154 GTEST_DECLARE_string_(stream_result_to);\par
155 \par
156 {\cf21 #if GTEST_USE_OWN_FLAGFILE_FLAG_}\par
157 GTEST_DECLARE_string_(flagfile);\par
158 {\cf21 #endif  }{\cf20 // GTEST_USE_OWN_FLAGFILE_FLAG_}\par
159 \par
160 {\cf17 namespace }testing \{\par
161 \par
162 {\cf20 // Silence C4100 (unreferenced formal parameter) and 4805}\par
163 {\cf20 // unsafe mix of type 'const int' and type 'const bool'}\par
164 {\cf21 #ifdef _MSC_VER}\par
165 {\cf21 #pragma warning(push)}\par
166 {\cf21 #pragma warning(disable : 4805)}\par
167 {\cf21 #pragma warning(disable : 4100)}\par
168 {\cf21 #endif}\par
169 \par
170 {\cf20 // The upper limit for valid stack trace depths.}\par
171 {\cf17 const} {\cf18 int} kMaxStackTraceDepth = 100;\par
172 \par
173 {\cf17 namespace }internal \{\par
174 \par
175 {\cf17 class }AssertHelper;\par
176 {\cf17 class }DefaultGlobalTestPartResultReporter;\par
177 {\cf17 class }ExecDeathTest;\par
178 {\cf17 class }NoExecDeathTest;\par
179 {\cf17 class }FinalSuccessChecker;\par
180 {\cf17 class }GTestFlagSaver;\par
181 {\cf17 class }StreamingListenerTest;\par
182 {\cf17 class }TestResultAccessor;\par
183 {\cf17 class }TestEventListenersAccessor;\par
184 {\cf17 class }TestEventRepeater;\par
185 {\cf17 class }UnitTestRecordPropertyTestHelper;\par
186 {\cf17 class }WindowsDeathTest;\par
187 {\cf17 class }FuchsiaDeathTest;\par
188 {\cf17 class }UnitTestImpl* GetUnitTestImpl();\par
189 {\cf18 void} ReportFailureInUnknownLocation(TestPartResult::Type result_type,\par
190                                     {\cf17 const} std::string& message);\par
191 std::set<std::string>* GetIgnoredParameterizedTestSuites();\par
192 \par
193 {\cf20 // A base class that prevents subclasses from being copyable.}\par
194 {\cf20 // We do this instead of using '= delete' so as to avoid triggering warnings}\par
195 {\cf20 // inside user code regarding any of our declarations.}\par
196 {\cf17 class }GTestNonCopyable \{\par
197  {\cf17 public}:\par
198   GTestNonCopyable() = {\cf19 default};\par
199   GTestNonCopyable({\cf17 const} GTestNonCopyable &) = {\cf17 delete};\par
200   GTestNonCopyable &operator=({\cf17 const} GTestNonCopyable &) = {\cf17 delete};\par
201   ~GTestNonCopyable() = {\cf19 default};\par
202 \};\par
203 \par
204 \}  {\cf20 // namespace internal}\par
205 \par
206 {\cf20 // The friend relationship of some of these classes is cyclic.}\par
207 {\cf20 // If we don't forward declare them the compiler might confuse the classes}\par
208 {\cf20 // in friendship clauses with same named classes on the scope.}\par
209 {\cf17 class }Test;\par
210 {\cf17 class }TestSuite;\par
211 \par
212 {\cf20 // Old API is still available but deprecated}\par
213 {\cf21 #ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
214 {\cf17 using }TestCase = TestSuite;\par
215 {\cf21 #endif}\par
216 {\cf17 class }TestInfo;\par
217 {\cf17 class }UnitTest;\par
218 \par
219 {\cf20 // The abstract class that all tests inherit from.}\par
220 {\cf20 //}\par
221 {\cf20 // In Google Test, a unit test program contains one or many TestSuites, and}\par
222 {\cf20 // each TestSuite contains one or many Tests.}\par
223 {\cf20 //}\par
224 {\cf20 // When you define a test using the TEST macro, you don't need to}\par
225 {\cf20 // explicitly derive from Test - the TEST macro automatically does}\par
226 {\cf20 // this for you.}\par
227 {\cf20 //}\par
228 {\cf20 // The only time you derive from Test is when defining a test fixture}\par
229 {\cf20 // to be used in a TEST_F.  For example:}\par
230 {\cf20 //}\par
231 {\cf20 //   class FooTest : public testing::Test \{}\par
232 {\cf20 //    protected:}\par
233 {\cf20 //     void SetUp() override \{ ... \}}\par
234 {\cf20 //     void TearDown() override \{ ... \}}\par
235 {\cf20 //     ...}\par
236 {\cf20 //   \};}\par
237 {\cf20 //}\par
238 {\cf20 //   TEST_F(FooTest, Bar) \{ ... \}}\par
239 {\cf20 //   TEST_F(FooTest, Baz) \{ ... \}}\par
240 {\cf20 //}\par
241 {\cf20 // Test is not copyable.}\par
242 {\cf17 class }GTEST_API_ Test \{\par
243  {\cf17 public}:\par
244   {\cf17 friend} {\cf17 class }TestInfo;\par
245 \par
246   {\cf20 // The d'tor is virtual as we intend to inherit from Test.}\par
247   {\cf17 virtual} ~Test();\par
248 \par
249   {\cf20 // Sets up the stuff shared by all tests in this test suite.}\par
250   {\cf20 //}\par
251   {\cf20 // Google Test will call Foo::SetUpTestSuite() before running the first}\par
252   {\cf20 // test in test suite Foo.  Hence a sub-class can define its own}\par
253   {\cf20 // SetUpTestSuite() method to shadow the one defined in the super}\par
254   {\cf20 // class.}\par
255   {\cf17 static} {\cf18 void} SetUpTestSuite() \{\}\par
256 \par
257   {\cf20 // Tears down the stuff shared by all tests in this test suite.}\par
258   {\cf20 //}\par
259   {\cf20 // Google Test will call Foo::TearDownTestSuite() after running the last}\par
260   {\cf20 // test in test suite Foo.  Hence a sub-class can define its own}\par
261   {\cf20 // TearDownTestSuite() method to shadow the one defined in the super}\par
262   {\cf20 // class.}\par
263   {\cf17 static} {\cf18 void} TearDownTestSuite() \{\}\par
264 \par
265   {\cf20 // Legacy API is deprecated but still available. Use SetUpTestSuite and}\par
266   {\cf20 // TearDownTestSuite instead.}\par
267 {\cf21 #ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
268   {\cf17 static} {\cf18 void} TearDownTestCase() \{\}\par
269   {\cf17 static} {\cf18 void} SetUpTestCase() \{\}\par
270 {\cf21 #endif  }{\cf20 // GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
271 \par
272   {\cf20 // Returns true if and only if the current test has a fatal failure.}\par
273   {\cf17 static} {\cf18 bool} HasFatalFailure();\par
274 \par
275   {\cf20 // Returns true if and only if the current test has a non-fatal failure.}\par
276   {\cf17 static} {\cf18 bool} HasNonfatalFailure();\par
277 \par
278   {\cf20 // Returns true if and only if the current test was skipped.}\par
279   {\cf17 static} {\cf18 bool} IsSkipped();\par
280 \par
281   {\cf20 // Returns true if and only if the current test has a (either fatal or}\par
282   {\cf20 // non-fatal) failure.}\par
283   {\cf17 static} {\cf18 bool} HasFailure() \{ {\cf19 return} HasFatalFailure() || HasNonfatalFailure(); \}\par
284 \par
285   {\cf20 // Logs a property for the current test, test suite, or for the entire}\par
286   {\cf20 // invocation of the test program when used outside of the context of a}\par
287   {\cf20 // test suite.  Only the last value for a given key is remembered.  These}\par
288   {\cf20 // are public static so they can be called from utility functions that are}\par
289   {\cf20 // not members of the test fixture.  Calls to RecordProperty made during}\par
290   {\cf20 // lifespan of the test (from the moment its constructor starts to the}\par
291   {\cf20 // moment its destructor finishes) will be output in XML as attributes of}\par
292   {\cf20 // the <testcase> element.  Properties recorded from fixture's}\par
293   {\cf20 // SetUpTestSuite or TearDownTestSuite are logged as attributes of the}\par
294   {\cf20 // corresponding <testsuite> element.  Calls to RecordProperty made in the}\par
295   {\cf20 // global context (before or after invocation of RUN_ALL_TESTS and from}\par
296   {\cf20 // SetUp/TearDown method of Environment objects registered with Google}\par
297   {\cf20 // Test) will be output as attributes of the <testsuites> element.}\par
298   {\cf17 static} {\cf18 void} RecordProperty({\cf17 const} std::string& key, {\cf17 const} std::string& value);\par
299   {\cf17 static} {\cf18 void} RecordProperty({\cf17 const} std::string& key, {\cf18 int} value);\par
300 \par
301  {\cf17 protected}:\par
302   {\cf20 // Creates a Test object.}\par
303   Test();\par
304 \par
305   {\cf20 // Sets up the test fixture.}\par
306   {\cf17 virtual} {\cf18 void} SetUp();\par
307 \par
308   {\cf20 // Tears down the test fixture.}\par
309   {\cf17 virtual} {\cf18 void} TearDown();\par
310 \par
311  {\cf17 private}:\par
312   {\cf20 // Returns true if and only if the current test has the same fixture class}\par
313   {\cf20 // as the first test in the current test suite.}\par
314   {\cf17 static} {\cf18 bool} HasSameFixtureClass();\par
315 \par
316   {\cf20 // Runs the test after the test fixture has been set up.}\par
317   {\cf20 //}\par
318   {\cf20 // A sub-class must implement this to define the test logic.}\par
319   {\cf20 //}\par
320   {\cf20 // DO NOT OVERRIDE THIS FUNCTION DIRECTLY IN A USER PROGRAM.}\par
321   {\cf20 // Instead, use the TEST or TEST_F macro.}\par
322   {\cf17 virtual} {\cf18 void} TestBody() = 0;\par
323 \par
324   {\cf20 // Sets up, executes, and tears down the test.}\par
325   {\cf18 void} Run();\par
326 \par
327   {\cf20 // Deletes self.  We deliberately pick an unusual name for this}\par
328   {\cf20 // internal method to avoid clashing with names used in user TESTs.}\par
329   {\cf18 void} DeleteSelf_() \{ {\cf17 delete} {\cf17 this}; \}\par
330 \par
331   {\cf17 const} std::unique_ptr<GTEST_FLAG_SAVER_> gtest_flag_saver_;\par
332 \par
333   {\cf20 // Often a user misspells SetUp() as Setup() and spends a long time}\par
334   {\cf20 // wondering why it is never called by Google Test.  The declaration of}\par
335   {\cf20 // the following method is solely for catching such an error at}\par
336   {\cf20 // compile time:}\par
337   {\cf20 //}\par
338   {\cf20 //   - The return type is deliberately chosen to be not void, so it}\par
339   {\cf20 //   will be a conflict if void Setup() is declared in the user's}\par
340   {\cf20 //   test fixture.}\par
341   {\cf20 //}\par
342   {\cf20 //   - This method is private, so it will be another compiler error}\par
343   {\cf20 //   if the method is called from the user's test fixture.}\par
344   {\cf20 //}\par
345   {\cf20 // DO NOT OVERRIDE THIS FUNCTION.}\par
346   {\cf20 //}\par
347   {\cf20 // If you see an error about overriding the following function or}\par
348   {\cf20 // about it being private, you have mis-spelled SetUp() as Setup().}\par
349   {\cf17 struct }Setup_should_be_spelled_SetUp \{\};\par
350   {\cf17 virtual} Setup_should_be_spelled_SetUp* Setup() \{ {\cf19 return} {\cf17 nullptr}; \}\par
351 \par
352   {\cf20 // We disallow copying Tests.}\par
353   Test({\cf17 const} Test&) = {\cf17 delete};\par
354   Test& operator=({\cf17 const} Test&) = {\cf17 delete};\par
355 \};\par
356 \par
357 {\cf17 typedef} internal::TimeInMillis TimeInMillis;\par
358 \par
359 {\cf20 // A copyable object representing a user specified test property which can be}\par
360 {\cf20 // output as a key/value string pair.}\par
361 {\cf20 //}\par
362 {\cf20 // Don't inherit from TestProperty as its destructor is not virtual.}\par
363 {\cf17 class }TestProperty \{\par
364  {\cf17 public}:\par
365   {\cf20 // C'tor.  TestProperty does NOT have a default constructor.}\par
366   {\cf20 // Always use this constructor (with parameters) to create a}\par
367   {\cf20 // TestProperty object.}\par
368   TestProperty({\cf17 const} std::string& a_key, {\cf17 const} std::string& a_value)\par
369       : key_(a_key), value_(a_value) \{\}\par
370 \par
371   {\cf20 // Gets the user supplied key.}\par
372   {\cf17 const} {\cf18 char}* key(){\cf17  const }\{ {\cf19 return} key_.c_str(); \}\par
373 \par
374   {\cf20 // Gets the user supplied value.}\par
375   {\cf17 const} {\cf18 char}* value(){\cf17  const }\{ {\cf19 return} value_.c_str(); \}\par
376 \par
377   {\cf20 // Sets a new value, overriding the one supplied in the constructor.}\par
378   {\cf18 void} SetValue({\cf17 const} std::string& new_value) \{ value_ = new_value; \}\par
379 \par
380  {\cf17 private}:\par
381   {\cf20 // The key supplied by the user.}\par
382   std::string key_;\par
383   {\cf20 // The value supplied by the user.}\par
384   std::string value_;\par
385 \};\par
386 \par
387 {\cf20 // The result of a single Test.  This includes a list of}\par
388 {\cf20 // TestPartResults, a list of TestProperties, a count of how many}\par
389 {\cf20 // death tests there are in the Test, and how much time it took to run}\par
390 {\cf20 // the Test.}\par
391 {\cf20 //}\par
392 {\cf20 // TestResult is not copyable.}\par
393 {\cf17 class }GTEST_API_ TestResult \{\par
394  {\cf17 public}:\par
395   {\cf20 // Creates an empty TestResult.}\par
396   TestResult();\par
397 \par
398   {\cf20 // D'tor.  Do not inherit from TestResult.}\par
399   ~TestResult();\par
400 \par
401   {\cf20 // Gets the number of all test parts.  This is the sum of the number}\par
402   {\cf20 // of successful test parts and the number of failed test parts.}\par
403   {\cf18 int} total_part_count() {\cf17 const};\par
404 \par
405   {\cf20 // Returns the number of the test properties.}\par
406   {\cf18 int} test_property_count() {\cf17 const};\par
407 \par
408   {\cf20 // Returns true if and only if the test passed (i.e. no test part failed).}\par
409   {\cf18 bool} Passed(){\cf17  const }\{ {\cf19 return} !Skipped() && !Failed(); \}\par
410 \par
411   {\cf20 // Returns true if and only if the test was skipped.}\par
412   {\cf18 bool} Skipped() {\cf17 const};\par
413 \par
414   {\cf20 // Returns true if and only if the test failed.}\par
415   {\cf18 bool} Failed() {\cf17 const};\par
416 \par
417   {\cf20 // Returns true if and only if the test fatally failed.}\par
418   {\cf18 bool} HasFatalFailure() {\cf17 const};\par
419 \par
420   {\cf20 // Returns true if and only if the test has a non-fatal failure.}\par
421   {\cf18 bool} HasNonfatalFailure() {\cf17 const};\par
422 \par
423   {\cf20 // Returns the elapsed time, in milliseconds.}\par
424   TimeInMillis elapsed_time(){\cf17  const }\{ {\cf19 return} elapsed_time_; \}\par
425 \par
426   {\cf20 // Gets the time of the test case start, in ms from the start of the}\par
427   {\cf20 // UNIX epoch.}\par
428   TimeInMillis start_timestamp(){\cf17  const }\{ {\cf19 return} start_timestamp_; \}\par
429 \par
430   {\cf20 // Returns the i-th test part result among all the results. i can range from 0}\par
431   {\cf20 // to total_part_count() - 1. If i is not in that range, aborts the program.}\par
432   {\cf17 const} TestPartResult& GetTestPartResult({\cf18 int} i) {\cf17 const};\par
433 \par
434   {\cf20 // Returns the i-th test property. i can range from 0 to}\par
435   {\cf20 // test_property_count() - 1. If i is not in that range, aborts the}\par
436   {\cf20 // program.}\par
437   {\cf17 const} TestProperty& GetTestProperty({\cf18 int} i) {\cf17 const};\par
438 \par
439  {\cf17 private}:\par
440   {\cf17 friend} {\cf17 class }TestInfo;\par
441   {\cf17 friend} {\cf17 class }TestSuite;\par
442   {\cf17 friend} {\cf17 class }UnitTest;\par
443   {\cf17 friend} {\cf17 class }internal::DefaultGlobalTestPartResultReporter;\par
444   {\cf17 friend} {\cf17 class }internal::ExecDeathTest;\par
445   {\cf17 friend} {\cf17 class }internal::TestResultAccessor;\par
446   {\cf17 friend} {\cf17 class }internal::UnitTestImpl;\par
447   {\cf17 friend} {\cf17 class }internal::WindowsDeathTest;\par
448   {\cf17 friend} {\cf17 class }internal::FuchsiaDeathTest;\par
449 \par
450   {\cf20 // Gets the vector of TestPartResults.}\par
451   {\cf17 const} std::vector<TestPartResult>& test_part_results(){\cf17  const }\{\par
452     {\cf19 return} test_part_results_;\par
453   \}\par
454 \par
455   {\cf20 // Gets the vector of TestProperties.}\par
456   {\cf17 const} std::vector<TestProperty>& test_properties(){\cf17  const }\{\par
457     {\cf19 return} test_properties_;\par
458   \}\par
459 \par
460   {\cf20 // Sets the start time.}\par
461   {\cf18 void} set_start_timestamp(TimeInMillis start) \{ start_timestamp_ = start; \}\par
462 \par
463   {\cf20 // Sets the elapsed time.}\par
464   {\cf18 void} set_elapsed_time(TimeInMillis elapsed) \{ elapsed_time_ = elapsed; \}\par
465 \par
466   {\cf20 // Adds a test property to the list. The property is validated and may add}\par
467   {\cf20 // a non-fatal failure if invalid (e.g., if it conflicts with reserved}\par
468   {\cf20 // key names). If a property is already recorded for the same key, the}\par
469   {\cf20 // value will be updated, rather than storing multiple values for the same}\par
470   {\cf20 // key.  xml_element specifies the element for which the property is being}\par
471   {\cf20 // recorded and is used for validation.}\par
472   {\cf18 void} RecordProperty({\cf17 const} std::string& xml_element,\par
473                       {\cf17 const} TestProperty& test_property);\par
474 \par
475   {\cf20 // Adds a failure if the key is a reserved attribute of Google Test}\par
476   {\cf20 // testsuite tags.  Returns true if the property is valid.}\par
477   {\cf20 // FIXME: Validate attribute names are legal and human readable.}\par
478   {\cf17 static} {\cf18 bool} ValidateTestProperty({\cf17 const} std::string& xml_element,\par
479                                    {\cf17 const} TestProperty& test_property);\par
480 \par
481   {\cf20 // Adds a test part result to the list.}\par
482   {\cf18 void} AddTestPartResult({\cf17 const} TestPartResult& test_part_result);\par
483 \par
484   {\cf20 // Returns the death test count.}\par
485   {\cf18 int} death_test_count(){\cf17  const }\{ {\cf19 return} death_test_count_; \}\par
486 \par
487   {\cf20 // Increments the death test count, returning the new count.}\par
488   {\cf18 int} increment_death_test_count() \{ {\cf19 return} ++death_test_count_; \}\par
489 \par
490   {\cf20 // Clears the test part results.}\par
491   {\cf18 void} ClearTestPartResults();\par
492 \par
493   {\cf20 // Clears the object.}\par
494   {\cf18 void} Clear();\par
495 \par
496   {\cf20 // Protects mutable state of the property vector and of owned}\par
497   {\cf20 // properties, whose values may be updated.}\par
498   internal::Mutex test_properties_mutex_;\par
499 \par
500   {\cf20 // The vector of TestPartResults}\par
501   std::vector<TestPartResult> test_part_results_;\par
502   {\cf20 // The vector of TestProperties}\par
503   std::vector<TestProperty> test_properties_;\par
504   {\cf20 // Running count of death tests.}\par
505   {\cf18 int} death_test_count_;\par
506   {\cf20 // The start time, in milliseconds since UNIX Epoch.}\par
507   TimeInMillis start_timestamp_;\par
508   {\cf20 // The elapsed time, in milliseconds.}\par
509   TimeInMillis elapsed_time_;\par
510 \par
511   {\cf20 // We disallow copying TestResult.}\par
512   TestResult({\cf17 const} TestResult&) = {\cf17 delete};\par
513   TestResult& operator=({\cf17 const} TestResult&) = {\cf17 delete};\par
514 \};  {\cf20 // class TestResult}\par
515 \par
516 {\cf20 // A TestInfo object stores the following information about a test:}\par
517 {\cf20 //}\par
518 {\cf20 //   Test suite name}\par
519 {\cf20 //   Test name}\par
520 {\cf20 //   Whether the test should be run}\par
521 {\cf20 //   A function pointer that creates the test object when invoked}\par
522 {\cf20 //   Test result}\par
523 {\cf20 //}\par
524 {\cf20 // The constructor of TestInfo registers itself with the UnitTest}\par
525 {\cf20 // singleton such that the RUN_ALL_TESTS() macro knows which tests to}\par
526 {\cf20 // run.}\par
527 {\cf17 class }GTEST_API_ TestInfo \{\par
528  {\cf17 public}:\par
529   {\cf20 // Destructs a TestInfo object.  This function is not virtual, so}\par
530   {\cf20 // don't inherit from TestInfo.}\par
531   ~TestInfo();\par
532 \par
533   {\cf20 // Returns the test suite name.}\par
534   {\cf17 const} {\cf18 char}* test_suite_name(){\cf17  const }\{ {\cf19 return} test_suite_name_.c_str(); \}\par
535 \par
536 {\cf20 // Legacy API is deprecated but still available}\par
537 {\cf21 #ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
538   {\cf17 const} {\cf18 char}* test_case_name(){\cf17  const }\{ {\cf19 return} test_suite_name(); \}\par
539 {\cf21 #endif  }{\cf20 // GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
540 \par
541   {\cf20 // Returns the test name.}\par
542   {\cf17 const} {\cf18 char}* name(){\cf17  const }\{ {\cf19 return} name_.c_str(); \}\par
543 \par
544   {\cf20 // Returns the name of the parameter type, or NULL if this is not a typed}\par
545   {\cf20 // or a type-parameterized test.}\par
546   {\cf17 const} {\cf18 char}* type_param(){\cf17  const }\{\par
547     {\cf19 if} (type_param_.get() != {\cf17 nullptr}) {\cf19 return} type_param_->c_str();\par
548     {\cf19 return} {\cf17 nullptr};\par
549   \}\par
550 \par
551   {\cf20 // Returns the text representation of the value parameter, or NULL if this}\par
552   {\cf20 // is not a value-parameterized test.}\par
553   {\cf17 const} {\cf18 char}* value_param(){\cf17  const }\{\par
554     {\cf19 if} (value_param_.get() != {\cf17 nullptr}) {\cf19 return} value_param_->c_str();\par
555     {\cf19 return} {\cf17 nullptr};\par
556   \}\par
557 \par
558   {\cf20 // Returns the file name where this test is defined.}\par
559   {\cf17 const} {\cf18 char}* file(){\cf17  const }\{ {\cf19 return} location_.file.c_str(); \}\par
560 \par
561   {\cf20 // Returns the line where this test is defined.}\par
562   {\cf18 int} line(){\cf17  const }\{ {\cf19 return} location_.line; \}\par
563 \par
564   {\cf20 // Return true if this test should not be run because it's in another shard.}\par
565   {\cf18 bool} is_in_another_shard(){\cf17  const }\{ {\cf19 return} is_in_another_shard_; \}\par
566 \par
567   {\cf20 // Returns true if this test should run, that is if the test is not}\par
568   {\cf20 // disabled (or it is disabled but the also_run_disabled_tests flag has}\par
569   {\cf20 // been specified) and its full name matches the user-specified filter.}\par
570   {\cf20 //}\par
571   {\cf20 // Google Test allows the user to filter the tests by their full names.}\par
572   {\cf20 // The full name of a test Bar in test suite Foo is defined as}\par
573   {\cf20 // "Foo.Bar".  Only the tests that match the filter will run.}\par
574   {\cf20 //}\par
575   {\cf20 // A filter is a colon-separated list of glob (not regex) patterns,}\par
576   {\cf20 // optionally followed by a '-' and a colon-separated list of}\par
577   {\cf20 // negative patterns (tests to exclude).  A test is run if it}\par
578   {\cf20 // matches one of the positive patterns and does not match any of}\par
579   {\cf20 // the negative patterns.}\par
580   {\cf20 //}\par
581   {\cf20 // For example, *A*:Foo.* is a filter that matches any string that}\par
582   {\cf20 // contains the character 'A' or starts with "Foo.".}\par
583   {\cf18 bool} should_run(){\cf17  const }\{ {\cf19 return} should_run_; \}\par
584 \par
585   {\cf20 // Returns true if and only if this test will appear in the XML report.}\par
586   {\cf18 bool} is_reportable(){\cf17  const }\{\par
587     {\cf20 // The XML report includes tests matching the filter, excluding those}\par
588     {\cf20 // run in other shards.}\par
589     {\cf19 return} matches_filter_ && !is_in_another_shard_;\par
590   \}\par
591 \par
592   {\cf20 // Returns the result of the test.}\par
593   {\cf17 const} TestResult* result(){\cf17  const }\{ {\cf19 return} &result_; \}\par
594 \par
595  {\cf17 private}:\par
596 {\cf21 #if GTEST_HAS_DEATH_TEST}\par
597   {\cf17 friend} {\cf17 class }internal::DefaultDeathTestFactory;\par
598 {\cf21 #endif  }{\cf20 // GTEST_HAS_DEATH_TEST}\par
599   {\cf17 friend} {\cf17 class }Test;\par
600   {\cf17 friend} {\cf17 class }TestSuite;\par
601   {\cf17 friend} {\cf17 class }internal::UnitTestImpl;\par
602   {\cf17 friend} {\cf17 class }internal::StreamingListenerTest;\par
603   {\cf17 friend} TestInfo* internal::MakeAndRegisterTestInfo(\par
604       {\cf17 const} {\cf18 char}* test_suite_name, {\cf17 const} {\cf18 char}* name, {\cf17 const} {\cf18 char}* type_param,\par
605       {\cf17 const} {\cf18 char}* value_param, internal::CodeLocation code_location,\par
606       internal::TypeId fixture_class_id, internal::SetUpTestSuiteFunc set_up_tc,\par
607       internal::TearDownTestSuiteFunc tear_down_tc,\par
608       internal::TestFactoryBase* factory);\par
609 \par
610   {\cf20 // Constructs a TestInfo object. The newly constructed instance assumes}\par
611   {\cf20 // ownership of the factory object.}\par
612   TestInfo({\cf17 const} std::string& test_suite_name, {\cf17 const} std::string& name,\par
613            {\cf17 const} {\cf18 char}* a_type_param,   {\cf20 // NULL if not a type-parameterized test}\par
614            {\cf17 const} {\cf18 char}* a_value_param,  {\cf20 // NULL if not a value-parameterized test}\par
615            internal::CodeLocation a_code_location,\par
616            internal::TypeId fixture_class_id,\par
617            internal::TestFactoryBase* factory);\par
618 \par
619   {\cf20 // Increments the number of death tests encountered in this test so}\par
620   {\cf20 // far.}\par
621   {\cf18 int} increment_death_test_count() \{\par
622     {\cf19 return} result_.increment_death_test_count();\par
623   \}\par
624 \par
625   {\cf20 // Creates the test object, runs it, records its result, and then}\par
626   {\cf20 // deletes it.}\par
627   {\cf18 void} Run();\par
628 \par
629   {\cf20 // Skip and records the test result for this object.}\par
630   {\cf18 void} Skip();\par
631 \par
632   {\cf17 static} {\cf18 void} ClearTestResult(TestInfo* test_info) \{\par
633     test_info->result_.Clear();\par
634   \}\par
635 \par
636   {\cf20 // These fields are immutable properties of the test.}\par
637   {\cf17 const} std::string test_suite_name_;  {\cf20 // test suite name}\par
638   {\cf17 const} std::string name_;             {\cf20 // Test name}\par
639   {\cf20 // Name of the parameter type, or NULL if this is not a typed or a}\par
640   {\cf20 // type-parameterized test.}\par
641   {\cf17 const} std::unique_ptr<const ::std::string> type_param_;\par
642   {\cf20 // Text representation of the value parameter, or NULL if this is not a}\par
643   {\cf20 // value-parameterized test.}\par
644   {\cf17 const} std::unique_ptr<const ::std::string> value_param_;\par
645   internal::CodeLocation location_;\par
646   {\cf17 const} internal::TypeId fixture_class_id_;  {\cf20 // ID of the test fixture class}\par
647   {\cf18 bool} should_run_;           {\cf20 // True if and only if this test should run}\par
648   {\cf18 bool} is_disabled_;          {\cf20 // True if and only if this test is disabled}\par
649   {\cf18 bool} matches_filter_;       {\cf20 // True if this test matches the}\par
650                               {\cf20 // user-specified filter.}\par
651   {\cf18 bool} is_in_another_shard_;  {\cf20 // Will be run in another shard.}\par
652   internal::TestFactoryBase* {\cf17 const} factory_;  {\cf20 // The factory that creates}\par
653                                               {\cf20 // the test object}\par
654 \par
655   {\cf20 // This field is mutable and needs to be reset before running the}\par
656   {\cf20 // test for the second time.}\par
657   TestResult result_;\par
658 \par
659   TestInfo({\cf17 const} TestInfo&) = {\cf17 delete};\par
660   TestInfo& operator=({\cf17 const} TestInfo&) = {\cf17 delete};\par
661 \};\par
662 \par
663 {\cf20 // A test suite, which consists of a vector of TestInfos.}\par
664 {\cf20 //}\par
665 {\cf20 // TestSuite is not copyable.}\par
666 {\cf17 class }GTEST_API_ TestSuite \{\par
667  {\cf17 public}:\par
668   {\cf20 // Creates a TestSuite with the given name.}\par
669   {\cf20 //}\par
670   {\cf20 // TestSuite does NOT have a default constructor.  Always use this}\par
671   {\cf20 // constructor to create a TestSuite object.}\par
672   {\cf20 //}\par
673   {\cf20 // Arguments:}\par
674   {\cf20 //}\par
675   {\cf20 //   name:         name of the test suite}\par
676   {\cf20 //   a_type_param: the name of the test's type parameter, or NULL if}\par
677   {\cf20 //                 this is not a type-parameterized test.}\par
678   {\cf20 //   set_up_tc:    pointer to the function that sets up the test suite}\par
679   {\cf20 //   tear_down_tc: pointer to the function that tears down the test suite}\par
680   TestSuite({\cf17 const} {\cf18 char}* name, {\cf17 const} {\cf18 char}* a_type_param,\par
681             internal::SetUpTestSuiteFunc set_up_tc,\par
682             internal::TearDownTestSuiteFunc tear_down_tc);\par
683 \par
684   {\cf20 // Destructor of TestSuite.}\par
685   {\cf17 virtual} ~TestSuite();\par
686 \par
687   {\cf20 // Gets the name of the TestSuite.}\par
688   {\cf17 const} {\cf18 char}* name(){\cf17  const }\{ {\cf19 return} name_.c_str(); \}\par
689 \par
690   {\cf20 // Returns the name of the parameter type, or NULL if this is not a}\par
691   {\cf20 // type-parameterized test suite.}\par
692   {\cf17 const} {\cf18 char}* type_param(){\cf17  const }\{\par
693     {\cf19 if} (type_param_.get() != {\cf17 nullptr}) {\cf19 return} type_param_->c_str();\par
694     {\cf19 return} {\cf17 nullptr};\par
695   \}\par
696 \par
697   {\cf20 // Returns true if any test in this test suite should run.}\par
698   {\cf18 bool} should_run(){\cf17  const }\{ {\cf19 return} should_run_; \}\par
699 \par
700   {\cf20 // Gets the number of successful tests in this test suite.}\par
701   {\cf18 int} successful_test_count() {\cf17 const};\par
702 \par
703   {\cf20 // Gets the number of skipped tests in this test suite.}\par
704   {\cf18 int} skipped_test_count() {\cf17 const};\par
705 \par
706   {\cf20 // Gets the number of failed tests in this test suite.}\par
707   {\cf18 int} failed_test_count() {\cf17 const};\par
708 \par
709   {\cf20 // Gets the number of disabled tests that will be reported in the XML report.}\par
710   {\cf18 int} reportable_disabled_test_count() {\cf17 const};\par
711 \par
712   {\cf20 // Gets the number of disabled tests in this test suite.}\par
713   {\cf18 int} disabled_test_count() {\cf17 const};\par
714 \par
715   {\cf20 // Gets the number of tests to be printed in the XML report.}\par
716   {\cf18 int} reportable_test_count() {\cf17 const};\par
717 \par
718   {\cf20 // Get the number of tests in this test suite that should run.}\par
719   {\cf18 int} test_to_run_count() {\cf17 const};\par
720 \par
721   {\cf20 // Gets the number of all tests in this test suite.}\par
722   {\cf18 int} total_test_count() {\cf17 const};\par
723 \par
724   {\cf20 // Returns true if and only if the test suite passed.}\par
725   {\cf18 bool} Passed(){\cf17  const }\{ {\cf19 return} !Failed(); \}\par
726 \par
727   {\cf20 // Returns true if and only if the test suite failed.}\par
728   {\cf18 bool} Failed(){\cf17  const }\{\par
729     {\cf19 return} failed_test_count() > 0 || ad_hoc_test_result().Failed();\par
730   \}\par
731 \par
732   {\cf20 // Returns the elapsed time, in milliseconds.}\par
733   TimeInMillis elapsed_time(){\cf17  const }\{ {\cf19 return} elapsed_time_; \}\par
734 \par
735   {\cf20 // Gets the time of the test suite start, in ms from the start of the}\par
736   {\cf20 // UNIX epoch.}\par
737   TimeInMillis start_timestamp(){\cf17  const }\{ {\cf19 return} start_timestamp_; \}\par
738 \par
739   {\cf20 // Returns the i-th test among all the tests. i can range from 0 to}\par
740   {\cf20 // total_test_count() - 1. If i is not in that range, returns NULL.}\par
741   {\cf17 const} TestInfo* GetTestInfo({\cf18 int} i) {\cf17 const};\par
742 \par
743   {\cf20 // Returns the TestResult that holds test properties recorded during}\par
744   {\cf20 // execution of SetUpTestSuite and TearDownTestSuite.}\par
745   {\cf17 const} TestResult& ad_hoc_test_result(){\cf17  const }\{ {\cf19 return} ad_hoc_test_result_; \}\par
746 \par
747  {\cf17 private}:\par
748   {\cf17 friend} {\cf17 class }Test;\par
749   {\cf17 friend} {\cf17 class }internal::UnitTestImpl;\par
750 \par
751   {\cf20 // Gets the (mutable) vector of TestInfos in this TestSuite.}\par
752   std::vector<TestInfo*>& test_info_list() \{ {\cf19 return} test_info_list_; \}\par
753 \par
754   {\cf20 // Gets the (immutable) vector of TestInfos in this TestSuite.}\par
755   {\cf17 const} std::vector<TestInfo*>& test_info_list(){\cf17  const }\{\par
756     {\cf19 return} test_info_list_;\par
757   \}\par
758 \par
759   {\cf20 // Returns the i-th test among all the tests. i can range from 0 to}\par
760   {\cf20 // total_test_count() - 1. If i is not in that range, returns NULL.}\par
761   TestInfo* GetMutableTestInfo({\cf18 int} i);\par
762 \par
763   {\cf20 // Sets the should_run member.}\par
764   {\cf18 void} set_should_run({\cf18 bool} should) \{ should_run_ = should; \}\par
765 \par
766   {\cf20 // Adds a TestInfo to this test suite.  Will delete the TestInfo upon}\par
767   {\cf20 // destruction of the TestSuite object.}\par
768   {\cf18 void} AddTestInfo(TestInfo* test_info);\par
769 \par
770   {\cf20 // Clears the results of all tests in this test suite.}\par
771   {\cf18 void} ClearResult();\par
772 \par
773   {\cf20 // Clears the results of all tests in the given test suite.}\par
774   {\cf17 static} {\cf18 void} ClearTestSuiteResult(TestSuite* test_suite) \{\par
775     test_suite->ClearResult();\par
776   \}\par
777 \par
778   {\cf20 // Runs every test in this TestSuite.}\par
779   {\cf18 void} Run();\par
780 \par
781   {\cf20 // Skips the execution of tests under this TestSuite}\par
782   {\cf18 void} Skip();\par
783 \par
784   {\cf20 // Runs SetUpTestSuite() for this TestSuite.  This wrapper is needed}\par
785   {\cf20 // for catching exceptions thrown from SetUpTestSuite().}\par
786   {\cf18 void} RunSetUpTestSuite() \{\par
787     {\cf19 if} (set_up_tc_ != {\cf17 nullptr}) \{\par
788       (*set_up_tc_)();\par
789     \}\par
790   \}\par
791 \par
792   {\cf20 // Runs TearDownTestSuite() for this TestSuite.  This wrapper is}\par
793   {\cf20 // needed for catching exceptions thrown from TearDownTestSuite().}\par
794   {\cf18 void} RunTearDownTestSuite() \{\par
795     {\cf19 if} (tear_down_tc_ != {\cf17 nullptr}) \{\par
796       (*tear_down_tc_)();\par
797     \}\par
798   \}\par
799 \par
800   {\cf20 // Returns true if and only if test passed.}\par
801   {\cf17 static} {\cf18 bool} TestPassed({\cf17 const} TestInfo* test_info) \{\par
802     {\cf19 return} test_info->should_run() && test_info->result()->Passed();\par
803   \}\par
804 \par
805   {\cf20 // Returns true if and only if test skipped.}\par
806   {\cf17 static} {\cf18 bool} TestSkipped({\cf17 const} TestInfo* test_info) \{\par
807     {\cf19 return} test_info->should_run() && test_info->result()->Skipped();\par
808   \}\par
809 \par
810   {\cf20 // Returns true if and only if test failed.}\par
811   {\cf17 static} {\cf18 bool} TestFailed({\cf17 const} TestInfo* test_info) \{\par
812     {\cf19 return} test_info->should_run() && test_info->result()->Failed();\par
813   \}\par
814 \par
815   {\cf20 // Returns true if and only if the test is disabled and will be reported in}\par
816   {\cf20 // the XML report.}\par
817   {\cf17 static} {\cf18 bool} TestReportableDisabled({\cf17 const} TestInfo* test_info) \{\par
818     {\cf19 return} test_info->is_reportable() && test_info->is_disabled_;\par
819   \}\par
820 \par
821   {\cf20 // Returns true if and only if test is disabled.}\par
822   {\cf17 static} {\cf18 bool} TestDisabled({\cf17 const} TestInfo* test_info) \{\par
823     {\cf19 return} test_info->is_disabled_;\par
824   \}\par
825 \par
826   {\cf20 // Returns true if and only if this test will appear in the XML report.}\par
827   {\cf17 static} {\cf18 bool} TestReportable({\cf17 const} TestInfo* test_info) \{\par
828     {\cf19 return} test_info->is_reportable();\par
829   \}\par
830 \par
831   {\cf20 // Returns true if the given test should run.}\par
832   {\cf17 static} {\cf18 bool} ShouldRunTest({\cf17 const} TestInfo* test_info) \{\par
833     {\cf19 return} test_info->should_run();\par
834   \}\par
835 \par
836   {\cf20 // Shuffles the tests in this test suite.}\par
837   {\cf18 void} ShuffleTests(internal::Random* random);\par
838 \par
839   {\cf20 // Restores the test order to before the first shuffle.}\par
840   {\cf18 void} UnshuffleTests();\par
841 \par
842   {\cf20 // Name of the test suite.}\par
843   std::string name_;\par
844   {\cf20 // Name of the parameter type, or NULL if this is not a typed or a}\par
845   {\cf20 // type-parameterized test.}\par
846   {\cf17 const} std::unique_ptr<const ::std::string> type_param_;\par
847   {\cf20 // The vector of TestInfos in their original order.  It owns the}\par
848   {\cf20 // elements in the vector.}\par
849   std::vector<TestInfo*> test_info_list_;\par
850   {\cf20 // Provides a level of indirection for the test list to allow easy}\par
851   {\cf20 // shuffling and restoring the test order.  The i-th element in this}\par
852   {\cf20 // vector is the index of the i-th test in the shuffled test list.}\par
853   std::vector<int> test_indices_;\par
854   {\cf20 // Pointer to the function that sets up the test suite.}\par
855   internal::SetUpTestSuiteFunc set_up_tc_;\par
856   {\cf20 // Pointer to the function that tears down the test suite.}\par
857   internal::TearDownTestSuiteFunc tear_down_tc_;\par
858   {\cf20 // True if and only if any test in this test suite should run.}\par
859   {\cf18 bool} should_run_;\par
860   {\cf20 // The start time, in milliseconds since UNIX Epoch.}\par
861   TimeInMillis start_timestamp_;\par
862   {\cf20 // Elapsed time, in milliseconds.}\par
863   TimeInMillis elapsed_time_;\par
864   {\cf20 // Holds test properties recorded during execution of SetUpTestSuite and}\par
865   {\cf20 // TearDownTestSuite.}\par
866   TestResult ad_hoc_test_result_;\par
867 \par
868   {\cf20 // We disallow copying TestSuites.}\par
869   TestSuite({\cf17 const} TestSuite&) = {\cf17 delete};\par
870   TestSuite& operator=({\cf17 const} TestSuite&) = {\cf17 delete};\par
871 \};\par
872 \par
873 {\cf20 // An Environment object is capable of setting up and tearing down an}\par
874 {\cf20 // environment.  You should subclass this to define your own}\par
875 {\cf20 // environment(s).}\par
876 {\cf20 //}\par
877 {\cf20 // An Environment object does the set-up and tear-down in virtual}\par
878 {\cf20 // methods SetUp() and TearDown() instead of the constructor and the}\par
879 {\cf20 // destructor, as:}\par
880 {\cf20 //}\par
881 {\cf20 //   1. You cannot safely throw from a destructor.  This is a problem}\par
882 {\cf20 //      as in some cases Google Test is used where exceptions are enabled, and}\par
883 {\cf20 //      we may want to implement ASSERT_* using exceptions where they are}\par
884 {\cf20 //      available.}\par
885 {\cf20 //   2. You cannot use ASSERT_* directly in a constructor or}\par
886 {\cf20 //      destructor.}\par
887 {\cf17 class }Environment \{\par
888  {\cf17 public}:\par
889   {\cf20 // The d'tor is virtual as we need to subclass Environment.}\par
890   {\cf17 virtual} ~Environment() \{\}\par
891 \par
892   {\cf20 // Override this to define how to set up the environment.}\par
893   {\cf17 virtual} {\cf18 void} SetUp() \{\}\par
894 \par
895   {\cf20 // Override this to define how to tear down the environment.}\par
896   {\cf17 virtual} {\cf18 void} TearDown() \{\}\par
897 \par
898  {\cf17 private}:\par
899   {\cf20 // If you see an error about overriding the following function or}\par
900   {\cf20 // about it being private, you have mis-spelled SetUp() as Setup().}\par
901   {\cf17 struct }Setup_should_be_spelled_SetUp \{\};\par
902   {\cf17 virtual} Setup_should_be_spelled_SetUp* Setup() \{ {\cf19 return} {\cf17 nullptr}; \}\par
903 \};\par
904 \par
905 {\cf21 #if GTEST_HAS_EXCEPTIONS}\par
906 \par
907 {\cf20 // Exception which can be thrown from TestEventListener::OnTestPartResult.}\par
908 {\cf17 class }GTEST_API_ AssertionException\par
909     : {\cf17 public} internal::GoogleTestFailureException \{\par
910  {\cf17 public}:\par
911   {\cf17 explicit} AssertionException({\cf17 const} TestPartResult& result)\par
912       : GoogleTestFailureException(result) \{\}\par
913 \};\par
914 \par
915 {\cf21 #endif  }{\cf20 // GTEST_HAS_EXCEPTIONS}\par
916 \par
917 {\cf20 // The interface for tracing execution of tests. The methods are organized in}\par
918 {\cf20 // the order the corresponding events are fired.}\par
919 {\cf17 class }TestEventListener \{\par
920  {\cf17 public}:\par
921   {\cf17 virtual} ~TestEventListener() \{\}\par
922 \par
923   {\cf20 // Fired before any test activity starts.}\par
924   {\cf17 virtual} {\cf18 void} OnTestProgramStart({\cf17 const} UnitTest& unit_test) = 0;\par
925 \par
926   {\cf20 // Fired before each iteration of tests starts.  There may be more than}\par
927   {\cf20 // one iteration if GTEST_FLAG(repeat) is set. iteration is the iteration}\par
928   {\cf20 // index, starting from 0.}\par
929   {\cf17 virtual} {\cf18 void} OnTestIterationStart({\cf17 const} UnitTest& unit_test,\par
930                                     {\cf18 int} iteration) = 0;\par
931 \par
932   {\cf20 // Fired before environment set-up for each iteration of tests starts.}\par
933   {\cf17 virtual} {\cf18 void} OnEnvironmentsSetUpStart({\cf17 const} UnitTest& unit_test) = 0;\par
934 \par
935   {\cf20 // Fired after environment set-up for each iteration of tests ends.}\par
936   {\cf17 virtual} {\cf18 void} OnEnvironmentsSetUpEnd({\cf17 const} UnitTest& unit_test) = 0;\par
937 \par
938   {\cf20 // Fired before the test suite starts.}\par
939   {\cf17 virtual} {\cf18 void} OnTestSuiteStart({\cf17 const} TestSuite& {\cf20 /*test_suite*/}) \{\}\par
940 \par
941   {\cf20 //  Legacy API is deprecated but still available}\par
942 {\cf21 #ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
943   {\cf17 virtual} {\cf18 void} OnTestCaseStart({\cf17 const} TestCase& {\cf20 /*test_case*/}) \{\}\par
944 {\cf21 #endif  }{\cf20 //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
945 \par
946   {\cf20 // Fired before the test starts.}\par
947   {\cf17 virtual} {\cf18 void} OnTestStart({\cf17 const} TestInfo& test_info) = 0;\par
948 \par
949   {\cf20 // Fired when a test is disabled}\par
950   {\cf17 virtual} {\cf18 void} OnTestDisabled({\cf17 const} TestInfo& {\cf20 /*test_info*/}) \{\}\par
951 \par
952   {\cf20 // Fired after a failed assertion or a SUCCEED() invocation.}\par
953   {\cf20 // If you want to throw an exception from this function to skip to the next}\par
954   {\cf20 // TEST, it must be AssertionException defined above, or inherited from it.}\par
955   {\cf17 virtual} {\cf18 void} OnTestPartResult({\cf17 const} TestPartResult& test_part_result) = 0;\par
956 \par
957   {\cf20 // Fired after the test ends.}\par
958   {\cf17 virtual} {\cf18 void} OnTestEnd({\cf17 const} TestInfo& test_info) = 0;\par
959 \par
960   {\cf20 // Fired after the test suite ends.}\par
961   {\cf17 virtual} {\cf18 void} OnTestSuiteEnd({\cf17 const} TestSuite& {\cf20 /*test_suite*/}) \{\}\par
962 \par
963 {\cf20 //  Legacy API is deprecated but still available}\par
964 {\cf21 #ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
965   {\cf17 virtual} {\cf18 void} OnTestCaseEnd({\cf17 const} TestCase& {\cf20 /*test_case*/}) \{\}\par
966 {\cf21 #endif  }{\cf20 //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
967 \par
968   {\cf20 // Fired before environment tear-down for each iteration of tests starts.}\par
969   {\cf17 virtual} {\cf18 void} OnEnvironmentsTearDownStart({\cf17 const} UnitTest& unit_test) = 0;\par
970 \par
971   {\cf20 // Fired after environment tear-down for each iteration of tests ends.}\par
972   {\cf17 virtual} {\cf18 void} OnEnvironmentsTearDownEnd({\cf17 const} UnitTest& unit_test) = 0;\par
973 \par
974   {\cf20 // Fired after each iteration of tests finishes.}\par
975   {\cf17 virtual} {\cf18 void} OnTestIterationEnd({\cf17 const} UnitTest& unit_test, {\cf18 int} iteration) = 0;\par
976 \par
977   {\cf20 // Fired after all test activities have ended.}\par
978   {\cf17 virtual} {\cf18 void} OnTestProgramEnd({\cf17 const} UnitTest& unit_test) = 0;\par
979 \};\par
980 \par
981 {\cf20 // The convenience class for users who need to override just one or two}\par
982 {\cf20 // methods and are not concerned that a possible change to a signature of}\par
983 {\cf20 // the methods they override will not be caught during the build.  For}\par
984 {\cf20 // comments about each method please see the definition of TestEventListener}\par
985 {\cf20 // above.}\par
986 {\cf17 class }EmptyTestEventListener : {\cf17 public} TestEventListener \{\par
987  {\cf17 public}:\par
988   {\cf18 void} OnTestProgramStart({\cf17 const} UnitTest& {\cf20 /*unit_test*/}){\cf17  override }\{\}\par
989   {\cf18 void} OnTestIterationStart({\cf17 const} UnitTest& {\cf20 /*unit_test*/},\par
990                             {\cf18 int} {\cf20 /*iteration*/}){\cf17  override }\{\}\par
991   {\cf18 void} OnEnvironmentsSetUpStart({\cf17 const} UnitTest& {\cf20 /*unit_test*/}){\cf17  override }\{\}\par
992   {\cf18 void} OnEnvironmentsSetUpEnd({\cf17 const} UnitTest& {\cf20 /*unit_test*/}){\cf17  override }\{\}\par
993   {\cf18 void} OnTestSuiteStart({\cf17 const} TestSuite& {\cf20 /*test_suite*/}){\cf17  override }\{\}\par
994 {\cf20 //  Legacy API is deprecated but still available}\par
995 {\cf21 #ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
996   {\cf18 void} OnTestCaseStart({\cf17 const} TestCase& {\cf20 /*test_case*/}){\cf17  override }\{\}\par
997 {\cf21 #endif  }{\cf20 //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
998 \par
999   {\cf18 void} OnTestStart({\cf17 const} TestInfo& {\cf20 /*test_info*/}){\cf17  override }\{\}\par
1000   {\cf18 void} OnTestDisabled({\cf17 const} TestInfo& {\cf20 /*test_info*/}){\cf17  override }\{\}\par
1001   {\cf18 void} OnTestPartResult({\cf17 const} TestPartResult& {\cf20 /*test_part_result*/}){\cf17  override }\{\}\par
1002   {\cf18 void} OnTestEnd({\cf17 const} TestInfo& {\cf20 /*test_info*/}){\cf17  override }\{\}\par
1003   {\cf18 void} OnTestSuiteEnd({\cf17 const} TestSuite& {\cf20 /*test_suite*/}){\cf17  override }\{\}\par
1004 {\cf21 #ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
1005   {\cf18 void} OnTestCaseEnd({\cf17 const} TestCase& {\cf20 /*test_case*/}){\cf17  override }\{\}\par
1006 {\cf21 #endif  }{\cf20 //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
1007 \par
1008   {\cf18 void} OnEnvironmentsTearDownStart({\cf17 const} UnitTest& {\cf20 /*unit_test*/}){\cf17  override }\{\}\par
1009   {\cf18 void} OnEnvironmentsTearDownEnd({\cf17 const} UnitTest& {\cf20 /*unit_test*/}){\cf17  override }\{\}\par
1010   {\cf18 void} OnTestIterationEnd({\cf17 const} UnitTest& {\cf20 /*unit_test*/},\par
1011                           {\cf18 int} {\cf20 /*iteration*/}){\cf17  override }\{\}\par
1012   {\cf18 void} OnTestProgramEnd({\cf17 const} UnitTest& {\cf20 /*unit_test*/}){\cf17  override }\{\}\par
1013 \};\par
1014 \par
1015 {\cf20 // TestEventListeners lets users add listeners to track events in Google Test.}\par
1016 {\cf17 class }GTEST_API_ TestEventListeners \{\par
1017  {\cf17 public}:\par
1018   TestEventListeners();\par
1019   ~TestEventListeners();\par
1020 \par
1021   {\cf20 // Appends an event listener to the end of the list. Google Test assumes}\par
1022   {\cf20 // the ownership of the listener (i.e. it will delete the listener when}\par
1023   {\cf20 // the test program finishes).}\par
1024   {\cf18 void} Append(TestEventListener* listener);\par
1025 \par
1026   {\cf20 // Removes the given event listener from the list and returns it.  It then}\par
1027   {\cf20 // becomes the caller's responsibility to delete the listener. Returns}\par
1028   {\cf20 // NULL if the listener is not found in the list.}\par
1029   TestEventListener* Release(TestEventListener* listener);\par
1030 \par
1031   {\cf20 // Returns the standard listener responsible for the default console}\par
1032   {\cf20 // output.  Can be removed from the listeners list to shut down default}\par
1033   {\cf20 // console output.  Note that removing this object from the listener list}\par
1034   {\cf20 // with Release transfers its ownership to the caller and makes this}\par
1035   {\cf20 // function return NULL the next time.}\par
1036   TestEventListener* default_result_printer(){\cf17  const }\{\par
1037     {\cf19 return} default_result_printer_;\par
1038   \}\par
1039 \par
1040   {\cf20 // Returns the standard listener responsible for the default XML output}\par
1041   {\cf20 // controlled by the --gtest_output=xml flag.  Can be removed from the}\par
1042   {\cf20 // listeners list by users who want to shut down the default XML output}\par
1043   {\cf20 // controlled by this flag and substitute it with custom one.  Note that}\par
1044   {\cf20 // removing this object from the listener list with Release transfers its}\par
1045   {\cf20 // ownership to the caller and makes this function return NULL the next}\par
1046   {\cf20 // time.}\par
1047   TestEventListener* default_xml_generator(){\cf17  const }\{\par
1048     {\cf19 return} default_xml_generator_;\par
1049   \}\par
1050 \par
1051  {\cf17 private}:\par
1052   {\cf17 friend} {\cf17 class }TestSuite;\par
1053   {\cf17 friend} {\cf17 class }TestInfo;\par
1054   {\cf17 friend} {\cf17 class }internal::DefaultGlobalTestPartResultReporter;\par
1055   {\cf17 friend} {\cf17 class }internal::NoExecDeathTest;\par
1056   {\cf17 friend} {\cf17 class }internal::TestEventListenersAccessor;\par
1057   {\cf17 friend} {\cf17 class }internal::UnitTestImpl;\par
1058 \par
1059   {\cf20 // Returns repeater that broadcasts the TestEventListener events to all}\par
1060   {\cf20 // subscribers.}\par
1061   TestEventListener* repeater();\par
1062 \par
1063   {\cf20 // Sets the default_result_printer attribute to the provided listener.}\par
1064   {\cf20 // The listener is also added to the listener list and previous}\par
1065   {\cf20 // default_result_printer is removed from it and deleted. The listener can}\par
1066   {\cf20 // also be NULL in which case it will not be added to the list. Does}\par
1067   {\cf20 // nothing if the previous and the current listener objects are the same.}\par
1068   {\cf18 void} SetDefaultResultPrinter(TestEventListener* listener);\par
1069 \par
1070   {\cf20 // Sets the default_xml_generator attribute to the provided listener.  The}\par
1071   {\cf20 // listener is also added to the listener list and previous}\par
1072   {\cf20 // default_xml_generator is removed from it and deleted. The listener can}\par
1073   {\cf20 // also be NULL in which case it will not be added to the list. Does}\par
1074   {\cf20 // nothing if the previous and the current listener objects are the same.}\par
1075   {\cf18 void} SetDefaultXmlGenerator(TestEventListener* listener);\par
1076 \par
1077   {\cf20 // Controls whether events will be forwarded by the repeater to the}\par
1078   {\cf20 // listeners in the list.}\par
1079   {\cf18 bool} EventForwardingEnabled() {\cf17 const};\par
1080   {\cf18 void} SuppressEventForwarding();\par
1081 \par
1082   {\cf20 // The actual list of listeners.}\par
1083   internal::TestEventRepeater* repeater_;\par
1084   {\cf20 // Listener responsible for the standard result output.}\par
1085   TestEventListener* default_result_printer_;\par
1086   {\cf20 // Listener responsible for the creation of the XML output file.}\par
1087   TestEventListener* default_xml_generator_;\par
1088 \par
1089   {\cf20 // We disallow copying TestEventListeners.}\par
1090   TestEventListeners({\cf17 const} TestEventListeners&) = {\cf17 delete};\par
1091   TestEventListeners& operator=({\cf17 const} TestEventListeners&) = {\cf17 delete};\par
1092 \};\par
1093 \par
1094 {\cf20 // A UnitTest consists of a vector of TestSuites.}\par
1095 {\cf20 //}\par
1096 {\cf20 // This is a singleton class.  The only instance of UnitTest is}\par
1097 {\cf20 // created when UnitTest::GetInstance() is first called.  This}\par
1098 {\cf20 // instance is never deleted.}\par
1099 {\cf20 //}\par
1100 {\cf20 // UnitTest is not copyable.}\par
1101 {\cf20 //}\par
1102 {\cf20 // This class is thread-safe as long as the methods are called}\par
1103 {\cf20 // according to their specification.}\par
1104 {\cf17 class }GTEST_API_ UnitTest \{\par
1105  {\cf17 public}:\par
1106   {\cf20 // Gets the singleton UnitTest object.  The first time this method}\par
1107   {\cf20 // is called, a UnitTest object is constructed and returned.}\par
1108   {\cf20 // Consecutive calls will return the same object.}\par
1109   {\cf17 static} UnitTest* GetInstance();\par
1110 \par
1111   {\cf20 // Runs all tests in this UnitTest object and prints the result.}\par
1112   {\cf20 // Returns 0 if successful, or 1 otherwise.}\par
1113   {\cf20 //}\par
1114   {\cf20 // This method can only be called from the main thread.}\par
1115   {\cf20 //}\par
1116   {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.}\par
1117   {\cf18 int} Run() GTEST_MUST_USE_RESULT_;\par
1118 \par
1119   {\cf20 // Returns the working directory when the first TEST() or TEST_F()}\par
1120   {\cf20 // was executed.  The UnitTest object owns the string.}\par
1121   {\cf17 const} {\cf18 char}* original_working_dir() {\cf17 const};\par
1122 \par
1123   {\cf20 // Returns the TestSuite object for the test that's currently running,}\par
1124   {\cf20 // or NULL if no test is running.}\par
1125   {\cf17 const} TestSuite* current_test_suite() {\cf17 const} GTEST_LOCK_EXCLUDED_(mutex_);\par
1126 \par
1127 {\cf20 // Legacy API is still available but deprecated}\par
1128 {\cf21 #ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
1129   {\cf17 const} TestCase* current_test_case() {\cf17 const} GTEST_LOCK_EXCLUDED_(mutex_);\par
1130 {\cf21 #endif}\par
1131 \par
1132   {\cf20 // Returns the TestInfo object for the test that's currently running,}\par
1133   {\cf20 // or NULL if no test is running.}\par
1134   {\cf17 const} TestInfo* current_test_info() {\cf17 const} GTEST_LOCK_EXCLUDED_(mutex_);\par
1135 \par
1136   {\cf20 // Returns the random seed used at the start of the current test run.}\par
1137   {\cf18 int} random_seed() {\cf17 const};\par
1138 \par
1139   {\cf20 // Returns the ParameterizedTestSuiteRegistry object used to keep track of}\par
1140   {\cf20 // value-parameterized tests and instantiate and register them.}\par
1141   {\cf20 //}\par
1142   {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.}\par
1143   internal::ParameterizedTestSuiteRegistry& parameterized_test_registry()\par
1144       GTEST_LOCK_EXCLUDED_(mutex_);\par
1145 \par
1146   {\cf20 // Gets the number of successful test suites.}\par
1147   {\cf18 int} successful_test_suite_count() {\cf17 const};\par
1148 \par
1149   {\cf20 // Gets the number of failed test suites.}\par
1150   {\cf18 int} failed_test_suite_count() {\cf17 const};\par
1151 \par
1152   {\cf20 // Gets the number of all test suites.}\par
1153   {\cf18 int} total_test_suite_count() {\cf17 const};\par
1154 \par
1155   {\cf20 // Gets the number of all test suites that contain at least one test}\par
1156   {\cf20 // that should run.}\par
1157   {\cf18 int} test_suite_to_run_count() {\cf17 const};\par
1158 \par
1159   {\cf20 //  Legacy API is deprecated but still available}\par
1160 {\cf21 #ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
1161   {\cf18 int} successful_test_case_count() {\cf17 const};\par
1162   {\cf18 int} failed_test_case_count() {\cf17 const};\par
1163   {\cf18 int} total_test_case_count() {\cf17 const};\par
1164   {\cf18 int} test_case_to_run_count() {\cf17 const};\par
1165 {\cf21 #endif  }{\cf20 //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
1166 \par
1167   {\cf20 // Gets the number of successful tests.}\par
1168   {\cf18 int} successful_test_count() {\cf17 const};\par
1169 \par
1170   {\cf20 // Gets the number of skipped tests.}\par
1171   {\cf18 int} skipped_test_count() {\cf17 const};\par
1172 \par
1173   {\cf20 // Gets the number of failed tests.}\par
1174   {\cf18 int} failed_test_count() {\cf17 const};\par
1175 \par
1176   {\cf20 // Gets the number of disabled tests that will be reported in the XML report.}\par
1177   {\cf18 int} reportable_disabled_test_count() {\cf17 const};\par
1178 \par
1179   {\cf20 // Gets the number of disabled tests.}\par
1180   {\cf18 int} disabled_test_count() {\cf17 const};\par
1181 \par
1182   {\cf20 // Gets the number of tests to be printed in the XML report.}\par
1183   {\cf18 int} reportable_test_count() {\cf17 const};\par
1184 \par
1185   {\cf20 // Gets the number of all tests.}\par
1186   {\cf18 int} total_test_count() {\cf17 const};\par
1187 \par
1188   {\cf20 // Gets the number of tests that should run.}\par
1189   {\cf18 int} test_to_run_count() {\cf17 const};\par
1190 \par
1191   {\cf20 // Gets the time of the test program start, in ms from the start of the}\par
1192   {\cf20 // UNIX epoch.}\par
1193   TimeInMillis start_timestamp() {\cf17 const};\par
1194 \par
1195   {\cf20 // Gets the elapsed time, in milliseconds.}\par
1196   TimeInMillis elapsed_time() {\cf17 const};\par
1197 \par
1198   {\cf20 // Returns true if and only if the unit test passed (i.e. all test suites}\par
1199   {\cf20 // passed).}\par
1200   {\cf18 bool} Passed() {\cf17 const};\par
1201 \par
1202   {\cf20 // Returns true if and only if the unit test failed (i.e. some test suite}\par
1203   {\cf20 // failed or something outside of all tests failed).}\par
1204   {\cf18 bool} Failed() {\cf17 const};\par
1205 \par
1206   {\cf20 // Gets the i-th test suite among all the test suites. i can range from 0 to}\par
1207   {\cf20 // total_test_suite_count() - 1. If i is not in that range, returns NULL.}\par
1208   {\cf17 const} TestSuite* GetTestSuite({\cf18 int} i) {\cf17 const};\par
1209 \par
1210 {\cf20 //  Legacy API is deprecated but still available}\par
1211 {\cf21 #ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
1212   {\cf17 const} TestCase* GetTestCase({\cf18 int} i) {\cf17 const};\par
1213 {\cf21 #endif  }{\cf20 //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
1214 \par
1215   {\cf20 // Returns the TestResult containing information on test failures and}\par
1216   {\cf20 // properties logged outside of individual test suites.}\par
1217   {\cf17 const} TestResult& ad_hoc_test_result() {\cf17 const};\par
1218 \par
1219   {\cf20 // Returns the list of event listeners that can be used to track events}\par
1220   {\cf20 // inside Google Test.}\par
1221   TestEventListeners& listeners();\par
1222 \par
1223  {\cf17 private}:\par
1224   {\cf20 // Registers and returns a global test environment.  When a test}\par
1225   {\cf20 // program is run, all global test environments will be set-up in}\par
1226   {\cf20 // the order they were registered.  After all tests in the program}\par
1227   {\cf20 // have finished, all global test environments will be torn-down in}\par
1228   {\cf20 // the *reverse* order they were registered.}\par
1229   {\cf20 //}\par
1230   {\cf20 // The UnitTest object takes ownership of the given environment.}\par
1231   {\cf20 //}\par
1232   {\cf20 // This method can only be called from the main thread.}\par
1233   Environment* AddEnvironment(Environment* env);\par
1234 \par
1235   {\cf20 // Adds a TestPartResult to the current TestResult object.  All}\par
1236   {\cf20 // Google Test assertion macros (e.g. ASSERT_TRUE, EXPECT_EQ, etc)}\par
1237   {\cf20 // eventually call this to report their results.  The user code}\par
1238   {\cf20 // should use the assertion macros instead of calling this directly.}\par
1239   {\cf18 void} AddTestPartResult(TestPartResult::Type result_type,\par
1240                          {\cf17 const} {\cf18 char}* file_name, {\cf18 int} line_number,\par
1241                          {\cf17 const} std::string& message,\par
1242                          {\cf17 const} std::string& os_stack_trace)\par
1243       GTEST_LOCK_EXCLUDED_(mutex_);\par
1244 \par
1245   {\cf20 // Adds a TestProperty to the current TestResult object when invoked from}\par
1246   {\cf20 // inside a test, to current TestSuite's ad_hoc_test_result_ when invoked}\par
1247   {\cf20 // from SetUpTestSuite or TearDownTestSuite, or to the global property set}\par
1248   {\cf20 // when invoked elsewhere.  If the result already contains a property with}\par
1249   {\cf20 // the same key, the value will be updated.}\par
1250   {\cf18 void} RecordProperty({\cf17 const} std::string& key, {\cf17 const} std::string& value);\par
1251 \par
1252   {\cf20 // Gets the i-th test suite among all the test suites. i can range from 0 to}\par
1253   {\cf20 // total_test_suite_count() - 1. If i is not in that range, returns NULL.}\par
1254   TestSuite* GetMutableTestSuite({\cf18 int} i);\par
1255 \par
1256   {\cf20 // Accessors for the implementation object.}\par
1257   internal::UnitTestImpl* impl() \{ {\cf19 return} impl_; \}\par
1258   {\cf17 const} internal::UnitTestImpl* impl(){\cf17  const }\{ {\cf19 return} impl_; \}\par
1259 \par
1260   {\cf20 // These classes and functions are friends as they need to access private}\par
1261   {\cf20 // members of UnitTest.}\par
1262   {\cf17 friend} {\cf17 class }ScopedTrace;\par
1263   {\cf17 friend} {\cf17 class }Test;\par
1264   {\cf17 friend} {\cf17 class }internal::AssertHelper;\par
1265   {\cf17 friend} {\cf17 class }internal::StreamingListenerTest;\par
1266   {\cf17 friend} {\cf17 class }internal::UnitTestRecordPropertyTestHelper;\par
1267   {\cf17 friend} Environment* AddGlobalTestEnvironment(Environment* env);\par
1268   {\cf17 friend} std::set<std::string>* internal::GetIgnoredParameterizedTestSuites();\par
1269   {\cf17 friend} internal::UnitTestImpl* internal::GetUnitTestImpl();\par
1270   {\cf17 friend} {\cf18 void} internal::ReportFailureInUnknownLocation(\par
1271       TestPartResult::Type result_type, {\cf17 const} std::string& message);\par
1272 \par
1273   {\cf20 // Creates an empty UnitTest.}\par
1274   UnitTest();\par
1275 \par
1276   {\cf20 // D'tor}\par
1277   {\cf17 virtual} ~UnitTest();\par
1278 \par
1279   {\cf20 // Pushes a trace defined by SCOPED_TRACE() on to the per-thread}\par
1280   {\cf20 // Google Test trace stack.}\par
1281   {\cf18 void} PushGTestTrace({\cf17 const} internal::TraceInfo& trace)\par
1282       GTEST_LOCK_EXCLUDED_(mutex_);\par
1283 \par
1284   {\cf20 // Pops a trace from the per-thread Google Test trace stack.}\par
1285   {\cf18 void} PopGTestTrace() GTEST_LOCK_EXCLUDED_(mutex_);\par
1286 \par
1287   {\cf20 // Protects mutable state in *impl_.  This is mutable as some const}\par
1288   {\cf20 // methods need to lock it too.}\par
1289   {\cf17 mutable} internal::Mutex mutex_;\par
1290 \par
1291   {\cf20 // Opaque implementation object.  This field is never changed once}\par
1292   {\cf20 // the object is constructed.  We don't mark it as const here, as}\par
1293   {\cf20 // doing so will cause a warning in the constructor of UnitTest.}\par
1294   {\cf20 // Mutable state in *impl_ is protected by mutex_.}\par
1295   internal::UnitTestImpl* impl_;\par
1296 \par
1297   {\cf20 // We disallow copying UnitTest.}\par
1298   UnitTest({\cf17 const} UnitTest&) = {\cf17 delete};\par
1299   UnitTest& operator=({\cf17 const} UnitTest&) = {\cf17 delete};\par
1300 \};\par
1301 \par
1302 {\cf20 // A convenient wrapper for adding an environment for the test}\par
1303 {\cf20 // program.}\par
1304 {\cf20 //}\par
1305 {\cf20 // You should call this before RUN_ALL_TESTS() is called, probably in}\par
1306 {\cf20 // main().  If you use gtest_main, you need to call this before main()}\par
1307 {\cf20 // starts for it to take effect.  For example, you can define a global}\par
1308 {\cf20 // variable like this:}\par
1309 {\cf20 //}\par
1310 {\cf20 //   testing::Environment* const foo_env =}\par
1311 {\cf20 //       testing::AddGlobalTestEnvironment(new FooEnvironment);}\par
1312 {\cf20 //}\par
1313 {\cf20 // However, we strongly recommend you to write your own main() and}\par
1314 {\cf20 // call AddGlobalTestEnvironment() there, as relying on initialization}\par
1315 {\cf20 // of global variables makes the code harder to read and may cause}\par
1316 {\cf20 // problems when you register multiple environments from different}\par
1317 {\cf20 // translation units and the environments have dependencies among them}\par
1318 {\cf20 // (remember that the compiler doesn't guarantee the order in which}\par
1319 {\cf20 // global variables from different translation units are initialized).}\par
1320 {\cf17 inline} Environment* AddGlobalTestEnvironment(Environment* env) \{\par
1321   {\cf19 return} UnitTest::GetInstance()->AddEnvironment(env);\par
1322 \}\par
1323 \par
1324 {\cf20 // Initializes Google Test.  This must be called before calling}\par
1325 {\cf20 // RUN_ALL_TESTS().  In particular, it parses a command line for the}\par
1326 {\cf20 // flags that Google Test recognizes.  Whenever a Google Test flag is}\par
1327 {\cf20 // seen, it is removed from argv, and *argc is decremented.}\par
1328 {\cf20 //}\par
1329 {\cf20 // No value is returned.  Instead, the Google Test flag variables are}\par
1330 {\cf20 // updated.}\par
1331 {\cf20 //}\par
1332 {\cf20 // Calling the function for the second time has no user-visible effect.}\par
1333 GTEST_API_ {\cf18 void} InitGoogleTest({\cf18 int}* argc, {\cf18 char}** argv);\par
1334 \par
1335 {\cf20 // This overloaded version can be used in Windows programs compiled in}\par
1336 {\cf20 // UNICODE mode.}\par
1337 GTEST_API_ {\cf18 void} InitGoogleTest({\cf18 int}* argc, {\cf18 wchar_t}** argv);\par
1338 \par
1339 {\cf20 // This overloaded version can be used on Arduino/embedded platforms where}\par
1340 {\cf20 // there is no argc/argv.}\par
1341 GTEST_API_ {\cf18 void} InitGoogleTest();\par
1342 \par
1343 {\cf17 namespace }internal \{\par
1344 \par
1345 {\cf20 // Separate the error generating code from the code path to reduce the stack}\par
1346 {\cf20 // frame size of CmpHelperEQ. This helps reduce the overhead of some sanitizers}\par
1347 {\cf20 // when calling EXPECT_* in a tight loop.}\par
1348 {\cf17 template} <{\cf17 typename} T1, {\cf17 typename} T2>\par
1349 AssertionResult CmpHelperEQFailure({\cf17 const} {\cf18 char}* lhs_expression,\par
1350                                    {\cf17 const} {\cf18 char}* rhs_expression, {\cf17 const} T1& lhs,\par
1351                                    {\cf17 const} T2& rhs) \{\par
1352   {\cf19 return} EqFailure(lhs_expression, rhs_expression,\par
1353                    FormatForComparisonFailureMessage(lhs, rhs),\par
1354                    FormatForComparisonFailureMessage(rhs, lhs), {\cf17 false});\par
1355 \}\par
1356 \par
1357 {\cf20 // This block of code defines operator==/!=}\par
1358 {\cf20 // to block lexical scope lookup.}\par
1359 {\cf20 // It prevents using invalid operator==/!= defined at namespace scope.}\par
1360 {\cf17 struct }faketype \{\};\par
1361 {\cf17 inline} {\cf18 bool} operator==(faketype, faketype) \{ {\cf19 return} {\cf17 true}; \}\par
1362 {\cf17 inline} {\cf18 bool} operator!=(faketype, faketype) \{ {\cf19 return} {\cf17 false}; \}\par
1363 \par
1364 {\cf20 // The helper function for \{ASSERT|EXPECT\}_EQ.}\par
1365 {\cf17 template} <{\cf17 typename} T1, {\cf17 typename} T2>\par
1366 AssertionResult CmpHelperEQ({\cf17 const} {\cf18 char}* lhs_expression,\par
1367                             {\cf17 const} {\cf18 char}* rhs_expression, {\cf17 const} T1& lhs,\par
1368                             {\cf17 const} T2& rhs) \{\par
1369   {\cf19 if} (lhs == rhs) \{\par
1370     {\cf19 return} AssertionSuccess();\par
1371   \}\par
1372 \par
1373   {\cf19 return} CmpHelperEQFailure(lhs_expression, rhs_expression, lhs, rhs);\par
1374 \}\par
1375 \par
1376 {\cf17 class }EqHelper \{\par
1377  {\cf17 public}:\par
1378   {\cf20 // This templatized version is for the general case.}\par
1379   {\cf17 template} <\par
1380       {\cf17 typename} T1, {\cf17 typename} T2,\par
1381       {\cf20 // Disable this overload for cases where one argument is a pointer}\par
1382       {\cf20 // and the other is the null pointer constant.}\par
1383       {\cf17 typename} std::enable_if<!std::is_integral<T1>::value ||\par
1384                               !std::is_pointer<T2>::value>::type* = {\cf17 nullptr}>\par
1385   {\cf17 static} AssertionResult Compare({\cf17 const} {\cf18 char}* lhs_expression,\par
1386                                  {\cf17 const} {\cf18 char}* rhs_expression, {\cf17 const} T1& lhs,\par
1387                                  {\cf17 const} T2& rhs) \{\par
1388     {\cf19 return} CmpHelperEQ(lhs_expression, rhs_expression, lhs, rhs);\par
1389   \}\par
1390 \par
1391   {\cf20 // With this overloaded version, we allow anonymous enums to be used}\par
1392   {\cf20 // in \{ASSERT|EXPECT\}_EQ when compiled with gcc 4, as anonymous}\par
1393   {\cf20 // enums can be implicitly cast to BiggestInt.}\par
1394   {\cf20 //}\par
1395   {\cf20 // Even though its body looks the same as the above version, we}\par
1396   {\cf20 // cannot merge the two, as it will make anonymous enums unhappy.}\par
1397   {\cf17 static} AssertionResult Compare({\cf17 const} {\cf18 char}* lhs_expression,\par
1398                                  {\cf17 const} {\cf18 char}* rhs_expression, BiggestInt lhs,\par
1399                                  BiggestInt rhs) \{\par
1400     {\cf19 return} CmpHelperEQ(lhs_expression, rhs_expression, lhs, rhs);\par
1401   \}\par
1402 \par
1403   {\cf17 template} <{\cf17 typename} T>\par
1404   {\cf17 static} AssertionResult Compare(\par
1405       {\cf17 const} {\cf18 char}* lhs_expression, {\cf17 const} {\cf18 char}* rhs_expression,\par
1406       {\cf20 // Handle cases where '0' is used as a null pointer literal.}\par
1407       std::nullptr_t {\cf20 /* lhs */}, T* rhs) \{\par
1408     {\cf20 // We already know that 'lhs' is a null pointer.}\par
1409     {\cf19 return} CmpHelperEQ(lhs_expression, rhs_expression, {\cf17 static_cast<}T*{\cf17 >}({\cf17 nullptr}),\par
1410                        rhs);\par
1411   \}\par
1412 \};\par
1413 \par
1414 {\cf20 // Separate the error generating code from the code path to reduce the stack}\par
1415 {\cf20 // frame size of CmpHelperOP. This helps reduce the overhead of some sanitizers}\par
1416 {\cf20 // when calling EXPECT_OP in a tight loop.}\par
1417 {\cf17 template} <{\cf17 typename} T1, {\cf17 typename} T2>\par
1418 AssertionResult CmpHelperOpFailure({\cf17 const} {\cf18 char}* expr1, {\cf17 const} {\cf18 char}* expr2,\par
1419                                    {\cf17 const} T1& val1, {\cf17 const} T2& val2,\par
1420                                    {\cf17 const} {\cf18 char}* op) \{\par
1421   {\cf19 return} AssertionFailure()\par
1422          << {\cf22 "Expected: ("} << expr1 << {\cf22 ") "} << op << {\cf22 " ("} << expr2\par
1423          << {\cf22 "), actual: "} << FormatForComparisonFailureMessage(val1, val2)\par
1424          << {\cf22 " vs "} << FormatForComparisonFailureMessage(val2, val1);\par
1425 \}\par
1426 \par
1427 {\cf20 // A macro for implementing the helper functions needed to implement}\par
1428 {\cf20 // ASSERT_?? and EXPECT_??.  It is here just to avoid copy-and-paste}\par
1429 {\cf20 // of similar code.}\par
1430 {\cf20 //}\par
1431 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.}\par
1432 \par
1433 {\cf21 #define GTEST_IMPL_CMP_HELPER_(op_name, op)                                \\}\par
1434 {\cf21   template <typename T1, typename T2>                                      \\}\par
1435 {\cf21   AssertionResult CmpHelper##op_name(const char* expr1, const char* expr2, \\}\par
1436 {\cf21                                      const T1& val1, const T2& val2) \{     \\}\par
1437 {\cf21     if (val1 op val2) \{                                                    \\}\par
1438 {\cf21       return AssertionSuccess();                                           \\}\par
1439 {\cf21     \} else \{                                                               \\}\par
1440 {\cf21       return CmpHelperOpFailure(expr1, expr2, val1, val2, #op);            \\}\par
1441 {\cf21     \}                                                                      \\}\par
1442 {\cf21   \}}\par
1443 \par
1444 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.}\par
1445 \par
1446 {\cf20 // Implements the helper function for \{ASSERT|EXPECT\}_NE}\par
1447 GTEST_IMPL_CMP_HELPER_(NE, !=)\par
1448 {\cf20 // Implements the helper function for \{ASSERT|EXPECT\}_LE}\par
1449 GTEST_IMPL_CMP_HELPER_(LE, <=)\par
1450 {\cf20 // Implements the helper function for \{ASSERT|EXPECT\}_LT}\par
1451 GTEST_IMPL_CMP_HELPER_(LT, <)\par
1452 {\cf20 // Implements the helper function for \{ASSERT|EXPECT\}_GE}\par
1453 GTEST_IMPL_CMP_HELPER_(GE, >=)\par
1454 {\cf20 // Implements the helper function for \{ASSERT|EXPECT\}_GT}\par
1455 GTEST_IMPL_CMP_HELPER_(GT, >)\par
1456 \par
1457 {\cf21 #undef GTEST_IMPL_CMP_HELPER_}\par
1458 \par
1459 {\cf20 // The helper function for \{ASSERT|EXPECT\}_STREQ.}\par
1460 {\cf20 //}\par
1461 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.}\par
1462 GTEST_API_ AssertionResult CmpHelperSTREQ({\cf17 const} {\cf18 char}* s1_expression,\par
1463                                           {\cf17 const} {\cf18 char}* s2_expression,\par
1464                                           {\cf17 const} {\cf18 char}* s1, {\cf17 const} {\cf18 char}* s2);\par
1465 \par
1466 {\cf20 // The helper function for \{ASSERT|EXPECT\}_STRCASEEQ.}\par
1467 {\cf20 //}\par
1468 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.}\par
1469 GTEST_API_ AssertionResult CmpHelperSTRCASEEQ({\cf17 const} {\cf18 char}* s1_expression,\par
1470                                               {\cf17 const} {\cf18 char}* s2_expression,\par
1471                                               {\cf17 const} {\cf18 char}* s1, {\cf17 const} {\cf18 char}* s2);\par
1472 \par
1473 {\cf20 // The helper function for \{ASSERT|EXPECT\}_STRNE.}\par
1474 {\cf20 //}\par
1475 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.}\par
1476 GTEST_API_ AssertionResult CmpHelperSTRNE({\cf17 const} {\cf18 char}* s1_expression,\par
1477                                           {\cf17 const} {\cf18 char}* s2_expression,\par
1478                                           {\cf17 const} {\cf18 char}* s1, {\cf17 const} {\cf18 char}* s2);\par
1479 \par
1480 {\cf20 // The helper function for \{ASSERT|EXPECT\}_STRCASENE.}\par
1481 {\cf20 //}\par
1482 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.}\par
1483 GTEST_API_ AssertionResult CmpHelperSTRCASENE({\cf17 const} {\cf18 char}* s1_expression,\par
1484                                               {\cf17 const} {\cf18 char}* s2_expression,\par
1485                                               {\cf17 const} {\cf18 char}* s1, {\cf17 const} {\cf18 char}* s2);\par
1486 \par
1487 {\cf20 // Helper function for *_STREQ on wide strings.}\par
1488 {\cf20 //}\par
1489 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.}\par
1490 GTEST_API_ AssertionResult CmpHelperSTREQ({\cf17 const} {\cf18 char}* s1_expression,\par
1491                                           {\cf17 const} {\cf18 char}* s2_expression,\par
1492                                           {\cf17 const} {\cf18 wchar_t}* s1, {\cf17 const} {\cf18 wchar_t}* s2);\par
1493 \par
1494 {\cf20 // Helper function for *_STRNE on wide strings.}\par
1495 {\cf20 //}\par
1496 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.}\par
1497 GTEST_API_ AssertionResult CmpHelperSTRNE({\cf17 const} {\cf18 char}* s1_expression,\par
1498                                           {\cf17 const} {\cf18 char}* s2_expression,\par
1499                                           {\cf17 const} {\cf18 wchar_t}* s1, {\cf17 const} {\cf18 wchar_t}* s2);\par
1500 \par
1501 \}  {\cf20 // namespace internal}\par
1502 \par
1503 {\cf20 // IsSubstring() and IsNotSubstring() are intended to be used as the}\par
1504 {\cf20 // first argument to \{EXPECT,ASSERT\}_PRED_FORMAT2(), not by}\par
1505 {\cf20 // themselves.  They check whether needle is a substring of haystack}\par
1506 {\cf20 // (NULL is considered a substring of itself only), and return an}\par
1507 {\cf20 // appropriate error message when they fail.}\par
1508 {\cf20 //}\par
1509 {\cf20 // The \{needle,haystack\}_expr arguments are the stringified}\par
1510 {\cf20 // expressions that generated the two real arguments.}\par
1511 GTEST_API_ AssertionResult IsSubstring({\cf17 const} {\cf18 char}* needle_expr,\par
1512                                        {\cf17 const} {\cf18 char}* haystack_expr,\par
1513                                        {\cf17 const} {\cf18 char}* needle,\par
1514                                        {\cf17 const} {\cf18 char}* haystack);\par
1515 GTEST_API_ AssertionResult IsSubstring({\cf17 const} {\cf18 char}* needle_expr,\par
1516                                        {\cf17 const} {\cf18 char}* haystack_expr,\par
1517                                        {\cf17 const} {\cf18 wchar_t}* needle,\par
1518                                        {\cf17 const} {\cf18 wchar_t}* haystack);\par
1519 GTEST_API_ AssertionResult IsNotSubstring({\cf17 const} {\cf18 char}* needle_expr,\par
1520                                           {\cf17 const} {\cf18 char}* haystack_expr,\par
1521                                           {\cf17 const} {\cf18 char}* needle,\par
1522                                           {\cf17 const} {\cf18 char}* haystack);\par
1523 GTEST_API_ AssertionResult IsNotSubstring({\cf17 const} {\cf18 char}* needle_expr,\par
1524                                           {\cf17 const} {\cf18 char}* haystack_expr,\par
1525                                           {\cf17 const} {\cf18 wchar_t}* needle,\par
1526                                           {\cf17 const} {\cf18 wchar_t}* haystack);\par
1527 GTEST_API_ AssertionResult IsSubstring({\cf17 const} {\cf18 char}* needle_expr,\par
1528                                        {\cf17 const} {\cf18 char}* haystack_expr,\par
1529                                        const ::std::string& needle,\par
1530                                        const ::std::string& haystack);\par
1531 GTEST_API_ AssertionResult IsNotSubstring({\cf17 const} {\cf18 char}* needle_expr,\par
1532                                           {\cf17 const} {\cf18 char}* haystack_expr,\par
1533                                           const ::std::string& needle,\par
1534                                           const ::std::string& haystack);\par
1535 \par
1536 {\cf21 #if GTEST_HAS_STD_WSTRING}\par
1537 GTEST_API_ AssertionResult IsSubstring({\cf17 const} {\cf18 char}* needle_expr,\par
1538                                        {\cf17 const} {\cf18 char}* haystack_expr,\par
1539                                        const ::std::wstring& needle,\par
1540                                        const ::std::wstring& haystack);\par
1541 GTEST_API_ AssertionResult IsNotSubstring({\cf17 const} {\cf18 char}* needle_expr,\par
1542                                           {\cf17 const} {\cf18 char}* haystack_expr,\par
1543                                           const ::std::wstring& needle,\par
1544                                           const ::std::wstring& haystack);\par
1545 {\cf21 #endif  }{\cf20 // GTEST_HAS_STD_WSTRING}\par
1546 \par
1547 {\cf17 namespace }internal \{\par
1548 \par
1549 {\cf20 // Helper template function for comparing floating-points.}\par
1550 {\cf20 //}\par
1551 {\cf20 // Template parameter:}\par
1552 {\cf20 //}\par
1553 {\cf20 //   RawType: the raw floating-point type (either float or double)}\par
1554 {\cf20 //}\par
1555 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.}\par
1556 {\cf17 template} <{\cf17 typename} RawType>\par
1557 AssertionResult CmpHelperFloatingPointEQ({\cf17 const} {\cf18 char}* lhs_expression,\par
1558                                          {\cf17 const} {\cf18 char}* rhs_expression,\par
1559                                          RawType lhs_value, RawType rhs_value) \{\par
1560   {\cf17 const} FloatingPoint<RawType> lhs(lhs_value), rhs(rhs_value);\par
1561 \par
1562   {\cf19 if} (lhs.AlmostEquals(rhs)) \{\par
1563     {\cf19 return} AssertionSuccess();\par
1564   \}\par
1565 \par
1566   ::std::stringstream lhs_ss;\par
1567   lhs_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)\par
1568          << lhs_value;\par
1569 \par
1570   ::std::stringstream rhs_ss;\par
1571   rhs_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)\par
1572          << rhs_value;\par
1573 \par
1574   {\cf19 return} EqFailure(lhs_expression, rhs_expression,\par
1575                    StringStreamToString(&lhs_ss), StringStreamToString(&rhs_ss),\par
1576                    {\cf17 false});\par
1577 \}\par
1578 \par
1579 {\cf20 // Helper function for implementing ASSERT_NEAR.}\par
1580 {\cf20 //}\par
1581 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.}\par
1582 GTEST_API_ AssertionResult DoubleNearPredFormat({\cf17 const} {\cf18 char}* expr1,\par
1583                                                 {\cf17 const} {\cf18 char}* expr2,\par
1584                                                 {\cf17 const} {\cf18 char}* abs_error_expr,\par
1585                                                 {\cf18 double} val1, {\cf18 double} val2,\par
1586                                                 {\cf18 double} abs_error);\par
1587 \par
1588 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.}\par
1589 {\cf20 // A class that enables one to stream messages to assertion macros}\par
1590 {\cf17 class }GTEST_API_ AssertHelper \{\par
1591  {\cf17 public}:\par
1592   {\cf20 // Constructor.}\par
1593   AssertHelper(TestPartResult::Type type, {\cf17 const} {\cf18 char}* file, {\cf18 int} line,\par
1594                {\cf17 const} {\cf18 char}* message);\par
1595   ~AssertHelper();\par
1596 \par
1597   {\cf20 // Message assignment is a semantic trick to enable assertion}\par
1598   {\cf20 // streaming; see the GTEST_MESSAGE_ macro below.}\par
1599   {\cf18 void} operator=({\cf17 const} Message& message) {\cf17 const};\par
1600 \par
1601  {\cf17 private}:\par
1602   {\cf20 // We put our data in a struct so that the size of the AssertHelper class can}\par
1603   {\cf20 // be as small as possible.  This is important because gcc is incapable of}\par
1604   {\cf20 // re-using stack space even for temporary variables, so every EXPECT_EQ}\par
1605   {\cf20 // reserves stack space for another AssertHelper.}\par
1606   {\cf17 struct }AssertHelperData \{\par
1607     AssertHelperData(TestPartResult::Type t, {\cf17 const} {\cf18 char}* srcfile, {\cf18 int} line_num,\par
1608                      {\cf17 const} {\cf18 char}* msg)\par
1609         : type(t), file(srcfile), line(line_num), message(msg) \{\}\par
1610 \par
1611     TestPartResult::Type {\cf17 const} type;\par
1612     {\cf17 const} {\cf18 char}* {\cf17 const} file;\par
1613     {\cf18 int} {\cf17 const} line;\par
1614     std::string {\cf17 const} message;\par
1615 \par
1616    {\cf17 private}:\par
1617     AssertHelperData({\cf17 const} AssertHelperData&) = {\cf17 delete};\par
1618     AssertHelperData& operator=({\cf17 const} AssertHelperData&) = {\cf17 delete};\par
1619   \};\par
1620 \par
1621   AssertHelperData* {\cf17 const} data_;\par
1622 \par
1623   AssertHelper({\cf17 const} AssertHelper&) = {\cf17 delete};\par
1624   AssertHelper& operator=({\cf17 const} AssertHelper&) = {\cf17 delete};\par
1625 \};\par
1626 \par
1627 \}  {\cf20 // namespace internal}\par
1628 \par
1629 {\cf20 // The pure interface class that all value-parameterized tests inherit from.}\par
1630 {\cf20 // A value-parameterized class must inherit from both ::testing::Test and}\par
1631 {\cf20 // ::testing::WithParamInterface. In most cases that just means inheriting}\par
1632 {\cf20 // from ::testing::TestWithParam, but more complicated test hierarchies}\par
1633 {\cf20 // may need to inherit from Test and WithParamInterface at different levels.}\par
1634 {\cf20 //}\par
1635 {\cf20 // This interface has support for accessing the test parameter value via}\par
1636 {\cf20 // the GetParam() method.}\par
1637 {\cf20 //}\par
1638 {\cf20 // Use it with one of the parameter generator defining functions, like Range(),}\par
1639 {\cf20 // Values(), ValuesIn(), Bool(), Combine(), and ConvertGenerator<T>().}\par
1640 {\cf20 //}\par
1641 {\cf20 // class FooTest : public ::testing::TestWithParam<int> \{}\par
1642 {\cf20 //  protected:}\par
1643 {\cf20 //   FooTest() \{}\par
1644 {\cf20 //     // Can use GetParam() here.}\par
1645 {\cf20 //   \}}\par
1646 {\cf20 //   ~FooTest() override \{}\par
1647 {\cf20 //     // Can use GetParam() here.}\par
1648 {\cf20 //   \}}\par
1649 {\cf20 //   void SetUp() override \{}\par
1650 {\cf20 //     // Can use GetParam() here.}\par
1651 {\cf20 //   \}}\par
1652 {\cf20 //   void TearDown override \{}\par
1653 {\cf20 //     // Can use GetParam() here.}\par
1654 {\cf20 //   \}}\par
1655 {\cf20 // \};}\par
1656 {\cf20 // TEST_P(FooTest, DoesBar) \{}\par
1657 {\cf20 //   // Can use GetParam() method here.}\par
1658 {\cf20 //   Foo foo;}\par
1659 {\cf20 //   ASSERT_TRUE(foo.DoesBar(GetParam()));}\par
1660 {\cf20 // \}}\par
1661 {\cf20 // INSTANTIATE_TEST_SUITE_P(OneToTenRange, FooTest, ::testing::Range(1, 10));}\par
1662 \par
1663 {\cf17 template} <{\cf17 typename} T>\par
1664 {\cf17 class }WithParamInterface \{\par
1665  {\cf17 public}:\par
1666   {\cf17 typedef} T ParamType;\par
1667   {\cf17 virtual} ~WithParamInterface() \{\}\par
1668 \par
1669   {\cf20 // The current parameter value. Is also available in the test fixture's}\par
1670   {\cf20 // constructor.}\par
1671   {\cf17 static} {\cf17 const} ParamType& GetParam() \{\par
1672     GTEST_CHECK_(parameter_ != {\cf17 nullptr})\par
1673         << {\cf22 "GetParam() can only be called inside a value-parameterized test "}\par
1674         << {\cf22 "-- did you intend to write TEST_P instead of TEST_F?"};\par
1675     {\cf19 return} *parameter_;\par
1676   \}\par
1677 \par
1678  {\cf17 private}:\par
1679   {\cf20 // Sets parameter value. The caller is responsible for making sure the value}\par
1680   {\cf20 // remains alive and unchanged throughout the current test.}\par
1681   {\cf17 static} {\cf18 void} SetParam({\cf17 const} ParamType* parameter) \{ parameter_ = parameter; \}\par
1682 \par
1683   {\cf20 // Static value used for accessing parameter during a test lifetime.}\par
1684   {\cf17 static} {\cf17 const} ParamType* parameter_;\par
1685 \par
1686   {\cf20 // TestClass must be a subclass of WithParamInterface<T> and Test.}\par
1687   {\cf17 template} <{\cf17 class} TestClass>\par
1688   {\cf17 friend} {\cf17 class }internal::ParameterizedTestFactory;\par
1689 \};\par
1690 \par
1691 {\cf17 template} <{\cf17 typename} T>\par
1692 {\cf17 const} T* WithParamInterface<T>::parameter_ = {\cf17 nullptr};\par
1693 \par
1694 {\cf20 // Most value-parameterized classes can ignore the existence of}\par
1695 {\cf20 // WithParamInterface, and can just inherit from ::testing::TestWithParam.}\par
1696 \par
1697 {\cf17 template} <{\cf17 typename} T>\par
1698 {\cf17 class }TestWithParam : {\cf17 public} Test, {\cf17 public} WithParamInterface<T> \{\};\par
1699 \par
1700 {\cf20 // Macros for indicating success/failure in test code.}\par
1701 \par
1702 {\cf20 // Skips test in runtime.}\par
1703 {\cf20 // Skipping test aborts current function.}\par
1704 {\cf20 // Skipped tests are neither successful nor failed.}\par
1705 {\cf21 #define GTEST_SKIP() GTEST_SKIP_(""})\par
1706 \par
1707 {\cf20 // ADD_FAILURE unconditionally adds a failure to the current test.}\par
1708 {\cf20 // SUCCEED generates a success - it doesn't automatically make the}\par
1709 {\cf20 // current test successful, as a test is only successful when it has}\par
1710 {\cf20 // no failure.}\par
1711 {\cf20 //}\par
1712 {\cf20 // EXPECT_* verifies that a certain condition is satisfied.  If not,}\par
1713 {\cf20 // it behaves like ADD_FAILURE.  In particular:}\par
1714 {\cf20 //}\par
1715 {\cf20 //   EXPECT_TRUE  verifies that a Boolean condition is true.}\par
1716 {\cf20 //   EXPECT_FALSE verifies that a Boolean condition is false.}\par
1717 {\cf20 //}\par
1718 {\cf20 // FAIL and ASSERT_* are similar to ADD_FAILURE and EXPECT_*, except}\par
1719 {\cf20 // that they will also abort the current function on failure.  People}\par
1720 {\cf20 // usually want the fail-fast behavior of FAIL and ASSERT_*, but those}\par
1721 {\cf20 // writing data-driven tests often find themselves using ADD_FAILURE}\par
1722 {\cf20 // and EXPECT_* more.}\par
1723 \par
1724 {\cf20 // Generates a nonfatal failure with a generic message.}\par
1725 {\cf21 #define ADD_FAILURE() GTEST_NONFATAL_FAILURE_("Failed"})\par
1726 \par
1727 {\cf20 // Generates a nonfatal failure at the given source file location with}\par
1728 {\cf20 // a generic message.}\par
1729 {\cf21 #define ADD_FAILURE_AT(file, line)        \\}\par
1730 {\cf21   GTEST_MESSAGE_AT_(file, line, "Failed"}, \\\par
1731                     ::testing::TestPartResult::kNonFatalFailure)\par
1732 \par
1733 {\cf20 // Generates a fatal failure with a generic message.}\par
1734 {\cf21 #define GTEST_FAIL() GTEST_FATAL_FAILURE_("Failed"})\par
1735 \par
1736 {\cf20 // Like GTEST_FAIL(), but at the given source file location.}\par
1737 {\cf21 #define GTEST_FAIL_AT(file, line)         \\}\par
1738 {\cf21   GTEST_MESSAGE_AT_(file, line, "Failed"}, \\\par
1739                     ::testing::TestPartResult::kFatalFailure)\par
1740 \par
1741 {\cf20 // Define this macro to 1 to omit the definition of FAIL(), which is a}\par
1742 {\cf20 // generic name and clashes with some other libraries.}\par
1743 {\cf21 #if !GTEST_DONT_DEFINE_FAIL}\par
1744 {\cf21 #define FAIL() GTEST_FAIL()}\par
1745 {\cf21 #endif}\par
1746 \par
1747 {\cf20 // Generates a success with a generic message.}\par
1748 {\cf21 #define GTEST_SUCCEED() GTEST_SUCCESS_("Succeeded"})\par
1749 \par
1750 {\cf20 // Define this macro to 1 to omit the definition of SUCCEED(), which}\par
1751 {\cf20 // is a generic name and clashes with some other libraries.}\par
1752 {\cf21 #if !GTEST_DONT_DEFINE_SUCCEED}\par
1753 {\cf21 #define SUCCEED() GTEST_SUCCEED()}\par
1754 {\cf21 #endif}\par
1755 \par
1756 {\cf20 // Macros for testing exceptions.}\par
1757 {\cf20 //}\par
1758 {\cf20 //    * \{ASSERT|EXPECT\}_THROW(statement, expected_exception):}\par
1759 {\cf20 //         Tests that the statement throws the expected exception.}\par
1760 {\cf20 //    * \{ASSERT|EXPECT\}_NO_THROW(statement):}\par
1761 {\cf20 //         Tests that the statement doesn't throw any exception.}\par
1762 {\cf20 //    * \{ASSERT|EXPECT\}_ANY_THROW(statement):}\par
1763 {\cf20 //         Tests that the statement throws an exception.}\par
1764 \par
1765 {\cf21 #define EXPECT_THROW(statement, expected_exception) \\}\par
1766 {\cf21   GTEST_TEST_THROW_(statement, expected_exception, GTEST_NONFATAL_FAILURE_)}\par
1767 {\cf21 #define EXPECT_NO_THROW(statement) \\}\par
1768 {\cf21   GTEST_TEST_NO_THROW_(statement, GTEST_NONFATAL_FAILURE_)}\par
1769 {\cf21 #define EXPECT_ANY_THROW(statement) \\}\par
1770 {\cf21   GTEST_TEST_ANY_THROW_(statement, GTEST_NONFATAL_FAILURE_)}\par
1771 {\cf21 #define ASSERT_THROW(statement, expected_exception) \\}\par
1772 {\cf21   GTEST_TEST_THROW_(statement, expected_exception, GTEST_FATAL_FAILURE_)}\par
1773 {\cf21 #define ASSERT_NO_THROW(statement) \\}\par
1774 {\cf21   GTEST_TEST_NO_THROW_(statement, GTEST_FATAL_FAILURE_)}\par
1775 {\cf21 #define ASSERT_ANY_THROW(statement) \\}\par
1776 {\cf21   GTEST_TEST_ANY_THROW_(statement, GTEST_FATAL_FAILURE_)}\par
1777 \par
1778 {\cf20 // Boolean assertions. Condition can be either a Boolean expression or an}\par
1779 {\cf20 // AssertionResult. For more information on how to use AssertionResult with}\par
1780 {\cf20 // these macros see comments on that class.}\par
1781 {\cf21 #define GTEST_EXPECT_TRUE(condition)                      \\}\par
1782 {\cf21   GTEST_TEST_BOOLEAN_(condition, #condition, false, true, \\}\par
1783 {\cf21                       GTEST_NONFATAL_FAILURE_)}\par
1784 {\cf21 #define GTEST_EXPECT_FALSE(condition)                        \\}\par
1785 {\cf21   GTEST_TEST_BOOLEAN_(!(condition), #condition, true, false, \\}\par
1786 {\cf21                       GTEST_NONFATAL_FAILURE_)}\par
1787 {\cf21 #define GTEST_ASSERT_TRUE(condition) \\}\par
1788 {\cf21   GTEST_TEST_BOOLEAN_(condition, #condition, false, true, GTEST_FATAL_FAILURE_)}\par
1789 {\cf21 #define GTEST_ASSERT_FALSE(condition)                        \\}\par
1790 {\cf21   GTEST_TEST_BOOLEAN_(!(condition), #condition, true, false, \\}\par
1791 {\cf21                       GTEST_FATAL_FAILURE_)}\par
1792 \par
1793 {\cf20 // Define these macros to 1 to omit the definition of the corresponding}\par
1794 {\cf20 // EXPECT or ASSERT, which clashes with some users' own code.}\par
1795 \par
1796 {\cf21 #if !GTEST_DONT_DEFINE_EXPECT_TRUE}\par
1797 {\cf21 #define EXPECT_TRUE(condition) GTEST_EXPECT_TRUE(condition)}\par
1798 {\cf21 #endif}\par
1799 \par
1800 {\cf21 #if !GTEST_DONT_DEFINE_EXPECT_FALSE}\par
1801 {\cf21 #define EXPECT_FALSE(condition) GTEST_EXPECT_FALSE(condition)}\par
1802 {\cf21 #endif}\par
1803 \par
1804 {\cf21 #if !GTEST_DONT_DEFINE_ASSERT_TRUE}\par
1805 {\cf21 #define ASSERT_TRUE(condition) GTEST_ASSERT_TRUE(condition)}\par
1806 {\cf21 #endif}\par
1807 \par
1808 {\cf21 #if !GTEST_DONT_DEFINE_ASSERT_FALSE}\par
1809 {\cf21 #define ASSERT_FALSE(condition) GTEST_ASSERT_FALSE(condition)}\par
1810 {\cf21 #endif}\par
1811 \par
1812 {\cf20 // Macros for testing equalities and inequalities.}\par
1813 {\cf20 //}\par
1814 {\cf20 //    * \{ASSERT|EXPECT\}_EQ(v1, v2): Tests that v1 == v2}\par
1815 {\cf20 //    * \{ASSERT|EXPECT\}_NE(v1, v2): Tests that v1 != v2}\par
1816 {\cf20 //    * \{ASSERT|EXPECT\}_LT(v1, v2): Tests that v1 < v2}\par
1817 {\cf20 //    * \{ASSERT|EXPECT\}_LE(v1, v2): Tests that v1 <= v2}\par
1818 {\cf20 //    * \{ASSERT|EXPECT\}_GT(v1, v2): Tests that v1 > v2}\par
1819 {\cf20 //    * \{ASSERT|EXPECT\}_GE(v1, v2): Tests that v1 >= v2}\par
1820 {\cf20 //}\par
1821 {\cf20 // When they are not, Google Test prints both the tested expressions and}\par
1822 {\cf20 // their actual values.  The values must be compatible built-in types,}\par
1823 {\cf20 // or you will get a compiler error.  By "compatible" we mean that the}\par
1824 {\cf20 // values can be compared by the respective operator.}\par
1825 {\cf20 //}\par
1826 {\cf20 // Note:}\par
1827 {\cf20 //}\par
1828 {\cf20 //   1. It is possible to make a user-defined type work with}\par
1829 {\cf20 //   \{ASSERT|EXPECT\}_??(), but that requires overloading the}\par
1830 {\cf20 //   comparison operators and is thus discouraged by the Google C++}\par
1831 {\cf20 //   Usage Guide.  Therefore, you are advised to use the}\par
1832 {\cf20 //   \{ASSERT|EXPECT\}_TRUE() macro to assert that two objects are}\par
1833 {\cf20 //   equal.}\par
1834 {\cf20 //}\par
1835 {\cf20 //   2. The \{ASSERT|EXPECT\}_??() macros do pointer comparisons on}\par
1836 {\cf20 //   pointers (in particular, C strings).  Therefore, if you use it}\par
1837 {\cf20 //   with two C strings, you are testing how their locations in memory}\par
1838 {\cf20 //   are related, not how their content is related.  To compare two C}\par
1839 {\cf20 //   strings by content, use \{ASSERT|EXPECT\}_STR*().}\par
1840 {\cf20 //}\par
1841 {\cf20 //   3. \{ASSERT|EXPECT\}_EQ(v1, v2) is preferred to}\par
1842 {\cf20 //   \{ASSERT|EXPECT\}_TRUE(v1 == v2), as the former tells you}\par
1843 {\cf20 //   what the actual value is when it fails, and similarly for the}\par
1844 {\cf20 //   other comparisons.}\par
1845 {\cf20 //}\par
1846 {\cf20 //   4. Do not depend on the order in which \{ASSERT|EXPECT\}_??()}\par
1847 {\cf20 //   evaluate their arguments, which is undefined.}\par
1848 {\cf20 //}\par
1849 {\cf20 //   5. These macros evaluate their arguments exactly once.}\par
1850 {\cf20 //}\par
1851 {\cf20 // Examples:}\par
1852 {\cf20 //}\par
1853 {\cf20 //   EXPECT_NE(Foo(), 5);}\par
1854 {\cf20 //   EXPECT_EQ(a_pointer, NULL);}\par
1855 {\cf20 //   ASSERT_LT(i, array_size);}\par
1856 {\cf20 //   ASSERT_GT(records.size(), 0) << "There is no record left.";}\par
1857 \par
1858 {\cf21 #define EXPECT_EQ(val1, val2) \\}\par
1859 {\cf21   EXPECT_PRED_FORMAT2(::testing::internal::EqHelper::Compare, val1, val2)}\par
1860 {\cf21 #define EXPECT_NE(val1, val2) \\}\par
1861 {\cf21   EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperNE, val1, val2)}\par
1862 {\cf21 #define EXPECT_LE(val1, val2) \\}\par
1863 {\cf21   EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperLE, val1, val2)}\par
1864 {\cf21 #define EXPECT_LT(val1, val2) \\}\par
1865 {\cf21   EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperLT, val1, val2)}\par
1866 {\cf21 #define EXPECT_GE(val1, val2) \\}\par
1867 {\cf21   EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperGE, val1, val2)}\par
1868 {\cf21 #define EXPECT_GT(val1, val2) \\}\par
1869 {\cf21   EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperGT, val1, val2)}\par
1870 \par
1871 {\cf21 #define GTEST_ASSERT_EQ(val1, val2) \\}\par
1872 {\cf21   ASSERT_PRED_FORMAT2(::testing::internal::EqHelper::Compare, val1, val2)}\par
1873 {\cf21 #define GTEST_ASSERT_NE(val1, val2) \\}\par
1874 {\cf21   ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperNE, val1, val2)}\par
1875 {\cf21 #define GTEST_ASSERT_LE(val1, val2) \\}\par
1876 {\cf21   ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperLE, val1, val2)}\par
1877 {\cf21 #define GTEST_ASSERT_LT(val1, val2) \\}\par
1878 {\cf21   ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperLT, val1, val2)}\par
1879 {\cf21 #define GTEST_ASSERT_GE(val1, val2) \\}\par
1880 {\cf21   ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperGE, val1, val2)}\par
1881 {\cf21 #define GTEST_ASSERT_GT(val1, val2) \\}\par
1882 {\cf21   ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperGT, val1, val2)}\par
1883 \par
1884 {\cf20 // Define macro GTEST_DONT_DEFINE_ASSERT_XY to 1 to omit the definition of}\par
1885 {\cf20 // ASSERT_XY(), which clashes with some users' own code.}\par
1886 \par
1887 {\cf21 #if !GTEST_DONT_DEFINE_ASSERT_EQ}\par
1888 {\cf21 #define ASSERT_EQ(val1, val2) GTEST_ASSERT_EQ(val1, val2)}\par
1889 {\cf21 #endif}\par
1890 \par
1891 {\cf21 #if !GTEST_DONT_DEFINE_ASSERT_NE}\par
1892 {\cf21 #define ASSERT_NE(val1, val2) GTEST_ASSERT_NE(val1, val2)}\par
1893 {\cf21 #endif}\par
1894 \par
1895 {\cf21 #if !GTEST_DONT_DEFINE_ASSERT_LE}\par
1896 {\cf21 #define ASSERT_LE(val1, val2) GTEST_ASSERT_LE(val1, val2)}\par
1897 {\cf21 #endif}\par
1898 \par
1899 {\cf21 #if !GTEST_DONT_DEFINE_ASSERT_LT}\par
1900 {\cf21 #define ASSERT_LT(val1, val2) GTEST_ASSERT_LT(val1, val2)}\par
1901 {\cf21 #endif}\par
1902 \par
1903 {\cf21 #if !GTEST_DONT_DEFINE_ASSERT_GE}\par
1904 {\cf21 #define ASSERT_GE(val1, val2) GTEST_ASSERT_GE(val1, val2)}\par
1905 {\cf21 #endif}\par
1906 \par
1907 {\cf21 #if !GTEST_DONT_DEFINE_ASSERT_GT}\par
1908 {\cf21 #define ASSERT_GT(val1, val2) GTEST_ASSERT_GT(val1, val2)}\par
1909 {\cf21 #endif}\par
1910 \par
1911 {\cf20 // C-string Comparisons.  All tests treat NULL and any non-NULL string}\par
1912 {\cf20 // as different.  Two NULLs are equal.}\par
1913 {\cf20 //}\par
1914 {\cf20 //    * \{ASSERT|EXPECT\}_STREQ(s1, s2):     Tests that s1 == s2}\par
1915 {\cf20 //    * \{ASSERT|EXPECT\}_STRNE(s1, s2):     Tests that s1 != s2}\par
1916 {\cf20 //    * \{ASSERT|EXPECT\}_STRCASEEQ(s1, s2): Tests that s1 == s2, ignoring case}\par
1917 {\cf20 //    * \{ASSERT|EXPECT\}_STRCASENE(s1, s2): Tests that s1 != s2, ignoring case}\par
1918 {\cf20 //}\par
1919 {\cf20 // For wide or narrow string objects, you can use the}\par
1920 {\cf20 // \{ASSERT|EXPECT\}_??() macros.}\par
1921 {\cf20 //}\par
1922 {\cf20 // Don't depend on the order in which the arguments are evaluated,}\par
1923 {\cf20 // which is undefined.}\par
1924 {\cf20 //}\par
1925 {\cf20 // These macros evaluate their arguments exactly once.}\par
1926 \par
1927 {\cf21 #define EXPECT_STREQ(s1, s2) \\}\par
1928 {\cf21   EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperSTREQ, s1, s2)}\par
1929 {\cf21 #define EXPECT_STRNE(s1, s2) \\}\par
1930 {\cf21   EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperSTRNE, s1, s2)}\par
1931 {\cf21 #define EXPECT_STRCASEEQ(s1, s2) \\}\par
1932 {\cf21   EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperSTRCASEEQ, s1, s2)}\par
1933 {\cf21 #define EXPECT_STRCASENE(s1, s2) \\}\par
1934 {\cf21   EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperSTRCASENE, s1, s2)}\par
1935 \par
1936 {\cf21 #define ASSERT_STREQ(s1, s2) \\}\par
1937 {\cf21   ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperSTREQ, s1, s2)}\par
1938 {\cf21 #define ASSERT_STRNE(s1, s2) \\}\par
1939 {\cf21   ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperSTRNE, s1, s2)}\par
1940 {\cf21 #define ASSERT_STRCASEEQ(s1, s2) \\}\par
1941 {\cf21   ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperSTRCASEEQ, s1, s2)}\par
1942 {\cf21 #define ASSERT_STRCASENE(s1, s2) \\}\par
1943 {\cf21   ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperSTRCASENE, s1, s2)}\par
1944 \par
1945 {\cf20 // Macros for comparing floating-point numbers.}\par
1946 {\cf20 //}\par
1947 {\cf20 //    * \{ASSERT|EXPECT\}_FLOAT_EQ(val1, val2):}\par
1948 {\cf20 //         Tests that two float values are almost equal.}\par
1949 {\cf20 //    * \{ASSERT|EXPECT\}_DOUBLE_EQ(val1, val2):}\par
1950 {\cf20 //         Tests that two double values are almost equal.}\par
1951 {\cf20 //    * \{ASSERT|EXPECT\}_NEAR(v1, v2, abs_error):}\par
1952 {\cf20 //         Tests that v1 and v2 are within the given distance to each other.}\par
1953 {\cf20 //}\par
1954 {\cf20 // Google Test uses ULP-based comparison to automatically pick a default}\par
1955 {\cf20 // error bound that is appropriate for the operands.  See the}\par
1956 {\cf20 // FloatingPoint template class in gtest-internal.h if you are}\par
1957 {\cf20 // interested in the implementation details.}\par
1958 \par
1959 {\cf21 #define EXPECT_FLOAT_EQ(val1, val2)                                         \\}\par
1960 {\cf21   EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperFloatingPointEQ<float>, \\}\par
1961 {\cf21                       val1, val2)}\par
1962 \par
1963 {\cf21 #define EXPECT_DOUBLE_EQ(val1, val2)                                         \\}\par
1964 {\cf21   EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperFloatingPointEQ<double>, \\}\par
1965 {\cf21                       val1, val2)}\par
1966 \par
1967 {\cf21 #define ASSERT_FLOAT_EQ(val1, val2)                                         \\}\par
1968 {\cf21   ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperFloatingPointEQ<float>, \\}\par
1969 {\cf21                       val1, val2)}\par
1970 \par
1971 {\cf21 #define ASSERT_DOUBLE_EQ(val1, val2)                                         \\}\par
1972 {\cf21   ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperFloatingPointEQ<double>, \\}\par
1973 {\cf21                       val1, val2)}\par
1974 \par
1975 {\cf21 #define EXPECT_NEAR(val1, val2, abs_error)                                   \\}\par
1976 {\cf21   EXPECT_PRED_FORMAT3(::testing::internal::DoubleNearPredFormat, val1, val2, \\}\par
1977 {\cf21                       abs_error)}\par
1978 \par
1979 {\cf21 #define ASSERT_NEAR(val1, val2, abs_error)                                   \\}\par
1980 {\cf21   ASSERT_PRED_FORMAT3(::testing::internal::DoubleNearPredFormat, val1, val2, \\}\par
1981 {\cf21                       abs_error)}\par
1982 \par
1983 {\cf20 // These predicate format functions work on floating-point values, and}\par
1984 {\cf20 // can be used in \{ASSERT|EXPECT\}_PRED_FORMAT2*(), e.g.}\par
1985 {\cf20 //}\par
1986 {\cf20 //   EXPECT_PRED_FORMAT2(testing::DoubleLE, Foo(), 5.0);}\par
1987 \par
1988 {\cf20 // Asserts that val1 is less than, or almost equal to, val2.  Fails}\par
1989 {\cf20 // otherwise.  In particular, it fails if either val1 or val2 is NaN.}\par
1990 GTEST_API_ AssertionResult FloatLE({\cf17 const} {\cf18 char}* expr1, {\cf17 const} {\cf18 char}* expr2,\par
1991                                    {\cf18 float} val1, {\cf18 float} val2);\par
1992 GTEST_API_ AssertionResult DoubleLE({\cf17 const} {\cf18 char}* expr1, {\cf17 const} {\cf18 char}* expr2,\par
1993                                     {\cf18 double} val1, {\cf18 double} val2);\par
1994 \par
1995 {\cf21 #if GTEST_OS_WINDOWS}\par
1996 \par
1997 {\cf20 // Macros that test for HRESULT failure and success, these are only useful}\par
1998 {\cf20 // on Windows, and rely on Windows SDK macros and APIs to compile.}\par
1999 {\cf20 //}\par
2000 {\cf20 //    * \{ASSERT|EXPECT\}_HRESULT_\{SUCCEEDED|FAILED\}(expr)}\par
2001 {\cf20 //}\par
2002 {\cf20 // When expr unexpectedly fails or succeeds, Google Test prints the}\par
2003 {\cf20 // expected result and the actual result with both a human-readable}\par
2004 {\cf20 // string representation of the error, if available, as well as the}\par
2005 {\cf20 // hex result code.}\par
2006 {\cf21 #define EXPECT_HRESULT_SUCCEEDED(expr) \\}\par
2007 {\cf21   EXPECT_PRED_FORMAT1(::testing::internal::IsHRESULTSuccess, (expr))}\par
2008 \par
2009 {\cf21 #define ASSERT_HRESULT_SUCCEEDED(expr) \\}\par
2010 {\cf21   ASSERT_PRED_FORMAT1(::testing::internal::IsHRESULTSuccess, (expr))}\par
2011 \par
2012 {\cf21 #define EXPECT_HRESULT_FAILED(expr) \\}\par
2013 {\cf21   EXPECT_PRED_FORMAT1(::testing::internal::IsHRESULTFailure, (expr))}\par
2014 \par
2015 {\cf21 #define ASSERT_HRESULT_FAILED(expr) \\}\par
2016 {\cf21   ASSERT_PRED_FORMAT1(::testing::internal::IsHRESULTFailure, (expr))}\par
2017 \par
2018 {\cf21 #endif  }{\cf20 // GTEST_OS_WINDOWS}\par
2019 \par
2020 {\cf20 // Macros that execute statement and check that it doesn't generate new fatal}\par
2021 {\cf20 // failures in the current thread.}\par
2022 {\cf20 //}\par
2023 {\cf20 //   * \{ASSERT|EXPECT\}_NO_FATAL_FAILURE(statement);}\par
2024 {\cf20 //}\par
2025 {\cf20 // Examples:}\par
2026 {\cf20 //}\par
2027 {\cf20 //   EXPECT_NO_FATAL_FAILURE(Process());}\par
2028 {\cf20 //   ASSERT_NO_FATAL_FAILURE(Process()) << "Process() failed";}\par
2029 {\cf20 //}\par
2030 {\cf21 #define ASSERT_NO_FATAL_FAILURE(statement) \\}\par
2031 {\cf21   GTEST_TEST_NO_FATAL_FAILURE_(statement, GTEST_FATAL_FAILURE_)}\par
2032 {\cf21 #define EXPECT_NO_FATAL_FAILURE(statement) \\}\par
2033 {\cf21   GTEST_TEST_NO_FATAL_FAILURE_(statement, GTEST_NONFATAL_FAILURE_)}\par
2034 \par
2035 {\cf20 // Causes a trace (including the given source file path and line number,}\par
2036 {\cf20 // and the given message) to be included in every test failure message generated}\par
2037 {\cf20 // by code in the scope of the lifetime of an instance of this class. The effect}\par
2038 {\cf20 // is undone with the destruction of the instance.}\par
2039 {\cf20 //}\par
2040 {\cf20 // The message argument can be anything streamable to std::ostream.}\par
2041 {\cf20 //}\par
2042 {\cf20 // Example:}\par
2043 {\cf20 //   testing::ScopedTrace trace("file.cc", 123, "message");}\par
2044 {\cf20 //}\par
2045 {\cf17 class }GTEST_API_ ScopedTrace \{\par
2046  {\cf17 public}:\par
2047   {\cf20 // The c'tor pushes the given source file location and message onto}\par
2048   {\cf20 // a trace stack maintained by Google Test.}\par
2049 \par
2050   {\cf20 // Template version. Uses Message() to convert the values into strings.}\par
2051   {\cf20 // Slow, but flexible.}\par
2052   {\cf17 template} <{\cf17 typename} T>\par
2053   ScopedTrace({\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\cf17 const} T& message) \{\par
2054     PushTrace(file, line, (Message() << message).GetString());\par
2055   \}\par
2056 \par
2057   {\cf20 // Optimize for some known types.}\par
2058   ScopedTrace({\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\cf17 const} {\cf18 char}* message) \{\par
2059     PushTrace(file, line, message ? message : {\cf22 "(null)"});\par
2060   \}\par
2061 \par
2062   ScopedTrace({\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\cf17 const} std::string& message) \{\par
2063     PushTrace(file, line, message);\par
2064   \}\par
2065 \par
2066   {\cf20 // The d'tor pops the info pushed by the c'tor.}\par
2067   {\cf20 //}\par
2068   {\cf20 // Note that the d'tor is not virtual in order to be efficient.}\par
2069   {\cf20 // Don't inherit from ScopedTrace!}\par
2070   ~ScopedTrace();\par
2071 \par
2072  {\cf17 private}:\par
2073   {\cf18 void} PushTrace({\cf17 const} {\cf18 char}* file, {\cf18 int} line, std::string message);\par
2074 \par
2075   ScopedTrace({\cf17 const} ScopedTrace&) = {\cf17 delete};\par
2076   ScopedTrace& operator=({\cf17 const} ScopedTrace&) = {\cf17 delete};\par
2077 \} GTEST_ATTRIBUTE_UNUSED_;  {\cf20 // A ScopedTrace object does its job in its}\par
2078                             {\cf20 // c'tor and d'tor.  Therefore it doesn't}\par
2079                             {\cf20 // need to be used otherwise.}\par
2080 \par
2081 {\cf20 // Causes a trace (including the source file path, the current line}\par
2082 {\cf20 // number, and the given message) to be included in every test failure}\par
2083 {\cf20 // message generated by code in the current scope.  The effect is}\par
2084 {\cf20 // undone when the control leaves the current scope.}\par
2085 {\cf20 //}\par
2086 {\cf20 // The message argument can be anything streamable to std::ostream.}\par
2087 {\cf20 //}\par
2088 {\cf20 // In the implementation, we include the current line number as part}\par
2089 {\cf20 // of the dummy variable name, thus allowing multiple SCOPED_TRACE()s}\par
2090 {\cf20 // to appear in the same block - as long as they are on different}\par
2091 {\cf20 // lines.}\par
2092 {\cf20 //}\par
2093 {\cf20 // Assuming that each thread maintains its own stack of traces.}\par
2094 {\cf20 // Therefore, a SCOPED_TRACE() would (correctly) only affect the}\par
2095 {\cf20 // assertions in its own thread.}\par
2096 {\cf21 #define SCOPED_TRACE(message)                                         \\}\par
2097 {\cf21   ::testing::ScopedTrace GTEST_CONCAT_TOKEN_(gtest_trace_, __LINE__)( \\}\par
2098 {\cf21       __FILE__, __LINE__, (message))}\par
2099 \par
2100 {\cf20 // Compile-time assertion for type equality.}\par
2101 {\cf20 // StaticAssertTypeEq<type1, type2>() compiles if and only if type1 and type2}\par
2102 {\cf20 // are the same type.  The value it returns is not interesting.}\par
2103 {\cf20 //}\par
2104 {\cf20 // Instead of making StaticAssertTypeEq a class template, we make it a}\par
2105 {\cf20 // function template that invokes a helper class template.  This}\par
2106 {\cf20 // prevents a user from misusing StaticAssertTypeEq<T1, T2> by}\par
2107 {\cf20 // defining objects of that type.}\par
2108 {\cf20 //}\par
2109 {\cf20 // CAVEAT:}\par
2110 {\cf20 //}\par
2111 {\cf20 // When used inside a method of a class template,}\par
2112 {\cf20 // StaticAssertTypeEq<T1, T2>() is effective ONLY IF the method is}\par
2113 {\cf20 // instantiated.  For example, given:}\par
2114 {\cf20 //}\par
2115 {\cf20 //   template <typename T> class Foo \{}\par
2116 {\cf20 //    public:}\par
2117 {\cf20 //     void Bar() \{ testing::StaticAssertTypeEq<int, T>(); \}}\par
2118 {\cf20 //   \};}\par
2119 {\cf20 //}\par
2120 {\cf20 // the code:}\par
2121 {\cf20 //}\par
2122 {\cf20 //   void Test1() \{ Foo<bool> foo; \}}\par
2123 {\cf20 //}\par
2124 {\cf20 // will NOT generate a compiler error, as Foo<bool>::Bar() is never}\par
2125 {\cf20 // actually instantiated.  Instead, you need:}\par
2126 {\cf20 //}\par
2127 {\cf20 //   void Test2() \{ Foo<bool> foo; foo.Bar(); \}}\par
2128 {\cf20 //}\par
2129 {\cf20 // to cause a compiler error.}\par
2130 {\cf17 template} <{\cf17 typename} T1, {\cf17 typename} T2>\par
2131 {\cf17 constexpr} {\cf18 bool} StaticAssertTypeEq() noexcept \{\par
2132   {\cf17 static_assert}(std::is_same<T1, T2>::value, {\cf22 "T1 and T2 are not the same type"});\par
2133   {\cf19 return} {\cf17 true};\par
2134 \}\par
2135 \par
2136 {\cf20 // Defines a test.}\par
2137 {\cf20 //}\par
2138 {\cf20 // The first parameter is the name of the test suite, and the second}\par
2139 {\cf20 // parameter is the name of the test within the test suite.}\par
2140 {\cf20 //}\par
2141 {\cf20 // The convention is to end the test suite name with "Test".  For}\par
2142 {\cf20 // example, a test suite for the Foo class can be named FooTest.}\par
2143 {\cf20 //}\par
2144 {\cf20 // Test code should appear between braces after an invocation of}\par
2145 {\cf20 // this macro.  Example:}\par
2146 {\cf20 //}\par
2147 {\cf20 //   TEST(FooTest, InitializesCorrectly) \{}\par
2148 {\cf20 //     Foo foo;}\par
2149 {\cf20 //     EXPECT_TRUE(foo.StatusIsOK());}\par
2150 {\cf20 //   \}}\par
2151 \par
2152 {\cf20 // Note that we call GetTestTypeId() instead of GetTypeId<}\par
2153 {\cf20 // ::testing::Test>() here to get the type ID of testing::Test.  This}\par
2154 {\cf20 // is to work around a suspected linker bug when using Google Test as}\par
2155 {\cf20 // a framework on Mac OS X.  The bug causes GetTypeId<}\par
2156 {\cf20 // ::testing::Test>() to return different values depending on whether}\par
2157 {\cf20 // the call is from the Google Test framework itself or from user test}\par
2158 {\cf20 // code.  GetTestTypeId() is guaranteed to always return the same}\par
2159 {\cf20 // value, as it always calls GetTypeId<>() from the Google Test}\par
2160 {\cf20 // framework.}\par
2161 {\cf21 #define GTEST_TEST(test_suite_name, test_name)             \\}\par
2162 {\cf21   GTEST_TEST_(test_suite_name, test_name, ::testing::Test, \\}\par
2163 {\cf21               ::testing::internal::GetTestTypeId())}\par
2164 \par
2165 {\cf20 // Define this macro to 1 to omit the definition of TEST(), which}\par
2166 {\cf20 // is a generic name and clashes with some other libraries.}\par
2167 {\cf21 #if !GTEST_DONT_DEFINE_TEST}\par
2168 {\cf21 #define TEST(test_suite_name, test_name) GTEST_TEST(test_suite_name, test_name)}\par
2169 {\cf21 #endif}\par
2170 \par
2171 {\cf20 // Defines a test that uses a test fixture.}\par
2172 {\cf20 //}\par
2173 {\cf20 // The first parameter is the name of the test fixture class, which}\par
2174 {\cf20 // also doubles as the test suite name.  The second parameter is the}\par
2175 {\cf20 // name of the test within the test suite.}\par
2176 {\cf20 //}\par
2177 {\cf20 // A test fixture class must be declared earlier.  The user should put}\par
2178 {\cf20 // the test code between braces after using this macro.  Example:}\par
2179 {\cf20 //}\par
2180 {\cf20 //   class FooTest : public testing::Test \{}\par
2181 {\cf20 //    protected:}\par
2182 {\cf20 //     void SetUp() override \{ b_.AddElement(3); \}}\par
2183 {\cf20 //}\par
2184 {\cf20 //     Foo a_;}\par
2185 {\cf20 //     Foo b_;}\par
2186 {\cf20 //   \};}\par
2187 {\cf20 //}\par
2188 {\cf20 //   TEST_F(FooTest, InitializesCorrectly) \{}\par
2189 {\cf20 //     EXPECT_TRUE(a_.StatusIsOK());}\par
2190 {\cf20 //   \}}\par
2191 {\cf20 //}\par
2192 {\cf20 //   TEST_F(FooTest, ReturnsElementCountCorrectly) \{}\par
2193 {\cf20 //     EXPECT_EQ(a_.size(), 0);}\par
2194 {\cf20 //     EXPECT_EQ(b_.size(), 1);}\par
2195 {\cf20 //   \}}\par
2196 {\cf21 #define GTEST_TEST_F(test_fixture, test_name)        \\}\par
2197 {\cf21   GTEST_TEST_(test_fixture, test_name, test_fixture, \\}\par
2198 {\cf21               ::testing::internal::GetTypeId<test_fixture>())}\par
2199 {\cf21 #if !GTEST_DONT_DEFINE_TEST_F}\par
2200 {\cf21 #define TEST_F(test_fixture, test_name) GTEST_TEST_F(test_fixture, test_name)}\par
2201 {\cf21 #endif}\par
2202 \par
2203 {\cf20 // Returns a path to temporary directory.}\par
2204 {\cf20 // Tries to determine an appropriate directory for the platform.}\par
2205 GTEST_API_ std::string TempDir();\par
2206 \par
2207 {\cf21 #ifdef _MSC_VER}\par
2208 {\cf21 #pragma warning(pop)}\par
2209 {\cf21 #endif}\par
2210 \par
2211 {\cf20 // Dynamically registers a test with the framework.}\par
2212 {\cf20 //}\par
2213 {\cf20 // This is an advanced API only to be used when the `TEST` macros are}\par
2214 {\cf20 // insufficient. The macros should be preferred when possible, as they avoid}\par
2215 {\cf20 // most of the complexity of calling this function.}\par
2216 {\cf20 //}\par
2217 {\cf20 // The `factory` argument is a factory callable (move-constructible) object or}\par
2218 {\cf20 // function pointer that creates a new instance of the Test object. It}\par
2219 {\cf20 // handles ownership to the caller. The signature of the callable is}\par
2220 {\cf20 // `Fixture*()`, where `Fixture` is the test fixture class for the test. All}\par
2221 {\cf20 // tests registered with the same `test_suite_name` must return the same}\par
2222 {\cf20 // fixture type. This is checked at runtime.}\par
2223 {\cf20 //}\par
2224 {\cf20 // The framework will infer the fixture class from the factory and will call}\par
2225 {\cf20 // the `SetUpTestSuite` and `TearDownTestSuite` for it.}\par
2226 {\cf20 //}\par
2227 {\cf20 // Must be called before `RUN_ALL_TESTS()` is invoked, otherwise behavior is}\par
2228 {\cf20 // undefined.}\par
2229 {\cf20 //}\par
2230 {\cf20 // Use case example:}\par
2231 {\cf20 //}\par
2232 {\cf20 // class MyFixture : public ::testing::Test \{}\par
2233 {\cf20 //  public:}\par
2234 {\cf20 //   // All of these optional, just like in regular macro usage.}\par
2235 {\cf20 //   static void SetUpTestSuite() \{ ... \}}\par
2236 {\cf20 //   static void TearDownTestSuite() \{ ... \}}\par
2237 {\cf20 //   void SetUp() override \{ ... \}}\par
2238 {\cf20 //   void TearDown() override \{ ... \}}\par
2239 {\cf20 // \};}\par
2240 {\cf20 //}\par
2241 {\cf20 // class MyTest : public MyFixture \{}\par
2242 {\cf20 //  public:}\par
2243 {\cf20 //   explicit MyTest(int data) : data_(data) \{\}}\par
2244 {\cf20 //   void TestBody() override \{ ... \}}\par
2245 {\cf20 //}\par
2246 {\cf20 //  private:}\par
2247 {\cf20 //   int data_;}\par
2248 {\cf20 // \};}\par
2249 {\cf20 //}\par
2250 {\cf20 // void RegisterMyTests(const std::vector<int>& values) \{}\par
2251 {\cf20 //   for (int v : values) \{}\par
2252 {\cf20 //     ::testing::RegisterTest(}\par
2253 {\cf20 //         "MyFixture", ("Test" + std::to_string(v)).c_str(), nullptr,}\par
2254 {\cf20 //         std::to_string(v).c_str(),}\par
2255 {\cf20 //         __FILE__, __LINE__,}\par
2256 {\cf20 //         // Important to use the fixture type as the return type here.}\par
2257 {\cf20 //         [=]() -> MyFixture* \{ return new MyTest(v); \});}\par
2258 {\cf20 //   \}}\par
2259 {\cf20 // \}}\par
2260 {\cf20 // ...}\par
2261 {\cf20 // int main(int argc, char** argv) \{}\par
2262 {\cf20 //   ::testing::InitGoogleTest(&argc, argv);}\par
2263 {\cf20 //   std::vector<int> values_to_test = LoadValuesFromConfig();}\par
2264 {\cf20 //   RegisterMyTests(values_to_test);}\par
2265 {\cf20 //   ...}\par
2266 {\cf20 //   return RUN_ALL_TESTS();}\par
2267 {\cf20 // \}}\par
2268 {\cf20 //}\par
2269 {\cf17 template} <{\cf18 int}&... ExplicitParameterBarrier, {\cf17 typename} Factory>\par
2270 TestInfo* RegisterTest({\cf17 const} {\cf18 char}* test_suite_name, {\cf17 const} {\cf18 char}* test_name,\par
2271                        {\cf17 const} {\cf18 char}* type_param, {\cf17 const} {\cf18 char}* value_param,\par
2272                        {\cf17 const} {\cf18 char}* file, {\cf18 int} line, Factory factory) \{\par
2273   {\cf17 using }TestT = {\cf17 typename} std::remove_pointer<{\cf17 decltype}(factory())>::type;\par
2274 \par
2275   {\cf17 class }FactoryImpl : {\cf17 public} internal::TestFactoryBase \{\par
2276    {\cf17 public}:\par
2277     {\cf17 explicit} FactoryImpl(Factory f) : factory_(std::move(f)) \{\}\par
2278     Test* CreateTest(){\cf17  override }\{ {\cf19 return} factory_(); \}\par
2279 \par
2280    {\cf17 private}:\par
2281     Factory factory_;\par
2282   \};\par
2283 \par
2284   {\cf19 return} internal::MakeAndRegisterTestInfo(\par
2285       test_suite_name, test_name, type_param, value_param,\par
2286       internal::CodeLocation(file, line), internal::GetTypeId<TestT>(),\par
2287       internal::SuiteApiResolver<TestT>::GetSetUpCaseOrSuite(file, line),\par
2288       internal::SuiteApiResolver<TestT>::GetTearDownCaseOrSuite(file, line),\par
2289       {\cf17 new} FactoryImpl\{std::move(factory)\});\par
2290 \}\par
2291 \par
2292 \}  {\cf20 // namespace testing}\par
2293 \par
2294 {\cf20 // Use this function in main() to run all tests.  It returns 0 if all}\par
2295 {\cf20 // tests are successful, or 1 otherwise.}\par
2296 {\cf20 //}\par
2297 {\cf20 // RUN_ALL_TESTS() should be invoked after the command line has been}\par
2298 {\cf20 // parsed by InitGoogleTest().}\par
2299 {\cf20 //}\par
2300 {\cf20 // This function was formerly a macro; thus, it is in the global}\par
2301 {\cf20 // namespace and has an all-caps name.}\par
2302 {\cf18 int} RUN_ALL_TESTS() GTEST_MUST_USE_RESULT_;\par
2303 \par
2304 inline {\cf18 int} RUN_ALL_TESTS() \{ return ::testing::UnitTest::GetInstance()->Run(); \}\par
2305 \par
2306 GTEST_DISABLE_MSC_WARNINGS_POP_()  {\cf20 //  4251}\par
2307 \par
2308 {\cf21 #endif  }{\cf20 // GOOGLETEST_INCLUDE_GTEST_GTEST_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googletest/include/gtest/internal/custom/gtest.h}
{\xe \v lib/googletest-main/googletest/include/gtest/internal/custom/gtest.h}
{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2015, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 {\cf20 //}\par
30 {\cf20 // Injection point for custom user configurations. See README for details}\par
31 {\cf20 //}\par
32 {\cf20 // ** Custom implementation starts here **}\par
33 \par
34 {\cf21 #ifndef GOOGLETEST_INCLUDE_GTEST_INTERNAL_CUSTOM_GTEST_H_}\par
35 {\cf21 #define GOOGLETEST_INCLUDE_GTEST_INTERNAL_CUSTOM_GTEST_H_}\par
36 \par
37 {\cf21 #endif  }{\cf20 // GOOGLETEST_INCLUDE_GTEST_INTERNAL_CUSTOM_GTEST_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest_pred_impl.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googletest/include/gtest/gtest_pred_impl.h}
{\xe \v lib/googletest-main/googletest/include/gtest/gtest_pred_impl.h}
{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2006, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 {\cf20 //}\par
30 {\cf20 // Implements a family of generic predicate assertion macros.}\par
31 \par
32 {\cf20 // IWYU pragma: private, include "gtest/gtest.h"}\par
33 {\cf20 // IWYU pragma: friend gtest/.*}\par
34 {\cf20 // IWYU pragma: friend gmock/.*}\par
35 \par
36 {\cf21 #ifndef GOOGLETEST_INCLUDE_GTEST_GTEST_PRED_IMPL_H_}\par
37 {\cf21 #define GOOGLETEST_INCLUDE_GTEST_GTEST_PRED_IMPL_H_}\par
38 \par
39 {\cf21 #include "gtest/gtest-assertion-result.h"}\par
40 {\cf21 #include "gtest/internal/gtest-internal.h"}\par
41 {\cf21 #include "gtest/internal/gtest-port.h"}\par
42 \par
43 {\cf17 namespace }testing \{\par
44 \par
45 {\cf20 // This header implements a family of generic predicate assertion}\par
46 {\cf20 // macros:}\par
47 {\cf20 //}\par
48 {\cf20 //   ASSERT_PRED_FORMAT1(pred_format, v1)}\par
49 {\cf20 //   ASSERT_PRED_FORMAT2(pred_format, v1, v2)}\par
50 {\cf20 //   ...}\par
51 {\cf20 //}\par
52 {\cf20 // where pred_format is a function or functor that takes n (in the}\par
53 {\cf20 // case of ASSERT_PRED_FORMATn) values and their source expression}\par
54 {\cf20 // text, and returns a testing::AssertionResult.  See the definition}\par
55 {\cf20 // of ASSERT_EQ in gtest.h for an example.}\par
56 {\cf20 //}\par
57 {\cf20 // If you don't care about formatting, you can use the more}\par
58 {\cf20 // restrictive version:}\par
59 {\cf20 //}\par
60 {\cf20 //   ASSERT_PRED1(pred, v1)}\par
61 {\cf20 //   ASSERT_PRED2(pred, v1, v2)}\par
62 {\cf20 //   ...}\par
63 {\cf20 //}\par
64 {\cf20 // where pred is an n-ary function or functor that returns bool,}\par
65 {\cf20 // and the values v1, v2, ..., must support the << operator for}\par
66 {\cf20 // streaming to std::ostream.}\par
67 {\cf20 //}\par
68 {\cf20 // We also define the EXPECT_* variations.}\par
69 {\cf20 //}\par
70 {\cf20 // For now we only support predicates whose arity is at most 5.}\par
71 {\cf20 // Please email googletestframework@googlegroups.com if you need}\par
72 {\cf20 // support for higher arities.}\par
73 \par
74 {\cf20 // GTEST_ASSERT_ is the basic statement to which all of the assertions}\par
75 {\cf20 // in this file reduce.  Don't use this in your code.}\par
76 \par
77 {\cf21 #define GTEST_ASSERT_(expression, on_failure)                   \\}\par
78 {\cf21   GTEST_AMBIGUOUS_ELSE_BLOCKER_                                 \\}\par
79 {\cf21   if (const ::testing::AssertionResult gtest_ar = (expression)) \\}\par
80 {\cf21     ;                                                           \\}\par
81 {\cf21   else                                                          \\}\par
82 {\cf21     on_failure(gtest_ar.failure_message())}\par
83 \par
84 {\cf20 // Helper function for implementing \{EXPECT|ASSERT\}_PRED1.  Don't use}\par
85 {\cf20 // this in your code.}\par
86 {\cf17 template} <{\cf17 typename} Pred, {\cf17 typename} T1>\par
87 AssertionResult AssertPred1Helper({\cf17 const} {\cf18 char}* pred_text, {\cf17 const} {\cf18 char}* e1,\par
88                                   Pred pred, {\cf17 const} T1& v1) \{\par
89   {\cf19 if} (pred(v1)) {\cf19 return} AssertionSuccess();\par
90 \par
91   {\cf19 return} AssertionFailure()\par
92          << pred_text << {\cf22 "("} << e1 << {\cf22 ") evaluates to false, where"}\par
93          << {\cf22 "\\n"}\par
94          << e1 << {\cf22 " evaluates to "} << ::testing::PrintToString(v1);\par
95 \}\par
96 \par
97 {\cf20 // Internal macro for implementing \{EXPECT|ASSERT\}_PRED_FORMAT1.}\par
98 {\cf20 // Don't use this in your code.}\par
99 {\cf21 #define GTEST_PRED_FORMAT1_(pred_format, v1, on_failure) \\}\par
100 {\cf21   GTEST_ASSERT_(pred_format(#v1, v1), on_failure)}\par
101 \par
102 {\cf20 // Internal macro for implementing \{EXPECT|ASSERT\}_PRED1.  Don't use}\par
103 {\cf20 // this in your code.}\par
104 {\cf21 #define GTEST_PRED1_(pred, v1, on_failure) \\}\par
105 {\cf21   GTEST_ASSERT_(::testing::AssertPred1Helper(#pred, #v1, pred, v1), on_failure)}\par
106 \par
107 {\cf20 // Unary predicate assertion macros.}\par
108 {\cf21 #define EXPECT_PRED_FORMAT1(pred_format, v1) \\}\par
109 {\cf21   GTEST_PRED_FORMAT1_(pred_format, v1, GTEST_NONFATAL_FAILURE_)}\par
110 {\cf21 #define EXPECT_PRED1(pred, v1) GTEST_PRED1_(pred, v1, GTEST_NONFATAL_FAILURE_)}\par
111 {\cf21 #define ASSERT_PRED_FORMAT1(pred_format, v1) \\}\par
112 {\cf21   GTEST_PRED_FORMAT1_(pred_format, v1, GTEST_FATAL_FAILURE_)}\par
113 {\cf21 #define ASSERT_PRED1(pred, v1) GTEST_PRED1_(pred, v1, GTEST_FATAL_FAILURE_)}\par
114 \par
115 {\cf20 // Helper function for implementing \{EXPECT|ASSERT\}_PRED2.  Don't use}\par
116 {\cf20 // this in your code.}\par
117 {\cf17 template} <{\cf17 typename} Pred, {\cf17 typename} T1, {\cf17 typename} T2>\par
118 AssertionResult AssertPred2Helper({\cf17 const} {\cf18 char}* pred_text, {\cf17 const} {\cf18 char}* e1,\par
119                                   {\cf17 const} {\cf18 char}* e2, Pred pred, {\cf17 const} T1& v1,\par
120                                   {\cf17 const} T2& v2) \{\par
121   {\cf19 if} (pred(v1, v2)) {\cf19 return} AssertionSuccess();\par
122 \par
123   {\cf19 return} AssertionFailure()\par
124          << pred_text << {\cf22 "("} << e1 << {\cf22 ", "} << e2\par
125          << {\cf22 ") evaluates to false, where"}\par
126          << {\cf22 "\\n"}\par
127          << e1 << {\cf22 " evaluates to "} << ::testing::PrintToString(v1) << {\cf22 "\\n"}\par
128          << e2 << {\cf22 " evaluates to "} << ::testing::PrintToString(v2);\par
129 \}\par
130 \par
131 {\cf20 // Internal macro for implementing \{EXPECT|ASSERT\}_PRED_FORMAT2.}\par
132 {\cf20 // Don't use this in your code.}\par
133 {\cf21 #define GTEST_PRED_FORMAT2_(pred_format, v1, v2, on_failure) \\}\par
134 {\cf21   GTEST_ASSERT_(pred_format(#v1, #v2, v1, v2), on_failure)}\par
135 \par
136 {\cf20 // Internal macro for implementing \{EXPECT|ASSERT\}_PRED2.  Don't use}\par
137 {\cf20 // this in your code.}\par
138 {\cf21 #define GTEST_PRED2_(pred, v1, v2, on_failure)                               \\}\par
139 {\cf21   GTEST_ASSERT_(::testing::AssertPred2Helper(#pred, #v1, #v2, pred, v1, v2), \\}\par
140 {\cf21                 on_failure)}\par
141 \par
142 {\cf20 // Binary predicate assertion macros.}\par
143 {\cf21 #define EXPECT_PRED_FORMAT2(pred_format, v1, v2) \\}\par
144 {\cf21   GTEST_PRED_FORMAT2_(pred_format, v1, v2, GTEST_NONFATAL_FAILURE_)}\par
145 {\cf21 #define EXPECT_PRED2(pred, v1, v2) \\}\par
146 {\cf21   GTEST_PRED2_(pred, v1, v2, GTEST_NONFATAL_FAILURE_)}\par
147 {\cf21 #define ASSERT_PRED_FORMAT2(pred_format, v1, v2) \\}\par
148 {\cf21   GTEST_PRED_FORMAT2_(pred_format, v1, v2, GTEST_FATAL_FAILURE_)}\par
149 {\cf21 #define ASSERT_PRED2(pred, v1, v2) \\}\par
150 {\cf21   GTEST_PRED2_(pred, v1, v2, GTEST_FATAL_FAILURE_)}\par
151 \par
152 {\cf20 // Helper function for implementing \{EXPECT|ASSERT\}_PRED3.  Don't use}\par
153 {\cf20 // this in your code.}\par
154 {\cf17 template} <{\cf17 typename} Pred, {\cf17 typename} T1, {\cf17 typename} T2, {\cf17 typename} T3>\par
155 AssertionResult AssertPred3Helper({\cf17 const} {\cf18 char}* pred_text, {\cf17 const} {\cf18 char}* e1,\par
156                                   {\cf17 const} {\cf18 char}* e2, {\cf17 const} {\cf18 char}* e3, Pred pred,\par
157                                   {\cf17 const} T1& v1, {\cf17 const} T2& v2, {\cf17 const} T3& v3) \{\par
158   {\cf19 if} (pred(v1, v2, v3)) {\cf19 return} AssertionSuccess();\par
159 \par
160   {\cf19 return} AssertionFailure()\par
161          << pred_text << {\cf22 "("} << e1 << {\cf22 ", "} << e2 << {\cf22 ", "} << e3\par
162          << {\cf22 ") evaluates to false, where"}\par
163          << {\cf22 "\\n"}\par
164          << e1 << {\cf22 " evaluates to "} << ::testing::PrintToString(v1) << {\cf22 "\\n"}\par
165          << e2 << {\cf22 " evaluates to "} << ::testing::PrintToString(v2) << {\cf22 "\\n"}\par
166          << e3 << {\cf22 " evaluates to "} << ::testing::PrintToString(v3);\par
167 \}\par
168 \par
169 {\cf20 // Internal macro for implementing \{EXPECT|ASSERT\}_PRED_FORMAT3.}\par
170 {\cf20 // Don't use this in your code.}\par
171 {\cf21 #define GTEST_PRED_FORMAT3_(pred_format, v1, v2, v3, on_failure) \\}\par
172 {\cf21   GTEST_ASSERT_(pred_format(#v1, #v2, #v3, v1, v2, v3), on_failure)}\par
173 \par
174 {\cf20 // Internal macro for implementing \{EXPECT|ASSERT\}_PRED3.  Don't use}\par
175 {\cf20 // this in your code.}\par
176 {\cf21 #define GTEST_PRED3_(pred, v1, v2, v3, on_failure)                          \\}\par
177 {\cf21   GTEST_ASSERT_(                                                            \\}\par
178 {\cf21       ::testing::AssertPred3Helper(#pred, #v1, #v2, #v3, pred, v1, v2, v3), \\}\par
179 {\cf21       on_failure)}\par
180 \par
181 {\cf20 // Ternary predicate assertion macros.}\par
182 {\cf21 #define EXPECT_PRED_FORMAT3(pred_format, v1, v2, v3) \\}\par
183 {\cf21   GTEST_PRED_FORMAT3_(pred_format, v1, v2, v3, GTEST_NONFATAL_FAILURE_)}\par
184 {\cf21 #define EXPECT_PRED3(pred, v1, v2, v3) \\}\par
185 {\cf21   GTEST_PRED3_(pred, v1, v2, v3, GTEST_NONFATAL_FAILURE_)}\par
186 {\cf21 #define ASSERT_PRED_FORMAT3(pred_format, v1, v2, v3) \\}\par
187 {\cf21   GTEST_PRED_FORMAT3_(pred_format, v1, v2, v3, GTEST_FATAL_FAILURE_)}\par
188 {\cf21 #define ASSERT_PRED3(pred, v1, v2, v3) \\}\par
189 {\cf21   GTEST_PRED3_(pred, v1, v2, v3, GTEST_FATAL_FAILURE_)}\par
190 \par
191 {\cf20 // Helper function for implementing \{EXPECT|ASSERT\}_PRED4.  Don't use}\par
192 {\cf20 // this in your code.}\par
193 {\cf17 template} <{\cf17 typename} Pred, {\cf17 typename} T1, {\cf17 typename} T2, {\cf17 typename} T3, {\cf17 typename} T4>\par
194 AssertionResult AssertPred4Helper({\cf17 const} {\cf18 char}* pred_text, {\cf17 const} {\cf18 char}* e1,\par
195                                   {\cf17 const} {\cf18 char}* e2, {\cf17 const} {\cf18 char}* e3,\par
196                                   {\cf17 const} {\cf18 char}* e4, Pred pred, {\cf17 const} T1& v1,\par
197                                   {\cf17 const} T2& v2, {\cf17 const} T3& v3, {\cf17 const} T4& v4) \{\par
198   {\cf19 if} (pred(v1, v2, v3, v4)) {\cf19 return} AssertionSuccess();\par
199 \par
200   {\cf19 return} AssertionFailure()\par
201          << pred_text << {\cf22 "("} << e1 << {\cf22 ", "} << e2 << {\cf22 ", "} << e3 << {\cf22 ", "} << e4\par
202          << {\cf22 ") evaluates to false, where"}\par
203          << {\cf22 "\\n"}\par
204          << e1 << {\cf22 " evaluates to "} << ::testing::PrintToString(v1) << {\cf22 "\\n"}\par
205          << e2 << {\cf22 " evaluates to "} << ::testing::PrintToString(v2) << {\cf22 "\\n"}\par
206          << e3 << {\cf22 " evaluates to "} << ::testing::PrintToString(v3) << {\cf22 "\\n"}\par
207          << e4 << {\cf22 " evaluates to "} << ::testing::PrintToString(v4);\par
208 \}\par
209 \par
210 {\cf20 // Internal macro for implementing \{EXPECT|ASSERT\}_PRED_FORMAT4.}\par
211 {\cf20 // Don't use this in your code.}\par
212 {\cf21 #define GTEST_PRED_FORMAT4_(pred_format, v1, v2, v3, v4, on_failure) \\}\par
213 {\cf21   GTEST_ASSERT_(pred_format(#v1, #v2, #v3, #v4, v1, v2, v3, v4), on_failure)}\par
214 \par
215 {\cf20 // Internal macro for implementing \{EXPECT|ASSERT\}_PRED4.  Don't use}\par
216 {\cf20 // this in your code.}\par
217 {\cf21 #define GTEST_PRED4_(pred, v1, v2, v3, v4, on_failure)                        \\}\par
218 {\cf21   GTEST_ASSERT_(::testing::AssertPred4Helper(#pred, #v1, #v2, #v3, #v4, pred, \\}\par
219 {\cf21                                              v1, v2, v3, v4),                 \\}\par
220 {\cf21                 on_failure)}\par
221 \par
222 {\cf20 // 4-ary predicate assertion macros.}\par
223 {\cf21 #define EXPECT_PRED_FORMAT4(pred_format, v1, v2, v3, v4) \\}\par
224 {\cf21   GTEST_PRED_FORMAT4_(pred_format, v1, v2, v3, v4, GTEST_NONFATAL_FAILURE_)}\par
225 {\cf21 #define EXPECT_PRED4(pred, v1, v2, v3, v4) \\}\par
226 {\cf21   GTEST_PRED4_(pred, v1, v2, v3, v4, GTEST_NONFATAL_FAILURE_)}\par
227 {\cf21 #define ASSERT_PRED_FORMAT4(pred_format, v1, v2, v3, v4) \\}\par
228 {\cf21   GTEST_PRED_FORMAT4_(pred_format, v1, v2, v3, v4, GTEST_FATAL_FAILURE_)}\par
229 {\cf21 #define ASSERT_PRED4(pred, v1, v2, v3, v4) \\}\par
230 {\cf21   GTEST_PRED4_(pred, v1, v2, v3, v4, GTEST_FATAL_FAILURE_)}\par
231 \par
232 {\cf20 // Helper function for implementing \{EXPECT|ASSERT\}_PRED5.  Don't use}\par
233 {\cf20 // this in your code.}\par
234 {\cf17 template} <{\cf17 typename} Pred, {\cf17 typename} T1, {\cf17 typename} T2, {\cf17 typename} T3, {\cf17 typename} T4,\par
235           {\cf17 typename} T5>\par
236 AssertionResult AssertPred5Helper({\cf17 const} {\cf18 char}* pred_text, {\cf17 const} {\cf18 char}* e1,\par
237                                   {\cf17 const} {\cf18 char}* e2, {\cf17 const} {\cf18 char}* e3,\par
238                                   {\cf17 const} {\cf18 char}* e4, {\cf17 const} {\cf18 char}* e5, Pred pred,\par
239                                   {\cf17 const} T1& v1, {\cf17 const} T2& v2, {\cf17 const} T3& v3,\par
240                                   {\cf17 const} T4& v4, {\cf17 const} T5& v5) \{\par
241   {\cf19 if} (pred(v1, v2, v3, v4, v5)) {\cf19 return} AssertionSuccess();\par
242 \par
243   {\cf19 return} AssertionFailure()\par
244          << pred_text << {\cf22 "("} << e1 << {\cf22 ", "} << e2 << {\cf22 ", "} << e3 << {\cf22 ", "} << e4\par
245          << {\cf22 ", "} << e5 << {\cf22 ") evaluates to false, where"}\par
246          << {\cf22 "\\n"}\par
247          << e1 << {\cf22 " evaluates to "} << ::testing::PrintToString(v1) << {\cf22 "\\n"}\par
248          << e2 << {\cf22 " evaluates to "} << ::testing::PrintToString(v2) << {\cf22 "\\n"}\par
249          << e3 << {\cf22 " evaluates to "} << ::testing::PrintToString(v3) << {\cf22 "\\n"}\par
250          << e4 << {\cf22 " evaluates to "} << ::testing::PrintToString(v4) << {\cf22 "\\n"}\par
251          << e5 << {\cf22 " evaluates to "} << ::testing::PrintToString(v5);\par
252 \}\par
253 \par
254 {\cf20 // Internal macro for implementing \{EXPECT|ASSERT\}_PRED_FORMAT5.}\par
255 {\cf20 // Don't use this in your code.}\par
256 {\cf21 #define GTEST_PRED_FORMAT5_(pred_format, v1, v2, v3, v4, v5, on_failure)  \\}\par
257 {\cf21   GTEST_ASSERT_(pred_format(#v1, #v2, #v3, #v4, #v5, v1, v2, v3, v4, v5), \\}\par
258 {\cf21                 on_failure)}\par
259 \par
260 {\cf20 // Internal macro for implementing \{EXPECT|ASSERT\}_PRED5.  Don't use}\par
261 {\cf20 // this in your code.}\par
262 {\cf21 #define GTEST_PRED5_(pred, v1, v2, v3, v4, v5, on_failure)                   \\}\par
263 {\cf21   GTEST_ASSERT_(::testing::AssertPred5Helper(#pred, #v1, #v2, #v3, #v4, #v5, \\}\par
264 {\cf21                                              pred, v1, v2, v3, v4, v5),      \\}\par
265 {\cf21                 on_failure)}\par
266 \par
267 {\cf20 // 5-ary predicate assertion macros.}\par
268 {\cf21 #define EXPECT_PRED_FORMAT5(pred_format, v1, v2, v3, v4, v5) \\}\par
269 {\cf21   GTEST_PRED_FORMAT5_(pred_format, v1, v2, v3, v4, v5, GTEST_NONFATAL_FAILURE_)}\par
270 {\cf21 #define EXPECT_PRED5(pred, v1, v2, v3, v4, v5) \\}\par
271 {\cf21   GTEST_PRED5_(pred, v1, v2, v3, v4, v5, GTEST_NONFATAL_FAILURE_)}\par
272 {\cf21 #define ASSERT_PRED_FORMAT5(pred_format, v1, v2, v3, v4, v5) \\}\par
273 {\cf21   GTEST_PRED_FORMAT5_(pred_format, v1, v2, v3, v4, v5, GTEST_FATAL_FAILURE_)}\par
274 {\cf21 #define ASSERT_PRED5(pred, v1, v2, v3, v4, v5) \\}\par
275 {\cf21   GTEST_PRED5_(pred, v1, v2, v3, v4, v5, GTEST_FATAL_FAILURE_)}\par
276 \par
277 \}  {\cf20 // namespace testing}\par
278 \par
279 {\cf21 #endif  }{\cf20 // GOOGLETEST_INCLUDE_GTEST_GTEST_PRED_IMPL_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest_prod.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googletest/include/gtest/gtest_prod.h}
{\xe \v lib/googletest-main/googletest/include/gtest/gtest_prod.h}
{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2006, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // Google C++ Testing and Mocking Framework definitions useful in production}\par
31 {\cf20 // code.}\par
32 \par
33 {\cf21 #ifndef GOOGLETEST_INCLUDE_GTEST_GTEST_PROD_H_}\par
34 {\cf21 #define GOOGLETEST_INCLUDE_GTEST_GTEST_PROD_H_}\par
35 \par
36 {\cf20 // When you need to test the private or protected members of a class,}\par
37 {\cf20 // use the FRIEND_TEST macro to declare your tests as friends of the}\par
38 {\cf20 // class.  For example:}\par
39 {\cf20 //}\par
40 {\cf20 // class MyClass \{}\par
41 {\cf20 //  private:}\par
42 {\cf20 //   void PrivateMethod();}\par
43 {\cf20 //   FRIEND_TEST(MyClassTest, PrivateMethodWorks);}\par
44 {\cf20 // \};}\par
45 {\cf20 //}\par
46 {\cf20 // class MyClassTest : public testing::Test \{}\par
47 {\cf20 //   // ...}\par
48 {\cf20 // \};}\par
49 {\cf20 //}\par
50 {\cf20 // TEST_F(MyClassTest, PrivateMethodWorks) \{}\par
51 {\cf20 //   // Can call MyClass::PrivateMethod() here.}\par
52 {\cf20 // \}}\par
53 {\cf20 //}\par
54 {\cf20 // Note: The test class must be in the same namespace as the class being tested.}\par
55 {\cf20 // For example, putting MyClassTest in an anonymous namespace will not work.}\par
56 \par
57 {\cf21 #define FRIEND_TEST(test_case_name, test_name) \\}\par
58 {\cf21   friend class test_case_name##_##test_name##_Test}\par
59 \par
60 {\cf21 #endif  }{\cf20 // GOOGLETEST_INCLUDE_GTEST_GTEST_PROD_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest-port.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googletest/include/gtest/internal/custom/gtest-port.h}
{\xe \v lib/googletest-main/googletest/include/gtest/internal/custom/gtest-port.h}
{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2015, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 {\cf20 //}\par
30 {\cf20 // Injection point for custom user configurations. See README for details}\par
31 {\cf20 //}\par
32 {\cf20 // ** Custom implementation starts here **}\par
33 \par
34 {\cf21 #ifndef GOOGLETEST_INCLUDE_GTEST_INTERNAL_CUSTOM_GTEST_PORT_H_}\par
35 {\cf21 #define GOOGLETEST_INCLUDE_GTEST_INTERNAL_CUSTOM_GTEST_PORT_H_}\par
36 \par
37 {\cf21 #endif  }{\cf20 // GOOGLETEST_INCLUDE_GTEST_INTERNAL_CUSTOM_GTEST_PORT_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest-port.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googletest/include/gtest/internal/gtest-port.h}
{\xe \v lib/googletest-main/googletest/include/gtest/internal/gtest-port.h}
{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2005, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // Low-level types and utilities for porting Google Test to various}\par
31 {\cf20 // platforms.  All macros ending with _ and symbols defined in an}\par
32 {\cf20 // internal namespace are subject to change without notice.  Code}\par
33 {\cf20 // outside Google Test MUST NOT USE THEM DIRECTLY.  Macros that don't}\par
34 {\cf20 // end with _ are part of Google Test's public API and can be used by}\par
35 {\cf20 // code outside Google Test.}\par
36 {\cf20 //}\par
37 {\cf20 // This file is fundamental to Google Test.  All other Google Test source}\par
38 {\cf20 // files are expected to #include this.  Therefore, it cannot #include}\par
39 {\cf20 // any other Google Test header.}\par
40 \par
41 {\cf20 // IWYU pragma: private, include "gtest/gtest.h"}\par
42 {\cf20 // IWYU pragma: friend gtest/.*}\par
43 {\cf20 // IWYU pragma: friend gmock/.*}\par
44 \par
45 {\cf21 #ifndef GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_}\par
46 {\cf21 #define GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_}\par
47 \par
48 {\cf20 // Environment-describing macros}\par
49 {\cf20 // -----------------------------}\par
50 {\cf20 //}\par
51 {\cf20 // Google Test can be used in many different environments.  Macros in}\par
52 {\cf20 // this section tell Google Test what kind of environment it is being}\par
53 {\cf20 // used in, such that Google Test can provide environment-specific}\par
54 {\cf20 // features and implementations.}\par
55 {\cf20 //}\par
56 {\cf20 // Google Test tries to automatically detect the properties of its}\par
57 {\cf20 // environment, so users usually don't need to worry about these}\par
58 {\cf20 // macros.  However, the automatic detection is not perfect.}\par
59 {\cf20 // Sometimes it's necessary for a user to define some of the following}\par
60 {\cf20 // macros in the build script to override Google Test's decisions.}\par
61 {\cf20 //}\par
62 {\cf20 // If the user doesn't define a macro in the list, Google Test will}\par
63 {\cf20 // provide a default definition.  After this header is #included, all}\par
64 {\cf20 // macros in this list will be defined to either 1 or 0.}\par
65 {\cf20 //}\par
66 {\cf20 // Notes to maintainers:}\par
67 {\cf20 //   - Each macro here is a user-tweakable knob; do not grow the list}\par
68 {\cf20 //     lightly.}\par
69 {\cf20 //   - Use #if to key off these macros.  Don't use #ifdef or "#if}\par
70 {\cf20 //     defined(...)", which will not work as these macros are ALWAYS}\par
71 {\cf20 //     defined.}\par
72 {\cf20 //}\par
73 {\cf20 //   GTEST_HAS_CLONE          - Define it to 1/0 to indicate that clone(2)}\par
74 {\cf20 //                              is/isn't available.}\par
75 {\cf20 //   GTEST_HAS_EXCEPTIONS     - Define it to 1/0 to indicate that exceptions}\par
76 {\cf20 //                              are enabled.}\par
77 {\cf20 //   GTEST_HAS_POSIX_RE       - Define it to 1/0 to indicate that POSIX regular}\par
78 {\cf20 //                              expressions are/aren't available.}\par
79 {\cf20 //   GTEST_HAS_PTHREAD        - Define it to 1/0 to indicate that <pthread.h>}\par
80 {\cf20 //                              is/isn't available.}\par
81 {\cf20 //   GTEST_HAS_RTTI           - Define it to 1/0 to indicate that RTTI is/isn't}\par
82 {\cf20 //                              enabled.}\par
83 {\cf20 //   GTEST_HAS_STD_WSTRING    - Define it to 1/0 to indicate that}\par
84 {\cf20 //                              std::wstring does/doesn't work (Google Test can}\par
85 {\cf20 //                              be used where std::wstring is unavailable).}\par
86 {\cf20 //   GTEST_HAS_SEH            - Define it to 1/0 to indicate whether the}\par
87 {\cf20 //                              compiler supports Microsoft's "Structured}\par
88 {\cf20 //                              Exception Handling".}\par
89 {\cf20 //   GTEST_HAS_STREAM_REDIRECTION}\par
90 {\cf20 //                            - Define it to 1/0 to indicate whether the}\par
91 {\cf20 //                              platform supports I/O stream redirection using}\par
92 {\cf20 //                              dup() and dup2().}\par
93 {\cf20 //   GTEST_LINKED_AS_SHARED_LIBRARY}\par
94 {\cf20 //                            - Define to 1 when compiling tests that use}\par
95 {\cf20 //                              Google Test as a shared library (known as}\par
96 {\cf20 //                              DLL on Windows).}\par
97 {\cf20 //   GTEST_CREATE_SHARED_LIBRARY}\par
98 {\cf20 //                            - Define to 1 when compiling Google Test itself}\par
99 {\cf20 //                              as a shared library.}\par
100 {\cf20 //   GTEST_DEFAULT_DEATH_TEST_STYLE}\par
101 {\cf20 //                            - The default value of --gtest_death_test_style.}\par
102 {\cf20 //                              The legacy default has been "fast" in the open}\par
103 {\cf20 //                              source version since 2008. The recommended value}\par
104 {\cf20 //                              is "threadsafe", and can be set in}\par
105 {\cf20 //                              custom/gtest-port.h.}\par
106 \par
107 {\cf20 // Platform-indicating macros}\par
108 {\cf20 // --------------------------}\par
109 {\cf20 //}\par
110 {\cf20 // Macros indicating the platform on which Google Test is being used}\par
111 {\cf20 // (a macro is defined to 1 if compiled on the given platform;}\par
112 {\cf20 // otherwise UNDEFINED -- it's never defined to 0.).  Google Test}\par
113 {\cf20 // defines these macros automatically.  Code outside Google Test MUST}\par
114 {\cf20 // NOT define them.}\par
115 {\cf20 //}\par
116 {\cf20 //   GTEST_OS_AIX      - IBM AIX}\par
117 {\cf20 //   GTEST_OS_CYGWIN   - Cygwin}\par
118 {\cf20 //   GTEST_OS_DRAGONFLY - DragonFlyBSD}\par
119 {\cf20 //   GTEST_OS_FREEBSD  - FreeBSD}\par
120 {\cf20 //   GTEST_OS_FUCHSIA  - Fuchsia}\par
121 {\cf20 //   GTEST_OS_GNU_HURD - GNU/Hurd}\par
122 {\cf20 //   GTEST_OS_GNU_KFREEBSD - GNU/kFreeBSD}\par
123 {\cf20 //   GTEST_OS_HAIKU    - Haiku}\par
124 {\cf20 //   GTEST_OS_HPUX     - HP-UX}\par
125 {\cf20 //   GTEST_OS_LINUX    - Linux}\par
126 {\cf20 //     GTEST_OS_LINUX_ANDROID - Google Android}\par
127 {\cf20 //   GTEST_OS_MAC      - Mac OS X}\par
128 {\cf20 //     GTEST_OS_IOS    - iOS}\par
129 {\cf20 //   GTEST_OS_NACL     - Google Native Client (NaCl)}\par
130 {\cf20 //   GTEST_OS_NETBSD   - NetBSD}\par
131 {\cf20 //   GTEST_OS_OPENBSD  - OpenBSD}\par
132 {\cf20 //   GTEST_OS_OS2      - OS/2}\par
133 {\cf20 //   GTEST_OS_QNX      - QNX}\par
134 {\cf20 //   GTEST_OS_SOLARIS  - Sun Solaris}\par
135 {\cf20 //   GTEST_OS_WINDOWS  - Windows (Desktop, MinGW, or Mobile)}\par
136 {\cf20 //     GTEST_OS_WINDOWS_DESKTOP  - Windows Desktop}\par
137 {\cf20 //     GTEST_OS_WINDOWS_MINGW    - MinGW}\par
138 {\cf20 //     GTEST_OS_WINDOWS_MOBILE   - Windows Mobile}\par
139 {\cf20 //     GTEST_OS_WINDOWS_PHONE    - Windows Phone}\par
140 {\cf20 //     GTEST_OS_WINDOWS_RT       - Windows Store App/WinRT}\par
141 {\cf20 //   GTEST_OS_ZOS      - z/OS}\par
142 {\cf20 //}\par
143 {\cf20 // Among the platforms, Cygwin, Linux, Mac OS X, and Windows have the}\par
144 {\cf20 // most stable support.  Since core members of the Google Test project}\par
145 {\cf20 // don't have access to other platforms, support for them may be less}\par
146 {\cf20 // stable.  If you notice any problems on your platform, please notify}\par
147 {\cf20 // googletestframework@googlegroups.com (patches for fixing them are}\par
148 {\cf20 // even more welcome!).}\par
149 {\cf20 //}\par
150 {\cf20 // It is possible that none of the GTEST_OS_* macros are defined.}\par
151 \par
152 {\cf20 // Feature-indicating macros}\par
153 {\cf20 // -------------------------}\par
154 {\cf20 //}\par
155 {\cf20 // Macros indicating which Google Test features are available (a macro}\par
156 {\cf20 // is defined to 1 if the corresponding feature is supported;}\par
157 {\cf20 // otherwise UNDEFINED -- it's never defined to 0.).  Google Test}\par
158 {\cf20 // defines these macros automatically.  Code outside Google Test MUST}\par
159 {\cf20 // NOT define them.}\par
160 {\cf20 //}\par
161 {\cf20 // These macros are public so that portable tests can be written.}\par
162 {\cf20 // Such tests typically surround code using a feature with an #if}\par
163 {\cf20 // which controls that code.  For example:}\par
164 {\cf20 //}\par
165 {\cf20 // #if GTEST_HAS_DEATH_TEST}\par
166 {\cf20 //   EXPECT_DEATH(DoSomethingDeadly());}\par
167 {\cf20 // #endif}\par
168 {\cf20 //}\par
169 {\cf20 //   GTEST_HAS_DEATH_TEST   - death tests}\par
170 {\cf20 //   GTEST_HAS_TYPED_TEST   - typed tests}\par
171 {\cf20 //   GTEST_HAS_TYPED_TEST_P - type-parameterized tests}\par
172 {\cf20 //   GTEST_IS_THREADSAFE    - Google Test is thread-safe.}\par
173 {\cf20 //   GTEST_USES_RE2         - the RE2 regular expression library is used}\par
174 {\cf20 //   GTEST_USES_POSIX_RE    - enhanced POSIX regex is used. Do not confuse with}\par
175 {\cf20 //                            GTEST_HAS_POSIX_RE (see above) which users can}\par
176 {\cf20 //                            define themselves.}\par
177 {\cf20 //   GTEST_USES_SIMPLE_RE   - our own simple regex is used;}\par
178 {\cf20 //                            the above RE\\b(s) are mutually exclusive.}\par
179 \par
180 {\cf20 // Misc public macros}\par
181 {\cf20 // ------------------}\par
182 {\cf20 //}\par
183 {\cf20 //   GTEST_FLAG(flag_name)  - references the variable corresponding to}\par
184 {\cf20 //                            the given Google Test flag.}\par
185 \par
186 {\cf20 // Internal utilities}\par
187 {\cf20 // ------------------}\par
188 {\cf20 //}\par
189 {\cf20 // The following macros and utilities are for Google Test's INTERNAL}\par
190 {\cf20 // use only.  Code outside Google Test MUST NOT USE THEM DIRECTLY.}\par
191 {\cf20 //}\par
192 {\cf20 // Macros for basic C++ coding:}\par
193 {\cf20 //   GTEST_AMBIGUOUS_ELSE_BLOCKER_ - for disabling a gcc warning.}\par
194 {\cf20 //   GTEST_ATTRIBUTE_UNUSED_  - declares that a class' instances or a}\par
195 {\cf20 //                              variable don't have to be used.}\par
196 {\cf20 //   GTEST_MUST_USE_RESULT_   - declares that a function's result must be used.}\par
197 {\cf20 //   GTEST_INTENTIONAL_CONST_COND_PUSH_ - start code section where MSVC C4127 is}\par
198 {\cf20 //                                        suppressed (constant conditional).}\par
199 {\cf20 //   GTEST_INTENTIONAL_CONST_COND_POP_  - finish code section where MSVC C4127}\par
200 {\cf20 //                                        is suppressed.}\par
201 {\cf20 //   GTEST_INTERNAL_HAS_ANY - for enabling UniversalPrinter<std::any> or}\par
202 {\cf20 //                            UniversalPrinter<absl::any> specializations.}\par
203 {\cf20 //   GTEST_INTERNAL_HAS_OPTIONAL - for enabling UniversalPrinter<std::optional>}\par
204 {\cf20 //   or}\par
205 {\cf20 //                                 UniversalPrinter<absl::optional>}\par
206 {\cf20 //                                 specializations.}\par
207 {\cf20 //   GTEST_INTERNAL_HAS_STRING_VIEW - for enabling Matcher<std::string_view> or}\par
208 {\cf20 //                                    Matcher<absl::string_view>}\par
209 {\cf20 //                                    specializations.}\par
210 {\cf20 //   GTEST_INTERNAL_HAS_VARIANT - for enabling UniversalPrinter<std::variant> or}\par
211 {\cf20 //                                UniversalPrinter<absl::variant>}\par
212 {\cf20 //                                specializations.}\par
213 {\cf20 //}\par
214 {\cf20 // Synchronization:}\par
215 {\cf20 //   Mutex, MutexLock, ThreadLocal, GetThreadCount()}\par
216 {\cf20 //                            - synchronization primitives.}\par
217 {\cf20 //}\par
218 {\cf20 // Regular expressions:}\par
219 {\cf20 //   RE             - a simple regular expression class using}\par
220 {\cf20 //                     1) the RE2 syntax on all platforms when built with RE2}\par
221 {\cf20 //                        and Abseil as dependencies}\par
222 {\cf20 //                     2) the POSIX Extended Regular Expression syntax on}\par
223 {\cf20 //                        UNIX-like platforms,}\par
224 {\cf20 //                     3) A reduced regular exception syntax on other platforms,}\par
225 {\cf20 //                        including Windows.}\par
226 {\cf20 // Logging:}\par
227 {\cf20 //   GTEST_LOG_()   - logs messages at the specified severity level.}\par
228 {\cf20 //   LogToStderr()  - directs all log messages to stderr.}\par
229 {\cf20 //   FlushInfoLog() - flushes informational log messages.}\par
230 {\cf20 //}\par
231 {\cf20 // Stdout and stderr capturing:}\par
232 {\cf20 //   CaptureStdout()     - starts capturing stdout.}\par
233 {\cf20 //   GetCapturedStdout() - stops capturing stdout and returns the captured}\par
234 {\cf20 //                         string.}\par
235 {\cf20 //   CaptureStderr()     - starts capturing stderr.}\par
236 {\cf20 //   GetCapturedStderr() - stops capturing stderr and returns the captured}\par
237 {\cf20 //                         string.}\par
238 {\cf20 //}\par
239 {\cf20 // Integer types:}\par
240 {\cf20 //   TypeWithSize   - maps an integer to a int type.}\par
241 {\cf20 //   TimeInMillis   - integers of known sizes.}\par
242 {\cf20 //   BiggestInt     - the biggest signed integer type.}\par
243 {\cf20 //}\par
244 {\cf20 // Command-line utilities:}\par
245 {\cf20 //   GetInjectableArgvs() - returns the command line as a vector of strings.}\par
246 {\cf20 //}\par
247 {\cf20 // Environment variable utilities:}\par
248 {\cf20 //   GetEnv()             - gets the value of an environment variable.}\par
249 {\cf20 //   BoolFromGTestEnv()   - parses a bool environment variable.}\par
250 {\cf20 //   Int32FromGTestEnv()  - parses an int32_t environment variable.}\par
251 {\cf20 //   StringFromGTestEnv() - parses a string environment variable.}\par
252 {\cf20 //}\par
253 {\cf20 // Deprecation warnings:}\par
254 {\cf20 //   GTEST_INTERNAL_DEPRECATED(message) - attribute marking a function as}\par
255 {\cf20 //                                        deprecated; calling a marked function}\par
256 {\cf20 //                                        should generate a compiler warning}\par
257 \par
258 {\cf21 #include <ctype.h>}   {\cf20 // for isspace, etc}\par
259 {\cf21 #include <stddef.h>}  {\cf20 // for ptrdiff_t}\par
260 {\cf21 #include <stdio.h>}\par
261 {\cf21 #include <stdlib.h>}\par
262 {\cf21 #include <string.h>}\par
263 \par
264 {\cf21 #include <cerrno>}\par
265 {\cf20 // #include <condition_variable>  // Guarded by GTEST_IS_THREADSAFE below}\par
266 {\cf21 #include <cstdint>}\par
267 {\cf21 #include <iostream>}\par
268 {\cf21 #include <limits>}\par
269 {\cf21 #include <locale>}\par
270 {\cf21 #include <memory>}\par
271 {\cf21 #include <string>}\par
272 {\cf20 // #include <mutex>  // Guarded by GTEST_IS_THREADSAFE below}\par
273 {\cf21 #include <tuple>}\par
274 {\cf21 #include <type_traits>}\par
275 {\cf21 #include <vector>}\par
276 \par
277 {\cf21 #ifndef _WIN32_WCE}\par
278 {\cf21 #include <sys/stat.h>}\par
279 {\cf21 #include <sys/types.h>}\par
280 {\cf21 #endif  }{\cf20 // !_WIN32_WCE}\par
281 \par
282 {\cf21 #if defined __APPLE__}\par
283 {\cf21 #include <AvailabilityMacros.h>}\par
284 {\cf21 #include <TargetConditionals.h>}\par
285 {\cf21 #endif}\par
286 \par
287 {\cf21 #include "gtest/internal/custom/gtest-port.h"}\par
288 {\cf21 #include "gtest/internal/gtest-port-arch.h"}\par
289 \par
290 {\cf21 #if GTEST_HAS_ABSL}\par
291 {\cf21 #include "absl/flags/declare.h"}\par
292 {\cf21 #include "absl/flags/flag.h"}\par
293 {\cf21 #include "absl/flags/reflection.h"}\par
294 {\cf21 #endif}\par
295 \par
296 {\cf21 #if !defined(GTEST_DEV_EMAIL_)}\par
297 {\cf21 #define GTEST_DEV_EMAIL_ "googletestframework@@googlegroups.com"}\par
298 {\cf21 #define GTEST_FLAG_PREFIX_ "gtest_"}\par
299 {\cf21 #define GTEST_FLAG_PREFIX_DASH_ "gtest-"}\par
300 {\cf21 #define GTEST_FLAG_PREFIX_UPPER_ "GTEST_"}\par
301 {\cf21 #define GTEST_NAME_ "Google Test"}\par
302 {\cf21 #define GTEST_PROJECT_URL_ "https://github.com/google/googletest/"}\par
303 {\cf21 #endif  }{\cf20 // !defined(GTEST_DEV_EMAIL_)}\par
304 \par
305 {\cf21 #if !defined(GTEST_INIT_GOOGLE_TEST_NAME_)}\par
306 {\cf21 #define GTEST_INIT_GOOGLE_TEST_NAME_ "testing::InitGoogleTest"}\par
307 {\cf21 #endif  }{\cf20 // !defined(GTEST_INIT_GOOGLE_TEST_NAME_)}\par
308 \par
309 {\cf20 // Determines the version of gcc that is used to compile this.}\par
310 {\cf21 #ifdef __GNUC__}\par
311 {\cf20 // 40302 means version 4.3.2.}\par
312 {\cf21 #define GTEST_GCC_VER_ \\}\par
313 {\cf21   (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__)}\par
314 {\cf21 #endif  }{\cf20 // __GNUC__}\par
315 \par
316 {\cf20 // Macros for disabling Microsoft Visual C++ warnings.}\par
317 {\cf20 //}\par
318 {\cf20 //   GTEST_DISABLE_MSC_WARNINGS_PUSH_(4800 4385)}\par
319 {\cf20 //   /* code that triggers warnings C4800 and C4385 */}\par
320 {\cf20 //   GTEST_DISABLE_MSC_WARNINGS_POP_()}\par
321 {\cf21 #if defined(_MSC_VER)}\par
322 {\cf21 #define GTEST_DISABLE_MSC_WARNINGS_PUSH_(warnings) \\}\par
323 {\cf21   __pragma(warning(push)) __pragma(warning(disable : warnings))}\par
324 {\cf21 #define GTEST_DISABLE_MSC_WARNINGS_POP_() __pragma(warning(pop))}\par
325 {\cf21 #else}\par
326 {\cf20 // Not all compilers are MSVC}\par
327 {\cf21 #define GTEST_DISABLE_MSC_WARNINGS_PUSH_(warnings)}\par
328 {\cf21 #define GTEST_DISABLE_MSC_WARNINGS_POP_()}\par
329 {\cf21 #endif}\par
330 \par
331 {\cf20 // Clang on Windows does not understand MSVC's pragma warning.}\par
332 {\cf20 // We need clang-specific way to disable function deprecation warning.}\par
333 {\cf21 #ifdef __clang__}\par
334 {\cf21 #define GTEST_DISABLE_MSC_DEPRECATED_PUSH_()                            \\}\par
335 {\cf21   _Pragma("clang diagnostic push"})                                      \\\par
336       _Pragma("clang diagnostic ignored \\"-Wdeprecated-declarations\\"") \\\par
337           _Pragma("clang diagnostic ignored \\"-Wdeprecated-implementations\\"")\par
338 {\cf21 #define GTEST_DISABLE_MSC_DEPRECATED_POP_() _Pragma("clang diagnostic pop"})\par
339 {\cf21 #else}\par
340 {\cf21 #define GTEST_DISABLE_MSC_DEPRECATED_PUSH_() \\}\par
341 {\cf21   GTEST_DISABLE_MSC_WARNINGS_PUSH_(4996)}\par
342 {\cf21 #define GTEST_DISABLE_MSC_DEPRECATED_POP_() GTEST_DISABLE_MSC_WARNINGS_POP_()}\par
343 {\cf21 #endif}\par
344 \par
345 {\cf20 // Brings in definitions for functions used in the testing::internal::posix}\par
346 {\cf20 // namespace (read, write, close, chdir, isatty, stat). We do not currently}\par
347 {\cf20 // use them on Windows Mobile.}\par
348 {\cf21 #if GTEST_OS_WINDOWS}\par
349 {\cf21 #if !GTEST_OS_WINDOWS_MOBILE}\par
350 {\cf21 #include <direct.h>}\par
351 {\cf21 #include <io.h>}\par
352 {\cf21 #endif}\par
353 {\cf20 // In order to avoid having to include <windows.h>, use forward declaration}\par
354 {\cf21 #if GTEST_OS_WINDOWS_MINGW && !defined(__MINGW64_VERSION_MAJOR)}\par
355 {\cf20 // MinGW defined _CRITICAL_SECTION and _RTL_CRITICAL_SECTION as two}\par
356 {\cf20 // separate (equivalent) structs, instead of using typedef}\par
357 {\cf17 typedef} {\cf17 struct }_CRITICAL_SECTION GTEST_CRITICAL_SECTION;\par
358 {\cf21 #else}\par
359 {\cf20 // Assume CRITICAL_SECTION is a typedef of _RTL_CRITICAL_SECTION.}\par
360 {\cf20 // This assumption is verified by}\par
361 {\cf20 // WindowsTypesTest.CRITICAL_SECTIONIs_RTL_CRITICAL_SECTION.}\par
362 {\cf17 typedef} {\cf17 struct }_RTL_CRITICAL_SECTION GTEST_CRITICAL_SECTION;\par
363 {\cf21 #endif}\par
364 {\cf21 #elif GTEST_OS_XTENSA}\par
365 {\cf21 #include <unistd.h>}\par
366 {\cf20 // Xtensa toolchains define strcasecmp in the string.h header instead of}\par
367 {\cf20 // strings.h. string.h is already included.}\par
368 {\cf21 #else}\par
369 {\cf20 // This assumes that non-Windows OSes provide unistd.h. For OSes where this}\par
370 {\cf20 // is not the case, we need to include headers that provide the functions}\par
371 {\cf20 // mentioned above.}\par
372 {\cf21 #include <strings.h>}\par
373 {\cf21 #include <unistd.h>}\par
374 {\cf21 #endif  }{\cf20 // GTEST_OS_WINDOWS}\par
375 \par
376 {\cf21 #if GTEST_OS_LINUX_ANDROID}\par
377 {\cf20 // Used to define __ANDROID_API__ matching the target NDK API level.}\par
378 {\cf21 #include <android/api-level.h>}  {\cf20 // NOLINT}\par
379 {\cf21 #endif}\par
380 \par
381 {\cf20 // Defines this to true if and only if Google Test can use POSIX regular}\par
382 {\cf20 // expressions.}\par
383 {\cf21 #ifndef GTEST_HAS_POSIX_RE}\par
384 {\cf21 #if GTEST_OS_LINUX_ANDROID}\par
385 {\cf20 // On Android, <regex.h> is only available starting with Gingerbread.}\par
386 {\cf21 #define GTEST_HAS_POSIX_RE (__ANDROID_API__ >= 9)}\par
387 {\cf21 #else}\par
388 {\cf21 #define GTEST_HAS_POSIX_RE \\}\par
389 {\cf21   !(GTEST_OS_WINDOWS || GTEST_OS_XTENSA || GTEST_OS_QURT)}\par
390 {\cf21 #endif}\par
391 {\cf21 #endif}\par
392 \par
393 {\cf20 // Select the regular expression implementation.}\par
394 {\cf21 #if GTEST_HAS_ABSL}\par
395 {\cf20 // When using Abseil, RE2 is required.}\par
396 {\cf21 #include "absl/strings/string_view.h"}\par
397 {\cf21 #include "re2/re2.h"}\par
398 {\cf21 #define GTEST_USES_RE2 1}\par
399 {\cf21 #elif GTEST_HAS_POSIX_RE}\par
400 {\cf21 #include <regex.h>}  {\cf20 // NOLINT}\par
401 {\cf21 #define GTEST_USES_POSIX_RE 1}\par
402 {\cf21 #else}\par
403 {\cf20 // Use our own simple regex implementation.}\par
404 {\cf21 #define GTEST_USES_SIMPLE_RE 1}\par
405 {\cf21 #endif}\par
406 \par
407 {\cf21 #ifndef GTEST_HAS_EXCEPTIONS}\par
408 {\cf20 // The user didn't tell us whether exceptions are enabled, so we need}\par
409 {\cf20 // to figure it out.}\par
410 {\cf21 #if defined(_MSC_VER) && defined(_CPPUNWIND)}\par
411 {\cf20 // MSVC defines _CPPUNWIND to 1 if and only if exceptions are enabled.}\par
412 {\cf21 #define GTEST_HAS_EXCEPTIONS 1}\par
413 {\cf21 #elif defined(__BORLANDC__)}\par
414 {\cf20 // C++Builder's implementation of the STL uses the _HAS_EXCEPTIONS}\par
415 {\cf20 // macro to enable exceptions, so we'll do the same.}\par
416 {\cf20 // Assumes that exceptions are enabled by default.}\par
417 {\cf21 #ifndef _HAS_EXCEPTIONS}\par
418 {\cf21 #define _HAS_EXCEPTIONS 1}\par
419 {\cf21 #endif  }{\cf20 // _HAS_EXCEPTIONS}\par
420 {\cf21 #define GTEST_HAS_EXCEPTIONS _HAS_EXCEPTIONS}\par
421 {\cf21 #elif defined(__clang__)}\par
422 {\cf20 // clang defines __EXCEPTIONS if and only if exceptions are enabled before clang}\par
423 {\cf20 // 220714, but if and only if cleanups are enabled after that. In Obj-C++ files,}\par
424 {\cf20 // there can be cleanups for ObjC exceptions which also need cleanups, even if}\par
425 {\cf20 // C++ exceptions are disabled. clang has __has_feature(cxx_exceptions) which}\par
426 {\cf20 // checks for C++ exceptions starting at clang r206352, but which checked for}\par
427 {\cf20 // cleanups prior to that. To reliably check for C++ exception availability with}\par
428 {\cf20 // clang, check for}\par
429 {\cf20 // __EXCEPTIONS && __has_feature(cxx_exceptions).}\par
430 {\cf21 #define GTEST_HAS_EXCEPTIONS (__EXCEPTIONS && __has_feature(cxx_exceptions))}\par
431 {\cf21 #elif defined(__GNUC__) && __EXCEPTIONS}\par
432 {\cf20 // gcc defines __EXCEPTIONS to 1 if and only if exceptions are enabled.}\par
433 {\cf21 #define GTEST_HAS_EXCEPTIONS 1}\par
434 {\cf21 #elif defined(__SUNPRO_CC)}\par
435 {\cf20 // Sun Pro CC supports exceptions.  However, there is no compile-time way of}\par
436 {\cf20 // detecting whether they are enabled or not.  Therefore, we assume that}\par
437 {\cf20 // they are enabled unless the user tells us otherwise.}\par
438 {\cf21 #define GTEST_HAS_EXCEPTIONS 1}\par
439 {\cf21 #elif defined(__IBMCPP__) && __EXCEPTIONS}\par
440 {\cf20 // xlC defines __EXCEPTIONS to 1 if and only if exceptions are enabled.}\par
441 {\cf21 #define GTEST_HAS_EXCEPTIONS 1}\par
442 {\cf21 #elif defined(__HP_aCC)}\par
443 {\cf20 // Exception handling is in effect by default in HP aCC compiler. It has to}\par
444 {\cf20 // be turned of by +noeh compiler option if desired.}\par
445 {\cf21 #define GTEST_HAS_EXCEPTIONS 1}\par
446 {\cf21 #else}\par
447 {\cf20 // For other compilers, we assume exceptions are disabled to be}\par
448 {\cf20 // conservative.}\par
449 {\cf21 #define GTEST_HAS_EXCEPTIONS 0}\par
450 {\cf21 #endif  }{\cf20 // defined(_MSC_VER) || defined(__BORLANDC__)}\par
451 {\cf21 #endif  }{\cf20 // GTEST_HAS_EXCEPTIONS}\par
452 \par
453 {\cf21 #ifndef GTEST_HAS_STD_WSTRING}\par
454 {\cf20 // The user didn't tell us whether ::std::wstring is available, so we need}\par
455 {\cf20 // to figure it out.}\par
456 {\cf20 // Cygwin 1.7 and below doesn't support ::std::wstring.}\par
457 {\cf20 // Solaris' libc++ doesn't support it either.  Android has}\par
458 {\cf20 // no support for it at least as recent as Froyo (2.2).}\par
459 {\cf21 #define GTEST_HAS_STD_WSTRING                                         \\}\par
460 {\cf21   (!(GTEST_OS_LINUX_ANDROID || GTEST_OS_CYGWIN || GTEST_OS_SOLARIS || \\}\par
461 {\cf21      GTEST_OS_HAIKU || GTEST_OS_ESP32 || GTEST_OS_ESP8266 ||          \\}\par
462 {\cf21      GTEST_OS_XTENSA || GTEST_OS_QURT))}\par
463 \par
464 {\cf21 #endif  }{\cf20 // GTEST_HAS_STD_WSTRING}\par
465 \par
466 {\cf20 // Determines whether RTTI is available.}\par
467 {\cf21 #ifndef GTEST_HAS_RTTI}\par
468 {\cf20 // The user didn't tell us whether RTTI is enabled, so we need to}\par
469 {\cf20 // figure it out.}\par
470 \par
471 {\cf21 #ifdef _MSC_VER}\par
472 \par
473 {\cf21 #ifdef _CPPRTTI  }{\cf20 // MSVC defines this macro if and only if RTTI is enabled.}\par
474 {\cf21 #define GTEST_HAS_RTTI 1}\par
475 {\cf21 #else}\par
476 {\cf21 #define GTEST_HAS_RTTI 0}\par
477 {\cf21 #endif}\par
478 \par
479 {\cf20 // Starting with version 4.3.2, gcc defines __GXX_RTTI if and only if RTTI is}\par
480 {\cf20 // enabled.}\par
481 {\cf21 #elif defined(__GNUC__)}\par
482 \par
483 {\cf21 #ifdef __GXX_RTTI}\par
484 {\cf20 // When building against STLport with the Android NDK and with}\par
485 {\cf20 // -frtti -fno-exceptions, the build fails at link time with undefined}\par
486 {\cf20 // references to __cxa_bad_typeid. Note sure if STL or toolchain bug,}\par
487 {\cf20 // so disable RTTI when detected.}\par
488 {\cf21 #if GTEST_OS_LINUX_ANDROID && defined(_STLPORT_MAJOR) && !defined(__EXCEPTIONS)}\par
489 {\cf21 #define GTEST_HAS_RTTI 0}\par
490 {\cf21 #else}\par
491 {\cf21 #define GTEST_HAS_RTTI 1}\par
492 {\cf21 #endif  }{\cf20 // GTEST_OS_LINUX_ANDROID && __STLPORT_MAJOR && !__EXCEPTIONS}\par
493 {\cf21 #else}\par
494 {\cf21 #define GTEST_HAS_RTTI 0}\par
495 {\cf21 #endif  }{\cf20 // __GXX_RTTI}\par
496 \par
497 {\cf20 // Clang defines __GXX_RTTI starting with version 3.0, but its manual recommends}\par
498 {\cf20 // using has_feature instead. has_feature(cxx_rtti) is supported since 2.7, the}\par
499 {\cf20 // first version with C++ support.}\par
500 {\cf21 #elif defined(__clang__)}\par
501 \par
502 {\cf21 #define GTEST_HAS_RTTI __has_feature(cxx_rtti)}\par
503 \par
504 {\cf20 // Starting with version 9.0 IBM Visual Age defines __RTTI_ALL__ to 1 if}\par
505 {\cf20 // both the typeid and dynamic_cast features are present.}\par
506 {\cf21 #elif defined(__IBMCPP__) && (__IBMCPP__ >= 900)}\par
507 \par
508 {\cf21 #ifdef __RTTI_ALL__}\par
509 {\cf21 #define GTEST_HAS_RTTI 1}\par
510 {\cf21 #else}\par
511 {\cf21 #define GTEST_HAS_RTTI 0}\par
512 {\cf21 #endif}\par
513 \par
514 {\cf21 #else}\par
515 \par
516 {\cf20 // For all other compilers, we assume RTTI is enabled.}\par
517 {\cf21 #define GTEST_HAS_RTTI 1}\par
518 \par
519 {\cf21 #endif  }{\cf20 // _MSC_VER}\par
520 \par
521 {\cf21 #endif  }{\cf20 // GTEST_HAS_RTTI}\par
522 \par
523 {\cf20 // It's this header's responsibility to #include <typeinfo> when RTTI}\par
524 {\cf20 // is enabled.}\par
525 {\cf21 #if GTEST_HAS_RTTI}\par
526 {\cf21 #include <typeinfo>}\par
527 {\cf21 #endif}\par
528 \par
529 {\cf20 // Determines whether Google Test can use the pthreads library.}\par
530 {\cf21 #ifndef GTEST_HAS_PTHREAD}\par
531 {\cf20 // The user didn't tell us explicitly, so we make reasonable assumptions about}\par
532 {\cf20 // which platforms have pthreads support.}\par
533 {\cf20 //}\par
534 {\cf20 // To disable threading support in Google Test, add -DGTEST_HAS_PTHREAD=0}\par
535 {\cf20 // to your compiler flags.}\par
536 {\cf21 #define GTEST_HAS_PTHREAD                                                      \\}\par
537 {\cf21   (GTEST_OS_LINUX || GTEST_OS_MAC || GTEST_OS_HPUX || GTEST_OS_QNX ||          \\}\par
538 {\cf21    GTEST_OS_FREEBSD || GTEST_OS_NACL || GTEST_OS_NETBSD || GTEST_OS_FUCHSIA || \\}\par
539 {\cf21    GTEST_OS_DRAGONFLY || GTEST_OS_GNU_KFREEBSD || GTEST_OS_OPENBSD ||          \\}\par
540 {\cf21    GTEST_OS_HAIKU || GTEST_OS_GNU_HURD)}\par
541 {\cf21 #endif  }{\cf20 // GTEST_HAS_PTHREAD}\par
542 \par
543 {\cf21 #if GTEST_HAS_PTHREAD}\par
544 {\cf20 // gtest-port.h guarantees to #include <pthread.h> when GTEST_HAS_PTHREAD is}\par
545 {\cf20 // true.}\par
546 {\cf21 #include <pthread.h>}  {\cf20 // NOLINT}\par
547 \par
548 {\cf20 // For timespec and nanosleep, used below.}\par
549 {\cf21 #include <time.h>}  {\cf20 // NOLINT}\par
550 {\cf21 #endif}\par
551 \par
552 {\cf20 // Determines whether clone(2) is supported.}\par
553 {\cf20 // Usually it will only be available on Linux, excluding}\par
554 {\cf20 // Linux on the Itanium architecture.}\par
555 {\cf20 // Also see http://linux.die.net/man/2/clone.}\par
556 {\cf21 #ifndef GTEST_HAS_CLONE}\par
557 {\cf20 // The user didn't tell us, so we need to figure it out.}\par
558 \par
559 {\cf21 #if GTEST_OS_LINUX && !defined(__ia64__)}\par
560 {\cf21 #if GTEST_OS_LINUX_ANDROID}\par
561 {\cf20 // On Android, clone() became available at different API levels for each 32-bit}\par
562 {\cf20 // architecture.}\par
563 {\cf21 #if defined(__LP64__) || (defined(__arm__) && __ANDROID_API__ >= 9) || \\}\par
564 {\cf21     (defined(__mips__) && __ANDROID_API__ >= 12) ||                    \\}\par
565 {\cf21     (defined(__i386__) && __ANDROID_API__ >= 17)}\par
566 {\cf21 #define GTEST_HAS_CLONE 1}\par
567 {\cf21 #else}\par
568 {\cf21 #define GTEST_HAS_CLONE 0}\par
569 {\cf21 #endif}\par
570 {\cf21 #else}\par
571 {\cf21 #define GTEST_HAS_CLONE 1}\par
572 {\cf21 #endif}\par
573 {\cf21 #else}\par
574 {\cf21 #define GTEST_HAS_CLONE 0}\par
575 {\cf21 #endif  }{\cf20 // GTEST_OS_LINUX && !defined(__ia64__)}\par
576 \par
577 {\cf21 #endif  }{\cf20 // GTEST_HAS_CLONE}\par
578 \par
579 {\cf20 // Determines whether to support stream redirection. This is used to test}\par
580 {\cf20 // output correctness and to implement death tests.}\par
581 {\cf21 #ifndef GTEST_HAS_STREAM_REDIRECTION}\par
582 {\cf20 // By default, we assume that stream redirection is supported on all}\par
583 {\cf20 // platforms except known mobile / embedded ones.}\par
584 {\cf21 #if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_WINDOWS_PHONE ||          \\}\par
585 {\cf21     GTEST_OS_WINDOWS_RT || GTEST_OS_ESP8266 || GTEST_OS_XTENSA || \\}\par
586 {\cf21     GTEST_OS_QURT}\par
587 {\cf21 #define GTEST_HAS_STREAM_REDIRECTION 0}\par
588 {\cf21 #else}\par
589 {\cf21 #define GTEST_HAS_STREAM_REDIRECTION 1}\par
590 {\cf21 #endif  }{\cf20 // !GTEST_OS_WINDOWS_MOBILE}\par
591 {\cf21 #endif  }{\cf20 // GTEST_HAS_STREAM_REDIRECTION}\par
592 \par
593 {\cf20 // Determines whether to support death tests.}\par
594 {\cf20 // pops up a dialog window that cannot be suppressed programmatically.}\par
595 {\cf21 #if (GTEST_OS_LINUX || GTEST_OS_CYGWIN || GTEST_OS_SOLARIS ||             \\}\par
596 {\cf21      (GTEST_OS_MAC && !GTEST_OS_IOS) ||                                   \\}\par
597 {\cf21      (GTEST_OS_WINDOWS_DESKTOP && _MSC_VER) || GTEST_OS_WINDOWS_MINGW ||  \\}\par
598 {\cf21      GTEST_OS_AIX || GTEST_OS_HPUX || GTEST_OS_OPENBSD || GTEST_OS_QNX || \\}\par
599 {\cf21      GTEST_OS_FREEBSD || GTEST_OS_NETBSD || GTEST_OS_FUCHSIA ||           \\}\par
600 {\cf21      GTEST_OS_DRAGONFLY || GTEST_OS_GNU_KFREEBSD || GTEST_OS_HAIKU ||     \\}\par
601 {\cf21      GTEST_OS_GNU_HURD)}\par
602 {\cf21 #define GTEST_HAS_DEATH_TEST 1}\par
603 {\cf21 #endif}\par
604 \par
605 {\cf20 // Determines whether to support type-driven tests.}\par
606 \par
607 {\cf20 // Typed tests need <typeinfo> and variadic macros, which GCC, VC++ 8.0,}\par
608 {\cf20 // Sun Pro CC, IBM Visual Age, and HP aCC support.}\par
609 {\cf21 #if defined(__GNUC__) || defined(_MSC_VER) || defined(__SUNPRO_CC) || \\}\par
610 {\cf21     defined(__IBMCPP__) || defined(__HP_aCC)}\par
611 {\cf21 #define GTEST_HAS_TYPED_TEST 1}\par
612 {\cf21 #define GTEST_HAS_TYPED_TEST_P 1}\par
613 {\cf21 #endif}\par
614 \par
615 {\cf20 // Determines whether the system compiler uses UTF-16 for encoding wide strings.}\par
616 {\cf21 #define GTEST_WIDE_STRING_USES_UTF16_ \\}\par
617 {\cf21   (GTEST_OS_WINDOWS || GTEST_OS_CYGWIN || GTEST_OS_AIX || GTEST_OS_OS2)}\par
618 \par
619 {\cf20 // Determines whether test results can be streamed to a socket.}\par
620 {\cf21 #if GTEST_OS_LINUX || GTEST_OS_GNU_KFREEBSD || GTEST_OS_DRAGONFLY || \\}\par
621 {\cf21     GTEST_OS_FREEBSD || GTEST_OS_NETBSD || GTEST_OS_OPENBSD ||       \\}\par
622 {\cf21     GTEST_OS_GNU_HURD}\par
623 {\cf21 #define GTEST_CAN_STREAM_RESULTS_ 1}\par
624 {\cf21 #endif}\par
625 \par
626 {\cf20 // Defines some utility macros.}\par
627 \par
628 {\cf20 // The GNU compiler emits a warning if nested "if" statements are followed by}\par
629 {\cf20 // an "else" statement and braces are not used to explicitly disambiguate the}\par
630 {\cf20 // "else" binding.  This leads to problems with code like:}\par
631 {\cf20 //}\par
632 {\cf20 //   if (gate)}\par
633 {\cf20 //     ASSERT_*(condition) << "Some message";}\par
634 {\cf20 //}\par
635 {\cf20 // The "switch (0) case 0:" idiom is used to suppress this.}\par
636 {\cf21 #ifdef __INTEL_COMPILER}\par
637 {\cf21 #define GTEST_AMBIGUOUS_ELSE_BLOCKER_}\par
638 {\cf21 #else}\par
639 {\cf21 #define GTEST_AMBIGUOUS_ELSE_BLOCKER_ \\}\par
640 {\cf21   switch (0)                          \\}\par
641 {\cf21   case 0:                             \\}\par
642 {\cf21   default:  }{\cf20 // NOLINT}\par
643 {\cf21 #endif}\par
644 \par
645 {\cf20 // Use this annotation at the end of a struct/class definition to}\par
646 {\cf20 // prevent the compiler from optimizing away instances that are never}\par
647 {\cf20 // used.  This is useful when all interesting logic happens inside the}\par
648 {\cf20 // c'tor and / or d'tor.  Example:}\par
649 {\cf20 //}\par
650 {\cf20 //   struct Foo \{}\par
651 {\cf20 //     Foo() \{ ... \}}\par
652 {\cf20 //   \} GTEST_ATTRIBUTE_UNUSED_;}\par
653 {\cf20 //}\par
654 {\cf20 // Also use it after a variable or parameter declaration to tell the}\par
655 {\cf20 // compiler the variable/parameter does not have to be used.}\par
656 {\cf21 #if defined(__GNUC__) && !defined(COMPILER_ICC)}\par
657 {\cf21 #define GTEST_ATTRIBUTE_UNUSED_ __attribute__((unused))}\par
658 {\cf21 #elif defined(__clang__)}\par
659 {\cf21 #if __has_attribute(unused)}\par
660 {\cf21 #define GTEST_ATTRIBUTE_UNUSED_ __attribute__((unused))}\par
661 {\cf21 #endif}\par
662 {\cf21 #endif}\par
663 {\cf21 #ifndef GTEST_ATTRIBUTE_UNUSED_}\par
664 {\cf21 #define GTEST_ATTRIBUTE_UNUSED_}\par
665 {\cf21 #endif}\par
666 \par
667 {\cf20 // Use this annotation before a function that takes a printf format string.}\par
668 {\cf21 #if (defined(__GNUC__) || defined(__clang__)) && !defined(COMPILER_ICC)}\par
669 {\cf21 #if defined(__MINGW_PRINTF_FORMAT)}\par
670 {\cf20 // MinGW has two different printf implementations. Ensure the format macro}\par
671 {\cf20 // matches the selected implementation. See}\par
672 {\cf20 // https://sourceforge.net/p/mingw-w64/wiki2/gnu%20printf/.}\par
673 {\cf21 #define GTEST_ATTRIBUTE_PRINTF_(string_index, first_to_check) \\}\par
674 {\cf21   __attribute__((                                             \\}\par
675 {\cf21       __format__(__MINGW_PRINTF_FORMAT, string_index, first_to_check)))}\par
676 {\cf21 #else}\par
677 {\cf21 #define GTEST_ATTRIBUTE_PRINTF_(string_index, first_to_check) \\}\par
678 {\cf21   __attribute__((__format__(__printf__, string_index, first_to_check)))}\par
679 {\cf21 #endif}\par
680 {\cf21 #else}\par
681 {\cf21 #define GTEST_ATTRIBUTE_PRINTF_(string_index, first_to_check)}\par
682 {\cf21 #endif}\par
683 \par
684 {\cf20 // Tell the compiler to warn about unused return values for functions declared}\par
685 {\cf20 // with this macro.  The macro should be used on function declarations}\par
686 {\cf20 // following the argument list:}\par
687 {\cf20 //}\par
688 {\cf20 //   Sprocket* AllocateSprocket() GTEST_MUST_USE_RESULT_;}\par
689 {\cf21 #if defined(__GNUC__) && !defined(COMPILER_ICC)}\par
690 {\cf21 #define GTEST_MUST_USE_RESULT_ __attribute__((warn_unused_result))}\par
691 {\cf21 #else}\par
692 {\cf21 #define GTEST_MUST_USE_RESULT_}\par
693 {\cf21 #endif  }{\cf20 // __GNUC__ && !COMPILER_ICC}\par
694 \par
695 {\cf20 // MS C++ compiler emits warning when a conditional expression is compile time}\par
696 {\cf20 // constant. In some contexts this warning is false positive and needs to be}\par
697 {\cf20 // suppressed. Use the following two macros in such cases:}\par
698 {\cf20 //}\par
699 {\cf20 // GTEST_INTENTIONAL_CONST_COND_PUSH_()}\par
700 {\cf20 // while (true) \{}\par
701 {\cf20 // GTEST_INTENTIONAL_CONST_COND_POP_()}\par
702 {\cf20 // \}}\par
703 {\cf21 #define GTEST_INTENTIONAL_CONST_COND_PUSH_() \\}\par
704 {\cf21   GTEST_DISABLE_MSC_WARNINGS_PUSH_(4127)}\par
705 {\cf21 #define GTEST_INTENTIONAL_CONST_COND_POP_() GTEST_DISABLE_MSC_WARNINGS_POP_()}\par
706 \par
707 {\cf20 // Determine whether the compiler supports Microsoft's Structured Exception}\par
708 {\cf20 // Handling.  This is supported by several Windows compilers but generally}\par
709 {\cf20 // does not exist on any other system.}\par
710 {\cf21 #ifndef GTEST_HAS_SEH}\par
711 {\cf20 // The user didn't tell us, so we need to figure it out.}\par
712 \par
713 {\cf21 #if defined(_MSC_VER) || defined(__BORLANDC__)}\par
714 {\cf20 // These two compilers are known to support SEH.}\par
715 {\cf21 #define GTEST_HAS_SEH 1}\par
716 {\cf21 #else}\par
717 {\cf20 // Assume no SEH.}\par
718 {\cf21 #define GTEST_HAS_SEH 0}\par
719 {\cf21 #endif}\par
720 \par
721 {\cf21 #endif  }{\cf20 // GTEST_HAS_SEH}\par
722 \par
723 {\cf21 #ifndef GTEST_IS_THREADSAFE}\par
724 \par
725 {\cf21 #define GTEST_IS_THREADSAFE                                                 \\}\par
726 {\cf21   (GTEST_HAS_MUTEX_AND_THREAD_LOCAL_ ||                                     \\}\par
727 {\cf21    (GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT) || \\}\par
728 {\cf21    GTEST_HAS_PTHREAD)}\par
729 \par
730 {\cf21 #endif  }{\cf20 // GTEST_IS_THREADSAFE}\par
731 \par
732 {\cf21 #if GTEST_IS_THREADSAFE}\par
733 {\cf20 // Some platforms don't support including these threading related headers.}\par
734 {\cf21 #include <condition_variable>}  {\cf20 // NOLINT}\par
735 {\cf21 #include <mutex>}               {\cf20 // NOLINT}\par
736 {\cf21 #endif                         }{\cf20 // GTEST_IS_THREADSAFE}\par
737 \par
738 {\cf20 // GTEST_API_ qualifies all symbols that must be exported. The definitions below}\par
739 {\cf20 // are guarded by #ifndef to give embedders a chance to define GTEST_API_ in}\par
740 {\cf20 // gtest/internal/custom/gtest-port.h}\par
741 {\cf21 #ifndef GTEST_API_}\par
742 \par
743 {\cf21 #ifdef _MSC_VER}\par
744 {\cf21 #if GTEST_LINKED_AS_SHARED_LIBRARY}\par
745 {\cf21 #define GTEST_API_ __declspec(dllimport)}\par
746 {\cf21 #elif GTEST_CREATE_SHARED_LIBRARY}\par
747 {\cf21 #define GTEST_API_ __declspec(dllexport)}\par
748 {\cf21 #endif}\par
749 {\cf21 #elif __GNUC__ >= 4 || defined(__clang__)}\par
750 {\cf21 #define GTEST_API_ __attribute__((visibility("default"})))\par
751 {\cf21 #endif  }{\cf20 // _MSC_VER}\par
752 \par
753 {\cf21 #endif  }{\cf20 // GTEST_API_}\par
754 \par
755 {\cf21 #ifndef GTEST_API_}\par
756 {\cf21 #define GTEST_API_}\par
757 {\cf21 #endif  }{\cf20 // GTEST_API_}\par
758 \par
759 {\cf21 #ifndef GTEST_DEFAULT_DEATH_TEST_STYLE}\par
760 {\cf21 #define GTEST_DEFAULT_DEATH_TEST_STYLE "fast"}\par
761 {\cf21 #endif  }{\cf20 // GTEST_DEFAULT_DEATH_TEST_STYLE}\par
762 \par
763 {\cf21 #ifdef __GNUC__}\par
764 {\cf20 // Ask the compiler to never inline a given function.}\par
765 {\cf21 #define GTEST_NO_INLINE_ __attribute__((noinline))}\par
766 {\cf21 #else}\par
767 {\cf21 #define GTEST_NO_INLINE_}\par
768 {\cf21 #endif}\par
769 \par
770 {\cf21 #if defined(__clang__)}\par
771 {\cf20 // Nested ifs to avoid triggering MSVC warning.}\par
772 {\cf21 #if __has_attribute(disable_tail_calls)}\par
773 {\cf20 // Ask the compiler not to perform tail call optimization inside}\par
774 {\cf20 // the marked function.}\par
775 {\cf21 #define GTEST_NO_TAIL_CALL_ __attribute__((disable_tail_calls))}\par
776 {\cf21 #endif}\par
777 {\cf21 #elif __GNUC__}\par
778 {\cf21 #define GTEST_NO_TAIL_CALL_ \\}\par
779 {\cf21   __attribute__((optimize("no-optimize-sibling-calls"})))\par
780 {\cf21 #else}\par
781 {\cf21 #define GTEST_NO_TAIL_CALL_}\par
782 {\cf21 #endif}\par
783 \par
784 {\cf20 // _LIBCPP_VERSION is defined by the libc++ library from the LLVM project.}\par
785 {\cf21 #if !defined(GTEST_HAS_CXXABI_H_)}\par
786 {\cf21 #if defined(__GLIBCXX__) || (defined(_LIBCPP_VERSION) && !defined(_MSC_VER))}\par
787 {\cf21 #define GTEST_HAS_CXXABI_H_ 1}\par
788 {\cf21 #else}\par
789 {\cf21 #define GTEST_HAS_CXXABI_H_ 0}\par
790 {\cf21 #endif}\par
791 {\cf21 #endif}\par
792 \par
793 {\cf20 // A function level attribute to disable checking for use of uninitialized}\par
794 {\cf20 // memory when built with MemorySanitizer.}\par
795 {\cf21 #if defined(__clang__)}\par
796 {\cf21 #if __has_feature(memory_sanitizer)}\par
797 {\cf21 #define GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_ __attribute__((no_sanitize_memory))}\par
798 {\cf21 #else}\par
799 {\cf21 #define GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_}\par
800 {\cf21 #endif  }{\cf20 // __has_feature(memory_sanitizer)}\par
801 {\cf21 #else}\par
802 {\cf21 #define GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_}\par
803 {\cf21 #endif  }{\cf20 // __clang__}\par
804 \par
805 {\cf20 // A function level attribute to disable AddressSanitizer instrumentation.}\par
806 {\cf21 #if defined(__clang__)}\par
807 {\cf21 #if __has_feature(address_sanitizer)}\par
808 {\cf21 #define GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_ \\}\par
809 {\cf21   __attribute__((no_sanitize_address))}\par
810 {\cf21 #else}\par
811 {\cf21 #define GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_}\par
812 {\cf21 #endif  }{\cf20 // __has_feature(address_sanitizer)}\par
813 {\cf21 #else}\par
814 {\cf21 #define GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_}\par
815 {\cf21 #endif  }{\cf20 // __clang__}\par
816 \par
817 {\cf20 // A function level attribute to disable HWAddressSanitizer instrumentation.}\par
818 {\cf21 #if defined(__clang__)}\par
819 {\cf21 #if __has_feature(hwaddress_sanitizer)}\par
820 {\cf21 #define GTEST_ATTRIBUTE_NO_SANITIZE_HWADDRESS_ \\}\par
821 {\cf21   __attribute__((no_sanitize("hwaddress"})))\par
822 {\cf21 #else}\par
823 {\cf21 #define GTEST_ATTRIBUTE_NO_SANITIZE_HWADDRESS_}\par
824 {\cf21 #endif  }{\cf20 // __has_feature(hwaddress_sanitizer)}\par
825 {\cf21 #else}\par
826 {\cf21 #define GTEST_ATTRIBUTE_NO_SANITIZE_HWADDRESS_}\par
827 {\cf21 #endif  }{\cf20 // __clang__}\par
828 \par
829 {\cf20 // A function level attribute to disable ThreadSanitizer instrumentation.}\par
830 {\cf21 #if defined(__clang__)}\par
831 {\cf21 #if __has_feature(thread_sanitizer)}\par
832 {\cf21 #define GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_ __attribute__((no_sanitize_thread))}\par
833 {\cf21 #else}\par
834 {\cf21 #define GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_}\par
835 {\cf21 #endif  }{\cf20 // __has_feature(thread_sanitizer)}\par
836 {\cf21 #else}\par
837 {\cf21 #define GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_}\par
838 {\cf21 #endif  }{\cf20 // __clang__}\par
839 \par
840 {\cf17 namespace }testing \{\par
841 \par
842 {\cf17 class }Message;\par
843 \par
844 {\cf20 // Legacy imports for backwards compatibility.}\par
845 {\cf20 // New code should use std:: names directly.}\par
846 {\cf17 using }std::get;\par
847 {\cf17 using }std::make_tuple;\par
848 {\cf17 using }std::tuple;\par
849 {\cf17 using }std::tuple_element;\par
850 {\cf17 using }std::tuple_size;\par
851 \par
852 {\cf17 namespace }internal \{\par
853 \par
854 {\cf20 // A secret type that Google Test users don't know about.  It has no}\par
855 {\cf20 // definition on purpose.  Therefore it's impossible to create a}\par
856 {\cf20 // Secret object, which is what we want.}\par
857 {\cf17 class }Secret;\par
858 \par
859 {\cf20 // A helper for suppressing warnings on constant condition.  It just}\par
860 {\cf20 // returns 'condition'.}\par
861 GTEST_API_ {\cf18 bool} IsTrue({\cf18 bool} condition);\par
862 \par
863 {\cf20 // Defines RE.}\par
864 \par
865 {\cf21 #if GTEST_USES_RE2}\par
866 \par
867 {\cf20 // This is almost `using RE = ::RE2`, except it is copy-constructible, and it}\par
868 {\cf20 // needs to disambiguate the `std::string`, `absl::string_view`, and `const}\par
869 {\cf20 // char*` constructors.}\par
870 {\cf17 class }GTEST_API_ RE \{\par
871  {\cf17 public}:\par
872   RE(absl::string_view regex) : regex_(regex) \{\}                  {\cf20 // NOLINT}\par
873   RE({\cf17 const} {\cf18 char}* regex) : RE(absl::string_view(regex)) \{\}         {\cf20 // NOLINT}\par
874   RE({\cf17 const} std::string& regex) : RE(absl::string_view(regex)) \{\}  {\cf20 // NOLINT}\par
875   RE({\cf17 const} RE& other) : RE(other.pattern()) \{\}\par
876 \par
877   {\cf17 const} std::string& pattern(){\cf17  const }\{ {\cf19 return} regex_.pattern(); \}\par
878 \par
879   {\cf17 static} {\cf18 bool} FullMatch(absl::string_view str, {\cf17 const} RE& re) \{\par
880     {\cf19 return} RE2::FullMatch(str, re.regex_);\par
881   \}\par
882   {\cf17 static} {\cf18 bool} PartialMatch(absl::string_view str, {\cf17 const} RE& re) \{\par
883     {\cf19 return} RE2::PartialMatch(str, re.regex_);\par
884   \}\par
885 \par
886  {\cf17 private}:\par
887   RE2 regex_;\par
888 \};\par
889 \par
890 {\cf21 #elif GTEST_USES_POSIX_RE || GTEST_USES_SIMPLE_RE}\par
891 \par
892 {\cf20 // A simple C++ wrapper for <regex.h>.  It uses the POSIX Extended}\par
893 {\cf20 // Regular Expression syntax.}\par
894 {\cf17 class }GTEST_API_ RE \{\par
895  {\cf17 public}:\par
896   {\cf20 // A copy constructor is required by the Standard to initialize object}\par
897   {\cf20 // references from r-values.}\par
898   RE({\cf17 const} RE& other) \{ Init(other.pattern()); \}\par
899 \par
900   {\cf20 // Constructs an RE from a string.}\par
901   RE(const ::std::string& regex) \{ Init(regex.c_str()); \}  {\cf20 // NOLINT}\par
902 \par
903   RE({\cf17 const} {\cf18 char}* regex) \{ Init(regex); \}  {\cf20 // NOLINT}\par
904   ~RE();\par
905 \par
906   {\cf20 // Returns the string representation of the regex.}\par
907   {\cf17 const} {\cf18 char}* pattern(){\cf17  const }\{ {\cf19 return} pattern_; \}\par
908 \par
909   {\cf20 // FullMatch(str, re) returns true if and only if regular expression re}\par
910   {\cf20 // matches the entire str.}\par
911   {\cf20 // PartialMatch(str, re) returns true if and only if regular expression re}\par
912   {\cf20 // matches a substring of str (including str itself).}\par
913   {\cf17 static} {\cf18 bool} FullMatch(const ::std::string& str, {\cf17 const} RE& re) \{\par
914     {\cf19 return} FullMatch(str.c_str(), re);\par
915   \}\par
916   {\cf17 static} {\cf18 bool} PartialMatch(const ::std::string& str, {\cf17 const} RE& re) \{\par
917     {\cf19 return} PartialMatch(str.c_str(), re);\par
918   \}\par
919 \par
920   {\cf17 static} {\cf18 bool} FullMatch({\cf17 const} {\cf18 char}* str, {\cf17 const} RE& re);\par
921   {\cf17 static} {\cf18 bool} PartialMatch({\cf17 const} {\cf18 char}* str, {\cf17 const} RE& re);\par
922 \par
923  {\cf17 private}:\par
924   {\cf18 void} Init({\cf17 const} {\cf18 char}* regex);\par
925   {\cf17 const} {\cf18 char}* pattern_;\par
926   {\cf18 bool} is_valid_;\par
927 \par
928 {\cf21 #if GTEST_USES_POSIX_RE}\par
929 \par
930   regex_t full_regex_;     {\cf20 // For FullMatch().}\par
931   regex_t partial_regex_;  {\cf20 // For PartialMatch().}\par
932 \par
933 {\cf21 #else  }{\cf20 // GTEST_USES_SIMPLE_RE}\par
934 \par
935   {\cf17 const} {\cf18 char}* full_pattern_;  {\cf20 // For FullMatch();}\par
936 \par
937 {\cf21 #endif}\par
938 \};\par
939 \par
940 {\cf21 #endif  }{\cf20 // ::testing::internal::RE implementation}\par
941 \par
942 {\cf20 // Formats a source file path and a line number as they would appear}\par
943 {\cf20 // in an error message from the compiler used to compile this code.}\par
944 GTEST_API_ ::std::string FormatFileLocation({\cf17 const} {\cf18 char}* file, {\cf18 int} line);\par
945 \par
946 {\cf20 // Formats a file location for compiler-independent XML output.}\par
947 {\cf20 // Although this function is not platform dependent, we put it next to}\par
948 {\cf20 // FormatFileLocation in order to contrast the two functions.}\par
949 GTEST_API_ ::std::string FormatCompilerIndependentFileLocation({\cf17 const} {\cf18 char}* file,\par
950                                                                {\cf18 int} line);\par
951 \par
952 {\cf20 // Defines logging utilities:}\par
953 {\cf20 //   GTEST_LOG_(severity) - logs messages at the specified severity level. The}\par
954 {\cf20 //                          message itself is streamed into the macro.}\par
955 {\cf20 //   LogToStderr()  - directs all log messages to stderr.}\par
956 {\cf20 //   FlushInfoLog() - flushes informational log messages.}\par
957 \par
958 {\cf17 enum} GTestLogSeverity \{ GTEST_INFO, GTEST_WARNING, GTEST_ERROR, GTEST_FATAL \};\par
959 \par
960 {\cf20 // Formats log entry severity, provides a stream object for streaming the}\par
961 {\cf20 // log message, and terminates the message with a newline when going out of}\par
962 {\cf20 // scope.}\par
963 {\cf17 class }GTEST_API_ GTestLog \{\par
964  {\cf17 public}:\par
965   GTestLog(GTestLogSeverity severity, {\cf17 const} {\cf18 char}* file, {\cf18 int} line);\par
966 \par
967   {\cf20 // Flushes the buffers and, if severity is GTEST_FATAL, aborts the program.}\par
968   ~GTestLog();\par
969 \par
970   ::std::ostream& GetStream() \{ return ::std::cerr; \}\par
971 \par
972  {\cf17 private}:\par
973   {\cf17 const} GTestLogSeverity severity_;\par
974 \par
975   GTestLog({\cf17 const} GTestLog&) = {\cf17 delete};\par
976   GTestLog& operator=({\cf17 const} GTestLog&) = {\cf17 delete};\par
977 \};\par
978 \par
979 {\cf21 #if !defined(GTEST_LOG_)}\par
980 \par
981 {\cf21 #define GTEST_LOG_(severity)                                           \\}\par
982 {\cf21   ::testing::internal::GTestLog(::testing::internal::GTEST_##severity, \\}\par
983 {\cf21                                 __FILE__, __LINE__)                    \\}\par
984 {\cf21       .GetStream()}\par
985 \par
986 {\cf17 inline} {\cf18 void} LogToStderr() \{\}\par
987 {\cf17 inline} {\cf18 void} FlushInfoLog() \{ fflush({\cf17 nullptr}); \}\par
988 \par
989 {\cf21 #endif  }{\cf20 // !defined(GTEST_LOG_)}\par
990 \par
991 {\cf21 #if !defined(GTEST_CHECK_)}\par
992 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE.}\par
993 {\cf20 //}\par
994 {\cf20 // GTEST_CHECK_ is an all-mode assert. It aborts the program if the condition}\par
995 {\cf20 // is not satisfied.}\par
996 {\cf20 //  Synopsis:}\par
997 {\cf20 //    GTEST_CHECK_(boolean_condition);}\par
998 {\cf20 //     or}\par
999 {\cf20 //    GTEST_CHECK_(boolean_condition) << "Additional message";}\par
1000 {\cf20 //}\par
1001 {\cf20 //    This checks the condition and if the condition is not satisfied}\par
1002 {\cf20 //    it prints message about the condition violation, including the}\par
1003 {\cf20 //    condition itself, plus additional message streamed into it, if any,}\par
1004 {\cf20 //    and then it aborts the program. It aborts the program irrespective of}\par
1005 {\cf20 //    whether it is built in the debug mode or not.}\par
1006 {\cf21 #define GTEST_CHECK_(condition)               \\}\par
1007 {\cf21   GTEST_AMBIGUOUS_ELSE_BLOCKER_               \\}\par
1008 {\cf21   if (::testing::internal::IsTrue(condition)) \\}\par
1009 {\cf21     ;                                         \\}\par
1010 {\cf21   else                                        \\}\par
1011 {\cf21     GTEST_LOG_(FATAL) << "Condition "} #condition " failed. "\par
1012 {\cf21 #endif  }{\cf20 // !defined(GTEST_CHECK_)}\par
1013 \par
1014 {\cf20 // An all-mode assert to verify that the given POSIX-style function}\par
1015 {\cf20 // call returns 0 (indicating success).  Known limitation: this}\par
1016 {\cf20 // doesn't expand to a balanced 'if' statement, so enclose the macro}\par
1017 {\cf20 // in \{\} if you need to use it as the only statement in an 'if'}\par
1018 {\cf20 // branch.}\par
1019 {\cf21 #define GTEST_CHECK_POSIX_SUCCESS_(posix_call) \\}\par
1020 {\cf21   if (const int gtest_error = (posix_call))    \\}\par
1021 {\cf21   GTEST_LOG_(FATAL) << #posix_call << "failed with error "} << gtest_error\par
1022 \par
1023 {\cf20 // Transforms "T" into "const T&" according to standard reference collapsing}\par
1024 {\cf20 // rules (this is only needed as a backport for C++98 compilers that do not}\par
1025 {\cf20 // support reference collapsing). Specifically, it transforms:}\par
1026 {\cf20 //}\par
1027 {\cf20 //   char         ==> const char&}\par
1028 {\cf20 //   const char   ==> const char&}\par
1029 {\cf20 //   char&        ==> char&}\par
1030 {\cf20 //   const char&  ==> const char&}\par
1031 {\cf20 //}\par
1032 {\cf20 // Note that the non-const reference will not have "const" added. This is}\par
1033 {\cf20 // standard, and necessary so that "T" can always bind to "const T&".}\par
1034 {\cf17 template} <{\cf17 typename} T>\par
1035 {\cf17 struct }ConstRef \{\par
1036   {\cf17 typedef} {\cf17 const} T& type;\par
1037 \};\par
1038 {\cf17 template} <{\cf17 typename} T>\par
1039 {\cf17 struct }ConstRef<T&> \{\par
1040   {\cf17 typedef} T& type;\par
1041 \};\par
1042 \par
1043 {\cf20 // The argument T must depend on some template parameters.}\par
1044 {\cf21 #define GTEST_REFERENCE_TO_CONST_(T) \\}\par
1045 {\cf21   typename ::testing::internal::ConstRef<T>::type}\par
1046 \par
1047 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.}\par
1048 {\cf20 //}\par
1049 {\cf20 // Use ImplicitCast_ as a safe version of static_cast for upcasting in}\par
1050 {\cf20 // the type hierarchy (e.g. casting a Foo* to a SuperclassOfFoo* or a}\par
1051 {\cf20 // const Foo*).  When you use ImplicitCast_, the compiler checks that}\par
1052 {\cf20 // the cast is safe.  Such explicit ImplicitCast_s are necessary in}\par
1053 {\cf20 // surprisingly many situations where C++ demands an exact type match}\par
1054 {\cf20 // instead of an argument type convertible to a target type.}\par
1055 {\cf20 //}\par
1056 {\cf20 // The syntax for using ImplicitCast_ is the same as for static_cast:}\par
1057 {\cf20 //}\par
1058 {\cf20 //   ImplicitCast_<ToType>(expr)}\par
1059 {\cf20 //}\par
1060 {\cf20 // ImplicitCast_ would have been part of the C++ standard library,}\par
1061 {\cf20 // but the proposal was submitted too late.  It will probably make}\par
1062 {\cf20 // its way into the language in the future.}\par
1063 {\cf20 //}\par
1064 {\cf20 // This relatively ugly name is intentional. It prevents clashes with}\par
1065 {\cf20 // similar functions users may have (e.g., implicit_cast). The internal}\par
1066 {\cf20 // namespace alone is not enough because the function can be found by ADL.}\par
1067 {\cf17 template} <{\cf17 typename} To>\par
1068 {\cf17 inline} To ImplicitCast_(To x) \{\par
1069   {\cf19 return} x;\par
1070 \}\par
1071 \par
1072 {\cf20 // When you upcast (that is, cast a pointer from type Foo to type}\par
1073 {\cf20 // SuperclassOfFoo), it's fine to use ImplicitCast_<>, since upcasts}\par
1074 {\cf20 // always succeed.  When you downcast (that is, cast a pointer from}\par
1075 {\cf20 // type Foo to type SubclassOfFoo), static_cast<> isn't safe, because}\par
1076 {\cf20 // how do you know the pointer is really of type SubclassOfFoo?  It}\par
1077 {\cf20 // could be a bare Foo, or of type DifferentSubclassOfFoo.  Thus,}\par
1078 {\cf20 // when you downcast, you should use this macro.  In debug mode, we}\par
1079 {\cf20 // use dynamic_cast<> to double-check the downcast is legal (we die}\par
1080 {\cf20 // if it's not).  In normal mode, we do the efficient static_cast<>}\par
1081 {\cf20 // instead.  Thus, it's important to test in debug mode to make sure}\par
1082 {\cf20 // the cast is legal!}\par
1083 {\cf20 //    This is the only place in the code we should use dynamic_cast<>.}\par
1084 {\cf20 // In particular, you SHOULDN'T be using dynamic_cast<> in order to}\par
1085 {\cf20 // do RTTI (eg code like this:}\par
1086 {\cf20 //    if (dynamic_cast<Subclass1>(foo)) HandleASubclass1Object(foo);}\par
1087 {\cf20 //    if (dynamic_cast<Subclass2>(foo)) HandleASubclass2Object(foo);}\par
1088 {\cf20 // You should design the code some other way not to need this.}\par
1089 {\cf20 //}\par
1090 {\cf20 // This relatively ugly name is intentional. It prevents clashes with}\par
1091 {\cf20 // similar functions users may have (e.g., down_cast). The internal}\par
1092 {\cf20 // namespace alone is not enough because the function can be found by ADL.}\par
1093 {\cf17 template} <{\cf17 typename} To, {\cf17 typename} From>  {\cf20 // use like this: DownCast_<T*>(foo);}\par
1094 {\cf17 inline} To DownCast_(From* f) \{         {\cf20 // so we only accept pointers}\par
1095   {\cf20 // Ensures that To is a sub-type of From *.  This test is here only}\par
1096   {\cf20 // for compile-time type checking, and has no overhead in an}\par
1097   {\cf20 // optimized build at run-time, as it will be optimized away}\par
1098   {\cf20 // completely.}\par
1099   GTEST_INTENTIONAL_CONST_COND_PUSH_()\par
1100   if (false) \{\par
1101     GTEST_INTENTIONAL_CONST_COND_POP_()\par
1102     const To to = {\cf18 nullptr};\par
1103     ::testing::internal::ImplicitCast_<From*>(to);\par
1104   \}\par
1105 \par
1106 {\cf21 #if GTEST_HAS_RTTI}\par
1107   {\cf20 // RTTI: debug mode only!}\par
1108   GTEST_CHECK_(f == {\cf17 nullptr} || {\cf17 dynamic_cast<}To{\cf17 >}(f) != {\cf17 nullptr});\par
1109 {\cf21 #endif}\par
1110   {\cf19 return} {\cf17 static_cast<}To{\cf17 >}(f);\par
1111 \}\par
1112 \par
1113 {\cf20 // Downcasts the pointer of type Base to Derived.}\par
1114 {\cf20 // Derived must be a subclass of Base. The parameter MUST}\par
1115 {\cf20 // point to a class of type Derived, not any subclass of it.}\par
1116 {\cf20 // When RTTI is available, the function performs a runtime}\par
1117 {\cf20 // check to enforce this.}\par
1118 {\cf17 template} <{\cf17 class} Derived, {\cf17 class} Base>\par
1119 Derived* CheckedDowncastToActualType(Base* base) \{\par
1120 {\cf21 #if GTEST_HAS_RTTI}\par
1121   GTEST_CHECK_({\cf17 typeid}(*base) == {\cf17 typeid}(Derived));\par
1122 {\cf21 #endif}\par
1123 \par
1124 {\cf21 #if GTEST_HAS_DOWNCAST_}\par
1125   return ::down_cast<Derived*>(base);\par
1126 {\cf21 #elif GTEST_HAS_RTTI}\par
1127   {\cf19 return} {\cf17 dynamic_cast<}Derived*{\cf17 >}(base);  {\cf20 // NOLINT}\par
1128 {\cf21 #else}\par
1129   {\cf19 return} {\cf17 static_cast<}Derived*{\cf17 >}(base);  {\cf20 // Poor man's downcast.}\par
1130 {\cf21 #endif}\par
1131 \}\par
1132 \par
1133 {\cf21 #if GTEST_HAS_STREAM_REDIRECTION}\par
1134 \par
1135 {\cf20 // Defines the stderr capturer:}\par
1136 {\cf20 //   CaptureStdout     - starts capturing stdout.}\par
1137 {\cf20 //   GetCapturedStdout - stops capturing stdout and returns the captured string.}\par
1138 {\cf20 //   CaptureStderr     - starts capturing stderr.}\par
1139 {\cf20 //   GetCapturedStderr - stops capturing stderr and returns the captured string.}\par
1140 {\cf20 //}\par
1141 GTEST_API_ {\cf18 void} CaptureStdout();\par
1142 GTEST_API_ std::string GetCapturedStdout();\par
1143 GTEST_API_ {\cf18 void} CaptureStderr();\par
1144 GTEST_API_ std::string GetCapturedStderr();\par
1145 \par
1146 {\cf21 #endif  }{\cf20 // GTEST_HAS_STREAM_REDIRECTION}\par
1147 {\cf20 // Returns the size (in bytes) of a file.}\par
1148 GTEST_API_ {\cf18 size_t} GetFileSize(FILE* file);\par
1149 \par
1150 {\cf20 // Reads the entire content of a file as a string.}\par
1151 GTEST_API_ std::string ReadEntireFile(FILE* file);\par
1152 \par
1153 {\cf20 // All command line arguments.}\par
1154 GTEST_API_ std::vector<std::string> GetArgvs();\par
1155 \par
1156 {\cf21 #if GTEST_HAS_DEATH_TEST}\par
1157 \par
1158 std::vector<std::string> GetInjectableArgvs();\par
1159 {\cf20 // Deprecated: pass the args vector by value instead.}\par
1160 {\cf18 void} SetInjectableArgvs({\cf17 const} std::vector<std::string>* new_argvs);\par
1161 {\cf18 void} SetInjectableArgvs({\cf17 const} std::vector<std::string>& new_argvs);\par
1162 {\cf18 void} ClearInjectableArgvs();\par
1163 \par
1164 {\cf21 #endif  }{\cf20 // GTEST_HAS_DEATH_TEST}\par
1165 \par
1166 {\cf20 // Defines synchronization primitives.}\par
1167 {\cf21 #if GTEST_IS_THREADSAFE}\par
1168 \par
1169 {\cf21 #if GTEST_OS_WINDOWS}\par
1170 {\cf20 // Provides leak-safe Windows kernel handle ownership.}\par
1171 {\cf20 // Used in death tests and in threading support.}\par
1172 {\cf17 class }GTEST_API_ AutoHandle \{\par
1173  {\cf17 public}:\par
1174   {\cf20 // Assume that Win32 HANDLE type is equivalent to void*. Doing so allows us to}\par
1175   {\cf20 // avoid including <windows.h> in this header file. Including <windows.h> is}\par
1176   {\cf20 // undesirable because it defines a lot of symbols and macros that tend to}\par
1177   {\cf20 // conflict with client code. This assumption is verified by}\par
1178   {\cf20 // WindowsTypesTest.HANDLEIsVoidStar.}\par
1179   {\cf17 typedef} {\cf18 void}* Handle;\par
1180   AutoHandle();\par
1181   {\cf17 explicit} AutoHandle(Handle handle);\par
1182 \par
1183   ~AutoHandle();\par
1184 \par
1185   Handle Get() {\cf17 const};\par
1186   {\cf18 void} Reset();\par
1187   {\cf18 void} Reset(Handle handle);\par
1188 \par
1189  {\cf17 private}:\par
1190   {\cf20 // Returns true if and only if the handle is a valid handle object that can be}\par
1191   {\cf20 // closed.}\par
1192   {\cf18 bool} IsCloseable() {\cf17 const};\par
1193 \par
1194   Handle handle_;\par
1195 \par
1196   AutoHandle({\cf17 const} AutoHandle&) = {\cf17 delete};\par
1197   AutoHandle& operator=({\cf17 const} AutoHandle&) = {\cf17 delete};\par
1198 \};\par
1199 {\cf21 #endif}\par
1200 \par
1201 {\cf21 #if GTEST_HAS_NOTIFICATION_}\par
1202 {\cf20 // Notification has already been imported into the namespace.}\par
1203 {\cf20 // Nothing to do here.}\par
1204 \par
1205 {\cf21 #else}\par
1206 GTEST_DISABLE_MSC_WARNINGS_PUSH_(4251 \\\par
1207 {\cf20 /* class A needs to have dll-interface to be used by clients of class B */})\par
1208 \par
1209 {\cf20 // Allows a controller thread to pause execution of newly created}\par
1210 {\cf20 // threads until notified.  Instances of this class must be created}\par
1211 {\cf20 // and destroyed in the controller thread.}\par
1212 {\cf20 //}\par
1213 {\cf20 // This class is only for testing Google Test's own constructs. Do not}\par
1214 {\cf20 // use it in user tests, either directly or indirectly.}\par
1215 {\cf20 // TODO(b/203539622): Replace unconditionally with absl::Notification.}\par
1216 class GTEST_API_ Notification \{\par
1217  {\cf17 public}:\par
1218   Notification() : notified_(false) \{\}\par
1219   Notification({\cf17 const} Notification&) = {\cf17 delete};\par
1220   Notification& operator=({\cf17 const} Notification&) = {\cf17 delete};\par
1221 \par
1222   {\cf20 // Notifies all threads created with this notification to start. Must}\par
1223   {\cf20 // be called from the controller thread.}\par
1224   {\cf18 void} Notify() \{\par
1225     std::lock_guard<std::mutex> lock(mu_);\par
1226     notified_ = {\cf17 true};\par
1227     cv_.notify_all();\par
1228   \}\par
1229 \par
1230   {\cf20 // Blocks until the controller thread notifies. Must be called from a test}\par
1231   {\cf20 // thread.}\par
1232   {\cf18 void} WaitForNotification() \{\par
1233     std::unique_lock<std::mutex> lock(mu_);\par
1234     cv_.wait(lock, [{\cf17 this}]() \{ {\cf19 return} notified_; \});\par
1235   \}\par
1236 \par
1237  {\cf17 private}:\par
1238   std::mutex mu_;\par
1239   std::condition_variable cv_;\par
1240   {\cf18 bool} notified_;\par
1241 \};\par
1242 GTEST_DISABLE_MSC_WARNINGS_POP_()  {\cf20 // 4251}\par
1243 {\cf21 #endif  }{\cf20 // GTEST_HAS_NOTIFICATION_}\par
1244 \par
1245 {\cf20 // On MinGW, we can have both GTEST_OS_WINDOWS and GTEST_HAS_PTHREAD}\par
1246 {\cf20 // defined, but we don't want to use MinGW's pthreads implementation, which}\par
1247 {\cf20 // has conformance problems with some versions of the POSIX standard.}\par
1248 {\cf21 #if GTEST_HAS_PTHREAD && !GTEST_OS_WINDOWS_MINGW}\par
1249 \par
1250 {\cf20 // As a C-function, ThreadFuncWithCLinkage cannot be templated itself.}\par
1251 {\cf20 // Consequently, it cannot select a correct instantiation of ThreadWithParam}\par
1252 {\cf20 // in order to call its Run(). Introducing ThreadWithParamBase as a}\par
1253 {\cf20 // non-templated base class for ThreadWithParam allows us to bypass this}\par
1254 {\cf20 // problem.}\par
1255 {\cf17 class }ThreadWithParamBase \{\par
1256  {\cf17 public}:\par
1257   {\cf17 virtual} ~ThreadWithParamBase() \{\}\par
1258   {\cf17 virtual} {\cf18 void} Run() = 0;\par
1259 \};\par
1260 \par
1261 {\cf20 // pthread_create() accepts a pointer to a function type with the C linkage.}\par
1262 {\cf20 // According to the Standard (7.5/1), function types with different linkages}\par
1263 {\cf20 // are different even if they are otherwise identical.  Some compilers (for}\par
1264 {\cf20 // example, SunStudio) treat them as different types.  Since class methods}\par
1265 {\cf20 // cannot be defined with C-linkage we need to define a free C-function to}\par
1266 {\cf20 // pass into pthread_create().}\par
1267 {\cf17 extern} {\cf22 "C"} {\cf17 inline} {\cf18 void}* ThreadFuncWithCLinkage({\cf18 void}* thread) \{\par
1268   {\cf17 static_cast<}ThreadWithParamBase*{\cf17 >}(thread)->Run();\par
1269   {\cf19 return} {\cf17 nullptr};\par
1270 \}\par
1271 \par
1272 {\cf20 // Helper class for testing Google Test's multi-threading constructs.}\par
1273 {\cf20 // To use it, write:}\par
1274 {\cf20 //}\par
1275 {\cf20 //   void ThreadFunc(int param) \{ /* Do things with param */ \}}\par
1276 {\cf20 //   Notification thread_can_start;}\par
1277 {\cf20 //   ...}\par
1278 {\cf20 //   // The thread_can_start parameter is optional; you can supply NULL.}\par
1279 {\cf20 //   ThreadWithParam<int> thread(&ThreadFunc, 5, &thread_can_start);}\par
1280 {\cf20 //   thread_can_start.Notify();}\par
1281 {\cf20 //}\par
1282 {\cf20 // These classes are only for testing Google Test's own constructs. Do}\par
1283 {\cf20 // not use them in user tests, either directly or indirectly.}\par
1284 {\cf17 template} <{\cf17 typename} T>\par
1285 {\cf17 class }ThreadWithParam : {\cf17 public} ThreadWithParamBase \{\par
1286  {\cf17 public}:\par
1287   {\cf17 typedef} {\cf18 void} UserThreadFunc(T);\par
1288 \par
1289   ThreadWithParam(UserThreadFunc* func, T param, Notification* thread_can_start)\par
1290       : func_(func),\par
1291         param_(param),\par
1292         thread_can_start_(thread_can_start),\par
1293         finished_(false) \{\par
1294     ThreadWithParamBase* {\cf17 const} base = {\cf17 this};\par
1295     {\cf20 // The thread can be created only after all fields except thread_}\par
1296     {\cf20 // have been initialized.}\par
1297     GTEST_CHECK_POSIX_SUCCESS_(\par
1298         pthread_create(&thread_, {\cf17 nullptr}, &ThreadFuncWithCLinkage, base));\par
1299   \}\par
1300   ~ThreadWithParam(){\cf17  override }\{ Join(); \}\par
1301 \par
1302   {\cf18 void} Join() \{\par
1303     {\cf19 if} (!finished_) \{\par
1304       GTEST_CHECK_POSIX_SUCCESS_(pthread_join(thread_, {\cf17 nullptr}));\par
1305       finished_ = {\cf17 true};\par
1306     \}\par
1307   \}\par
1308 \par
1309   {\cf18 void} Run(){\cf17  override }\{\par
1310     {\cf19 if} (thread_can_start_ != {\cf17 nullptr}) thread_can_start_->WaitForNotification();\par
1311     func_(param_);\par
1312   \}\par
1313 \par
1314  {\cf17 private}:\par
1315   UserThreadFunc* {\cf17 const} func_;  {\cf20 // User-supplied thread function.}\par
1316   {\cf17 const} T param_;  {\cf20 // User-supplied parameter to the thread function.}\par
1317   {\cf20 // When non-NULL, used to block execution until the controller thread}\par
1318   {\cf20 // notifies.}\par
1319   Notification* {\cf17 const} thread_can_start_;\par
1320   {\cf18 bool} finished_;  {\cf20 // true if and only if we know that the thread function has}\par
1321                    {\cf20 // finished.}\par
1322   pthread_t thread_;  {\cf20 // The native thread object.}\par
1323 \par
1324   ThreadWithParam({\cf17 const} ThreadWithParam&) = {\cf17 delete};\par
1325   ThreadWithParam& operator=({\cf17 const} ThreadWithParam&) = {\cf17 delete};\par
1326 \};\par
1327 {\cf21 #endif  }{\cf20 // !GTEST_OS_WINDOWS && GTEST_HAS_PTHREAD ||}\par
1328         {\cf20 // GTEST_HAS_MUTEX_AND_THREAD_LOCAL_}\par
1329 \par
1330 {\cf21 #if GTEST_HAS_MUTEX_AND_THREAD_LOCAL_}\par
1331 {\cf20 // Mutex and ThreadLocal have already been imported into the namespace.}\par
1332 {\cf20 // Nothing to do here.}\par
1333 \par
1334 {\cf21 #elif GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT}\par
1335 \par
1336 {\cf20 // Mutex implements mutex on Windows platforms.  It is used in conjunction}\par
1337 {\cf20 // with class MutexLock:}\par
1338 {\cf20 //}\par
1339 {\cf20 //   Mutex mutex;}\par
1340 {\cf20 //   ...}\par
1341 {\cf20 //   MutexLock lock(&mutex);  // Acquires the mutex and releases it at the}\par
1342 {\cf20 //                            // end of the current scope.}\par
1343 {\cf20 //}\par
1344 {\cf20 // A static Mutex *must* be defined or declared using one of the following}\par
1345 {\cf20 // macros:}\par
1346 {\cf20 //   GTEST_DEFINE_STATIC_MUTEX_(g_some_mutex);}\par
1347 {\cf20 //   GTEST_DECLARE_STATIC_MUTEX_(g_some_mutex);}\par
1348 {\cf20 //}\par
1349 {\cf20 // (A non-static Mutex is defined/declared in the usual way).}\par
1350 {\cf17 class }GTEST_API_ Mutex \{\par
1351  {\cf17 public}:\par
1352   {\cf17 enum} MutexType \{ kStatic = 0, kDynamic = 1 \};\par
1353   {\cf20 // We rely on kStaticMutex being 0 as it is to what the linker initializes}\par
1354   {\cf20 // type_ in static mutexes.  critical_section_ will be initialized lazily}\par
1355   {\cf20 // in ThreadSafeLazyInit().}\par
1356   {\cf17 enum} StaticConstructorSelector \{ kStaticMutex = 0 \};\par
1357 \par
1358   {\cf20 // This constructor intentionally does nothing.  It relies on type_ being}\par
1359   {\cf20 // statically initialized to 0 (effectively setting it to kStatic) and on}\par
1360   {\cf20 // ThreadSafeLazyInit() to lazily initialize the rest of the members.}\par
1361   {\cf17 explicit} Mutex(StaticConstructorSelector {\cf20 /*dummy*/}) \{\}\par
1362 \par
1363   Mutex();\par
1364   ~Mutex();\par
1365 \par
1366   {\cf18 void} Lock();\par
1367 \par
1368   {\cf18 void} Unlock();\par
1369 \par
1370   {\cf20 // Does nothing if the current thread holds the mutex. Otherwise, crashes}\par
1371   {\cf20 // with high probability.}\par
1372   {\cf18 void} AssertHeld();\par
1373 \par
1374  {\cf17 private}:\par
1375   {\cf20 // Initializes owner_thread_id_ and critical_section_ in static mutexes.}\par
1376   {\cf18 void} ThreadSafeLazyInit();\par
1377 \par
1378   {\cf20 // Per https://blogs.msdn.microsoft.com/oldnewthing/20040223-00/?p=40503,}\par
1379   {\cf20 // we assume that 0 is an invalid value for thread IDs.}\par
1380   {\cf18 unsigned} {\cf18 int} owner_thread_id_;\par
1381 \par
1382   {\cf20 // For static mutexes, we rely on these members being initialized to zeros}\par
1383   {\cf20 // by the linker.}\par
1384   MutexType type_;\par
1385   {\cf18 long} critical_section_init_phase_;  {\cf20 // NOLINT}\par
1386   GTEST_CRITICAL_SECTION* critical_section_;\par
1387 \par
1388   Mutex({\cf17 const} Mutex&) = {\cf17 delete};\par
1389   Mutex& operator=({\cf17 const} Mutex&) = {\cf17 delete};\par
1390 \};\par
1391 \par
1392 {\cf21 #define GTEST_DECLARE_STATIC_MUTEX_(mutex) \\}\par
1393 {\cf21   extern ::testing::internal::Mutex mutex}\par
1394 \par
1395 {\cf21 #define GTEST_DEFINE_STATIC_MUTEX_(mutex) \\}\par
1396 {\cf21   ::testing::internal::Mutex mutex(::testing::internal::Mutex::kStaticMutex)}\par
1397 \par
1398 {\cf20 // We cannot name this class MutexLock because the ctor declaration would}\par
1399 {\cf20 // conflict with a macro named MutexLock, which is defined on some}\par
1400 {\cf20 // platforms. That macro is used as a defensive measure to prevent against}\par
1401 {\cf20 // inadvertent misuses of MutexLock like "MutexLock(&mu)" rather than}\par
1402 {\cf20 // "MutexLock l(&mu)".  Hence the typedef trick below.}\par
1403 {\cf17 class }GTestMutexLock \{\par
1404  {\cf17 public}:\par
1405   {\cf17 explicit} GTestMutexLock(Mutex* mutex) : mutex_(mutex) \{ mutex_->Lock(); \}\par
1406 \par
1407   ~GTestMutexLock() \{ mutex_->Unlock(); \}\par
1408 \par
1409  {\cf17 private}:\par
1410   Mutex* {\cf17 const} mutex_;\par
1411 \par
1412   GTestMutexLock({\cf17 const} GTestMutexLock&) = {\cf17 delete};\par
1413   GTestMutexLock& operator=({\cf17 const} GTestMutexLock&) = {\cf17 delete};\par
1414 \};\par
1415 \par
1416 {\cf17 typedef} GTestMutexLock MutexLock;\par
1417 \par
1418 {\cf20 // Base class for ValueHolder<T>.  Allows a caller to hold and delete a value}\par
1419 {\cf20 // without knowing its type.}\par
1420 {\cf17 class }ThreadLocalValueHolderBase \{\par
1421  {\cf17 public}:\par
1422   {\cf17 virtual} ~ThreadLocalValueHolderBase() \{\}\par
1423 \};\par
1424 \par
1425 {\cf20 // Provides a way for a thread to send notifications to a ThreadLocal}\par
1426 {\cf20 // regardless of its parameter type.}\par
1427 {\cf17 class }ThreadLocalBase \{\par
1428  {\cf17 public}:\par
1429   {\cf20 // Creates a new ValueHolder<T> object holding a default value passed to}\par
1430   {\cf20 // this ThreadLocal<T>'s constructor and returns it.  It is the caller's}\par
1431   {\cf20 // responsibility not to call this when the ThreadLocal<T> instance already}\par
1432   {\cf20 // has a value on the current thread.}\par
1433   {\cf17 virtual} ThreadLocalValueHolderBase* NewValueForCurrentThread() {\cf17 const} = 0;\par
1434 \par
1435  {\cf17 protected}:\par
1436   ThreadLocalBase() \{\}\par
1437   {\cf17 virtual} ~ThreadLocalBase() \{\}\par
1438 \par
1439  {\cf17 private}:\par
1440   ThreadLocalBase({\cf17 const} ThreadLocalBase&) = {\cf17 delete};\par
1441   ThreadLocalBase& operator=({\cf17 const} ThreadLocalBase&) = {\cf17 delete};\par
1442 \};\par
1443 \par
1444 {\cf20 // Maps a thread to a set of ThreadLocals that have values instantiated on that}\par
1445 {\cf20 // thread and notifies them when the thread exits.  A ThreadLocal instance is}\par
1446 {\cf20 // expected to persist until all threads it has values on have terminated.}\par
1447 {\cf17 class }GTEST_API_ ThreadLocalRegistry \{\par
1448  {\cf17 public}:\par
1449   {\cf20 // Registers thread_local_instance as having value on the current thread.}\par
1450   {\cf20 // Returns a value that can be used to identify the thread from other threads.}\par
1451   {\cf17 static} ThreadLocalValueHolderBase* GetValueOnCurrentThread(\par
1452       {\cf17 const} ThreadLocalBase* thread_local_instance);\par
1453 \par
1454   {\cf20 // Invoked when a ThreadLocal instance is destroyed.}\par
1455   {\cf17 static} {\cf18 void} OnThreadLocalDestroyed(\par
1456       {\cf17 const} ThreadLocalBase* thread_local_instance);\par
1457 \};\par
1458 \par
1459 {\cf17 class }GTEST_API_ ThreadWithParamBase \{\par
1460  {\cf17 public}:\par
1461   {\cf18 void} Join();\par
1462 \par
1463  {\cf17 protected}:\par
1464   {\cf17 class }Runnable \{\par
1465    {\cf17 public}:\par
1466     {\cf17 virtual} ~Runnable() \{\}\par
1467     {\cf17 virtual} {\cf18 void} Run() = 0;\par
1468   \};\par
1469 \par
1470   ThreadWithParamBase(Runnable* runnable, Notification* thread_can_start);\par
1471   {\cf17 virtual} ~ThreadWithParamBase();\par
1472 \par
1473  {\cf17 private}:\par
1474   AutoHandle thread_;\par
1475 \};\par
1476 \par
1477 {\cf20 // Helper class for testing Google Test's multi-threading constructs.}\par
1478 {\cf17 template} <{\cf17 typename} T>\par
1479 {\cf17 class }ThreadWithParam : {\cf17 public} ThreadWithParamBase \{\par
1480  {\cf17 public}:\par
1481   {\cf17 typedef} {\cf18 void} UserThreadFunc(T);\par
1482 \par
1483   ThreadWithParam(UserThreadFunc* func, T param, Notification* thread_can_start)\par
1484       : ThreadWithParamBase(new RunnableImpl(func, param), thread_can_start) \{\}\par
1485   {\cf17 virtual} ~ThreadWithParam() \{\}\par
1486 \par
1487  {\cf17 private}:\par
1488   {\cf17 class }RunnableImpl : {\cf17 public} Runnable \{\par
1489    {\cf17 public}:\par
1490     RunnableImpl(UserThreadFunc* func, T param) : func_(func), param_(param) \{\}\par
1491     {\cf17 virtual} ~RunnableImpl() \{\}\par
1492     {\cf17 virtual} {\cf18 void} Run() \{ func_(param_); \}\par
1493 \par
1494    {\cf17 private}:\par
1495     UserThreadFunc* {\cf17 const} func_;\par
1496     {\cf17 const} T param_;\par
1497 \par
1498     RunnableImpl({\cf17 const} RunnableImpl&) = {\cf17 delete};\par
1499     RunnableImpl& operator=({\cf17 const} RunnableImpl&) = {\cf17 delete};\par
1500   \};\par
1501 \par
1502   ThreadWithParam({\cf17 const} ThreadWithParam&) = {\cf17 delete};\par
1503   ThreadWithParam& operator=({\cf17 const} ThreadWithParam&) = {\cf17 delete};\par
1504 \};\par
1505 \par
1506 {\cf20 // Implements thread-local storage on Windows systems.}\par
1507 {\cf20 //}\par
1508 {\cf20 //   // Thread 1}\par
1509 {\cf20 //   ThreadLocal<int> tl(100);  // 100 is the default value for each thread.}\par
1510 {\cf20 //}\par
1511 {\cf20 //   // Thread 2}\par
1512 {\cf20 //   tl.set(150);  // Changes the value for thread 2 only.}\par
1513 {\cf20 //   EXPECT_EQ(150, tl.get());}\par
1514 {\cf20 //}\par
1515 {\cf20 //   // Thread 1}\par
1516 {\cf20 //   EXPECT_EQ(100, tl.get());  // In thread 1, tl has the original value.}\par
1517 {\cf20 //   tl.set(200);}\par
1518 {\cf20 //   EXPECT_EQ(200, tl.get());}\par
1519 {\cf20 //}\par
1520 {\cf20 // The template type argument T must have a public copy constructor.}\par
1521 {\cf20 // In addition, the default ThreadLocal constructor requires T to have}\par
1522 {\cf20 // a public default constructor.}\par
1523 {\cf20 //}\par
1524 {\cf20 // The users of a TheadLocal instance have to make sure that all but one}\par
1525 {\cf20 // threads (including the main one) using that instance have exited before}\par
1526 {\cf20 // destroying it. Otherwise, the per-thread objects managed for them by the}\par
1527 {\cf20 // ThreadLocal instance are not guaranteed to be destroyed on all platforms.}\par
1528 {\cf20 //}\par
1529 {\cf20 // Google Test only uses global ThreadLocal objects.  That means they}\par
1530 {\cf20 // will die after main() has returned.  Therefore, no per-thread}\par
1531 {\cf20 // object managed by Google Test will be leaked as long as all threads}\par
1532 {\cf20 // using Google Test have exited when main() returns.}\par
1533 {\cf17 template} <{\cf17 typename} T>\par
1534 {\cf17 class }ThreadLocal : {\cf17 public} ThreadLocalBase \{\par
1535  {\cf17 public}:\par
1536   ThreadLocal() : default_factory_(new DefaultValueHolderFactory()) \{\}\par
1537   {\cf17 explicit} ThreadLocal({\cf17 const} T& value)\par
1538       : default_factory_(new InstanceValueHolderFactory(value)) \{\}\par
1539 \par
1540   ~ThreadLocal(){\cf17  override }\{ ThreadLocalRegistry::OnThreadLocalDestroyed({\cf17 this}); \}\par
1541 \par
1542   T* pointer() \{ {\cf19 return} GetOrCreateValue(); \}\par
1543   {\cf17 const} T* pointer(){\cf17  const }\{ {\cf19 return} GetOrCreateValue(); \}\par
1544   {\cf17 const} T& get(){\cf17  const }\{ {\cf19 return} *pointer(); \}\par
1545   {\cf18 void} set({\cf17 const} T& value) \{ *pointer() = value; \}\par
1546 \par
1547  {\cf17 private}:\par
1548   {\cf20 // Holds a value of T.  Can be deleted via its base class without the caller}\par
1549   {\cf20 // knowing the type of T.}\par
1550   {\cf17 class }ValueHolder : {\cf17 public} ThreadLocalValueHolderBase \{\par
1551    {\cf17 public}:\par
1552     ValueHolder() : value_() \{\}\par
1553     {\cf17 explicit} ValueHolder({\cf17 const} T& value) : value_(value) \{\}\par
1554 \par
1555     T* pointer() \{ {\cf19 return} &value_; \}\par
1556 \par
1557    {\cf17 private}:\par
1558     T value_;\par
1559     ValueHolder({\cf17 const} ValueHolder&) = {\cf17 delete};\par
1560     ValueHolder& operator=({\cf17 const} ValueHolder&) = {\cf17 delete};\par
1561   \};\par
1562 \par
1563   T* GetOrCreateValue(){\cf17  const }\{\par
1564     {\cf19 return} {\cf17 static_cast<}ValueHolder*{\cf17 >}(\par
1565                ThreadLocalRegistry::GetValueOnCurrentThread({\cf17 this}))\par
1566         ->pointer();\par
1567   \}\par
1568 \par
1569   ThreadLocalValueHolderBase* NewValueForCurrentThread(){\cf17  const override }\{\par
1570     {\cf19 return} default_factory_->MakeNewHolder();\par
1571   \}\par
1572 \par
1573   {\cf17 class }ValueHolderFactory \{\par
1574    {\cf17 public}:\par
1575     ValueHolderFactory() \{\}\par
1576     {\cf17 virtual} ~ValueHolderFactory() \{\}\par
1577     {\cf17 virtual} ValueHolder* MakeNewHolder() {\cf17 const} = 0;\par
1578 \par
1579    {\cf17 private}:\par
1580     ValueHolderFactory({\cf17 const} ValueHolderFactory&) = {\cf17 delete};\par
1581     ValueHolderFactory& operator=({\cf17 const} ValueHolderFactory&) = {\cf17 delete};\par
1582   \};\par
1583 \par
1584   {\cf17 class }DefaultValueHolderFactory : {\cf17 public} ValueHolderFactory \{\par
1585    {\cf17 public}:\par
1586     DefaultValueHolderFactory() \{\}\par
1587     ValueHolder* MakeNewHolder(){\cf17  const override }\{ {\cf19 return} {\cf17 new} ValueHolder(); \}\par
1588 \par
1589    {\cf17 private}:\par
1590     DefaultValueHolderFactory({\cf17 const} DefaultValueHolderFactory&) = {\cf17 delete};\par
1591     DefaultValueHolderFactory& operator=({\cf17 const} DefaultValueHolderFactory&) =\par
1592         {\cf17 delete};\par
1593   \};\par
1594 \par
1595   {\cf17 class }InstanceValueHolderFactory : {\cf17 public} ValueHolderFactory \{\par
1596    {\cf17 public}:\par
1597     {\cf17 explicit} InstanceValueHolderFactory({\cf17 const} T& value) : value_(value) \{\}\par
1598     ValueHolder* MakeNewHolder(){\cf17  const override }\{\par
1599       {\cf19 return} {\cf17 new} ValueHolder(value_);\par
1600     \}\par
1601 \par
1602    {\cf17 private}:\par
1603     {\cf17 const} T value_;  {\cf20 // The value for each thread.}\par
1604 \par
1605     InstanceValueHolderFactory({\cf17 const} InstanceValueHolderFactory&) = {\cf17 delete};\par
1606     InstanceValueHolderFactory& operator=({\cf17 const} InstanceValueHolderFactory&) =\par
1607         {\cf17 delete};\par
1608   \};\par
1609 \par
1610   std::unique_ptr<ValueHolderFactory> default_factory_;\par
1611 \par
1612   ThreadLocal({\cf17 const} ThreadLocal&) = {\cf17 delete};\par
1613   ThreadLocal& operator=({\cf17 const} ThreadLocal&) = {\cf17 delete};\par
1614 \};\par
1615 \par
1616 {\cf21 #elif GTEST_HAS_PTHREAD}\par
1617 \par
1618 {\cf20 // MutexBase and Mutex implement mutex on pthreads-based platforms.}\par
1619 {\cf17 class }MutexBase \{\par
1620  {\cf17 public}:\par
1621   {\cf20 // Acquires this mutex.}\par
1622   {\cf18 void} Lock() \{\par
1623     GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_lock(&mutex_));\par
1624     owner_ = pthread_self();\par
1625     has_owner_ = {\cf17 true};\par
1626   \}\par
1627 \par
1628   {\cf20 // Releases this mutex.}\par
1629   {\cf18 void} Unlock() \{\par
1630     {\cf20 // Since the lock is being released the owner_ field should no longer be}\par
1631     {\cf20 // considered valid. We don't protect writing to has_owner_ here, as it's}\par
1632     {\cf20 // the caller's responsibility to ensure that the current thread holds the}\par
1633     {\cf20 // mutex when this is called.}\par
1634     has_owner_ = {\cf17 false};\par
1635     GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_unlock(&mutex_));\par
1636   \}\par
1637 \par
1638   {\cf20 // Does nothing if the current thread holds the mutex. Otherwise, crashes}\par
1639   {\cf20 // with high probability.}\par
1640   {\cf18 void} AssertHeld(){\cf17  const }\{\par
1641     GTEST_CHECK_(has_owner_ && pthread_equal(owner_, pthread_self()))\par
1642         << {\cf22 "The current thread is not holding the mutex @"} << {\cf17 this};\par
1643   \}\par
1644 \par
1645   {\cf20 // A static mutex may be used before main() is entered.  It may even}\par
1646   {\cf20 // be used before the dynamic initialization stage.  Therefore we}\par
1647   {\cf20 // must be able to initialize a static mutex object at link time.}\par
1648   {\cf20 // This means MutexBase has to be a POD and its member variables}\par
1649   {\cf20 // have to be public.}\par
1650  {\cf17 public}:\par
1651   pthread_mutex_t mutex_;  {\cf20 // The underlying pthread mutex.}\par
1652   {\cf20 // has_owner_ indicates whether the owner_ field below contains a valid thread}\par
1653   {\cf20 // ID and is therefore safe to inspect (e.g., to use in pthread_equal()). All}\par
1654   {\cf20 // accesses to the owner_ field should be protected by a check of this field.}\par
1655   {\cf20 // An alternative might be to memset() owner_ to all zeros, but there's no}\par
1656   {\cf20 // guarantee that a zero'd pthread_t is necessarily invalid or even different}\par
1657   {\cf20 // from pthread_self().}\par
1658   {\cf18 bool} has_owner_;\par
1659   pthread_t owner_;  {\cf20 // The thread holding the mutex.}\par
1660 \};\par
1661 \par
1662 {\cf20 // Forward-declares a static mutex.}\par
1663 {\cf21 #define GTEST_DECLARE_STATIC_MUTEX_(mutex) \\}\par
1664 {\cf21   extern ::testing::internal::MutexBase mutex}\par
1665 \par
1666 {\cf20 // Defines and statically (i.e. at link time) initializes a static mutex.}\par
1667 {\cf20 // The initialization list here does not explicitly initialize each field,}\par
1668 {\cf20 // instead relying on default initialization for the unspecified fields. In}\par
1669 {\cf20 // particular, the owner_ field (a pthread_t) is not explicitly initialized.}\par
1670 {\cf20 // This allows initialization to work whether pthread_t is a scalar or struct.}\par
1671 {\cf20 // The flag -Wmissing-field-initializers must not be specified for this to work.}\par
1672 {\cf21 #define GTEST_DEFINE_STATIC_MUTEX_(mutex) \\}\par
1673 {\cf21   ::testing::internal::MutexBase mutex = \{PTHREAD_MUTEX_INITIALIZER, false, 0\}}\par
1674 \par
1675 {\cf20 // The Mutex class can only be used for mutexes created at runtime. It}\par
1676 {\cf20 // shares its API with MutexBase otherwise.}\par
1677 {\cf17 class }Mutex : {\cf17 public} MutexBase \{\par
1678  {\cf17 public}:\par
1679   Mutex() \{\par
1680     GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_init(&mutex_, {\cf17 nullptr}));\par
1681     has_owner_ = {\cf17 false};\par
1682   \}\par
1683   ~Mutex() \{ GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_destroy(&mutex_)); \}\par
1684 \par
1685  {\cf17 private}:\par
1686   Mutex({\cf17 const} Mutex&) = {\cf17 delete};\par
1687   Mutex& operator=({\cf17 const} Mutex&) = {\cf17 delete};\par
1688 \};\par
1689 \par
1690 {\cf20 // We cannot name this class MutexLock because the ctor declaration would}\par
1691 {\cf20 // conflict with a macro named MutexLock, which is defined on some}\par
1692 {\cf20 // platforms. That macro is used as a defensive measure to prevent against}\par
1693 {\cf20 // inadvertent misuses of MutexLock like "MutexLock(&mu)" rather than}\par
1694 {\cf20 // "MutexLock l(&mu)".  Hence the typedef trick below.}\par
1695 {\cf17 class }GTestMutexLock \{\par
1696  {\cf17 public}:\par
1697   {\cf17 explicit} GTestMutexLock(MutexBase* mutex) : mutex_(mutex) \{ mutex_->Lock(); \}\par
1698 \par
1699   ~GTestMutexLock() \{ mutex_->Unlock(); \}\par
1700 \par
1701  {\cf17 private}:\par
1702   MutexBase* {\cf17 const} mutex_;\par
1703 \par
1704   GTestMutexLock({\cf17 const} GTestMutexLock&) = {\cf17 delete};\par
1705   GTestMutexLock& operator=({\cf17 const} GTestMutexLock&) = {\cf17 delete};\par
1706 \};\par
1707 \par
1708 {\cf17 typedef} GTestMutexLock MutexLock;\par
1709 \par
1710 {\cf20 // Helpers for ThreadLocal.}\par
1711 \par
1712 {\cf20 // pthread_key_create() requires DeleteThreadLocalValue() to have}\par
1713 {\cf20 // C-linkage.  Therefore it cannot be templatized to access}\par
1714 {\cf20 // ThreadLocal<T>.  Hence the need for class}\par
1715 {\cf20 // ThreadLocalValueHolderBase.}\par
1716 {\cf17 class }GTEST_API_ ThreadLocalValueHolderBase \{\par
1717  {\cf17 public}:\par
1718   {\cf17 virtual} ~ThreadLocalValueHolderBase() \{\}\par
1719 \};\par
1720 \par
1721 {\cf20 // Called by pthread to delete thread-local data stored by}\par
1722 {\cf20 // pthread_setspecific().}\par
1723 {\cf17 extern} {\cf22 "C"} {\cf17 inline} {\cf18 void} DeleteThreadLocalValue({\cf18 void}* value_holder) \{\par
1724   {\cf17 delete} {\cf17 static_cast<}ThreadLocalValueHolderBase*{\cf17 >}(value_holder);\par
1725 \}\par
1726 \par
1727 {\cf20 // Implements thread-local storage on pthreads-based systems.}\par
1728 {\cf17 template} <{\cf17 typename} T>\par
1729 {\cf17 class }GTEST_API_ ThreadLocal \{\par
1730  {\cf17 public}:\par
1731   ThreadLocal()\par
1732       : key_(CreateKey()), default_factory_(new DefaultValueHolderFactory()) \{\}\par
1733   {\cf17 explicit} ThreadLocal({\cf17 const} T& value)\par
1734       : key_(CreateKey()),\par
1735         default_factory_(new InstanceValueHolderFactory(value)) \{\}\par
1736 \par
1737   ~ThreadLocal() \{\par
1738     {\cf20 // Destroys the managed object for the current thread, if any.}\par
1739     DeleteThreadLocalValue(pthread_getspecific(key_));\par
1740 \par
1741     {\cf20 // Releases resources associated with the key.  This will *not*}\par
1742     {\cf20 // delete managed objects for other threads.}\par
1743     GTEST_CHECK_POSIX_SUCCESS_(pthread_key_delete(key_));\par
1744   \}\par
1745 \par
1746   T* pointer() \{ {\cf19 return} GetOrCreateValue(); \}\par
1747   {\cf17 const} T* pointer(){\cf17  const }\{ {\cf19 return} GetOrCreateValue(); \}\par
1748   {\cf17 const} T& get(){\cf17  const }\{ {\cf19 return} *pointer(); \}\par
1749   {\cf18 void} set({\cf17 const} T& value) \{ *pointer() = value; \}\par
1750 \par
1751  {\cf17 private}:\par
1752   {\cf20 // Holds a value of type T.}\par
1753   {\cf17 class }ValueHolder : {\cf17 public} ThreadLocalValueHolderBase \{\par
1754    {\cf17 public}:\par
1755     ValueHolder() : value_() \{\}\par
1756     {\cf17 explicit} ValueHolder({\cf17 const} T& value) : value_(value) \{\}\par
1757 \par
1758     T* pointer() \{ {\cf19 return} &value_; \}\par
1759 \par
1760    {\cf17 private}:\par
1761     T value_;\par
1762     ValueHolder({\cf17 const} ValueHolder&) = {\cf17 delete};\par
1763     ValueHolder& operator=({\cf17 const} ValueHolder&) = {\cf17 delete};\par
1764   \};\par
1765 \par
1766   {\cf17 static} pthread_key_t CreateKey() \{\par
1767     pthread_key_t key;\par
1768     {\cf20 // When a thread exits, DeleteThreadLocalValue() will be called on}\par
1769     {\cf20 // the object managed for that thread.}\par
1770     GTEST_CHECK_POSIX_SUCCESS_(\par
1771         pthread_key_create(&key, &DeleteThreadLocalValue));\par
1772     {\cf19 return} key;\par
1773   \}\par
1774 \par
1775   T* GetOrCreateValue(){\cf17  const }\{\par
1776     ThreadLocalValueHolderBase* {\cf17 const} holder =\par
1777         {\cf17 static_cast<}ThreadLocalValueHolderBase*{\cf17 >}(pthread_getspecific(key_));\par
1778     {\cf19 if} (holder != {\cf17 nullptr}) \{\par
1779       {\cf19 return} CheckedDowncastToActualType<ValueHolder>(holder)->pointer();\par
1780     \}\par
1781 \par
1782     ValueHolder* {\cf17 const} new_holder = default_factory_->MakeNewHolder();\par
1783     ThreadLocalValueHolderBase* {\cf17 const} holder_base = new_holder;\par
1784     GTEST_CHECK_POSIX_SUCCESS_(pthread_setspecific(key_, holder_base));\par
1785     {\cf19 return} new_holder->pointer();\par
1786   \}\par
1787 \par
1788   {\cf17 class }ValueHolderFactory \{\par
1789    {\cf17 public}:\par
1790     ValueHolderFactory() \{\}\par
1791     {\cf17 virtual} ~ValueHolderFactory() \{\}\par
1792     {\cf17 virtual} ValueHolder* MakeNewHolder() {\cf17 const} = 0;\par
1793 \par
1794    {\cf17 private}:\par
1795     ValueHolderFactory({\cf17 const} ValueHolderFactory&) = {\cf17 delete};\par
1796     ValueHolderFactory& operator=({\cf17 const} ValueHolderFactory&) = {\cf17 delete};\par
1797   \};\par
1798 \par
1799   {\cf17 class }DefaultValueHolderFactory : {\cf17 public} ValueHolderFactory \{\par
1800    {\cf17 public}:\par
1801     DefaultValueHolderFactory() \{\}\par
1802     ValueHolder* MakeNewHolder(){\cf17  const override }\{ {\cf19 return} {\cf17 new} ValueHolder(); \}\par
1803 \par
1804    {\cf17 private}:\par
1805     DefaultValueHolderFactory({\cf17 const} DefaultValueHolderFactory&) = {\cf17 delete};\par
1806     DefaultValueHolderFactory& operator=({\cf17 const} DefaultValueHolderFactory&) =\par
1807         {\cf17 delete};\par
1808   \};\par
1809 \par
1810   {\cf17 class }InstanceValueHolderFactory : {\cf17 public} ValueHolderFactory \{\par
1811    {\cf17 public}:\par
1812     {\cf17 explicit} InstanceValueHolderFactory({\cf17 const} T& value) : value_(value) \{\}\par
1813     ValueHolder* MakeNewHolder(){\cf17  const override }\{\par
1814       {\cf19 return} {\cf17 new} ValueHolder(value_);\par
1815     \}\par
1816 \par
1817    {\cf17 private}:\par
1818     {\cf17 const} T value_;  {\cf20 // The value for each thread.}\par
1819 \par
1820     InstanceValueHolderFactory({\cf17 const} InstanceValueHolderFactory&) = {\cf17 delete};\par
1821     InstanceValueHolderFactory& operator=({\cf17 const} InstanceValueHolderFactory&) =\par
1822         {\cf17 delete};\par
1823   \};\par
1824 \par
1825   {\cf20 // A key pthreads uses for looking up per-thread values.}\par
1826   {\cf17 const} pthread_key_t key_;\par
1827   std::unique_ptr<ValueHolderFactory> default_factory_;\par
1828 \par
1829   ThreadLocal({\cf17 const} ThreadLocal&) = {\cf17 delete};\par
1830   ThreadLocal& operator=({\cf17 const} ThreadLocal&) = {\cf17 delete};\par
1831 \};\par
1832 \par
1833 {\cf21 #endif  }{\cf20 // GTEST_HAS_MUTEX_AND_THREAD_LOCAL_}\par
1834 \par
1835 {\cf21 #else  }{\cf20 // GTEST_IS_THREADSAFE}\par
1836 \par
1837 {\cf20 // A dummy implementation of synchronization primitives (mutex, lock,}\par
1838 {\cf20 // and thread-local variable).  Necessary for compiling Google Test where}\par
1839 {\cf20 // mutex is not supported - using Google Test in multiple threads is not}\par
1840 {\cf20 // supported on such platforms.}\par
1841 \par
1842 {\cf17 class }Mutex \{\par
1843  {\cf17 public}:\par
1844   Mutex() \{\}\par
1845   {\cf18 void} Lock() \{\}\par
1846   {\cf18 void} Unlock() \{\}\par
1847   {\cf18 void} AssertHeld(){\cf17  const }\{\}\par
1848 \};\par
1849 \par
1850 {\cf21 #define GTEST_DECLARE_STATIC_MUTEX_(mutex) \\}\par
1851 {\cf21   extern ::testing::internal::Mutex mutex}\par
1852 \par
1853 {\cf21 #define GTEST_DEFINE_STATIC_MUTEX_(mutex) ::testing::internal::Mutex mutex}\par
1854 \par
1855 {\cf20 // We cannot name this class MutexLock because the ctor declaration would}\par
1856 {\cf20 // conflict with a macro named MutexLock, which is defined on some}\par
1857 {\cf20 // platforms. That macro is used as a defensive measure to prevent against}\par
1858 {\cf20 // inadvertent misuses of MutexLock like "MutexLock(&mu)" rather than}\par
1859 {\cf20 // "MutexLock l(&mu)".  Hence the typedef trick below.}\par
1860 {\cf17 class }GTestMutexLock \{\par
1861  {\cf17 public}:\par
1862   {\cf17 explicit} GTestMutexLock(Mutex*) \{\}  {\cf20 // NOLINT}\par
1863 \};\par
1864 \par
1865 {\cf17 typedef} GTestMutexLock MutexLock;\par
1866 \par
1867 {\cf17 template} <{\cf17 typename} T>\par
1868 {\cf17 class }GTEST_API_ ThreadLocal \{\par
1869  {\cf17 public}:\par
1870   ThreadLocal() : value_() \{\}\par
1871   {\cf17 explicit} ThreadLocal({\cf17 const} T& value) : value_(value) \{\}\par
1872   T* pointer() \{ {\cf19 return} &value_; \}\par
1873   {\cf17 const} T* pointer(){\cf17  const }\{ {\cf19 return} &value_; \}\par
1874   {\cf17 const} T& get(){\cf17  const }\{ {\cf19 return} value_; \}\par
1875   {\cf18 void} set({\cf17 const} T& value) \{ value_ = value; \}\par
1876 \par
1877  {\cf17 private}:\par
1878   T value_;\par
1879 \};\par
1880 \par
1881 {\cf21 #endif  }{\cf20 // GTEST_IS_THREADSAFE}\par
1882 \par
1883 {\cf20 // Returns the number of threads running in the process, or 0 to indicate that}\par
1884 {\cf20 // we cannot detect it.}\par
1885 GTEST_API_ {\cf18 size_t} GetThreadCount();\par
1886 \par
1887 {\cf21 #if GTEST_OS_WINDOWS}\par
1888 {\cf21 #define GTEST_PATH_SEP_ "\\\\"}\par
1889 {\cf21 #define GTEST_HAS_ALT_PATH_SEP_ 1}\par
1890 {\cf21 #else}\par
1891 {\cf21 #define GTEST_PATH_SEP_ "/"}\par
1892 {\cf21 #define GTEST_HAS_ALT_PATH_SEP_ 0}\par
1893 {\cf21 #endif  }{\cf20 // GTEST_OS_WINDOWS}\par
1894 \par
1895 {\cf20 // Utilities for char.}\par
1896 \par
1897 {\cf20 // isspace(int ch) and friends accept an unsigned char or EOF.  char}\par
1898 {\cf20 // may be signed, depending on the compiler (or compiler flags).}\par
1899 {\cf20 // Therefore we need to cast a char to unsigned char before calling}\par
1900 {\cf20 // isspace(), etc.}\par
1901 \par
1902 {\cf17 inline} {\cf18 bool} IsAlpha({\cf18 char} ch) \{\par
1903   {\cf19 return} isalpha({\cf17 static_cast<}{\cf18 unsigned} {\cf18 char}{\cf17 >}(ch)) != 0;\par
1904 \}\par
1905 {\cf17 inline} {\cf18 bool} IsAlNum({\cf18 char} ch) \{\par
1906   {\cf19 return} isalnum({\cf17 static_cast<}{\cf18 unsigned} {\cf18 char}{\cf17 >}(ch)) != 0;\par
1907 \}\par
1908 {\cf17 inline} {\cf18 bool} IsDigit({\cf18 char} ch) \{\par
1909   {\cf19 return} isdigit({\cf17 static_cast<}{\cf18 unsigned} {\cf18 char}{\cf17 >}(ch)) != 0;\par
1910 \}\par
1911 {\cf17 inline} {\cf18 bool} IsLower({\cf18 char} ch) \{\par
1912   {\cf19 return} islower({\cf17 static_cast<}{\cf18 unsigned} {\cf18 char}{\cf17 >}(ch)) != 0;\par
1913 \}\par
1914 {\cf17 inline} {\cf18 bool} IsSpace({\cf18 char} ch) \{\par
1915   {\cf19 return} isspace({\cf17 static_cast<}{\cf18 unsigned} {\cf18 char}{\cf17 >}(ch)) != 0;\par
1916 \}\par
1917 {\cf17 inline} {\cf18 bool} IsUpper({\cf18 char} ch) \{\par
1918   {\cf19 return} isupper({\cf17 static_cast<}{\cf18 unsigned} {\cf18 char}{\cf17 >}(ch)) != 0;\par
1919 \}\par
1920 {\cf17 inline} {\cf18 bool} IsXDigit({\cf18 char} ch) \{\par
1921   {\cf19 return} isxdigit({\cf17 static_cast<}{\cf18 unsigned} {\cf18 char}{\cf17 >}(ch)) != 0;\par
1922 \}\par
1923 {\cf21 #ifdef __cpp_char8_t}\par
1924 {\cf17 inline} {\cf18 bool} IsXDigit({\cf18 char8_t} ch) \{\par
1925   {\cf19 return} isxdigit({\cf17 static_cast<}{\cf18 unsigned} {\cf18 char}{\cf17 >}(ch)) != 0;\par
1926 \}\par
1927 {\cf21 #endif}\par
1928 {\cf17 inline} {\cf18 bool} IsXDigit({\cf18 char16_t} ch) \{\par
1929   {\cf17 const} {\cf18 unsigned} {\cf18 char} low_byte = {\cf17 static_cast<}{\cf18 unsigned} {\cf18 char}{\cf17 >}(ch);\par
1930   {\cf19 return} ch == low_byte && isxdigit(low_byte) != 0;\par
1931 \}\par
1932 {\cf17 inline} {\cf18 bool} IsXDigit({\cf18 char32_t} ch) \{\par
1933   {\cf17 const} {\cf18 unsigned} {\cf18 char} low_byte = {\cf17 static_cast<}{\cf18 unsigned} {\cf18 char}{\cf17 >}(ch);\par
1934   {\cf19 return} ch == low_byte && isxdigit(low_byte) != 0;\par
1935 \}\par
1936 {\cf17 inline} {\cf18 bool} IsXDigit({\cf18 wchar_t} ch) \{\par
1937   {\cf17 const} {\cf18 unsigned} {\cf18 char} low_byte = {\cf17 static_cast<}{\cf18 unsigned} {\cf18 char}{\cf17 >}(ch);\par
1938   {\cf19 return} ch == low_byte && isxdigit(low_byte) != 0;\par
1939 \}\par
1940 \par
1941 {\cf17 inline} {\cf18 char} ToLower({\cf18 char} ch) \{\par
1942   {\cf19 return} {\cf17 static_cast<}{\cf18 char}{\cf17 >}(tolower({\cf17 static_cast<}{\cf18 unsigned} {\cf18 char}{\cf17 >}(ch)));\par
1943 \}\par
1944 {\cf17 inline} {\cf18 char} ToUpper({\cf18 char} ch) \{\par
1945   {\cf19 return} {\cf17 static_cast<}{\cf18 char}{\cf17 >}(toupper({\cf17 static_cast<}{\cf18 unsigned} {\cf18 char}{\cf17 >}(ch)));\par
1946 \}\par
1947 \par
1948 {\cf17 inline} std::string StripTrailingSpaces(std::string str) \{\par
1949   std::string::iterator it = str.end();\par
1950   {\cf19 while} (it != str.begin() && IsSpace(*--it)) it = str.erase(it);\par
1951   {\cf19 return} str;\par
1952 \}\par
1953 \par
1954 {\cf20 // The testing::internal::posix namespace holds wrappers for common}\par
1955 {\cf20 // POSIX functions.  These wrappers hide the differences between}\par
1956 {\cf20 // Windows/MSVC and POSIX systems.  Since some compilers define these}\par
1957 {\cf20 // standard functions as macros, the wrapper cannot have the same name}\par
1958 {\cf20 // as the wrapped function.}\par
1959 \par
1960 {\cf17 namespace }posix \{\par
1961 \par
1962 {\cf20 // Functions with a different name on Windows.}\par
1963 \par
1964 {\cf21 #if GTEST_OS_WINDOWS}\par
1965 \par
1966 {\cf17 typedef} {\cf17 struct }_stat StatStruct;\par
1967 \par
1968 {\cf21 #ifdef __BORLANDC__}\par
1969 {\cf17 inline} {\cf18 int} DoIsATTY({\cf18 int} fd) \{ {\cf19 return} isatty(fd); \}\par
1970 {\cf17 inline} {\cf18 int} StrCaseCmp({\cf17 const} {\cf18 char}* s1, {\cf17 const} {\cf18 char}* s2) \{\par
1971   {\cf19 return} stricmp(s1, s2);\par
1972 \}\par
1973 {\cf17 inline} {\cf18 char}* StrDup({\cf17 const} {\cf18 char}* src) \{ {\cf19 return} strdup(src); \}\par
1974 {\cf21 #else  }{\cf20 // !__BORLANDC__}\par
1975 {\cf21 #if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_ZOS || GTEST_OS_IOS || \\}\par
1976 {\cf21     GTEST_OS_WINDOWS_PHONE || GTEST_OS_WINDOWS_RT || defined(ESP_PLATFORM)}\par
1977 {\cf17 inline} {\cf18 int} DoIsATTY({\cf18 int} {\cf20 /* fd */}) \{ {\cf19 return} 0; \}\par
1978 {\cf21 #else}\par
1979 {\cf17 inline} {\cf18 int} DoIsATTY({\cf18 int} fd) \{ {\cf19 return} _isatty(fd); \}\par
1980 {\cf21 #endif  }{\cf20 // GTEST_OS_WINDOWS_MOBILE}\par
1981 {\cf17 inline} {\cf18 int} StrCaseCmp({\cf17 const} {\cf18 char}* s1, {\cf17 const} {\cf18 char}* s2) \{\par
1982   {\cf19 return} _stricmp(s1, s2);\par
1983 \}\par
1984 {\cf17 inline} {\cf18 char}* StrDup({\cf17 const} {\cf18 char}* src) \{ {\cf19 return} _strdup(src); \}\par
1985 {\cf21 #endif  }{\cf20 // __BORLANDC__}\par
1986 \par
1987 {\cf21 #if GTEST_OS_WINDOWS_MOBILE}\par
1988 {\cf17 inline} {\cf18 int} FileNo(FILE* file) \{ {\cf19 return} {\cf17 reinterpret_cast<}{\cf18 int}{\cf17 >}(_fileno(file)); \}\par
1989 {\cf20 // Stat(), RmDir(), and IsDir() are not needed on Windows CE at this}\par
1990 {\cf20 // time and thus not defined there.}\par
1991 {\cf21 #else}\par
1992 {\cf17 inline} {\cf18 int} FileNo(FILE* file) \{ {\cf19 return} _fileno(file); \}\par
1993 {\cf17 inline} {\cf18 int} Stat({\cf17 const} {\cf18 char}* path, StatStruct* buf) \{ {\cf19 return} _stat(path, buf); \}\par
1994 {\cf17 inline} {\cf18 int} RmDir({\cf17 const} {\cf18 char}* dir) \{ {\cf19 return} _rmdir(dir); \}\par
1995 {\cf17 inline} {\cf18 bool} IsDir({\cf17 const} StatStruct& st) \{ {\cf19 return} (_S_IFDIR & st.st_mode) != 0; \}\par
1996 {\cf21 #endif  }{\cf20 // GTEST_OS_WINDOWS_MOBILE}\par
1997 \par
1998 {\cf21 #elif GTEST_OS_ESP8266}\par
1999 {\cf17 typedef} {\cf17 struct }stat StatStruct;\par
2000 \par
2001 {\cf17 inline} {\cf18 int} FileNo(FILE* file) \{ {\cf19 return} fileno(file); \}\par
2002 {\cf17 inline} {\cf18 int} DoIsATTY({\cf18 int} fd) \{ {\cf19 return} isatty(fd); \}\par
2003 {\cf17 inline} {\cf18 int} Stat({\cf17 const} {\cf18 char}* path, StatStruct* buf) \{\par
2004   {\cf20 // stat function not implemented on ESP8266}\par
2005   {\cf19 return} 0;\par
2006 \}\par
2007 {\cf17 inline} {\cf18 int} StrCaseCmp({\cf17 const} {\cf18 char}* s1, {\cf17 const} {\cf18 char}* s2) \{\par
2008   {\cf19 return} strcasecmp(s1, s2);\par
2009 \}\par
2010 {\cf17 inline} {\cf18 char}* StrDup({\cf17 const} {\cf18 char}* src) \{ {\cf19 return} strdup(src); \}\par
2011 {\cf17 inline} {\cf18 int} RmDir({\cf17 const} {\cf18 char}* dir) \{ {\cf19 return} rmdir(dir); \}\par
2012 {\cf17 inline} {\cf18 bool} IsDir({\cf17 const} StatStruct& st) \{ {\cf19 return} S_ISDIR(st.st_mode); \}\par
2013 \par
2014 {\cf21 #else}\par
2015 \par
2016 {\cf17 typedef} {\cf17 struct }stat StatStruct;\par
2017 \par
2018 {\cf17 inline} {\cf18 int} FileNo(FILE* file) \{ {\cf19 return} fileno(file); \}\par
2019 {\cf17 inline} {\cf18 int} DoIsATTY({\cf18 int} fd) \{ {\cf19 return} isatty(fd); \}\par
2020 {\cf17 inline} {\cf18 int} Stat({\cf17 const} {\cf18 char}* path, StatStruct* buf) \{ {\cf19 return} stat(path, buf); \}\par
2021 {\cf17 inline} {\cf18 int} StrCaseCmp({\cf17 const} {\cf18 char}* s1, {\cf17 const} {\cf18 char}* s2) \{\par
2022   {\cf19 return} strcasecmp(s1, s2);\par
2023 \}\par
2024 {\cf17 inline} {\cf18 char}* StrDup({\cf17 const} {\cf18 char}* src) \{ {\cf19 return} strdup(src); \}\par
2025 {\cf21 #if GTEST_OS_QURT}\par
2026 {\cf20 // QuRT doesn't support any directory functions, including rmdir}\par
2027 {\cf17 inline} {\cf18 int} RmDir({\cf17 const} {\cf18 char}*) \{ {\cf19 return} 0; \}\par
2028 {\cf21 #else}\par
2029 {\cf17 inline} {\cf18 int} RmDir({\cf17 const} {\cf18 char}* dir) \{ {\cf19 return} rmdir(dir); \}\par
2030 {\cf21 #endif}\par
2031 {\cf17 inline} {\cf18 bool} IsDir({\cf17 const} StatStruct& st) \{ {\cf19 return} S_ISDIR(st.st_mode); \}\par
2032 \par
2033 {\cf21 #endif  }{\cf20 // GTEST_OS_WINDOWS}\par
2034 \par
2035 {\cf17 inline} {\cf18 int} IsATTY({\cf18 int} fd) \{\par
2036   {\cf20 // DoIsATTY might change errno (for example ENOTTY in case you redirect stdout}\par
2037   {\cf20 // to a file on Linux), which is unexpected, so save the previous value, and}\par
2038   {\cf20 // restore it after the call.}\par
2039   {\cf18 int} savedErrno = errno;\par
2040   {\cf18 int} isAttyValue = DoIsATTY(fd);\par
2041   errno = savedErrno;\par
2042 \par
2043   {\cf19 return} isAttyValue;\par
2044 \}\par
2045 \par
2046 {\cf20 // Functions deprecated by MSVC 8.0.}\par
2047 \par
2048 GTEST_DISABLE_MSC_DEPRECATED_PUSH_()\par
2049 \par
2050 {\cf20 // ChDir(), FReopen(), FDOpen(), Read(), Write(), Close(), and}\par
2051 {\cf20 // StrError() aren't needed on Windows CE at this time and thus not}\par
2052 {\cf20 // defined there.}\par
2053 \par
2054 {\cf21 #if !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE &&           \\}\par
2055 {\cf21     !GTEST_OS_WINDOWS_RT && !GTEST_OS_ESP8266 && !GTEST_OS_XTENSA && \\}\par
2056 {\cf21     !GTEST_OS_QURT}\par
2057 {\cf17 inline} {\cf18 int} ChDir({\cf17 const} {\cf18 char}* dir) \{ {\cf19 return} chdir(dir); \}\par
2058 {\cf21 #endif}\par
2059 {\cf17 inline} FILE* FOpen({\cf17 const} {\cf18 char}* path, {\cf17 const} {\cf18 char}* mode) \{\par
2060 {\cf21 #if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MINGW}\par
2061   {\cf17 struct }wchar_codecvt : {\cf17 public} std::codecvt<wchar_t, char, std::mbstate_t> \{\};\par
2062   std::wstring_convert<wchar_codecvt> converter;\par
2063   std::wstring wide_path = converter.from_bytes(path);\par
2064   std::wstring wide_mode = converter.from_bytes(mode);\par
2065   {\cf19 return} _wfopen(wide_path.c_str(), wide_mode.c_str());\par
2066 {\cf21 #else   }{\cf20 // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MINGW}\par
2067   {\cf19 return} fopen(path, mode);\par
2068 {\cf21 #endif  }{\cf20 // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MINGW}\par
2069 \}\par
2070 {\cf21 #if !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_QURT}\par
2071 {\cf17 inline} FILE* FReopen({\cf17 const} {\cf18 char}* path, {\cf17 const} {\cf18 char}* mode, FILE* stream) \{\par
2072   {\cf19 return} freopen(path, mode, stream);\par
2073 \}\par
2074 {\cf17 inline} FILE* FDOpen({\cf18 int} fd, {\cf17 const} {\cf18 char}* mode) \{ {\cf19 return} fdopen(fd, mode); \}\par
2075 {\cf21 #endif}\par
2076 {\cf17 inline} {\cf18 int} FClose(FILE* fp) \{ {\cf19 return} fclose(fp); \}\par
2077 {\cf21 #if !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_QURT}\par
2078 {\cf17 inline} {\cf18 int} Read({\cf18 int} fd, {\cf18 void}* buf, {\cf18 unsigned} {\cf18 int} count) \{\par
2079   {\cf19 return} {\cf17 static_cast<}{\cf18 int}{\cf17 >}(read(fd, buf, count));\par
2080 \}\par
2081 {\cf17 inline} {\cf18 int} Write({\cf18 int} fd, {\cf17 const} {\cf18 void}* buf, {\cf18 unsigned} {\cf18 int} count) \{\par
2082   {\cf19 return} {\cf17 static_cast<}{\cf18 int}{\cf17 >}(write(fd, buf, count));\par
2083 \}\par
2084 {\cf17 inline} {\cf18 int} Close({\cf18 int} fd) \{ {\cf19 return} close(fd); \}\par
2085 {\cf17 inline} {\cf17 const} {\cf18 char}* StrError({\cf18 int} errnum) \{ {\cf19 return} strerror(errnum); \}\par
2086 {\cf21 #endif}\par
2087 {\cf17 inline} {\cf17 const} {\cf18 char}* GetEnv({\cf17 const} {\cf18 char}* name) \{\par
2088 {\cf21 #if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_WINDOWS_PHONE ||          \\}\par
2089 {\cf21     GTEST_OS_WINDOWS_RT || GTEST_OS_ESP8266 || GTEST_OS_XTENSA || \\}\par
2090 {\cf21     GTEST_OS_QURT}\par
2091   {\cf20 // We are on an embedded platform, which has no environment variables.}\par
2092   {\cf17 static_cast<}{\cf18 void}{\cf17 >}(name);  {\cf20 // To prevent 'unused argument' warning.}\par
2093   {\cf19 return} {\cf17 nullptr};\par
2094 {\cf21 #elif defined(__BORLANDC__) || defined(__SunOS_5_8) || defined(__SunOS_5_9)}\par
2095   {\cf20 // Environment variables which we programmatically clear will be set to the}\par
2096   {\cf20 // empty string rather than unset (NULL).  Handle that case.}\par
2097   {\cf17 const} {\cf18 char}* {\cf17 const} env = getenv(name);\par
2098   {\cf19 return} (env != {\cf17 nullptr} && env[0] != {\cf23 '\\0'}) ? env : {\cf17 nullptr};\par
2099 {\cf21 #else}\par
2100   {\cf19 return} getenv(name);\par
2101 {\cf21 #endif}\par
2102 \}\par
2103 \par
2104 GTEST_DISABLE_MSC_DEPRECATED_POP_()\par
2105 \par
2106 {\cf21 #if GTEST_OS_WINDOWS_MOBILE}\par
2107 {\cf20 // Windows CE has no C library. The abort() function is used in}\par
2108 {\cf20 // several places in Google Test. This implementation provides a reasonable}\par
2109 {\cf20 // imitation of standard behaviour.}\par
2110 [[noreturn]] {\cf18 void} Abort();\par
2111 {\cf21 #else}\par
2112 [[noreturn]] {\cf17 inline} {\cf18 void} Abort() \{ abort(); \}\par
2113 {\cf21 #endif  }{\cf20 // GTEST_OS_WINDOWS_MOBILE}\par
2114 \par
2115 \}  {\cf20 // namespace posix}\par
2116 \par
2117 {\cf20 // MSVC "deprecates" snprintf and issues warnings wherever it is used.  In}\par
2118 {\cf20 // order to avoid these warnings, we need to use _snprintf or _snprintf_s on}\par
2119 {\cf20 // MSVC-based platforms.  We map the GTEST_SNPRINTF_ macro to the appropriate}\par
2120 {\cf20 // function in order to achieve that.  We use macro definition here because}\par
2121 {\cf20 // snprintf is a variadic function.}\par
2122 {\cf21 #if _MSC_VER && !GTEST_OS_WINDOWS_MOBILE}\par
2123 {\cf20 // MSVC 2005 and above support variadic macros.}\par
2124 {\cf21 #define GTEST_SNPRINTF_(buffer, size, format, ...) \\}\par
2125 {\cf21   _snprintf_s(buffer, size, size, format, __VA_ARGS__)}\par
2126 {\cf21 #elif defined(_MSC_VER)}\par
2127 {\cf20 // Windows CE does not define _snprintf_s}\par
2128 {\cf21 #define GTEST_SNPRINTF_ _snprintf}\par
2129 {\cf21 #else}\par
2130 {\cf21 #define GTEST_SNPRINTF_ snprintf}\par
2131 {\cf21 #endif}\par
2132 \par
2133 {\cf20 // The biggest signed integer type the compiler supports.}\par
2134 {\cf20 //}\par
2135 {\cf20 // long long is guaranteed to be at least 64-bits in C++11.}\par
2136 {\cf17 using }BiggestInt = {\cf18 long} long;  {\cf20 // NOLINT}\par
2137 \par
2138 {\cf20 // The maximum number a BiggestInt can represent.}\par
2139 {\cf17 constexpr} BiggestInt kMaxBiggestInt = (std::numeric_limits<BiggestInt>::max)();\par
2140 \par
2141 {\cf20 // This template class serves as a compile-time function from size to}\par
2142 {\cf20 // type.  It maps a size in bytes to a primitive type with that}\par
2143 {\cf20 // size. e.g.}\par
2144 {\cf20 //}\par
2145 {\cf20 //   TypeWithSize<4>::UInt}\par
2146 {\cf20 //}\par
2147 {\cf20 // is typedef-ed to be unsigned int (unsigned integer made up of 4}\par
2148 {\cf20 // bytes).}\par
2149 {\cf20 //}\par
2150 {\cf20 // Such functionality should belong to STL, but I cannot find it}\par
2151 {\cf20 // there.}\par
2152 {\cf20 //}\par
2153 {\cf20 // Google Test uses this class in the implementation of floating-point}\par
2154 {\cf20 // comparison.}\par
2155 {\cf20 //}\par
2156 {\cf20 // For now it only handles UInt (unsigned int) as that's all Google Test}\par
2157 {\cf20 // needs.  Other types can be easily added in the future if need}\par
2158 {\cf20 // arises.}\par
2159 {\cf17 template} <{\cf18 size_t} size>\par
2160 {\cf17 class }TypeWithSize \{\par
2161  {\cf17 public}:\par
2162   {\cf20 // This prevents the user from using TypeWithSize<N> with incorrect}\par
2163   {\cf20 // values of N.}\par
2164   {\cf17 using }UInt = void;\par
2165 \};\par
2166 \par
2167 {\cf20 // The specialization for size 4.}\par
2168 {\cf17 template} <>\par
2169 {\cf17 class }TypeWithSize<4> \{\par
2170  {\cf17 public}:\par
2171   {\cf17 using }Int = std::int32_t;\par
2172   {\cf17 using }UInt = std::uint32_t;\par
2173 \};\par
2174 \par
2175 {\cf20 // The specialization for size 8.}\par
2176 {\cf17 template} <>\par
2177 {\cf17 class }TypeWithSize<8> \{\par
2178  {\cf17 public}:\par
2179   {\cf17 using }Int = std::int64_t;\par
2180   {\cf17 using }UInt = std::uint64_t;\par
2181 \};\par
2182 \par
2183 {\cf20 // Integer types of known sizes.}\par
2184 {\cf17 using }TimeInMillis = int64_t;  {\cf20 // Represents time in milliseconds.}\par
2185 \par
2186 {\cf20 // Utilities for command line flags and environment variables.}\par
2187 \par
2188 {\cf20 // Macro for referencing flags.}\par
2189 {\cf21 #if !defined(GTEST_FLAG)}\par
2190 {\cf21 #define GTEST_FLAG_NAME_(name) gtest_##name}\par
2191 {\cf21 #define GTEST_FLAG(name) FLAGS_gtest_##name}\par
2192 {\cf21 #endif  }{\cf20 // !defined(GTEST_FLAG)}\par
2193 \par
2194 {\cf20 // Pick a command line flags implementation.}\par
2195 {\cf21 #if GTEST_HAS_ABSL}\par
2196 \par
2197 {\cf20 // Macros for defining flags.}\par
2198 {\cf21 #define GTEST_DEFINE_bool_(name, default_val, doc) \\}\par
2199 {\cf21   ABSL_FLAG(bool, GTEST_FLAG_NAME_(name), default_val, doc)}\par
2200 {\cf21 #define GTEST_DEFINE_int32_(name, default_val, doc) \\}\par
2201 {\cf21   ABSL_FLAG(int32_t, GTEST_FLAG_NAME_(name), default_val, doc)}\par
2202 {\cf21 #define GTEST_DEFINE_string_(name, default_val, doc) \\}\par
2203 {\cf21   ABSL_FLAG(std::string, GTEST_FLAG_NAME_(name), default_val, doc)}\par
2204 \par
2205 {\cf20 // Macros for declaring flags.}\par
2206 {\cf21 #define GTEST_DECLARE_bool_(name) \\}\par
2207 {\cf21   ABSL_DECLARE_FLAG(bool, GTEST_FLAG_NAME_(name))}\par
2208 {\cf21 #define GTEST_DECLARE_int32_(name) \\}\par
2209 {\cf21   ABSL_DECLARE_FLAG(int32_t, GTEST_FLAG_NAME_(name))}\par
2210 {\cf21 #define GTEST_DECLARE_string_(name) \\}\par
2211 {\cf21   ABSL_DECLARE_FLAG(std::string, GTEST_FLAG_NAME_(name))}\par
2212 \par
2213 {\cf21 #define GTEST_FLAG_SAVER_ ::absl::FlagSaver}\par
2214 \par
2215 {\cf21 #define GTEST_FLAG_GET(name) ::absl::GetFlag(GTEST_FLAG(name))}\par
2216 {\cf21 #define GTEST_FLAG_SET(name, value) \\}\par
2217 {\cf21   (void)(::absl::SetFlag(&GTEST_FLAG(name), value))}\par
2218 {\cf21 #define GTEST_USE_OWN_FLAGFILE_FLAG_ 0}\par
2219 \par
2220 {\cf21 #else  }{\cf20 // GTEST_HAS_ABSL}\par
2221 \par
2222 {\cf20 // Macros for defining flags.}\par
2223 {\cf21 #define GTEST_DEFINE_bool_(name, default_val, doc)  \\}\par
2224 {\cf21   namespace testing \{                               \\}\par
2225 {\cf21   GTEST_API_ bool GTEST_FLAG(name) = (default_val); \\}\par
2226 {\cf21   \}                                                 \\}\par
2227 {\cf21   static_assert(true, "no-op to require trailing semicolon"})\par
2228 {\cf21 #define GTEST_DEFINE_int32_(name, default_val, doc)         \\}\par
2229 {\cf21   namespace testing \{                                       \\}\par
2230 {\cf21   GTEST_API_ std::int32_t GTEST_FLAG(name) = (default_val); \\}\par
2231 {\cf21   \}                                                         \\}\par
2232 {\cf21   static_assert(true, "no-op to require trailing semicolon"})\par
2233 {\cf21 #define GTEST_DEFINE_string_(name, default_val, doc)         \\}\par
2234 {\cf21   namespace testing \{                                        \\}\par
2235 {\cf21   GTEST_API_ ::std::string GTEST_FLAG(name) = (default_val); \\}\par
2236 {\cf21   \}                                                          \\}\par
2237 {\cf21   static_assert(true, "no-op to require trailing semicolon"})\par
2238 \par
2239 {\cf20 // Macros for declaring flags.}\par
2240 {\cf21 #define GTEST_DECLARE_bool_(name)          \\}\par
2241 {\cf21   namespace testing \{                      \\}\par
2242 {\cf21   GTEST_API_ extern bool GTEST_FLAG(name); \\}\par
2243 {\cf21   \}                                        \\}\par
2244 {\cf21   static_assert(true, "no-op to require trailing semicolon"})\par
2245 {\cf21 #define GTEST_DECLARE_int32_(name)                 \\}\par
2246 {\cf21   namespace testing \{                              \\}\par
2247 {\cf21   GTEST_API_ extern std::int32_t GTEST_FLAG(name); \\}\par
2248 {\cf21   \}                                                \\}\par
2249 {\cf21   static_assert(true, "no-op to require trailing semicolon"})\par
2250 {\cf21 #define GTEST_DECLARE_string_(name)                 \\}\par
2251 {\cf21   namespace testing \{                               \\}\par
2252 {\cf21   GTEST_API_ extern ::std::string GTEST_FLAG(name); \\}\par
2253 {\cf21   \}                                                 \\}\par
2254 {\cf21   static_assert(true, "no-op to require trailing semicolon"})\par
2255 \par
2256 {\cf21 #define GTEST_FLAG_SAVER_ ::testing::internal::GTestFlagSaver}\par
2257 \par
2258 {\cf21 #define GTEST_FLAG_GET(name) ::testing::GTEST_FLAG(name)}\par
2259 {\cf21 #define GTEST_FLAG_SET(name, value) (void)(::testing::GTEST_FLAG(name) = value)}\par
2260 {\cf21 #define GTEST_USE_OWN_FLAGFILE_FLAG_ 1}\par
2261 \par
2262 {\cf21 #endif  }{\cf20 // GTEST_HAS_ABSL}\par
2263 \par
2264 {\cf20 // Thread annotations}\par
2265 {\cf21 #if !defined(GTEST_EXCLUSIVE_LOCK_REQUIRED_)}\par
2266 {\cf21 #define GTEST_EXCLUSIVE_LOCK_REQUIRED_(locks)}\par
2267 {\cf21 #define GTEST_LOCK_EXCLUDED_(locks)}\par
2268 {\cf21 #endif  }{\cf20 // !defined(GTEST_EXCLUSIVE_LOCK_REQUIRED_)}\par
2269 \par
2270 {\cf20 // Parses 'str' for a 32-bit signed integer.  If successful, writes the result}\par
2271 {\cf20 // to *value and returns true; otherwise leaves *value unchanged and returns}\par
2272 {\cf20 // false.}\par
2273 GTEST_API_ {\cf18 bool} ParseInt32({\cf17 const} Message& src_text, {\cf17 const} {\cf18 char}* str,\par
2274                            int32_t* value);\par
2275 \par
2276 {\cf20 // Parses a bool/int32_t/string from the environment variable}\par
2277 {\cf20 // corresponding to the given Google Test flag.}\par
2278 {\cf18 bool} BoolFromGTestEnv({\cf17 const} {\cf18 char}* flag, {\cf18 bool} default_val);\par
2279 GTEST_API_ int32_t Int32FromGTestEnv({\cf17 const} {\cf18 char}* flag, int32_t default_val);\par
2280 std::string OutputFlagAlsoCheckEnvVar();\par
2281 {\cf17 const} {\cf18 char}* StringFromGTestEnv({\cf17 const} {\cf18 char}* flag, {\cf17 const} {\cf18 char}* default_val);\par
2282 \par
2283 \}  {\cf20 // namespace internal}\par
2284 \}  {\cf20 // namespace testing}\par
2285 \par
2286 {\cf21 #if !defined(GTEST_INTERNAL_DEPRECATED)}\par
2287 \par
2288 {\cf20 // Internal Macro to mark an API deprecated, for googletest usage only}\par
2289 {\cf20 // Usage: class GTEST_INTERNAL_DEPRECATED(message) MyClass or}\par
2290 {\cf20 // GTEST_INTERNAL_DEPRECATED(message) <return_type> myFunction(); Every usage of}\par
2291 {\cf20 // a deprecated entity will trigger a warning when compiled with}\par
2292 {\cf20 // `-Wdeprecated-declarations` option (clang, gcc, any __GNUC__ compiler).}\par
2293 {\cf20 // For msvc /W3 option will need to be used}\par
2294 {\cf20 // Note that for 'other' compilers this macro evaluates to nothing to prevent}\par
2295 {\cf20 // compilations errors.}\par
2296 {\cf21 #if defined(_MSC_VER)}\par
2297 {\cf21 #define GTEST_INTERNAL_DEPRECATED(message) __declspec(deprecated(message))}\par
2298 {\cf21 #elif defined(__GNUC__)}\par
2299 {\cf21 #define GTEST_INTERNAL_DEPRECATED(message) __attribute__((deprecated(message)))}\par
2300 {\cf21 #else}\par
2301 {\cf21 #define GTEST_INTERNAL_DEPRECATED(message)}\par
2302 {\cf21 #endif}\par
2303 \par
2304 {\cf21 #endif  }{\cf20 // !defined(GTEST_INTERNAL_DEPRECATED)}\par
2305 \par
2306 {\cf21 #if GTEST_HAS_ABSL}\par
2307 {\cf20 // Always use absl::any for UniversalPrinter<> specializations if googletest}\par
2308 {\cf20 // is built with absl support.}\par
2309 {\cf21 #define GTEST_INTERNAL_HAS_ANY 1}\par
2310 {\cf21 #include "absl/types/any.h"}\par
2311 {\cf17 namespace }testing \{\par
2312 {\cf17 namespace }internal \{\par
2313 {\cf17 using }Any = ::absl::any;\par
2314 \}  {\cf20 // namespace internal}\par
2315 \}  {\cf20 // namespace testing}\par
2316 {\cf21 #else}\par
2317 {\cf21 #ifdef __has_include}\par
2318 {\cf21 #if __has_include(<any>) && __cplusplus >= 201703L}\par
2319 {\cf20 // Otherwise for C++17 and higher use std::any for UniversalPrinter<>}\par
2320 {\cf20 // specializations.}\par
2321 {\cf21 #define GTEST_INTERNAL_HAS_ANY 1}\par
2322 {\cf21 #include <any>}\par
2323 {\cf17 namespace }testing \{\par
2324 {\cf17 namespace }internal \{\par
2325 {\cf17 using }Any = ::std::any;\par
2326 \}  {\cf20 // namespace internal}\par
2327 \}  {\cf20 // namespace testing}\par
2328 {\cf20 // The case where absl is configured NOT to alias std::any is not}\par
2329 {\cf20 // supported.}\par
2330 {\cf21 #endif  }{\cf20 // __has_include(<any>) && __cplusplus >= 201703L}\par
2331 {\cf21 #endif  }{\cf20 // __has_include}\par
2332 {\cf21 #endif  }{\cf20 // GTEST_HAS_ABSL}\par
2333 \par
2334 {\cf21 #if GTEST_HAS_ABSL}\par
2335 {\cf20 // Always use absl::optional for UniversalPrinter<> specializations if}\par
2336 {\cf20 // googletest is built with absl support.}\par
2337 {\cf21 #define GTEST_INTERNAL_HAS_OPTIONAL 1}\par
2338 {\cf21 #include "absl/types/optional.h"}\par
2339 {\cf17 namespace }testing \{\par
2340 {\cf17 namespace }internal \{\par
2341 {\cf17 template} <{\cf17 typename} T>\par
2342 {\cf17 using }Optional = ::absl::optional<T>;\par
2343 inline ::absl::nullopt_t Nullopt() \{ return ::absl::nullopt; \}\par
2344 \}  {\cf20 // namespace internal}\par
2345 \}  {\cf20 // namespace testing}\par
2346 {\cf21 #else}\par
2347 {\cf21 #ifdef __has_include}\par
2348 {\cf21 #if __has_include(<optional>) && __cplusplus >= 201703L}\par
2349 {\cf20 // Otherwise for C++17 and higher use std::optional for UniversalPrinter<>}\par
2350 {\cf20 // specializations.}\par
2351 {\cf21 #define GTEST_INTERNAL_HAS_OPTIONAL 1}\par
2352 {\cf21 #include <optional>}\par
2353 {\cf17 namespace }testing \{\par
2354 {\cf17 namespace }internal \{\par
2355 {\cf17 template} <{\cf17 typename} T>\par
2356 {\cf17 using }Optional = ::std::optional<T>;\par
2357 inline ::std::nullopt_t Nullopt() \{ return ::std::nullopt; \}\par
2358 \}  {\cf20 // namespace internal}\par
2359 \}  {\cf20 // namespace testing}\par
2360 {\cf20 // The case where absl is configured NOT to alias std::optional is not}\par
2361 {\cf20 // supported.}\par
2362 {\cf21 #endif  }{\cf20 // __has_include(<optional>) && __cplusplus >= 201703L}\par
2363 {\cf21 #endif  }{\cf20 // __has_include}\par
2364 {\cf21 #endif  }{\cf20 // GTEST_HAS_ABSL}\par
2365 \par
2366 {\cf21 #if GTEST_HAS_ABSL}\par
2367 {\cf20 // Always use absl::string_view for Matcher<> specializations if googletest}\par
2368 {\cf20 // is built with absl support.}\par
2369 {\cf21 #define GTEST_INTERNAL_HAS_STRING_VIEW 1}\par
2370 {\cf21 #include "absl/strings/string_view.h"}\par
2371 {\cf17 namespace }testing \{\par
2372 {\cf17 namespace }internal \{\par
2373 {\cf17 using }StringView = ::absl::string_view;\par
2374 \}  {\cf20 // namespace internal}\par
2375 \}  {\cf20 // namespace testing}\par
2376 {\cf21 #else}\par
2377 {\cf21 #ifdef __has_include}\par
2378 {\cf21 #if __has_include(<string_view>) && __cplusplus >= 201703L}\par
2379 {\cf20 // Otherwise for C++17 and higher use std::string_view for Matcher<>}\par
2380 {\cf20 // specializations.}\par
2381 {\cf21 #define GTEST_INTERNAL_HAS_STRING_VIEW 1}\par
2382 {\cf21 #include <string_view>}\par
2383 {\cf17 namespace }testing \{\par
2384 {\cf17 namespace }internal \{\par
2385 {\cf17 using }StringView = ::std::string_view;\par
2386 \}  {\cf20 // namespace internal}\par
2387 \}  {\cf20 // namespace testing}\par
2388 {\cf20 // The case where absl is configured NOT to alias std::string_view is not}\par
2389 {\cf20 // supported.}\par
2390 {\cf21 #endif  }{\cf20 // __has_include(<string_view>) && __cplusplus >= 201703L}\par
2391 {\cf21 #endif  }{\cf20 // __has_include}\par
2392 {\cf21 #endif  }{\cf20 // GTEST_HAS_ABSL}\par
2393 \par
2394 {\cf21 #if GTEST_HAS_ABSL}\par
2395 {\cf20 // Always use absl::variant for UniversalPrinter<> specializations if googletest}\par
2396 {\cf20 // is built with absl support.}\par
2397 {\cf21 #define GTEST_INTERNAL_HAS_VARIANT 1}\par
2398 {\cf21 #include "absl/types/variant.h"}\par
2399 {\cf17 namespace }testing \{\par
2400 {\cf17 namespace }internal \{\par
2401 {\cf17 template} <{\cf17 typename}... T>\par
2402 {\cf17 using }Variant = ::absl::variant<T...>;\par
2403 \}  {\cf20 // namespace internal}\par
2404 \}  {\cf20 // namespace testing}\par
2405 {\cf21 #else}\par
2406 {\cf21 #ifdef __has_include}\par
2407 {\cf21 #if __has_include(<variant>) && __cplusplus >= 201703L}\par
2408 {\cf20 // Otherwise for C++17 and higher use std::variant for UniversalPrinter<>}\par
2409 {\cf20 // specializations.}\par
2410 {\cf21 #define GTEST_INTERNAL_HAS_VARIANT 1}\par
2411 {\cf21 #include <variant>}\par
2412 {\cf17 namespace }testing \{\par
2413 {\cf17 namespace }internal \{\par
2414 {\cf17 template} <{\cf17 typename}... T>\par
2415 {\cf17 using }Variant = ::std::variant<T...>;\par
2416 \}  {\cf20 // namespace internal}\par
2417 \}  {\cf20 // namespace testing}\par
2418 {\cf20 // The case where absl is configured NOT to alias std::variant is not supported.}\par
2419 {\cf21 #endif  }{\cf20 // __has_include(<variant>) && __cplusplus >= 201703L}\par
2420 {\cf21 #endif  }{\cf20 // __has_include}\par
2421 {\cf21 #endif  }{\cf20 // GTEST_HAS_ABSL}\par
2422 \par
2423 {\cf21 #endif  }{\cf20 // GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest-death-test-internal.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googletest/include/gtest/internal/gtest-death-test-internal.h}
{\xe \v lib/googletest-main/googletest/include/gtest/internal/gtest-death-test-internal.h}
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2005, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // The Google C++ Testing and Mocking Framework (Google Test)}\par
31 {\cf20 //}\par
32 {\cf20 // This header file defines internal utilities needed for implementing}\par
33 {\cf20 // death tests.  They are subject to change without notice.}\par
34 \par
35 {\cf20 // IWYU pragma: private, include "gtest/gtest.h"}\par
36 {\cf20 // IWYU pragma: friend gtest/.*}\par
37 {\cf20 // IWYU pragma: friend gmock/.*}\par
38 \par
39 {\cf21 #ifndef GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_DEATH_TEST_INTERNAL_H_}\par
40 {\cf21 #define GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_DEATH_TEST_INTERNAL_H_}\par
41 \par
42 {\cf21 #include <stdio.h>}\par
43 \par
44 {\cf21 #include <memory>}\par
45 \par
46 {\cf21 #include "gtest/gtest-matchers.h"}\par
47 {\cf21 #include "gtest/internal/gtest-internal.h"}\par
48 \par
49 GTEST_DECLARE_string_(internal_run_death_test);\par
50 \par
51 {\cf17 namespace }testing \{\par
52 {\cf17 namespace }internal \{\par
53 \par
54 {\cf20 // Names of the flags (needed for parsing Google Test flags).}\par
55 {\cf17 const} {\cf18 char} kDeathTestStyleFlag[] = {\cf22 "death_test_style"};\par
56 {\cf17 const} {\cf18 char} kDeathTestUseFork[] = {\cf22 "death_test_use_fork"};\par
57 {\cf17 const} {\cf18 char} kInternalRunDeathTestFlag[] = {\cf22 "internal_run_death_test"};\par
58 \par
59 {\cf21 #if GTEST_HAS_DEATH_TEST}\par
60 \par
61 GTEST_DISABLE_MSC_WARNINGS_PUSH_(4251 \\\par
62 {\cf20 /* class A needs to have dll-interface to be used by clients of class B */})\par
63 \par
64 {\cf20 // DeathTest is a class that hides much of the complexity of the}\par
65 {\cf20 // GTEST_DEATH_TEST_ macro.  It is abstract; its static Create method}\par
66 {\cf20 // returns a concrete class that depends on the prevailing death test}\par
67 {\cf20 // style, as defined by the --gtest_death_test_style and/or}\par
68 {\cf20 // --gtest_internal_run_death_test flags.}\par
69 \par
70 {\cf20 // In describing the results of death tests, these terms are used with}\par
71 {\cf20 // the corresponding definitions:}\par
72 {\cf20 //}\par
73 {\cf20 // exit status:  The integer exit information in the format specified}\par
74 {\cf20 //               by wait(2)}\par
75 {\cf20 // exit code:    The integer code passed to exit(3), _exit(2), or}\par
76 {\cf20 //               returned from main()}\par
77 class GTEST_API_ DeathTest \{\par
78  {\cf17 public}:\par
79   {\cf20 // Create returns false if there was an error determining the}\par
80   {\cf20 // appropriate action to take for the current death test; for example,}\par
81   {\cf20 // if the gtest_death_test_style flag is set to an invalid value.}\par
82   {\cf20 // The LastMessage method will return a more detailed message in that}\par
83   {\cf20 // case.  Otherwise, the DeathTest pointer pointed to by the "test"}\par
84   {\cf20 // argument is set.  If the death test should be skipped, the pointer}\par
85   {\cf20 // is set to NULL; otherwise, it is set to the address of a new concrete}\par
86   {\cf20 // DeathTest object that controls the execution of the current test.}\par
87   {\cf17 static} {\cf18 bool} Create({\cf17 const} {\cf18 char}* statement, Matcher<const std::string&> matcher,\par
88                      {\cf17 const} {\cf18 char}* file, {\cf18 int} line, DeathTest** test);\par
89   DeathTest();\par
90   {\cf17 virtual} ~DeathTest() \{\}\par
91 \par
92   {\cf20 // A helper class that aborts a death test when it's deleted.}\par
93   {\cf17 class }ReturnSentinel \{\par
94    {\cf17 public}:\par
95     {\cf17 explicit} ReturnSentinel(DeathTest* test) : test_(test) \{\}\par
96     ~ReturnSentinel() \{ test_->Abort(TEST_ENCOUNTERED_RETURN_STATEMENT); \}\par
97 \par
98    {\cf17 private}:\par
99     DeathTest* {\cf17 const} test_;\par
100     ReturnSentinel({\cf17 const} ReturnSentinel&) = {\cf17 delete};\par
101     ReturnSentinel& operator=({\cf17 const} ReturnSentinel&) = {\cf17 delete};\par
102   \} GTEST_ATTRIBUTE_UNUSED_;\par
103 \par
104   {\cf20 // An enumeration of possible roles that may be taken when a death}\par
105   {\cf20 // test is encountered.  EXECUTE means that the death test logic should}\par
106   {\cf20 // be executed immediately.  OVERSEE means that the program should prepare}\par
107   {\cf20 // the appropriate environment for a child process to execute the death}\par
108   {\cf20 // test, then wait for it to complete.}\par
109   {\cf17 enum} TestRole \{ OVERSEE_TEST, EXECUTE_TEST \};\par
110 \par
111   {\cf20 // An enumeration of the three reasons that a test might be aborted.}\par
112   {\cf17 enum} AbortReason \{\par
113     TEST_ENCOUNTERED_RETURN_STATEMENT,\par
114     TEST_THREW_EXCEPTION,\par
115     TEST_DID_NOT_DIE\par
116   \};\par
117 \par
118   {\cf20 // Assumes one of the above roles.}\par
119   {\cf17 virtual} TestRole AssumeRole() = 0;\par
120 \par
121   {\cf20 // Waits for the death test to finish and returns its status.}\par
122   {\cf17 virtual} {\cf18 int} Wait() = 0;\par
123 \par
124   {\cf20 // Returns true if the death test passed; that is, the test process}\par
125   {\cf20 // exited during the test, its exit status matches a user-supplied}\par
126   {\cf20 // predicate, and its stderr output matches a user-supplied regular}\par
127   {\cf20 // expression.}\par
128   {\cf20 // The user-supplied predicate may be a macro expression rather}\par
129   {\cf20 // than a function pointer or functor, or else Wait and Passed could}\par
130   {\cf20 // be combined.}\par
131   {\cf17 virtual} {\cf18 bool} Passed({\cf18 bool} exit_status_ok) = 0;\par
132 \par
133   {\cf20 // Signals that the death test did not die as expected.}\par
134   {\cf17 virtual} {\cf18 void} Abort(AbortReason reason) = 0;\par
135 \par
136   {\cf20 // Returns a human-readable outcome message regarding the outcome of}\par
137   {\cf20 // the last death test.}\par
138   {\cf17 static} {\cf17 const} {\cf18 char}* LastMessage();\par
139 \par
140   {\cf17 static} {\cf18 void} set_last_death_test_message({\cf17 const} std::string& message);\par
141 \par
142  {\cf17 private}:\par
143   {\cf20 // A string containing a description of the outcome of the last death test.}\par
144   {\cf17 static} std::string last_death_test_message_;\par
145 \par
146   DeathTest({\cf17 const} DeathTest&) = {\cf17 delete};\par
147   DeathTest& operator=({\cf17 const} DeathTest&) = {\cf17 delete};\par
148 \};\par
149 \par
150 GTEST_DISABLE_MSC_WARNINGS_POP_()  {\cf20 //  4251}\par
151 \par
152 {\cf20 // Factory interface for death tests.  May be mocked out for testing.}\par
153 class DeathTestFactory \{\par
154  {\cf17 public}:\par
155   {\cf17 virtual} ~DeathTestFactory() \{\}\par
156   {\cf17 virtual} {\cf18 bool} Create({\cf17 const} {\cf18 char}* statement,\par
157                       Matcher<const std::string&> matcher, {\cf17 const} {\cf18 char}* file,\par
158                       {\cf18 int} line, DeathTest** test) = 0;\par
159 \};\par
160 \par
161 {\cf20 // A concrete DeathTestFactory implementation for normal use.}\par
162 {\cf17 class }DefaultDeathTestFactory : {\cf17 public} DeathTestFactory \{\par
163  {\cf17 public}:\par
164   {\cf18 bool} Create({\cf17 const} {\cf18 char}* statement, Matcher<const std::string&> matcher,\par
165               {\cf17 const} {\cf18 char}* file, {\cf18 int} line, DeathTest** test) {\cf17 override};\par
166 \};\par
167 \par
168 {\cf20 // Returns true if exit_status describes a process that was terminated}\par
169 {\cf20 // by a signal, or exited normally with a nonzero exit code.}\par
170 GTEST_API_ {\cf18 bool} ExitedUnsuccessfully({\cf18 int} exit_status);\par
171 \par
172 {\cf20 // A string passed to EXPECT_DEATH (etc.) is caught by one of these overloads}\par
173 {\cf20 // and interpreted as a regex (rather than an Eq matcher) for legacy}\par
174 {\cf20 // compatibility.}\par
175 {\cf17 inline} Matcher<const ::std::string&> MakeDeathTestMatcher(\par
176     ::testing::internal::RE regex) \{\par
177   {\cf19 return} ContainsRegex(regex.pattern());\par
178 \}\par
179 {\cf17 inline} Matcher<const ::std::string&> MakeDeathTestMatcher({\cf17 const} {\cf18 char}* regex) \{\par
180   {\cf19 return} ContainsRegex(regex);\par
181 \}\par
182 {\cf17 inline} Matcher<const ::std::string&> MakeDeathTestMatcher(\par
183     const ::std::string& regex) \{\par
184   {\cf19 return} ContainsRegex(regex);\par
185 \}\par
186 \par
187 {\cf20 // If a Matcher<const ::std::string&> is passed to EXPECT_DEATH (etc.), it's}\par
188 {\cf20 // used directly.}\par
189 {\cf17 inline} Matcher<const ::std::string&> MakeDeathTestMatcher(\par
190     Matcher<const ::std::string&> matcher) \{\par
191   {\cf19 return} matcher;\par
192 \}\par
193 \par
194 {\cf20 // Traps C++ exceptions escaping statement and reports them as test}\par
195 {\cf20 // failures. Note that trapping SEH exceptions is not implemented here.}\par
196 {\cf21 #if GTEST_HAS_EXCEPTIONS}\par
197 {\cf21 #define GTEST_EXECUTE_DEATH_TEST_STATEMENT_(statement, death_test)           \\}\par
198 {\cf21   try \{                                                                      \\}\par
199 {\cf21     GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement);               \\}\par
200 {\cf21   \} catch (const ::std::exception& gtest_exception) \{                        \\}\par
201 {\cf21     fprintf(                                                                 \\}\par
202 {\cf21         stderr,                                                              \\}\par
203 {\cf21         "\\n%s: Caught std::exception-derived exception escaping the "}        \\\par
204         "death test statement. Exception message: %s\\n",                     \\\par
205         ::testing::internal::FormatFileLocation(__FILE__, __LINE__).c_str(), \\\par
206         gtest_exception.what());                                             \\\par
207     fflush(stderr);                                                          \\\par
208     death_test->Abort(::testing::internal::DeathTest::TEST_THREW_EXCEPTION); \\\par
209   \} catch (...) \{                                                            \\\par
210     death_test->Abort(::testing::internal::DeathTest::TEST_THREW_EXCEPTION); \\\par
211   \}\par
212 \par
213 {\cf21 #else}\par
214 {\cf21 #define GTEST_EXECUTE_DEATH_TEST_STATEMENT_(statement, death_test) \\}\par
215 {\cf21   GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement)}\par
216 \par
217 {\cf21 #endif}\par
218 \par
219 {\cf20 // This macro is for implementing ASSERT_DEATH*, EXPECT_DEATH*,}\par
220 {\cf20 // ASSERT_EXIT*, and EXPECT_EXIT*.}\par
221 {\cf21 #define GTEST_DEATH_TEST_(statement, predicate, regex_or_matcher, fail)        \\}\par
222 {\cf21   GTEST_AMBIGUOUS_ELSE_BLOCKER_                                                \\}\par
223 {\cf21   if (::testing::internal::AlwaysTrue()) \{                                     \\}\par
224 {\cf21     ::testing::internal::DeathTest* gtest_dt;                                  \\}\par
225 {\cf21     if (!::testing::internal::DeathTest::Create(                               \\}\par
226 {\cf21             #statement,                                                        \\}\par
227 {\cf21             ::testing::internal::MakeDeathTestMatcher(regex_or_matcher),       \\}\par
228 {\cf21             __FILE__, __LINE__, &gtest_dt)) \{                                  \\}\par
229 {\cf21       goto GTEST_CONCAT_TOKEN_(gtest_label_, __LINE__);                        \\}\par
230 {\cf21     \}                                                                          \\}\par
231 {\cf21     if (gtest_dt != nullptr) \{                                                 \\}\par
232 {\cf21       std::unique_ptr< ::testing::internal::DeathTest> gtest_dt_ptr(gtest_dt); \\}\par
233 {\cf21       switch (gtest_dt->AssumeRole()) \{                                        \\}\par
234 {\cf21         case ::testing::internal::DeathTest::OVERSEE_TEST:                     \\}\par
235 {\cf21           if (!gtest_dt->Passed(predicate(gtest_dt->Wait()))) \{                \\}\par
236 {\cf21             goto GTEST_CONCAT_TOKEN_(gtest_label_, __LINE__);                  \\}\par
237 {\cf21           \}                                                                    \\}\par
238 {\cf21           break;                                                               \\}\par
239 {\cf21         case ::testing::internal::DeathTest::EXECUTE_TEST: \{                   \\}\par
240 {\cf21           ::testing::internal::DeathTest::ReturnSentinel gtest_sentinel(       \\}\par
241 {\cf21               gtest_dt);                                                       \\}\par
242 {\cf21           GTEST_EXECUTE_DEATH_TEST_STATEMENT_(statement, gtest_dt);            \\}\par
243 {\cf21           gtest_dt->Abort(::testing::internal::DeathTest::TEST_DID_NOT_DIE);   \\}\par
244 {\cf21           break;                                                               \\}\par
245 {\cf21         \}                                                                      \\}\par
246 {\cf21       \}                                                                        \\}\par
247 {\cf21     \}                                                                          \\}\par
248 {\cf21   \} else                                                                       \\}\par
249 {\cf21     GTEST_CONCAT_TOKEN_(gtest_label_, __LINE__)                                \\}\par
250 {\cf21         : fail(::testing::internal::DeathTest::LastMessage())}\par
251 {\cf20 // The symbol "fail" here expands to something into which a message}\par
252 {\cf20 // can be streamed.}\par
253 \par
254 {\cf20 // This macro is for implementing ASSERT/EXPECT_DEBUG_DEATH when compiled in}\par
255 {\cf20 // NDEBUG mode. In this case we need the statements to be executed and the macro}\par
256 {\cf20 // must accept a streamed message even though the message is never printed.}\par
257 {\cf20 // The regex object is not evaluated, but it is used to prevent "unused"}\par
258 {\cf20 // warnings and to avoid an expression that doesn't compile in debug mode.}\par
259 {\cf21 #define GTEST_EXECUTE_STATEMENT_(statement, regex_or_matcher)    \\}\par
260 {\cf21   GTEST_AMBIGUOUS_ELSE_BLOCKER_                                  \\}\par
261 {\cf21   if (::testing::internal::AlwaysTrue()) \{                       \\}\par
262 {\cf21     GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement);   \\}\par
263 {\cf21   \} else if (!::testing::internal::AlwaysTrue()) \{               \\}\par
264 {\cf21     ::testing::internal::MakeDeathTestMatcher(regex_or_matcher); \\}\par
265 {\cf21   \} else                                                         \\}\par
266 {\cf21     ::testing::Message()}\par
267 \par
268 {\cf20 // A class representing the parsed contents of the}\par
269 {\cf20 // --gtest_internal_run_death_test flag, as it existed when}\par
270 {\cf20 // RUN_ALL_TESTS was called.}\par
271 {\cf17 class }InternalRunDeathTestFlag \{\par
272  {\cf17 public}:\par
273   InternalRunDeathTestFlag({\cf17 const} std::string& a_file, {\cf18 int} a_line, {\cf18 int} an_index,\par
274                            {\cf18 int} a_write_fd)\par
275       : file_(a_file), line_(a_line), index_(an_index), write_fd_(a_write_fd) \{\}\par
276 \par
277   ~InternalRunDeathTestFlag() \{\par
278     {\cf19 if} (write_fd_ >= 0) posix::Close(write_fd_);\par
279   \}\par
280 \par
281   {\cf17 const} std::string& file(){\cf17  const }\{ {\cf19 return} file_; \}\par
282   {\cf18 int} line(){\cf17  const }\{ {\cf19 return} line_; \}\par
283   {\cf18 int} index(){\cf17  const }\{ {\cf19 return} index_; \}\par
284   {\cf18 int} write_fd(){\cf17  const }\{ {\cf19 return} write_fd_; \}\par
285 \par
286  {\cf17 private}:\par
287   std::string file_;\par
288   {\cf18 int} line_;\par
289   {\cf18 int} index_;\par
290   {\cf18 int} write_fd_;\par
291 \par
292   InternalRunDeathTestFlag({\cf17 const} InternalRunDeathTestFlag&) = {\cf17 delete};\par
293   InternalRunDeathTestFlag& operator=({\cf17 const} InternalRunDeathTestFlag&) = {\cf17 delete};\par
294 \};\par
295 \par
296 {\cf20 // Returns a newly created InternalRunDeathTestFlag object with fields}\par
297 {\cf20 // initialized from the GTEST_FLAG(internal_run_death_test) flag if}\par
298 {\cf20 // the flag is specified; otherwise returns NULL.}\par
299 InternalRunDeathTestFlag* ParseInternalRunDeathTestFlag();\par
300 \par
301 {\cf21 #endif  }{\cf20 // GTEST_HAS_DEATH_TEST}\par
302 \par
303 \}  {\cf20 // namespace internal}\par
304 \}  {\cf20 // namespace testing}\par
305 \par
306 {\cf21 #endif  }{\cf20 // GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_DEATH_TEST_INTERNAL_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest-filepath.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googletest/include/gtest/internal/gtest-filepath.h}
{\xe \v lib/googletest-main/googletest/include/gtest/internal/gtest-filepath.h}
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2008, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // Google Test filepath utilities}\par
31 {\cf20 //}\par
32 {\cf20 // This header file declares classes and functions used internally by}\par
33 {\cf20 // Google Test.  They are subject to change without notice.}\par
34 {\cf20 //}\par
35 {\cf20 // This file is #included in gtest/internal/gtest-internal.h.}\par
36 {\cf20 // Do not include this header file separately!}\par
37 \par
38 {\cf20 // IWYU pragma: private, include "gtest/gtest.h"}\par
39 {\cf20 // IWYU pragma: friend gtest/.*}\par
40 {\cf20 // IWYU pragma: friend gmock/.*}\par
41 \par
42 {\cf21 #ifndef GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_FILEPATH_H_}\par
43 {\cf21 #define GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_FILEPATH_H_}\par
44 \par
45 {\cf21 #include "gtest/internal/gtest-string.h"}\par
46 \par
47 GTEST_DISABLE_MSC_WARNINGS_PUSH_(4251 \\\par
48 {\cf20 /* class A needs to have dll-interface to be used by clients of class B */})\par
49 \par
50 namespace testing \{\par
51 {\cf17 namespace }internal \{\par
52 \par
53 {\cf20 // FilePath - a class for file and directory pathname manipulation which}\par
54 {\cf20 // handles platform-specific conventions (like the pathname separator).}\par
55 {\cf20 // Used for helper functions for naming files in a directory for xml output.}\par
56 {\cf20 // Except for Set methods, all methods are const or static, which provides an}\par
57 {\cf20 // "immutable value object" -- useful for peace of mind.}\par
58 {\cf20 // A FilePath with a value ending in a path separator ("like/this/") represents}\par
59 {\cf20 // a directory, otherwise it is assumed to represent a file. In either case,}\par
60 {\cf20 // it may or may not represent an actual file or directory in the file system.}\par
61 {\cf20 // Names are NOT checked for syntax correctness -- no checking for illegal}\par
62 {\cf20 // characters, malformed paths, etc.}\par
63 \par
64 {\cf17 class }GTEST_API_ FilePath \{\par
65  {\cf17 public}:\par
66   FilePath() : pathname_({\cf22 ""}) \{\}\par
67   FilePath({\cf17 const} FilePath& rhs) : pathname_(rhs.pathname_) \{\}\par
68 \par
69   {\cf17 explicit} FilePath({\cf17 const} std::string& pathname) : pathname_(pathname) \{\par
70     Normalize();\par
71   \}\par
72 \par
73   FilePath& operator=({\cf17 const} FilePath& rhs) \{\par
74     Set(rhs);\par
75     {\cf19 return} *{\cf17 this};\par
76   \}\par
77 \par
78   {\cf18 void} Set({\cf17 const} FilePath& rhs) \{ pathname_ = rhs.pathname_; \}\par
79 \par
80   {\cf17 const} std::string& string(){\cf17  const }\{ {\cf19 return} pathname_; \}\par
81   {\cf17 const} {\cf18 char}* c_str(){\cf17  const }\{ {\cf19 return} pathname_.c_str(); \}\par
82 \par
83   {\cf20 // Returns the current working directory, or "" if unsuccessful.}\par
84   {\cf17 static} FilePath GetCurrentDir();\par
85 \par
86   {\cf20 // Given directory = "dir", base_name = "test", number = 0,}\par
87   {\cf20 // extension = "xml", returns "dir/test.xml". If number is greater}\par
88   {\cf20 // than zero (e.g., 12), returns "dir/test_12.xml".}\par
89   {\cf20 // On Windows platform, uses \\ as the separator rather than /.}\par
90   {\cf17 static} FilePath MakeFileName({\cf17 const} FilePath& directory,\par
91                                {\cf17 const} FilePath& base_name, {\cf18 int} number,\par
92                                {\cf17 const} {\cf18 char}* extension);\par
93 \par
94   {\cf20 // Given directory = "dir", relative_path = "test.xml",}\par
95   {\cf20 // returns "dir/test.xml".}\par
96   {\cf20 // On Windows, uses \\ as the separator rather than /.}\par
97   {\cf17 static} FilePath ConcatPaths({\cf17 const} FilePath& directory,\par
98                               {\cf17 const} FilePath& relative_path);\par
99 \par
100   {\cf20 // Returns a pathname for a file that does not currently exist. The pathname}\par
101   {\cf20 // will be directory/base_name.extension or}\par
102   {\cf20 // directory/base_name_<number>.extension if directory/base_name.extension}\par
103   {\cf20 // already exists. The number will be incremented until a pathname is found}\par
104   {\cf20 // that does not already exist.}\par
105   {\cf20 // Examples: 'dir/foo_test.xml' or 'dir/foo_test_1.xml'.}\par
106   {\cf20 // There could be a race condition if two or more processes are calling this}\par
107   {\cf20 // function at the same time -- they could both pick the same filename.}\par
108   {\cf17 static} FilePath GenerateUniqueFileName({\cf17 const} FilePath& directory,\par
109                                          {\cf17 const} FilePath& base_name,\par
110                                          {\cf17 const} {\cf18 char}* extension);\par
111 \par
112   {\cf20 // Returns true if and only if the path is "".}\par
113   {\cf18 bool} IsEmpty(){\cf17  const }\{ {\cf19 return} pathname_.empty(); \}\par
114 \par
115   {\cf20 // If input name has a trailing separator character, removes it and returns}\par
116   {\cf20 // the name, otherwise return the name string unmodified.}\par
117   {\cf20 // On Windows platform, uses \\ as the separator, other platforms use /.}\par
118   FilePath RemoveTrailingPathSeparator() {\cf17 const};\par
119 \par
120   {\cf20 // Returns a copy of the FilePath with the directory part removed.}\par
121   {\cf20 // Example: FilePath("path/to/file").RemoveDirectoryName() returns}\par
122   {\cf20 // FilePath("file"). If there is no directory part ("just_a_file"), it returns}\par
123   {\cf20 // the FilePath unmodified. If there is no file part ("just_a_dir/") it}\par
124   {\cf20 // returns an empty FilePath ("").}\par
125   {\cf20 // On Windows platform, '\\' is the path separator, otherwise it is '/'.}\par
126   FilePath RemoveDirectoryName() {\cf17 const};\par
127 \par
128   {\cf20 // RemoveFileName returns the directory path with the filename removed.}\par
129   {\cf20 // Example: FilePath("path/to/file").RemoveFileName() returns "path/to/".}\par
130   {\cf20 // If the FilePath is "a_file" or "/a_file", RemoveFileName returns}\par
131   {\cf20 // FilePath("./") or, on Windows, FilePath(".\\\\"). If the filepath does}\par
132   {\cf20 // not have a file, like "just/a/dir/", it returns the FilePath unmodified.}\par
133   {\cf20 // On Windows platform, '\\' is the path separator, otherwise it is '/'.}\par
134   FilePath RemoveFileName() {\cf17 const};\par
135 \par
136   {\cf20 // Returns a copy of the FilePath with the case-insensitive extension removed.}\par
137   {\cf20 // Example: FilePath("dir/file.exe").RemoveExtension("EXE") returns}\par
138   {\cf20 // FilePath("dir/file"). If a case-insensitive extension is not}\par
139   {\cf20 // found, returns a copy of the original FilePath.}\par
140   FilePath RemoveExtension({\cf17 const} {\cf18 char}* extension) {\cf17 const};\par
141 \par
142   {\cf20 // Creates directories so that path exists. Returns true if successful or if}\par
143   {\cf20 // the directories already exist; returns false if unable to create}\par
144   {\cf20 // directories for any reason. Will also return false if the FilePath does}\par
145   {\cf20 // not represent a directory (that is, it doesn't end with a path separator).}\par
146   {\cf18 bool} CreateDirectoriesRecursively() {\cf17 const};\par
147 \par
148   {\cf20 // Create the directory so that path exists. Returns true if successful or}\par
149   {\cf20 // if the directory already exists; returns false if unable to create the}\par
150   {\cf20 // directory for any reason, including if the parent directory does not}\par
151   {\cf20 // exist. Not named "CreateDirectory" because that's a macro on Windows.}\par
152   {\cf18 bool} CreateFolder() {\cf17 const};\par
153 \par
154   {\cf20 // Returns true if FilePath describes something in the file-system,}\par
155   {\cf20 // either a file, directory, or whatever, and that something exists.}\par
156   {\cf18 bool} FileOrDirectoryExists() {\cf17 const};\par
157 \par
158   {\cf20 // Returns true if pathname describes a directory in the file-system}\par
159   {\cf20 // that exists.}\par
160   {\cf18 bool} DirectoryExists() {\cf17 const};\par
161 \par
162   {\cf20 // Returns true if FilePath ends with a path separator, which indicates that}\par
163   {\cf20 // it is intended to represent a directory. Returns false otherwise.}\par
164   {\cf20 // This does NOT check that a directory (or file) actually exists.}\par
165   {\cf18 bool} IsDirectory() {\cf17 const};\par
166 \par
167   {\cf20 // Returns true if pathname describes a root directory. (Windows has one}\par
168   {\cf20 // root directory per disk drive.)}\par
169   {\cf18 bool} IsRootDirectory() {\cf17 const};\par
170 \par
171   {\cf20 // Returns true if pathname describes an absolute path.}\par
172   {\cf18 bool} IsAbsolutePath() {\cf17 const};\par
173 \par
174  {\cf17 private}:\par
175   {\cf20 // Replaces multiple consecutive separators with a single separator.}\par
176   {\cf20 // For example, "bar///foo" becomes "bar/foo". Does not eliminate other}\par
177   {\cf20 // redundancies that might be in a pathname involving "." or "..".}\par
178   {\cf20 //}\par
179   {\cf20 // A pathname with multiple consecutive separators may occur either through}\par
180   {\cf20 // user error or as a result of some scripts or APIs that generate a pathname}\par
181   {\cf20 // with a trailing separator. On other platforms the same API or script}\par
182   {\cf20 // may NOT generate a pathname with a trailing "/". Then elsewhere that}\par
183   {\cf20 // pathname may have another "/" and pathname components added to it,}\par
184   {\cf20 // without checking for the separator already being there.}\par
185   {\cf20 // The script language and operating system may allow paths like "foo//bar"}\par
186   {\cf20 // but some of the functions in FilePath will not handle that correctly. In}\par
187   {\cf20 // particular, RemoveTrailingPathSeparator() only removes one separator, and}\par
188   {\cf20 // it is called in CreateDirectoriesRecursively() assuming that it will change}\par
189   {\cf20 // a pathname from directory syntax (trailing separator) to filename syntax.}\par
190   {\cf20 //}\par
191   {\cf20 // On Windows this method also replaces the alternate path separator '/' with}\par
192   {\cf20 // the primary path separator '\\\\', so that for example "bar\\\\/\\\\foo" becomes}\par
193   {\cf20 // "bar\\\\foo".}\par
194 \par
195   {\cf18 void} Normalize();\par
196 \par
197   {\cf20 // Returns a pointer to the last occurrence of a valid path separator in}\par
198   {\cf20 // the FilePath. On Windows, for example, both '/' and '\\' are valid path}\par
199   {\cf20 // separators. Returns NULL if no path separator was found.}\par
200   {\cf17 const} {\cf18 char}* FindLastPathSeparator() {\cf17 const};\par
201 \par
202   std::string pathname_;\par
203 \};  {\cf20 // class FilePath}\par
204 \par
205 \}  {\cf20 // namespace internal}\par
206 \}  {\cf20 // namespace testing}\par
207 \par
208 GTEST_DISABLE_MSC_WARNINGS_POP_()  {\cf20 //  4251}\par
209 \par
210 {\cf21 #endif  }{\cf20 // GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_FILEPATH_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest-internal.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h}
{\xe \v lib/googletest-main/googletest/include/gtest/internal/gtest-internal.h}
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2005, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // The Google C++ Testing and Mocking Framework (Google Test)}\par
31 {\cf20 //}\par
32 {\cf20 // This header file declares functions and macros used internally by}\par
33 {\cf20 // Google Test.  They are subject to change without notice.}\par
34 \par
35 {\cf20 // IWYU pragma: private, include "gtest/gtest.h"}\par
36 {\cf20 // IWYU pragma: friend gtest/.*}\par
37 {\cf20 // IWYU pragma: friend gmock/.*}\par
38 \par
39 {\cf21 #ifndef GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_INTERNAL_H_}\par
40 {\cf21 #define GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_INTERNAL_H_}\par
41 \par
42 {\cf21 #include "gtest/internal/gtest-port.h"}\par
43 \par
44 {\cf21 #if GTEST_OS_LINUX}\par
45 {\cf21 #include <stdlib.h>}\par
46 {\cf21 #include <sys/types.h>}\par
47 {\cf21 #include <sys/wait.h>}\par
48 {\cf21 #include <unistd.h>}\par
49 {\cf21 #endif  }{\cf20 // GTEST_OS_LINUX}\par
50 \par
51 {\cf21 #if GTEST_HAS_EXCEPTIONS}\par
52 {\cf21 #include <stdexcept>}\par
53 {\cf21 #endif}\par
54 \par
55 {\cf21 #include <ctype.h>}\par
56 {\cf21 #include <float.h>}\par
57 {\cf21 #include <string.h>}\par
58 \par
59 {\cf21 #include <cstdint>}\par
60 {\cf21 #include <functional>}\par
61 {\cf21 #include <iomanip>}\par
62 {\cf21 #include <limits>}\par
63 {\cf21 #include <map>}\par
64 {\cf21 #include <set>}\par
65 {\cf21 #include <string>}\par
66 {\cf21 #include <type_traits>}\par
67 {\cf21 #include <vector>}\par
68 \par
69 {\cf21 #include "gtest/gtest-message.h"}\par
70 {\cf21 #include "gtest/internal/gtest-filepath.h"}\par
71 {\cf21 #include "gtest/internal/gtest-string.h"}\par
72 {\cf21 #include "gtest/internal/gtest-type-util.h"}\par
73 \par
74 {\cf20 // Due to C++ preprocessor weirdness, we need double indirection to}\par
75 {\cf20 // concatenate two tokens when one of them is __LINE__.  Writing}\par
76 {\cf20 //}\par
77 {\cf20 //   foo ## __LINE__}\par
78 {\cf20 //}\par
79 {\cf20 // will result in the token foo__LINE__, instead of foo followed by}\par
80 {\cf20 // the current line number.  For more details, see}\par
81 {\cf20 // http://www.parashift.com/c++-faq-lite/misc-technical-issues.html#faq-39.6}\par
82 {\cf21 #define GTEST_CONCAT_TOKEN_(foo, bar) GTEST_CONCAT_TOKEN_IMPL_(foo, bar)}\par
83 {\cf21 #define GTEST_CONCAT_TOKEN_IMPL_(foo, bar) foo##bar}\par
84 \par
85 {\cf20 // Stringifies its argument.}\par
86 {\cf20 // Work around a bug in visual studio which doesn't accept code like this:}\par
87 {\cf20 //}\par
88 {\cf20 //   #define GTEST_STRINGIFY_(name) #name}\par
89 {\cf20 //   #define MACRO(a, b, c) ... GTEST_STRINGIFY_(a) ...}\par
90 {\cf20 //   MACRO(, x, y)}\par
91 {\cf20 //}\par
92 {\cf20 // Complaining about the argument to GTEST_STRINGIFY_ being empty.}\par
93 {\cf20 // This is allowed by the spec.}\par
94 {\cf21 #define GTEST_STRINGIFY_HELPER_(name, ...) #name}\par
95 {\cf21 #define GTEST_STRINGIFY_(...) GTEST_STRINGIFY_HELPER_(__VA_ARGS__, )}\par
96 \par
97 {\cf17 namespace }proto2 \{\par
98 {\cf17 class }MessageLite;\par
99 \}\par
100 \par
101 {\cf17 namespace }testing \{\par
102 \par
103 {\cf20 // Forward declarations.}\par
104 \par
105 {\cf17 class }AssertionResult;  {\cf20 // Result of an assertion.}\par
106 {\cf17 class }Message;          {\cf20 // Represents a failure message.}\par
107 {\cf17 class }Test;             {\cf20 // Represents a test.}\par
108 {\cf17 class }TestInfo;         {\cf20 // Information about a test.}\par
109 {\cf17 class }TestPartResult;   {\cf20 // Result of a test part.}\par
110 {\cf17 class }UnitTest;         {\cf20 // A collection of test suites.}\par
111 \par
112 {\cf17 template} <{\cf17 typename} T>\par
113 ::std::string PrintToString({\cf17 const} T& value);\par
114 \par
115 {\cf17 namespace }internal \{\par
116 \par
117 {\cf17 struct }TraceInfo;    {\cf20 // Information about a trace point.}\par
118 {\cf17 class }TestInfoImpl;  {\cf20 // Opaque implementation of TestInfo}\par
119 {\cf17 class }UnitTestImpl;  {\cf20 // Opaque implementation of UnitTest}\par
120 \par
121 {\cf20 // The text used in failure messages to indicate the start of the}\par
122 {\cf20 // stack trace.}\par
123 GTEST_API_ {\cf17 extern} {\cf17 const} {\cf18 char} kStackTraceMarker[];\par
124 \par
125 {\cf20 // An IgnoredValue object can be implicitly constructed from ANY value.}\par
126 {\cf17 class }IgnoredValue \{\par
127   {\cf17 struct }Sink \{\};\par
128 \par
129  {\cf17 public}:\par
130   {\cf20 // This constructor template allows any value to be implicitly}\par
131   {\cf20 // converted to IgnoredValue.  The object has no data member and}\par
132   {\cf20 // doesn't try to remember anything about the argument.  We}\par
133   {\cf20 // deliberately omit the 'explicit' keyword in order to allow the}\par
134   {\cf20 // conversion to be implicit.}\par
135   {\cf20 // Disable the conversion if T already has a magical conversion operator.}\par
136   {\cf20 // Otherwise we get ambiguity.}\par
137   {\cf17 template} <{\cf17 typename} T,\par
138             {\cf17 typename} std::enable_if<!std::is_convertible<T, Sink>::value,\par
139                                     {\cf18 int}>::type = 0>\par
140   IgnoredValue({\cf17 const} T& {\cf20 /* ignored */}) \{\}  {\cf20 // NOLINT(runtime/explicit)}\par
141 \};\par
142 \par
143 {\cf20 // Appends the user-supplied message to the Google-Test-generated message.}\par
144 GTEST_API_ std::string AppendUserMessage({\cf17 const} std::string& gtest_msg,\par
145                                          {\cf17 const} Message& user_msg);\par
146 \par
147 {\cf21 #if GTEST_HAS_EXCEPTIONS}\par
148 \par
149 GTEST_DISABLE_MSC_WARNINGS_PUSH_(\par
150     4275 {\cf20 /* an exported class was derived from a class that was not exported */})\par
151 \par
152 {\cf20 // This exception is thrown by (and only by) a failed Google Test}\par
153 {\cf20 // assertion when GTEST_FLAG(throw_on_failure) is true (if exceptions}\par
154 {\cf20 // are enabled).  We derive it from std::runtime_error, which is for}\par
155 {\cf20 // errors presumably detectable only at run time.  Since}\par
156 {\cf20 // std::runtime_error inherits from std::exception, many testing}\par
157 {\cf20 // frameworks know how to extract and print the message inside it.}\par
158 class GTEST_API_ GoogleTestFailureException : public ::std::runtime_error \{\par
159  {\cf17 public}:\par
160   {\cf17 explicit} GoogleTestFailureException({\cf17 const} TestPartResult& failure);\par
161 \};\par
162 \par
163 GTEST_DISABLE_MSC_WARNINGS_POP_()  {\cf20 //  4275}\par
164 \par
165 {\cf21 #endif  }{\cf20 // GTEST_HAS_EXCEPTIONS}\par
166 \par
167 {\cf17 namespace }edit_distance \{\par
168 {\cf20 // Returns the optimal edits to go from 'left' to 'right'.}\par
169 {\cf20 // All edits cost the same, with replace having lower priority than}\par
170 {\cf20 // add/remove.}\par
171 {\cf20 // Simple implementation of the Wagner-Fischer algorithm.}\par
172 {\cf20 // See http://en.wikipedia.org/wiki/Wagner-Fischer_algorithm}\par
173 {\cf17 enum} EditType \{ kMatch, kAdd, kRemove, kReplace \};\par
174 GTEST_API_ std::vector<EditType> CalculateOptimalEdits(\par
175     {\cf17 const} std::vector<size_t>& left, {\cf17 const} std::vector<size_t>& right);\par
176 \par
177 {\cf20 // Same as above, but the input is represented as strings.}\par
178 GTEST_API_ std::vector<EditType> CalculateOptimalEdits(\par
179     {\cf17 const} std::vector<std::string>& left,\par
180     {\cf17 const} std::vector<std::string>& right);\par
181 \par
182 {\cf20 // Create a diff of the input strings in Unified diff format.}\par
183 GTEST_API_ std::string CreateUnifiedDiff({\cf17 const} std::vector<std::string>& left,\par
184                                          {\cf17 const} std::vector<std::string>& right,\par
185                                          {\cf18 size_t} context = 2);\par
186 \par
187 \}  {\cf20 // namespace edit_distance}\par
188 \par
189 {\cf20 // Constructs and returns the message for an equality assertion}\par
190 {\cf20 // (e.g. ASSERT_EQ, EXPECT_STREQ, etc) failure.}\par
191 {\cf20 //}\par
192 {\cf20 // The first four parameters are the expressions used in the assertion}\par
193 {\cf20 // and their values, as strings.  For example, for ASSERT_EQ(foo, bar)}\par
194 {\cf20 // where foo is 5 and bar is 6, we have:}\par
195 {\cf20 //}\par
196 {\cf20 //   expected_expression: "foo"}\par
197 {\cf20 //   actual_expression:   "bar"}\par
198 {\cf20 //   expected_value:      "5"}\par
199 {\cf20 //   actual_value:        "6"}\par
200 {\cf20 //}\par
201 {\cf20 // The ignoring_case parameter is true if and only if the assertion is a}\par
202 {\cf20 // *_STRCASEEQ*.  When it's true, the string " (ignoring case)" will}\par
203 {\cf20 // be inserted into the message.}\par
204 GTEST_API_ AssertionResult EqFailure({\cf17 const} {\cf18 char}* expected_expression,\par
205                                      {\cf17 const} {\cf18 char}* actual_expression,\par
206                                      {\cf17 const} std::string& expected_value,\par
207                                      {\cf17 const} std::string& actual_value,\par
208                                      {\cf18 bool} ignoring_case);\par
209 \par
210 {\cf20 // Constructs a failure message for Boolean assertions such as EXPECT_TRUE.}\par
211 GTEST_API_ std::string GetBoolAssertionFailureMessage(\par
212     {\cf17 const} AssertionResult& assertion_result, {\cf17 const} {\cf18 char}* expression_text,\par
213     {\cf17 const} {\cf18 char}* actual_predicate_value, {\cf17 const} {\cf18 char}* expected_predicate_value);\par
214 \par
215 {\cf20 // This template class represents an IEEE floating-point number}\par
216 {\cf20 // (either single-precision or double-precision, depending on the}\par
217 {\cf20 // template parameters).}\par
218 {\cf20 //}\par
219 {\cf20 // The purpose of this class is to do more sophisticated number}\par
220 {\cf20 // comparison.  (Due to round-off error, etc, it's very unlikely that}\par
221 {\cf20 // two floating-points will be equal exactly.  Hence a naive}\par
222 {\cf20 // comparison by the == operation often doesn't work.)}\par
223 {\cf20 //}\par
224 {\cf20 // Format of IEEE floating-point:}\par
225 {\cf20 //}\par
226 {\cf20 //   The most-significant bit being the leftmost, an IEEE}\par
227 {\cf20 //   floating-point looks like}\par
228 {\cf20 //}\par
229 {\cf20 //     sign_bit exponent_bits fraction_bits}\par
230 {\cf20 //}\par
231 {\cf20 //   Here, sign_bit is a single bit that designates the sign of the}\par
232 {\cf20 //   number.}\par
233 {\cf20 //}\par
234 {\cf20 //   For float, there are 8 exponent bits and 23 fraction bits.}\par
235 {\cf20 //}\par
236 {\cf20 //   For double, there are 11 exponent bits and 52 fraction bits.}\par
237 {\cf20 //}\par
238 {\cf20 //   More details can be found at}\par
239 {\cf20 //   http://en.wikipedia.org/wiki/IEEE_floating-point_standard.}\par
240 {\cf20 //}\par
241 {\cf20 // Template parameter:}\par
242 {\cf20 //}\par
243 {\cf20 //   RawType: the raw floating-point type (either float or double)}\par
244 {\cf17 template} <{\cf17 typename} RawType>\par
245 {\cf17 class }FloatingPoint \{\par
246  {\cf17 public}:\par
247   {\cf20 // Defines the unsigned integer type that has the same size as the}\par
248   {\cf20 // floating point number.}\par
249   {\cf17 typedef} {\cf17 typename} TypeWithSize<{\cf17 sizeof}(RawType)>::UInt Bits;\par
250 \par
251   {\cf20 // Constants.}\par
252 \par
253   {\cf20 // # of bits in a number.}\par
254   {\cf17 static} {\cf17 const} {\cf18 size_t} kBitCount = 8 * {\cf17 sizeof}(RawType);\par
255 \par
256   {\cf20 // # of fraction bits in a number.}\par
257   {\cf17 static} {\cf17 const} {\cf18 size_t} kFractionBitCount =\par
258       std::numeric_limits<RawType>::digits - 1;\par
259 \par
260   {\cf20 // # of exponent bits in a number.}\par
261   {\cf17 static} {\cf17 const} {\cf18 size_t} kExponentBitCount = kBitCount - 1 - kFractionBitCount;\par
262 \par
263   {\cf20 // The mask for the sign bit.}\par
264   {\cf17 static} {\cf17 const} Bits kSignBitMask = {\cf17 static_cast<}Bits{\cf17 >}(1) << (kBitCount - 1);\par
265 \par
266   {\cf20 // The mask for the fraction bits.}\par
267   {\cf17 static} {\cf17 const} Bits kFractionBitMask = ~static_cast<Bits>(0) >>\par
268                                        (kExponentBitCount + 1);\par
269 \par
270   {\cf20 // The mask for the exponent bits.}\par
271   {\cf17 static} {\cf17 const} Bits kExponentBitMask = ~(kSignBitMask | kFractionBitMask);\par
272 \par
273   {\cf20 // How many ULP's (Units in the Last Place) we want to tolerate when}\par
274   {\cf20 // comparing two numbers.  The larger the value, the more error we}\par
275   {\cf20 // allow.  A 0 value means that two numbers must be exactly the same}\par
276   {\cf20 // to be considered equal.}\par
277   {\cf20 //}\par
278   {\cf20 // The maximum error of a single floating-point operation is 0.5}\par
279   {\cf20 // units in the last place.  On Intel CPU's, all floating-point}\par
280   {\cf20 // calculations are done with 80-bit precision, while double has 64}\par
281   {\cf20 // bits.  Therefore, 4 should be enough for ordinary use.}\par
282   {\cf20 //}\par
283   {\cf20 // See the following article for more details on ULP:}\par
284   {\cf20 // http://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/}\par
285   {\cf17 static} {\cf17 const} uint32_t kMaxUlps = 4;\par
286 \par
287   {\cf20 // Constructs a FloatingPoint from a raw floating-point number.}\par
288   {\cf20 //}\par
289   {\cf20 // On an Intel CPU, passing a non-normalized NAN (Not a Number)}\par
290   {\cf20 // around may change its bits, although the new value is guaranteed}\par
291   {\cf20 // to be also a NAN.  Therefore, don't expect this constructor to}\par
292   {\cf20 // preserve the bits in x when x is a NAN.}\par
293   {\cf17 explicit} FloatingPoint({\cf17 const} RawType& x) \{ u_.value_ = x; \}\par
294 \par
295   {\cf20 // Static methods}\par
296 \par
297   {\cf20 // Reinterprets a bit pattern as a floating-point number.}\par
298   {\cf20 //}\par
299   {\cf20 // This function is needed to test the AlmostEquals() method.}\par
300   {\cf17 static} RawType ReinterpretBits({\cf17 const} Bits bits) \{\par
301     FloatingPoint fp(0);\par
302     fp.u_.bits_ = bits;\par
303     {\cf19 return} fp.u_.value_;\par
304   \}\par
305 \par
306   {\cf20 // Returns the floating-point number that represent positive infinity.}\par
307   {\cf17 static} RawType Infinity() \{ {\cf19 return} ReinterpretBits(kExponentBitMask); \}\par
308 \par
309   {\cf20 // Returns the maximum representable finite floating-point number.}\par
310   {\cf17 static} RawType Max();\par
311 \par
312   {\cf20 // Non-static methods}\par
313 \par
314   {\cf20 // Returns the bits that represents this number.}\par
315   {\cf17 const} Bits& bits(){\cf17  const }\{ {\cf19 return} u_.bits_; \}\par
316 \par
317   {\cf20 // Returns the exponent bits of this number.}\par
318   Bits exponent_bits(){\cf17  const }\{ {\cf19 return} kExponentBitMask & u_.bits_; \}\par
319 \par
320   {\cf20 // Returns the fraction bits of this number.}\par
321   Bits fraction_bits(){\cf17  const }\{ {\cf19 return} kFractionBitMask & u_.bits_; \}\par
322 \par
323   {\cf20 // Returns the sign bit of this number.}\par
324   Bits sign_bit(){\cf17  const }\{ {\cf19 return} kSignBitMask & u_.bits_; \}\par
325 \par
326   {\cf20 // Returns true if and only if this is NAN (not a number).}\par
327   {\cf18 bool} is_nan(){\cf17  const }\{\par
328     {\cf20 // It's a NAN if the exponent bits are all ones and the fraction}\par
329     {\cf20 // bits are not entirely zeros.}\par
330     {\cf19 return} (exponent_bits() == kExponentBitMask) && (fraction_bits() != 0);\par
331   \}\par
332 \par
333   {\cf20 // Returns true if and only if this number is at most kMaxUlps ULP's away}\par
334   {\cf20 // from rhs.  In particular, this function:}\par
335   {\cf20 //}\par
336   {\cf20 //   - returns false if either number is (or both are) NAN.}\par
337   {\cf20 //   - treats really large numbers as almost equal to infinity.}\par
338   {\cf20 //   - thinks +0.0 and -0.0 are 0 DLP's apart.}\par
339   {\cf18 bool} AlmostEquals({\cf17 const} FloatingPoint& rhs){\cf17  const }\{\par
340     {\cf20 // The IEEE standard says that any comparison operation involving}\par
341     {\cf20 // a NAN must return false.}\par
342     {\cf19 if} (is_nan() || rhs.is_nan()) {\cf19 return} {\cf17 false};\par
343 \par
344     {\cf19 return} DistanceBetweenSignAndMagnitudeNumbers(u_.bits_, rhs.u_.bits_) <=\par
345            kMaxUlps;\par
346   \}\par
347 \par
348  {\cf17 private}:\par
349   {\cf20 // The data type used to store the actual floating-point number.}\par
350   {\cf17 union }FloatingPointUnion \{\par
351     RawType value_;  {\cf20 // The raw floating-point number.}\par
352     Bits bits_;      {\cf20 // The bits that represent the number.}\par
353   \};\par
354 \par
355   {\cf20 // Converts an integer from the sign-and-magnitude representation to}\par
356   {\cf20 // the biased representation.  More precisely, let N be 2 to the}\par
357   {\cf20 // power of (kBitCount - 1), an integer x is represented by the}\par
358   {\cf20 // unsigned number x + N.}\par
359   {\cf20 //}\par
360   {\cf20 // For instance,}\par
361   {\cf20 //}\par
362   {\cf20 //   -N + 1 (the most negative number representable using}\par
363   {\cf20 //          sign-and-magnitude) is represented by 1;}\par
364   {\cf20 //   0      is represented by N; and}\par
365   {\cf20 //   N - 1  (the biggest number representable using}\par
366   {\cf20 //          sign-and-magnitude) is represented by 2N - 1.}\par
367   {\cf20 //}\par
368   {\cf20 // Read http://en.wikipedia.org/wiki/Signed_number_representations}\par
369   {\cf20 // for more details on signed number representations.}\par
370   {\cf17 static} Bits SignAndMagnitudeToBiased({\cf17 const} Bits& sam) \{\par
371     {\cf19 if} (kSignBitMask & sam) \{\par
372       {\cf20 // sam represents a negative number.}\par
373       {\cf19 return} ~sam + 1;\par
374     \} {\cf19 else} \{\par
375       {\cf20 // sam represents a positive number.}\par
376       {\cf19 return} kSignBitMask | sam;\par
377     \}\par
378   \}\par
379 \par
380   {\cf20 // Given two numbers in the sign-and-magnitude representation,}\par
381   {\cf20 // returns the distance between them as an unsigned number.}\par
382   {\cf17 static} Bits DistanceBetweenSignAndMagnitudeNumbers({\cf17 const} Bits& sam1,\par
383                                                      {\cf17 const} Bits& sam2) \{\par
384     {\cf17 const} Bits biased1 = SignAndMagnitudeToBiased(sam1);\par
385     {\cf17 const} Bits biased2 = SignAndMagnitudeToBiased(sam2);\par
386     {\cf19 return} (biased1 >= biased2) ? (biased1 - biased2) : (biased2 - biased1);\par
387   \}\par
388 \par
389   FloatingPointUnion u_;\par
390 \};\par
391 \par
392 {\cf20 // We cannot use std::numeric_limits<T>::max() as it clashes with the max()}\par
393 {\cf20 // macro defined by <windows.h>.}\par
394 {\cf17 template} <>\par
395 {\cf17 inline} {\cf18 float} FloatingPoint<float>::Max() \{\par
396   {\cf19 return} FLT_MAX;\par
397 \}\par
398 {\cf17 template} <>\par
399 {\cf17 inline} {\cf18 double} FloatingPoint<double>::Max() \{\par
400   {\cf19 return} DBL_MAX;\par
401 \}\par
402 \par
403 {\cf20 // Typedefs the instances of the FloatingPoint template class that we}\par
404 {\cf20 // care to use.}\par
405 {\cf17 typedef} FloatingPoint<float> Float;\par
406 {\cf17 typedef} FloatingPoint<double> Double;\par
407 \par
408 {\cf20 // In order to catch the mistake of putting tests that use different}\par
409 {\cf20 // test fixture classes in the same test suite, we need to assign}\par
410 {\cf20 // unique IDs to fixture classes and compare them.  The TypeId type is}\par
411 {\cf20 // used to hold such IDs.  The user should treat TypeId as an opaque}\par
412 {\cf20 // type: the only operation allowed on TypeId values is to compare}\par
413 {\cf20 // them for equality using the == operator.}\par
414 {\cf17 typedef} {\cf17 const} {\cf18 void}* TypeId;\par
415 \par
416 {\cf17 template} <{\cf17 typename} T>\par
417 {\cf17 class }TypeIdHelper \{\par
418  {\cf17 public}:\par
419   {\cf20 // dummy_ must not have a const type.  Otherwise an overly eager}\par
420   {\cf20 // compiler (e.g. MSVC 7.1 & 8.0) may try to merge}\par
421   {\cf20 // TypeIdHelper<T>::dummy_ for different Ts as an "optimization".}\par
422   {\cf17 static} {\cf18 bool} dummy_;\par
423 \};\par
424 \par
425 {\cf17 template} <{\cf17 typename} T>\par
426 {\cf18 bool} TypeIdHelper<T>::dummy_ = {\cf17 false};\par
427 \par
428 {\cf20 // GetTypeId<T>() returns the ID of type T.  Different values will be}\par
429 {\cf20 // returned for different types.  Calling the function twice with the}\par
430 {\cf20 // same type argument is guaranteed to return the same ID.}\par
431 {\cf17 template} <{\cf17 typename} T>\par
432 TypeId GetTypeId() \{\par
433   {\cf20 // The compiler is required to allocate a different}\par
434   {\cf20 // TypeIdHelper<T>::dummy_ variable for each T used to instantiate}\par
435   {\cf20 // the template.  Therefore, the address of dummy_ is guaranteed to}\par
436   {\cf20 // be unique.}\par
437   {\cf19 return} &(TypeIdHelper<T>::dummy_);\par
438 \}\par
439 \par
440 {\cf20 // Returns the type ID of ::testing::Test.  Always call this instead}\par
441 {\cf20 // of GetTypeId< ::testing::Test>() to get the type ID of}\par
442 {\cf20 // ::testing::Test, as the latter may give the wrong result due to a}\par
443 {\cf20 // suspected linker bug when compiling Google Test as a Mac OS X}\par
444 {\cf20 // framework.}\par
445 GTEST_API_ TypeId GetTestTypeId();\par
446 \par
447 {\cf20 // Defines the abstract factory interface that creates instances}\par
448 {\cf20 // of a Test object.}\par
449 {\cf17 class }TestFactoryBase \{\par
450  {\cf17 public}:\par
451   {\cf17 virtual} ~TestFactoryBase() \{\}\par
452 \par
453   {\cf20 // Creates a test instance to run. The instance is both created and destroyed}\par
454   {\cf20 // within TestInfoImpl::Run()}\par
455   {\cf17 virtual} Test* CreateTest() = 0;\par
456 \par
457  {\cf17 protected}:\par
458   TestFactoryBase() \{\}\par
459 \par
460  {\cf17 private}:\par
461   TestFactoryBase({\cf17 const} TestFactoryBase&) = {\cf17 delete};\par
462   TestFactoryBase& operator=({\cf17 const} TestFactoryBase&) = {\cf17 delete};\par
463 \};\par
464 \par
465 {\cf20 // This class provides implementation of TestFactoryBase interface.}\par
466 {\cf20 // It is used in TEST and TEST_F macros.}\par
467 {\cf17 template} <{\cf17 class} TestClass>\par
468 {\cf17 class }TestFactoryImpl : {\cf17 public} TestFactoryBase \{\par
469  {\cf17 public}:\par
470   Test* CreateTest(){\cf17  override }\{ {\cf19 return} {\cf17 new} TestClass; \}\par
471 \};\par
472 \par
473 {\cf21 #if GTEST_OS_WINDOWS}\par
474 \par
475 {\cf20 // Predicate-formatters for implementing the HRESULT checking macros}\par
476 {\cf20 // \{ASSERT|EXPECT\}_HRESULT_\{SUCCEEDED|FAILED\}}\par
477 {\cf20 // We pass a long instead of HRESULT to avoid causing an}\par
478 {\cf20 // include dependency for the HRESULT type.}\par
479 GTEST_API_ AssertionResult IsHRESULTSuccess({\cf17 const} {\cf18 char}* expr,\par
480                                             {\cf18 long} hr);  {\cf20 // NOLINT}\par
481 GTEST_API_ AssertionResult IsHRESULTFailure({\cf17 const} {\cf18 char}* expr,\par
482                                             {\cf18 long} hr);  {\cf20 // NOLINT}\par
483 \par
484 {\cf21 #endif  }{\cf20 // GTEST_OS_WINDOWS}\par
485 \par
486 {\cf20 // Types of SetUpTestSuite() and TearDownTestSuite() functions.}\par
487 {\cf17 using }SetUpTestSuiteFunc = void (*)();\par
488 {\cf17 using }TearDownTestSuiteFunc = void (*)();\par
489 \par
490 {\cf17 struct }CodeLocation \{\par
491   CodeLocation({\cf17 const} std::string& a_file, {\cf18 int} a_line)\par
492       : file(a_file), line(a_line) \{\}\par
493 \par
494   std::string file;\par
495   {\cf18 int} line;\par
496 \};\par
497 \par
498 {\cf20 //  Helper to identify which setup function for TestCase / TestSuite to call.}\par
499 {\cf20 //  Only one function is allowed, either TestCase or TestSute but not both.}\par
500 \par
501 {\cf20 // Utility functions to help SuiteApiResolver}\par
502 {\cf17 using }SetUpTearDownSuiteFuncType = void (*)();\par
503 \par
504 {\cf17 inline} SetUpTearDownSuiteFuncType GetNotDefaultOrNull(\par
505     SetUpTearDownSuiteFuncType a, SetUpTearDownSuiteFuncType def) \{\par
506   {\cf19 return} a == def ? nullptr : a;\par
507 \}\par
508 \par
509 {\cf17 template} <{\cf17 typename} T>\par
510 {\cf20 //  Note that SuiteApiResolver inherits from T because}\par
511 {\cf20 //  SetUpTestSuite()/TearDownTestSuite() could be protected. This way}\par
512 {\cf20 //  SuiteApiResolver can access them.}\par
513 {\cf17 struct }SuiteApiResolver : T \{\par
514   {\cf20 // testing::Test is only forward declared at this point. So we make it a}\par
515   {\cf20 // dependent class for the compiler to be OK with it.}\par
516   {\cf17 using }Test =\par
517       {\cf17 typename} std::conditional<{\cf17 sizeof}(T) != 0, ::testing::Test, {\cf18 void}>::type;\par
518 \par
519   {\cf17 static} SetUpTearDownSuiteFuncType GetSetUpCaseOrSuite({\cf17 const} {\cf18 char}* filename,\par
520                                                         {\cf18 int} line_num) \{\par
521 {\cf21 #ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
522     SetUpTearDownSuiteFuncType test_case_fp =\par
523         GetNotDefaultOrNull(&T::SetUpTestCase, &Test::SetUpTestCase);\par
524     SetUpTearDownSuiteFuncType test_suite_fp =\par
525         GetNotDefaultOrNull(&T::SetUpTestSuite, &Test::SetUpTestSuite);\par
526 \par
527     GTEST_CHECK_(!test_case_fp || !test_suite_fp)\par
528         << {\cf22 "Test can not provide both SetUpTestSuite and SetUpTestCase, please "}\par
529            {\cf22 "make sure there is only one present at "}\par
530         << filename << {\cf22 ":"} << line_num;\par
531 \par
532     {\cf19 return} test_case_fp != {\cf17 nullptr} ? test_case_fp : test_suite_fp;\par
533 {\cf21 #else}\par
534     (void)(filename);\par
535     (void)(line_num);\par
536     {\cf19 return} &T::SetUpTestSuite;\par
537 {\cf21 #endif}\par
538   \}\par
539 \par
540   {\cf17 static} SetUpTearDownSuiteFuncType GetTearDownCaseOrSuite({\cf17 const} {\cf18 char}* filename,\par
541                                                            {\cf18 int} line_num) \{\par
542 {\cf21 #ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
543     SetUpTearDownSuiteFuncType test_case_fp =\par
544         GetNotDefaultOrNull(&T::TearDownTestCase, &Test::TearDownTestCase);\par
545     SetUpTearDownSuiteFuncType test_suite_fp =\par
546         GetNotDefaultOrNull(&T::TearDownTestSuite, &Test::TearDownTestSuite);\par
547 \par
548     GTEST_CHECK_(!test_case_fp || !test_suite_fp)\par
549         << {\cf22 "Test can not provide both TearDownTestSuite and TearDownTestCase,"}\par
550            {\cf22 " please make sure there is only one present at"}\par
551         << filename << {\cf22 ":"} << line_num;\par
552 \par
553     {\cf19 return} test_case_fp != {\cf17 nullptr} ? test_case_fp : test_suite_fp;\par
554 {\cf21 #else}\par
555     (void)(filename);\par
556     (void)(line_num);\par
557     {\cf19 return} &T::TearDownTestSuite;\par
558 {\cf21 #endif}\par
559   \}\par
560 \};\par
561 \par
562 {\cf20 // Creates a new TestInfo object and registers it with Google Test;}\par
563 {\cf20 // returns the created object.}\par
564 {\cf20 //}\par
565 {\cf20 // Arguments:}\par
566 {\cf20 //}\par
567 {\cf20 //   test_suite_name:  name of the test suite}\par
568 {\cf20 //   name:             name of the test}\par
569 {\cf20 //   type_param:       the name of the test's type parameter, or NULL if}\par
570 {\cf20 //                     this is not a typed or a type-parameterized test.}\par
571 {\cf20 //   value_param:      text representation of the test's value parameter,}\par
572 {\cf20 //                     or NULL if this is not a type-parameterized test.}\par
573 {\cf20 //   code_location:    code location where the test is defined}\par
574 {\cf20 //   fixture_class_id: ID of the test fixture class}\par
575 {\cf20 //   set_up_tc:        pointer to the function that sets up the test suite}\par
576 {\cf20 //   tear_down_tc:     pointer to the function that tears down the test suite}\par
577 {\cf20 //   factory:          pointer to the factory that creates a test object.}\par
578 {\cf20 //                     The newly created TestInfo instance will assume}\par
579 {\cf20 //                     ownership of the factory object.}\par
580 GTEST_API_ TestInfo* MakeAndRegisterTestInfo(\par
581     {\cf17 const} {\cf18 char}* test_suite_name, {\cf17 const} {\cf18 char}* name, {\cf17 const} {\cf18 char}* type_param,\par
582     {\cf17 const} {\cf18 char}* value_param, CodeLocation code_location,\par
583     TypeId fixture_class_id, SetUpTestSuiteFunc set_up_tc,\par
584     TearDownTestSuiteFunc tear_down_tc, TestFactoryBase* factory);\par
585 \par
586 {\cf20 // If *pstr starts with the given prefix, modifies *pstr to be right}\par
587 {\cf20 // past the prefix and returns true; otherwise leaves *pstr unchanged}\par
588 {\cf20 // and returns false.  None of pstr, *pstr, and prefix can be NULL.}\par
589 GTEST_API_ {\cf18 bool} SkipPrefix({\cf17 const} {\cf18 char}* prefix, {\cf17 const} {\cf18 char}** pstr);\par
590 \par
591 GTEST_DISABLE_MSC_WARNINGS_PUSH_(4251 \\\par
592 {\cf20 /* class A needs to have dll-interface to be used by clients of class B */})\par
593 \par
594 {\cf20 // State of the definition of a type-parameterized test suite.}\par
595 class GTEST_API_ TypedTestSuitePState \{\par
596  {\cf17 public}:\par
597   TypedTestSuitePState() : registered_(false) \{\}\par
598 \par
599   {\cf20 // Adds the given test name to defined_test_names_ and return true}\par
600   {\cf20 // if the test suite hasn't been registered; otherwise aborts the}\par
601   {\cf20 // program.}\par
602   {\cf18 bool} AddTestName({\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\cf17 const} {\cf18 char}* case_name,\par
603                    {\cf17 const} {\cf18 char}* test_name) \{\par
604     {\cf19 if} (registered_) \{\par
605       fprintf(stderr,\par
606               {\cf22 "%s Test %s must be defined before "}\par
607               {\cf22 "REGISTER_TYPED_TEST_SUITE_P(%s, ...).\\n"},\par
608               FormatFileLocation(file, line).c_str(), test_name, case_name);\par
609       fflush(stderr);\par
610       posix::Abort();\par
611     \}\par
612     registered_tests_.insert(\par
613         ::std::make_pair(test_name, CodeLocation(file, line)));\par
614     {\cf19 return} {\cf17 true};\par
615   \}\par
616 \par
617   {\cf18 bool} TestExists({\cf17 const} std::string& test_name){\cf17  const }\{\par
618     {\cf19 return} registered_tests_.count(test_name) > 0;\par
619   \}\par
620 \par
621   {\cf17 const} CodeLocation& GetCodeLocation({\cf17 const} std::string& test_name){\cf17  const }\{\par
622     RegisteredTestsMap::const_iterator it = registered_tests_.find(test_name);\par
623     GTEST_CHECK_(it != registered_tests_.end());\par
624     {\cf19 return} it->second;\par
625   \}\par
626 \par
627   {\cf20 // Verifies that registered_tests match the test names in}\par
628   {\cf20 // defined_test_names_; returns registered_tests if successful, or}\par
629   {\cf20 // aborts the program otherwise.}\par
630   {\cf17 const} {\cf18 char}* VerifyRegisteredTestNames({\cf17 const} {\cf18 char}* test_suite_name,\par
631                                         {\cf17 const} {\cf18 char}* file, {\cf18 int} line,\par
632                                         {\cf17 const} {\cf18 char}* registered_tests);\par
633 \par
634  {\cf17 private}:\par
635   typedef ::std::map<std::string, CodeLocation, std::less<>> RegisteredTestsMap;\par
636 \par
637   {\cf18 bool} registered_;\par
638   RegisteredTestsMap registered_tests_;\par
639 \};\par
640 \par
641 {\cf20 //  Legacy API is deprecated but still available}\par
642 {\cf21 #ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
643 {\cf17 using }TypedTestCasePState = TypedTestSuitePState;\par
644 {\cf21 #endif  }{\cf20 //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
645 \par
646 GTEST_DISABLE_MSC_WARNINGS_POP_()  {\cf20 //  4251}\par
647 \par
648 {\cf20 // Skips to the first non-space char after the first comma in 'str';}\par
649 {\cf20 // returns NULL if no comma is found in 'str'.}\par
650 inline const {\cf18 char}* SkipComma(const {\cf18 char}* str) \{\par
651   {\cf17 const} {\cf18 char}* comma = strchr(str, {\cf23 ','});\par
652   {\cf19 if} (comma == {\cf17 nullptr}) \{\par
653     {\cf19 return} {\cf17 nullptr};\par
654   \}\par
655   {\cf19 while} (IsSpace(*(++comma))) \{\par
656   \}\par
657   {\cf19 return} comma;\par
658 \}\par
659 \par
660 {\cf20 // Returns the prefix of 'str' before the first comma in it; returns}\par
661 {\cf20 // the entire string if it contains no comma.}\par
662 {\cf17 inline} std::string GetPrefixUntilComma({\cf17 const} {\cf18 char}* str) \{\par
663   {\cf17 const} {\cf18 char}* comma = strchr(str, {\cf23 ','});\par
664   {\cf19 return} comma == {\cf17 nullptr} ? str : std::string(str, comma);\par
665 \}\par
666 \par
667 {\cf20 // Splits a given string on a given delimiter, populating a given}\par
668 {\cf20 // vector with the fields.}\par
669 {\cf18 void} SplitString(const ::std::string& str, {\cf18 char} delimiter,\par
670                  ::std::vector<::std::string>* dest);\par
671 \par
672 {\cf20 // The default argument to the template below for the case when the user does}\par
673 {\cf20 // not provide a name generator.}\par
674 {\cf17 struct }DefaultNameGenerator \{\par
675   {\cf17 template} <{\cf17 typename} T>\par
676   {\cf17 static} std::string GetName({\cf18 int} i) \{\par
677     {\cf19 return} StreamableToString(i);\par
678   \}\par
679 \};\par
680 \par
681 {\cf17 template} <{\cf17 typename} Prov{\cf18 id}ed = DefaultNameGenerator>\par
682 {\cf17 struct }NameGeneratorSelector \{\par
683   {\cf17 typedef} Provided type;\par
684 \};\par
685 \par
686 {\cf17 template} <{\cf17 typename} NameGenerator>\par
687 {\cf18 void} GenerateNamesRecursively(internal::None, std::vector<std::string>*, {\cf18 int}) \{\}\par
688 \par
689 {\cf17 template} <{\cf17 typename} NameGenerator, {\cf17 typename} Types>\par
690 {\cf18 void} GenerateNamesRecursively(Types, std::vector<std::string>* result, {\cf18 int} i) \{\par
691   result->push_back(NameGenerator::template GetName<typename Types::Head>(i));\par
692   GenerateNamesRecursively<NameGenerator>({\cf17 typename} Types::Tail(), result,\par
693                                           i + 1);\par
694 \}\par
695 \par
696 {\cf17 template} <{\cf17 typename} NameGenerator, {\cf17 typename} Types>\par
697 std::vector<std::string> GenerateNames() \{\par
698   std::vector<std::string> result;\par
699   GenerateNamesRecursively<NameGenerator>(Types(), &result, 0);\par
700   {\cf19 return} result;\par
701 \}\par
702 \par
703 {\cf20 // TypeParameterizedTest<Fixture, TestSel, Types>::Register()}\par
704 {\cf20 // registers a list of type-parameterized tests with Google Test.  The}\par
705 {\cf20 // return value is insignificant - we just need to return something}\par
706 {\cf20 // such that we can call this function in a namespace scope.}\par
707 {\cf20 //}\par
708 {\cf20 // Implementation note: The GTEST_TEMPLATE_ macro declares a template}\par
709 {\cf20 // template parameter.  It's defined in gtest-type-util.h.}\par
710 {\cf17 template} <GTEST_TEMPLATE_ Fixture, {\cf17 class} TestSel, {\cf17 typename} Types>\par
711 {\cf17 class }TypeParameterizedTest \{\par
712  {\cf17 public}:\par
713   {\cf20 // 'index' is the index of the test in the type list 'Types'}\par
714   {\cf20 // specified in INSTANTIATE_TYPED_TEST_SUITE_P(Prefix, TestSuite,}\par
715   {\cf20 // Types).  Valid values for 'index' are [0, N - 1] where N is the}\par
716   {\cf20 // length of Types.}\par
717   {\cf17 static} {\cf18 bool} Register({\cf17 const} {\cf18 char}* prefix, {\cf17 const} CodeLocation& code_location,\par
718                        {\cf17 const} {\cf18 char}* case_name, {\cf17 const} {\cf18 char}* test_names, {\cf18 int} index,\par
719                        {\cf17 const} std::vector<std::string>& type_names =\par
720                            GenerateNames<DefaultNameGenerator, Types>()) \{\par
721     {\cf17 typedef} {\cf17 typename} Types::Head Type;\par
722     {\cf17 typedef} Fixture<Type> FixtureClass;\par
723     {\cf17 typedef} {\cf17 typename} GTEST_BIND_(TestSel, Type) TestClass;\par
724 \par
725     {\cf20 // First, registers the first type-parameterized test in the type}\par
726     {\cf20 // list.}\par
727     MakeAndRegisterTestInfo(\par
728         (std::string(prefix) + (prefix[0] == {\cf23 '\\0'} ? {\cf22 ""} : {\cf22 "/"}) + case_name +\par
729          {\cf22 "/"} + type_names[{\cf17 static_cast<}{\cf18 size_t}{\cf17 >}(index)])\par
730             .c_str(),\par
731         StripTrailingSpaces(GetPrefixUntilComma(test_names)).c_str(),\par
732         GetTypeName<Type>().c_str(),\par
733         {\cf17 nullptr},  {\cf20 // No value parameter.}\par
734         code_location, GetTypeId<FixtureClass>(),\par
735         SuiteApiResolver<TestClass>::GetSetUpCaseOrSuite(\par
736             code_location.file.c_str(), code_location.line),\par
737         SuiteApiResolver<TestClass>::GetTearDownCaseOrSuite(\par
738             code_location.file.c_str(), code_location.line),\par
739         {\cf17 new} TestFactoryImpl<TestClass>);\par
740 \par
741     {\cf20 // Next, recurses (at compile time) with the tail of the type list.}\par
742     {\cf19 return} TypeParameterizedTest<Fixture, TestSel,\par
743                                  {\cf17 typename} Types::Tail>::Register(prefix,\par
744                                                                  code_location,\par
745                                                                  case_name,\par
746                                                                  test_names,\par
747                                                                  index + 1,\par
748                                                                  type_names);\par
749   \}\par
750 \};\par
751 \par
752 {\cf20 // The base case for the compile time recursion.}\par
753 {\cf17 template} <GTEST_TEMPLATE_ Fixture, {\cf17 class} TestSel>\par
754 {\cf17 class }TypeParameterizedTest<Fixture, TestSel, internal::None> \{\par
755  {\cf17 public}:\par
756   {\cf17 static} {\cf18 bool} Register({\cf17 const} {\cf18 char}* {\cf20 /*prefix*/}, {\cf17 const} CodeLocation&,\par
757                        {\cf17 const} {\cf18 char}* {\cf20 /*case_name*/}, {\cf17 const} {\cf18 char}* {\cf20 /*test_names*/},\par
758                        {\cf18 int} {\cf20 /*index*/},\par
759                        {\cf17 const} std::vector<std::string>& =\par
760                            std::vector<std::string>() {\cf20 /*type_names*/}) \{\par
761     {\cf19 return} {\cf17 true};\par
762   \}\par
763 \};\par
764 \par
765 GTEST_API_ {\cf18 void} RegisterTypeParameterizedTestSuite({\cf17 const} {\cf18 char}* test_suite_name,\par
766                                                    CodeLocation code_location);\par
767 GTEST_API_ {\cf18 void} RegisterTypeParameterizedTestSuiteInstantiation(\par
768     {\cf17 const} {\cf18 char}* case_name);\par
769 \par
770 {\cf20 // TypeParameterizedTestSuite<Fixture, Tests, Types>::Register()}\par
771 {\cf20 // registers *all combinations* of 'Tests' and 'Types' with Google}\par
772 {\cf20 // Test.  The return value is insignificant - we just need to return}\par
773 {\cf20 // something such that we can call this function in a namespace scope.}\par
774 {\cf17 template} <GTEST_TEMPLATE_ Fixture, {\cf17 typename} Tests, {\cf17 typename} Types>\par
775 {\cf17 class }TypeParameterizedTestSuite \{\par
776  {\cf17 public}:\par
777   {\cf17 static} {\cf18 bool} Register({\cf17 const} {\cf18 char}* prefix, CodeLocation code_location,\par
778                        {\cf17 const} TypedTestSuitePState* state, {\cf17 const} {\cf18 char}* case_name,\par
779                        {\cf17 const} {\cf18 char}* test_names,\par
780                        {\cf17 const} std::vector<std::string>& type_names =\par
781                            GenerateNames<DefaultNameGenerator, Types>()) \{\par
782     RegisterTypeParameterizedTestSuiteInstantiation(case_name);\par
783     std::string test_name =\par
784         StripTrailingSpaces(GetPrefixUntilComma(test_names));\par
785     {\cf19 if} (!state->TestExists(test_name)) \{\par
786       fprintf(stderr, {\cf22 "Failed to get code location for test %s.%s at %s."},\par
787               case_name, test_name.c_str(),\par
788               FormatFileLocation(code_location.file.c_str(), code_location.line)\par
789                   .c_str());\par
790       fflush(stderr);\par
791       posix::Abort();\par
792     \}\par
793     {\cf17 const} CodeLocation& test_location = state->GetCodeLocation(test_name);\par
794 \par
795     {\cf17 typedef} {\cf17 typename} Tests::Head Head;\par
796 \par
797     {\cf20 // First, register the first test in 'Test' for each type in 'Types'.}\par
798     TypeParameterizedTest<Fixture, Head, Types>::Register(\par
799         prefix, test_location, case_name, test_names, 0, type_names);\par
800 \par
801     {\cf20 // Next, recurses (at compile time) with the tail of the test list.}\par
802     {\cf19 return} TypeParameterizedTestSuite<Fixture, {\cf17 typename} Tests::Tail,\par
803                                       Types>::Register(prefix, code_location,\par
804                                                        state, case_name,\par
805                                                        SkipComma(test_names),\par
806                                                        type_names);\par
807   \}\par
808 \};\par
809 \par
810 {\cf20 // The base case for the compile time recursion.}\par
811 {\cf17 template} <GTEST_TEMPLATE_ Fixture, {\cf17 typename} Types>\par
812 {\cf17 class }TypeParameterizedTestSuite<Fixture, internal::None, Types> \{\par
813  {\cf17 public}:\par
814   {\cf17 static} {\cf18 bool} Register({\cf17 const} {\cf18 char}* {\cf20 /*prefix*/}, {\cf17 const} CodeLocation&,\par
815                        {\cf17 const} TypedTestSuitePState* {\cf20 /*state*/},\par
816                        {\cf17 const} {\cf18 char}* {\cf20 /*case_name*/}, {\cf17 const} {\cf18 char}* {\cf20 /*test_names*/},\par
817                        {\cf17 const} std::vector<std::string>& =\par
818                            std::vector<std::string>() {\cf20 /*type_names*/}) \{\par
819     {\cf19 return} {\cf17 true};\par
820   \}\par
821 \};\par
822 \par
823 {\cf20 // Returns the current OS stack trace as an std::string.}\par
824 {\cf20 //}\par
825 {\cf20 // The maximum number of stack frames to be included is specified by}\par
826 {\cf20 // the gtest_stack_trace_depth flag.  The skip_count parameter}\par
827 {\cf20 // specifies the number of top frames to be skipped, which doesn't}\par
828 {\cf20 // count against the number of frames to be included.}\par
829 {\cf20 //}\par
830 {\cf20 // For example, if Foo() calls Bar(), which in turn calls}\par
831 {\cf20 // GetCurrentOsStackTraceExceptTop(..., 1), Foo() will be included in}\par
832 {\cf20 // the trace but Bar() and GetCurrentOsStackTraceExceptTop() won't.}\par
833 GTEST_API_ std::string GetCurrentOsStackTraceExceptTop({\cf18 int} skip_count);\par
834 \par
835 {\cf20 // Helpers for suppressing warnings on unreachable code or constant}\par
836 {\cf20 // condition.}\par
837 \par
838 {\cf20 // Always returns true.}\par
839 GTEST_API_ {\cf18 bool} AlwaysTrue();\par
840 \par
841 {\cf20 // Always returns false.}\par
842 {\cf17 inline} {\cf18 bool} AlwaysFalse() \{ {\cf19 return} !AlwaysTrue(); \}\par
843 \par
844 {\cf20 // Helper for suppressing false warning from Clang on a const char*}\par
845 {\cf20 // variable declared in a conditional expression always being NULL in}\par
846 {\cf20 // the else branch.}\par
847 {\cf17 struct }GTEST_API_ ConstCharPtr \{\par
848   ConstCharPtr({\cf17 const} {\cf18 char}* str) : value(str) \{\}\par
849   {\cf17 operator} bool(){\cf17  const }\{ {\cf19 return} {\cf17 true}; \}\par
850   {\cf17 const} {\cf18 char}* value;\par
851 \};\par
852 \par
853 {\cf20 // Helper for declaring std::string within 'if' statement}\par
854 {\cf20 // in pre C++17 build environment.}\par
855 {\cf17 struct }TrueWithString \{\par
856   TrueWithString() = {\cf19 default};\par
857   {\cf17 explicit} TrueWithString({\cf17 const} {\cf18 char}* str) : value(str) \{\}\par
858   {\cf17 explicit} TrueWithString({\cf17 const} std::string& str) : value(str) \{\}\par
859   {\cf17 explicit} {\cf17 operator} bool(){\cf17  const }\{ {\cf19 return} {\cf17 true}; \}\par
860   std::string value;\par
861 \};\par
862 \par
863 {\cf20 // A simple Linear Congruential Generator for generating random}\par
864 {\cf20 // numbers with a uniform distribution.  Unlike rand() and srand(), it}\par
865 {\cf20 // doesn't use global state (and therefore can't interfere with user}\par
866 {\cf20 // code).  Unlike rand_r(), it's portable.  An LCG isn't very random,}\par
867 {\cf20 // but it's good enough for our purposes.}\par
868 {\cf17 class }GTEST_API_ Random \{\par
869  {\cf17 public}:\par
870   {\cf17 static} {\cf17 const} uint32_t kMaxRange = 1u << 31;\par
871 \par
872   {\cf17 explicit} Random(uint32_t seed) : state_(seed) \{\}\par
873 \par
874   {\cf18 void} Reseed(uint32_t seed) \{ state_ = seed; \}\par
875 \par
876   {\cf20 // Generates a random number from [0, range).  Crashes if 'range' is}\par
877   {\cf20 // 0 or greater than kMaxRange.}\par
878   uint32_t Generate(uint32_t range);\par
879 \par
880  {\cf17 private}:\par
881   uint32_t state_;\par
882   Random({\cf17 const} Random&) = {\cf17 delete};\par
883   Random& operator=({\cf17 const} Random&) = {\cf17 delete};\par
884 \};\par
885 \par
886 {\cf20 // Turns const U&, U&, const U, and U all into U.}\par
887 {\cf21 #define GTEST_REMOVE_REFERENCE_AND_CONST_(T) \\}\par
888 {\cf21   typename std::remove_const<typename std::remove_reference<T>::type>::type}\par
889 \par
890 {\cf20 // HasDebugStringAndShortDebugString<T>::value is a compile-time bool constant}\par
891 {\cf20 // that's true if and only if T has methods DebugString() and ShortDebugString()}\par
892 {\cf20 // that return std::string.}\par
893 {\cf17 template} <{\cf17 typename} T>\par
894 {\cf17 class }HasDebugStringAndShortDebugString \{\par
895  {\cf17 private}:\par
896   {\cf17 template} <{\cf17 typename} C>\par
897   {\cf17 static} {\cf17 auto} CheckDebugString(C*) -> {\cf17 typename} std::is_same<\par
898       std::string, {\cf17 decltype}(std::declval<const C>().DebugString())>::type;\par
899   {\cf17 template} <{\cf17 typename}>\par
900   {\cf17 static} std::false_type CheckDebugString(...);\par
901 \par
902   {\cf17 template} <{\cf17 typename} C>\par
903   {\cf17 static} {\cf17 auto} CheckShortDebugString(C*) -> {\cf17 typename} std::is_same<\par
904       std::string, {\cf17 decltype}(std::declval<const C>().ShortDebugString())>::type;\par
905   {\cf17 template} <{\cf17 typename}>\par
906   {\cf17 static} std::false_type CheckShortDebugString(...);\par
907 \par
908   {\cf17 using }HasDebugStringType = {\cf17 decltype}(CheckDebugString<T>({\cf17 nullptr}));\par
909   {\cf17 using }HasShortDebugStringType = {\cf17 decltype}(CheckShortDebugString<T>({\cf17 nullptr}));\par
910 \par
911  {\cf17 public}:\par
912   {\cf17 static} {\cf17 constexpr} {\cf18 bool} value =\par
913       HasDebugStringType::value && HasShortDebugStringType::value;\par
914 \};\par
915 \par
916 {\cf17 template} <{\cf17 typename} T>\par
917 {\cf17 constexpr} {\cf18 bool} HasDebugStringAndShortDebugString<T>::value;\par
918 \par
919 {\cf20 // When the compiler sees expression IsContainerTest<C>(0), if C is an}\par
920 {\cf20 // STL-style container class, the first overload of IsContainerTest}\par
921 {\cf20 // will be viable (since both C::iterator* and C::const_iterator* are}\par
922 {\cf20 // valid types and NULL can be implicitly converted to them).  It will}\par
923 {\cf20 // be picked over the second overload as 'int' is a perfect match for}\par
924 {\cf20 // the type of argument 0.  If C::iterator or C::const_iterator is not}\par
925 {\cf20 // a valid type, the first overload is not viable, and the second}\par
926 {\cf20 // overload will be picked.  Therefore, we can determine whether C is}\par
927 {\cf20 // a container class by checking the type of IsContainerTest<C>(0).}\par
928 {\cf20 // The value of the expression is insignificant.}\par
929 {\cf20 //}\par
930 {\cf20 // In C++11 mode we check the existence of a const_iterator and that an}\par
931 {\cf20 // iterator is properly implemented for the container.}\par
932 {\cf20 //}\par
933 {\cf20 // For pre-C++11 that we look for both C::iterator and C::const_iterator.}\par
934 {\cf20 // The reason is that C++ injects the name of a class as a member of the}\par
935 {\cf20 // class itself (e.g. you can refer to class iterator as either}\par
936 {\cf20 // 'iterator' or 'iterator::iterator').  If we look for C::iterator}\par
937 {\cf20 // only, for example, we would mistakenly think that a class named}\par
938 {\cf20 // iterator is an STL container.}\par
939 {\cf20 //}\par
940 {\cf20 // Also note that the simpler approach of overloading}\par
941 {\cf20 // IsContainerTest(typename C::const_iterator*) and}\par
942 {\cf20 // IsContainerTest(...) doesn't work with Visual Age C++ and Sun C++.}\par
943 {\cf17 typedef} {\cf18 int} IsContainer;\par
944 {\cf17 template} <{\cf17 class }C,\par
945           {\cf17 class }Iterator = {\cf17 decltype}(::std::declval<const C&>().begin()),\par
946           {\cf17 class} = {\cf17 decltype}(::std::declval<const C&>().end()),\par
947           {\cf17 class} = {\cf17 decltype}(++::std::declval<Iterator&>()),\par
948           {\cf17 class} = {\cf17 decltype}(*::std::declval<Iterator>()),\par
949           {\cf17 class} = {\cf17 typename} C::const_iterator>\par
950 IsContainer IsContainerTest({\cf18 int} {\cf20 /* dummy */}) \{\par
951   {\cf19 return} 0;\par
952 \}\par
953 \par
954 {\cf17 typedef} {\cf18 char} IsNotContainer;\par
955 {\cf17 template} <{\cf17 class} C>\par
956 IsNotContainer IsContainerTest({\cf18 long} {\cf20 /* dummy */}) \{\par
957   {\cf19 return} {\cf23 '\\0'};\par
958 \}\par
959 \par
960 {\cf20 // Trait to detect whether a type T is a hash table.}\par
961 {\cf20 // The heuristic used is that the type contains an inner type `hasher` and does}\par
962 {\cf20 // not contain an inner type `reverse_iterator`.}\par
963 {\cf20 // If the container is iterable in reverse, then order might actually matter.}\par
964 {\cf17 template} <{\cf17 typename} T>\par
965 {\cf17 struct }IsHashTable \{\par
966  {\cf17 private}:\par
967   {\cf17 template} <{\cf17 typename} U>\par
968   {\cf17 static} {\cf18 char} test({\cf17 typename} U::hasher*, {\cf17 typename} U::reverse_iterator*);\par
969   {\cf17 template} <{\cf17 typename} U>\par
970   {\cf17 static} {\cf18 int} test({\cf17 typename} U::hasher*, ...);\par
971   {\cf17 template} <{\cf17 typename} U>\par
972   {\cf17 static} {\cf18 char} test(...);\par
973 \par
974  {\cf17 public}:\par
975   {\cf17 static} {\cf17 const} {\cf18 bool} value = {\cf17 sizeof}(test<T>({\cf17 nullptr}, {\cf17 nullptr})) == {\cf17 sizeof}({\cf18 int});\par
976 \};\par
977 \par
978 {\cf17 template} <{\cf17 typename} T>\par
979 {\cf17 const} {\cf18 bool} IsHashTable<T>::value;\par
980 \par
981 {\cf17 template} <{\cf17 typename} C,\par
982           {\cf18 bool} = {\cf17 sizeof}(IsContainerTest<C>(0)) == {\cf17 sizeof}(IsContainer)>\par
983 {\cf17 struct }IsRecursiveContainerImpl;\par
984 \par
985 {\cf17 template} <{\cf17 typename} C>\par
986 {\cf17 struct }IsRecursiveContainerImpl<C, false> : {\cf17 public} std::false_type \{\};\par
987 \par
988 {\cf20 // Since the IsRecursiveContainerImpl depends on the IsContainerTest we need to}\par
989 {\cf20 // obey the same inconsistencies as the IsContainerTest, namely check if}\par
990 {\cf20 // something is a container is relying on only const_iterator in C++11 and}\par
991 {\cf20 // is relying on both const_iterator and iterator otherwise}\par
992 {\cf17 template} <{\cf17 typename} C>\par
993 {\cf17 struct }IsRecursiveContainerImpl<C, true> \{\par
994   {\cf17 using }value_type = {\cf17 decltype}(*std::declval<typename C::const_iterator>());\par
995   {\cf17 using }type =\par
996       std::is_same<{\cf17 typename} std::remove_const<\par
997                        {\cf17 typename} std::remove_reference<value_type>::type>::type,\par
998                    C>;\par
999 \};\par
1000 \par
1001 {\cf20 // IsRecursiveContainer<Type> is a unary compile-time predicate that}\par
1002 {\cf20 // evaluates whether C is a recursive container type. A recursive container}\par
1003 {\cf20 // type is a container type whose value_type is equal to the container type}\par
1004 {\cf20 // itself. An example for a recursive container type is}\par
1005 {\cf20 // boost::filesystem::path, whose iterator has a value_type that is equal to}\par
1006 {\cf20 // boost::filesystem::path.}\par
1007 {\cf17 template} <{\cf17 typename} C>\par
1008 {\cf17 struct }IsRecursiveContainer : {\cf17 public} IsRecursiveContainerImpl<C>::type \{\};\par
1009 \par
1010 {\cf20 // Utilities for native arrays.}\par
1011 \par
1012 {\cf20 // ArrayEq() compares two k-dimensional native arrays using the}\par
1013 {\cf20 // elements' operator==, where k can be any integer >= 0.  When k is}\par
1014 {\cf20 // 0, ArrayEq() degenerates into comparing a single pair of values.}\par
1015 \par
1016 {\cf17 template} <{\cf17 typename} T, {\cf17 typename} U>\par
1017 {\cf18 bool} ArrayEq({\cf17 const} T* lhs, {\cf18 size_t} size, {\cf17 const} U* rhs);\par
1018 \par
1019 {\cf20 // This generic version is used when k is 0.}\par
1020 {\cf17 template} <{\cf17 typename} T, {\cf17 typename} U>\par
1021 {\cf17 inline} {\cf18 bool} ArrayEq({\cf17 const} T& lhs, {\cf17 const} U& rhs) \{\par
1022   {\cf19 return} lhs == rhs;\par
1023 \}\par
1024 \par
1025 {\cf20 // This overload is used when k >= 1.}\par
1026 {\cf17 template} <{\cf17 typename} T, {\cf17 typename} U, {\cf18 size_t} N>\par
1027 {\cf17 inline} {\cf18 bool} ArrayEq({\cf17 const} T (&lhs)[N], {\cf17 const} U (&rhs)[N]) \{\par
1028   {\cf19 return} internal::ArrayEq(lhs, N, rhs);\par
1029 \}\par
1030 \par
1031 {\cf20 // This helper reduces code bloat.  If we instead put its logic inside}\par
1032 {\cf20 // the previous ArrayEq() function, arrays with different sizes would}\par
1033 {\cf20 // lead to different copies of the template code.}\par
1034 {\cf17 template} <{\cf17 typename} T, {\cf17 typename} U>\par
1035 {\cf18 bool} ArrayEq({\cf17 const} T* lhs, {\cf18 size_t} size, {\cf17 const} U* rhs) \{\par
1036   {\cf19 for} ({\cf18 size_t} i = 0; i != size; i++) \{\par
1037     {\cf19 if} (!internal::ArrayEq(lhs[i], rhs[i])) {\cf19 return} {\cf17 false};\par
1038   \}\par
1039   {\cf19 return} {\cf17 true};\par
1040 \}\par
1041 \par
1042 {\cf20 // Finds the first element in the iterator range [begin, end) that}\par
1043 {\cf20 // equals elem.  Element may be a native array type itself.}\par
1044 {\cf17 template} <{\cf17 typename} Iter, {\cf17 typename} Element>\par
1045 Iter ArrayAwareFind(Iter begin, Iter end, {\cf17 const} Element& elem) \{\par
1046   {\cf19 for} (Iter it = begin; it != end; ++it) \{\par
1047     {\cf19 if} (internal::ArrayEq(*it, elem)) {\cf19 return} it;\par
1048   \}\par
1049   {\cf19 return} end;\par
1050 \}\par
1051 \par
1052 {\cf20 // CopyArray() copies a k-dimensional native array using the elements'}\par
1053 {\cf20 // operator=, where k can be any integer >= 0.  When k is 0,}\par
1054 {\cf20 // CopyArray() degenerates into copying a single value.}\par
1055 \par
1056 {\cf17 template} <{\cf17 typename} T, {\cf17 typename} U>\par
1057 {\cf18 void} CopyArray({\cf17 const} T* from, {\cf18 size_t} size, U* to);\par
1058 \par
1059 {\cf20 // This generic version is used when k is 0.}\par
1060 {\cf17 template} <{\cf17 typename} T, {\cf17 typename} U>\par
1061 {\cf17 inline} {\cf18 void} CopyArray({\cf17 const} T& from, U* to) \{\par
1062   *to = from;\par
1063 \}\par
1064 \par
1065 {\cf20 // This overload is used when k >= 1.}\par
1066 {\cf17 template} <{\cf17 typename} T, {\cf17 typename} U, {\cf18 size_t} N>\par
1067 {\cf17 inline} {\cf18 void} CopyArray({\cf17 const} T (&from)[N], U (*to)[N]) \{\par
1068   internal::CopyArray(from, N, *to);\par
1069 \}\par
1070 \par
1071 {\cf20 // This helper reduces code bloat.  If we instead put its logic inside}\par
1072 {\cf20 // the previous CopyArray() function, arrays with different sizes}\par
1073 {\cf20 // would lead to different copies of the template code.}\par
1074 {\cf17 template} <{\cf17 typename} T, {\cf17 typename} U>\par
1075 {\cf18 void} CopyArray({\cf17 const} T* from, {\cf18 size_t} size, U* to) \{\par
1076   {\cf19 for} ({\cf18 size_t} i = 0; i != size; i++) \{\par
1077     internal::CopyArray(from[i], to + i);\par
1078   \}\par
1079 \}\par
1080 \par
1081 {\cf20 // The relation between an NativeArray object (see below) and the}\par
1082 {\cf20 // native array it represents.}\par
1083 {\cf20 // We use 2 different structs to allow non-copyable types to be used, as long}\par
1084 {\cf20 // as RelationToSourceReference() is passed.}\par
1085 {\cf17 struct }RelationToSourceReference \{\};\par
1086 {\cf17 struct }RelationToSourceCopy \{\};\par
1087 \par
1088 {\cf20 // Adapts a native array to a read-only STL-style container.  Instead}\par
1089 {\cf20 // of the complete STL container concept, this adaptor only implements}\par
1090 {\cf20 // members useful for Google Mock's container matchers.  New members}\par
1091 {\cf20 // should be added as needed.  To simplify the implementation, we only}\par
1092 {\cf20 // support Element being a raw type (i.e. having no top-level const or}\par
1093 {\cf20 // reference modifier).  It's the client's responsibility to satisfy}\par
1094 {\cf20 // this requirement.  Element can be an array type itself (hence}\par
1095 {\cf20 // multi-dimensional arrays are supported).}\par
1096 {\cf17 template} <{\cf17 typename} Element>\par
1097 {\cf17 class }NativeArray \{\par
1098  {\cf17 public}:\par
1099   {\cf20 // STL-style container typedefs.}\par
1100   {\cf17 typedef} Element value_type;\par
1101   {\cf17 typedef} Element* iterator;\par
1102   {\cf17 typedef} {\cf17 const} Element* const_iterator;\par
1103 \par
1104   {\cf20 // Constructs from a native array. References the source.}\par
1105   NativeArray({\cf17 const} Element* array, {\cf18 size_t} count, RelationToSourceReference) \{\par
1106     InitRef(array, count);\par
1107   \}\par
1108 \par
1109   {\cf20 // Constructs from a native array. Copies the source.}\par
1110   NativeArray({\cf17 const} Element* array, {\cf18 size_t} count, RelationToSourceCopy) \{\par
1111     InitCopy(array, count);\par
1112   \}\par
1113 \par
1114   {\cf20 // Copy constructor.}\par
1115   NativeArray({\cf17 const} NativeArray& rhs) \{\par
1116     (this->*rhs.clone_)(rhs.array_, rhs.size_);\par
1117   \}\par
1118 \par
1119   ~NativeArray() \{\par
1120     {\cf19 if} (clone_ != &NativeArray::InitRef) {\cf17 delete}[] array_;\par
1121   \}\par
1122 \par
1123   {\cf20 // STL-style container methods.}\par
1124   {\cf18 size_t} size(){\cf17  const }\{ {\cf19 return} size_; \}\par
1125   const_iterator begin(){\cf17  const }\{ {\cf19 return} array_; \}\par
1126   const_iterator end(){\cf17  const }\{ {\cf19 return} array_ + size_; \}\par
1127   {\cf18 bool} operator==({\cf17 const} NativeArray& rhs){\cf17  const }\{\par
1128     {\cf19 return} size() == rhs.size() && ArrayEq(begin(), size(), rhs.begin());\par
1129   \}\par
1130 \par
1131  {\cf17 private}:\par
1132   {\cf17 static_assert}(!std::is_const<Element>::value, {\cf22 "Type must not be const"});\par
1133   {\cf17 static_assert}(!std::is_reference<Element>::value,\par
1134                 {\cf22 "Type must not be a reference"});\par
1135 \par
1136   {\cf20 // Initializes this object with a copy of the input.}\par
1137   {\cf18 void} InitCopy({\cf17 const} Element* array, {\cf18 size_t} a_size) \{\par
1138     Element* {\cf17 const} copy = {\cf17 new} Element[a_size];\par
1139     CopyArray(array, a_size, copy);\par
1140     array_ = copy;\par
1141     size_ = a_size;\par
1142     clone_ = &NativeArray::InitCopy;\par
1143   \}\par
1144 \par
1145   {\cf20 // Initializes this object with a reference of the input.}\par
1146   {\cf18 void} InitRef({\cf17 const} Element* array, {\cf18 size_t} a_size) \{\par
1147     array_ = array;\par
1148     size_ = a_size;\par
1149     clone_ = &NativeArray::InitRef;\par
1150   \}\par
1151 \par
1152   {\cf17 const} Element* array_;\par
1153   {\cf18 size_t} size_;\par
1154   void (NativeArray::*clone_)({\cf17 const} Element*, size_t);\par
1155 \};\par
1156 \par
1157 {\cf20 // Backport of std::index_sequence.}\par
1158 {\cf17 template} <{\cf18 size_t}... Is>\par
1159 {\cf17 struct }IndexSequence \{\par
1160   {\cf17 using }type = IndexSequence;\par
1161 \};\par
1162 \par
1163 {\cf20 // Double the IndexSequence, and one if plus_one is true.}\par
1164 {\cf17 template} <{\cf18 bool} plus_one, {\cf17 typename} T, {\cf18 size_t} sizeofT>\par
1165 {\cf17 struct }DoubleSequence;\par
1166 {\cf17 template} <{\cf18 size_t}... I, {\cf18 size_t} sizeofT>\par
1167 {\cf17 struct }DoubleSequence<true, IndexSequence<I...>, sizeofT> \{\par
1168   {\cf17 using }type = IndexSequence<I..., (sizeofT + I)..., 2 * sizeofT>;\par
1169 \};\par
1170 {\cf17 template} <{\cf18 size_t}... I, {\cf18 size_t} sizeofT>\par
1171 {\cf17 struct }DoubleSequence<false, IndexSequence<I...>, sizeofT> \{\par
1172   {\cf17 using }type = IndexSequence<I..., (sizeofT + I)...>;\par
1173 \};\par
1174 \par
1175 {\cf20 // Backport of std::make_index_sequence.}\par
1176 {\cf20 // It uses O(ln(N)) instantiation depth.}\par
1177 {\cf17 template} <{\cf18 size_t} N>\par
1178 {\cf17 struct }MakeIndexSequenceImpl\par
1179     : DoubleSequence<N % 2 == 1, typename MakeIndexSequenceImpl<N / 2>::type,\par
1180                      N / 2>::type \{\};\par
1181 \par
1182 {\cf17 template} <>\par
1183 {\cf17 struct }MakeIndexSequenceImpl<0> : IndexSequence<> \{\};\par
1184 \par
1185 {\cf17 template} <{\cf18 size_t} N>\par
1186 {\cf17 using }MakeIndexSequence = {\cf17 typename} MakeIndexSequenceImpl<N>::type;\par
1187 \par
1188 {\cf17 template} <{\cf17 typename}... T>\par
1189 {\cf17 using }IndexSequenceFor = {\cf17 typename} MakeIndexSequence<{\cf17 sizeof}...(T)>::type;\par
1190 \par
1191 {\cf17 template} <{\cf18 size_t}>\par
1192 {\cf17 struct }Ignore \{\par
1193   Ignore(...);  {\cf20 // NOLINT}\par
1194 \};\par
1195 \par
1196 {\cf17 template} <{\cf17 typename}>\par
1197 {\cf17 struct }ElemFromListImpl;\par
1198 {\cf17 template} <{\cf18 size_t}... I>\par
1199 {\cf17 struct }ElemFromListImpl<IndexSequence<I...>> \{\par
1200   {\cf20 // We make Ignore a template to solve a problem with MSVC.}\par
1201   {\cf20 // A non-template Ignore would work fine with `decltype(Ignore(I))...`, but}\par
1202   {\cf20 // MSVC doesn't understand how to deal with that pack expansion.}\par
1203   {\cf20 // Use `0 * I` to have a single instantiation of Ignore.}\par
1204   {\cf17 template} <{\cf17 typename} R>\par
1205   {\cf17 static} R Apply(Ignore<0 * I>..., R (*)(), ...);\par
1206 \};\par
1207 \par
1208 {\cf17 template} <{\cf18 size_t} N, {\cf17 typename}... T>\par
1209 {\cf17 struct }ElemFromList \{\par
1210   {\cf17 using }type =\par
1211       {\cf17 decltype}(ElemFromListImpl<typename MakeIndexSequence<N>::type>::Apply(\par
1212           {\cf17 static_cast<}T (*)(){\cf17 >}({\cf17 nullptr})...));\par
1213 \};\par
1214 \par
1215 {\cf17 struct }FlatTupleConstructTag \{\};\par
1216 \par
1217 {\cf17 template} <{\cf17 typename}... T>\par
1218 {\cf17 class }FlatTuple;\par
1219 \par
1220 {\cf17 template} <{\cf17 typename} Derived, {\cf18 size_t} I>\par
1221 {\cf17 struct }FlatTupleElemBase;\par
1222 \par
1223 {\cf17 template} <{\cf17 typename}... T, {\cf18 size_t} I>\par
1224 {\cf17 struct }FlatTupleElemBase<FlatTuple<T...>, I> \{\par
1225   {\cf17 using }value_type = {\cf17 typename} ElemFromList<I, T...>::type;\par
1226   FlatTupleElemBase() = {\cf19 default};\par
1227   {\cf17 template} <{\cf17 typename} Arg>\par
1228   {\cf17 explicit} FlatTupleElemBase(FlatTupleConstructTag, Arg&& t)\par
1229       : value(std::forward<Arg>(t)) \{\}\par
1230   value_type value;\par
1231 \};\par
1232 \par
1233 {\cf17 template} <{\cf17 typename} Derived, {\cf17 typename} Idx>\par
1234 {\cf17 struct }FlatTupleBase;\par
1235 \par
1236 {\cf17 template} <{\cf18 size_t}... Idx, {\cf17 typename}... T>\par
1237 {\cf17 struct }FlatTupleBase<FlatTuple<T...>, IndexSequence<Idx...>>\par
1238     : FlatTupleElemBase<FlatTuple<T...>, Idx>... \{\par
1239   {\cf17 using }Indices = IndexSequence<Idx...>;\par
1240   FlatTupleBase() = {\cf19 default};\par
1241   {\cf17 template} <{\cf17 typename}... Args>\par
1242   {\cf17 explicit} FlatTupleBase(FlatTupleConstructTag, Args&&... args)\par
1243       : FlatTupleElemBase<FlatTuple<T...>, Idx>(FlatTupleConstructTag\{\},\par
1244                                                 std::forward<Args>(args))... \{\}\par
1245 \par
1246   {\cf17 template} <{\cf18 size_t} I>\par
1247   {\cf17 const} {\cf17 typename} ElemFromList<I, T...>::type& Get(){\cf17  const }\{\par
1248     {\cf19 return} FlatTupleElemBase<FlatTuple<T...>, I>::value;\par
1249   \}\par
1250 \par
1251   {\cf17 template} <{\cf18 size_t} I>\par
1252   {\cf17 typename} ElemFromList<I, T...>::type& Get() \{\par
1253     {\cf19 return} FlatTupleElemBase<FlatTuple<T...>, I>::value;\par
1254   \}\par
1255 \par
1256   {\cf17 template} <{\cf17 typename} F>\par
1257   {\cf17 auto} Apply(F&& f) -> {\cf17 decltype}(std::forward<F>(f)(this->Get<Idx>()...)) \{\par
1258     {\cf19 return} std::forward<F>(f)(Get<Idx>()...);\par
1259   \}\par
1260 \par
1261   {\cf17 template} <{\cf17 typename} F>\par
1262   {\cf17 auto} Apply(F&& f) {\cf17 const} -> {\cf17 decltype}(std::forward<F>(f)(this->Get<Idx>()...)) \{\par
1263     {\cf19 return} std::forward<F>(f)(Get<Idx>()...);\par
1264   \}\par
1265 \};\par
1266 \par
1267 {\cf20 // Analog to std::tuple but with different tradeoffs.}\par
1268 {\cf20 // This class minimizes the template instantiation depth, thus allowing more}\par
1269 {\cf20 // elements than std::tuple would. std::tuple has been seen to require an}\par
1270 {\cf20 // instantiation depth of more than 10x the number of elements in some}\par
1271 {\cf20 // implementations.}\par
1272 {\cf20 // FlatTuple and ElemFromList are not recursive and have a fixed depth}\par
1273 {\cf20 // regardless of T...}\par
1274 {\cf20 // MakeIndexSequence, on the other hand, it is recursive but with an}\par
1275 {\cf20 // instantiation depth of O(ln(N)).}\par
1276 {\cf17 template} <{\cf17 typename}... T>\par
1277 {\cf17 class }FlatTuple\par
1278     : {\cf17 private} FlatTupleBase<FlatTuple<T...>,\par
1279                             typename MakeIndexSequence<sizeof...(T)>::type> \{\par
1280   {\cf17 using }Indices = {\cf17 typename} FlatTupleBase<\par
1281       FlatTuple<T...>, {\cf17 typename} MakeIndexSequence<{\cf17 sizeof}...(T)>::type>::Indices;\par
1282 \par
1283  {\cf17 public}:\par
1284   FlatTuple() = {\cf19 default};\par
1285   {\cf17 template} <{\cf17 typename}... Args>\par
1286   {\cf17 explicit} FlatTuple(FlatTupleConstructTag tag, Args&&... args)\par
1287       : FlatTuple::FlatTupleBase(tag, std::forward<Args>(args)...) \{\}\par
1288 \par
1289   {\cf17 using }FlatTuple::FlatTupleBase::Apply;\par
1290   {\cf17 using }FlatTuple::FlatTupleBase::Get;\par
1291 \};\par
1292 \par
1293 {\cf20 // Utility functions to be called with static_assert to induce deprecation}\par
1294 {\cf20 // warnings.}\par
1295 GTEST_INTERNAL_DEPRECATED(\par
1296     {\cf22 "INSTANTIATE_TEST_CASE_P is deprecated, please use "}\par
1297     {\cf22 "INSTANTIATE_TEST_SUITE_P"})\par
1298 constexpr {\cf18 bool} InstantiateTestCase_P_IsDeprecated() \{ {\cf19 return} {\cf17 true}; \}\par
1299 \par
1300 GTEST_INTERNAL_DEPRECATED(\par
1301     {\cf22 "TYPED_TEST_CASE_P is deprecated, please use "}\par
1302     {\cf22 "TYPED_TEST_SUITE_P"})\par
1303 constexpr {\cf18 bool} TypedTestCase_P_IsDeprecated() \{ {\cf19 return} {\cf17 true}; \}\par
1304 \par
1305 GTEST_INTERNAL_DEPRECATED(\par
1306     {\cf22 "TYPED_TEST_CASE is deprecated, please use "}\par
1307     {\cf22 "TYPED_TEST_SUITE"})\par
1308 constexpr {\cf18 bool} TypedTestCaseIsDeprecated() \{ {\cf19 return} {\cf17 true}; \}\par
1309 \par
1310 GTEST_INTERNAL_DEPRECATED(\par
1311     {\cf22 "REGISTER_TYPED_TEST_CASE_P is deprecated, please use "}\par
1312     {\cf22 "REGISTER_TYPED_TEST_SUITE_P"})\par
1313 constexpr {\cf18 bool} RegisterTypedTestCase_P_IsDeprecated() \{ {\cf19 return} {\cf17 true}; \}\par
1314 \par
1315 GTEST_INTERNAL_DEPRECATED(\par
1316     {\cf22 "INSTANTIATE_TYPED_TEST_CASE_P is deprecated, please use "}\par
1317     {\cf22 "INSTANTIATE_TYPED_TEST_SUITE_P"})\par
1318 constexpr {\cf18 bool} InstantiateTypedTestCase_P_IsDeprecated() \{ {\cf19 return} {\cf17 true}; \}\par
1319 \par
1320 \}  {\cf20 // namespace internal}\par
1321 \}  {\cf20 // namespace testing}\par
1322 \par
1323 {\cf17 namespace }std \{\par
1324 {\cf20 // Some standard library implementations use `struct tuple_size` and some use}\par
1325 {\cf20 // `class tuple_size`. Clang warns about the mismatch.}\par
1326 {\cf20 // https://reviews.llvm.org/D55466}\par
1327 {\cf21 #ifdef __clang__}\par
1328 {\cf21 #pragma clang diagnostic push}\par
1329 {\cf21 #pragma clang diagnostic ignored "-Wmismatched-tags"}\par
1330 {\cf21 #endif}\par
1331 {\cf17 template} <{\cf17 typename}... Ts>\par
1332 {\cf17 struct }tuple_size<testing::internal::FlatTuple<Ts...>>\par
1333     : std::integral_constant<size_t, sizeof...(Ts)> \{\};\par
1334 {\cf21 #ifdef __clang__}\par
1335 {\cf21 #pragma clang diagnostic pop}\par
1336 {\cf21 #endif}\par
1337 \}  {\cf20 // namespace std}\par
1338 \par
1339 {\cf21 #define GTEST_MESSAGE_AT_(file, line, message, result_type)             \\}\par
1340 {\cf21   ::testing::internal::AssertHelper(result_type, file, line, message) = \\}\par
1341 {\cf21       ::testing::Message()}\par
1342 \par
1343 {\cf21 #define GTEST_MESSAGE_(message, result_type) \\}\par
1344 {\cf21   GTEST_MESSAGE_AT_(__FILE__, __LINE__, message, result_type)}\par
1345 \par
1346 {\cf21 #define GTEST_FATAL_FAILURE_(message) \\}\par
1347 {\cf21   return GTEST_MESSAGE_(message, ::testing::TestPartResult::kFatalFailure)}\par
1348 \par
1349 {\cf21 #define GTEST_NONFATAL_FAILURE_(message) \\}\par
1350 {\cf21   GTEST_MESSAGE_(message, ::testing::TestPartResult::kNonFatalFailure)}\par
1351 \par
1352 {\cf21 #define GTEST_SUCCESS_(message) \\}\par
1353 {\cf21   GTEST_MESSAGE_(message, ::testing::TestPartResult::kSuccess)}\par
1354 \par
1355 {\cf21 #define GTEST_SKIP_(message) \\}\par
1356 {\cf21   return GTEST_MESSAGE_(message, ::testing::TestPartResult::kSkip)}\par
1357 \par
1358 {\cf20 // Suppress MSVC warning 4072 (unreachable code) for the code following}\par
1359 {\cf20 // statement if it returns or throws (or doesn't return or throw in some}\par
1360 {\cf20 // situations).}\par
1361 {\cf20 // NOTE: The "else" is important to keep this expansion to prevent a top-level}\par
1362 {\cf20 // "else" from attaching to our "if".}\par
1363 {\cf21 #define GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement) \\}\par
1364 {\cf21   if (::testing::internal::AlwaysTrue()) \{                        \\}\par
1365 {\cf21     statement;                                                    \\}\par
1366 {\cf21   \} else                     }{\cf20 /* NOLINT */}{\cf21                          \\}\par
1367 {\cf21     static_assert(true, ""})  {\cf20 // User must have a semicolon after expansion.}\par
1368 \par
1369 {\cf21 #if GTEST_HAS_EXCEPTIONS}\par
1370 \par
1371 {\cf17 namespace }testing \{\par
1372 {\cf17 namespace }internal \{\par
1373 \par
1374 {\cf17 class }NeverThrown \{\par
1375  {\cf17 public}:\par
1376   {\cf17 const} {\cf18 char}* what() const noexcept \{\par
1377     {\cf19 return} {\cf22 "this exception should never be thrown"};\par
1378   \}\par
1379 \};\par
1380 \par
1381 \}  {\cf20 // namespace internal}\par
1382 \}  {\cf20 // namespace testing}\par
1383 \par
1384 {\cf21 #if GTEST_HAS_RTTI}\par
1385 \par
1386 {\cf21 #define GTEST_EXCEPTION_TYPE_(e) ::testing::internal::GetTypeName(typeid(e))}\par
1387 \par
1388 {\cf21 #else  }{\cf20 // GTEST_HAS_RTTI}\par
1389 \par
1390 {\cf21 #define GTEST_EXCEPTION_TYPE_(e) \\}\par
1391 {\cf21   std::string \{ "an std::exception-derived error"} \}\par
1392 \par
1393 {\cf21 #endif  }{\cf20 // GTEST_HAS_RTTI}\par
1394 \par
1395 {\cf21 #define GTEST_TEST_THROW_CATCH_STD_EXCEPTION_(statement, expected_exception)   \\}\par
1396 {\cf21   catch (typename std::conditional<                                            \\}\par
1397 {\cf21          std::is_same<typename std::remove_cv<typename std::remove_reference<  \\}\par
1398 {\cf21                           expected_exception>::type>::type,                    \\}\par
1399 {\cf21                       std::exception>::value,                                  \\}\par
1400 {\cf21          const ::testing::internal::NeverThrown&, const std::exception&>::type \\}\par
1401 {\cf21              e) \{                                                              \\}\par
1402 {\cf21     gtest_msg.value = "Expected: "} #statement                                  \\\par
1403                       " throws an exception of type " #expected_exception      \\\par
1404                       ".\\n  Actual: it throws ";                               \\\par
1405     gtest_msg.value += GTEST_EXCEPTION_TYPE_(e);                               \\\par
1406     gtest_msg.value += " with description \\"";                                 \\\par
1407     gtest_msg.value += e.what();                                               \\\par
1408     gtest_msg.value += "\\".";                                                  \\\par
1409     goto GTEST_CONCAT_TOKEN_(gtest_label_testthrow_, __LINE__);                \\\par
1410   \}\par
1411 \par
1412 {\cf21 #else  }{\cf20 // GTEST_HAS_EXCEPTIONS}\par
1413 \par
1414 {\cf21 #define GTEST_TEST_THROW_CATCH_STD_EXCEPTION_(statement, expected_exception)}\par
1415 \par
1416 {\cf21 #endif  }{\cf20 // GTEST_HAS_EXCEPTIONS}\par
1417 \par
1418 {\cf21 #define GTEST_TEST_THROW_(statement, expected_exception, fail)              \\}\par
1419 {\cf21   GTEST_AMBIGUOUS_ELSE_BLOCKER_                                             \\}\par
1420 {\cf21   if (::testing::internal::TrueWithString gtest_msg\{\}) \{                    \\}\par
1421 {\cf21     bool gtest_caught_expected = false;                                     \\}\par
1422 {\cf21     try \{                                                                   \\}\par
1423 {\cf21       GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement);            \\}\par
1424 {\cf21     \} catch (expected_exception const&) \{                                   \\}\par
1425 {\cf21       gtest_caught_expected = true;                                         \\}\par
1426 {\cf21     \}                                                                       \\}\par
1427 {\cf21     GTEST_TEST_THROW_CATCH_STD_EXCEPTION_(statement, expected_exception)    \\}\par
1428 {\cf21     catch (...) \{                                                           \\}\par
1429 {\cf21       gtest_msg.value = "Expected: "} #statement                             \\\par
1430                         " throws an exception of type " #expected_exception \\\par
1431                         ".\\n  Actual: it throws a different type.";         \\\par
1432       goto GTEST_CONCAT_TOKEN_(gtest_label_testthrow_, __LINE__);           \\\par
1433     \}                                                                       \\\par
1434     if (!gtest_caught_expected) \{                                           \\\par
1435       gtest_msg.value = "Expected: " #statement                             \\\par
1436                         " throws an exception of type " #expected_exception \\\par
1437                         ".\\n  Actual: it throws nothing.";                  \\\par
1438       goto GTEST_CONCAT_TOKEN_(gtest_label_testthrow_, __LINE__);           \\\par
1439     \}                                                                       \\\par
1440   \} else {\cf20 /*NOLINT*/}{\cf21                                                          \\}\par
1441 {\cf21     GTEST_CONCAT_TOKEN_(gtest_label_testthrow_, __LINE__)                   \\}\par
1442 {\cf21         : fail(gtest_msg.value.c_str())}\par
1443 \par
1444 {\cf21 #if GTEST_HAS_EXCEPTIONS}\par
1445 \par
1446 {\cf21 #define GTEST_TEST_NO_THROW_CATCH_STD_EXCEPTION_()                \\}\par
1447 {\cf21   catch (std::exception const& e) \{                               \\}\par
1448 {\cf21     gtest_msg.value = "it throws "};                               \\\par
1449     gtest_msg.value += GTEST_EXCEPTION_TYPE_(e);                  \\\par
1450     gtest_msg.value += " with description \\"";                    \\\par
1451     gtest_msg.value += e.what();                                  \\\par
1452     gtest_msg.value += "\\".";                                     \\\par
1453     goto GTEST_CONCAT_TOKEN_(gtest_label_testnothrow_, __LINE__); \\\par
1454   \}\par
1455 \par
1456 {\cf21 #else  }{\cf20 // GTEST_HAS_EXCEPTIONS}\par
1457 \par
1458 {\cf21 #define GTEST_TEST_NO_THROW_CATCH_STD_EXCEPTION_()}\par
1459 \par
1460 {\cf21 #endif  }{\cf20 // GTEST_HAS_EXCEPTIONS}\par
1461 \par
1462 {\cf21 #define GTEST_TEST_NO_THROW_(statement, fail)                            \\}\par
1463 {\cf21   GTEST_AMBIGUOUS_ELSE_BLOCKER_                                          \\}\par
1464 {\cf21   if (::testing::internal::TrueWithString gtest_msg\{\}) \{                 \\}\par
1465 {\cf21     try \{                                                                \\}\par
1466 {\cf21       GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement);         \\}\par
1467 {\cf21     \}                                                                    \\}\par
1468 {\cf21     GTEST_TEST_NO_THROW_CATCH_STD_EXCEPTION_()                           \\}\par
1469 {\cf21     catch (...) \{                                                        \\}\par
1470 {\cf21       gtest_msg.value = "it throws."};                                    \\\par
1471       goto GTEST_CONCAT_TOKEN_(gtest_label_testnothrow_, __LINE__);      \\\par
1472     \}                                                                    \\\par
1473   \} else                                                                 \\\par
1474     GTEST_CONCAT_TOKEN_(gtest_label_testnothrow_, __LINE__)              \\\par
1475         : fail(("Expected: " #statement " doesn't throw an exception.\\n" \\\par
1476                 "  Actual: " +                                           \\\par
1477                 gtest_msg.value)                                         \\\par
1478                    .c_str())\par
1479 \par
1480 {\cf21 #define GTEST_TEST_ANY_THROW_(statement, fail)                       \\}\par
1481 {\cf21   GTEST_AMBIGUOUS_ELSE_BLOCKER_                                      \\}\par
1482 {\cf21   if (::testing::internal::AlwaysTrue()) \{                           \\}\par
1483 {\cf21     bool gtest_caught_any = false;                                   \\}\par
1484 {\cf21     try \{                                                            \\}\par
1485 {\cf21       GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement);     \\}\par
1486 {\cf21     \} catch (...) \{                                                  \\}\par
1487 {\cf21       gtest_caught_any = true;                                       \\}\par
1488 {\cf21     \}                                                                \\}\par
1489 {\cf21     if (!gtest_caught_any) \{                                         \\}\par
1490 {\cf21       goto GTEST_CONCAT_TOKEN_(gtest_label_testanythrow_, __LINE__); \\}\par
1491 {\cf21     \}                                                                \\}\par
1492 {\cf21   \} else                                                             \\}\par
1493 {\cf21     GTEST_CONCAT_TOKEN_(gtest_label_testanythrow_, __LINE__)         \\}\par
1494 {\cf21         : fail("Expected: "} #statement                               \\\par
1495                " throws an exception.\\n"                             \\\par
1496                "  Actual: it doesn't.")\par
1497 \par
1498 {\cf20 // Implements Boolean test assertions such as EXPECT_TRUE. expression can be}\par
1499 {\cf20 // either a boolean expression or an AssertionResult. text is a textual}\par
1500 {\cf20 // representation of expression as it was passed into the EXPECT_TRUE.}\par
1501 {\cf21 #define GTEST_TEST_BOOLEAN_(expression, text, actual, expected, fail) \\}\par
1502 {\cf21   GTEST_AMBIGUOUS_ELSE_BLOCKER_                                       \\}\par
1503 {\cf21   if (const ::testing::AssertionResult gtest_ar_ =                    \\}\par
1504 {\cf21           ::testing::AssertionResult(expression))                     \\}\par
1505 {\cf21     ;                                                                 \\}\par
1506 {\cf21   else                                                                \\}\par
1507 {\cf21     fail(::testing::internal::GetBoolAssertionFailureMessage(         \\}\par
1508 {\cf21              gtest_ar_, text, #actual, #expected)                     \\}\par
1509 {\cf21              .c_str())}\par
1510 \par
1511 {\cf21 #define GTEST_TEST_NO_FATAL_FAILURE_(statement, fail)                          \\}\par
1512 {\cf21   GTEST_AMBIGUOUS_ELSE_BLOCKER_                                                \\}\par
1513 {\cf21   if (::testing::internal::AlwaysTrue()) \{                                     \\}\par
1514 {\cf21     ::testing::internal::HasNewFatalFailureHelper gtest_fatal_failure_checker; \\}\par
1515 {\cf21     GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement);                 \\}\par
1516 {\cf21     if (gtest_fatal_failure_checker.has_new_fatal_failure()) \{                 \\}\par
1517 {\cf21       goto GTEST_CONCAT_TOKEN_(gtest_label_testnofatal_, __LINE__);            \\}\par
1518 {\cf21     \}                                                                          \\}\par
1519 {\cf21   \} else                                                                       \\}\par
1520 {\cf21     GTEST_CONCAT_TOKEN_(gtest_label_testnofatal_, __LINE__)                    \\}\par
1521 {\cf21         : fail("Expected: "} #statement                                         \\\par
1522                " doesn't generate new fatal "                                  \\\par
1523                "failures in the current thread.\\n"                             \\\par
1524                "  Actual: it does.")\par
1525 \par
1526 {\cf20 // Expands to the name of the class that implements the given test.}\par
1527 {\cf21 #define GTEST_TEST_CLASS_NAME_(test_suite_name, test_name) \\}\par
1528 {\cf21   test_suite_name##_##test_name##_Test}\par
1529 \par
1530 {\cf20 // Helper macro for defining tests.}\par
1531 {\cf21 #define GTEST_TEST_(test_suite_name, test_name, parent_class, parent_id)       \\}\par
1532 {\cf21   static_assert(sizeof(GTEST_STRINGIFY_(test_suite_name)) > 1,                 \\}\par
1533 {\cf21                 "test_suite_name must not be empty"});                          \\\par
1534   static_assert(sizeof(GTEST_STRINGIFY_(test_name)) > 1,                       \\\par
1535                 "test_name must not be empty");                                \\\par
1536   class GTEST_TEST_CLASS_NAME_(test_suite_name, test_name)                     \\\par
1537       : public parent_class \{                                                  \\\par
1538    public:                                                                     \\\par
1539     GTEST_TEST_CLASS_NAME_(test_suite_name, test_name)() = default;            \\\par
1540     ~GTEST_TEST_CLASS_NAME_(test_suite_name, test_name)() override = default;  \\\par
1541     GTEST_TEST_CLASS_NAME_(test_suite_name, test_name)                         \\\par
1542     (const GTEST_TEST_CLASS_NAME_(test_suite_name, test_name) &) = delete;     \\\par
1543     GTEST_TEST_CLASS_NAME_(test_suite_name, test_name) & operator=(            \\\par
1544         const GTEST_TEST_CLASS_NAME_(test_suite_name,                          \\\par
1545                                      test_name) &) = delete; {\cf20 /* NOLINT */}{\cf21       \\}\par
1546 {\cf21     GTEST_TEST_CLASS_NAME_(test_suite_name, test_name)                         \\}\par
1547 {\cf21     (GTEST_TEST_CLASS_NAME_(test_suite_name, test_name) &&) noexcept = delete; \\}\par
1548 {\cf21     GTEST_TEST_CLASS_NAME_(test_suite_name, test_name) & operator=(            \\}\par
1549 {\cf21         GTEST_TEST_CLASS_NAME_(test_suite_name,                                \\}\par
1550 {\cf21                                test_name) &&) noexcept = delete; }{\cf20 /* NOLINT */}{\cf21   \\}\par
1551 {\cf21                                                                                \\}\par
1552 {\cf21    private:                                                                    \\}\par
1553 {\cf21     void TestBody() override;                                                  \\}\par
1554 {\cf21     static ::testing::TestInfo* const test_info_ GTEST_ATTRIBUTE_UNUSED_;      \\}\par
1555 {\cf21   \};                                                                           \\}\par
1556 {\cf21                                                                                \\}\par
1557 {\cf21   ::testing::TestInfo* const GTEST_TEST_CLASS_NAME_(test_suite_name,           \\}\par
1558 {\cf21                                                     test_name)::test_info_ =   \\}\par
1559 {\cf21       ::testing::internal::MakeAndRegisterTestInfo(                            \\}\par
1560 {\cf21           #test_suite_name, #test_name, nullptr, nullptr,                      \\}\par
1561 {\cf21           ::testing::internal::CodeLocation(__FILE__, __LINE__), (parent_id),  \\}\par
1562 {\cf21           ::testing::internal::SuiteApiResolver<                               \\}\par
1563 {\cf21               parent_class>::GetSetUpCaseOrSuite(__FILE__, __LINE__),          \\}\par
1564 {\cf21           ::testing::internal::SuiteApiResolver<                               \\}\par
1565 {\cf21               parent_class>::GetTearDownCaseOrSuite(__FILE__, __LINE__),       \\}\par
1566 {\cf21           new ::testing::internal::TestFactoryImpl<GTEST_TEST_CLASS_NAME_(     \\}\par
1567 {\cf21               test_suite_name, test_name)>);                                   \\}\par
1568 {\cf21   void GTEST_TEST_CLASS_NAME_(test_suite_name, test_name)::TestBody()}\par
1569 \par
1570 {\cf21 #endif  }{\cf20 // GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_INTERNAL_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest-param-util.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googletest/include/gtest/internal/gtest-param-util.h}
{\xe \v lib/googletest-main/googletest/include/gtest/internal/gtest-param-util.h}
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2008 Google Inc.}\par
2 {\cf20 // All Rights Reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // Type and function utilities for implementing parameterized tests.}\par
31 \par
32 {\cf20 // IWYU pragma: private, include "gtest/gtest.h"}\par
33 {\cf20 // IWYU pragma: friend gtest/.*}\par
34 {\cf20 // IWYU pragma: friend gmock/.*}\par
35 \par
36 {\cf21 #ifndef GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_PARAM_UTIL_H_}\par
37 {\cf21 #define GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_PARAM_UTIL_H_}\par
38 \par
39 {\cf21 #include <ctype.h>}\par
40 \par
41 {\cf21 #include <cassert>}\par
42 {\cf21 #include <iterator>}\par
43 {\cf21 #include <memory>}\par
44 {\cf21 #include <set>}\par
45 {\cf21 #include <tuple>}\par
46 {\cf21 #include <type_traits>}\par
47 {\cf21 #include <utility>}\par
48 {\cf21 #include <vector>}\par
49 \par
50 {\cf21 #include "gtest/gtest-printers.h"}\par
51 {\cf21 #include "gtest/gtest-test-part.h"}\par
52 {\cf21 #include "gtest/internal/gtest-internal.h"}\par
53 {\cf21 #include "gtest/internal/gtest-port.h"}\par
54 \par
55 {\cf17 namespace }testing \{\par
56 {\cf20 // Input to a parameterized test name generator, describing a test parameter.}\par
57 {\cf20 // Consists of the parameter value and the integer parameter index.}\par
58 {\cf17 template} <{\cf17 class} ParamType>\par
59 {\cf17 struct }TestParamInfo \{\par
60   TestParamInfo({\cf17 const} ParamType& a_param, {\cf18 size_t} an_index)\par
61       : param(a_param), index(an_index) \{\}\par
62   ParamType param;\par
63   {\cf18 size_t} index;\par
64 \};\par
65 \par
66 {\cf20 // A builtin parameterized test name generator which returns the result of}\par
67 {\cf20 // testing::PrintToString.}\par
68 {\cf17 struct }PrintToStringParamName \{\par
69   {\cf17 template} <{\cf17 class} ParamType>\par
70   std::string operator()({\cf17 const} TestParamInfo<ParamType>& info){\cf17  const }\{\par
71     {\cf19 return} PrintToString(info.param);\par
72   \}\par
73 \};\par
74 \par
75 {\cf17 namespace }internal \{\par
76 \par
77 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.}\par
78 {\cf20 // Utility Functions}\par
79 \par
80 {\cf20 // Outputs a message explaining invalid registration of different}\par
81 {\cf20 // fixture class for the same test suite. This may happen when}\par
82 {\cf20 // TEST_P macro is used to define two tests with the same name}\par
83 {\cf20 // but in different namespaces.}\par
84 GTEST_API_ {\cf18 void} ReportInvalidTestSuiteType({\cf17 const} {\cf18 char}* test_suite_name,\par
85                                            CodeLocation code_location);\par
86 \par
87 {\cf17 template} <{\cf17 typename}>\par
88 {\cf17 class }ParamGeneratorInterface;\par
89 {\cf17 template} <{\cf17 typename}>\par
90 {\cf17 class }ParamGenerator;\par
91 \par
92 {\cf20 // Interface for iterating over elements provided by an implementation}\par
93 {\cf20 // of ParamGeneratorInterface<T>.}\par
94 {\cf17 template} <{\cf17 typename} T>\par
95 {\cf17 class }ParamIteratorInterface \{\par
96  {\cf17 public}:\par
97   {\cf17 virtual} ~ParamIteratorInterface() \{\}\par
98   {\cf20 // A pointer to the base generator instance.}\par
99   {\cf20 // Used only for the purposes of iterator comparison}\par
100   {\cf20 // to make sure that two iterators belong to the same generator.}\par
101   {\cf17 virtual} {\cf17 const} ParamGeneratorInterface<T>* BaseGenerator() {\cf17 const} = 0;\par
102   {\cf20 // Advances iterator to point to the next element}\par
103   {\cf20 // provided by the generator. The caller is responsible}\par
104   {\cf20 // for not calling Advance() on an iterator equal to}\par
105   {\cf20 // BaseGenerator()->End().}\par
106   {\cf17 virtual} {\cf18 void} Advance() = 0;\par
107   {\cf20 // Clones the iterator object. Used for implementing copy semantics}\par
108   {\cf20 // of ParamIterator<T>.}\par
109   {\cf17 virtual} ParamIteratorInterface* Clone() {\cf17 const} = 0;\par
110   {\cf20 // Dereferences the current iterator and provides (read-only) access}\par
111   {\cf20 // to the pointed value. It is the caller's responsibility not to call}\par
112   {\cf20 // Current() on an iterator equal to BaseGenerator()->End().}\par
113   {\cf20 // Used for implementing ParamGenerator<T>::operator*().}\par
114   {\cf17 virtual} {\cf17 const} T* Current() {\cf17 const} = 0;\par
115   {\cf20 // Determines whether the given iterator and other point to the same}\par
116   {\cf20 // element in the sequence generated by the generator.}\par
117   {\cf20 // Used for implementing ParamGenerator<T>::operator==().}\par
118   {\cf17 virtual} {\cf18 bool} Equals({\cf17 const} ParamIteratorInterface& other) {\cf17 const} = 0;\par
119 \};\par
120 \par
121 {\cf20 // Class iterating over elements provided by an implementation of}\par
122 {\cf20 // ParamGeneratorInterface<T>. It wraps ParamIteratorInterface<T>}\par
123 {\cf20 // and implements the const forward iterator concept.}\par
124 {\cf17 template} <{\cf17 typename} T>\par
125 {\cf17 class }ParamIterator \{\par
126  {\cf17 public}:\par
127   {\cf17 typedef} T value_type;\par
128   {\cf17 typedef} {\cf17 const} T& reference;\par
129   {\cf17 typedef} ptrdiff_t difference_type;\par
130 \par
131   {\cf20 // ParamIterator assumes ownership of the impl_ pointer.}\par
132   ParamIterator({\cf17 const} ParamIterator& other) : impl_(other.impl_->Clone()) \{\}\par
133   ParamIterator& operator=({\cf17 const} ParamIterator& other) \{\par
134     {\cf19 if} ({\cf17 this} != &other) impl_.reset(other.impl_->Clone());\par
135     {\cf19 return} *{\cf17 this};\par
136   \}\par
137 \par
138   {\cf17 const} T& operator*(){\cf17  const }\{ {\cf19 return} *impl_->Current(); \}\par
139   {\cf17 const} T* operator->(){\cf17  const }\{ {\cf19 return} impl_->Current(); \}\par
140   {\cf20 // Prefix version of operator++.}\par
141   ParamIterator& operator++() \{\par
142     impl_->Advance();\par
143     {\cf19 return} *{\cf17 this};\par
144   \}\par
145   {\cf20 // Postfix version of operator++.}\par
146   ParamIterator operator++({\cf18 int} {\cf20 /*unused*/}) \{\par
147     ParamIteratorInterface<T>* clone = impl_->Clone();\par
148     impl_->Advance();\par
149     {\cf19 return} ParamIterator(clone);\par
150   \}\par
151   {\cf18 bool} operator==({\cf17 const} ParamIterator& other){\cf17  const }\{\par
152     {\cf19 return} impl_.get() == other.impl_.get() || impl_->Equals(*other.impl_);\par
153   \}\par
154   {\cf18 bool} operator!=({\cf17 const} ParamIterator& other){\cf17  const }\{\par
155     {\cf19 return} !(*{\cf17 this} == other);\par
156   \}\par
157 \par
158  {\cf17 private}:\par
159   {\cf17 friend} {\cf17 class }ParamGenerator<T>;\par
160   {\cf17 explicit} ParamIterator(ParamIteratorInterface<T>* impl) : impl_(impl) \{\}\par
161   std::unique_ptr<ParamIteratorInterface<T>> impl_;\par
162 \};\par
163 \par
164 {\cf20 // ParamGeneratorInterface<T> is the binary interface to access generators}\par
165 {\cf20 // defined in other translation units.}\par
166 {\cf17 template} <{\cf17 typename} T>\par
167 {\cf17 class }ParamGeneratorInterface \{\par
168  {\cf17 public}:\par
169   {\cf17 typedef} T ParamType;\par
170 \par
171   {\cf17 virtual} ~ParamGeneratorInterface() \{\}\par
172 \par
173   {\cf20 // Generator interface definition}\par
174   {\cf17 virtual} ParamIteratorInterface<T>* Begin() {\cf17 const} = 0;\par
175   {\cf17 virtual} ParamIteratorInterface<T>* End() {\cf17 const} = 0;\par
176 \};\par
177 \par
178 {\cf20 // Wraps ParamGeneratorInterface<T> and provides general generator syntax}\par
179 {\cf20 // compatible with the STL Container concept.}\par
180 {\cf20 // This class implements copy initialization semantics and the contained}\par
181 {\cf20 // ParamGeneratorInterface<T> instance is shared among all copies}\par
182 {\cf20 // of the original object. This is possible because that instance is immutable.}\par
183 {\cf17 template} <{\cf17 typename} T>\par
184 {\cf17 class }ParamGenerator \{\par
185  {\cf17 public}:\par
186   {\cf17 typedef} ParamIterator<T> iterator;\par
187 \par
188   {\cf17 explicit} ParamGenerator(ParamGeneratorInterface<T>* impl) : impl_(impl) \{\}\par
189   ParamGenerator({\cf17 const} ParamGenerator& other) : impl_(other.impl_) \{\}\par
190 \par
191   ParamGenerator& operator=({\cf17 const} ParamGenerator& other) \{\par
192     impl_ = other.impl_;\par
193     {\cf19 return} *{\cf17 this};\par
194   \}\par
195 \par
196   iterator begin(){\cf17  const }\{ {\cf19 return} iterator(impl_->Begin()); \}\par
197   iterator end(){\cf17  const }\{ {\cf19 return} iterator(impl_->End()); \}\par
198 \par
199  {\cf17 private}:\par
200   std::shared_ptr<const ParamGeneratorInterface<T>> impl_;\par
201 \};\par
202 \par
203 {\cf20 // Generates values from a range of two comparable values. Can be used to}\par
204 {\cf20 // generate sequences of user-defined types that implement operator+() and}\par
205 {\cf20 // operator<().}\par
206 {\cf20 // This class is used in the Range() function.}\par
207 {\cf17 template} <{\cf17 typename} T, {\cf17 typename} IncrementT>\par
208 {\cf17 class }RangeGenerator : {\cf17 public} ParamGeneratorInterface<T> \{\par
209  {\cf17 public}:\par
210   RangeGenerator(T begin, T end, IncrementT step)\par
211       : begin_(begin),\par
212         end_(end),\par
213         step_(step),\par
214         end_index_(CalculateEndIndex(begin, end, step)) \{\}\par
215   ~RangeGenerator(){\cf17  override }\{\}\par
216 \par
217   ParamIteratorInterface<T>* Begin(){\cf17  const override }\{\par
218     {\cf19 return} {\cf17 new} Iterator({\cf17 this}, begin_, 0, step_);\par
219   \}\par
220   ParamIteratorInterface<T>* End(){\cf17  const override }\{\par
221     {\cf19 return} {\cf17 new} Iterator({\cf17 this}, end_, end_index_, step_);\par
222   \}\par
223 \par
224  {\cf17 private}:\par
225   {\cf17 class }Iterator : {\cf17 public} ParamIteratorInterface<T> \{\par
226    {\cf17 public}:\par
227     Iterator({\cf17 const} ParamGeneratorInterface<T>* base, T value, {\cf18 int} index,\par
228              IncrementT step)\par
229         : base_(base), value_(value), index_(index), step_(step) \{\}\par
230     ~Iterator(){\cf17  override }\{\}\par
231 \par
232     {\cf17 const} ParamGeneratorInterface<T>* BaseGenerator(){\cf17  const override }\{\par
233       {\cf19 return} base_;\par
234     \}\par
235     {\cf18 void} Advance(){\cf17  override }\{\par
236       value_ = {\cf17 static_cast<}T{\cf17 >}(value_ + step_);\par
237       index_++;\par
238     \}\par
239     ParamIteratorInterface<T>* Clone(){\cf17  const override }\{\par
240       {\cf19 return} {\cf17 new} Iterator(*{\cf17 this});\par
241     \}\par
242     {\cf17 const} T* Current(){\cf17  const override }\{ {\cf19 return} &value_; \}\par
243     {\cf18 bool} Equals({\cf17 const} ParamIteratorInterface<T>& other){\cf17  const override }\{\par
244       {\cf20 // Having the same base generator guarantees that the other}\par
245       {\cf20 // iterator is of the same type and we can downcast.}\par
246       GTEST_CHECK_(BaseGenerator() == other.BaseGenerator())\par
247           << {\cf22 "The program attempted to compare iterators "}\par
248           << {\cf22 "from different generators."} << std::endl;\par
249       {\cf17 const} {\cf18 int} other_index =\par
250           CheckedDowncastToActualType<const Iterator>(&other)->index_;\par
251       {\cf19 return} index_ == other_index;\par
252     \}\par
253 \par
254    {\cf17 private}:\par
255     Iterator({\cf17 const} Iterator& other)\par
256         : ParamIteratorInterface<T>(),\par
257           base_(other.base_),\par
258           value_(other.value_),\par
259           index_(other.index_),\par
260           step_(other.step_) \{\}\par
261 \par
262     {\cf20 // No implementation - assignment is unsupported.}\par
263     {\cf18 void} operator=({\cf17 const} Iterator& other);\par
264 \par
265     {\cf17 const} ParamGeneratorInterface<T>* {\cf17 const} base_;\par
266     T value_;\par
267     {\cf18 int} index_;\par
268     {\cf17 const} IncrementT step_;\par
269   \};  {\cf20 // class RangeGenerator::Iterator}\par
270 \par
271   {\cf17 static} {\cf18 int} CalculateEndIndex({\cf17 const} T& begin, {\cf17 const} T& end,\par
272                                {\cf17 const} IncrementT& step) \{\par
273     {\cf18 int} end_index = 0;\par
274     {\cf19 for} (T i = begin; i < end; i = static_cast<T>(i + step)) end_index++;\par
275     {\cf19 return} end_index;\par
276   \}\par
277 \par
278   {\cf20 // No implementation - assignment is unsupported.}\par
279   {\cf18 void} operator=({\cf17 const} RangeGenerator& other);\par
280 \par
281   {\cf17 const} T begin_;\par
282   {\cf17 const} T end_;\par
283   {\cf17 const} IncrementT step_;\par
284   {\cf20 // The index for the end() iterator. All the elements in the generated}\par
285   {\cf20 // sequence are indexed (0-based) to aid iterator comparison.}\par
286   {\cf17 const} {\cf18 int} end_index_;\par
287 \};  {\cf20 // class RangeGenerator}\par
288 \par
289 {\cf20 // Generates values from a pair of STL-style iterators. Used in the}\par
290 {\cf20 // ValuesIn() function. The elements are copied from the source range}\par
291 {\cf20 // since the source can be located on the stack, and the generator}\par
292 {\cf20 // is likely to persist beyond that stack frame.}\par
293 {\cf17 template} <{\cf17 typename} T>\par
294 {\cf17 class }ValuesInIteratorRangeGenerator : {\cf17 public} ParamGeneratorInterface<T> \{\par
295  {\cf17 public}:\par
296   {\cf17 template} <{\cf17 typename} ForwardIterator>\par
297   ValuesInIteratorRangeGenerator(ForwardIterator begin, ForwardIterator end)\par
298       : container_(begin, end) \{\}\par
299   ~ValuesInIteratorRangeGenerator(){\cf17  override }\{\}\par
300 \par
301   ParamIteratorInterface<T>* Begin(){\cf17  const override }\{\par
302     {\cf19 return} {\cf17 new} Iterator({\cf17 this}, container_.begin());\par
303   \}\par
304   ParamIteratorInterface<T>* End(){\cf17  const override }\{\par
305     {\cf19 return} {\cf17 new} Iterator({\cf17 this}, container_.end());\par
306   \}\par
307 \par
308  {\cf17 private}:\par
309   {\cf17 typedef} typename ::std::vector<T> ContainerType;\par
310 \par
311   {\cf17 class }Iterator : {\cf17 public} ParamIteratorInterface<T> \{\par
312    {\cf17 public}:\par
313     Iterator({\cf17 const} ParamGeneratorInterface<T>* base,\par
314              {\cf17 typename} ContainerType::const_iterator iterator)\par
315         : base_(base), iterator_(iterator) \{\}\par
316     ~Iterator(){\cf17  override }\{\}\par
317 \par
318     {\cf17 const} ParamGeneratorInterface<T>* BaseGenerator(){\cf17  const override }\{\par
319       {\cf19 return} base_;\par
320     \}\par
321     {\cf18 void} Advance(){\cf17  override }\{\par
322       ++iterator_;\par
323       value_.reset();\par
324     \}\par
325     ParamIteratorInterface<T>* Clone(){\cf17  const override }\{\par
326       {\cf19 return} {\cf17 new} Iterator(*{\cf17 this});\par
327     \}\par
328     {\cf20 // We need to use cached value referenced by iterator_ because *iterator_}\par
329     {\cf20 // can return a temporary object (and of type other then T), so just}\par
330     {\cf20 // having "return &*iterator_;" doesn't work.}\par
331     {\cf20 // value_ is updated here and not in Advance() because Advance()}\par
332     {\cf20 // can advance iterator_ beyond the end of the range, and we cannot}\par
333     {\cf20 // detect that fact. The client code, on the other hand, is}\par
334     {\cf20 // responsible for not calling Current() on an out-of-range iterator.}\par
335     {\cf17 const} T* Current(){\cf17  const override }\{\par
336       {\cf19 if} (value_.get() == {\cf17 nullptr}) value_.reset({\cf17 new} T(*iterator_));\par
337       {\cf19 return} value_.get();\par
338     \}\par
339     {\cf18 bool} Equals({\cf17 const} ParamIteratorInterface<T>& other){\cf17  const override }\{\par
340       {\cf20 // Having the same base generator guarantees that the other}\par
341       {\cf20 // iterator is of the same type and we can downcast.}\par
342       GTEST_CHECK_(BaseGenerator() == other.BaseGenerator())\par
343           << {\cf22 "The program attempted to compare iterators "}\par
344           << {\cf22 "from different generators."} << std::endl;\par
345       {\cf19 return} iterator_ ==\par
346              CheckedDowncastToActualType<const Iterator>(&other)->iterator_;\par
347     \}\par
348 \par
349    {\cf17 private}:\par
350     Iterator({\cf17 const} Iterator& other)\par
351         {\cf20 // The explicit constructor call suppresses a false warning}\par
352         {\cf20 // emitted by gcc when supplied with the -Wextra option.}\par
353         : ParamIteratorInterface<T>(),\par
354           base_(other.base_),\par
355           iterator_(other.iterator_) \{\}\par
356 \par
357     {\cf17 const} ParamGeneratorInterface<T>* {\cf17 const} base_;\par
358     {\cf17 typename} ContainerType::const_iterator iterator_;\par
359     {\cf20 // A cached value of *iterator_. We keep it here to allow access by}\par
360     {\cf20 // pointer in the wrapping iterator's operator->().}\par
361     {\cf20 // value_ needs to be mutable to be accessed in Current().}\par
362     {\cf20 // Use of std::unique_ptr helps manage cached value's lifetime,}\par
363     {\cf20 // which is bound by the lifespan of the iterator itself.}\par
364     {\cf17 mutable} std::unique_ptr<const T> value_;\par
365   \};  {\cf20 // class ValuesInIteratorRangeGenerator::Iterator}\par
366 \par
367   {\cf20 // No implementation - assignment is unsupported.}\par
368   {\cf18 void} operator=({\cf17 const} ValuesInIteratorRangeGenerator& other);\par
369 \par
370   {\cf17 const} ContainerType container_;\par
371 \};  {\cf20 // class ValuesInIteratorRangeGenerator}\par
372 \par
373 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.}\par
374 {\cf20 //}\par
375 {\cf20 // Default parameterized test name generator, returns a string containing the}\par
376 {\cf20 // integer test parameter index.}\par
377 {\cf17 template} <{\cf17 class} ParamType>\par
378 std::string DefaultParamName({\cf17 const} TestParamInfo<ParamType>& info) \{\par
379   Message name_stream;\par
380   name_stream << info.index;\par
381   {\cf19 return} name_stream.GetString();\par
382 \}\par
383 \par
384 {\cf17 template} <{\cf17 typename} T = {\cf18 int}>\par
385 {\cf18 void} TestNotEmpty() \{\par
386   {\cf17 static_assert}({\cf17 sizeof}(T) == 0, {\cf22 "Empty arguments are not allowed."});\par
387 \}\par
388 {\cf17 template} <{\cf17 typename} T = {\cf18 int}>\par
389 {\cf18 void} TestNotEmpty({\cf17 const} T&) \{\}\par
390 \par
391 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.}\par
392 {\cf20 //}\par
393 {\cf20 // Stores a parameter value and later creates tests parameterized with that}\par
394 {\cf20 // value.}\par
395 {\cf17 template} <{\cf17 class} TestClass>\par
396 {\cf17 class }ParameterizedTestFactory : {\cf17 public} TestFactoryBase \{\par
397  {\cf17 public}:\par
398   {\cf17 typedef} {\cf17 typename} TestClass::ParamType ParamType;\par
399   {\cf17 explicit} ParameterizedTestFactory(ParamType parameter)\par
400       : parameter_(parameter) \{\}\par
401   Test* CreateTest(){\cf17  override }\{\par
402     TestClass::SetParam(&parameter_);\par
403     {\cf19 return} {\cf17 new} TestClass();\par
404   \}\par
405 \par
406  {\cf17 private}:\par
407   {\cf17 const} ParamType parameter_;\par
408 \par
409   ParameterizedTestFactory({\cf17 const} ParameterizedTestFactory&) = {\cf17 delete};\par
410   ParameterizedTestFactory& operator=({\cf17 const} ParameterizedTestFactory&) = {\cf17 delete};\par
411 \};\par
412 \par
413 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.}\par
414 {\cf20 //}\par
415 {\cf20 // TestMetaFactoryBase is a base class for meta-factories that create}\par
416 {\cf20 // test factories for passing into MakeAndRegisterTestInfo function.}\par
417 {\cf17 template} <{\cf17 class} ParamType>\par
418 {\cf17 class }TestMetaFactoryBase \{\par
419  {\cf17 public}:\par
420   {\cf17 virtual} ~TestMetaFactoryBase() \{\}\par
421 \par
422   {\cf17 virtual} TestFactoryBase* CreateTestFactory(ParamType parameter) = 0;\par
423 \};\par
424 \par
425 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.}\par
426 {\cf20 //}\par
427 {\cf20 // TestMetaFactory creates test factories for passing into}\par
428 {\cf20 // MakeAndRegisterTestInfo function. Since MakeAndRegisterTestInfo receives}\par
429 {\cf20 // ownership of test factory pointer, same factory object cannot be passed}\par
430 {\cf20 // into that method twice. But ParameterizedTestSuiteInfo is going to call}\par
431 {\cf20 // it for each Test/Parameter value combination. Thus it needs meta factory}\par
432 {\cf20 // creator class.}\par
433 {\cf17 template} <{\cf17 class} TestSuite>\par
434 {\cf17 class }TestMetaFactory\par
435     : {\cf17 public} TestMetaFactoryBase<typename TestSuite::ParamType> \{\par
436  {\cf17 public}:\par
437   {\cf17 using }ParamType = {\cf17 typename} TestSuite::ParamType;\par
438 \par
439   TestMetaFactory() \{\}\par
440 \par
441   TestFactoryBase* CreateTestFactory(ParamType parameter){\cf17  override }\{\par
442     {\cf19 return} {\cf17 new} ParameterizedTestFactory<TestSuite>(parameter);\par
443   \}\par
444 \par
445  {\cf17 private}:\par
446   TestMetaFactory({\cf17 const} TestMetaFactory&) = {\cf17 delete};\par
447   TestMetaFactory& operator=({\cf17 const} TestMetaFactory&) = {\cf17 delete};\par
448 \};\par
449 \par
450 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.}\par
451 {\cf20 //}\par
452 {\cf20 // ParameterizedTestSuiteInfoBase is a generic interface}\par
453 {\cf20 // to ParameterizedTestSuiteInfo classes. ParameterizedTestSuiteInfoBase}\par
454 {\cf20 // accumulates test information provided by TEST_P macro invocations}\par
455 {\cf20 // and generators provided by INSTANTIATE_TEST_SUITE_P macro invocations}\par
456 {\cf20 // and uses that information to register all resulting test instances}\par
457 {\cf20 // in RegisterTests method. The ParameterizeTestSuiteRegistry class holds}\par
458 {\cf20 // a collection of pointers to the ParameterizedTestSuiteInfo objects}\par
459 {\cf20 // and calls RegisterTests() on each of them when asked.}\par
460 {\cf17 class }ParameterizedTestSuiteInfoBase \{\par
461  {\cf17 public}:\par
462   {\cf17 virtual} ~ParameterizedTestSuiteInfoBase() \{\}\par
463 \par
464   {\cf20 // Base part of test suite name for display purposes.}\par
465   {\cf17 virtual} {\cf17 const} std::string& GetTestSuiteName() {\cf17 const} = 0;\par
466   {\cf20 // Test suite id to verify identity.}\par
467   {\cf17 virtual} TypeId GetTestSuiteTypeId() {\cf17 const} = 0;\par
468   {\cf20 // UnitTest class invokes this method to register tests in this}\par
469   {\cf20 // test suite right before running them in RUN_ALL_TESTS macro.}\par
470   {\cf20 // This method should not be called more than once on any single}\par
471   {\cf20 // instance of a ParameterizedTestSuiteInfoBase derived class.}\par
472   {\cf17 virtual} {\cf18 void} RegisterTests() = 0;\par
473 \par
474  {\cf17 protected}:\par
475   ParameterizedTestSuiteInfoBase() \{\}\par
476 \par
477  {\cf17 private}:\par
478   ParameterizedTestSuiteInfoBase({\cf17 const} ParameterizedTestSuiteInfoBase&) =\par
479       {\cf17 delete};\par
480   ParameterizedTestSuiteInfoBase& operator=(\par
481       {\cf17 const} ParameterizedTestSuiteInfoBase&) = {\cf17 delete};\par
482 \};\par
483 \par
484 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.}\par
485 {\cf20 //}\par
486 {\cf20 // Report a the name of a test_suit as safe to ignore}\par
487 {\cf20 // as the side effect of construction of this type.}\par
488 {\cf17 struct }GTEST_API_ MarkAsIgnored \{\par
489   {\cf17 explicit} MarkAsIgnored({\cf17 const} {\cf18 char}* test_suite);\par
490 \};\par
491 \par
492 GTEST_API_ {\cf18 void} InsertSyntheticTestCase({\cf17 const} std::string& name,\par
493                                         CodeLocation location, {\cf18 bool} has_test_p);\par
494 \par
495 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.}\par
496 {\cf20 //}\par
497 {\cf20 // ParameterizedTestSuiteInfo accumulates tests obtained from TEST_P}\par
498 {\cf20 // macro invocations for a particular test suite and generators}\par
499 {\cf20 // obtained from INSTANTIATE_TEST_SUITE_P macro invocations for that}\par
500 {\cf20 // test suite. It registers tests with all values generated by all}\par
501 {\cf20 // generators when asked.}\par
502 {\cf17 template} <{\cf17 class} TestSuite>\par
503 {\cf17 class }ParameterizedTestSuiteInfo : {\cf17 public} ParameterizedTestSuiteInfoBase \{\par
504  {\cf17 public}:\par
505   {\cf20 // ParamType and GeneratorCreationFunc are private types but are required}\par
506   {\cf20 // for declarations of public methods AddTestPattern() and}\par
507   {\cf20 // AddTestSuiteInstantiation().}\par
508   {\cf17 using }ParamType = {\cf17 typename} TestSuite::ParamType;\par
509   {\cf20 // A function that returns an instance of appropriate generator type.}\par
510   {\cf17 typedef} ParamGenerator<ParamType>(GeneratorCreationFunc)();\par
511   {\cf17 using }ParamNameGeneratorFunc = std::string({\cf17 const} TestParamInfo<ParamType>&);\par
512 \par
513   {\cf17 explicit} ParameterizedTestSuiteInfo({\cf17 const} {\cf18 char}* name,\par
514                                       CodeLocation code_location)\par
515       : test_suite_name_(name), code_location_(code_location) \{\}\par
516 \par
517   {\cf20 // Test suite base name for display purposes.}\par
518   {\cf17 const} std::string& GetTestSuiteName(){\cf17  const override }\{\par
519     {\cf19 return} test_suite_name_;\par
520   \}\par
521   {\cf20 // Test suite id to verify identity.}\par
522   TypeId GetTestSuiteTypeId(){\cf17  const override }\{ {\cf19 return} GetTypeId<TestSuite>(); \}\par
523   {\cf20 // TEST_P macro uses AddTestPattern() to record information}\par
524   {\cf20 // about a single test in a LocalTestInfo structure.}\par
525   {\cf20 // test_suite_name is the base name of the test suite (without invocation}\par
526   {\cf20 // prefix). test_base_name is the name of an individual test without}\par
527   {\cf20 // parameter index. For the test SequenceA/FooTest.DoBar/1 FooTest is}\par
528   {\cf20 // test suite base name and DoBar is test base name.}\par
529   {\cf18 void} AddTestPattern({\cf17 const} {\cf18 char}* test_suite_name, {\cf17 const} {\cf18 char}* test_base_name,\par
530                       TestMetaFactoryBase<ParamType>* meta_factory,\par
531                       CodeLocation code_location) \{\par
532     tests_.push_back(std::shared_ptr<TestInfo>({\cf17 new} TestInfo(\par
533         test_suite_name, test_base_name, meta_factory, code_location)));\par
534   \}\par
535   {\cf20 // INSTANTIATE_TEST_SUITE_P macro uses AddGenerator() to record information}\par
536   {\cf20 // about a generator.}\par
537   {\cf18 int} AddTestSuiteInstantiation({\cf17 const} std::string& instantiation_name,\par
538                                 GeneratorCreationFunc* func,\par
539                                 ParamNameGeneratorFunc* name_func,\par
540                                 {\cf17 const} {\cf18 char}* file, {\cf18 int} line) \{\par
541     instantiations_.push_back(\par
542         InstantiationInfo(instantiation_name, func, name_func, file, line));\par
543     {\cf19 return} 0;  {\cf20 // Return value used only to run this method in namespace scope.}\par
544   \}\par
545   {\cf20 // UnitTest class invokes this method to register tests in this test suite}\par
546   {\cf20 // right before running tests in RUN_ALL_TESTS macro.}\par
547   {\cf20 // This method should not be called more than once on any single}\par
548   {\cf20 // instance of a ParameterizedTestSuiteInfoBase derived class.}\par
549   {\cf20 // UnitTest has a guard to prevent from calling this method more than once.}\par
550   {\cf18 void} RegisterTests(){\cf17  override }\{\par
551     {\cf18 bool} generated_instantiations = {\cf17 false};\par
552 \par
553     {\cf19 for} ({\cf17 typename} TestInfoContainer::iterator test_it = tests_.begin();\par
554          test_it != tests_.end(); ++test_it) \{\par
555       std::shared_ptr<TestInfo> test_info = *test_it;\par
556       {\cf19 for} ({\cf17 typename} InstantiationContainer::iterator gen_it =\par
557                instantiations_.begin();\par
558            gen_it != instantiations_.end(); ++gen_it) \{\par
559         {\cf17 const} std::string& instantiation_name = gen_it->name;\par
560         ParamGenerator<ParamType> generator((*gen_it->generator)());\par
561         ParamNameGeneratorFunc* name_func = gen_it->name_func;\par
562         {\cf17 const} {\cf18 char}* file = gen_it->file;\par
563         {\cf18 int} line = gen_it->line;\par
564 \par
565         std::string test_suite_name;\par
566         {\cf19 if} (!instantiation_name.empty())\par
567           test_suite_name = instantiation_name + {\cf22 "/"};\par
568         test_suite_name += test_info->test_suite_base_name;\par
569 \par
570         {\cf18 size_t} i = 0;\par
571         std::set<std::string> test_param_names;\par
572         {\cf19 for} ({\cf17 typename} ParamGenerator<ParamType>::iterator param_it =\par
573                  generator.begin();\par
574              param_it != generator.end(); ++param_it, ++i) \{\par
575           generated_instantiations = {\cf17 true};\par
576 \par
577           Message test_name_stream;\par
578 \par
579           std::string param_name =\par
580               name_func(TestParamInfo<ParamType>(*param_it, i));\par
581 \par
582           GTEST_CHECK_(IsValidParamName(param_name))\par
583               << {\cf22 "Parameterized test name '"} << param_name\par
584               << {\cf22 "' is invalid, in "} << file << {\cf22 " line "} << line << std::endl;\par
585 \par
586           GTEST_CHECK_(test_param_names.count(param_name) == 0)\par
587               << {\cf22 "Duplicate parameterized test name '"} << param_name << {\cf22 "', in "}\par
588               << file << {\cf22 " line "} << line << std::endl;\par
589 \par
590           test_param_names.insert(param_name);\par
591 \par
592           {\cf19 if} (!test_info->test_base_name.empty()) \{\par
593             test_name_stream << test_info->test_base_name << {\cf22 "/"};\par
594           \}\par
595           test_name_stream << param_name;\par
596           MakeAndRegisterTestInfo(\par
597               test_suite_name.c_str(), test_name_stream.GetString().c_str(),\par
598               {\cf17 nullptr},  {\cf20 // No type parameter.}\par
599               PrintToString(*param_it).c_str(), test_info->code_location,\par
600               GetTestSuiteTypeId(),\par
601               SuiteApiResolver<TestSuite>::GetSetUpCaseOrSuite(file, line),\par
602               SuiteApiResolver<TestSuite>::GetTearDownCaseOrSuite(file, line),\par
603               test_info->test_meta_factory->CreateTestFactory(*param_it));\par
604         \}  {\cf20 // for param_it}\par
605       \}    {\cf20 // for gen_it}\par
606     \}      {\cf20 // for test_it}\par
607 \par
608     {\cf19 if} (!generated_instantiations) \{\par
609       {\cf20 // There are no generaotrs, or they all generate nothing ...}\par
610       InsertSyntheticTestCase(GetTestSuiteName(), code_location_,\par
611                               !tests_.empty());\par
612     \}\par
613   \}  {\cf20 // RegisterTests}\par
614 \par
615  {\cf17 private}:\par
616   {\cf20 // LocalTestInfo structure keeps information about a single test registered}\par
617   {\cf20 // with TEST_P macro.}\par
618   {\cf17 struct }TestInfo \{\par
619     TestInfo({\cf17 const} {\cf18 char}* a_test_suite_base_name, {\cf17 const} {\cf18 char}* a_test_base_name,\par
620              TestMetaFactoryBase<ParamType>* a_test_meta_factory,\par
621              CodeLocation a_code_location)\par
622         : test_suite_base_name(a_test_suite_base_name),\par
623           test_base_name(a_test_base_name),\par
624           test_meta_factory(a_test_meta_factory),\par
625           code_location(a_code_location) \{\}\par
626 \par
627     {\cf17 const} std::string test_suite_base_name;\par
628     {\cf17 const} std::string test_base_name;\par
629     {\cf17 const} std::unique_ptr<TestMetaFactoryBase<ParamType>> test_meta_factory;\par
630     {\cf17 const} CodeLocation code_location;\par
631   \};\par
632   {\cf17 using }TestInfoContainer = ::std::vector<std::shared_ptr<TestInfo>>;\par
633   {\cf20 // Records data received from INSTANTIATE_TEST_SUITE_P macros:}\par
634   {\cf20 //  <Instantiation name, Sequence generator creation function,}\par
635   {\cf20 //     Name generator function, Source file, Source line>}\par
636   {\cf17 struct }InstantiationInfo \{\par
637     InstantiationInfo({\cf17 const} std::string& name_in,\par
638                       GeneratorCreationFunc* generator_in,\par
639                       ParamNameGeneratorFunc* name_func_in, {\cf17 const} {\cf18 char}* file_in,\par
640                       {\cf18 int} line_in)\par
641         : name(name_in),\par
642           generator(generator_in),\par
643           name_func(name_func_in),\par
644           file(file_in),\par
645           line(line_in) \{\}\par
646 \par
647     std::string name;\par
648     GeneratorCreationFunc* generator;\par
649     ParamNameGeneratorFunc* name_func;\par
650     {\cf17 const} {\cf18 char}* file;\par
651     {\cf18 int} line;\par
652   \};\par
653   typedef ::std::vector<InstantiationInfo> InstantiationContainer;\par
654 \par
655   {\cf17 static} {\cf18 bool} IsValidParamName({\cf17 const} std::string& name) \{\par
656     {\cf20 // Check for empty string}\par
657     {\cf19 if} (name.empty()) {\cf19 return} {\cf17 false};\par
658 \par
659     {\cf20 // Check for invalid characters}\par
660     {\cf19 for} (std::string::size_type index = 0; index < name.size(); ++index) \{\par
661       {\cf19 if} (!IsAlNum(name[index]) && name[index] != {\cf23 '_'}) {\cf19 return} {\cf17 false};\par
662     \}\par
663 \par
664     {\cf19 return} {\cf17 true};\par
665   \}\par
666 \par
667   {\cf17 const} std::string test_suite_name_;\par
668   CodeLocation code_location_;\par
669   TestInfoContainer tests_;\par
670   InstantiationContainer instantiations_;\par
671 \par
672   ParameterizedTestSuiteInfo({\cf17 const} ParameterizedTestSuiteInfo&) = {\cf17 delete};\par
673   ParameterizedTestSuiteInfo& operator=({\cf17 const} ParameterizedTestSuiteInfo&) =\par
674       {\cf17 delete};\par
675 \};  {\cf20 // class ParameterizedTestSuiteInfo}\par
676 \par
677 {\cf20 //  Legacy API is deprecated but still available}\par
678 {\cf21 #ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
679 {\cf17 template} <{\cf17 class} TestCase>\par
680 {\cf17 using }ParameterizedTestCaseInfo = ParameterizedTestSuiteInfo<TestCase>;\par
681 {\cf21 #endif  }{\cf20 //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
682 \par
683 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.}\par
684 {\cf20 //}\par
685 {\cf20 // ParameterizedTestSuiteRegistry contains a map of}\par
686 {\cf20 // ParameterizedTestSuiteInfoBase classes accessed by test suite names. TEST_P}\par
687 {\cf20 // and INSTANTIATE_TEST_SUITE_P macros use it to locate their corresponding}\par
688 {\cf20 // ParameterizedTestSuiteInfo descriptors.}\par
689 {\cf17 class }ParameterizedTestSuiteRegistry \{\par
690  {\cf17 public}:\par
691   ParameterizedTestSuiteRegistry() \{\}\par
692   ~ParameterizedTestSuiteRegistry() \{\par
693     {\cf19 for} ({\cf17 auto}& test_suite_info : test_suite_infos_) \{\par
694       {\cf17 delete} test_suite_info;\par
695     \}\par
696   \}\par
697 \par
698   {\cf20 // Looks up or creates and returns a structure containing information about}\par
699   {\cf20 // tests and instantiations of a particular test suite.}\par
700   {\cf17 template} <{\cf17 class} TestSuite>\par
701   ParameterizedTestSuiteInfo<TestSuite>* GetTestSuitePatternHolder(\par
702       {\cf17 const} {\cf18 char}* test_suite_name, CodeLocation code_location) \{\par
703     ParameterizedTestSuiteInfo<TestSuite>* typed_test_info = {\cf17 nullptr};\par
704     {\cf19 for} ({\cf17 auto}& test_suite_info : test_suite_infos_) \{\par
705       {\cf19 if} (test_suite_info->GetTestSuiteName() == test_suite_name) \{\par
706         {\cf19 if} (test_suite_info->GetTestSuiteTypeId() != GetTypeId<TestSuite>()) \{\par
707           {\cf20 // Complain about incorrect usage of Google Test facilities}\par
708           {\cf20 // and terminate the program since we cannot guaranty correct}\par
709           {\cf20 // test suite setup and tear-down in this case.}\par
710           ReportInvalidTestSuiteType(test_suite_name, code_location);\par
711           posix::Abort();\par
712         \} {\cf19 else} \{\par
713           {\cf20 // At this point we are sure that the object we found is of the same}\par
714           {\cf20 // type we are looking for, so we downcast it to that type}\par
715           {\cf20 // without further checks.}\par
716           typed_test_info = CheckedDowncastToActualType<\par
717               ParameterizedTestSuiteInfo<TestSuite>>(test_suite_info);\par
718         \}\par
719         {\cf19 break};\par
720       \}\par
721     \}\par
722     {\cf19 if} (typed_test_info == {\cf17 nullptr}) \{\par
723       typed_test_info = {\cf17 new} ParameterizedTestSuiteInfo<TestSuite>(\par
724           test_suite_name, code_location);\par
725       test_suite_infos_.push_back(typed_test_info);\par
726     \}\par
727     {\cf19 return} typed_test_info;\par
728   \}\par
729   {\cf18 void} RegisterTests() \{\par
730     {\cf19 for} ({\cf17 auto}& test_suite_info : test_suite_infos_) \{\par
731       test_suite_info->RegisterTests();\par
732     \}\par
733   \}\par
734 {\cf20 //  Legacy API is deprecated but still available}\par
735 {\cf21 #ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
736   {\cf17 template} <{\cf17 class} TestCase>\par
737   ParameterizedTestCaseInfo<TestCase>* GetTestCasePatternHolder(\par
738       {\cf17 const} {\cf18 char}* test_case_name, CodeLocation code_location) \{\par
739     {\cf19 return} GetTestSuitePatternHolder<TestCase>(test_case_name, code_location);\par
740   \}\par
741 \par
742 {\cf21 #endif  }{\cf20 //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
743 \par
744  {\cf17 private}:\par
745   {\cf17 using }TestSuiteInfoContainer = ::std::vector<ParameterizedTestSuiteInfoBase*>;\par
746 \par
747   TestSuiteInfoContainer test_suite_infos_;\par
748 \par
749   ParameterizedTestSuiteRegistry({\cf17 const} ParameterizedTestSuiteRegistry&) =\par
750       {\cf17 delete};\par
751   ParameterizedTestSuiteRegistry& operator=(\par
752       {\cf17 const} ParameterizedTestSuiteRegistry&) = {\cf17 delete};\par
753 \};\par
754 \par
755 {\cf20 // Keep track of what type-parameterized test suite are defined and}\par
756 {\cf20 // where as well as which are intatiated. This allows susequently}\par
757 {\cf20 // identifying suits that are defined but never used.}\par
758 {\cf17 class }TypeParameterizedTestSuiteRegistry \{\par
759  {\cf17 public}:\par
760   {\cf20 // Add a suite definition}\par
761   {\cf18 void} RegisterTestSuite({\cf17 const} {\cf18 char}* test_suite_name,\par
762                          CodeLocation code_location);\par
763 \par
764   {\cf20 // Add an instantiation of a suit.}\par
765   {\cf18 void} RegisterInstantiation({\cf17 const} {\cf18 char}* test_suite_name);\par
766 \par
767   {\cf20 // For each suit repored as defined but not reported as instantiation,}\par
768   {\cf20 // emit a test that reports that fact (configurably, as an error).}\par
769   {\cf18 void} CheckForInstantiations();\par
770 \par
771  {\cf17 private}:\par
772   {\cf17 struct }TypeParameterizedTestSuiteInfo \{\par
773     {\cf17 explicit} TypeParameterizedTestSuiteInfo(CodeLocation c)\par
774         : code_location(c), instantiated({\cf17 false}) \{\}\par
775 \par
776     CodeLocation code_location;\par
777     {\cf18 bool} instantiated;\par
778   \};\par
779 \par
780   std::map<std::string, TypeParameterizedTestSuiteInfo> suites_;\par
781 \};\par
782 \par
783 \}  {\cf20 // namespace internal}\par
784 \par
785 {\cf20 // Forward declarations of ValuesIn(), which is implemented in}\par
786 {\cf20 // include/gtest/gtest-param-test.h.}\par
787 {\cf17 template} <{\cf17 class} Container>\par
788 internal::ParamGenerator<typename Container::value_type> ValuesIn(\par
789     {\cf17 const} Container& container);\par
790 \par
791 {\cf17 namespace }internal \{\par
792 {\cf20 // Used in the Values() function to provide polymorphic capabilities.}\par
793 \par
794 {\cf21 #ifdef _MSC_VER}\par
795 {\cf21 #pragma warning(push)}\par
796 {\cf21 #pragma warning(disable : 4100)}\par
797 {\cf21 #endif}\par
798 \par
799 {\cf17 template} <{\cf17 typename}... Ts>\par
800 {\cf17 class }ValueArray \{\par
801  {\cf17 public}:\par
802   {\cf17 explicit} ValueArray(Ts... v) : v_(FlatTupleConstructTag\{\}, std::move(v)...) \{\}\par
803 \par
804   {\cf17 template} <{\cf17 typename} T>\par
805   {\cf17 operator} ParamGenerator<T>(){\cf17  const }\{  {\cf20 // NOLINT}\par
806     {\cf19 return} ValuesIn(MakeVector<T>(MakeIndexSequence<{\cf17 sizeof}...(Ts)>()));\par
807   \}\par
808 \par
809  {\cf17 private}:\par
810   {\cf17 template} <{\cf17 typename} T, {\cf18 size_t}... I>\par
811   std::vector<T> MakeVector(IndexSequence<I...>){\cf17  const }\{\par
812     {\cf19 return} std::vector<T>\{{\cf17 static_cast<}T{\cf17 >}(v_.template Get<I>())...\};\par
813   \}\par
814 \par
815   FlatTuple<Ts...> v_;\par
816 \};\par
817 \par
818 {\cf21 #ifdef _MSC_VER}\par
819 {\cf21 #pragma warning(pop)}\par
820 {\cf21 #endif}\par
821 \par
822 {\cf17 template} <{\cf17 typename}... T>\par
823 {\cf17 class }CartesianProductGenerator\par
824     : {\cf17 public} ParamGeneratorInterface<::std::tuple<T...>> \{\par
825  {\cf17 public}:\par
826   {\cf17 typedef} ::std::tuple<T...> ParamType;\par
827 \par
828   CartesianProductGenerator({\cf17 const} std::tuple<ParamGenerator<T>...>& g)\par
829       : generators_(g) \{\}\par
830   ~CartesianProductGenerator(){\cf17  override }\{\}\par
831 \par
832   ParamIteratorInterface<ParamType>* Begin(){\cf17  const override }\{\par
833     {\cf19 return} {\cf17 new} Iterator({\cf17 this}, generators_, {\cf17 false});\par
834   \}\par
835   ParamIteratorInterface<ParamType>* End(){\cf17  const override }\{\par
836     {\cf19 return} {\cf17 new} Iterator({\cf17 this}, generators_, {\cf17 true});\par
837   \}\par
838 \par
839  {\cf17 private}:\par
840   {\cf17 template} <{\cf17 class} I>\par
841   {\cf17 class }IteratorImpl;\par
842   {\cf17 template} <{\cf18 size_t}... I>\par
843   {\cf17 class }IteratorImpl<IndexSequence<I...>>\par
844       : {\cf17 public} ParamIteratorInterface<ParamType> \{\par
845    {\cf17 public}:\par
846     IteratorImpl({\cf17 const} ParamGeneratorInterface<ParamType>* base,\par
847                  {\cf17 const} std::tuple<ParamGenerator<T>...>& generators,\par
848                  {\cf18 bool} is_end)\par
849         : base_(base),\par
850           begin_(std::get<I>(generators).begin()...),\par
851           end_(std::get<I>(generators).end()...),\par
852           current_(is_end ? end_ : begin_) \{\par
853       ComputeCurrentValue();\par
854     \}\par
855     ~IteratorImpl(){\cf17  override }\{\}\par
856 \par
857     {\cf17 const} ParamGeneratorInterface<ParamType>* BaseGenerator(){\cf17  const override }\{\par
858       {\cf19 return} base_;\par
859     \}\par
860     {\cf20 // Advance should not be called on beyond-of-range iterators}\par
861     {\cf20 // so no component iterators must be beyond end of range, either.}\par
862     {\cf18 void} Advance(){\cf17  override }\{\par
863       assert(!AtEnd());\par
864       {\cf20 // Advance the last iterator.}\par
865       ++std::get<{\cf17 sizeof}...(T) - 1>(current_);\par
866       {\cf20 // if that reaches end, propagate that up.}\par
867       AdvanceIfEnd<{\cf17 sizeof}...(T) - 1>();\par
868       ComputeCurrentValue();\par
869     \}\par
870     ParamIteratorInterface<ParamType>* Clone(){\cf17  const override }\{\par
871       {\cf19 return} {\cf17 new} IteratorImpl(*{\cf17 this});\par
872     \}\par
873 \par
874     {\cf17 const} ParamType* Current(){\cf17  const override }\{ {\cf19 return} current_value_.get(); \}\par
875 \par
876     {\cf18 bool} Equals({\cf17 const} ParamIteratorInterface<ParamType>& other){\cf17  const override }\{\par
877       {\cf20 // Having the same base generator guarantees that the other}\par
878       {\cf20 // iterator is of the same type and we can downcast.}\par
879       GTEST_CHECK_(BaseGenerator() == other.BaseGenerator())\par
880           << {\cf22 "The program attempted to compare iterators "}\par
881           << {\cf22 "from different generators."} << std::endl;\par
882       {\cf17 const} IteratorImpl* typed_other =\par
883           CheckedDowncastToActualType<const IteratorImpl>(&other);\par
884 \par
885       {\cf20 // We must report iterators equal if they both point beyond their}\par
886       {\cf20 // respective ranges. That can happen in a variety of fashions,}\par
887       {\cf20 // so we have to consult AtEnd().}\par
888       {\cf19 if} (AtEnd() && typed_other->AtEnd()) {\cf19 return} {\cf17 true};\par
889 \par
890       {\cf18 bool} same = {\cf17 true};\par
891       {\cf18 bool} dummy[] = \{\par
892           (same = same && std::get<I>(current_) ==\par
893                               std::get<I>(typed_other->current_))...\};\par
894       (void)dummy;\par
895       {\cf19 return} same;\par
896     \}\par
897 \par
898    {\cf17 private}:\par
899     {\cf17 template} <{\cf18 size_t} ThisI>\par
900     {\cf18 void} AdvanceIfEnd() \{\par
901       {\cf19 if} (std::get<ThisI>(current_) != std::get<ThisI>(end_)) {\cf19 return};\par
902 \par
903       {\cf18 bool} last = ThisI == 0;\par
904       {\cf19 if} (last) \{\par
905         {\cf20 // We are done. Nothing else to propagate.}\par
906         {\cf19 return};\par
907       \}\par
908 \par
909       {\cf17 constexpr} {\cf18 size_t} NextI = ThisI - (ThisI != 0);\par
910       std::get<ThisI>(current_) = std::get<ThisI>(begin_);\par
911       ++std::get<NextI>(current_);\par
912       AdvanceIfEnd<NextI>();\par
913     \}\par
914 \par
915     {\cf18 void} ComputeCurrentValue() \{\par
916       {\cf19 if} (!AtEnd())\par
917         current_value_ = std::make_shared<ParamType>(*std::get<I>(current_)...);\par
918     \}\par
919     {\cf18 bool} AtEnd(){\cf17  const }\{\par
920       {\cf18 bool} at_end = {\cf17 false};\par
921       {\cf18 bool} dummy[] = \{\par
922           (at_end = at_end || std::get<I>(current_) == std::get<I>(end_))...\};\par
923       (void)dummy;\par
924       {\cf19 return} at_end;\par
925     \}\par
926 \par
927     {\cf17 const} ParamGeneratorInterface<ParamType>* {\cf17 const} base_;\par
928     std::tuple<typename ParamGenerator<T>::iterator...> begin_;\par
929     std::tuple<typename ParamGenerator<T>::iterator...> end_;\par
930     std::tuple<typename ParamGenerator<T>::iterator...> current_;\par
931     std::shared_ptr<ParamType> current_value_;\par
932   \};\par
933 \par
934   {\cf17 using }Iterator = IteratorImpl<{\cf17 typename} MakeIndexSequence<{\cf17 sizeof}...(T)>::type>;\par
935 \par
936   std::tuple<ParamGenerator<T>...> generators_;\par
937 \};\par
938 \par
939 {\cf17 template} <{\cf17 class}... Gen>\par
940 {\cf17 class }CartesianProductHolder \{\par
941  {\cf17 public}:\par
942   CartesianProductHolder({\cf17 const} Gen&... g) : generators_(g...) \{\}\par
943   {\cf17 template} <{\cf17 typename}... T>\par
944   {\cf17 operator} ParamGenerator<::std::tuple<T...>>() {\cf17 const} \{\par
945     {\cf19 return} ParamGenerator<::std::tuple<T...>>(\par
946         {\cf17 new} CartesianProductGenerator<T...>(generators_));\par
947   \}\par
948 \par
949  {\cf17 private}:\par
950   std::tuple<Gen...> generators_;\par
951 \};\par
952 \par
953 {\cf17 template} <{\cf17 typename} From, {\cf17 typename} To>\par
954 {\cf17 class }ParamGeneratorConverter : {\cf17 public} ParamGeneratorInterface<To> \{\par
955  {\cf17 public}:\par
956   ParamGeneratorConverter(ParamGenerator<From> gen) {\cf20 // NOLINT}\par
957       : generator_(std::move(gen)) \{\}\par
958 \par
959   ParamIteratorInterface<To>* Begin(){\cf17  const override }\{\par
960     {\cf19 return} {\cf17 new} Iterator({\cf17 this}, generator_.begin(), generator_.end());\par
961   \}\par
962   ParamIteratorInterface<To>* End(){\cf17  const override }\{\par
963     {\cf19 return} {\cf17 new} Iterator({\cf17 this}, generator_.end(), generator_.end());\par
964   \}\par
965 \par
966  {\cf17 private}:\par
967   {\cf17 class }Iterator : {\cf17 public} ParamIteratorInterface<To> \{\par
968    {\cf17 public}:\par
969     Iterator({\cf17 const} ParamGeneratorInterface<To>* base, ParamIterator<From> it,\par
970              ParamIterator<From> end)\par
971         : base_(base), it_(it), end_(end) \{\par
972       {\cf19 if} (it_ != end_) value_ = std::make_shared<To>({\cf17 static_cast<}To{\cf17 >}(*it_));\par
973     \}\par
974     ~Iterator(){\cf17  override }\{\}\par
975 \par
976     {\cf17 const} ParamGeneratorInterface<To>* BaseGenerator(){\cf17  const override }\{\par
977       {\cf19 return} base_;\par
978     \}\par
979     {\cf18 void} Advance(){\cf17  override }\{\par
980       ++it_;\par
981       {\cf19 if} (it_ != end_) value_ = std::make_shared<To>({\cf17 static_cast<}To{\cf17 >}(*it_));\par
982     \}\par
983     ParamIteratorInterface<To>* Clone(){\cf17  const override }\{\par
984       {\cf19 return} {\cf17 new} Iterator(*{\cf17 this});\par
985     \}\par
986     {\cf17 const} To* Current(){\cf17  const override }\{ {\cf19 return} value_.get(); \}\par
987     {\cf18 bool} Equals({\cf17 const} ParamIteratorInterface<To>& other){\cf17  const override }\{\par
988       {\cf20 // Having the same base generator guarantees that the other}\par
989       {\cf20 // iterator is of the same type and we can downcast.}\par
990       GTEST_CHECK_(BaseGenerator() == other.BaseGenerator())\par
991           << {\cf22 "The program attempted to compare iterators "}\par
992           << {\cf22 "from different generators."} << std::endl;\par
993       {\cf17 const} ParamIterator<From> other_it =\par
994           CheckedDowncastToActualType<const Iterator>(&other)->it_;\par
995       {\cf19 return} it_ == other_it;\par
996     \}\par
997 \par
998    {\cf17 private}:\par
999     Iterator({\cf17 const} Iterator& other) = {\cf19 default};\par
1000 \par
1001     {\cf17 const} ParamGeneratorInterface<To>* {\cf17 const} base_;\par
1002     ParamIterator<From> it_;\par
1003     ParamIterator<From> end_;\par
1004     std::shared_ptr<To> value_;\par
1005   \};  {\cf20 // class ParamGeneratorConverter::Iterator}\par
1006 \par
1007   ParamGenerator<From> generator_;\par
1008 \};  {\cf20 // class ParamGeneratorConverter}\par
1009 \par
1010 {\cf17 template} <{\cf17 class} Gen>\par
1011 {\cf17 class }ParamConverterGenerator \{\par
1012  {\cf17 public}:\par
1013   ParamConverterGenerator(ParamGenerator<Gen> g)  {\cf20 // NOLINT}\par
1014       : generator_(std::move(g)) \{\}\par
1015 \par
1016   {\cf17 template} <{\cf17 typename} T>\par
1017   {\cf17 operator} ParamGenerator<T>(){\cf17  const }\{  {\cf20 // NOLINT}\par
1018     {\cf19 return} ParamGenerator<T>({\cf17 new} ParamGeneratorConverter<Gen, T>(generator_));\par
1019   \}\par
1020 \par
1021  {\cf17 private}:\par
1022   ParamGenerator<Gen> generator_;\par
1023 \};\par
1024 \par
1025 \}  {\cf20 // namespace internal}\par
1026 \}  {\cf20 // namespace testing}\par
1027 \par
1028 {\cf21 #endif  }{\cf20 // GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_PARAM_UTIL_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest-port-arch.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googletest/include/gtest/internal/gtest-port-arch.h}
{\xe \v lib/googletest-main/googletest/include/gtest/internal/gtest-port-arch.h}
{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2015, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // The Google C++ Testing and Mocking Framework (Google Test)}\par
31 {\cf20 //}\par
32 {\cf20 // This header file defines the GTEST_OS_* macro.}\par
33 {\cf20 // It is separate from gtest-port.h so that custom/gtest-port.h can include it.}\par
34 \par
35 {\cf21 #ifndef GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_ARCH_H_}\par
36 {\cf21 #define GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_ARCH_H_}\par
37 \par
38 {\cf20 // Determines the platform on which Google Test is compiled.}\par
39 {\cf21 #ifdef __CYGWIN__}\par
40 {\cf21 #define GTEST_OS_CYGWIN 1}\par
41 {\cf21 #elif defined(__MINGW__) || defined(__MINGW32__) || defined(__MINGW64__)}\par
42 {\cf21 #define GTEST_OS_WINDOWS_MINGW 1}\par
43 {\cf21 #define GTEST_OS_WINDOWS 1}\par
44 {\cf21 #elif defined _WIN32}\par
45 {\cf21 #define GTEST_OS_WINDOWS 1}\par
46 {\cf21 #ifdef _WIN32_WCE}\par
47 {\cf21 #define GTEST_OS_WINDOWS_MOBILE 1}\par
48 {\cf21 #elif defined(WINAPI_FAMILY)}\par
49 {\cf21 #include <winapifamily.h>}\par
50 {\cf21 #if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)}\par
51 {\cf21 #define GTEST_OS_WINDOWS_DESKTOP 1}\par
52 {\cf21 #elif WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_PHONE_APP)}\par
53 {\cf21 #define GTEST_OS_WINDOWS_PHONE 1}\par
54 {\cf21 #elif WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)}\par
55 {\cf21 #define GTEST_OS_WINDOWS_RT 1}\par
56 {\cf21 #elif WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_TV_TITLE)}\par
57 {\cf21 #define GTEST_OS_WINDOWS_PHONE 1}\par
58 {\cf21 #define GTEST_OS_WINDOWS_TV_TITLE 1}\par
59 {\cf21 #else}\par
60 {\cf20 // WINAPI_FAMILY defined but no known partition matched.}\par
61 {\cf20 // Default to desktop.}\par
62 {\cf21 #define GTEST_OS_WINDOWS_DESKTOP 1}\par
63 {\cf21 #endif}\par
64 {\cf21 #else}\par
65 {\cf21 #define GTEST_OS_WINDOWS_DESKTOP 1}\par
66 {\cf21 #endif  }{\cf20 // _WIN32_WCE}\par
67 {\cf21 #elif defined __OS2__}\par
68 {\cf21 #define GTEST_OS_OS2 1}\par
69 {\cf21 #elif defined __APPLE__}\par
70 {\cf21 #define GTEST_OS_MAC 1}\par
71 {\cf21 #include <TargetConditionals.h>}\par
72 {\cf21 #if TARGET_OS_IPHONE}\par
73 {\cf21 #define GTEST_OS_IOS 1}\par
74 {\cf21 #endif}\par
75 {\cf21 #elif defined __DragonFly__}\par
76 {\cf21 #define GTEST_OS_DRAGONFLY 1}\par
77 {\cf21 #elif defined __FreeBSD__}\par
78 {\cf21 #define GTEST_OS_FREEBSD 1}\par
79 {\cf21 #elif defined __Fuchsia__}\par
80 {\cf21 #define GTEST_OS_FUCHSIA 1}\par
81 {\cf21 #elif defined(__GNU__)}\par
82 {\cf21 #define GTEST_OS_GNU_HURD 1}\par
83 {\cf21 #elif defined(__GLIBC__) && defined(__FreeBSD_kernel__)}\par
84 {\cf21 #define GTEST_OS_GNU_KFREEBSD 1}\par
85 {\cf21 #elif defined __linux__}\par
86 {\cf21 #define GTEST_OS_LINUX 1}\par
87 {\cf21 #if defined __ANDROID__}\par
88 {\cf21 #define GTEST_OS_LINUX_ANDROID 1}\par
89 {\cf21 #endif}\par
90 {\cf21 #elif defined __MVS__}\par
91 {\cf21 #define GTEST_OS_ZOS 1}\par
92 {\cf21 #elif defined(__sun) && defined(__SVR4)}\par
93 {\cf21 #define GTEST_OS_SOLARIS 1}\par
94 {\cf21 #elif defined(_AIX)}\par
95 {\cf21 #define GTEST_OS_AIX 1}\par
96 {\cf21 #elif defined(__hpux)}\par
97 {\cf21 #define GTEST_OS_HPUX 1}\par
98 {\cf21 #elif defined __native_client__}\par
99 {\cf21 #define GTEST_OS_NACL 1}\par
100 {\cf21 #elif defined __NetBSD__}\par
101 {\cf21 #define GTEST_OS_NETBSD 1}\par
102 {\cf21 #elif defined __OpenBSD__}\par
103 {\cf21 #define GTEST_OS_OPENBSD 1}\par
104 {\cf21 #elif defined __QNX__}\par
105 {\cf21 #define GTEST_OS_QNX 1}\par
106 {\cf21 #elif defined(__HAIKU__)}\par
107 {\cf21 #define GTEST_OS_HAIKU 1}\par
108 {\cf21 #elif defined ESP8266}\par
109 {\cf21 #define GTEST_OS_ESP8266 1}\par
110 {\cf21 #elif defined ESP32}\par
111 {\cf21 #define GTEST_OS_ESP32 1}\par
112 {\cf21 #elif defined(__XTENSA__)}\par
113 {\cf21 #define GTEST_OS_XTENSA 1}\par
114 {\cf21 #elif defined(__hexagon__)}\par
115 {\cf21 #define GTEST_OS_QURT 1}\par
116 {\cf21 #endif  }{\cf20 // __CYGWIN__}\par
117 \par
118 {\cf21 #endif  }{\cf20 // GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_ARCH_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest-string.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googletest/include/gtest/internal/gtest-string.h}
{\xe \v lib/googletest-main/googletest/include/gtest/internal/gtest-string.h}
{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2005, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // The Google C++ Testing and Mocking Framework (Google Test)}\par
31 {\cf20 //}\par
32 {\cf20 // This header file declares the String class and functions used internally by}\par
33 {\cf20 // Google Test.  They are subject to change without notice. They should not used}\par
34 {\cf20 // by code external to Google Test.}\par
35 {\cf20 //}\par
36 {\cf20 // This header file is #included by gtest-internal.h.}\par
37 {\cf20 // It should not be #included by other files.}\par
38 \par
39 {\cf20 // IWYU pragma: private, include "gtest/gtest.h"}\par
40 {\cf20 // IWYU pragma: friend gtest/.*}\par
41 {\cf20 // IWYU pragma: friend gmock/.*}\par
42 \par
43 {\cf21 #ifndef GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_STRING_H_}\par
44 {\cf21 #define GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_STRING_H_}\par
45 \par
46 {\cf21 #ifdef __BORLANDC__}\par
47 {\cf20 // string.h is not guaranteed to provide strcpy on C++ Builder.}\par
48 {\cf21 #include <mem.h>}\par
49 {\cf21 #endif}\par
50 \par
51 {\cf21 #include <string.h>}\par
52 \par
53 {\cf21 #include <cstdint>}\par
54 {\cf21 #include <string>}\par
55 \par
56 {\cf21 #include "gtest/internal/gtest-port.h"}\par
57 \par
58 {\cf17 namespace }testing \{\par
59 {\cf17 namespace }internal \{\par
60 \par
61 {\cf20 // String - an abstract class holding static string utilities.}\par
62 {\cf17 class }GTEST_API_ String \{\par
63  {\cf17 public}:\par
64   {\cf20 // Static utility methods}\par
65 \par
66   {\cf20 // Clones a 0-terminated C string, allocating memory using new.  The}\par
67   {\cf20 // caller is responsible for deleting the return value using}\par
68   {\cf20 // delete[].  Returns the cloned string, or NULL if the input is}\par
69   {\cf20 // NULL.}\par
70   {\cf20 //}\par
71   {\cf20 // This is different from strdup() in string.h, which allocates}\par
72   {\cf20 // memory using malloc().}\par
73   {\cf17 static} {\cf17 const} {\cf18 char}* CloneCString({\cf17 const} {\cf18 char}* c_str);\par
74 \par
75 {\cf21 #if GTEST_OS_WINDOWS_MOBILE}\par
76   {\cf20 // Windows CE does not have the 'ANSI' versions of Win32 APIs. To be}\par
77   {\cf20 // able to pass strings to Win32 APIs on CE we need to convert them}\par
78   {\cf20 // to 'Unicode', UTF-16.}\par
79 \par
80   {\cf20 // Creates a UTF-16 wide string from the given ANSI string, allocating}\par
81   {\cf20 // memory using new. The caller is responsible for deleting the return}\par
82   {\cf20 // value using delete[]. Returns the wide string, or NULL if the}\par
83   {\cf20 // input is NULL.}\par
84   {\cf20 //}\par
85   {\cf20 // The wide string is created using the ANSI codepage (CP_ACP) to}\par
86   {\cf20 // match the behaviour of the ANSI versions of Win32 calls and the}\par
87   {\cf20 // C runtime.}\par
88   {\cf17 static} LPCWSTR AnsiToUtf16({\cf17 const} {\cf18 char}* c_str);\par
89 \par
90   {\cf20 // Creates an ANSI string from the given wide string, allocating}\par
91   {\cf20 // memory using new. The caller is responsible for deleting the return}\par
92   {\cf20 // value using delete[]. Returns the ANSI string, or NULL if the}\par
93   {\cf20 // input is NULL.}\par
94   {\cf20 //}\par
95   {\cf20 // The returned string is created using the ANSI codepage (CP_ACP) to}\par
96   {\cf20 // match the behaviour of the ANSI versions of Win32 calls and the}\par
97   {\cf20 // C runtime.}\par
98   {\cf17 static} {\cf17 const} {\cf18 char}* Utf16ToAnsi(LPCWSTR utf16_str);\par
99 {\cf21 #endif}\par
100 \par
101   {\cf20 // Compares two C strings.  Returns true if and only if they have the same}\par
102   {\cf20 // content.}\par
103   {\cf20 //}\par
104   {\cf20 // Unlike strcmp(), this function can handle NULL argument(s).  A}\par
105   {\cf20 // NULL C string is considered different to any non-NULL C string,}\par
106   {\cf20 // including the empty string.}\par
107   {\cf17 static} {\cf18 bool} CStringEquals({\cf17 const} {\cf18 char}* lhs, {\cf17 const} {\cf18 char}* rhs);\par
108 \par
109   {\cf20 // Converts a wide C string to a String using the UTF-8 encoding.}\par
110   {\cf20 // NULL will be converted to "(null)".  If an error occurred during}\par
111   {\cf20 // the conversion, "(failed to convert from wide string)" is}\par
112   {\cf20 // returned.}\par
113   {\cf17 static} std::string ShowWideCString({\cf17 const} {\cf18 wchar_t}* wide_c_str);\par
114 \par
115   {\cf20 // Compares two wide C strings.  Returns true if and only if they have the}\par
116   {\cf20 // same content.}\par
117   {\cf20 //}\par
118   {\cf20 // Unlike wcscmp(), this function can handle NULL argument(s).  A}\par
119   {\cf20 // NULL C string is considered different to any non-NULL C string,}\par
120   {\cf20 // including the empty string.}\par
121   {\cf17 static} {\cf18 bool} WideCStringEquals({\cf17 const} {\cf18 wchar_t}* lhs, {\cf17 const} {\cf18 wchar_t}* rhs);\par
122 \par
123   {\cf20 // Compares two C strings, ignoring case.  Returns true if and only if}\par
124   {\cf20 // they have the same content.}\par
125   {\cf20 //}\par
126   {\cf20 // Unlike strcasecmp(), this function can handle NULL argument(s).}\par
127   {\cf20 // A NULL C string is considered different to any non-NULL C string,}\par
128   {\cf20 // including the empty string.}\par
129   {\cf17 static} {\cf18 bool} CaseInsensitiveCStringEquals({\cf17 const} {\cf18 char}* lhs, {\cf17 const} {\cf18 char}* rhs);\par
130 \par
131   {\cf20 // Compares two wide C strings, ignoring case.  Returns true if and only if}\par
132   {\cf20 // they have the same content.}\par
133   {\cf20 //}\par
134   {\cf20 // Unlike wcscasecmp(), this function can handle NULL argument(s).}\par
135   {\cf20 // A NULL C string is considered different to any non-NULL wide C string,}\par
136   {\cf20 // including the empty string.}\par
137   {\cf20 // NB: The implementations on different platforms slightly differ.}\par
138   {\cf20 // On windows, this method uses _wcsicmp which compares according to LC_CTYPE}\par
139   {\cf20 // environment variable. On GNU platform this method uses wcscasecmp}\par
140   {\cf20 // which compares according to LC_CTYPE category of the current locale.}\par
141   {\cf20 // On MacOS X, it uses towlower, which also uses LC_CTYPE category of the}\par
142   {\cf20 // current locale.}\par
143   {\cf17 static} {\cf18 bool} CaseInsensitiveWideCStringEquals({\cf17 const} {\cf18 wchar_t}* lhs,\par
144                                                {\cf17 const} {\cf18 wchar_t}* rhs);\par
145 \par
146   {\cf20 // Returns true if and only if the given string ends with the given suffix,}\par
147   {\cf20 // ignoring case. Any string is considered to end with an empty suffix.}\par
148   {\cf17 static} {\cf18 bool} EndsWithCaseInsensitive({\cf17 const} std::string& str,\par
149                                       {\cf17 const} std::string& suffix);\par
150 \par
151   {\cf20 // Formats an int value as "%02d".}\par
152   {\cf17 static} std::string FormatIntWidth2({\cf18 int} value);  {\cf20 // "%02d" for width == 2}\par
153 \par
154   {\cf20 // Formats an int value to given width with leading zeros.}\par
155   {\cf17 static} std::string FormatIntWidthN({\cf18 int} value, {\cf18 int} width);\par
156 \par
157   {\cf20 // Formats an int value as "%X".}\par
158   {\cf17 static} std::string FormatHexInt({\cf18 int} value);\par
159 \par
160   {\cf20 // Formats an int value as "%X".}\par
161   {\cf17 static} std::string FormatHexUInt32(uint32_t value);\par
162 \par
163   {\cf20 // Formats a byte as "%02X".}\par
164   {\cf17 static} std::string FormatByte({\cf18 unsigned} {\cf18 char} value);\par
165 \par
166  {\cf17 private}:\par
167   String();  {\cf20 // Not meant to be instantiated.}\par
168 \};           {\cf20 // class String}\par
169 \par
170 {\cf20 // Gets the content of the stringstream's buffer as an std::string.  Each '\\0'}\par
171 {\cf20 // character in the buffer is replaced with "\\\\0".}\par
172 GTEST_API_ std::string StringStreamToString(::std::stringstream* stream);\par
173 \par
174 \}  {\cf20 // namespace internal}\par
175 \}  {\cf20 // namespace testing}\par
176 \par
177 {\cf21 #endif  }{\cf20 // GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_STRING_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest-type-util.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googletest/include/gtest/internal/gtest-type-util.h}
{\xe \v lib/googletest-main/googletest/include/gtest/internal/gtest-type-util.h}
{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2008 Google Inc.}\par
2 {\cf20 // All Rights Reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // Type utilities needed for implementing typed and type-parameterized}\par
31 {\cf20 // tests.}\par
32 \par
33 {\cf20 // IWYU pragma: private, include "gtest/gtest.h"}\par
34 {\cf20 // IWYU pragma: friend gtest/.*}\par
35 {\cf20 // IWYU pragma: friend gmock/.*}\par
36 \par
37 {\cf21 #ifndef GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_TYPE_UTIL_H_}\par
38 {\cf21 #define GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_TYPE_UTIL_H_}\par
39 \par
40 {\cf21 #include "gtest/internal/gtest-port.h"}\par
41 \par
42 {\cf20 // #ifdef __GNUC__ is too general here.  It is possible to use gcc without using}\par
43 {\cf20 // libstdc++ (which is where cxxabi.h comes from).}\par
44 {\cf21 #if GTEST_HAS_CXXABI_H_}\par
45 {\cf21 #include <cxxabi.h>}\par
46 {\cf21 #elif defined(__HP_aCC)}\par
47 {\cf21 #include <acxx_demangle.h>}\par
48 {\cf21 #endif  }{\cf20 // GTEST_HASH_CXXABI_H_}\par
49 \par
50 {\cf17 namespace }testing \{\par
51 {\cf17 namespace }internal \{\par
52 \par
53 {\cf20 // Canonicalizes a given name with respect to the Standard C++ Library.}\par
54 {\cf20 // This handles removing the inline namespace within `std` that is}\par
55 {\cf20 // used by various standard libraries (e.g., `std::__1`).  Names outside}\par
56 {\cf20 // of namespace std are returned unmodified.}\par
57 {\cf17 inline} std::string CanonicalizeForStdLibVersioning(std::string s) \{\par
58   {\cf17 static} {\cf17 const} {\cf18 char} prefix[] = {\cf22 "std::__"};\par
59   {\cf19 if} (s.compare(0, strlen(prefix), prefix) == 0) \{\par
60     std::string::size_type end = s.find({\cf22 "::"}, strlen(prefix));\par
61     {\cf19 if} (end != s.npos) \{\par
62       {\cf20 // Erase everything between the initial `std` and the second `::`.}\par
63       s.erase(strlen({\cf22 "std"}), end - strlen({\cf22 "std"}));\par
64     \}\par
65   \}\par
66   {\cf19 return} s;\par
67 \}\par
68 \par
69 {\cf21 #if GTEST_HAS_RTTI}\par
70 {\cf20 // GetTypeName(const std::type_info&) returns a human-readable name of type T.}\par
71 {\cf17 inline} std::string GetTypeName({\cf17 const} std::type_info& type) \{\par
72   {\cf17 const} {\cf18 char}* {\cf17 const} name = type.name();\par
73 {\cf21 #if GTEST_HAS_CXXABI_H_ || defined(__HP_aCC)}\par
74   {\cf18 int} status = 0;\par
75   {\cf20 // gcc's implementation of typeid(T).name() mangles the type name,}\par
76   {\cf20 // so we have to demangle it.}\par
77 {\cf21 #if GTEST_HAS_CXXABI_H_}\par
78   {\cf17 using }abi::__cxa_demangle;\par
79 {\cf21 #endif  }{\cf20 // GTEST_HAS_CXXABI_H_}\par
80   {\cf18 char}* {\cf17 const} readable_name = __cxa_demangle(name, {\cf17 nullptr}, {\cf17 nullptr}, &status);\par
81   {\cf17 const} std::string name_str(status == 0 ? readable_name : name);\par
82   free(readable_name);\par
83   {\cf19 return} CanonicalizeForStdLibVersioning(name_str);\par
84 {\cf21 #else}\par
85   {\cf19 return} name;\par
86 {\cf21 #endif  }{\cf20 // GTEST_HAS_CXXABI_H_ || __HP_aCC}\par
87 \}\par
88 {\cf21 #endif  }{\cf20 // GTEST_HAS_RTTI}\par
89 \par
90 {\cf20 // GetTypeName<T>() returns a human-readable name of type T if and only if}\par
91 {\cf20 // RTTI is enabled, otherwise it returns a dummy type name.}\par
92 {\cf20 // NB: This function is also used in Google Mock, so don't move it inside of}\par
93 {\cf20 // the typed-test-only section below.}\par
94 {\cf17 template} <{\cf17 typename} T>\par
95 std::string GetTypeName() \{\par
96 {\cf21 #if GTEST_HAS_RTTI}\par
97   {\cf19 return} GetTypeName({\cf17 typeid}(T));\par
98 {\cf21 #else}\par
99   {\cf19 return} {\cf22 "<type>"};\par
100 {\cf21 #endif  }{\cf20 // GTEST_HAS_RTTI}\par
101 \}\par
102 \par
103 {\cf20 // A unique type indicating an empty node}\par
104 {\cf17 struct }None \{\};\par
105 \par
106 {\cf21 #define GTEST_TEMPLATE_ \\}\par
107 {\cf21   template <typename T> \\}\par
108 {\cf21   class}\par
109 \par
110 {\cf20 // The template "selector" struct TemplateSel<Tmpl> is used to}\par
111 {\cf20 // represent Tmpl, which must be a class template with one type}\par
112 {\cf20 // parameter, as a type.  TemplateSel<Tmpl>::Bind<T>::type is defined}\par
113 {\cf20 // as the type Tmpl<T>.  This allows us to actually instantiate the}\par
114 {\cf20 // template "selected" by TemplateSel<Tmpl>.}\par
115 {\cf20 //}\par
116 {\cf20 // This trick is necessary for simulating typedef for class templates,}\par
117 {\cf20 // which C++ doesn't support directly.}\par
118 {\cf17 template} <GTEST_TEMPLATE_ Tmpl>\par
119 {\cf17 struct }TemplateSel \{\par
120   {\cf17 template} <{\cf17 typename} T>\par
121   {\cf17 struct }Bind \{\par
122     {\cf17 typedef} Tmpl<T> type;\par
123   \};\par
124 \};\par
125 \par
126 {\cf21 #define GTEST_BIND_(TmplSel, T) TmplSel::template Bind<T>::type}\par
127 \par
128 {\cf17 template} <GTEST_TEMPLATE_ Head_, GTEST_TEMPLATE_... Tail_>\par
129 {\cf17 struct }Templates \{\par
130   {\cf17 using }Head = TemplateSel<Head_>;\par
131   {\cf17 using }Tail = Templates<Tail_...>;\par
132 \};\par
133 \par
134 {\cf17 template} <GTEST_TEMPLATE_ Head_>\par
135 {\cf17 struct }Templates<Head_> \{\par
136   {\cf17 using }Head = TemplateSel<Head_>;\par
137   {\cf17 using }Tail = None;\par
138 \};\par
139 \par
140 {\cf20 // Tuple-like type lists}\par
141 {\cf17 template} <{\cf17 typename} Head_, {\cf17 typename}... Tail_>\par
142 {\cf17 struct }Types \{\par
143   {\cf17 using }Head = Head_;\par
144   {\cf17 using }Tail = Types<Tail_...>;\par
145 \};\par
146 \par
147 {\cf17 template} <{\cf17 typename} Head_>\par
148 {\cf17 struct }Types<Head_> \{\par
149   {\cf17 using }Head = Head_;\par
150   {\cf17 using }Tail = None;\par
151 \};\par
152 \par
153 {\cf20 // Helper metafunctions to tell apart a single type from types}\par
154 {\cf20 // generated by ::testing::Types}\par
155 {\cf17 template} <{\cf17 typename}... Ts>\par
156 {\cf17 struct }ProxyTypeList \{\par
157   {\cf17 using }type = Types<Ts...>;\par
158 \};\par
159 \par
160 {\cf17 template} <{\cf17 typename}>\par
161 {\cf17 struct }is_proxy_type_list : std::false_type \{\};\par
162 \par
163 {\cf17 template} <{\cf17 typename}... Ts>\par
164 {\cf17 struct }is_proxy_type_list<ProxyTypeList<Ts...>> : std::true_type \{\};\par
165 \par
166 {\cf20 // Generator which conditionally creates type lists.}\par
167 {\cf20 // It recognizes if a requested type list should be created}\par
168 {\cf20 // and prevents creating a new type list nested within another one.}\par
169 {\cf17 template} <{\cf17 typename} T>\par
170 {\cf17 struct }GenerateTypeList \{\par
171  {\cf17 private}:\par
172   {\cf17 using }proxy = {\cf17 typename} std::conditional<is_proxy_type_list<T>::value, T,\par
173                                           ProxyTypeList<T>>::type;\par
174 \par
175  {\cf17 public}:\par
176   {\cf17 using }type = {\cf17 typename} proxy::type;\par
177 \};\par
178 \par
179 \}  {\cf20 // namespace internal}\par
180 \par
181 {\cf17 template} <{\cf17 typename}... Ts>\par
182 {\cf17 using }Types = internal::ProxyTypeList<Ts...>;\par
183 \par
184 \}  {\cf20 // namespace testing}\par
185 \par
186 {\cf21 #endif  }{\cf20 // GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_TYPE_UTIL_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
prime_tables.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googletest/samples/prime_tables.h}
{\xe \v lib/googletest-main/googletest/samples/prime_tables.h}
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2008 Google Inc.}\par
2 {\cf20 // All Rights Reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // This provides interface PrimeTable that determines whether a number is a}\par
31 {\cf20 // prime and determines a next prime number. This interface is used}\par
32 {\cf20 // in Google Test samples demonstrating use of parameterized tests.}\par
33 \par
34 {\cf21 #ifndef GOOGLETEST_SAMPLES_PRIME_TABLES_H_}\par
35 {\cf21 #define GOOGLETEST_SAMPLES_PRIME_TABLES_H_}\par
36 \par
37 {\cf21 #include <algorithm>}\par
38 \par
39 {\cf20 // The prime table interface.}\par
40 {\cf17 class }PrimeTable \{\par
41  {\cf17 public}:\par
42   {\cf17 virtual} ~PrimeTable() \{\}\par
43 \par
44   {\cf20 // Returns true if and only if n is a prime number.}\par
45   {\cf17 virtual} {\cf18 bool} IsPrime({\cf18 int} n) {\cf17 const} = 0;\par
46 \par
47   {\cf20 // Returns the smallest prime number greater than p; or returns -1}\par
48   {\cf20 // if the next prime is beyond the capacity of the table.}\par
49   {\cf17 virtual} {\cf18 int} GetNextPrime({\cf18 int} p) {\cf17 const} = 0;\par
50 \};\par
51 \par
52 {\cf20 // Implementation #1 calculates the primes on-the-fly.}\par
53 {\cf17 class }OnTheFlyPrimeTable : {\cf17 public} PrimeTable \{\par
54  {\cf17 public}:\par
55   {\cf18 bool} IsPrime({\cf18 int} n){\cf17  const override }\{\par
56     {\cf19 if} (n <= 1) {\cf19 return} {\cf17 false};\par
57 \par
58     {\cf19 for} ({\cf18 int} i = 2; i * i <= n; i++) \{\par
59       {\cf20 // n is divisible by an integer other than 1 and itself.}\par
60       {\cf19 if} ((n % i) == 0) {\cf19 return} {\cf17 false};\par
61     \}\par
62 \par
63     {\cf19 return} {\cf17 true};\par
64   \}\par
65 \par
66   {\cf18 int} GetNextPrime({\cf18 int} p){\cf17  const override }\{\par
67     {\cf19 if} (p < 0) {\cf19 return} -1;\par
68 \par
69     {\cf19 for} ({\cf18 int} n = p + 1;; n++) \{\par
70       {\cf19 if} (IsPrime(n)) {\cf19 return} n;\par
71     \}\par
72   \}\par
73 \};\par
74 \par
75 {\cf20 // Implementation #2 pre-calculates the primes and stores the result}\par
76 {\cf20 // in an array.}\par
77 {\cf17 class }PreCalculatedPrimeTable : {\cf17 public} PrimeTable \{\par
78  {\cf17 public}:\par
79   {\cf20 // 'max' specifies the maximum number the prime table holds.}\par
80   {\cf17 explicit} PreCalculatedPrimeTable({\cf18 int} max)\par
81       : is_prime_size_(max + 1), is_prime_({\cf17 new} {\cf18 bool}[max + 1]) \{\par
82     CalculatePrimesUpTo(max);\par
83   \}\par
84   ~PreCalculatedPrimeTable(){\cf17  override }\{ {\cf17 delete}[] is_prime_; \}\par
85 \par
86   {\cf18 bool} IsPrime({\cf18 int} n){\cf17  const override }\{\par
87     {\cf19 return} 0 <= n && n < is_prime_size_ && is_prime_[n];\par
88   \}\par
89 \par
90   {\cf18 int} GetNextPrime({\cf18 int} p){\cf17  const override }\{\par
91     {\cf19 for} ({\cf18 int} n = p + 1; n < is_prime_size_; n++) \{\par
92       {\cf19 if} (is_prime_[n]) {\cf19 return} n;\par
93     \}\par
94 \par
95     {\cf19 return} -1;\par
96   \}\par
97 \par
98  {\cf17 private}:\par
99   {\cf18 void} CalculatePrimesUpTo({\cf18 int} max) \{\par
100     ::std::fill(is_prime_, is_prime_ + is_prime_size_, {\cf17 true});\par
101     is_prime_[0] = is_prime_[1] = {\cf17 false};\par
102 \par
103     {\cf20 // Checks every candidate for prime number (we know that 2 is the only even}\par
104     {\cf20 // prime).}\par
105     {\cf19 for} ({\cf18 int} i = 2; i * i <= max; i += i % 2 + 1) \{\par
106       {\cf19 if} (!is_prime_[i]) {\cf19 continue};\par
107 \par
108       {\cf20 // Marks all multiples of i (except i itself) as non-prime.}\par
109       {\cf20 // We are starting here from i-th multiplier, because all smaller}\par
110       {\cf20 // complex numbers were already marked.}\par
111       {\cf19 for} ({\cf18 int} j = i * i; j <= max; j += i) \{\par
112         is_prime_[j] = {\cf17 false};\par
113       \}\par
114     \}\par
115   \}\par
116 \par
117   {\cf17 const} {\cf18 int} is_prime_size_;\par
118   {\cf18 bool}* {\cf17 const} is_prime_;\par
119 \par
120   {\cf20 // Disables compiler warning "assignment operator could not be generated."}\par
121   {\cf18 void} operator=({\cf17 const} PreCalculatedPrimeTable& rhs);\par
122 \};\par
123 \par
124 {\cf21 #endif  }{\cf20 // GOOGLETEST_SAMPLES_PRIME_TABLES_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
sample1.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googletest/samples/sample1.h}
{\xe \v lib/googletest-main/googletest/samples/sample1.h}
{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2005, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // A sample program demonstrating using Google C++ testing framework.}\par
31 \par
32 {\cf21 #ifndef GOOGLETEST_SAMPLES_SAMPLE1_H_}\par
33 {\cf21 #define GOOGLETEST_SAMPLES_SAMPLE1_H_}\par
34 \par
35 {\cf20 // Returns n! (the factorial of n).  For negative n, n! is defined to be 1.}\par
36 {\cf18 int} Factorial({\cf18 int} n);\par
37 \par
38 {\cf20 // Returns true if and only if n is a prime number.}\par
39 {\cf18 bool} IsPrime({\cf18 int} n);\par
40 \par
41 {\cf21 #endif  }{\cf20 // GOOGLETEST_SAMPLES_SAMPLE1_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
sample2.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googletest/samples/sample2.h}
{\xe \v lib/googletest-main/googletest/samples/sample2.h}
{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2005, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // A sample program demonstrating using Google C++ testing framework.}\par
31 \par
32 {\cf21 #ifndef GOOGLETEST_SAMPLES_SAMPLE2_H_}\par
33 {\cf21 #define GOOGLETEST_SAMPLES_SAMPLE2_H_}\par
34 \par
35 {\cf21 #include <string.h>}\par
36 \par
37 {\cf20 // A simple string class.}\par
38 {\cf17 class }MyString \{\par
39  {\cf17 private}:\par
40   {\cf17 const} {\cf18 char}* c_string_;\par
41   {\cf17 const} MyString& operator=({\cf17 const} MyString& rhs);\par
42 \par
43  {\cf17 public}:\par
44   {\cf20 // Clones a 0-terminated C string, allocating memory using new.}\par
45   {\cf17 static} {\cf17 const} {\cf18 char}* CloneCString({\cf17 const} {\cf18 char}* a_c_string);\par
46 \par
48   {\cf20 //}\par
49   {\cf20 // C'tors}\par
50 \par
51   {\cf20 // The default c'tor constructs a NULL string.}\par
52   MyString() : c_string_({\cf17 nullptr}) \{\}\par
53 \par
54   {\cf20 // Constructs a MyString by cloning a 0-terminated C string.}\par
55   {\cf17 explicit} MyString({\cf17 const} {\cf18 char}* a_c_string) : c_string_({\cf17 nullptr}) \{\par
56     Set(a_c_string);\par
57   \}\par
58 \par
59   {\cf20 // Copy c'tor}\par
60   MyString({\cf17 const} MyString& {\cf18 string}) : c_string_({\cf17 nullptr}) \{\par
61     Set({\cf18 string}.c_string_);\par
62   \}\par
63 \par
65   {\cf20 //}\par
66   {\cf20 // D'tor.  MyString is intended to be a final class, so the d'tor}\par
67   {\cf20 // doesn't need to be virtual.}\par
68   ~MyString() \{ {\cf17 delete}[] c_string_; \}\par
69 \par
70   {\cf20 // Gets the 0-terminated C string this MyString object represents.}\par
71   {\cf17 const} {\cf18 char}* c_string(){\cf17  const }\{ {\cf19 return} c_string_; \}\par
72 \par
73   {\cf18 size_t} Length(){\cf17  const }\{ {\cf19 return} c_string_ == {\cf17 nullptr} ? 0 : strlen(c_string_); \}\par
74 \par
75   {\cf20 // Sets the 0-terminated C string this MyString object represents.}\par
76   {\cf18 void} Set({\cf17 const} {\cf18 char}* c_string);\par
77 \};\par
78 \par
79 {\cf21 #endif  }{\cf20 // GOOGLETEST_SAMPLES_SAMPLE2_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
sample3-inl.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googletest/samples/sample3-inl.h}
{\xe \v lib/googletest-main/googletest/samples/sample3-inl.h}
{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2005, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // A sample program demonstrating using Google C++ testing framework.}\par
31 \par
32 {\cf21 #ifndef GOOGLETEST_SAMPLES_SAMPLE3_INL_H_}\par
33 {\cf21 #define GOOGLETEST_SAMPLES_SAMPLE3_INL_H_}\par
34 \par
35 {\cf21 #include <stddef.h>}\par
36 \par
37 {\cf20 // Queue is a simple queue implemented as a singled-linked list.}\par
38 {\cf20 //}\par
39 {\cf20 // The element type must support copy constructor.}\par
40 {\cf17 template} <{\cf17 typename} E>  {\cf20 // E is the element type}\par
41 {\cf17 class }Queue;\par
42 \par
43 {\cf20 // QueueNode is a node in a Queue, which consists of an element of}\par
44 {\cf20 // type E and a pointer to the next node.}\par
45 {\cf17 template} <{\cf17 typename} E>  {\cf20 // E is the element type}\par
46 {\cf17 class }QueueNode \{\par
47   {\cf17 friend} {\cf17 class }Queue<E>;\par
48 \par
49  {\cf17 public}:\par
50   {\cf20 // Gets the element in this node.}\par
51   {\cf17 const} E& element(){\cf17  const }\{ {\cf19 return} element_; \}\par
52 \par
53   {\cf20 // Gets the next node in the queue.}\par
54   QueueNode* next() \{ {\cf19 return} next_; \}\par
55   {\cf17 const} QueueNode* next(){\cf17  const }\{ {\cf19 return} next_; \}\par
56 \par
57  {\cf17 private}:\par
58   {\cf20 // Creates a node with a given element value.  The next pointer is}\par
59   {\cf20 // set to NULL.}\par
60   {\cf17 explicit} QueueNode({\cf17 const} E& an_element)\par
61       : element_(an_element), next_({\cf17 nullptr}) \{\}\par
62 \par
63   {\cf20 // We disable the default assignment operator and copy c'tor.}\par
64   {\cf17 const} QueueNode& operator=({\cf17 const} QueueNode&);\par
65   QueueNode({\cf17 const} QueueNode&);\par
66 \par
67   E element_;\par
68   QueueNode* next_;\par
69 \};\par
70 \par
71 {\cf17 template} <{\cf17 typename} E>  {\cf20 // E is the element type.}\par
72 {\cf17 class }Queue \{\par
73  {\cf17 public}:\par
74   {\cf20 // Creates an empty queue.}\par
75   Queue() : head_({\cf17 nullptr}), last_({\cf17 nullptr}), size_(0) \{\}\par
76 \par
77   {\cf20 // D'tor.  Clears the queue.}\par
78   ~Queue() \{ Clear(); \}\par
79 \par
80   {\cf20 // Clears the queue.}\par
81   {\cf18 void} Clear() \{\par
82     {\cf19 if} (size_ > 0) \{\par
83       {\cf20 // 1. Deletes every node.}\par
84       QueueNode<E>* node = head_;\par
85       QueueNode<E>* next = node->next();\par
86       {\cf19 for} (;;) \{\par
87         {\cf17 delete} node;\par
88         node = next;\par
89         {\cf19 if} (node == {\cf17 nullptr}) {\cf19 break};\par
90         next = node->next();\par
91       \}\par
92 \par
93       {\cf20 // 2. Resets the member variables.}\par
94       head_ = last_ = {\cf17 nullptr};\par
95       size_ = 0;\par
96     \}\par
97   \}\par
98 \par
99   {\cf20 // Gets the number of elements.}\par
100   {\cf18 size_t} Size(){\cf17  const }\{ {\cf19 return} size_; \}\par
101 \par
102   {\cf20 // Gets the first element of the queue, or NULL if the queue is empty.}\par
103   QueueNode<E>* Head() \{ {\cf19 return} head_; \}\par
104   {\cf17 const} QueueNode<E>* Head(){\cf17  const }\{ {\cf19 return} head_; \}\par
105 \par
106   {\cf20 // Gets the last element of the queue, or NULL if the queue is empty.}\par
107   QueueNode<E>* Last() \{ {\cf19 return} last_; \}\par
108   {\cf17 const} QueueNode<E>* Last(){\cf17  const }\{ {\cf19 return} last_; \}\par
109 \par
110   {\cf20 // Adds an element to the end of the queue.  A copy of the element is}\par
111   {\cf20 // created using the copy constructor, and then stored in the queue.}\par
112   {\cf20 // Changes made to the element in the queue doesn't affect the source}\par
113   {\cf20 // object, and vice versa.}\par
114   {\cf18 void} Enqueue({\cf17 const} E& element) \{\par
115     QueueNode<E>* new_node = {\cf17 new} QueueNode<E>(element);\par
116 \par
117     {\cf19 if} (size_ == 0) \{\par
118       head_ = last_ = new_node;\par
119       size_ = 1;\par
120     \} {\cf19 else} \{\par
121       last_->next_ = new_node;\par
122       last_ = new_node;\par
123       size_++;\par
124     \}\par
125   \}\par
126 \par
127   {\cf20 // Removes the head of the queue and returns it.  Returns NULL if}\par
128   {\cf20 // the queue is empty.}\par
129   E* Dequeue() \{\par
130     {\cf19 if} (size_ == 0) \{\par
131       {\cf19 return} {\cf17 nullptr};\par
132     \}\par
133 \par
134     {\cf17 const} QueueNode<E>* {\cf17 const} old_head = head_;\par
135     head_ = head_->next_;\par
136     size_--;\par
137     {\cf19 if} (size_ == 0) \{\par
138       last_ = {\cf17 nullptr};\par
139     \}\par
140 \par
141     E* element = {\cf17 new} E(old_head->element());\par
142     {\cf17 delete} old_head;\par
143 \par
144     {\cf19 return} element;\par
145   \}\par
146 \par
147   {\cf20 // Applies a function/functor on each element of the queue, and}\par
148   {\cf20 // returns the result in a new queue.  The original queue is not}\par
149   {\cf20 // affected.}\par
150   {\cf17 template} <{\cf17 typename} F>\par
151   Queue* Map(F function){\cf17  const }\{\par
152     Queue* new_queue = {\cf17 new} Queue();\par
153     {\cf19 for} ({\cf17 const} QueueNode<E>* node = head_; node != {\cf17 nullptr};\par
154          node = node->next_) \{\par
155       new_queue->Enqueue(function(node->element()));\par
156     \}\par
157 \par
158     {\cf19 return} new_queue;\par
159   \}\par
160 \par
161  {\cf17 private}:\par
162   QueueNode<E>* head_;  {\cf20 // The first node of the queue.}\par
163   QueueNode<E>* last_;  {\cf20 // The last node of the queue.}\par
164   {\cf18 size_t} size_;         {\cf20 // The number of elements in the queue.}\par
165 \par
166   {\cf20 // We disallow copying a queue.}\par
167   Queue({\cf17 const} Queue&);\par
168   {\cf17 const} Queue& operator=({\cf17 const} Queue&);\par
169 \};\par
170 \par
171 {\cf21 #endif  }{\cf20 // GOOGLETEST_SAMPLES_SAMPLE3_INL_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
sample4.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googletest/samples/sample4.h}
{\xe \v lib/googletest-main/googletest/samples/sample4.h}
{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2005, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // A sample program demonstrating using Google C++ testing framework.}\par
31 {\cf21 #ifndef GOOGLETEST_SAMPLES_SAMPLE4_H_}\par
32 {\cf21 #define GOOGLETEST_SAMPLES_SAMPLE4_H_}\par
33 \par
34 {\cf20 // A simple monotonic counter.}\par
35 {\cf17 class }Counter \{\par
36  {\cf17 private}:\par
37   {\cf18 int} counter_;\par
38 \par
39  {\cf17 public}:\par
40   {\cf20 // Creates a counter that starts at 0.}\par
41   Counter() : counter_(0) \{\}\par
42 \par
43   {\cf20 // Returns the current counter value, and increments it.}\par
44   {\cf18 int} Increment();\par
45 \par
46   {\cf20 // Returns the current counter value, and decrements it.}\par
47   {\cf18 int} Decrement();\par
48 \par
49   {\cf20 // Prints the current counter value to STDOUT.}\par
50   {\cf18 void} Print() {\cf17 const};\par
51 \};\par
52 \par
53 {\cf21 #endif  }{\cf20 // GOOGLETEST_SAMPLES_SAMPLE4_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest-internal-inl.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googletest/src/gtest-internal-inl.h}
{\xe \v lib/googletest-main/googletest/src/gtest-internal-inl.h}
{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2005, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 // Utility functions and classes used by the Google C++ testing framework.//}\par
31 {\cf20 // This file contains purely Google Test's internal implementation.  Please}\par
32 {\cf20 // DO NOT #INCLUDE IT IN A USER PROGRAM.}\par
33 \par
34 {\cf21 #ifndef GOOGLETEST_SRC_GTEST_INTERNAL_INL_H_}\par
35 {\cf21 #define GOOGLETEST_SRC_GTEST_INTERNAL_INL_H_}\par
36 \par
37 {\cf21 #ifndef _WIN32_WCE}\par
38 {\cf21 #include <errno.h>}\par
39 {\cf21 #endif  }{\cf20 // !_WIN32_WCE}\par
40 {\cf21 #include <stddef.h>}\par
41 {\cf21 #include <stdlib.h>}  {\cf20 // For strtoll/_strtoul64/malloc/free.}\par
42 {\cf21 #include <string.h>}  {\cf20 // For memmove.}\par
43 \par
44 {\cf21 #include <algorithm>}\par
45 {\cf21 #include <cstdint>}\par
46 {\cf21 #include <memory>}\par
47 {\cf21 #include <string>}\par
48 {\cf21 #include <vector>}\par
49 \par
50 {\cf21 #include "gtest/internal/gtest-port.h"}\par
51 \par
52 {\cf21 #if GTEST_CAN_STREAM_RESULTS_}\par
53 {\cf21 #include <arpa/inet.h>}  {\cf20 // NOLINT}\par
54 {\cf21 #include <netdb.h>}      {\cf20 // NOLINT}\par
55 {\cf21 #endif}\par
56 \par
57 {\cf21 #if GTEST_OS_WINDOWS}\par
58 {\cf21 #include <windows.h>}  {\cf20 // NOLINT}\par
59 {\cf21 #endif                }{\cf20 // GTEST_OS_WINDOWS}\par
60 \par
61 {\cf21 #include "gtest/gtest-spi.h"}\par
62 {\cf21 #include "gtest/gtest.h"}\par
63 \par
64 GTEST_DISABLE_MSC_WARNINGS_PUSH_(4251 \\\par
65 {\cf20 /* class A needs to have dll-interface to be used by clients of class B */})\par
66 \par
67 {\cf20 // Declares the flags.}\par
68 {\cf20 //}\par
69 {\cf20 // We don't want the users to modify this flag in the code, but want}\par
70 {\cf20 // Google Test's own unit tests to be able to access it. Therefore we}\par
71 {\cf20 // declare it here as opposed to in gtest.h.}\par
72 GTEST_DECLARE_bool_(death_test_use_fork);\par
73 \par
74 namespace testing \{\par
75 {\cf17 namespace }internal \{\par
76 \par
77 {\cf20 // The value of GetTestTypeId() as seen from within the Google Test}\par
78 {\cf20 // library.  This is solely for testing GetTestTypeId().}\par
79 GTEST_API_ {\cf17 extern} {\cf17 const} TypeId kTestTypeIdInGoogleTest;\par
80 \par
81 {\cf20 // A valid random seed must be in [1, kMaxRandomSeed].}\par
82 {\cf17 const} {\cf18 int} kMaxRandomSeed = 99999;\par
83 \par
84 {\cf20 // g_help_flag is true if and only if the --help flag or an equivalent form}\par
85 {\cf20 // is specified on the command line.}\par
86 GTEST_API_ {\cf17 extern} {\cf18 bool} g_help_flag;\par
87 \par
88 {\cf20 // Returns the current time in milliseconds.}\par
89 GTEST_API_ TimeInMillis GetTimeInMillis();\par
90 \par
91 {\cf20 // Returns true if and only if Google Test should use colors in the output.}\par
92 GTEST_API_ {\cf18 bool} ShouldUseColor({\cf18 bool} stdout_is_tty);\par
93 \par
94 {\cf20 // Formats the given time in milliseconds as seconds.}\par
95 GTEST_API_ std::string FormatTimeInMillisAsSeconds(TimeInMillis ms);\par
96 \par
97 {\cf20 // Converts the given time in milliseconds to a date string in the ISO 8601}\par
98 {\cf20 // format, without the timezone information.  N.B.: due to the use the}\par
99 {\cf20 // non-reentrant localtime() function, this function is not thread safe.  Do}\par
100 {\cf20 // not use it in any code that can be called from multiple threads.}\par
101 GTEST_API_ std::string FormatEpochTimeInMillisAsIso8601(TimeInMillis ms);\par
102 \par
103 {\cf20 // Parses a string for an Int32 flag, in the form of "--flag=value".}\par
104 {\cf20 //}\par
105 {\cf20 // On success, stores the value of the flag in *value, and returns}\par
106 {\cf20 // true.  On failure, returns false without changing *value.}\par
107 GTEST_API_ {\cf18 bool} ParseFlag({\cf17 const} {\cf18 char}* str, {\cf17 const} {\cf18 char}* flag, int32_t* value);\par
108 \par
109 {\cf20 // Returns a random seed in range [1, kMaxRandomSeed] based on the}\par
110 {\cf20 // given --gtest_random_seed flag value.}\par
111 {\cf17 inline} {\cf18 int} GetRandomSeedFromFlag(int32_t random_seed_flag) \{\par
112   {\cf17 const} {\cf18 unsigned} {\cf18 int} raw_seed =\par
113       (random_seed_flag == 0) ? {\cf17 static_cast<}{\cf18 unsigned} {\cf18 int}{\cf17 >}(GetTimeInMillis())\par
114                               : {\cf17 static_cast<}{\cf18 unsigned} {\cf18 int}{\cf17 >}(random_seed_flag);\par
115 \par
116   {\cf20 // Normalizes the actual seed to range [1, kMaxRandomSeed] such that}\par
117   {\cf20 // it's easy to type.}\par
118   {\cf17 const} {\cf18 int} normalized_seed =\par
119       {\cf17 static_cast<}{\cf18 int}{\cf17 >}((raw_seed - 1U) %\par
120                        {\cf17 static_cast<}{\cf18 unsigned} {\cf18 int}{\cf17 >}(kMaxRandomSeed)) +\par
121       1;\par
122   {\cf19 return} normalized_seed;\par
123 \}\par
124 \par
125 {\cf20 // Returns the first valid random seed after 'seed'.  The behavior is}\par
126 {\cf20 // undefined if 'seed' is invalid.  The seed after kMaxRandomSeed is}\par
127 {\cf20 // considered to be 1.}\par
128 {\cf17 inline} {\cf18 int} GetNextRandomSeed({\cf18 int} seed) \{\par
129   GTEST_CHECK_(1 <= seed && seed <= kMaxRandomSeed)\par
130       << {\cf22 "Invalid random seed "} << seed << {\cf22 " - must be in [1, "}\par
131       << kMaxRandomSeed << {\cf22 "]."};\par
132   {\cf17 const} {\cf18 int} next_seed = seed + 1;\par
133   {\cf19 return} (next_seed > kMaxRandomSeed) ? 1 : next_seed;\par
134 \}\par
135 \par
136 {\cf20 // This class saves the values of all Google Test flags in its c'tor, and}\par
137 {\cf20 // restores them in its d'tor.}\par
138 {\cf17 class }GTestFlagSaver \{\par
139  {\cf17 public}:\par
140   {\cf20 // The c'tor.}\par
141   GTestFlagSaver() \{\par
142     also_run_disabled_tests_ = GTEST_FLAG_GET(also_run_disabled_tests);\par
143     break_on_failure_ = GTEST_FLAG_GET(break_on_failure);\par
144     catch_exceptions_ = GTEST_FLAG_GET(catch_exceptions);\par
145     color_ = GTEST_FLAG_GET(color);\par
146     death_test_style_ = GTEST_FLAG_GET(death_test_style);\par
147     death_test_use_fork_ = GTEST_FLAG_GET(death_test_use_fork);\par
148     fail_fast_ = GTEST_FLAG_GET(fail_fast);\par
149     filter_ = GTEST_FLAG_GET(filter);\par
150     internal_run_death_test_ = GTEST_FLAG_GET(internal_run_death_test);\par
151     list_tests_ = GTEST_FLAG_GET(list_tests);\par
152     output_ = GTEST_FLAG_GET(output);\par
153     brief_ = GTEST_FLAG_GET(brief);\par
154     print_time_ = GTEST_FLAG_GET(print_time);\par
155     print_utf8_ = GTEST_FLAG_GET(print_utf8);\par
156     random_seed_ = GTEST_FLAG_GET(random_seed);\par
157     repeat_ = GTEST_FLAG_GET(repeat);\par
158     recreate_environments_when_repeating_ =\par
159         GTEST_FLAG_GET(recreate_environments_when_repeating);\par
160     shuffle_ = GTEST_FLAG_GET(shuffle);\par
161     stack_trace_depth_ = GTEST_FLAG_GET(stack_trace_depth);\par
162     stream_result_to_ = GTEST_FLAG_GET(stream_result_to);\par
163     throw_on_failure_ = GTEST_FLAG_GET(throw_on_failure);\par
164   \}\par
165 \par
166   {\cf20 // The d'tor is not virtual.  DO NOT INHERIT FROM THIS CLASS.}\par
167   ~GTestFlagSaver() \{\par
168     GTEST_FLAG_SET(also_run_disabled_tests, also_run_disabled_tests_);\par
169     GTEST_FLAG_SET(break_on_failure, break_on_failure_);\par
170     GTEST_FLAG_SET(catch_exceptions, catch_exceptions_);\par
171     GTEST_FLAG_SET(color, color_);\par
172     GTEST_FLAG_SET(death_test_style, death_test_style_);\par
173     GTEST_FLAG_SET(death_test_use_fork, death_test_use_fork_);\par
174     GTEST_FLAG_SET(filter, filter_);\par
175     GTEST_FLAG_SET(fail_fast, fail_fast_);\par
176     GTEST_FLAG_SET(internal_run_death_test, internal_run_death_test_);\par
177     GTEST_FLAG_SET(list_tests, list_tests_);\par
178     GTEST_FLAG_SET(output, output_);\par
179     GTEST_FLAG_SET(brief, brief_);\par
180     GTEST_FLAG_SET(print_time, print_time_);\par
181     GTEST_FLAG_SET(print_utf8, print_utf8_);\par
182     GTEST_FLAG_SET(random_seed, random_seed_);\par
183     GTEST_FLAG_SET(repeat, repeat_);\par
184     GTEST_FLAG_SET(recreate_environments_when_repeating,\par
185                    recreate_environments_when_repeating_);\par
186     GTEST_FLAG_SET(shuffle, shuffle_);\par
187     GTEST_FLAG_SET(stack_trace_depth, stack_trace_depth_);\par
188     GTEST_FLAG_SET(stream_result_to, stream_result_to_);\par
189     GTEST_FLAG_SET(throw_on_failure, throw_on_failure_);\par
190   \}\par
191 \par
192  {\cf17 private}:\par
193   {\cf20 // Fields for saving the original values of flags.}\par
194   {\cf18 bool} also_run_disabled_tests_;\par
195   {\cf18 bool} break_on_failure_;\par
196   {\cf18 bool} catch_exceptions_;\par
197   std::string color_;\par
198   std::string death_test_style_;\par
199   {\cf18 bool} death_test_use_fork_;\par
200   {\cf18 bool} fail_fast_;\par
201   std::string filter_;\par
202   std::string internal_run_death_test_;\par
203   {\cf18 bool} list_tests_;\par
204   std::string output_;\par
205   {\cf18 bool} brief_;\par
206   {\cf18 bool} print_time_;\par
207   {\cf18 bool} print_utf8_;\par
208   int32_t random_seed_;\par
209   int32_t repeat_;\par
210   {\cf18 bool} recreate_environments_when_repeating_;\par
211   {\cf18 bool} shuffle_;\par
212   int32_t stack_trace_depth_;\par
213   std::string stream_result_to_;\par
214   {\cf18 bool} throw_on_failure_;\par
215 \} GTEST_ATTRIBUTE_UNUSED_;\par
216 \par
217 {\cf20 // Converts a Unicode code point to a narrow string in UTF-8 encoding.}\par
218 {\cf20 // code_point parameter is of type UInt32 because wchar_t may not be}\par
219 {\cf20 // wide enough to contain a code point.}\par
220 {\cf20 // If the code_point is not a valid Unicode code point}\par
221 {\cf20 // (i.e. outside of Unicode range U+0 to U+10FFFF) it will be converted}\par
222 {\cf20 // to "(Invalid Unicode 0xXXXXXXXX)".}\par
223 GTEST_API_ std::string CodePointToUtf8(uint32_t code_point);\par
224 \par
225 {\cf20 // Converts a wide string to a narrow string in UTF-8 encoding.}\par
226 {\cf20 // The wide string is assumed to have the following encoding:}\par
227 {\cf20 //   UTF-16 if sizeof(wchar_t) == 2 (on Windows, Cygwin)}\par
228 {\cf20 //   UTF-32 if sizeof(wchar_t) == 4 (on Linux)}\par
229 {\cf20 // Parameter str points to a null-terminated wide string.}\par
230 {\cf20 // Parameter num_chars may additionally limit the number}\par
231 {\cf20 // of wchar_t characters processed. -1 is used when the entire string}\par
232 {\cf20 // should be processed.}\par
233 {\cf20 // If the string contains code points that are not valid Unicode code points}\par
234 {\cf20 // (i.e. outside of Unicode range U+0 to U+10FFFF) they will be output}\par
235 {\cf20 // as '(Invalid Unicode 0xXXXXXXXX)'. If the string is in UTF16 encoding}\par
236 {\cf20 // and contains invalid UTF-16 surrogate pairs, values in those pairs}\par
237 {\cf20 // will be encoded as individual Unicode characters from Basic Normal Plane.}\par
238 GTEST_API_ std::string WideStringToUtf8({\cf17 const} {\cf18 wchar_t}* str, {\cf18 int} num_chars);\par
239 \par
240 {\cf20 // Reads the GTEST_SHARD_STATUS_FILE environment variable, and creates the file}\par
241 {\cf20 // if the variable is present. If a file already exists at this location, this}\par
242 {\cf20 // function will write over it. If the variable is present, but the file cannot}\par
243 {\cf20 // be created, prints an error and exits.}\par
244 {\cf18 void} WriteToShardStatusFileIfNeeded();\par
245 \par
246 {\cf20 // Checks whether sharding is enabled by examining the relevant}\par
247 {\cf20 // environment variable values. If the variables are present,}\par
248 {\cf20 // but inconsistent (e.g., shard_index >= total_shards), prints}\par
249 {\cf20 // an error and exits. If in_subprocess_for_death_test, sharding is}\par
250 {\cf20 // disabled because it must only be applied to the original test}\par
251 {\cf20 // process. Otherwise, we could filter out death tests we intended to execute.}\par
252 GTEST_API_ {\cf18 bool} ShouldShard({\cf17 const} {\cf18 char}* total_shards_str,\par
253                             {\cf17 const} {\cf18 char}* shard_index_str,\par
254                             {\cf18 bool} in_subprocess_for_death_test);\par
255 \par
256 {\cf20 // Parses the environment variable var as a 32-bit integer. If it is unset,}\par
257 {\cf20 // returns default_val. If it is not a 32-bit integer, prints an error and}\par
258 {\cf20 // and aborts.}\par
259 GTEST_API_ int32_t Int32FromEnvOrDie({\cf17 const} {\cf18 char}* env_var, int32_t default_val);\par
260 \par
261 {\cf20 // Given the total number of shards, the shard index, and the test id,}\par
262 {\cf20 // returns true if and only if the test should be run on this shard. The test id}\par
263 {\cf20 // is some arbitrary but unique non-negative integer assigned to each test}\par
264 {\cf20 // method. Assumes that 0 <= shard_index < total_shards.}\par
265 GTEST_API_ {\cf18 bool} ShouldRunTestOnShard({\cf18 int} total_shards, {\cf18 int} shard_index,\par
266                                      {\cf18 int} test_id);\par
267 \par
268 {\cf20 // STL container utilities.}\par
269 \par
270 {\cf20 // Returns the number of elements in the given container that satisfy}\par
271 {\cf20 // the given predicate.}\par
272 {\cf17 template} <{\cf17 class} Container, {\cf17 typename} Predicate>\par
273 {\cf17 inline} {\cf18 int} CountIf({\cf17 const} Container& c, Predicate predicate) \{\par
274   {\cf20 // Implemented as an explicit loop since std::count_if() in libCstd on}\par
275   {\cf20 // Solaris has a non-standard signature.}\par
276   {\cf18 int} count = 0;\par
277   {\cf19 for} ({\cf17 auto} it = c.begin(); it != c.end(); ++it) \{\par
278     {\cf19 if} (predicate(*it)) ++count;\par
279   \}\par
280   {\cf19 return} count;\par
281 \}\par
282 \par
283 {\cf20 // Applies a function/functor to each element in the container.}\par
284 {\cf17 template} <{\cf17 class} Container, {\cf17 typename} Functor>\par
285 {\cf18 void} ForEach({\cf17 const} Container& c, Functor functor) \{\par
286   std::for_each(c.begin(), c.end(), functor);\par
287 \}\par
288 \par
289 {\cf20 // Returns the i-th element of the vector, or default_value if i is not}\par
290 {\cf20 // in range [0, v.size()).}\par
291 {\cf17 template} <{\cf17 typename} E>\par
292 {\cf17 inline} E GetElementOr({\cf17 const} std::vector<E>& v, {\cf18 int} i, E default_value) \{\par
293   {\cf19 return} (i < 0 || i >= {\cf17 static_cast<}{\cf18 int}{\cf17 >}(v.size())) ? default_value\par
294                                                     : v[{\cf17 static_cast<}{\cf18 size_t}{\cf17 >}(i)];\par
295 \}\par
296 \par
297 {\cf20 // Performs an in-place shuffle of a range of the vector's elements.}\par
298 {\cf20 // 'begin' and 'end' are element indices as an STL-style range;}\par
299 {\cf20 // i.e. [begin, end) are shuffled, where 'end' == size() means to}\par
300 {\cf20 // shuffle to the end of the vector.}\par
301 {\cf17 template} <{\cf17 typename} E>\par
302 {\cf18 void} ShuffleRange(internal::Random* random, {\cf18 int} begin, {\cf18 int} end,\par
303                   std::vector<E>* v) \{\par
304   {\cf17 const} {\cf18 int} size = {\cf17 static_cast<}{\cf18 int}{\cf17 >}(v->size());\par
305   GTEST_CHECK_(0 <= begin && begin <= size)\par
306       << {\cf22 "Invalid shuffle range start "} << begin << {\cf22 ": must be in range [0, "}\par
307       << size << {\cf22 "]."};\par
308   GTEST_CHECK_(begin <= end && end <= size)\par
309       << {\cf22 "Invalid shuffle range finish "} << end << {\cf22 ": must be in range ["}\par
310       << begin << {\cf22 ", "} << size << {\cf22 "]."};\par
311 \par
312   {\cf20 // Fisher-Yates shuffle, from}\par
313   {\cf20 // http://en.wikipedia.org/wiki/Fisher-Yates_shuffle}\par
314   {\cf19 for} ({\cf18 int} range_width = end - begin; range_width >= 2; range_width--) \{\par
315     {\cf17 const} {\cf18 int} last_in_range = begin + range_width - 1;\par
316     {\cf17 const} {\cf18 int} selected =\par
317         begin +\par
318         {\cf17 static_cast<}{\cf18 int}{\cf17 >}(random->Generate({\cf17 static_cast<}uint32_t{\cf17 >}(range_width)));\par
319     std::swap((*v)[{\cf17 static_cast<}{\cf18 size_t}{\cf17 >}(selected)],\par
320               (*v)[{\cf17 static_cast<}{\cf18 size_t}{\cf17 >}(last_in_range)]);\par
321   \}\par
322 \}\par
323 \par
324 {\cf20 // Performs an in-place shuffle of the vector's elements.}\par
325 {\cf17 template} <{\cf17 typename} E>\par
326 {\cf17 inline} {\cf18 void} Shuffle(internal::Random* random, std::vector<E>* v) \{\par
327   ShuffleRange(random, 0, {\cf17 static_cast<}{\cf18 int}{\cf17 >}(v->size()), v);\par
328 \}\par
329 \par
330 {\cf20 // A function for deleting an object.  Handy for being used as a}\par
331 {\cf20 // functor.}\par
332 {\cf17 template} <{\cf17 typename} T>\par
333 {\cf17 static} {\cf18 void} Delete(T* x) \{\par
334   {\cf17 delete} x;\par
335 \}\par
336 \par
337 {\cf20 // A predicate that checks the key of a TestProperty against a known key.}\par
338 {\cf20 //}\par
339 {\cf20 // TestPropertyKeyIs is copyable.}\par
340 {\cf17 class }TestPropertyKeyIs \{\par
341  {\cf17 public}:\par
342   {\cf20 // Constructor.}\par
343   {\cf20 //}\par
344   {\cf20 // TestPropertyKeyIs has NO default constructor.}\par
345   {\cf17 explicit} TestPropertyKeyIs({\cf17 const} std::string& key) : key_(key) \{\}\par
346 \par
347   {\cf20 // Returns true if and only if the test name of test property matches on key_.}\par
348   {\cf18 bool} operator()({\cf17 const} TestProperty& test_property){\cf17  const }\{\par
349     {\cf19 return} test_property.key() == key_;\par
350   \}\par
351 \par
352  {\cf17 private}:\par
353   std::string key_;\par
354 \};\par
355 \par
356 {\cf20 // Class UnitTestOptions.}\par
357 {\cf20 //}\par
358 {\cf20 // This class contains functions for processing options the user}\par
359 {\cf20 // specifies when running the tests.  It has only static members.}\par
360 {\cf20 //}\par
361 {\cf20 // In most cases, the user can specify an option using either an}\par
362 {\cf20 // environment variable or a command line flag.  E.g. you can set the}\par
363 {\cf20 // test filter using either GTEST_FILTER or --gtest_filter.  If both}\par
364 {\cf20 // the variable and the flag are present, the latter overrides the}\par
365 {\cf20 // former.}\par
366 {\cf17 class }GTEST_API_ UnitTestOptions \{\par
367  {\cf17 public}:\par
368   {\cf20 // Functions for processing the gtest_output flag.}\par
369 \par
370   {\cf20 // Returns the output format, or "" for normal printed output.}\par
371   {\cf17 static} std::string GetOutputFormat();\par
372 \par
373   {\cf20 // Returns the absolute path of the requested output file, or the}\par
374   {\cf20 // default (test_detail.xml in the original working directory) if}\par
375   {\cf20 // none was explicitly specified.}\par
376   {\cf17 static} std::string GetAbsolutePathToOutputFile();\par
377 \par
378   {\cf20 // Functions for processing the gtest_filter flag.}\par
379 \par
380   {\cf20 // Returns true if and only if the user-specified filter matches the test}\par
381   {\cf20 // suite name and the test name.}\par
382   {\cf17 static} {\cf18 bool} FilterMatchesTest({\cf17 const} std::string& test_suite_name,\par
383                                 {\cf17 const} std::string& test_name);\par
384 \par
385 {\cf21 #if GTEST_OS_WINDOWS}\par
386   {\cf20 // Function for supporting the gtest_catch_exception flag.}\par
387 \par
388   {\cf20 // Returns EXCEPTION_EXECUTE_HANDLER if Google Test should handle the}\par
389   {\cf20 // given SEH exception, or EXCEPTION_CONTINUE_SEARCH otherwise.}\par
390   {\cf20 // This function is useful as an __except condition.}\par
391   {\cf17 static} {\cf18 int} GTestShouldProcessSEH(DWORD exception_code);\par
392 {\cf21 #endif  }{\cf20 // GTEST_OS_WINDOWS}\par
393 \par
394   {\cf20 // Returns true if "name" matches the ':' separated list of glob-style}\par
395   {\cf20 // filters in "filter".}\par
396   {\cf17 static} {\cf18 bool} MatchesFilter({\cf17 const} std::string& name, {\cf17 const} {\cf18 char}* filter);\par
397 \};\par
398 \par
399 {\cf20 // Returns the current application's name, removing directory path if that}\par
400 {\cf20 // is present.  Used by UnitTestOptions::GetOutputFile.}\par
401 GTEST_API_ FilePath GetCurrentExecutableName();\par
402 \par
403 {\cf20 // The role interface for getting the OS stack trace as a string.}\par
404 {\cf17 class }OsStackTraceGetterInterface \{\par
405  {\cf17 public}:\par
406   OsStackTraceGetterInterface() \{\}\par
407   {\cf17 virtual} ~OsStackTraceGetterInterface() \{\}\par
408 \par
409   {\cf20 // Returns the current OS stack trace as an std::string.  Parameters:}\par
410   {\cf20 //}\par
411   {\cf20 //   max_depth  - the maximum number of stack frames to be included}\par
412   {\cf20 //                in the trace.}\par
413   {\cf20 //   skip_count - the number of top frames to be skipped; doesn't count}\par
414   {\cf20 //                against max_depth.}\par
415   {\cf17 virtual} std::string CurrentStackTrace({\cf18 int} max_depth, {\cf18 int} skip_count) = 0;\par
416 \par
417   {\cf20 // UponLeavingGTest() should be called immediately before Google Test calls}\par
418   {\cf20 // user code. It saves some information about the current stack that}\par
419   {\cf20 // CurrentStackTrace() will use to find and hide Google Test stack frames.}\par
420   {\cf17 virtual} {\cf18 void} UponLeavingGTest() = 0;\par
421 \par
422   {\cf20 // This string is inserted in place of stack frames that are part of}\par
423   {\cf20 // Google Test's implementation.}\par
424   {\cf17 static} {\cf17 const} {\cf18 char}* {\cf17 const} kElidedFramesMarker;\par
425 \par
426  {\cf17 private}:\par
427   OsStackTraceGetterInterface({\cf17 const} OsStackTraceGetterInterface&) = {\cf17 delete};\par
428   OsStackTraceGetterInterface& operator=({\cf17 const} OsStackTraceGetterInterface&) =\par
429       {\cf17 delete};\par
430 \};\par
431 \par
432 {\cf20 // A working implementation of the OsStackTraceGetterInterface interface.}\par
433 {\cf17 class }OsStackTraceGetter : {\cf17 public} OsStackTraceGetterInterface \{\par
434  {\cf17 public}:\par
435   OsStackTraceGetter() \{\}\par
436 \par
437   std::string CurrentStackTrace({\cf18 int} max_depth, {\cf18 int} skip_count) {\cf17 override};\par
438   {\cf18 void} UponLeavingGTest() {\cf17 override};\par
439 \par
440  {\cf17 private}:\par
441 {\cf21 #if GTEST_HAS_ABSL}\par
442   Mutex mutex_;  {\cf20 // Protects all internal state.}\par
443 \par
444   {\cf20 // We save the stack frame below the frame that calls user code.}\par
445   {\cf20 // We do this because the address of the frame immediately below}\par
446   {\cf20 // the user code changes between the call to UponLeavingGTest()}\par
447   {\cf20 // and any calls to the stack trace code from within the user code.}\par
448   {\cf18 void}* caller_frame_ = {\cf17 nullptr};\par
449 {\cf21 #endif  }{\cf20 // GTEST_HAS_ABSL}\par
450 \par
451   OsStackTraceGetter({\cf17 const} OsStackTraceGetter&) = {\cf17 delete};\par
452   OsStackTraceGetter& operator=({\cf17 const} OsStackTraceGetter&) = {\cf17 delete};\par
453 \};\par
454 \par
455 {\cf20 // Information about a Google Test trace point.}\par
456 {\cf17 struct }TraceInfo \{\par
457   {\cf17 const} {\cf18 char}* file;\par
458   {\cf18 int} line;\par
459   std::string message;\par
460 \};\par
461 \par
462 {\cf20 // This is the default global test part result reporter used in UnitTestImpl.}\par
463 {\cf20 // This class should only be used by UnitTestImpl.}\par
464 {\cf17 class }DefaultGlobalTestPartResultReporter\par
465     : {\cf17 public} TestPartResultReporterInterface \{\par
466  {\cf17 public}:\par
467   {\cf17 explicit} DefaultGlobalTestPartResultReporter(UnitTestImpl* unit_test);\par
468   {\cf20 // Implements the TestPartResultReporterInterface. Reports the test part}\par
469   {\cf20 // result in the current test.}\par
470   {\cf18 void} ReportTestPartResult({\cf17 const} TestPartResult& result) {\cf17 override};\par
471 \par
472  {\cf17 private}:\par
473   UnitTestImpl* {\cf17 const} unit_test_;\par
474 \par
475   DefaultGlobalTestPartResultReporter(\par
476       {\cf17 const} DefaultGlobalTestPartResultReporter&) = {\cf17 delete};\par
477   DefaultGlobalTestPartResultReporter& operator=(\par
478       {\cf17 const} DefaultGlobalTestPartResultReporter&) = {\cf17 delete};\par
479 \};\par
480 \par
481 {\cf20 // This is the default per thread test part result reporter used in}\par
482 {\cf20 // UnitTestImpl. This class should only be used by UnitTestImpl.}\par
483 {\cf17 class }DefaultPerThreadTestPartResultReporter\par
484     : {\cf17 public} TestPartResultReporterInterface \{\par
485  {\cf17 public}:\par
486   {\cf17 explicit} DefaultPerThreadTestPartResultReporter(UnitTestImpl* unit_test);\par
487   {\cf20 // Implements the TestPartResultReporterInterface. The implementation just}\par
488   {\cf20 // delegates to the current global test part result reporter of *unit_test_.}\par
489   {\cf18 void} ReportTestPartResult({\cf17 const} TestPartResult& result) {\cf17 override};\par
490 \par
491  {\cf17 private}:\par
492   UnitTestImpl* {\cf17 const} unit_test_;\par
493 \par
494   DefaultPerThreadTestPartResultReporter(\par
495       {\cf17 const} DefaultPerThreadTestPartResultReporter&) = {\cf17 delete};\par
496   DefaultPerThreadTestPartResultReporter& operator=(\par
497       {\cf17 const} DefaultPerThreadTestPartResultReporter&) = {\cf17 delete};\par
498 \};\par
499 \par
500 {\cf20 // The private implementation of the UnitTest class.  We don't protect}\par
501 {\cf20 // the methods under a mutex, as this class is not accessible by a}\par
502 {\cf20 // user and the UnitTest class that delegates work to this class does}\par
503 {\cf20 // proper locking.}\par
504 {\cf17 class }GTEST_API_ UnitTestImpl \{\par
505  {\cf17 public}:\par
506   {\cf17 explicit} UnitTestImpl(UnitTest* parent);\par
507   {\cf17 virtual} ~UnitTestImpl();\par
508 \par
509   {\cf20 // There are two different ways to register your own TestPartResultReporter.}\par
510   {\cf20 // You can register your own reporter to listen either only for test results}\par
511   {\cf20 // from the current thread or for results from all threads.}\par
512   {\cf20 // By default, each per-thread test result reporter just passes a new}\par
513   {\cf20 // TestPartResult to the global test result reporter, which registers the}\par
514   {\cf20 // test part result for the currently running test.}\par
515 \par
516   {\cf20 // Returns the global test part result reporter.}\par
517   TestPartResultReporterInterface* GetGlobalTestPartResultReporter();\par
518 \par
519   {\cf20 // Sets the global test part result reporter.}\par
520   {\cf18 void} SetGlobalTestPartResultReporter(\par
521       TestPartResultReporterInterface* reporter);\par
522 \par
523   {\cf20 // Returns the test part result reporter for the current thread.}\par
524   TestPartResultReporterInterface* GetTestPartResultReporterForCurrentThread();\par
525 \par
526   {\cf20 // Sets the test part result reporter for the current thread.}\par
527   {\cf18 void} SetTestPartResultReporterForCurrentThread(\par
528       TestPartResultReporterInterface* reporter);\par
529 \par
530   {\cf20 // Gets the number of successful test suites.}\par
531   {\cf18 int} successful_test_suite_count() {\cf17 const};\par
532 \par
533   {\cf20 // Gets the number of failed test suites.}\par
534   {\cf18 int} failed_test_suite_count() {\cf17 const};\par
535 \par
536   {\cf20 // Gets the number of all test suites.}\par
537   {\cf18 int} total_test_suite_count() {\cf17 const};\par
538 \par
539   {\cf20 // Gets the number of all test suites that contain at least one test}\par
540   {\cf20 // that should run.}\par
541   {\cf18 int} test_suite_to_run_count() {\cf17 const};\par
542 \par
543   {\cf20 // Gets the number of successful tests.}\par
544   {\cf18 int} successful_test_count() {\cf17 const};\par
545 \par
546   {\cf20 // Gets the number of skipped tests.}\par
547   {\cf18 int} skipped_test_count() {\cf17 const};\par
548 \par
549   {\cf20 // Gets the number of failed tests.}\par
550   {\cf18 int} failed_test_count() {\cf17 const};\par
551 \par
552   {\cf20 // Gets the number of disabled tests that will be reported in the XML report.}\par
553   {\cf18 int} reportable_disabled_test_count() {\cf17 const};\par
554 \par
555   {\cf20 // Gets the number of disabled tests.}\par
556   {\cf18 int} disabled_test_count() {\cf17 const};\par
557 \par
558   {\cf20 // Gets the number of tests to be printed in the XML report.}\par
559   {\cf18 int} reportable_test_count() {\cf17 const};\par
560 \par
561   {\cf20 // Gets the number of all tests.}\par
562   {\cf18 int} total_test_count() {\cf17 const};\par
563 \par
564   {\cf20 // Gets the number of tests that should run.}\par
565   {\cf18 int} test_to_run_count() {\cf17 const};\par
566 \par
567   {\cf20 // Gets the time of the test program start, in ms from the start of the}\par
568   {\cf20 // UNIX epoch.}\par
569   TimeInMillis start_timestamp(){\cf17  const }\{ {\cf19 return} start_timestamp_; \}\par
570 \par
571   {\cf20 // Gets the elapsed time, in milliseconds.}\par
572   TimeInMillis elapsed_time(){\cf17  const }\{ {\cf19 return} elapsed_time_; \}\par
573 \par
574   {\cf20 // Returns true if and only if the unit test passed (i.e. all test suites}\par
575   {\cf20 // passed).}\par
576   {\cf18 bool} Passed(){\cf17  const }\{ {\cf19 return} !Failed(); \}\par
577 \par
578   {\cf20 // Returns true if and only if the unit test failed (i.e. some test suite}\par
579   {\cf20 // failed or something outside of all tests failed).}\par
580   {\cf18 bool} Failed(){\cf17  const }\{\par
581     {\cf19 return} failed_test_suite_count() > 0 || ad_hoc_test_result()->Failed();\par
582   \}\par
583 \par
584   {\cf20 // Gets the i-th test suite among all the test suites. i can range from 0 to}\par
585   {\cf20 // total_test_suite_count() - 1. If i is not in that range, returns NULL.}\par
586   {\cf17 const} TestSuite* GetTestSuite({\cf18 int} i){\cf17  const }\{\par
587     {\cf17 const} {\cf18 int} index = GetElementOr(test_suite_indices_, i, -1);\par
588     {\cf19 return} index < 0 ? nullptr : test_suites_[static_cast<size_t>(i)];\par
589   \}\par
590 \par
591   {\cf20 //  Legacy API is deprecated but still available}\par
592 {\cf21 #ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
593   {\cf17 const} TestCase* GetTestCase({\cf18 int} i){\cf17  const }\{ {\cf19 return} GetTestSuite(i); \}\par
594 {\cf21 #endif  }{\cf20 //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
595 \par
596   {\cf20 // Gets the i-th test suite among all the test suites. i can range from 0 to}\par
597   {\cf20 // total_test_suite_count() - 1. If i is not in that range, returns NULL.}\par
598   TestSuite* GetMutableSuiteCase({\cf18 int} i) \{\par
599     {\cf17 const} {\cf18 int} index = GetElementOr(test_suite_indices_, i, -1);\par
600     {\cf19 return} index < 0 ? nullptr : test_suites_[static_cast<size_t>(index)];\par
601   \}\par
602 \par
603   {\cf20 // Provides access to the event listener list.}\par
604   TestEventListeners* listeners() \{ {\cf19 return} &listeners_; \}\par
605 \par
606   {\cf20 // Returns the TestResult for the test that's currently running, or}\par
607   {\cf20 // the TestResult for the ad hoc test if no test is running.}\par
608   TestResult* current_test_result();\par
609 \par
610   {\cf20 // Returns the TestResult for the ad hoc test.}\par
611   {\cf17 const} TestResult* ad_hoc_test_result(){\cf17  const }\{ {\cf19 return} &ad_hoc_test_result_; \}\par
612 \par
613   {\cf20 // Sets the OS stack trace getter.}\par
614   {\cf20 //}\par
615   {\cf20 // Does nothing if the input and the current OS stack trace getter}\par
616   {\cf20 // are the same; otherwise, deletes the old getter and makes the}\par
617   {\cf20 // input the current getter.}\par
618   {\cf18 void} set_os_stack_trace_getter(OsStackTraceGetterInterface* getter);\par
619 \par
620   {\cf20 // Returns the current OS stack trace getter if it is not NULL;}\par
621   {\cf20 // otherwise, creates an OsStackTraceGetter, makes it the current}\par
622   {\cf20 // getter, and returns it.}\par
623   OsStackTraceGetterInterface* os_stack_trace_getter();\par
624 \par
625   {\cf20 // Returns the current OS stack trace as an std::string.}\par
626   {\cf20 //}\par
627   {\cf20 // The maximum number of stack frames to be included is specified by}\par
628   {\cf20 // the gtest_stack_trace_depth flag.  The skip_count parameter}\par
629   {\cf20 // specifies the number of top frames to be skipped, which doesn't}\par
630   {\cf20 // count against the number of frames to be included.}\par
631   {\cf20 //}\par
632   {\cf20 // For example, if Foo() calls Bar(), which in turn calls}\par
633   {\cf20 // CurrentOsStackTraceExceptTop(1), Foo() will be included in the}\par
634   {\cf20 // trace but Bar() and CurrentOsStackTraceExceptTop() won't.}\par
635   std::string CurrentOsStackTraceExceptTop({\cf18 int} skip_count)\par
636       GTEST_NO_INLINE_ GTEST_NO_TAIL_CALL_;\par
637 \par
638   {\cf20 // Finds and returns a TestSuite with the given name.  If one doesn't}\par
639   {\cf20 // exist, creates one and returns it.}\par
640   {\cf20 //}\par
641   {\cf20 // Arguments:}\par
642   {\cf20 //}\par
643   {\cf20 //   test_suite_name: name of the test suite}\par
644   {\cf20 //   type_param:      the name of the test's type parameter, or NULL if}\par
645   {\cf20 //                    this is not a typed or a type-parameterized test.}\par
646   {\cf20 //   set_up_tc:       pointer to the function that sets up the test suite}\par
647   {\cf20 //   tear_down_tc:    pointer to the function that tears down the test suite}\par
648   TestSuite* GetTestSuite({\cf17 const} {\cf18 char}* test_suite_name, {\cf17 const} {\cf18 char}* type_param,\par
649                           internal::SetUpTestSuiteFunc set_up_tc,\par
650                           internal::TearDownTestSuiteFunc tear_down_tc);\par
651 \par
652 {\cf20 //  Legacy API is deprecated but still available}\par
653 {\cf21 #ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
654   TestCase* GetTestCase({\cf17 const} {\cf18 char}* test_case_name, {\cf17 const} {\cf18 char}* type_param,\par
655                         internal::SetUpTestSuiteFunc set_up_tc,\par
656                         internal::TearDownTestSuiteFunc tear_down_tc) \{\par
657     {\cf19 return} GetTestSuite(test_case_name, type_param, set_up_tc, tear_down_tc);\par
658   \}\par
659 {\cf21 #endif  }{\cf20 //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_}\par
660 \par
661   {\cf20 // Adds a TestInfo to the unit test.}\par
662   {\cf20 //}\par
663   {\cf20 // Arguments:}\par
664   {\cf20 //}\par
665   {\cf20 //   set_up_tc:    pointer to the function that sets up the test suite}\par
666   {\cf20 //   tear_down_tc: pointer to the function that tears down the test suite}\par
667   {\cf20 //   test_info:    the TestInfo object}\par
668   {\cf18 void} AddTestInfo(internal::SetUpTestSuiteFunc set_up_tc,\par
669                    internal::TearDownTestSuiteFunc tear_down_tc,\par
670                    TestInfo* test_info) \{\par
671 {\cf21 #if GTEST_HAS_DEATH_TEST}\par
672     {\cf20 // In order to support thread-safe death tests, we need to}\par
673     {\cf20 // remember the original working directory when the test program}\par
674     {\cf20 // was first invoked.  We cannot do this in RUN_ALL_TESTS(), as}\par
675     {\cf20 // the user may have changed the current directory before calling}\par
676     {\cf20 // RUN_ALL_TESTS().  Therefore we capture the current directory in}\par
677     {\cf20 // AddTestInfo(), which is called to register a TEST or TEST_F}\par
678     {\cf20 // before main() is reached.}\par
679     {\cf19 if} (original_working_dir_.IsEmpty()) \{\par
680       original_working_dir_.Set(FilePath::GetCurrentDir());\par
681       GTEST_CHECK_(!original_working_dir_.IsEmpty())\par
682           << {\cf22 "Failed to get the current working directory."};\par
683     \}\par
684 {\cf21 #endif  }{\cf20 // GTEST_HAS_DEATH_TEST}\par
685 \par
686     GetTestSuite(test_info->test_suite_name(), test_info->type_param(),\par
687                  set_up_tc, tear_down_tc)\par
688         ->AddTestInfo(test_info);\par
689   \}\par
690 \par
691   {\cf20 // Returns ParameterizedTestSuiteRegistry object used to keep track of}\par
692   {\cf20 // value-parameterized tests and instantiate and register them.}\par
693   internal::ParameterizedTestSuiteRegistry& parameterized_test_registry() \{\par
694     {\cf19 return} parameterized_test_registry_;\par
695   \}\par
696 \par
697   std::set<std::string>* ignored_parameterized_test_suites() \{\par
698     {\cf19 return} &ignored_parameterized_test_suites_;\par
699   \}\par
700 \par
701   {\cf20 // Returns TypeParameterizedTestSuiteRegistry object used to keep track of}\par
702   {\cf20 // type-parameterized tests and instantiations of them.}\par
703   internal::TypeParameterizedTestSuiteRegistry&\par
704   type_parameterized_test_registry() \{\par
705     {\cf19 return} type_parameterized_test_registry_;\par
706   \}\par
707 \par
708   {\cf20 // Sets the TestSuite object for the test that's currently running.}\par
709   {\cf18 void} set_current_test_suite(TestSuite* a_current_test_suite) \{\par
710     current_test_suite_ = a_current_test_suite;\par
711   \}\par
712 \par
713   {\cf20 // Sets the TestInfo object for the test that's currently running.  If}\par
714   {\cf20 // current_test_info is NULL, the assertion results will be stored in}\par
715   {\cf20 // ad_hoc_test_result_.}\par
716   {\cf18 void} set_current_test_info(TestInfo* a_current_test_info) \{\par
717     current_test_info_ = a_current_test_info;\par
718   \}\par
719 \par
720   {\cf20 // Registers all parameterized tests defined using TEST_P and}\par
721   {\cf20 // INSTANTIATE_TEST_SUITE_P, creating regular tests for each test/parameter}\par
722   {\cf20 // combination. This method can be called more then once; it has guards}\par
723   {\cf20 // protecting from registering the tests more then once.  If}\par
724   {\cf20 // value-parameterized tests are disabled, RegisterParameterizedTests is}\par
725   {\cf20 // present but does nothing.}\par
726   {\cf18 void} RegisterParameterizedTests();\par
727 \par
728   {\cf20 // Runs all tests in this UnitTest object, prints the result, and}\par
729   {\cf20 // returns true if all tests are successful.  If any exception is}\par
730   {\cf20 // thrown during a test, this test is considered to be failed, but}\par
731   {\cf20 // the rest of the tests will still be run.}\par
732   {\cf18 bool} RunAllTests();\par
733 \par
734   {\cf20 // Clears the results of all tests, except the ad hoc tests.}\par
735   {\cf18 void} ClearNonAdHocTestResult() \{\par
736     ForEach(test_suites_, TestSuite::ClearTestSuiteResult);\par
737   \}\par
738 \par
739   {\cf20 // Clears the results of ad-hoc test assertions.}\par
740   {\cf18 void} ClearAdHocTestResult() \{ ad_hoc_test_result_.Clear(); \}\par
741 \par
742   {\cf20 // Adds a TestProperty to the current TestResult object when invoked in a}\par
743   {\cf20 // context of a test or a test suite, or to the global property set. If the}\par
744   {\cf20 // result already contains a property with the same key, the value will be}\par
745   {\cf20 // updated.}\par
746   {\cf18 void} RecordProperty({\cf17 const} TestProperty& test_property);\par
747 \par
748   {\cf17 enum} ReactionToSharding \{ HONOR_SHARDING_PROTOCOL, IGNORE_SHARDING_PROTOCOL \};\par
749 \par
750   {\cf20 // Matches the full name of each test against the user-specified}\par
751   {\cf20 // filter to decide whether the test should run, then records the}\par
752   {\cf20 // result in each TestSuite and TestInfo object.}\par
753   {\cf20 // If shard_tests == HONOR_SHARDING_PROTOCOL, further filters tests}\par
754   {\cf20 // based on sharding variables in the environment.}\par
755   {\cf20 // Returns the number of tests that should run.}\par
756   {\cf18 int} FilterTests(ReactionToSharding shard_tests);\par
757 \par
758   {\cf20 // Prints the names of the tests matching the user-specified filter flag.}\par
759   {\cf18 void} ListTestsMatchingFilter();\par
760 \par
761   {\cf17 const} TestSuite* current_test_suite(){\cf17  const }\{ {\cf19 return} current_test_suite_; \}\par
762   TestInfo* current_test_info() \{ {\cf19 return} current_test_info_; \}\par
763   {\cf17 const} TestInfo* current_test_info(){\cf17  const }\{ {\cf19 return} current_test_info_; \}\par
764 \par
765   {\cf20 // Returns the vector of environments that need to be set-up/torn-down}\par
766   {\cf20 // before/after the tests are run.}\par
767   std::vector<Environment*>& environments() \{ {\cf19 return} environments_; \}\par
768 \par
769   {\cf20 // Getters for the per-thread Google Test trace stack.}\par
770   std::vector<TraceInfo>& gtest_trace_stack() \{\par
771     {\cf19 return} *(gtest_trace_stack_.pointer());\par
772   \}\par
773   {\cf17 const} std::vector<TraceInfo>& gtest_trace_stack(){\cf17  const }\{\par
774     {\cf19 return} gtest_trace_stack_.get();\par
775   \}\par
776 \par
777 {\cf21 #if GTEST_HAS_DEATH_TEST}\par
778   {\cf18 void} InitDeathTestSubprocessControlInfo() \{\par
779     internal_run_death_test_flag_.reset(ParseInternalRunDeathTestFlag());\par
780   \}\par
781   {\cf20 // Returns a pointer to the parsed --gtest_internal_run_death_test}\par
782   {\cf20 // flag, or NULL if that flag was not specified.}\par
783   {\cf20 // This information is useful only in a death test child process.}\par
784   {\cf20 // Must not be called before a call to InitGoogleTest.}\par
785   {\cf17 const} InternalRunDeathTestFlag* internal_run_death_test_flag(){\cf17  const }\{\par
786     {\cf19 return} internal_run_death_test_flag_.get();\par
787   \}\par
788 \par
789   {\cf20 // Returns a pointer to the current death test factory.}\par
790   internal::DeathTestFactory* death_test_factory() \{\par
791     {\cf19 return} death_test_factory_.get();\par
792   \}\par
793 \par
794   {\cf18 void} SuppressTestEventsIfInSubprocess();\par
795 \par
796   {\cf17 friend} {\cf17 class }ReplaceDeathTestFactory;\par
797 {\cf21 #endif  }{\cf20 // GTEST_HAS_DEATH_TEST}\par
798 \par
799   {\cf20 // Initializes the event listener performing XML output as specified by}\par
800   {\cf20 // UnitTestOptions. Must not be called before InitGoogleTest.}\par
801   {\cf18 void} ConfigureXmlOutput();\par
802 \par
803 {\cf21 #if GTEST_CAN_STREAM_RESULTS_}\par
804   {\cf20 // Initializes the event listener for streaming test results to a socket.}\par
805   {\cf20 // Must not be called before InitGoogleTest.}\par
806   {\cf18 void} ConfigureStreamingOutput();\par
807 {\cf21 #endif}\par
808 \par
809   {\cf20 // Performs initialization dependent upon flag values obtained in}\par
810   {\cf20 // ParseGoogleTestFlagsOnly.  Is called from InitGoogleTest after the call to}\par
811   {\cf20 // ParseGoogleTestFlagsOnly.  In case a user neglects to call InitGoogleTest}\par
812   {\cf20 // this function is also called from RunAllTests.  Since this function can be}\par
813   {\cf20 // called more than once, it has to be idempotent.}\par
814   {\cf18 void} PostFlagParsingInit();\par
815 \par
816   {\cf20 // Gets the random seed used at the start of the current test iteration.}\par
817   {\cf18 int} random_seed(){\cf17  const }\{ {\cf19 return} random_seed_; \}\par
818 \par
819   {\cf20 // Gets the random number generator.}\par
820   internal::Random* random() \{ {\cf19 return} &random_; \}\par
821 \par
822   {\cf20 // Shuffles all test suites, and the tests within each test suite,}\par
823   {\cf20 // making sure that death tests are still run first.}\par
824   {\cf18 void} ShuffleTests();\par
825 \par
826   {\cf20 // Restores the test suites and tests to their order before the first shuffle.}\par
827   {\cf18 void} UnshuffleTests();\par
828 \par
829   {\cf20 // Returns the value of GTEST_FLAG(catch_exceptions) at the moment}\par
830   {\cf20 // UnitTest::Run() starts.}\par
831   {\cf18 bool} catch_exceptions(){\cf17  const }\{ {\cf19 return} catch_exceptions_; \}\par
832 \par
833  {\cf17 private}:\par
834   {\cf17 friend} class ::testing::UnitTest;\par
835 \par
836   {\cf20 // Used by UnitTest::Run() to capture the state of}\par
837   {\cf20 // GTEST_FLAG(catch_exceptions) at the moment it starts.}\par
838   {\cf18 void} set_catch_exceptions({\cf18 bool} value) \{ catch_exceptions_ = value; \}\par
839 \par
840   {\cf20 // The UnitTest object that owns this implementation object.}\par
841   UnitTest* {\cf17 const} parent_;\par
842 \par
843   {\cf20 // The working directory when the first TEST() or TEST_F() was}\par
844   {\cf20 // executed.}\par
845   internal::FilePath original_working_dir_;\par
846 \par
847   {\cf20 // The default test part result reporters.}\par
848   DefaultGlobalTestPartResultReporter default_global_test_part_result_reporter_;\par
849   DefaultPerThreadTestPartResultReporter\par
850       default_per_thread_test_part_result_reporter_;\par
851 \par
852   {\cf20 // Points to (but doesn't own) the global test part result reporter.}\par
853   TestPartResultReporterInterface* global_test_part_result_reporter_;\par
854 \par
855   {\cf20 // Protects read and write access to global_test_part_result_reporter_.}\par
856   internal::Mutex global_test_part_result_reporter_mutex_;\par
857 \par
858   {\cf20 // Points to (but doesn't own) the per-thread test part result reporter.}\par
859   internal::ThreadLocal<TestPartResultReporterInterface*>\par
860       per_thread_test_part_result_reporter_;\par
861 \par
862   {\cf20 // The vector of environments that need to be set-up/torn-down}\par
863   {\cf20 // before/after the tests are run.}\par
864   std::vector<Environment*> environments_;\par
865 \par
866   {\cf20 // The vector of TestSuites in their original order.  It owns the}\par
867   {\cf20 // elements in the vector.}\par
868   std::vector<TestSuite*> test_suites_;\par
869 \par
870   {\cf20 // Provides a level of indirection for the test suite list to allow}\par
871   {\cf20 // easy shuffling and restoring the test suite order.  The i-th}\par
872   {\cf20 // element of this vector is the index of the i-th test suite in the}\par
873   {\cf20 // shuffled order.}\par
874   std::vector<int> test_suite_indices_;\par
875 \par
876   {\cf20 // ParameterizedTestRegistry object used to register value-parameterized}\par
877   {\cf20 // tests.}\par
878   internal::ParameterizedTestSuiteRegistry parameterized_test_registry_;\par
879   internal::TypeParameterizedTestSuiteRegistry\par
880       type_parameterized_test_registry_;\par
881 \par
882   {\cf20 // The set holding the name of parameterized}\par
883   {\cf20 // test suites that may go uninstantiated.}\par
884   std::set<std::string> ignored_parameterized_test_suites_;\par
885 \par
886   {\cf20 // Indicates whether RegisterParameterizedTests() has been called already.}\par
887   {\cf18 bool} parameterized_tests_registered_;\par
888 \par
889   {\cf20 // Index of the last death test suite registered.  Initially -1.}\par
890   {\cf18 int} last_death_test_suite_;\par
891 \par
892   {\cf20 // This points to the TestSuite for the currently running test.  It}\par
893   {\cf20 // changes as Google Test goes through one test suite after another.}\par
894   {\cf20 // When no test is running, this is set to NULL and Google Test}\par
895   {\cf20 // stores assertion results in ad_hoc_test_result_.  Initially NULL.}\par
896   TestSuite* current_test_suite_;\par
897 \par
898   {\cf20 // This points to the TestInfo for the currently running test.  It}\par
899   {\cf20 // changes as Google Test goes through one test after another.  When}\par
900   {\cf20 // no test is running, this is set to NULL and Google Test stores}\par
901   {\cf20 // assertion results in ad_hoc_test_result_.  Initially NULL.}\par
902   TestInfo* current_test_info_;\par
903 \par
904   {\cf20 // Normally, a user only writes assertions inside a TEST or TEST_F,}\par
905   {\cf20 // or inside a function called by a TEST or TEST_F.  Since Google}\par
906   {\cf20 // Test keeps track of which test is current running, it can}\par
907   {\cf20 // associate such an assertion with the test it belongs to.}\par
908   {\cf20 //}\par
909   {\cf20 // If an assertion is encountered when no TEST or TEST_F is running,}\par
910   {\cf20 // Google Test attributes the assertion result to an imaginary "ad hoc"}\par
911   {\cf20 // test, and records the result in ad_hoc_test_result_.}\par
912   TestResult ad_hoc_test_result_;\par
913 \par
914   {\cf20 // The list of event listeners that can be used to track events inside}\par
915   {\cf20 // Google Test.}\par
916   TestEventListeners listeners_;\par
917 \par
918   {\cf20 // The OS stack trace getter.  Will be deleted when the UnitTest}\par
919   {\cf20 // object is destructed.  By default, an OsStackTraceGetter is used,}\par
920   {\cf20 // but the user can set this field to use a custom getter if that is}\par
921   {\cf20 // desired.}\par
922   OsStackTraceGetterInterface* os_stack_trace_getter_;\par
923 \par
924   {\cf20 // True if and only if PostFlagParsingInit() has been called.}\par
925   {\cf18 bool} post_flag_parse_init_performed_;\par
926 \par
927   {\cf20 // The random number seed used at the beginning of the test run.}\par
928   {\cf18 int} random_seed_;\par
929 \par
930   {\cf20 // Our random number generator.}\par
931   internal::Random random_;\par
932 \par
933   {\cf20 // The time of the test program start, in ms from the start of the}\par
934   {\cf20 // UNIX epoch.}\par
935   TimeInMillis start_timestamp_;\par
936 \par
937   {\cf20 // How long the test took to run, in milliseconds.}\par
938   TimeInMillis elapsed_time_;\par
939 \par
940 {\cf21 #if GTEST_HAS_DEATH_TEST}\par
941   {\cf20 // The decomposed components of the gtest_internal_run_death_test flag,}\par
942   {\cf20 // parsed when RUN_ALL_TESTS is called.}\par
943   std::unique_ptr<InternalRunDeathTestFlag> internal_run_death_test_flag_;\par
944   std::unique_ptr<internal::DeathTestFactory> death_test_factory_;\par
945 {\cf21 #endif  }{\cf20 // GTEST_HAS_DEATH_TEST}\par
946 \par
947   {\cf20 // A per-thread stack of traces created by the SCOPED_TRACE() macro.}\par
948   internal::ThreadLocal<std::vector<TraceInfo> > gtest_trace_stack_;\par
949 \par
950   {\cf20 // The value of GTEST_FLAG(catch_exceptions) at the moment RunAllTests()}\par
951   {\cf20 // starts.}\par
952   {\cf18 bool} catch_exceptions_;\par
953 \par
954   UnitTestImpl({\cf17 const} UnitTestImpl&) = {\cf17 delete};\par
955   UnitTestImpl& operator=({\cf17 const} UnitTestImpl&) = {\cf17 delete};\par
956 \};  {\cf20 // class UnitTestImpl}\par
957 \par
958 {\cf20 // Convenience function for accessing the global UnitTest}\par
959 {\cf20 // implementation object.}\par
960 {\cf17 inline} UnitTestImpl* GetUnitTestImpl() \{\par
961   {\cf19 return} UnitTest::GetInstance()->impl();\par
962 \}\par
963 \par
964 {\cf21 #if GTEST_USES_SIMPLE_RE}\par
965 \par
966 {\cf20 // Internal helper functions for implementing the simple regular}\par
967 {\cf20 // expression matcher.}\par
968 GTEST_API_ {\cf18 bool} IsInSet({\cf18 char} ch, {\cf17 const} {\cf18 char}* str);\par
969 GTEST_API_ {\cf18 bool} IsAsciiDigit({\cf18 char} ch);\par
970 GTEST_API_ {\cf18 bool} IsAsciiPunct({\cf18 char} ch);\par
971 GTEST_API_ {\cf18 bool} IsRepeat({\cf18 char} ch);\par
972 GTEST_API_ {\cf18 bool} IsAsciiWhiteSpace({\cf18 char} ch);\par
973 GTEST_API_ {\cf18 bool} IsAsciiWordChar({\cf18 char} ch);\par
974 GTEST_API_ {\cf18 bool} IsValidEscape({\cf18 char} ch);\par
975 GTEST_API_ {\cf18 bool} AtomMatchesChar({\cf18 bool} escaped, {\cf18 char} pattern, {\cf18 char} ch);\par
976 GTEST_API_ {\cf18 bool} ValidateRegex({\cf17 const} {\cf18 char}* regex);\par
977 GTEST_API_ {\cf18 bool} MatchRegexAtHead({\cf17 const} {\cf18 char}* regex, {\cf17 const} {\cf18 char}* str);\par
978 GTEST_API_ {\cf18 bool} MatchRepetitionAndRegexAtHead({\cf18 bool} escaped, {\cf18 char} ch,\par
979                                               {\cf18 char} repeat, {\cf17 const} {\cf18 char}* regex,\par
980                                               {\cf17 const} {\cf18 char}* str);\par
981 GTEST_API_ {\cf18 bool} MatchRegexAnywhere({\cf17 const} {\cf18 char}* regex, {\cf17 const} {\cf18 char}* str);\par
982 \par
983 {\cf21 #endif  }{\cf20 // GTEST_USES_SIMPLE_RE}\par
984 \par
985 {\cf20 // Parses the command line for Google Test flags, without initializing}\par
986 {\cf20 // other parts of Google Test.}\par
987 GTEST_API_ {\cf18 void} ParseGoogleTestFlagsOnly({\cf18 int}* argc, {\cf18 char}** argv);\par
988 GTEST_API_ {\cf18 void} ParseGoogleTestFlagsOnly({\cf18 int}* argc, {\cf18 wchar_t}** argv);\par
989 \par
990 {\cf21 #if GTEST_HAS_DEATH_TEST}\par
991 \par
992 {\cf20 // Returns the message describing the last system error, regardless of the}\par
993 {\cf20 // platform.}\par
994 GTEST_API_ std::string GetLastErrnoDescription();\par
995 \par
996 {\cf20 // Attempts to parse a string into a positive integer pointed to by the}\par
997 {\cf20 // number parameter.  Returns true if that is possible.}\par
998 {\cf20 // GTEST_HAS_DEATH_TEST implies that we have ::std::string, so we can use}\par
999 {\cf20 // it here.}\par
1000 {\cf17 template} <{\cf17 typename} Integer>\par
1001 {\cf18 bool} ParseNaturalNumber(const ::std::string& str, Integer* number) \{\par
1002   {\cf20 // Fail fast if the given string does not begin with a digit;}\par
1003   {\cf20 // this bypasses strtoXXX's "optional leading whitespace and plus}\par
1004   {\cf20 // or minus sign" semantics, which are undesirable here.}\par
1005   {\cf19 if} (str.empty() || !IsDigit(str[0])) \{\par
1006     {\cf19 return} {\cf17 false};\par
1007   \}\par
1008   errno = 0;\par
1009 \par
1010   {\cf18 char}* end;\par
1011   {\cf20 // BiggestConvertible is the largest integer type that system-provided}\par
1012   {\cf20 // string-to-number conversion routines can return.}\par
1013   {\cf17 using }BiggestConvertible = {\cf18 unsigned} {\cf18 long} long;  {\cf20 // NOLINT}\par
1014 \par
1015   {\cf17 const} BiggestConvertible parsed = strtoull(str.c_str(), &end, 10);  {\cf20 // NOLINT}\par
1016   {\cf17 const} {\cf18 bool} parse_success = *end == {\cf23 '\\0'} && errno == 0;\par
1017 \par
1018   GTEST_CHECK_({\cf17 sizeof}(Integer) <= {\cf17 sizeof}(parsed));\par
1019 \par
1020   {\cf17 const} Integer result = {\cf17 static_cast<}Integer{\cf17 >}(parsed);\par
1021   {\cf19 if} (parse_success && {\cf17 static_cast<}BiggestConvertible{\cf17 >}(result) == parsed) \{\par
1022     *number = result;\par
1023     {\cf19 return} {\cf17 true};\par
1024   \}\par
1025   {\cf19 return} {\cf17 false};\par
1026 \}\par
1027 {\cf21 #endif  }{\cf20 // GTEST_HAS_DEATH_TEST}\par
1028 \par
1029 {\cf20 // TestResult contains some private methods that should be hidden from}\par
1030 {\cf20 // Google Test user but are required for testing. This class allow our tests}\par
1031 {\cf20 // to access them.}\par
1032 {\cf20 //}\par
1033 {\cf20 // This class is supplied only for the purpose of testing Google Test's own}\par
1034 {\cf20 // constructs. Do not use it in user tests, either directly or indirectly.}\par
1035 {\cf17 class }TestResultAccessor \{\par
1036  {\cf17 public}:\par
1037   {\cf17 static} {\cf18 void} RecordProperty(TestResult* test_result,\par
1038                              {\cf17 const} std::string& xml_element,\par
1039                              {\cf17 const} TestProperty& property) \{\par
1040     test_result->RecordProperty(xml_element, property);\par
1041   \}\par
1042 \par
1043   {\cf17 static} {\cf18 void} ClearTestPartResults(TestResult* test_result) \{\par
1044     test_result->ClearTestPartResults();\par
1045   \}\par
1046 \par
1047   {\cf17 static} {\cf17 const} std::vector<testing::TestPartResult>& test_part_results(\par
1048       {\cf17 const} TestResult& test_result) \{\par
1049     {\cf19 return} test_result.test_part_results();\par
1050   \}\par
1051 \};\par
1052 \par
1053 {\cf21 #if GTEST_CAN_STREAM_RESULTS_}\par
1054 \par
1055 {\cf20 // Streams test results to the given port on the given host machine.}\par
1056 {\cf17 class }StreamingListener : {\cf17 public} EmptyTestEventListener \{\par
1057  {\cf17 public}:\par
1058   {\cf20 // Abstract base class for writing strings to a socket.}\par
1059   {\cf17 class }AbstractSocketWriter \{\par
1060    {\cf17 public}:\par
1061     {\cf17 virtual} ~AbstractSocketWriter() \{\}\par
1062 \par
1063     {\cf20 // Sends a string to the socket.}\par
1064     {\cf17 virtual} {\cf18 void} Send({\cf17 const} std::string& message) = 0;\par
1065 \par
1066     {\cf20 // Closes the socket.}\par
1067     {\cf17 virtual} {\cf18 void} CloseConnection() \{\}\par
1068 \par
1069     {\cf20 // Sends a string and a newline to the socket.}\par
1070     {\cf18 void} SendLn({\cf17 const} std::string& message) \{ Send(message + {\cf22 "\\n"}); \}\par
1071   \};\par
1072 \par
1073   {\cf20 // Concrete class for actually writing strings to a socket.}\par
1074   {\cf17 class }SocketWriter : {\cf17 public} AbstractSocketWriter \{\par
1075    {\cf17 public}:\par
1076     SocketWriter({\cf17 const} std::string& host, {\cf17 const} std::string& port)\par
1077         : sockfd_(-1), host_name_(host), port_num_(port) \{\par
1078       MakeConnection();\par
1079     \}\par
1080 \par
1081     ~SocketWriter(){\cf17  override }\{\par
1082       {\cf19 if} (sockfd_ != -1) CloseConnection();\par
1083     \}\par
1084 \par
1085     {\cf20 // Sends a string to the socket.}\par
1086     {\cf18 void} Send({\cf17 const} std::string& message){\cf17  override }\{\par
1087       GTEST_CHECK_(sockfd_ != -1)\par
1088           << {\cf22 "Send() can be called only when there is a connection."};\par
1089 \par
1090       {\cf17 const} {\cf17 auto} len = {\cf17 static_cast<}{\cf18 size_t}{\cf17 >}(message.length());\par
1091       {\cf19 if} (write(sockfd_, message.c_str(), len) != {\cf17 static_cast<}ssize_t{\cf17 >}(len)) \{\par
1092         GTEST_LOG_(WARNING) << {\cf22 "stream_result_to: failed to stream to "}\par
1093                             << host_name_ << {\cf22 ":"} << port_num_;\par
1094       \}\par
1095     \}\par
1096 \par
1097    {\cf17 private}:\par
1098     {\cf20 // Creates a client socket and connects to the server.}\par
1099     {\cf18 void} MakeConnection();\par
1100 \par
1101     {\cf20 // Closes the socket.}\par
1102     {\cf18 void} CloseConnection(){\cf17  override }\{\par
1103       GTEST_CHECK_(sockfd_ != -1)\par
1104           << {\cf22 "CloseConnection() can be called only when there is a connection."};\par
1105 \par
1106       close(sockfd_);\par
1107       sockfd_ = -1;\par
1108     \}\par
1109 \par
1110     {\cf18 int} sockfd_;  {\cf20 // socket file descriptor}\par
1111     {\cf17 const} std::string host_name_;\par
1112     {\cf17 const} std::string port_num_;\par
1113 \par
1114     SocketWriter({\cf17 const} SocketWriter&) = {\cf17 delete};\par
1115     SocketWriter& operator=({\cf17 const} SocketWriter&) = {\cf17 delete};\par
1116   \};  {\cf20 // class SocketWriter}\par
1117 \par
1118   {\cf20 // Escapes '=', '&', '%', and '\\n' characters in str as "%xx".}\par
1119   {\cf17 static} std::string UrlEncode({\cf17 const} {\cf18 char}* str);\par
1120 \par
1121   StreamingListener({\cf17 const} std::string& host, {\cf17 const} std::string& port)\par
1122       : socket_writer_(new SocketWriter(host, port)) \{\par
1123     Start();\par
1124   \}\par
1125 \par
1126   {\cf17 explicit} StreamingListener(AbstractSocketWriter* socket_writer)\par
1127       : socket_writer_(socket_writer) \{\par
1128     Start();\par
1129   \}\par
1130 \par
1131   {\cf18 void} OnTestProgramStart({\cf17 const} UnitTest& {\cf20 /* unit_test */}){\cf17  override }\{\par
1132     SendLn({\cf22 "event=TestProgramStart"});\par
1133   \}\par
1134 \par
1135   {\cf18 void} OnTestProgramEnd({\cf17 const} UnitTest& unit_test){\cf17  override }\{\par
1136     {\cf20 // Note that Google Test current only report elapsed time for each}\par
1137     {\cf20 // test iteration, not for the entire test program.}\par
1138     SendLn({\cf22 "event=TestProgramEnd&passed="} + FormatBool(unit_test.Passed()));\par
1139 \par
1140     {\cf20 // Notify the streaming server to stop.}\par
1141     socket_writer_->CloseConnection();\par
1142   \}\par
1143 \par
1144   {\cf18 void} OnTestIterationStart({\cf17 const} UnitTest& {\cf20 /* unit_test */},\par
1145                             {\cf18 int} iteration){\cf17  override }\{\par
1146     SendLn({\cf22 "event=TestIterationStart&iteration="} +\par
1147            StreamableToString(iteration));\par
1148   \}\par
1149 \par
1150   {\cf18 void} OnTestIterationEnd({\cf17 const} UnitTest& unit_test,\par
1151                           {\cf18 int} {\cf20 /* iteration */}){\cf17  override }\{\par
1152     SendLn({\cf22 "event=TestIterationEnd&passed="} + FormatBool(unit_test.Passed()) +\par
1153            {\cf22 "&elapsed_time="} + StreamableToString(unit_test.elapsed_time()) +\par
1154            {\cf22 "ms"});\par
1155   \}\par
1156 \par
1157   {\cf20 // Note that "event=TestCaseStart" is a wire format and has to remain}\par
1158   {\cf20 // "case" for compatibility}\par
1159   {\cf18 void} OnTestSuiteStart({\cf17 const} TestSuite& test_suite){\cf17  override }\{\par
1160     SendLn(std::string({\cf22 "event=TestCaseStart&name="}) + test_suite.name());\par
1161   \}\par
1162 \par
1163   {\cf20 // Note that "event=TestCaseEnd" is a wire format and has to remain}\par
1164   {\cf20 // "case" for compatibility}\par
1165   {\cf18 void} OnTestSuiteEnd({\cf17 const} TestSuite& test_suite){\cf17  override }\{\par
1166     SendLn({\cf22 "event=TestCaseEnd&passed="} + FormatBool(test_suite.Passed()) +\par
1167            {\cf22 "&elapsed_time="} + StreamableToString(test_suite.elapsed_time()) +\par
1168            {\cf22 "ms"});\par
1169   \}\par
1170 \par
1171   {\cf18 void} OnTestStart({\cf17 const} TestInfo& test_info){\cf17  override }\{\par
1172     SendLn(std::string({\cf22 "event=TestStart&name="}) + test_info.name());\par
1173   \}\par
1174 \par
1175   {\cf18 void} OnTestEnd({\cf17 const} TestInfo& test_info){\cf17  override }\{\par
1176     SendLn({\cf22 "event=TestEnd&passed="} +\par
1177            FormatBool((test_info.result())->Passed()) + {\cf22 "&elapsed_time="} +\par
1178            StreamableToString((test_info.result())->elapsed_time()) + {\cf22 "ms"});\par
1179   \}\par
1180 \par
1181   {\cf18 void} OnTestPartResult({\cf17 const} TestPartResult& test_part_result){\cf17  override }\{\par
1182     {\cf17 const} {\cf18 char}* file_name = test_part_result.file_name();\par
1183     {\cf19 if} (file_name == {\cf17 nullptr}) file_name = {\cf22 ""};\par
1184     SendLn({\cf22 "event=TestPartResult&file="} + UrlEncode(file_name) +\par
1185            {\cf22 "&line="} + StreamableToString(test_part_result.line_number()) +\par
1186            {\cf22 "&message="} + UrlEncode(test_part_result.message()));\par
1187   \}\par
1188 \par
1189  {\cf17 private}:\par
1190   {\cf20 // Sends the given message and a newline to the socket.}\par
1191   {\cf18 void} SendLn({\cf17 const} std::string& message) \{ socket_writer_->SendLn(message); \}\par
1192 \par
1193   {\cf20 // Called at the start of streaming to notify the receiver what}\par
1194   {\cf20 // protocol we are using.}\par
1195   {\cf18 void} Start() \{ SendLn({\cf22 "gtest_streaming_protocol_version=1.0"}); \}\par
1196 \par
1197   std::string FormatBool({\cf18 bool} value) \{ {\cf19 return} value ? {\cf22 "1"} : {\cf22 "0"}; \}\par
1198 \par
1199   {\cf17 const} std::unique_ptr<AbstractSocketWriter> socket_writer_;\par
1200 \par
1201   StreamingListener({\cf17 const} StreamingListener&) = {\cf17 delete};\par
1202   StreamingListener& operator=({\cf17 const} StreamingListener&) = {\cf17 delete};\par
1203 \};  {\cf20 // class StreamingListener}\par
1204 \par
1205 {\cf21 #endif  }{\cf20 // GTEST_CAN_STREAM_RESULTS_}\par
1206 \par
1207 \}  {\cf20 // namespace internal}\par
1208 \}  {\cf20 // namespace testing}\par
1209 \par
1210 GTEST_DISABLE_MSC_WARNINGS_POP_()  {\cf20 //  4251}\par
1211 \par
1212 {\cf21 #endif  }{\cf20 // GOOGLETEST_SRC_GTEST_INTERNAL_INL_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
googletest-param-test-test.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googletest/test/googletest-param-test-test.h}
{\xe \v lib/googletest-main/googletest/test/googletest-param-test-test.h}
{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2008, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 {\cf20 //}\par
30 {\cf20 // The Google C++ Testing and Mocking Framework (Google Test)}\par
31 {\cf20 //}\par
32 {\cf20 // This header file provides classes and functions used internally}\par
33 {\cf20 // for testing Google Test itself.}\par
34 \par
35 {\cf21 #ifndef GOOGLETEST_TEST_GOOGLETEST_PARAM_TEST_TEST_H_}\par
36 {\cf21 #define GOOGLETEST_TEST_GOOGLETEST_PARAM_TEST_TEST_H_}\par
37 \par
38 {\cf21 #include "gtest/gtest.h"}\par
39 \par
40 {\cf20 // Test fixture for testing definition and instantiation of a test}\par
41 {\cf20 // in separate translation units.}\par
42 {\cf17 class }ExternalInstantiationTest : {\cf17 public} ::testing::TestWithParam<int> \{\};\par
43 \par
44 {\cf20 // Test fixture for testing instantiation of a test in multiple}\par
45 {\cf20 // translation units.}\par
46 {\cf17 class }InstantiationInMultipleTranslationUnitsTest\par
47     : {\cf17 public} ::testing::TestWithParam<int> \{\};\par
48 \par
49 {\cf21 #endif  }{\cf20 // GOOGLETEST_TEST_GOOGLETEST_PARAM_TEST_TEST_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest-typed-test_test.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googletest/test/gtest-typed-test_test.h}
{\xe \v lib/googletest-main/googletest/test/gtest-typed-test_test.h}
{\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2008 Google Inc.}\par
2 {\cf20 // All Rights Reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf21 #ifndef GOOGLETEST_TEST_GTEST_TYPED_TEST_TEST_H_}\par
31 {\cf21 #define GOOGLETEST_TEST_GTEST_TYPED_TEST_TEST_H_}\par
32 \par
33 {\cf21 #include "gtest/gtest.h"}\par
34 \par
35 {\cf17 using }testing::Test;\par
36 \par
37 {\cf20 // For testing that the same type-parameterized test case can be}\par
38 {\cf20 // instantiated in different translation units linked together.}\par
39 {\cf20 // ContainerTest will be instantiated in both gtest-typed-test_test.cc}\par
40 {\cf20 // and gtest-typed-test2_test.cc.}\par
41 \par
42 {\cf17 template} <{\cf17 typename} T>\par
43 {\cf17 class }ContainerTest : {\cf17 public} Test \{\};\par
44 \par
45 TYPED_TEST_SUITE_P(ContainerTest);\par
46 \par
47 TYPED_TEST_P(ContainerTest, CanBeDefaultConstructed) \{ TypeParam container; \}\par
48 \par
49 TYPED_TEST_P(ContainerTest, InitialSizeIsZero) \{\par
50   TypeParam container;\par
51   EXPECT_EQ(0U, container.size());\par
52 \}\par
53 \par
54 REGISTER_TYPED_TEST_SUITE_P(ContainerTest, CanBeDefaultConstructed,\par
55                             InitialSizeIsZero);\par
56 \par
57 {\cf21 #endif  }{\cf20 // GOOGLETEST_TEST_GTEST_TYPED_TEST_TEST_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
production.h\par \pard\plain 
{\tc\tcl2 \v lib/googletest-main/googletest/test/production.h}
{\xe \v lib/googletest-main/googletest/test/production.h}
{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // Copyright 2006, Google Inc.}\par
2 {\cf20 // All rights reserved.}\par
3 {\cf20 //}\par
4 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
5 {\cf20 // modification, are permitted provided that the following conditions are}\par
6 {\cf20 // met:}\par
7 {\cf20 //}\par
8 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
9 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
10 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
11 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
12 {\cf20 // in the documentation and/or other materials provided with the}\par
13 {\cf20 // distribution.}\par
14 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
15 {\cf20 // contributors may be used to endorse or promote products derived from}\par
16 {\cf20 // this software without specific prior written permission.}\par
17 {\cf20 //}\par
18 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
19 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
20 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
21 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
22 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
23 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
24 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
25 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
26 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
27 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
28 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
29 \par
30 {\cf20 //}\par
31 {\cf20 // This is part of the unit test for gtest_prod.h.}\par
32 \par
33 {\cf21 #ifndef GOOGLETEST_TEST_PRODUCTION_H_}\par
34 {\cf21 #define GOOGLETEST_TEST_PRODUCTION_H_}\par
35 \par
36 {\cf21 #include "gtest/gtest_prod.h"}\par
37 \par
38 {\cf17 class }PrivateCode \{\par
39  {\cf17 public}:\par
40   {\cf20 // Declares a friend test that does not use a fixture.}\par
41   FRIEND_TEST(PrivateCodeTest, CanAccessPrivateMembers);\par
42 \par
43   {\cf20 // Declares a friend test that uses a fixture.}\par
44   FRIEND_TEST(PrivateCodeFixtureTest, CanAccessPrivateMembers);\par
45 \par
46   PrivateCode();\par
47 \par
48   {\cf18 int} x(){\cf17  const }\{ {\cf19 return} x_; \}\par
49 \par
50  {\cf17 private}:\par
51   {\cf18 void} set_x({\cf18 int} an_x) \{ x_ = an_x; \}\par
52   {\cf18 int} x_;\par
53 \};\par
54 \par
55 {\cf21 #endif  }{\cf20 // GOOGLETEST_TEST_PRODUCTION_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Pieces.h\par \pard\plain 
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #ifndef CHESS_PIECES_H}\par
2 {\cf21 #define CHESS_PIECES_H}\par
3 \par
4 {\cf21 #include <utility>}\par
5 {\cf21 #include <iostream>}\par
6 {\cf21 #include <vector>}\par
7 \par
11 {\cf17 struct }Piece\{\par
12 {\cf17 protected}:\par
14     {\cf18 int} color\{\}; {\cf20 // black, white}\par
15     std::string name;\par
16     std::string position;\par
17     std::string c;\par
18     {\cf18 int} moves = 0;\par
19 {\cf17 public}:\par
25     {\cf17 virtual} std::vector<std::string> possible_moves(std::string &move) = 0;\par
26     {\cf17 virtual} {\cf18 void} check_move() = 0;\par
27     {\cf17 virtual} std::string GetN() = 0;\par
28     {\cf17 virtual} {\cf18 void} GetC() = 0;\par
29     {\cf17 virtual} {\cf18 int} GetColor() = 0;\par
30     {\cf17 virtual} {\cf18 void} increment() = 0;\par
31     {\cf17 virtual} {\cf18 int} GetM() = 0;\par
32     {\cf20 //virtual ~Piece() = default;}\par
33 \};\par
34 \par
35 {\cf17 struct }King: {\cf17 public} Piece\{\par
36 {\cf17 public}:\par
37     King({\cf18 int} color, std::string position)\{\par
38         name = {\cf22 "King"};\par
39         this->color = color;\par
40         this->position = std::move(position);\par
41         {\cf19 if}(color == 1) c = {\cf22 "\'E2\'99\'9A"};\par
42         {\cf19 else} c = {\cf22 "\'E2\'99\'94"};\par
43     \}\par
44     std::vector<std::string> possible_moves(std::string &move) {\cf17 override};\par
45     {\cf18 void} check_move(){\cf17  override}\{\}\par
46     std::string GetN(){\cf17  override}\{\par
47         {\cf19 return} this->name;\par
48     \}\par
49     {\cf18 void} GetC(){\cf17  override}\{\par
50         std::cout << this->c;\par
51     \}\par
52     {\cf18 int} GetColor(){\cf17  override}\{\par
53         {\cf19 return} this->color;\par
54     \}\par
55     {\cf18 void} increment(){\cf17  override}\{\par
56         this->moves++;\par
57     \}\par
58     {\cf18 int} GetM(){\cf17  override}\{\par
59         {\cf19 return} this->moves;\par
60     \}\par
61 \};\par
62 \par
63 {\cf17 struct }Queen: {\cf17 public} Piece\{\par
64 {\cf17 public}:\par
65     Queen({\cf18 int} color, std::string position)\{\par
66         name = {\cf22 "Queen"};\par
67         this->color = color;\par
68         this->position = std::move(position);\par
69         {\cf19 if}(color == 1) c = {\cf22 "\'E2\'99\'9B"};\par
70         {\cf19 else} c = {\cf22 "\'E2\'99\'95"};\par
71     \}\par
72     std::vector<std::string> possible_moves(std::string &move) {\cf17 override};\par
73     {\cf18 void} check_move(){\cf17  override}\{\}\par
74     std::string GetN(){\cf17  override}\{\par
75         {\cf19 return} this->name;\par
76     \}\par
77     {\cf18 void} GetC(){\cf17  override}\{\par
78         std::cout << this->c;\par
79     \}\par
80     {\cf18 int} GetColor(){\cf17  override}\{\par
81         {\cf19 return} this->color;\par
82     \}\par
83     {\cf18 void} increment(){\cf17  override}\{\par
84         this->moves++;\par
85     \}\par
86     {\cf18 int} GetM(){\cf17  override}\{\par
87         {\cf19 return} this->moves;\par
88     \}\par
89 \};\par
90 \par
91 {\cf17 struct }Bishop: {\cf17 public} Piece\{\par
92 {\cf17 public}:\par
93     Bishop({\cf18 int} color, std::string position)\{\par
94         name = {\cf22 "Bishop"};\par
95         this->color = color;\par
96         this->position = std::move(position);\par
97         {\cf19 if}(color == 1) c = {\cf22 "\'E2\'99\'9D"};\par
98         {\cf19 else} c = {\cf22 "\'E2\'99\'97"};\par
99     \}\par
100     std::vector<std::string> possible_moves(std::string &move) {\cf17 override};\par
101     {\cf18 void} check_move(){\cf17  override}\{\}\par
102     std::string GetN(){\cf17  override}\{\par
103         {\cf19 return} this->name;\par
104     \}\par
105     {\cf18 void} GetC(){\cf17  override}\{\par
106         std::cout << this->c;\par
107     \}\par
108     {\cf18 int} GetColor(){\cf17  override}\{\par
109         {\cf19 return} this->color;\par
110     \}\par
111     {\cf18 void} increment(){\cf17  override}\{\par
112         this->moves++;\par
113     \}\par
114     {\cf18 int} GetM(){\cf17  override}\{\par
115         {\cf19 return} this->moves;\par
116     \}\par
117 \};\par
118 \par
119 {\cf17 struct }Knight: {\cf17 public} Piece\{\par
120 {\cf17 public}:\par
121     Knight({\cf18 int} color, std::string position)\{\par
122         name = {\cf22 "Knight"};\par
123         this->color = color;\par
124         this->position = std::move(position);\par
125         {\cf19 if}(color == 1) c = {\cf22 "\'E2\'99\'9E"};\par
126         {\cf19 else} c = {\cf22 "\'E2\'99\'98"};\par
127     \}\par
128     std::vector<std::string> possible_moves(std::string &move) {\cf17 override};\par
129     {\cf18 void} check_move(){\cf17  override}\{\}\par
130     std::string GetN(){\cf17  override}\{\par
131         {\cf19 return} this->name;\par
132     \}\par
133     {\cf18 void} GetC(){\cf17  override}\{\par
134         std::cout << this->c;\par
135     \}\par
136     {\cf18 int} GetColor(){\cf17  override}\{\par
137         {\cf19 return} this->color;\par
138     \}\par
139     {\cf18 void} increment(){\cf17  override}\{\par
140         this->moves++;\par
141     \}\par
142     {\cf18 int} GetM(){\cf17  override}\{\par
143         {\cf19 return} this->moves;\par
144     \}\par
145 \};\par
146 \par
147 {\cf17 struct }Rook: {\cf17 public} Piece\{\par
148 {\cf17 public}:\par
149     Rook({\cf18 int} color, std::string position)\{\par
150         name = {\cf22 "Rook"};\par
151         this->color = color;\par
152         this->position = std::move(position);\par
153         {\cf19 if}(color == 1) c = {\cf22 "\'E2\'99\'9C"};\par
154         {\cf19 else} c = {\cf22 "\'E2\'99\'96"};\par
155     \}\par
156     std::vector<std::string> possible_moves(std::string &move) {\cf17 override};\par
157     {\cf18 void} check_move(){\cf17  override}\{\}\par
158     std::string GetN(){\cf17  override}\{\par
159         {\cf19 return} this->name;\par
160     \}\par
161     {\cf18 void} GetC(){\cf17  override}\{\par
162         std::cout << this->c;\par
163     \}\par
164     {\cf18 int} GetColor(){\cf17  override}\{\par
165         {\cf19 return} this->color;\par
166     \}\par
167     {\cf18 void} increment(){\cf17  override}\{\par
168         this->moves++;\par
169     \}\par
170     {\cf18 int} GetM(){\cf17  override}\{\par
171         {\cf19 return} this->moves;\par
172     \}\par
173 \};\par
174 \par
175 {\cf17 struct }Pawn: {\cf17 public} Piece\{\par
176 {\cf17 public}:\par
177     Pawn({\cf18 int} color, std::string position)\{\par
178         name = {\cf22 "Pawn"};\par
179         this->color = color;\par
180         this->position = std::move(position);\par
181         {\cf19 if}(color == 1) c = {\cf22 "\'E2\'99\'9F"};\par
182         {\cf19 else} c = {\cf22 "\'E2\'99\'99"};\par
183     \}\par
184     std::vector<std::string> possible_moves(std::string &move) {\cf17 override};\par
185     {\cf18 void} check_move(){\cf17  override}\{\}\par
186     std::string GetN(){\cf17  override}\{\par
187         {\cf19 return} this->name;\par
188     \}\par
189     {\cf18 void} GetC(){\cf17  override}\{\par
190         std::cout << this->c;\par
191     \}\par
192     {\cf18 int} GetColor(){\cf17  override}\{\par
193         {\cf19 return} this->color;\par
194     \}\par
195     {\cf18 void} increment(){\cf17  override}\{\par
196         this->moves++;\par
197     \}\par
198     {\cf18 int} GetM(){\cf17  override}\{\par
199         {\cf19 return} this->moves;\par
200     \}\par
201 \};\par
202 \par
203 {\cf21 #endif }{\cf20 //CHESS_PIECES_H}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
my_vector.h\par \pard\plain 
{\tc\tcl2 \v Vector/my_vector.h}
{\xe \v Vector/my_vector.h}
{\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #ifndef CHESS_VECTOR_H}\par
2 {\cf21 #define CHESS_VECTOR_H}\par
3 {\cf21 #include <iostream>}\par
4 \par
5 \par
6 {\cf17 template}<{\cf17 typename} T> {\cf17 class }Vector\{\par
7 {\cf17 private}:\par
8     T *arr;\par
9     {\cf18 size_t} sz; {\cf20 // \'D1\'80\'D0\'B0\'D0\'B7\'D0\'BC\'D0\'B5\'D1\'80}\par
10     {\cf18 size_t} cap; {\cf20 // \'D0\'B2\'D1\'8B\'D0\'B4\'D0\'B5\'D0\'BB \'D0\'BF\'D0\'B0\'D0\'BC\'D1\'8F\'D1\'82\'D1\'8C}\par
11 {\cf17 public}:\par
12     Vector()\{\par
13         sz = 0;\par
14         cap = 0;\par
15         arr = {\cf17 nullptr};\par
16     \};\par
17 \par
18     {\cf17 explicit} Vector({\cf18 int} s)\{\par
19         sz = s;\par
20         cap = s;\par
21         arr = {\cf17 new} T[s];\par
22         {\cf19 for}({\cf18 int} i; i < sz; ++i)\par
23             arr[i] = T();\par
24     \};\par
25 \par
26     {\cf18 size_t} size(){\cf17  const}\{\par
27         {\cf19 return} sz;\par
28     \}\par
29     {\cf18 size_t} capacity(){\cf17  const}\{\par
30         {\cf19 return} cap;\par
31     \}\par
32 \par
33     {\cf18 void} reserve({\cf18 size_t} n)\{\par
34         {\cf19 if}(n <= cap) {\cf19 return};\par
35         T* newarr = {\cf17 reinterpret_cast<}T*{\cf17 >}({\cf17 new} uint8_t[n * {\cf17 sizeof}(T)]);\par
36         {\cf20 //T* newarr = new T[n];}\par
37         {\cf19 for}({\cf18 size_t} i = 0; i < sz; ++i)\{\par
38             {\cf17 new} (newarr + i) T(arr[i]); {\cf20 //placement new}\par
39             {\cf20 //newarr[i] = arr[i];}\par
40         \}\par
41         {\cf19 for}({\cf18 size_t} i = 0; i < sz; ++i) \{\par
42             (arr + i)->~T();\par
43         \}\par
44         {\cf17 delete}[] {\cf17 reinterpret_cast<}uint8_t*{\cf17 >}(arr);\par
45         arr = newarr;\par
46         cap = n;\par
47     \}\par
48 \par
49     {\cf18 void} resize({\cf18 size_t} n, {\cf17 const} T& value = T())\{\par
50         {\cf19 if}(n > cap) reserve(n);\par
51         {\cf19 for}({\cf18 size_t} i = sz; i < n; ++i) \{\par
52             {\cf17 new}(arr+i) T(value);\par
53         \}\par
54         {\cf19 if}(n < sz)\{\par
55             sz = n;\par
56         \}\par
57     \}\par
58 \par
59     {\cf18 void} push_back({\cf17 const} T& value)\{\par
60         {\cf19 if}(cap == 0) reserve(10);\par
61         {\cf19 if}(cap == sz) \{\par
62             reserve(2 * sz);\par
63         \}\par
64         {\cf17 new} (arr+sz) T(value);\par
65         {\cf20 //arr[sz] = value}\par
66         ++sz;\par
67     \}\par
68 \par
69     {\cf18 void} pop_back() \{\par
70         --sz;\par
71         (arr+sz)->~T();\par
72     \}\par
73 \par
74     ~Vector() \{\par
75         {\cf19 for}({\cf18 size_t} i = 0; i < sz; ++i) \{\par
76             (arr + i)->~T();\par
77         \}\par
78         {\cf17 delete}[] {\cf17 reinterpret_cast<}uint8_t*{\cf17 >}(arr);\par
79     \}\par
80 \par
81 {\cf20 //    int& operator [](int i)\{}\par
82 {\cf20 //        return arr[i];}\par
83 {\cf20 //    \}}\par
84     T& operator [] ({\cf18 int} ind)\{\par
85         {\cf19 return} arr[ind];\par
86     \}\par
87     {\cf17 const} T& operator[]({\cf18 int} ind){\cf17  const}\{\par
88         {\cf19 return} arr[ind];\par
89     \}\par
90 \par
91     {\cf17 class }iterator\{\par
92     {\cf17 private}:\par
93         T* it;\par
94     {\cf17 public}:\par
95         {\cf17 explicit} iterator(T* p)\{\par
96             it = p;\par
97         \}\par
98 \par
99         {\cf18 void} A()\{\par
100             std::cout << {\cf22 "AAAAAA"};\par
101         \}\par
102 \par
103         iterator& B() \{\par
104             it--;\par
105             {\cf19 return} *{\cf17 this};\par
106         \}\par
107 \par
108         iterator& operator++() \{\par
109             it++;\par
110             {\cf19 return} *{\cf17 this};\par
111         \}\par
112 \par
113         iterator& operator--() \{\par
114             it--;\par
115             {\cf19 return} *{\cf17 this};\par
116         \}\par
117 \par
118         T& operator*() \{\par
119             {\cf19 return} *it;\par
120         \}\par
121 \par
122         {\cf18 bool} operator==({\cf17 const} iterator& b){\cf17  const }\{\par
123             {\cf19 return} *it == *b.it;\par
124         \}\par
125 \par
126         {\cf18 bool} operator!=({\cf17 const} iterator& b){\cf17  const }\{\par
127             {\cf19 return} *it != *b.it;\par
128         \}\par
129     \};\par
130 \par
131     iterator begin()\{\par
132         {\cf19 return} iterator(&arr[0]);\par
133     \}\par
134 \par
135     iterator end()\{\par
136         {\cf19 return} Vector<T>::iterator(&arr[sz]);\par
137     \};\par
138 \par
139     {\cf18 bool} empty(){\cf17  const }\{\par
140         {\cf19 return} (sz == 0);\par
141     \};\par
142 \par
143 \};\par
144 \par
145 \par
146 \par
147 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
view.h\par \pard\plain 
{\tc\tcl2 \v view/view.h}
{\xe \v view/view.h}
{\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #ifndef CHESS_VIEW_H}\par
2 {\cf21 #define CHESS_VIEW_H}\par
3 {\cf18 void} print_board(std::vector<std::vector<Piece *>> pieces);\par
4 {\cf18 void} print_history(History history);\par
5 {\cf18 void} print_formal(History history);\par
6 {\cf18 void} print_state(State state);\par
7 {\cf18 void} print_verdict(Verdict verdict);\par
8 {\cf21 #endif }{\cf20 //CHESS_VIEW_H}\par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Index\par 
\pard\plain 
{\tc \v Index}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}
